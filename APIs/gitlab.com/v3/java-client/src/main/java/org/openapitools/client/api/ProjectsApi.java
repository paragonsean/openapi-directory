/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessRequester;
import org.openapitools.client.model.AwardEmoji;
import org.openapitools.client.model.BasicProjectDetails;
import org.openapitools.client.model.Board;
import org.openapitools.client.model.Build;
import org.openapitools.client.model.CommitNote;
import org.openapitools.client.model.CommitStatus;
import org.openapitools.client.model.Compare;
import org.openapitools.client.model.Contributor;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.Environment;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.Issue;
import org.openapitools.client.model.Label;
import org.openapitools.client.model.MRNote;
import org.openapitools.client.model.Member;
import org.openapitools.client.model.MergeRequest;
import org.openapitools.client.model.MergeRequestChanges;
import org.openapitools.client.model.MergeRequestDiff;
import org.openapitools.client.model.MergeRequestDiffFull;
import org.openapitools.client.model.Milestone;
import org.openapitools.client.model.ModelList;
import org.openapitools.client.model.Note;
import org.openapitools.client.model.NotificationSetting;
import org.openapitools.client.model.Pipeline;
import org.openapitools.client.model.PostV3GroupsIdMembersRequest;
import org.openapitools.client.model.PostV3ProjectsForkIdRequest;
import org.openapitools.client.model.PostV3ProjectsIdBoardsBoardIdListsRequest;
import org.openapitools.client.model.PostV3ProjectsIdDeployKeysRequest;
import org.openapitools.client.model.PostV3ProjectsIdEnvironmentsRequest;
import org.openapitools.client.model.PostV3ProjectsIdHooksRequest;
import org.openapitools.client.model.PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest;
import org.openapitools.client.model.PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest;
import org.openapitools.client.model.PostV3ProjectsIdIssuesIssueIdMoveRequest;
import org.openapitools.client.model.PostV3ProjectsIdIssuesNoteableIdNotesRequest;
import org.openapitools.client.model.PostV3ProjectsIdIssuesRequest;
import org.openapitools.client.model.PostV3ProjectsIdLabelsRequest;
import org.openapitools.client.model.PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest;
import org.openapitools.client.model.PostV3ProjectsIdMergeRequestsRequest;
import org.openapitools.client.model.PostV3ProjectsIdMilestonesRequest;
import org.openapitools.client.model.PostV3ProjectsIdPipelineRequest;
import org.openapitools.client.model.PostV3ProjectsIdRefRefTriggerBuildsRequest;
import org.openapitools.client.model.PostV3ProjectsIdRepositoryBranchesRequest;
import org.openapitools.client.model.PostV3ProjectsIdRepositoryCommitsRequest;
import org.openapitools.client.model.PostV3ProjectsIdRepositoryCommitsShaCherryPickRequest;
import org.openapitools.client.model.PostV3ProjectsIdRepositoryCommitsShaCommentsRequest;
import org.openapitools.client.model.PostV3ProjectsIdRepositoryTagsRequest;
import org.openapitools.client.model.PostV3ProjectsIdRunnersRequest;
import org.openapitools.client.model.PostV3ProjectsIdShareRequest;
import org.openapitools.client.model.PostV3ProjectsIdSnippetsRequest;
import org.openapitools.client.model.PostV3ProjectsIdStatusesShaRequest;
import org.openapitools.client.model.PostV3ProjectsIdUploadsRequest;
import org.openapitools.client.model.PostV3ProjectsIdVariablesRequest;
import org.openapitools.client.model.PostV3ProjectsRequest;
import org.openapitools.client.model.PostV3ProjectsUserUserIdRequest;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectGroupLink;
import org.openapitools.client.model.ProjectHook;
import org.openapitools.client.model.ProjectService;
import org.openapitools.client.model.ProjectSnippet;
import org.openapitools.client.model.ProjectWithAccess;
import org.openapitools.client.model.PutV3GroupsIdAccessRequestsUserIdApproveRequest;
import org.openapitools.client.model.PutV3GroupsIdMembersUserIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdBoardsBoardIdListsListIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdEnvironmentsEnvironmentIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdIssuesIssueIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdLabelsRequest;
import org.openapitools.client.model.PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest;
import org.openapitools.client.model.PutV3ProjectsIdMergeRequestMergeRequestIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdMilestonesMilestoneIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdNotificationSettingsRequest;
import org.openapitools.client.model.PutV3ProjectsIdRepositoryBranchesBranchProtectRequest;
import org.openapitools.client.model.PutV3ProjectsIdRepositoryFilesRequest;
import org.openapitools.client.model.PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest;
import org.openapitools.client.model.PutV3ProjectsIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesAsanaRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesAssemblaRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesBambooRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesBugzillaRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesBuildkiteRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesBuildsEmailRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesCampfireRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesDroneCiRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesEmailsOnPushRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesExternalWikiRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesFlowdockRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesGemnasiumRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesHipchatRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesIrkerRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesJiraRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesKubernetesRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesMattermostRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesMattermostSlashCommandsRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesPipelinesEmailRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesPivotaltrackerRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesPushoverRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesRedmineRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesSlackRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesSlackSlashCommandsRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesTeamcityRequest;
import org.openapitools.client.model.PutV3ProjectsIdSnippetsSnippetIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdVariablesKeyRequest;
import org.openapitools.client.model.Release;
import org.openapitools.client.model.RepoBranch;
import org.openapitools.client.model.RepoCommit;
import org.openapitools.client.model.RepoCommitDetail;
import org.openapitools.client.model.RepoTag;
import org.openapitools.client.model.RepoTreeObject;
import org.openapitools.client.model.Runner;
import org.openapitools.client.model.SSHKey;
import org.openapitools.client.model.Todo;
import org.openapitools.client.model.Trigger;
import org.openapitools.client.model.TriggerRequest;
import org.openapitools.client.model.UserBasic;
import org.openapitools.client.model.Variable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteV3ProjectsId
     * @param id The ID of a project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remove a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsId(Async)");
        }

        return deleteV3ProjectsIdCall(id, _callback);

    }

    /**
     * Remove a project
     * Remove a project
     * @param id The ID of a project (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remove a project </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3ProjectsId(String id) throws ApiException {
        deleteV3ProjectsIdWithHttpInfo(id);
    }

    /**
     * Remove a project
     * Remove a project
     * @param id The ID of a project (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remove a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3ProjectsIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a project (asynchronously)
     * Remove a project
     * @param id The ID of a project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remove a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdAccessRequestsUserId
     * @param id The project ID (required)
     * @param userId The user ID of the access requester (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdAccessRequestsUserIdCall(String id, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/access_requests/{user_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdAccessRequestsUserIdValidateBeforeCall(String id, Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdAccessRequestsUserId(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteV3ProjectsIdAccessRequestsUserId(Async)");
        }

        return deleteV3ProjectsIdAccessRequestsUserIdCall(id, userId, _callback);

    }

    /**
     * Denies an access request for the given user.
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param userId The user ID of the access requester (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3ProjectsIdAccessRequestsUserId(String id, Integer userId) throws ApiException {
        deleteV3ProjectsIdAccessRequestsUserIdWithHttpInfo(id, userId);
    }

    /**
     * Denies an access request for the given user.
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param userId The user ID of the access requester (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3ProjectsIdAccessRequestsUserIdWithHttpInfo(String id, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdAccessRequestsUserIdValidateBeforeCall(id, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Denies an access request for the given user. (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param userId The user ID of the access requester (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdAccessRequestsUserIdAsync(String id, Integer userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdAccessRequestsUserIdValidateBeforeCall(id, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdBoardsBoardIdListsListId
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param listId The ID of a board list (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a board list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdBoardsBoardIdListsListIdCall(String id, Integer boardId, Integer listId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/boards/{board_id}/lists/{list_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()))
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdBoardsBoardIdListsListIdValidateBeforeCall(String id, Integer boardId, Integer listId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdBoardsBoardIdListsListId(Async)");
        }

        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling deleteV3ProjectsIdBoardsBoardIdListsListId(Async)");
        }

        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling deleteV3ProjectsIdBoardsBoardIdListsListId(Async)");
        }

        return deleteV3ProjectsIdBoardsBoardIdListsListIdCall(id, boardId, listId, _callback);

    }

    /**
     * Delete a board list
     * This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param listId The ID of a board list (required)
     * @return ModelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a board list </td><td>  -  </td></tr>
     </table>
     */
    public ModelList deleteV3ProjectsIdBoardsBoardIdListsListId(String id, Integer boardId, Integer listId) throws ApiException {
        ApiResponse<ModelList> localVarResp = deleteV3ProjectsIdBoardsBoardIdListsListIdWithHttpInfo(id, boardId, listId);
        return localVarResp.getData();
    }

    /**
     * Delete a board list
     * This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param listId The ID of a board list (required)
     * @return ApiResponse&lt;ModelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a board list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelList> deleteV3ProjectsIdBoardsBoardIdListsListIdWithHttpInfo(String id, Integer boardId, Integer listId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdBoardsBoardIdListsListIdValidateBeforeCall(id, boardId, listId, null);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a board list (asynchronously)
     * This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param listId The ID of a board list (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a board list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdBoardsBoardIdListsListIdAsync(String id, Integer boardId, Integer listId, final ApiCallback<ModelList> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdBoardsBoardIdListsListIdValidateBeforeCall(id, boardId, listId, _callback);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdDeployKeysKeyId
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdDeployKeysKeyIdCall(String id, Integer keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/deploy_keys/{key_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdDeployKeysKeyIdValidateBeforeCall(String id, Integer keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdDeployKeysKeyId(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling deleteV3ProjectsIdDeployKeysKeyId(Async)");
        }

        return deleteV3ProjectsIdDeployKeysKeyIdCall(id, keyId, _callback);

    }

    /**
     * Delete deploy key for a project
     * Delete deploy key for a project
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey deleteV3ProjectsIdDeployKeysKeyId(String id, Integer keyId) throws ApiException {
        ApiResponse<SSHKey> localVarResp = deleteV3ProjectsIdDeployKeysKeyIdWithHttpInfo(id, keyId);
        return localVarResp.getData();
    }

    /**
     * Delete deploy key for a project
     * Delete deploy key for a project
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> deleteV3ProjectsIdDeployKeysKeyIdWithHttpInfo(String id, Integer keyId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdDeployKeysKeyIdValidateBeforeCall(id, keyId, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete deploy key for a project (asynchronously)
     * Delete deploy key for a project
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdDeployKeysKeyIdAsync(String id, Integer keyId, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdDeployKeysKeyIdValidateBeforeCall(id, keyId, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdDeployKeysKeyIdDisable
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable a deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdDeployKeysKeyIdDisableCall(String id, Integer keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/deploy_keys/{key_id}/disable"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdDeployKeysKeyIdDisableValidateBeforeCall(String id, Integer keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdDeployKeysKeyIdDisable(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling deleteV3ProjectsIdDeployKeysKeyIdDisable(Async)");
        }

        return deleteV3ProjectsIdDeployKeysKeyIdDisableCall(id, keyId, _callback);

    }

    /**
     * Disable a deploy key for a project
     * This feature was added in GitLab 8.11
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable a deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey deleteV3ProjectsIdDeployKeysKeyIdDisable(String id, Integer keyId) throws ApiException {
        ApiResponse<SSHKey> localVarResp = deleteV3ProjectsIdDeployKeysKeyIdDisableWithHttpInfo(id, keyId);
        return localVarResp.getData();
    }

    /**
     * Disable a deploy key for a project
     * This feature was added in GitLab 8.11
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable a deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> deleteV3ProjectsIdDeployKeysKeyIdDisableWithHttpInfo(String id, Integer keyId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdDeployKeysKeyIdDisableValidateBeforeCall(id, keyId, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable a deploy key for a project (asynchronously)
     * This feature was added in GitLab 8.11
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable a deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdDeployKeysKeyIdDisableAsync(String id, Integer keyId, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdDeployKeysKeyIdDisableValidateBeforeCall(id, keyId, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdEnvironmentsEnvironmentId
     * @param id The project ID (required)
     * @param environmentId The environment ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletes an existing environment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdEnvironmentsEnvironmentIdCall(String id, Integer environmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/environments/{environment_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "environment_id" + "}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdEnvironmentsEnvironmentIdValidateBeforeCall(String id, Integer environmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdEnvironmentsEnvironmentId(Async)");
        }

        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling deleteV3ProjectsIdEnvironmentsEnvironmentId(Async)");
        }

        return deleteV3ProjectsIdEnvironmentsEnvironmentIdCall(id, environmentId, _callback);

    }

    /**
     * Deletes an existing environment
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param environmentId The environment ID (required)
     * @return Environment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletes an existing environment </td><td>  -  </td></tr>
     </table>
     */
    public Environment deleteV3ProjectsIdEnvironmentsEnvironmentId(String id, Integer environmentId) throws ApiException {
        ApiResponse<Environment> localVarResp = deleteV3ProjectsIdEnvironmentsEnvironmentIdWithHttpInfo(id, environmentId);
        return localVarResp.getData();
    }

    /**
     * Deletes an existing environment
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param environmentId The environment ID (required)
     * @return ApiResponse&lt;Environment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletes an existing environment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Environment> deleteV3ProjectsIdEnvironmentsEnvironmentIdWithHttpInfo(String id, Integer environmentId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdEnvironmentsEnvironmentIdValidateBeforeCall(id, environmentId, null);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes an existing environment (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param environmentId The environment ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletes an existing environment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdEnvironmentsEnvironmentIdAsync(String id, Integer environmentId, final ApiCallback<Environment> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdEnvironmentsEnvironmentIdValidateBeforeCall(id, environmentId, _callback);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdFork
     * @param id The ID of a project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remove a forked_from relationship </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdForkCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/fork"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdForkValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdFork(Async)");
        }

        return deleteV3ProjectsIdForkCall(id, _callback);

    }

    /**
     * Remove a forked_from relationship
     * Remove a forked_from relationship
     * @param id The ID of a project (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remove a forked_from relationship </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3ProjectsIdFork(String id) throws ApiException {
        deleteV3ProjectsIdForkWithHttpInfo(id);
    }

    /**
     * Remove a forked_from relationship
     * Remove a forked_from relationship
     * @param id The ID of a project (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remove a forked_from relationship </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3ProjectsIdForkWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdForkValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a forked_from relationship (asynchronously)
     * Remove a forked_from relationship
     * @param id The ID of a project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remove a forked_from relationship </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdForkAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdForkValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdHooksHookId
     * @param id The ID of a project (required)
     * @param hookId The ID of the hook to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletes project hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdHooksHookIdCall(String id, Integer hookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/hooks/{hook_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdHooksHookIdValidateBeforeCall(String id, Integer hookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdHooksHookId(Async)");
        }

        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling deleteV3ProjectsIdHooksHookId(Async)");
        }

        return deleteV3ProjectsIdHooksHookIdCall(id, hookId, _callback);

    }

    /**
     * Deletes project hook
     * Deletes project hook
     * @param id The ID of a project (required)
     * @param hookId The ID of the hook to delete (required)
     * @return ProjectHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletes project hook </td><td>  -  </td></tr>
     </table>
     */
    public ProjectHook deleteV3ProjectsIdHooksHookId(String id, Integer hookId) throws ApiException {
        ApiResponse<ProjectHook> localVarResp = deleteV3ProjectsIdHooksHookIdWithHttpInfo(id, hookId);
        return localVarResp.getData();
    }

    /**
     * Deletes project hook
     * Deletes project hook
     * @param id The ID of a project (required)
     * @param hookId The ID of the hook to delete (required)
     * @return ApiResponse&lt;ProjectHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletes project hook </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectHook> deleteV3ProjectsIdHooksHookIdWithHttpInfo(String id, Integer hookId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdHooksHookIdValidateBeforeCall(id, hookId, null);
        Type localVarReturnType = new TypeToken<ProjectHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes project hook (asynchronously)
     * Deletes project hook
     * @param id The ID of a project (required)
     * @param hookId The ID of the hook to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletes project hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdHooksHookIdAsync(String id, Integer hookId, final ApiCallback<ProjectHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdHooksHookIdValidateBeforeCall(id, hookId, _callback);
        Type localVarReturnType = new TypeToken<ProjectHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdIssuesIssueId
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a project issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdIssuesIssueIdCall(String id, Integer issueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdIssuesIssueIdValidateBeforeCall(String id, Integer issueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdIssuesIssueId(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling deleteV3ProjectsIdIssuesIssueId(Async)");
        }

        return deleteV3ProjectsIdIssuesIssueIdCall(id, issueId, _callback);

    }

    /**
     * Delete a project issue
     * Delete a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a project issue </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3ProjectsIdIssuesIssueId(String id, Integer issueId) throws ApiException {
        deleteV3ProjectsIdIssuesIssueIdWithHttpInfo(id, issueId);
    }

    /**
     * Delete a project issue
     * Delete a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a project issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3ProjectsIdIssuesIssueIdWithHttpInfo(String id, Integer issueId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdIssuesIssueIdValidateBeforeCall(id, issueId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a project issue (asynchronously)
     * Delete a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a project issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdIssuesIssueIdAsync(String id, Integer issueId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdIssuesIssueIdValidateBeforeCall(id, issueId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param issueId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdCall(Integer awardId, Integer id, Integer issueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}/award_emoji/{award_id}"
            .replace("{" + "award_id" + "}", localVarApiClient.escapeString(awardId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdValidateBeforeCall(Integer awardId, Integer id, Integer issueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awardId' is set
        if (awardId == null) {
            throw new ApiException("Missing the required parameter 'awardId' when calling deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId(Async)");
        }

        return deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdCall(awardId, id, issueId, _callback);

    }

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param issueId  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId(Integer awardId, Integer id, Integer issueId) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdWithHttpInfo(awardId, id, issueId);
        return localVarResp.getData();
    }

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param issueId  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdWithHttpInfo(Integer awardId, Integer id, Integer issueId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, issueId, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a +awardables+ award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param issueId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdAsync(Integer awardId, Integer id, Integer issueId, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, issueId, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param issueId  (required)
     * @param noteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdCall(Integer awardId, Integer id, Integer issueId, Integer noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji/{award_id}"
            .replace("{" + "award_id" + "}", localVarApiClient.escapeString(awardId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(Integer awardId, Integer id, Integer issueId, Integer noteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awardId' is set
        if (awardId == null) {
            throw new ApiException("Missing the required parameter 'awardId' when calling deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        return deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdCall(awardId, id, issueId, noteId, _callback);

    }

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param issueId  (required)
     * @param noteId  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(Integer awardId, Integer id, Integer issueId, Integer noteId) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdWithHttpInfo(awardId, id, issueId, noteId);
        return localVarResp.getData();
    }

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param issueId  (required)
     * @param noteId  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdWithHttpInfo(Integer awardId, Integer id, Integer issueId, Integer noteId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, issueId, noteId, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a +awardables+ award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param issueId  (required)
     * @param noteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdAsync(Integer awardId, Integer id, Integer issueId, Integer noteId, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, issueId, noteId, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdIssuesNoteableIdNotesNoteId
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdCall(String id, Integer noteableId, Integer noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{noteable_id}/notes/{note_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "noteable_id" + "}", localVarApiClient.escapeString(noteableId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdValidateBeforeCall(String id, Integer noteableId, Integer noteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdIssuesNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteableId' is set
        if (noteableId == null) {
            throw new ApiException("Missing the required parameter 'noteableId' when calling deleteV3ProjectsIdIssuesNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling deleteV3ProjectsIdIssuesNoteableIdNotesNoteId(Async)");
        }

        return deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdCall(id, noteableId, noteId, _callback);

    }

    /**
     * Delete a +noteable+ note
     * Delete a +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public Note deleteV3ProjectsIdIssuesNoteableIdNotesNoteId(String id, Integer noteableId, Integer noteId) throws ApiException {
        ApiResponse<Note> localVarResp = deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdWithHttpInfo(id, noteableId, noteId);
        return localVarResp.getData();
    }

    /**
     * Delete a +noteable+ note
     * Delete a +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdWithHttpInfo(String id, Integer noteableId, Integer noteId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdValidateBeforeCall(id, noteableId, noteId, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a +noteable+ note (asynchronously)
     * Delete a +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdAsync(String id, Integer noteableId, Integer noteId, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdValidateBeforeCall(id, noteableId, noteId, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdIssuesSubscribableIdSubscription
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe from a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdIssuesSubscribableIdSubscriptionCall(String id, String subscribableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{subscribable_id}/subscription"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "subscribable_id" + "}", localVarApiClient.escapeString(subscribableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdIssuesSubscribableIdSubscriptionValidateBeforeCall(String id, String subscribableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdIssuesSubscribableIdSubscription(Async)");
        }

        // verify the required parameter 'subscribableId' is set
        if (subscribableId == null) {
            throw new ApiException("Missing the required parameter 'subscribableId' when calling deleteV3ProjectsIdIssuesSubscribableIdSubscription(Async)");
        }

        return deleteV3ProjectsIdIssuesSubscribableIdSubscriptionCall(id, subscribableId, _callback);

    }

    /**
     * Unsubscribe from a resource
     * Unsubscribe from a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe from a resource </td><td>  -  </td></tr>
     </table>
     */
    public Issue deleteV3ProjectsIdIssuesSubscribableIdSubscription(String id, String subscribableId) throws ApiException {
        ApiResponse<Issue> localVarResp = deleteV3ProjectsIdIssuesSubscribableIdSubscriptionWithHttpInfo(id, subscribableId);
        return localVarResp.getData();
    }

    /**
     * Unsubscribe from a resource
     * Unsubscribe from a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe from a resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Issue> deleteV3ProjectsIdIssuesSubscribableIdSubscriptionWithHttpInfo(String id, String subscribableId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdIssuesSubscribableIdSubscriptionValidateBeforeCall(id, subscribableId, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unsubscribe from a resource (asynchronously)
     * Unsubscribe from a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe from a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdIssuesSubscribableIdSubscriptionAsync(String id, String subscribableId, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdIssuesSubscribableIdSubscriptionValidateBeforeCall(id, subscribableId, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdKeysKeyId
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdKeysKeyIdCall(String id, Integer keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/keys/{key_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdKeysKeyIdValidateBeforeCall(String id, Integer keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdKeysKeyId(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling deleteV3ProjectsIdKeysKeyId(Async)");
        }

        return deleteV3ProjectsIdKeysKeyIdCall(id, keyId, _callback);

    }

    /**
     * Delete deploy key for a project
     * Delete deploy key for a project
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey deleteV3ProjectsIdKeysKeyId(String id, Integer keyId) throws ApiException {
        ApiResponse<SSHKey> localVarResp = deleteV3ProjectsIdKeysKeyIdWithHttpInfo(id, keyId);
        return localVarResp.getData();
    }

    /**
     * Delete deploy key for a project
     * Delete deploy key for a project
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> deleteV3ProjectsIdKeysKeyIdWithHttpInfo(String id, Integer keyId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdKeysKeyIdValidateBeforeCall(id, keyId, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete deploy key for a project (asynchronously)
     * Delete deploy key for a project
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdKeysKeyIdAsync(String id, Integer keyId, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdKeysKeyIdValidateBeforeCall(id, keyId, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdKeysKeyIdDisable
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable a deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdKeysKeyIdDisableCall(String id, Integer keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/keys/{key_id}/disable"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdKeysKeyIdDisableValidateBeforeCall(String id, Integer keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdKeysKeyIdDisable(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling deleteV3ProjectsIdKeysKeyIdDisable(Async)");
        }

        return deleteV3ProjectsIdKeysKeyIdDisableCall(id, keyId, _callback);

    }

    /**
     * Disable a deploy key for a project
     * This feature was added in GitLab 8.11
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable a deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey deleteV3ProjectsIdKeysKeyIdDisable(String id, Integer keyId) throws ApiException {
        ApiResponse<SSHKey> localVarResp = deleteV3ProjectsIdKeysKeyIdDisableWithHttpInfo(id, keyId);
        return localVarResp.getData();
    }

    /**
     * Disable a deploy key for a project
     * This feature was added in GitLab 8.11
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable a deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> deleteV3ProjectsIdKeysKeyIdDisableWithHttpInfo(String id, Integer keyId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdKeysKeyIdDisableValidateBeforeCall(id, keyId, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable a deploy key for a project (asynchronously)
     * This feature was added in GitLab 8.11
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable a deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdKeysKeyIdDisableAsync(String id, Integer keyId, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdKeysKeyIdDisableValidateBeforeCall(id, keyId, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdLabels
     * @param id The ID of a project (required)
     * @param name The name of the label to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an existing label </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdLabelsCall(String id, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/labels"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdLabelsValidateBeforeCall(String id, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdLabels(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteV3ProjectsIdLabels(Async)");
        }

        return deleteV3ProjectsIdLabelsCall(id, name, _callback);

    }

    /**
     * Delete an existing label
     * Delete an existing label
     * @param id The ID of a project (required)
     * @param name The name of the label to be deleted (required)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an existing label </td><td>  -  </td></tr>
     </table>
     */
    public Label deleteV3ProjectsIdLabels(String id, String name) throws ApiException {
        ApiResponse<Label> localVarResp = deleteV3ProjectsIdLabelsWithHttpInfo(id, name);
        return localVarResp.getData();
    }

    /**
     * Delete an existing label
     * Delete an existing label
     * @param id The ID of a project (required)
     * @param name The name of the label to be deleted (required)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an existing label </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Label> deleteV3ProjectsIdLabelsWithHttpInfo(String id, String name) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdLabelsValidateBeforeCall(id, name, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing label (asynchronously)
     * Delete an existing label
     * @param id The ID of a project (required)
     * @param name The name of the label to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an existing label </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdLabelsAsync(String id, String name, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdLabelsValidateBeforeCall(id, name, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdLabelsSubscribableIdSubscription
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe from a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdLabelsSubscribableIdSubscriptionCall(String id, String subscribableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/labels/{subscribable_id}/subscription"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "subscribable_id" + "}", localVarApiClient.escapeString(subscribableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdLabelsSubscribableIdSubscriptionValidateBeforeCall(String id, String subscribableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdLabelsSubscribableIdSubscription(Async)");
        }

        // verify the required parameter 'subscribableId' is set
        if (subscribableId == null) {
            throw new ApiException("Missing the required parameter 'subscribableId' when calling deleteV3ProjectsIdLabelsSubscribableIdSubscription(Async)");
        }

        return deleteV3ProjectsIdLabelsSubscribableIdSubscriptionCall(id, subscribableId, _callback);

    }

    /**
     * Unsubscribe from a resource
     * Unsubscribe from a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe from a resource </td><td>  -  </td></tr>
     </table>
     */
    public Label deleteV3ProjectsIdLabelsSubscribableIdSubscription(String id, String subscribableId) throws ApiException {
        ApiResponse<Label> localVarResp = deleteV3ProjectsIdLabelsSubscribableIdSubscriptionWithHttpInfo(id, subscribableId);
        return localVarResp.getData();
    }

    /**
     * Unsubscribe from a resource
     * Unsubscribe from a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe from a resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Label> deleteV3ProjectsIdLabelsSubscribableIdSubscriptionWithHttpInfo(String id, String subscribableId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdLabelsSubscribableIdSubscriptionValidateBeforeCall(id, subscribableId, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unsubscribe from a resource (asynchronously)
     * Unsubscribe from a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe from a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdLabelsSubscribableIdSubscriptionAsync(String id, String subscribableId, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdLabelsSubscribableIdSubscriptionValidateBeforeCall(id, subscribableId, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdMembersUserId
     * @param id The project ID (required)
     * @param userId The user ID of the member (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Removes a user from a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdMembersUserIdCall(String id, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/members/{user_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdMembersUserIdValidateBeforeCall(String id, Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdMembersUserId(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteV3ProjectsIdMembersUserId(Async)");
        }

        return deleteV3ProjectsIdMembersUserIdCall(id, userId, _callback);

    }

    /**
     * Removes a user from a group or project.
     * Removes a user from a group or project.
     * @param id The project ID (required)
     * @param userId The user ID of the member (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Removes a user from a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3ProjectsIdMembersUserId(String id, Integer userId) throws ApiException {
        deleteV3ProjectsIdMembersUserIdWithHttpInfo(id, userId);
    }

    /**
     * Removes a user from a group or project.
     * Removes a user from a group or project.
     * @param id The project ID (required)
     * @param userId The user ID of the member (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Removes a user from a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3ProjectsIdMembersUserIdWithHttpInfo(String id, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdMembersUserIdValidateBeforeCall(id, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a user from a group or project. (asynchronously)
     * Removes a user from a group or project.
     * @param id The project ID (required)
     * @param userId The user ID of the member (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Removes a user from a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdMembersUserIdAsync(String id, Integer userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdMembersUserIdValidateBeforeCall(id, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdMergeRequestSubscribableIdSubscription
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe from a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionCall(String id, String subscribableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_request/{subscribable_id}/subscription"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "subscribable_id" + "}", localVarApiClient.escapeString(subscribableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionValidateBeforeCall(String id, String subscribableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdMergeRequestSubscribableIdSubscription(Async)");
        }

        // verify the required parameter 'subscribableId' is set
        if (subscribableId == null) {
            throw new ApiException("Missing the required parameter 'subscribableId' when calling deleteV3ProjectsIdMergeRequestSubscribableIdSubscription(Async)");
        }

        return deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionCall(id, subscribableId, _callback);

    }

    /**
     * Unsubscribe from a resource
     * Unsubscribe from a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @return MergeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe from a resource </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequest deleteV3ProjectsIdMergeRequestSubscribableIdSubscription(String id, String subscribableId) throws ApiException {
        ApiResponse<MergeRequest> localVarResp = deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionWithHttpInfo(id, subscribableId);
        return localVarResp.getData();
    }

    /**
     * Unsubscribe from a resource
     * Unsubscribe from a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @return ApiResponse&lt;MergeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe from a resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequest> deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionWithHttpInfo(String id, String subscribableId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionValidateBeforeCall(id, subscribableId, null);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unsubscribe from a resource (asynchronously)
     * Unsubscribe from a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe from a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionAsync(String id, String subscribableId, final ApiCallback<MergeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionValidateBeforeCall(id, subscribableId, _callback);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdMergeRequestsMergeRequestId
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a merge request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdMergeRequestsMergeRequestIdCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdMergeRequestsMergeRequestIdValidateBeforeCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdMergeRequestsMergeRequestId(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling deleteV3ProjectsIdMergeRequestsMergeRequestId(Async)");
        }

        return deleteV3ProjectsIdMergeRequestsMergeRequestIdCall(id, mergeRequestId, _callback);

    }

    /**
     * Delete a merge request
     * Delete a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a merge request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a merge request </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3ProjectsIdMergeRequestsMergeRequestId(String id, Integer mergeRequestId) throws ApiException {
        deleteV3ProjectsIdMergeRequestsMergeRequestIdWithHttpInfo(id, mergeRequestId);
    }

    /**
     * Delete a merge request
     * Delete a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a merge request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a merge request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3ProjectsIdMergeRequestsMergeRequestIdWithHttpInfo(String id, Integer mergeRequestId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdMergeRequestsMergeRequestIdValidateBeforeCall(id, mergeRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a merge request (asynchronously)
     * Delete a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a merge request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdMergeRequestsMergeRequestIdAsync(String id, Integer mergeRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdMergeRequestsMergeRequestIdValidateBeforeCall(id, mergeRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdCall(Integer awardId, Integer id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji/{award_id}"
            .replace("{" + "award_id" + "}", localVarApiClient.escapeString(awardId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdValidateBeforeCall(Integer awardId, Integer id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awardId' is set
        if (awardId == null) {
            throw new ApiException("Missing the required parameter 'awardId' when calling deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(Async)");
        }

        return deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdCall(awardId, id, mergeRequestId, _callback);

    }

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(Integer awardId, Integer id, Integer mergeRequestId) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdWithHttpInfo(awardId, id, mergeRequestId);
        return localVarResp.getData();
    }

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdWithHttpInfo(Integer awardId, Integer id, Integer mergeRequestId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, mergeRequestId, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a +awardables+ award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdAsync(Integer awardId, Integer id, Integer mergeRequestId, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, mergeRequestId, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param noteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdCall(Integer awardId, Integer id, Integer mergeRequestId, Integer noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji/{award_id}"
            .replace("{" + "award_id" + "}", localVarApiClient.escapeString(awardId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(Integer awardId, Integer id, Integer mergeRequestId, Integer noteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awardId' is set
        if (awardId == null) {
            throw new ApiException("Missing the required parameter 'awardId' when calling deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        return deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdCall(awardId, id, mergeRequestId, noteId, _callback);

    }

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param noteId  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(Integer awardId, Integer id, Integer mergeRequestId, Integer noteId) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdWithHttpInfo(awardId, id, mergeRequestId, noteId);
        return localVarResp.getData();
    }

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param noteId  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdWithHttpInfo(Integer awardId, Integer id, Integer mergeRequestId, Integer noteId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, mergeRequestId, noteId, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a +awardables+ award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param noteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdAsync(Integer awardId, Integer id, Integer mergeRequestId, Integer noteId, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, mergeRequestId, noteId, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdCall(String id, Integer noteableId, Integer noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{noteable_id}/notes/{note_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "noteable_id" + "}", localVarApiClient.escapeString(noteableId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdValidateBeforeCall(String id, Integer noteableId, Integer noteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteableId' is set
        if (noteableId == null) {
            throw new ApiException("Missing the required parameter 'noteableId' when calling deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(Async)");
        }

        return deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdCall(id, noteableId, noteId, _callback);

    }

    /**
     * Delete a +noteable+ note
     * Delete a +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public Note deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(String id, Integer noteableId, Integer noteId) throws ApiException {
        ApiResponse<Note> localVarResp = deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdWithHttpInfo(id, noteableId, noteId);
        return localVarResp.getData();
    }

    /**
     * Delete a +noteable+ note
     * Delete a +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdWithHttpInfo(String id, Integer noteableId, Integer noteId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdValidateBeforeCall(id, noteableId, noteId, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a +noteable+ note (asynchronously)
     * Delete a +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdAsync(String id, Integer noteableId, Integer noteId, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdValidateBeforeCall(id, noteableId, noteId, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdMergeRequestsSubscribableIdSubscription
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe from a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionCall(String id, String subscribableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{subscribable_id}/subscription"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "subscribable_id" + "}", localVarApiClient.escapeString(subscribableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionValidateBeforeCall(String id, String subscribableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdMergeRequestsSubscribableIdSubscription(Async)");
        }

        // verify the required parameter 'subscribableId' is set
        if (subscribableId == null) {
            throw new ApiException("Missing the required parameter 'subscribableId' when calling deleteV3ProjectsIdMergeRequestsSubscribableIdSubscription(Async)");
        }

        return deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionCall(id, subscribableId, _callback);

    }

    /**
     * Unsubscribe from a resource
     * Unsubscribe from a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @return MergeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe from a resource </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequest deleteV3ProjectsIdMergeRequestsSubscribableIdSubscription(String id, String subscribableId) throws ApiException {
        ApiResponse<MergeRequest> localVarResp = deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionWithHttpInfo(id, subscribableId);
        return localVarResp.getData();
    }

    /**
     * Unsubscribe from a resource
     * Unsubscribe from a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @return ApiResponse&lt;MergeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe from a resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequest> deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionWithHttpInfo(String id, String subscribableId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionValidateBeforeCall(id, subscribableId, null);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unsubscribe from a resource (asynchronously)
     * Unsubscribe from a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribe from a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionAsync(String id, String subscribableId, final ApiCallback<MergeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionValidateBeforeCall(id, subscribableId, _callback);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdRepositoryBranchesBranch
     * @param id The ID of a project (required)
     * @param branch The name of the branch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a branch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdRepositoryBranchesBranchCall(String id, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/branches/{branch}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdRepositoryBranchesBranchValidateBeforeCall(String id, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdRepositoryBranchesBranch(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling deleteV3ProjectsIdRepositoryBranchesBranch(Async)");
        }

        return deleteV3ProjectsIdRepositoryBranchesBranchCall(id, branch, _callback);

    }

    /**
     * Delete a branch
     * Delete a branch
     * @param id The ID of a project (required)
     * @param branch The name of the branch (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a branch </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3ProjectsIdRepositoryBranchesBranch(String id, String branch) throws ApiException {
        deleteV3ProjectsIdRepositoryBranchesBranchWithHttpInfo(id, branch);
    }

    /**
     * Delete a branch
     * Delete a branch
     * @param id The ID of a project (required)
     * @param branch The name of the branch (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a branch </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3ProjectsIdRepositoryBranchesBranchWithHttpInfo(String id, String branch) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdRepositoryBranchesBranchValidateBeforeCall(id, branch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a branch (asynchronously)
     * Delete a branch
     * @param id The ID of a project (required)
     * @param branch The name of the branch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a branch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdRepositoryBranchesBranchAsync(String id, String branch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdRepositoryBranchesBranchValidateBeforeCall(id, branch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdRepositoryFiles
     * @param id The project ID (required)
     * @param filePath The path to new file. Ex. lib/class.rb (required)
     * @param branchName The name of branch (required)
     * @param commitMessage Commit Message (required)
     * @param authorEmail The email of the author (optional)
     * @param authorName The name of the author (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete an existing file in repository </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdRepositoryFilesCall(String id, String filePath, String branchName, String commitMessage, String authorEmail, String authorName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/files"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filePath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_path", filePath));
        }

        if (branchName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch_name", branchName));
        }

        if (commitMessage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit_message", commitMessage));
        }

        if (authorEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author_email", authorEmail));
        }

        if (authorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author_name", authorName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdRepositoryFilesValidateBeforeCall(String id, String filePath, String branchName, String commitMessage, String authorEmail, String authorName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdRepositoryFiles(Async)");
        }

        // verify the required parameter 'filePath' is set
        if (filePath == null) {
            throw new ApiException("Missing the required parameter 'filePath' when calling deleteV3ProjectsIdRepositoryFiles(Async)");
        }

        // verify the required parameter 'branchName' is set
        if (branchName == null) {
            throw new ApiException("Missing the required parameter 'branchName' when calling deleteV3ProjectsIdRepositoryFiles(Async)");
        }

        // verify the required parameter 'commitMessage' is set
        if (commitMessage == null) {
            throw new ApiException("Missing the required parameter 'commitMessage' when calling deleteV3ProjectsIdRepositoryFiles(Async)");
        }

        return deleteV3ProjectsIdRepositoryFilesCall(id, filePath, branchName, commitMessage, authorEmail, authorName, _callback);

    }

    /**
     * Delete an existing file in repository
     * Delete an existing file in repository
     * @param id The project ID (required)
     * @param filePath The path to new file. Ex. lib/class.rb (required)
     * @param branchName The name of branch (required)
     * @param commitMessage Commit Message (required)
     * @param authorEmail The email of the author (optional)
     * @param authorName The name of the author (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete an existing file in repository </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3ProjectsIdRepositoryFiles(String id, String filePath, String branchName, String commitMessage, String authorEmail, String authorName) throws ApiException {
        deleteV3ProjectsIdRepositoryFilesWithHttpInfo(id, filePath, branchName, commitMessage, authorEmail, authorName);
    }

    /**
     * Delete an existing file in repository
     * Delete an existing file in repository
     * @param id The project ID (required)
     * @param filePath The path to new file. Ex. lib/class.rb (required)
     * @param branchName The name of branch (required)
     * @param commitMessage Commit Message (required)
     * @param authorEmail The email of the author (optional)
     * @param authorName The name of the author (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete an existing file in repository </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3ProjectsIdRepositoryFilesWithHttpInfo(String id, String filePath, String branchName, String commitMessage, String authorEmail, String authorName) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdRepositoryFilesValidateBeforeCall(id, filePath, branchName, commitMessage, authorEmail, authorName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an existing file in repository (asynchronously)
     * Delete an existing file in repository
     * @param id The project ID (required)
     * @param filePath The path to new file. Ex. lib/class.rb (required)
     * @param branchName The name of branch (required)
     * @param commitMessage Commit Message (required)
     * @param authorEmail The email of the author (optional)
     * @param authorName The name of the author (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete an existing file in repository </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdRepositoryFilesAsync(String id, String filePath, String branchName, String commitMessage, String authorEmail, String authorName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdRepositoryFilesValidateBeforeCall(id, filePath, branchName, commitMessage, authorEmail, authorName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdRepositoryMergedBranches
     * @param id The ID of a project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> deleted MergedBranch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdRepositoryMergedBranchesCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/merged_branches"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdRepositoryMergedBranchesValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdRepositoryMergedBranches(Async)");
        }

        return deleteV3ProjectsIdRepositoryMergedBranchesCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id The ID of a project (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> deleted MergedBranch </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3ProjectsIdRepositoryMergedBranches(String id) throws ApiException {
        deleteV3ProjectsIdRepositoryMergedBranchesWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id The ID of a project (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> deleted MergedBranch </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3ProjectsIdRepositoryMergedBranchesWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdRepositoryMergedBranchesValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id The ID of a project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> deleted MergedBranch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdRepositoryMergedBranchesAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdRepositoryMergedBranchesValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdRepositoryTagsTagName
     * @param id The ID of a project (required)
     * @param tagName The name of the tag (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a repository tag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdRepositoryTagsTagNameCall(String id, String tagName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/tags/{tag_name}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "tag_name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdRepositoryTagsTagNameValidateBeforeCall(String id, String tagName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdRepositoryTagsTagName(Async)");
        }

        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling deleteV3ProjectsIdRepositoryTagsTagName(Async)");
        }

        return deleteV3ProjectsIdRepositoryTagsTagNameCall(id, tagName, _callback);

    }

    /**
     * Delete a repository tag
     * Delete a repository tag
     * @param id The ID of a project (required)
     * @param tagName The name of the tag (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a repository tag </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3ProjectsIdRepositoryTagsTagName(String id, String tagName) throws ApiException {
        deleteV3ProjectsIdRepositoryTagsTagNameWithHttpInfo(id, tagName);
    }

    /**
     * Delete a repository tag
     * Delete a repository tag
     * @param id The ID of a project (required)
     * @param tagName The name of the tag (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a repository tag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3ProjectsIdRepositoryTagsTagNameWithHttpInfo(String id, String tagName) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdRepositoryTagsTagNameValidateBeforeCall(id, tagName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a repository tag (asynchronously)
     * Delete a repository tag
     * @param id The ID of a project (required)
     * @param tagName The name of the tag (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a repository tag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdRepositoryTagsTagNameAsync(String id, String tagName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdRepositoryTagsTagNameValidateBeforeCall(id, tagName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdRunnersRunnerId
     * @param id The ID of a project (required)
     * @param runnerId The ID of the runner (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable project&#39;s runner </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdRunnersRunnerIdCall(String id, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/runners/{runner_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdRunnersRunnerIdValidateBeforeCall(String id, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdRunnersRunnerId(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling deleteV3ProjectsIdRunnersRunnerId(Async)");
        }

        return deleteV3ProjectsIdRunnersRunnerIdCall(id, runnerId, _callback);

    }

    /**
     * Disable project&#39;s runner
     * Disable project&#39;s runner
     * @param id The ID of a project (required)
     * @param runnerId The ID of the runner (required)
     * @return Runner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable project&#39;s runner </td><td>  -  </td></tr>
     </table>
     */
    public Runner deleteV3ProjectsIdRunnersRunnerId(String id, Integer runnerId) throws ApiException {
        ApiResponse<Runner> localVarResp = deleteV3ProjectsIdRunnersRunnerIdWithHttpInfo(id, runnerId);
        return localVarResp.getData();
    }

    /**
     * Disable project&#39;s runner
     * Disable project&#39;s runner
     * @param id The ID of a project (required)
     * @param runnerId The ID of the runner (required)
     * @return ApiResponse&lt;Runner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable project&#39;s runner </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Runner> deleteV3ProjectsIdRunnersRunnerIdWithHttpInfo(String id, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdRunnersRunnerIdValidateBeforeCall(id, runnerId, null);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable project&#39;s runner (asynchronously)
     * Disable project&#39;s runner
     * @param id The ID of a project (required)
     * @param runnerId The ID of the runner (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Disable project&#39;s runner </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdRunnersRunnerIdAsync(String id, Integer runnerId, final ApiCallback<Runner> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdRunnersRunnerIdValidateBeforeCall(id, runnerId, _callback);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdServicesServiceSlug
     * @param serviceSlug The name of the service (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdServicesServiceSlugCall(String serviceSlug, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/{service_slug}"
            .replace("{" + "service_slug" + "}", localVarApiClient.escapeString(serviceSlug.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdServicesServiceSlugValidateBeforeCall(String serviceSlug, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSlug' is set
        if (serviceSlug == null) {
            throw new ApiException("Missing the required parameter 'serviceSlug' when calling deleteV3ProjectsIdServicesServiceSlug(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdServicesServiceSlug(Async)");
        }

        return deleteV3ProjectsIdServicesServiceSlugCall(serviceSlug, id, _callback);

    }

    /**
     * Delete a service for project
     * Delete a service for project
     * @param serviceSlug The name of the service (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a service for project </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3ProjectsIdServicesServiceSlug(String serviceSlug, Integer id) throws ApiException {
        deleteV3ProjectsIdServicesServiceSlugWithHttpInfo(serviceSlug, id);
    }

    /**
     * Delete a service for project
     * Delete a service for project
     * @param serviceSlug The name of the service (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3ProjectsIdServicesServiceSlugWithHttpInfo(String serviceSlug, Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdServicesServiceSlugValidateBeforeCall(serviceSlug, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a service for project (asynchronously)
     * Delete a service for project
     * @param serviceSlug The name of the service (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdServicesServiceSlugAsync(String serviceSlug, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdServicesServiceSlugValidateBeforeCall(serviceSlug, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdShareGroupId
     * @param id The ID of a project (required)
     * @param groupId The ID of the group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> deleted Share </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdShareGroupIdCall(String id, Integer groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/share/{group_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdShareGroupIdValidateBeforeCall(String id, Integer groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdShareGroupId(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteV3ProjectsIdShareGroupId(Async)");
        }

        return deleteV3ProjectsIdShareGroupIdCall(id, groupId, _callback);

    }

    /**
     * 
     * 
     * @param id The ID of a project (required)
     * @param groupId The ID of the group (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> deleted Share </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3ProjectsIdShareGroupId(String id, Integer groupId) throws ApiException {
        deleteV3ProjectsIdShareGroupIdWithHttpInfo(id, groupId);
    }

    /**
     * 
     * 
     * @param id The ID of a project (required)
     * @param groupId The ID of the group (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> deleted Share </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3ProjectsIdShareGroupIdWithHttpInfo(String id, Integer groupId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdShareGroupIdValidateBeforeCall(id, groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id The ID of a project (required)
     * @param groupId The ID of the group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> deleted Share </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdShareGroupIdAsync(String id, Integer groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdShareGroupIdValidateBeforeCall(id, groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdCall(String id, Integer noteableId, Integer noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{noteable_id}/notes/{note_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "noteable_id" + "}", localVarApiClient.escapeString(noteableId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdValidateBeforeCall(String id, Integer noteableId, Integer noteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteableId' is set
        if (noteableId == null) {
            throw new ApiException("Missing the required parameter 'noteableId' when calling deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId(Async)");
        }

        return deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdCall(id, noteableId, noteId, _callback);

    }

    /**
     * Delete a +noteable+ note
     * Delete a +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public Note deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId(String id, Integer noteableId, Integer noteId) throws ApiException {
        ApiResponse<Note> localVarResp = deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdWithHttpInfo(id, noteableId, noteId);
        return localVarResp.getData();
    }

    /**
     * Delete a +noteable+ note
     * Delete a +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdWithHttpInfo(String id, Integer noteableId, Integer noteId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdValidateBeforeCall(id, noteableId, noteId, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a +noteable+ note (asynchronously)
     * Delete a +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdAsync(String id, Integer noteableId, Integer noteId, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdValidateBeforeCall(id, noteableId, noteId, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdSnippetsSnippetId
     * @param id The ID of a project (required)
     * @param snippetId The ID of a project snippet (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a project snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdSnippetsSnippetIdCall(String id, Integer snippetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{snippet_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "snippet_id" + "}", localVarApiClient.escapeString(snippetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdSnippetsSnippetIdValidateBeforeCall(String id, Integer snippetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdSnippetsSnippetId(Async)");
        }

        // verify the required parameter 'snippetId' is set
        if (snippetId == null) {
            throw new ApiException("Missing the required parameter 'snippetId' when calling deleteV3ProjectsIdSnippetsSnippetId(Async)");
        }

        return deleteV3ProjectsIdSnippetsSnippetIdCall(id, snippetId, _callback);

    }

    /**
     * Delete a project snippet
     * Delete a project snippet
     * @param id The ID of a project (required)
     * @param snippetId The ID of a project snippet (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a project snippet </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3ProjectsIdSnippetsSnippetId(String id, Integer snippetId) throws ApiException {
        deleteV3ProjectsIdSnippetsSnippetIdWithHttpInfo(id, snippetId);
    }

    /**
     * Delete a project snippet
     * Delete a project snippet
     * @param id The ID of a project (required)
     * @param snippetId The ID of a project snippet (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a project snippet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3ProjectsIdSnippetsSnippetIdWithHttpInfo(String id, Integer snippetId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdSnippetsSnippetIdValidateBeforeCall(id, snippetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a project snippet (asynchronously)
     * Delete a project snippet
     * @param id The ID of a project (required)
     * @param snippetId The ID of a project snippet (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a project snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdSnippetsSnippetIdAsync(String id, Integer snippetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdSnippetsSnippetIdValidateBeforeCall(id, snippetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param snippetId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdCall(Integer awardId, Integer id, Integer snippetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{snippet_id}/award_emoji/{award_id}"
            .replace("{" + "award_id" + "}", localVarApiClient.escapeString(awardId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "snippet_id" + "}", localVarApiClient.escapeString(snippetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdValidateBeforeCall(Integer awardId, Integer id, Integer snippetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awardId' is set
        if (awardId == null) {
            throw new ApiException("Missing the required parameter 'awardId' when calling deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'snippetId' is set
        if (snippetId == null) {
            throw new ApiException("Missing the required parameter 'snippetId' when calling deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(Async)");
        }

        return deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdCall(awardId, id, snippetId, _callback);

    }

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param snippetId  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(Integer awardId, Integer id, Integer snippetId) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdWithHttpInfo(awardId, id, snippetId);
        return localVarResp.getData();
    }

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param snippetId  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdWithHttpInfo(Integer awardId, Integer id, Integer snippetId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, snippetId, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a +awardables+ award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param snippetId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdAsync(Integer awardId, Integer id, Integer snippetId, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, snippetId, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param snippetId  (required)
     * @param noteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdCall(Integer awardId, Integer id, Integer snippetId, Integer noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji/{award_id}"
            .replace("{" + "award_id" + "}", localVarApiClient.escapeString(awardId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "snippet_id" + "}", localVarApiClient.escapeString(snippetId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(Integer awardId, Integer id, Integer snippetId, Integer noteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awardId' is set
        if (awardId == null) {
            throw new ApiException("Missing the required parameter 'awardId' when calling deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'snippetId' is set
        if (snippetId == null) {
            throw new ApiException("Missing the required parameter 'snippetId' when calling deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        return deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdCall(awardId, id, snippetId, noteId, _callback);

    }

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param snippetId  (required)
     * @param noteId  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(Integer awardId, Integer id, Integer snippetId, Integer noteId) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdWithHttpInfo(awardId, id, snippetId, noteId);
        return localVarResp.getData();
    }

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param snippetId  (required)
     * @param noteId  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdWithHttpInfo(Integer awardId, Integer id, Integer snippetId, Integer noteId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, snippetId, noteId, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a +awardables+ award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param awardId The ID of an award emoji (required)
     * @param id  (required)
     * @param snippetId  (required)
     * @param noteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a +awardables+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdAsync(Integer awardId, Integer id, Integer snippetId, Integer noteId, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, snippetId, noteId, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdStar
     * @param id The ID of a project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unstar a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdStarCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/star"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdStarValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdStar(Async)");
        }

        return deleteV3ProjectsIdStarCall(id, _callback);

    }

    /**
     * Unstar a project
     * Unstar a project
     * @param id The ID of a project (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unstar a project </td><td>  -  </td></tr>
     </table>
     */
    public Project deleteV3ProjectsIdStar(String id) throws ApiException {
        ApiResponse<Project> localVarResp = deleteV3ProjectsIdStarWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Unstar a project
     * Unstar a project
     * @param id The ID of a project (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unstar a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> deleteV3ProjectsIdStarWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdStarValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unstar a project (asynchronously)
     * Unstar a project
     * @param id The ID of a project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unstar a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdStarAsync(String id, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdStarValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdTriggersToken
     * @param id The ID of a project (required)
     * @param token The unique token of trigger (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a trigger </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdTriggersTokenCall(String id, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/triggers/{token}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdTriggersTokenValidateBeforeCall(String id, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdTriggersToken(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteV3ProjectsIdTriggersToken(Async)");
        }

        return deleteV3ProjectsIdTriggersTokenCall(id, token, _callback);

    }

    /**
     * Delete a trigger
     * Delete a trigger
     * @param id The ID of a project (required)
     * @param token The unique token of trigger (required)
     * @return Trigger
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a trigger </td><td>  -  </td></tr>
     </table>
     */
    public Trigger deleteV3ProjectsIdTriggersToken(String id, String token) throws ApiException {
        ApiResponse<Trigger> localVarResp = deleteV3ProjectsIdTriggersTokenWithHttpInfo(id, token);
        return localVarResp.getData();
    }

    /**
     * Delete a trigger
     * Delete a trigger
     * @param id The ID of a project (required)
     * @param token The unique token of trigger (required)
     * @return ApiResponse&lt;Trigger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a trigger </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Trigger> deleteV3ProjectsIdTriggersTokenWithHttpInfo(String id, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdTriggersTokenValidateBeforeCall(id, token, null);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a trigger (asynchronously)
     * Delete a trigger
     * @param id The ID of a project (required)
     * @param token The unique token of trigger (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a trigger </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdTriggersTokenAsync(String id, String token, final ApiCallback<Trigger> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdTriggersTokenValidateBeforeCall(id, token, _callback);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3ProjectsIdVariablesKey
     * @param id The ID of a project (required)
     * @param key The key of the variable (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an existing variable from a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdVariablesKeyCall(String id, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/variables/{key}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3ProjectsIdVariablesKeyValidateBeforeCall(String id, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3ProjectsIdVariablesKey(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteV3ProjectsIdVariablesKey(Async)");
        }

        return deleteV3ProjectsIdVariablesKeyCall(id, key, _callback);

    }

    /**
     * Delete an existing variable from a project
     * Delete an existing variable from a project
     * @param id The ID of a project (required)
     * @param key The key of the variable (required)
     * @return Variable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an existing variable from a project </td><td>  -  </td></tr>
     </table>
     */
    public Variable deleteV3ProjectsIdVariablesKey(String id, String key) throws ApiException {
        ApiResponse<Variable> localVarResp = deleteV3ProjectsIdVariablesKeyWithHttpInfo(id, key);
        return localVarResp.getData();
    }

    /**
     * Delete an existing variable from a project
     * Delete an existing variable from a project
     * @param id The ID of a project (required)
     * @param key The key of the variable (required)
     * @return ApiResponse&lt;Variable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an existing variable from a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Variable> deleteV3ProjectsIdVariablesKeyWithHttpInfo(String id, String key) throws ApiException {
        okhttp3.Call localVarCall = deleteV3ProjectsIdVariablesKeyValidateBeforeCall(id, key, null);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing variable from a project (asynchronously)
     * Delete an existing variable from a project
     * @param id The ID of a project (required)
     * @param key The key of the variable (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an existing variable from a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3ProjectsIdVariablesKeyAsync(String id, String key, final ApiCallback<Variable> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3ProjectsIdVariablesKeyValidateBeforeCall(id, key, _callback);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3Projects
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a projects list for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsCall(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        if (visibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibility", visibility));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (simple != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("simple", simple));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsValidateBeforeCall(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, final ApiCallback _callback) throws ApiException {
        return getV3ProjectsCall(orderBy, sort, archived, visibility, search, page, perPage, simple, _callback);

    }

    /**
     * Get a projects list for authenticated user
     * Get a projects list for authenticated user
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @return BasicProjectDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a projects list for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public BasicProjectDetails getV3Projects(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple) throws ApiException {
        ApiResponse<BasicProjectDetails> localVarResp = getV3ProjectsWithHttpInfo(orderBy, sort, archived, visibility, search, page, perPage, simple);
        return localVarResp.getData();
    }

    /**
     * Get a projects list for authenticated user
     * Get a projects list for authenticated user
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @return ApiResponse&lt;BasicProjectDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a projects list for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BasicProjectDetails> getV3ProjectsWithHttpInfo(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsValidateBeforeCall(orderBy, sort, archived, visibility, search, page, perPage, simple, null);
        Type localVarReturnType = new TypeToken<BasicProjectDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a projects list for authenticated user (asynchronously)
     * Get a projects list for authenticated user
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a projects list for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsAsync(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, final ApiCallback<BasicProjectDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsValidateBeforeCall(orderBy, sort, archived, visibility, search, page, perPage, simple, _callback);
        Type localVarReturnType = new TypeToken<BasicProjectDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsAll
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param statistics Include project statistics (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all projects for admin user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsAllCall(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, Boolean statistics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        if (visibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibility", visibility));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (simple != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("simple", simple));
        }

        if (statistics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statistics", statistics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsAllValidateBeforeCall(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, Boolean statistics, final ApiCallback _callback) throws ApiException {
        return getV3ProjectsAllCall(orderBy, sort, archived, visibility, search, page, perPage, simple, statistics, _callback);

    }

    /**
     * Get all projects for admin user
     * Get all projects for admin user
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param statistics Include project statistics (optional)
     * @return BasicProjectDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all projects for admin user </td><td>  -  </td></tr>
     </table>
     */
    public BasicProjectDetails getV3ProjectsAll(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, Boolean statistics) throws ApiException {
        ApiResponse<BasicProjectDetails> localVarResp = getV3ProjectsAllWithHttpInfo(orderBy, sort, archived, visibility, search, page, perPage, simple, statistics);
        return localVarResp.getData();
    }

    /**
     * Get all projects for admin user
     * Get all projects for admin user
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param statistics Include project statistics (optional)
     * @return ApiResponse&lt;BasicProjectDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all projects for admin user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BasicProjectDetails> getV3ProjectsAllWithHttpInfo(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, Boolean statistics) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsAllValidateBeforeCall(orderBy, sort, archived, visibility, search, page, perPage, simple, statistics, null);
        Type localVarReturnType = new TypeToken<BasicProjectDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all projects for admin user (asynchronously)
     * Get all projects for admin user
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param statistics Include project statistics (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all projects for admin user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsAllAsync(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, Boolean statistics, final ApiCallback<BasicProjectDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsAllValidateBeforeCall(orderBy, sort, archived, visibility, search, page, perPage, simple, statistics, _callback);
        Type localVarReturnType = new TypeToken<BasicProjectDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsId
     * @param id The ID of a project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsId(Async)");
        }

        return getV3ProjectsIdCall(id, _callback);

    }

    /**
     * Get a single project
     * Get a single project
     * @param id The ID of a project (required)
     * @return ProjectWithAccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single project </td><td>  -  </td></tr>
     </table>
     */
    public ProjectWithAccess getV3ProjectsId(String id) throws ApiException {
        ApiResponse<ProjectWithAccess> localVarResp = getV3ProjectsIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a single project
     * Get a single project
     * @param id The ID of a project (required)
     * @return ApiResponse&lt;ProjectWithAccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectWithAccess> getV3ProjectsIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ProjectWithAccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single project (asynchronously)
     * Get a single project
     * @param id The ID of a project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdAsync(String id, final ApiCallback<ProjectWithAccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ProjectWithAccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdAccessRequests
     * @param id The project ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of access requests for a project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdAccessRequestsCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/access_requests"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdAccessRequestsValidateBeforeCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdAccessRequests(Async)");
        }

        return getV3ProjectsIdAccessRequestsCall(id, page, perPage, _callback);

    }

    /**
     * Gets a list of access requests for a project.
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return AccessRequester
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of access requests for a project. </td><td>  -  </td></tr>
     </table>
     */
    public AccessRequester getV3ProjectsIdAccessRequests(String id, Integer page, Integer perPage) throws ApiException {
        ApiResponse<AccessRequester> localVarResp = getV3ProjectsIdAccessRequestsWithHttpInfo(id, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Gets a list of access requests for a project.
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;AccessRequester&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of access requests for a project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessRequester> getV3ProjectsIdAccessRequestsWithHttpInfo(String id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdAccessRequestsValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<AccessRequester>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of access requests for a project. (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of access requests for a project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdAccessRequestsAsync(String id, Integer page, Integer perPage, final ApiCallback<AccessRequester> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdAccessRequestsValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<AccessRequester>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdBoards
     * @param id The ID of a project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all project boards </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdBoardsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/boards"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdBoardsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdBoards(Async)");
        }

        return getV3ProjectsIdBoardsCall(id, _callback);

    }

    /**
     * Get all project boards
     * This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @return Board
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all project boards </td><td>  -  </td></tr>
     </table>
     */
    public Board getV3ProjectsIdBoards(String id) throws ApiException {
        ApiResponse<Board> localVarResp = getV3ProjectsIdBoardsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get all project boards
     * This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @return ApiResponse&lt;Board&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all project boards </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Board> getV3ProjectsIdBoardsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdBoardsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Board>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all project boards (asynchronously)
     * This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all project boards </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdBoardsAsync(String id, final ApiCallback<Board> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdBoardsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Board>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdBoardsBoardIdLists
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the lists of a project board </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdBoardsBoardIdListsCall(String id, Integer boardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/boards/{board_id}/lists"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdBoardsBoardIdListsValidateBeforeCall(String id, Integer boardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdBoardsBoardIdLists(Async)");
        }

        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getV3ProjectsIdBoardsBoardIdLists(Async)");
        }

        return getV3ProjectsIdBoardsBoardIdListsCall(id, boardId, _callback);

    }

    /**
     * Get the lists of a project board
     * Does not include &#x60;backlog&#x60; and &#x60;done&#x60; lists. This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @return ModelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the lists of a project board </td><td>  -  </td></tr>
     </table>
     */
    public ModelList getV3ProjectsIdBoardsBoardIdLists(String id, Integer boardId) throws ApiException {
        ApiResponse<ModelList> localVarResp = getV3ProjectsIdBoardsBoardIdListsWithHttpInfo(id, boardId);
        return localVarResp.getData();
    }

    /**
     * Get the lists of a project board
     * Does not include &#x60;backlog&#x60; and &#x60;done&#x60; lists. This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @return ApiResponse&lt;ModelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the lists of a project board </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelList> getV3ProjectsIdBoardsBoardIdListsWithHttpInfo(String id, Integer boardId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdBoardsBoardIdListsValidateBeforeCall(id, boardId, null);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the lists of a project board (asynchronously)
     * Does not include &#x60;backlog&#x60; and &#x60;done&#x60; lists. This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the lists of a project board </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdBoardsBoardIdListsAsync(String id, Integer boardId, final ApiCallback<ModelList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdBoardsBoardIdListsValidateBeforeCall(id, boardId, _callback);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdBoardsBoardIdListsListId
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param listId The ID of a list (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of a project board </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdBoardsBoardIdListsListIdCall(String id, Integer boardId, Integer listId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/boards/{board_id}/lists/{list_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()))
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdBoardsBoardIdListsListIdValidateBeforeCall(String id, Integer boardId, Integer listId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdBoardsBoardIdListsListId(Async)");
        }

        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling getV3ProjectsIdBoardsBoardIdListsListId(Async)");
        }

        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getV3ProjectsIdBoardsBoardIdListsListId(Async)");
        }

        return getV3ProjectsIdBoardsBoardIdListsListIdCall(id, boardId, listId, _callback);

    }

    /**
     * Get a list of a project board
     * This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param listId The ID of a list (required)
     * @return ModelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of a project board </td><td>  -  </td></tr>
     </table>
     */
    public ModelList getV3ProjectsIdBoardsBoardIdListsListId(String id, Integer boardId, Integer listId) throws ApiException {
        ApiResponse<ModelList> localVarResp = getV3ProjectsIdBoardsBoardIdListsListIdWithHttpInfo(id, boardId, listId);
        return localVarResp.getData();
    }

    /**
     * Get a list of a project board
     * This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param listId The ID of a list (required)
     * @return ApiResponse&lt;ModelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of a project board </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelList> getV3ProjectsIdBoardsBoardIdListsListIdWithHttpInfo(String id, Integer boardId, Integer listId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdBoardsBoardIdListsListIdValidateBeforeCall(id, boardId, listId, null);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of a project board (asynchronously)
     * This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param listId The ID of a list (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of a project board </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdBoardsBoardIdListsListIdAsync(String id, Integer boardId, Integer listId, final ApiCallback<ModelList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdBoardsBoardIdListsListIdValidateBeforeCall(id, boardId, listId, _callback);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdBuilds
     * @param id The ID of a project (required)
     * @param scope The scope of builds to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project builds </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdBuildsCall(String id, String scope, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/builds"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdBuildsValidateBeforeCall(String id, String scope, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdBuilds(Async)");
        }

        return getV3ProjectsIdBuildsCall(id, scope, page, perPage, _callback);

    }

    /**
     * Get a project builds
     * Get a project builds
     * @param id The ID of a project (required)
     * @param scope The scope of builds to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project builds </td><td>  -  </td></tr>
     </table>
     */
    public Build getV3ProjectsIdBuilds(String id, String scope, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Build> localVarResp = getV3ProjectsIdBuildsWithHttpInfo(id, scope, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a project builds
     * Get a project builds
     * @param id The ID of a project (required)
     * @param scope The scope of builds to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project builds </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Build> getV3ProjectsIdBuildsWithHttpInfo(String id, String scope, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdBuildsValidateBeforeCall(id, scope, page, perPage, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a project builds (asynchronously)
     * Get a project builds
     * @param id The ID of a project (required)
     * @param scope The scope of builds to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project builds </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdBuildsAsync(String id, String scope, Integer page, Integer perPage, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdBuildsValidateBeforeCall(id, scope, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdBuildsArtifactsRefNameDownload
     * @param id The ID of a project (required)
     * @param refName The ref from repository (required)
     * @param job The name for the build (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download the artifacts file from build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdBuildsArtifactsRefNameDownloadCall(String id, String refName, String job, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/builds/artifacts/{ref_name}/download"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "ref_name" + "}", localVarApiClient.escapeString(refName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (job != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("job", job));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdBuildsArtifactsRefNameDownloadValidateBeforeCall(String id, String refName, String job, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdBuildsArtifactsRefNameDownload(Async)");
        }

        // verify the required parameter 'refName' is set
        if (refName == null) {
            throw new ApiException("Missing the required parameter 'refName' when calling getV3ProjectsIdBuildsArtifactsRefNameDownload(Async)");
        }

        // verify the required parameter 'job' is set
        if (job == null) {
            throw new ApiException("Missing the required parameter 'job' when calling getV3ProjectsIdBuildsArtifactsRefNameDownload(Async)");
        }

        return getV3ProjectsIdBuildsArtifactsRefNameDownloadCall(id, refName, job, _callback);

    }

    /**
     * Download the artifacts file from build
     * This feature was introduced in GitLab 8.10
     * @param id The ID of a project (required)
     * @param refName The ref from repository (required)
     * @param job The name for the build (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download the artifacts file from build </td><td>  -  </td></tr>
     </table>
     */
    public void getV3ProjectsIdBuildsArtifactsRefNameDownload(String id, String refName, String job) throws ApiException {
        getV3ProjectsIdBuildsArtifactsRefNameDownloadWithHttpInfo(id, refName, job);
    }

    /**
     * Download the artifacts file from build
     * This feature was introduced in GitLab 8.10
     * @param id The ID of a project (required)
     * @param refName The ref from repository (required)
     * @param job The name for the build (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download the artifacts file from build </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getV3ProjectsIdBuildsArtifactsRefNameDownloadWithHttpInfo(String id, String refName, String job) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdBuildsArtifactsRefNameDownloadValidateBeforeCall(id, refName, job, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download the artifacts file from build (asynchronously)
     * This feature was introduced in GitLab 8.10
     * @param id The ID of a project (required)
     * @param refName The ref from repository (required)
     * @param job The name for the build (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download the artifacts file from build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdBuildsArtifactsRefNameDownloadAsync(String id, String refName, String job, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdBuildsArtifactsRefNameDownloadValidateBeforeCall(id, refName, job, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdBuildsBuildId
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific build of a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdBuildsBuildIdCall(String id, Integer buildId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/builds/{build_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "build_id" + "}", localVarApiClient.escapeString(buildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdBuildsBuildIdValidateBeforeCall(String id, Integer buildId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdBuildsBuildId(Async)");
        }

        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling getV3ProjectsIdBuildsBuildId(Async)");
        }

        return getV3ProjectsIdBuildsBuildIdCall(id, buildId, _callback);

    }

    /**
     * Get a specific build of a project
     * Get a specific build of a project
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific build of a project </td><td>  -  </td></tr>
     </table>
     */
    public Build getV3ProjectsIdBuildsBuildId(String id, Integer buildId) throws ApiException {
        ApiResponse<Build> localVarResp = getV3ProjectsIdBuildsBuildIdWithHttpInfo(id, buildId);
        return localVarResp.getData();
    }

    /**
     * Get a specific build of a project
     * Get a specific build of a project
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific build of a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Build> getV3ProjectsIdBuildsBuildIdWithHttpInfo(String id, Integer buildId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdBuildsBuildIdValidateBeforeCall(id, buildId, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific build of a project (asynchronously)
     * Get a specific build of a project
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific build of a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdBuildsBuildIdAsync(String id, Integer buildId, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdBuildsBuildIdValidateBeforeCall(id, buildId, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdBuildsBuildIdArtifacts
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download the artifacts file from build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdBuildsBuildIdArtifactsCall(String id, Integer buildId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/builds/{build_id}/artifacts"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "build_id" + "}", localVarApiClient.escapeString(buildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdBuildsBuildIdArtifactsValidateBeforeCall(String id, Integer buildId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdBuildsBuildIdArtifacts(Async)");
        }

        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling getV3ProjectsIdBuildsBuildIdArtifacts(Async)");
        }

        return getV3ProjectsIdBuildsBuildIdArtifactsCall(id, buildId, _callback);

    }

    /**
     * Download the artifacts file from build
     * This feature was introduced in GitLab 8.5
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download the artifacts file from build </td><td>  -  </td></tr>
     </table>
     */
    public void getV3ProjectsIdBuildsBuildIdArtifacts(String id, Integer buildId) throws ApiException {
        getV3ProjectsIdBuildsBuildIdArtifactsWithHttpInfo(id, buildId);
    }

    /**
     * Download the artifacts file from build
     * This feature was introduced in GitLab 8.5
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download the artifacts file from build </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getV3ProjectsIdBuildsBuildIdArtifactsWithHttpInfo(String id, Integer buildId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdBuildsBuildIdArtifactsValidateBeforeCall(id, buildId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download the artifacts file from build (asynchronously)
     * This feature was introduced in GitLab 8.5
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download the artifacts file from build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdBuildsBuildIdArtifactsAsync(String id, Integer buildId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdBuildsBuildIdArtifactsValidateBeforeCall(id, buildId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdBuildsBuildIdTrace
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a trace of a specific build of a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdBuildsBuildIdTraceCall(String id, Integer buildId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/builds/{build_id}/trace"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "build_id" + "}", localVarApiClient.escapeString(buildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdBuildsBuildIdTraceValidateBeforeCall(String id, Integer buildId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdBuildsBuildIdTrace(Async)");
        }

        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling getV3ProjectsIdBuildsBuildIdTrace(Async)");
        }

        return getV3ProjectsIdBuildsBuildIdTraceCall(id, buildId, _callback);

    }

    /**
     * Get a trace of a specific build of a project
     * Get a trace of a specific build of a project
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a trace of a specific build of a project </td><td>  -  </td></tr>
     </table>
     */
    public void getV3ProjectsIdBuildsBuildIdTrace(String id, Integer buildId) throws ApiException {
        getV3ProjectsIdBuildsBuildIdTraceWithHttpInfo(id, buildId);
    }

    /**
     * Get a trace of a specific build of a project
     * Get a trace of a specific build of a project
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a trace of a specific build of a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getV3ProjectsIdBuildsBuildIdTraceWithHttpInfo(String id, Integer buildId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdBuildsBuildIdTraceValidateBeforeCall(id, buildId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a trace of a specific build of a project (asynchronously)
     * Get a trace of a specific build of a project
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a trace of a specific build of a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdBuildsBuildIdTraceAsync(String id, Integer buildId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdBuildsBuildIdTraceValidateBeforeCall(id, buildId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdDeployKeys
     * @param id The ID of the project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific project&#39;s deploy keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdDeployKeysCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/deploy_keys"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdDeployKeysValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdDeployKeys(Async)");
        }

        return getV3ProjectsIdDeployKeysCall(id, _callback);

    }

    /**
     * Get a specific project&#39;s deploy keys
     * Get a specific project&#39;s deploy keys
     * @param id The ID of the project (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific project&#39;s deploy keys </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey getV3ProjectsIdDeployKeys(String id) throws ApiException {
        ApiResponse<SSHKey> localVarResp = getV3ProjectsIdDeployKeysWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a specific project&#39;s deploy keys
     * Get a specific project&#39;s deploy keys
     * @param id The ID of the project (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific project&#39;s deploy keys </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> getV3ProjectsIdDeployKeysWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdDeployKeysValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific project&#39;s deploy keys (asynchronously)
     * Get a specific project&#39;s deploy keys
     * @param id The ID of the project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific project&#39;s deploy keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdDeployKeysAsync(String id, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdDeployKeysValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdDeployKeysKeyId
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get single deploy key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdDeployKeysKeyIdCall(String id, Integer keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/deploy_keys/{key_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdDeployKeysKeyIdValidateBeforeCall(String id, Integer keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdDeployKeysKeyId(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling getV3ProjectsIdDeployKeysKeyId(Async)");
        }

        return getV3ProjectsIdDeployKeysKeyIdCall(id, keyId, _callback);

    }

    /**
     * Get single deploy key
     * Get single deploy key
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get single deploy key </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey getV3ProjectsIdDeployKeysKeyId(String id, Integer keyId) throws ApiException {
        ApiResponse<SSHKey> localVarResp = getV3ProjectsIdDeployKeysKeyIdWithHttpInfo(id, keyId);
        return localVarResp.getData();
    }

    /**
     * Get single deploy key
     * Get single deploy key
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get single deploy key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> getV3ProjectsIdDeployKeysKeyIdWithHttpInfo(String id, Integer keyId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdDeployKeysKeyIdValidateBeforeCall(id, keyId, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get single deploy key (asynchronously)
     * Get single deploy key
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get single deploy key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdDeployKeysKeyIdAsync(String id, Integer keyId, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdDeployKeysKeyIdValidateBeforeCall(id, keyId, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdDeployments
     * @param id The project ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all deployments of the project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdDeploymentsCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/deployments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdDeploymentsValidateBeforeCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdDeployments(Async)");
        }

        return getV3ProjectsIdDeploymentsCall(id, page, perPage, _callback);

    }

    /**
     * Get all deployments of the project
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all deployments of the project </td><td>  -  </td></tr>
     </table>
     */
    public Deployment getV3ProjectsIdDeployments(String id, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Deployment> localVarResp = getV3ProjectsIdDeploymentsWithHttpInfo(id, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all deployments of the project
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all deployments of the project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> getV3ProjectsIdDeploymentsWithHttpInfo(String id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdDeploymentsValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all deployments of the project (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all deployments of the project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdDeploymentsAsync(String id, Integer page, Integer perPage, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdDeploymentsValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdDeploymentsDeploymentId
     * @param id The project ID (required)
     * @param deploymentId The deployment ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a specific deployment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdDeploymentsDeploymentIdCall(String id, Integer deploymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/deployments/{deployment_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "deployment_id" + "}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdDeploymentsDeploymentIdValidateBeforeCall(String id, Integer deploymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdDeploymentsDeploymentId(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling getV3ProjectsIdDeploymentsDeploymentId(Async)");
        }

        return getV3ProjectsIdDeploymentsDeploymentIdCall(id, deploymentId, _callback);

    }

    /**
     * Gets a specific deployment
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param deploymentId The deployment ID (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a specific deployment </td><td>  -  </td></tr>
     </table>
     */
    public Deployment getV3ProjectsIdDeploymentsDeploymentId(String id, Integer deploymentId) throws ApiException {
        ApiResponse<Deployment> localVarResp = getV3ProjectsIdDeploymentsDeploymentIdWithHttpInfo(id, deploymentId);
        return localVarResp.getData();
    }

    /**
     * Gets a specific deployment
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param deploymentId The deployment ID (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a specific deployment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> getV3ProjectsIdDeploymentsDeploymentIdWithHttpInfo(String id, Integer deploymentId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdDeploymentsDeploymentIdValidateBeforeCall(id, deploymentId, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a specific deployment (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param deploymentId The deployment ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a specific deployment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdDeploymentsDeploymentIdAsync(String id, Integer deploymentId, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdDeploymentsDeploymentIdValidateBeforeCall(id, deploymentId, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdEnvironments
     * @param id The project ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all environments of the project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdEnvironmentsCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/environments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdEnvironmentsValidateBeforeCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdEnvironments(Async)");
        }

        return getV3ProjectsIdEnvironmentsCall(id, page, perPage, _callback);

    }

    /**
     * Get all environments of the project
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Environment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all environments of the project </td><td>  -  </td></tr>
     </table>
     */
    public Environment getV3ProjectsIdEnvironments(String id, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Environment> localVarResp = getV3ProjectsIdEnvironmentsWithHttpInfo(id, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all environments of the project
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Environment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all environments of the project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Environment> getV3ProjectsIdEnvironmentsWithHttpInfo(String id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdEnvironmentsValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all environments of the project (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all environments of the project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdEnvironmentsAsync(String id, Integer page, Integer perPage, final ApiCallback<Environment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdEnvironmentsValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdEvents
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get events for a single project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdEventsCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/events"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdEventsValidateBeforeCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdEvents(Async)");
        }

        return getV3ProjectsIdEventsCall(id, page, perPage, _callback);

    }

    /**
     * Get events for a single project
     * Get events for a single project
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get events for a single project </td><td>  -  </td></tr>
     </table>
     */
    public Event getV3ProjectsIdEvents(String id, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Event> localVarResp = getV3ProjectsIdEventsWithHttpInfo(id, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get events for a single project
     * Get events for a single project
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get events for a single project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> getV3ProjectsIdEventsWithHttpInfo(String id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdEventsValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get events for a single project (asynchronously)
     * Get events for a single project
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get events for a single project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdEventsAsync(String id, Integer page, Integer perPage, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdEventsValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdHooks
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get project hooks </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdHooksCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/hooks"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdHooksValidateBeforeCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdHooks(Async)");
        }

        return getV3ProjectsIdHooksCall(id, page, perPage, _callback);

    }

    /**
     * Get project hooks
     * Get project hooks
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ProjectHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get project hooks </td><td>  -  </td></tr>
     </table>
     */
    public ProjectHook getV3ProjectsIdHooks(String id, Integer page, Integer perPage) throws ApiException {
        ApiResponse<ProjectHook> localVarResp = getV3ProjectsIdHooksWithHttpInfo(id, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get project hooks
     * Get project hooks
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;ProjectHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get project hooks </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectHook> getV3ProjectsIdHooksWithHttpInfo(String id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdHooksValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<ProjectHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project hooks (asynchronously)
     * Get project hooks
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get project hooks </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdHooksAsync(String id, Integer page, Integer perPage, final ApiCallback<ProjectHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdHooksValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<ProjectHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdHooksHookId
     * @param id The ID of a project (required)
     * @param hookId The ID of a project hook (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdHooksHookIdCall(String id, Integer hookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/hooks/{hook_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdHooksHookIdValidateBeforeCall(String id, Integer hookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdHooksHookId(Async)");
        }

        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling getV3ProjectsIdHooksHookId(Async)");
        }

        return getV3ProjectsIdHooksHookIdCall(id, hookId, _callback);

    }

    /**
     * Get a project hook
     * Get a project hook
     * @param id The ID of a project (required)
     * @param hookId The ID of a project hook (required)
     * @return ProjectHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project hook </td><td>  -  </td></tr>
     </table>
     */
    public ProjectHook getV3ProjectsIdHooksHookId(String id, Integer hookId) throws ApiException {
        ApiResponse<ProjectHook> localVarResp = getV3ProjectsIdHooksHookIdWithHttpInfo(id, hookId);
        return localVarResp.getData();
    }

    /**
     * Get a project hook
     * Get a project hook
     * @param id The ID of a project (required)
     * @param hookId The ID of a project hook (required)
     * @return ApiResponse&lt;ProjectHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project hook </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectHook> getV3ProjectsIdHooksHookIdWithHttpInfo(String id, Integer hookId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdHooksHookIdValidateBeforeCall(id, hookId, null);
        Type localVarReturnType = new TypeToken<ProjectHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a project hook (asynchronously)
     * Get a project hook
     * @param id The ID of a project (required)
     * @param hookId The ID of a project hook (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdHooksHookIdAsync(String id, Integer hookId, final ApiCallback<ProjectHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdHooksHookIdValidateBeforeCall(id, hookId, _callback);
        Type localVarReturnType = new TypeToken<ProjectHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdIssues
     * @param id The ID of a project (required)
     * @param state Return opened, closed, or all issues (optional, default to all)
     * @param iid Return the issue having the given &#x60;iid&#x60; (optional)
     * @param labels Comma-separated list of label names (optional)
     * @param milestone Return issues for a specific milestone (optional)
     * @param orderBy Return issues ordered by &#x60;created_at&#x60; or &#x60;updated_at&#x60; fields. (optional, default to created_at)
     * @param sort Return issues sorted in &#x60;asc&#x60; or &#x60;desc&#x60; order. (optional, default to desc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project issues </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesCall(String id, String state, Integer iid, String labels, String milestone, String orderBy, String sort, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (iid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iid", iid));
        }

        if (labels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labels", labels));
        }

        if (milestone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("milestone", milestone));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdIssuesValidateBeforeCall(String id, String state, Integer iid, String labels, String milestone, String orderBy, String sort, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdIssues(Async)");
        }

        return getV3ProjectsIdIssuesCall(id, state, iid, labels, milestone, orderBy, sort, page, perPage, _callback);

    }

    /**
     * Get a list of project issues
     * Get a list of project issues
     * @param id The ID of a project (required)
     * @param state Return opened, closed, or all issues (optional, default to all)
     * @param iid Return the issue having the given &#x60;iid&#x60; (optional)
     * @param labels Comma-separated list of label names (optional)
     * @param milestone Return issues for a specific milestone (optional)
     * @param orderBy Return issues ordered by &#x60;created_at&#x60; or &#x60;updated_at&#x60; fields. (optional, default to created_at)
     * @param sort Return issues sorted in &#x60;asc&#x60; or &#x60;desc&#x60; order. (optional, default to desc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project issues </td><td>  -  </td></tr>
     </table>
     */
    public Issue getV3ProjectsIdIssues(String id, String state, Integer iid, String labels, String milestone, String orderBy, String sort, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Issue> localVarResp = getV3ProjectsIdIssuesWithHttpInfo(id, state, iid, labels, milestone, orderBy, sort, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of project issues
     * Get a list of project issues
     * @param id The ID of a project (required)
     * @param state Return opened, closed, or all issues (optional, default to all)
     * @param iid Return the issue having the given &#x60;iid&#x60; (optional)
     * @param labels Comma-separated list of label names (optional)
     * @param milestone Return issues for a specific milestone (optional)
     * @param orderBy Return issues ordered by &#x60;created_at&#x60; or &#x60;updated_at&#x60; fields. (optional, default to created_at)
     * @param sort Return issues sorted in &#x60;asc&#x60; or &#x60;desc&#x60; order. (optional, default to desc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project issues </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Issue> getV3ProjectsIdIssuesWithHttpInfo(String id, String state, Integer iid, String labels, String milestone, String orderBy, String sort, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdIssuesValidateBeforeCall(id, state, iid, labels, milestone, orderBy, sort, page, perPage, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of project issues (asynchronously)
     * Get a list of project issues
     * @param id The ID of a project (required)
     * @param state Return opened, closed, or all issues (optional, default to all)
     * @param iid Return the issue having the given &#x60;iid&#x60; (optional)
     * @param labels Comma-separated list of label names (optional)
     * @param milestone Return issues for a specific milestone (optional)
     * @param orderBy Return issues ordered by &#x60;created_at&#x60; or &#x60;updated_at&#x60; fields. (optional, default to created_at)
     * @param sort Return issues sorted in &#x60;asc&#x60; or &#x60;desc&#x60; order. (optional, default to desc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project issues </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesAsync(String id, String state, Integer iid, String labels, String milestone, String orderBy, String sort, Integer page, Integer perPage, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdIssuesValidateBeforeCall(id, state, iid, labels, milestone, orderBy, sort, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdIssuesIssueId
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single project issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesIssueIdCall(String id, Integer issueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdIssuesIssueIdValidateBeforeCall(String id, Integer issueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdIssuesIssueId(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling getV3ProjectsIdIssuesIssueId(Async)");
        }

        return getV3ProjectsIdIssuesIssueIdCall(id, issueId, _callback);

    }

    /**
     * Get a single project issue
     * Get a single project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single project issue </td><td>  -  </td></tr>
     </table>
     */
    public Issue getV3ProjectsIdIssuesIssueId(String id, Integer issueId) throws ApiException {
        ApiResponse<Issue> localVarResp = getV3ProjectsIdIssuesIssueIdWithHttpInfo(id, issueId);
        return localVarResp.getData();
    }

    /**
     * Get a single project issue
     * Get a single project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single project issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Issue> getV3ProjectsIdIssuesIssueIdWithHttpInfo(String id, Integer issueId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdIssuesIssueIdValidateBeforeCall(id, issueId, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single project issue (asynchronously)
     * Get a single project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single project issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesIssueIdAsync(String id, Integer issueId, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdIssuesIssueIdValidateBeforeCall(id, issueId, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdIssuesIssueIdAwardEmoji
     * @param id The ID of a project (required)
     * @param issueId The ID of an Issue, Merge Request or Snippet (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesIssueIdAwardEmojiCall(String id, Integer issueId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}/award_emoji"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdIssuesIssueIdAwardEmojiValidateBeforeCall(String id, Integer issueId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdIssuesIssueIdAwardEmoji(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling getV3ProjectsIdIssuesIssueIdAwardEmoji(Async)");
        }

        return getV3ProjectsIdIssuesIssueIdAwardEmojiCall(id, issueId, page, perPage, _callback);

    }

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param id The ID of a project (required)
     * @param issueId The ID of an Issue, Merge Request or Snippet (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji getV3ProjectsIdIssuesIssueIdAwardEmoji(String id, Integer issueId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = getV3ProjectsIdIssuesIssueIdAwardEmojiWithHttpInfo(id, issueId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param id The ID of a project (required)
     * @param issueId The ID of an Issue, Merge Request or Snippet (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> getV3ProjectsIdIssuesIssueIdAwardEmojiWithHttpInfo(String id, Integer issueId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdIssuesIssueIdAwardEmojiValidateBeforeCall(id, issueId, page, perPage, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of project +awardable+ award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param id The ID of a project (required)
     * @param issueId The ID of an Issue, Merge Request or Snippet (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesIssueIdAwardEmojiAsync(String id, Integer issueId, Integer page, Integer perPage, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdIssuesIssueIdAwardEmojiValidateBeforeCall(id, issueId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param issueId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdCall(Integer awardId, Integer id, Integer issueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}/award_emoji/{award_id}"
            .replace("{" + "award_id" + "}", localVarApiClient.escapeString(awardId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdValidateBeforeCall(Integer awardId, Integer id, Integer issueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awardId' is set
        if (awardId == null) {
            throw new ApiException("Missing the required parameter 'awardId' when calling getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId(Async)");
        }

        return getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdCall(awardId, id, issueId, _callback);

    }

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param issueId  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId(Integer awardId, Integer id, Integer issueId) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdWithHttpInfo(awardId, id, issueId);
        return localVarResp.getData();
    }

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param issueId  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdWithHttpInfo(Integer awardId, Integer id, Integer issueId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, issueId, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param issueId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdAsync(Integer awardId, Integer id, Integer issueId, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, issueId, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji
     * @param id  (required)
     * @param issueId  (required)
     * @param noteId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiCall(Integer id, Integer issueId, Integer noteId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiValidateBeforeCall(Integer id, Integer issueId, Integer noteId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(Async)");
        }

        return getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiCall(id, issueId, noteId, page, perPage, _callback);

    }

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param issueId  (required)
     * @param noteId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(Integer id, Integer issueId, Integer noteId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiWithHttpInfo(id, issueId, noteId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param issueId  (required)
     * @param noteId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiWithHttpInfo(Integer id, Integer issueId, Integer noteId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiValidateBeforeCall(id, issueId, noteId, page, perPage, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of project +awardable+ award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param issueId  (required)
     * @param noteId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAsync(Integer id, Integer issueId, Integer noteId, Integer page, Integer perPage, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiValidateBeforeCall(id, issueId, noteId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param issueId  (required)
     * @param noteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdCall(Integer awardId, Integer id, Integer issueId, Integer noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji/{award_id}"
            .replace("{" + "award_id" + "}", localVarApiClient.escapeString(awardId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(Integer awardId, Integer id, Integer issueId, Integer noteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awardId' is set
        if (awardId == null) {
            throw new ApiException("Missing the required parameter 'awardId' when calling getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        return getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdCall(awardId, id, issueId, noteId, _callback);

    }

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param issueId  (required)
     * @param noteId  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(Integer awardId, Integer id, Integer issueId, Integer noteId) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdWithHttpInfo(awardId, id, issueId, noteId);
        return localVarResp.getData();
    }

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param issueId  (required)
     * @param noteId  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdWithHttpInfo(Integer awardId, Integer id, Integer issueId, Integer noteId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, issueId, noteId, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param issueId  (required)
     * @param noteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdAsync(Integer awardId, Integer id, Integer issueId, Integer noteId, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, issueId, noteId, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdIssuesIssueIdTimeStats
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show time stats for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesIssueIdTimeStatsCall(String id, Integer issueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}/time_stats"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdIssuesIssueIdTimeStatsValidateBeforeCall(String id, Integer issueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdIssuesIssueIdTimeStats(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling getV3ProjectsIdIssuesIssueIdTimeStats(Async)");
        }

        return getV3ProjectsIdIssuesIssueIdTimeStatsCall(id, issueId, _callback);

    }

    /**
     * Show time stats for a project issue
     * Show time stats for a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show time stats for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public void getV3ProjectsIdIssuesIssueIdTimeStats(String id, Integer issueId) throws ApiException {
        getV3ProjectsIdIssuesIssueIdTimeStatsWithHttpInfo(id, issueId);
    }

    /**
     * Show time stats for a project issue
     * Show time stats for a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show time stats for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getV3ProjectsIdIssuesIssueIdTimeStatsWithHttpInfo(String id, Integer issueId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdIssuesIssueIdTimeStatsValidateBeforeCall(id, issueId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Show time stats for a project issue (asynchronously)
     * Show time stats for a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show time stats for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesIssueIdTimeStatsAsync(String id, Integer issueId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdIssuesIssueIdTimeStatsValidateBeforeCall(id, issueId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdIssuesNoteableIdNotes
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +noteable+ notes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesNoteableIdNotesCall(String id, Integer noteableId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{noteable_id}/notes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "noteable_id" + "}", localVarApiClient.escapeString(noteableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdIssuesNoteableIdNotesValidateBeforeCall(String id, Integer noteableId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdIssuesNoteableIdNotes(Async)");
        }

        // verify the required parameter 'noteableId' is set
        if (noteableId == null) {
            throw new ApiException("Missing the required parameter 'noteableId' when calling getV3ProjectsIdIssuesNoteableIdNotes(Async)");
        }

        return getV3ProjectsIdIssuesNoteableIdNotesCall(id, noteableId, page, perPage, _callback);

    }

    /**
     * Get a list of project +noteable+ notes
     * Get a list of project +noteable+ notes
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +noteable+ notes </td><td>  -  </td></tr>
     </table>
     */
    public Note getV3ProjectsIdIssuesNoteableIdNotes(String id, Integer noteableId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Note> localVarResp = getV3ProjectsIdIssuesNoteableIdNotesWithHttpInfo(id, noteableId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of project +noteable+ notes
     * Get a list of project +noteable+ notes
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +noteable+ notes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> getV3ProjectsIdIssuesNoteableIdNotesWithHttpInfo(String id, Integer noteableId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdIssuesNoteableIdNotesValidateBeforeCall(id, noteableId, page, perPage, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of project +noteable+ notes (asynchronously)
     * Get a list of project +noteable+ notes
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +noteable+ notes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesNoteableIdNotesAsync(String id, Integer noteableId, Integer page, Integer perPage, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdIssuesNoteableIdNotesValidateBeforeCall(id, noteableId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdIssuesNoteableIdNotesNoteId
     * @param id The ID of a project (required)
     * @param noteId The ID of a note (required)
     * @param noteableId The ID of the noteable (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesNoteableIdNotesNoteIdCall(String id, Integer noteId, Integer noteableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{noteable_id}/notes/{note_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()))
            .replace("{" + "noteable_id" + "}", localVarApiClient.escapeString(noteableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdIssuesNoteableIdNotesNoteIdValidateBeforeCall(String id, Integer noteId, Integer noteableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdIssuesNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getV3ProjectsIdIssuesNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteableId' is set
        if (noteableId == null) {
            throw new ApiException("Missing the required parameter 'noteableId' when calling getV3ProjectsIdIssuesNoteableIdNotesNoteId(Async)");
        }

        return getV3ProjectsIdIssuesNoteableIdNotesNoteIdCall(id, noteId, noteableId, _callback);

    }

    /**
     * Get a single +noteable+ note
     * Get a single +noteable+ note
     * @param id The ID of a project (required)
     * @param noteId The ID of a note (required)
     * @param noteableId The ID of the noteable (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public Note getV3ProjectsIdIssuesNoteableIdNotesNoteId(String id, Integer noteId, Integer noteableId) throws ApiException {
        ApiResponse<Note> localVarResp = getV3ProjectsIdIssuesNoteableIdNotesNoteIdWithHttpInfo(id, noteId, noteableId);
        return localVarResp.getData();
    }

    /**
     * Get a single +noteable+ note
     * Get a single +noteable+ note
     * @param id The ID of a project (required)
     * @param noteId The ID of a note (required)
     * @param noteableId The ID of the noteable (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> getV3ProjectsIdIssuesNoteableIdNotesNoteIdWithHttpInfo(String id, Integer noteId, Integer noteableId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdIssuesNoteableIdNotesNoteIdValidateBeforeCall(id, noteId, noteableId, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single +noteable+ note (asynchronously)
     * Get a single +noteable+ note
     * @param id The ID of a project (required)
     * @param noteId The ID of a note (required)
     * @param noteableId The ID of the noteable (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdIssuesNoteableIdNotesNoteIdAsync(String id, Integer noteId, Integer noteableId, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdIssuesNoteableIdNotesNoteIdValidateBeforeCall(id, noteId, noteableId, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdKeys
     * @param id The ID of the project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific project&#39;s deploy keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdKeysCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/keys"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdKeysValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdKeys(Async)");
        }

        return getV3ProjectsIdKeysCall(id, _callback);

    }

    /**
     * Get a specific project&#39;s deploy keys
     * Get a specific project&#39;s deploy keys
     * @param id The ID of the project (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific project&#39;s deploy keys </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey getV3ProjectsIdKeys(String id) throws ApiException {
        ApiResponse<SSHKey> localVarResp = getV3ProjectsIdKeysWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a specific project&#39;s deploy keys
     * Get a specific project&#39;s deploy keys
     * @param id The ID of the project (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific project&#39;s deploy keys </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> getV3ProjectsIdKeysWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdKeysValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific project&#39;s deploy keys (asynchronously)
     * Get a specific project&#39;s deploy keys
     * @param id The ID of the project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific project&#39;s deploy keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdKeysAsync(String id, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdKeysValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdKeysKeyId
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get single deploy key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdKeysKeyIdCall(String id, Integer keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/keys/{key_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdKeysKeyIdValidateBeforeCall(String id, Integer keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdKeysKeyId(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling getV3ProjectsIdKeysKeyId(Async)");
        }

        return getV3ProjectsIdKeysKeyIdCall(id, keyId, _callback);

    }

    /**
     * Get single deploy key
     * Get single deploy key
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get single deploy key </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey getV3ProjectsIdKeysKeyId(String id, Integer keyId) throws ApiException {
        ApiResponse<SSHKey> localVarResp = getV3ProjectsIdKeysKeyIdWithHttpInfo(id, keyId);
        return localVarResp.getData();
    }

    /**
     * Get single deploy key
     * Get single deploy key
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get single deploy key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> getV3ProjectsIdKeysKeyIdWithHttpInfo(String id, Integer keyId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdKeysKeyIdValidateBeforeCall(id, keyId, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get single deploy key (asynchronously)
     * Get single deploy key
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get single deploy key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdKeysKeyIdAsync(String id, Integer keyId, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdKeysKeyIdValidateBeforeCall(id, keyId, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdLabels
     * @param id The ID of a project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all labels of the project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdLabelsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/labels"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdLabelsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdLabels(Async)");
        }

        return getV3ProjectsIdLabelsCall(id, _callback);

    }

    /**
     * Get all labels of the project
     * Get all labels of the project
     * @param id The ID of a project (required)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all labels of the project </td><td>  -  </td></tr>
     </table>
     */
    public Label getV3ProjectsIdLabels(String id) throws ApiException {
        ApiResponse<Label> localVarResp = getV3ProjectsIdLabelsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get all labels of the project
     * Get all labels of the project
     * @param id The ID of a project (required)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all labels of the project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Label> getV3ProjectsIdLabelsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdLabelsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all labels of the project (asynchronously)
     * Get all labels of the project
     * @param id The ID of a project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all labels of the project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdLabelsAsync(String id, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdLabelsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMembers
     * @param id The project ID (required)
     * @param query A query string to search for members (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of group or project members viewable by the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMembersCall(String id, String query, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/members"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMembersValidateBeforeCall(String id, String query, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMembers(Async)");
        }

        return getV3ProjectsIdMembersCall(id, query, page, perPage, _callback);

    }

    /**
     * Gets a list of group or project members viewable by the authenticated user.
     * Gets a list of group or project members viewable by the authenticated user.
     * @param id The project ID (required)
     * @param query A query string to search for members (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Member
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of group or project members viewable by the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public Member getV3ProjectsIdMembers(String id, String query, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Member> localVarResp = getV3ProjectsIdMembersWithHttpInfo(id, query, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Gets a list of group or project members viewable by the authenticated user.
     * Gets a list of group or project members viewable by the authenticated user.
     * @param id The project ID (required)
     * @param query A query string to search for members (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Member&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of group or project members viewable by the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Member> getV3ProjectsIdMembersWithHttpInfo(String id, String query, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMembersValidateBeforeCall(id, query, page, perPage, null);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of group or project members viewable by the authenticated user. (asynchronously)
     * Gets a list of group or project members viewable by the authenticated user.
     * @param id The project ID (required)
     * @param query A query string to search for members (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of group or project members viewable by the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMembersAsync(String id, String query, Integer page, Integer perPage, final ApiCallback<Member> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMembersValidateBeforeCall(id, query, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMembersUserId
     * @param id The project ID (required)
     * @param userId The user ID of the member (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a member of a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMembersUserIdCall(String id, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/members/{user_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMembersUserIdValidateBeforeCall(String id, Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMembersUserId(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getV3ProjectsIdMembersUserId(Async)");
        }

        return getV3ProjectsIdMembersUserIdCall(id, userId, _callback);

    }

    /**
     * Gets a member of a group or project.
     * Gets a member of a group or project.
     * @param id The project ID (required)
     * @param userId The user ID of the member (required)
     * @return Member
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a member of a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public Member getV3ProjectsIdMembersUserId(String id, Integer userId) throws ApiException {
        ApiResponse<Member> localVarResp = getV3ProjectsIdMembersUserIdWithHttpInfo(id, userId);
        return localVarResp.getData();
    }

    /**
     * Gets a member of a group or project.
     * Gets a member of a group or project.
     * @param id The project ID (required)
     * @param userId The user ID of the member (required)
     * @return ApiResponse&lt;Member&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a member of a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Member> getV3ProjectsIdMembersUserIdWithHttpInfo(String id, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMembersUserIdValidateBeforeCall(id, userId, null);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a member of a group or project. (asynchronously)
     * Gets a member of a group or project.
     * @param id The project ID (required)
     * @param userId The user ID of the member (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a member of a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMembersUserIdAsync(String id, Integer userId, final ApiCallback<Member> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMembersUserIdValidateBeforeCall(id, userId, _callback);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestMergeRequestId
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a merge request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestMergeRequestIdCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_request/{merge_request_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestMergeRequestIdValidateBeforeCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestMergeRequestId(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestMergeRequestId(Async)");
        }

        return getV3ProjectsIdMergeRequestMergeRequestIdCall(id, mergeRequestId, _callback);

    }

    /**
     * Get a single merge request
     * This endpoint is deprecated and will be removed in GitLab 9.0.
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a merge request (required)
     * @return MergeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single merge request </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequest getV3ProjectsIdMergeRequestMergeRequestId(String id, Integer mergeRequestId) throws ApiException {
        ApiResponse<MergeRequest> localVarResp = getV3ProjectsIdMergeRequestMergeRequestIdWithHttpInfo(id, mergeRequestId);
        return localVarResp.getData();
    }

    /**
     * Get a single merge request
     * This endpoint is deprecated and will be removed in GitLab 9.0.
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a merge request (required)
     * @return ApiResponse&lt;MergeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single merge request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequest> getV3ProjectsIdMergeRequestMergeRequestIdWithHttpInfo(String id, Integer mergeRequestId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestMergeRequestIdValidateBeforeCall(id, mergeRequestId, null);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single merge request (asynchronously)
     * This endpoint is deprecated and will be removed in GitLab 9.0.
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a merge request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestMergeRequestIdAsync(String id, Integer mergeRequestId, final ApiCallback<MergeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestMergeRequestIdValidateBeforeCall(id, mergeRequestId, _callback);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestMergeRequestIdChanges
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show the merge request changes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestMergeRequestIdChangesCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_request/{merge_request_id}/changes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestMergeRequestIdChangesValidateBeforeCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestMergeRequestIdChanges(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestMergeRequestIdChanges(Async)");
        }

        return getV3ProjectsIdMergeRequestMergeRequestIdChangesCall(id, mergeRequestId, _callback);

    }

    /**
     * Show the merge request changes
     * Show the merge request changes
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @return MergeRequestChanges
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show the merge request changes </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequestChanges getV3ProjectsIdMergeRequestMergeRequestIdChanges(String id, Integer mergeRequestId) throws ApiException {
        ApiResponse<MergeRequestChanges> localVarResp = getV3ProjectsIdMergeRequestMergeRequestIdChangesWithHttpInfo(id, mergeRequestId);
        return localVarResp.getData();
    }

    /**
     * Show the merge request changes
     * Show the merge request changes
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @return ApiResponse&lt;MergeRequestChanges&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show the merge request changes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequestChanges> getV3ProjectsIdMergeRequestMergeRequestIdChangesWithHttpInfo(String id, Integer mergeRequestId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestMergeRequestIdChangesValidateBeforeCall(id, mergeRequestId, null);
        Type localVarReturnType = new TypeToken<MergeRequestChanges>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the merge request changes (asynchronously)
     * Show the merge request changes
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show the merge request changes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestMergeRequestIdChangesAsync(String id, Integer mergeRequestId, final ApiCallback<MergeRequestChanges> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestMergeRequestIdChangesValidateBeforeCall(id, mergeRequestId, _callback);
        Type localVarReturnType = new TypeToken<MergeRequestChanges>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestMergeRequestIdClosesIssues
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List issues that will be closed on merge </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesCall(String id, Integer mergeRequestId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_request/{merge_request_id}/closes_issues"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesValidateBeforeCall(String id, Integer mergeRequestId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestMergeRequestIdClosesIssues(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestMergeRequestIdClosesIssues(Async)");
        }

        return getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesCall(id, mergeRequestId, page, perPage, _callback);

    }

    /**
     * List issues that will be closed on merge
     * List issues that will be closed on merge
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return MRNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List issues that will be closed on merge </td><td>  -  </td></tr>
     </table>
     */
    public MRNote getV3ProjectsIdMergeRequestMergeRequestIdClosesIssues(String id, Integer mergeRequestId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<MRNote> localVarResp = getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesWithHttpInfo(id, mergeRequestId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List issues that will be closed on merge
     * List issues that will be closed on merge
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;MRNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List issues that will be closed on merge </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MRNote> getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesWithHttpInfo(String id, Integer mergeRequestId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesValidateBeforeCall(id, mergeRequestId, page, perPage, null);
        Type localVarReturnType = new TypeToken<MRNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List issues that will be closed on merge (asynchronously)
     * List issues that will be closed on merge
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List issues that will be closed on merge </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesAsync(String id, Integer mergeRequestId, Integer page, Integer perPage, final ApiCallback<MRNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesValidateBeforeCall(id, mergeRequestId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<MRNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestMergeRequestIdComments
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the comments of a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestMergeRequestIdCommentsCall(String id, Integer mergeRequestId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_request/{merge_request_id}/comments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestMergeRequestIdCommentsValidateBeforeCall(String id, Integer mergeRequestId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestMergeRequestIdComments(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestMergeRequestIdComments(Async)");
        }

        return getV3ProjectsIdMergeRequestMergeRequestIdCommentsCall(id, mergeRequestId, page, perPage, _callback);

    }

    /**
     * Get the comments of a merge request
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return MRNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the comments of a merge request </td><td>  -  </td></tr>
     </table>
     */
    public MRNote getV3ProjectsIdMergeRequestMergeRequestIdComments(String id, Integer mergeRequestId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<MRNote> localVarResp = getV3ProjectsIdMergeRequestMergeRequestIdCommentsWithHttpInfo(id, mergeRequestId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get the comments of a merge request
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;MRNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the comments of a merge request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MRNote> getV3ProjectsIdMergeRequestMergeRequestIdCommentsWithHttpInfo(String id, Integer mergeRequestId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestMergeRequestIdCommentsValidateBeforeCall(id, mergeRequestId, page, perPage, null);
        Type localVarReturnType = new TypeToken<MRNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the comments of a merge request (asynchronously)
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the comments of a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestMergeRequestIdCommentsAsync(String id, Integer mergeRequestId, Integer page, Integer perPage, final ApiCallback<MRNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestMergeRequestIdCommentsValidateBeforeCall(id, mergeRequestId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<MRNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestMergeRequestIdCommits
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the commits of a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestMergeRequestIdCommitsCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_request/{merge_request_id}/commits"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestMergeRequestIdCommitsValidateBeforeCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestMergeRequestIdCommits(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestMergeRequestIdCommits(Async)");
        }

        return getV3ProjectsIdMergeRequestMergeRequestIdCommitsCall(id, mergeRequestId, _callback);

    }

    /**
     * Get the commits of a merge request
     * Get the commits of a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @return RepoCommit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the commits of a merge request </td><td>  -  </td></tr>
     </table>
     */
    public RepoCommit getV3ProjectsIdMergeRequestMergeRequestIdCommits(String id, Integer mergeRequestId) throws ApiException {
        ApiResponse<RepoCommit> localVarResp = getV3ProjectsIdMergeRequestMergeRequestIdCommitsWithHttpInfo(id, mergeRequestId);
        return localVarResp.getData();
    }

    /**
     * Get the commits of a merge request
     * Get the commits of a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @return ApiResponse&lt;RepoCommit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the commits of a merge request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepoCommit> getV3ProjectsIdMergeRequestMergeRequestIdCommitsWithHttpInfo(String id, Integer mergeRequestId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestMergeRequestIdCommitsValidateBeforeCall(id, mergeRequestId, null);
        Type localVarReturnType = new TypeToken<RepoCommit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the commits of a merge request (asynchronously)
     * Get the commits of a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the commits of a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestMergeRequestIdCommitsAsync(String id, Integer mergeRequestId, final ApiCallback<RepoCommit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestMergeRequestIdCommitsValidateBeforeCall(id, mergeRequestId, _callback);
        Type localVarReturnType = new TypeToken<RepoCommit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequests
     * @param id The ID of a project (required)
     * @param state Return opened, closed, merged, or all merge requests (optional, default to all)
     * @param orderBy Return merge requests ordered by &#x60;created_at&#x60; or &#x60;updated_at&#x60; fields. (optional, default to created_at)
     * @param sort Return merge requests sorted in &#x60;asc&#x60; or &#x60;desc&#x60; order. (optional, default to desc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param iid The IID of the merge requests (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List merge requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsCall(String id, String state, String orderBy, String sort, Integer page, Integer perPage, List<Integer> iid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iid != null) {
            localVarFormParams.put("iid", iid);
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestsValidateBeforeCall(String id, String state, String orderBy, String sort, Integer page, Integer perPage, List<Integer> iid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequests(Async)");
        }

        return getV3ProjectsIdMergeRequestsCall(id, state, orderBy, sort, page, perPage, iid, _callback);

    }

    /**
     * List merge requests
     * List merge requests
     * @param id The ID of a project (required)
     * @param state Return opened, closed, merged, or all merge requests (optional, default to all)
     * @param orderBy Return merge requests ordered by &#x60;created_at&#x60; or &#x60;updated_at&#x60; fields. (optional, default to created_at)
     * @param sort Return merge requests sorted in &#x60;asc&#x60; or &#x60;desc&#x60; order. (optional, default to desc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param iid The IID of the merge requests (optional)
     * @return MergeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List merge requests </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequest getV3ProjectsIdMergeRequests(String id, String state, String orderBy, String sort, Integer page, Integer perPage, List<Integer> iid) throws ApiException {
        ApiResponse<MergeRequest> localVarResp = getV3ProjectsIdMergeRequestsWithHttpInfo(id, state, orderBy, sort, page, perPage, iid);
        return localVarResp.getData();
    }

    /**
     * List merge requests
     * List merge requests
     * @param id The ID of a project (required)
     * @param state Return opened, closed, merged, or all merge requests (optional, default to all)
     * @param orderBy Return merge requests ordered by &#x60;created_at&#x60; or &#x60;updated_at&#x60; fields. (optional, default to created_at)
     * @param sort Return merge requests sorted in &#x60;asc&#x60; or &#x60;desc&#x60; order. (optional, default to desc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param iid The IID of the merge requests (optional)
     * @return ApiResponse&lt;MergeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List merge requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequest> getV3ProjectsIdMergeRequestsWithHttpInfo(String id, String state, String orderBy, String sort, Integer page, Integer perPage, List<Integer> iid) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsValidateBeforeCall(id, state, orderBy, sort, page, perPage, iid, null);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List merge requests (asynchronously)
     * List merge requests
     * @param id The ID of a project (required)
     * @param state Return opened, closed, merged, or all merge requests (optional, default to all)
     * @param orderBy Return merge requests ordered by &#x60;created_at&#x60; or &#x60;updated_at&#x60; fields. (optional, default to created_at)
     * @param sort Return merge requests sorted in &#x60;asc&#x60; or &#x60;desc&#x60; order. (optional, default to desc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param iid The IID of the merge requests (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List merge requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsAsync(String id, String state, String orderBy, String sort, Integer page, Integer perPage, List<Integer> iid, final ApiCallback<MergeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsValidateBeforeCall(id, state, orderBy, sort, page, perPage, iid, _callback);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestsMergeRequestId
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdValidateBeforeCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestId(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestId(Async)");
        }

        return getV3ProjectsIdMergeRequestsMergeRequestIdCall(id, mergeRequestId, _callback);

    }

    /**
     * Get a single merge request
     * Get a single merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @return MergeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single merge request </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequest getV3ProjectsIdMergeRequestsMergeRequestId(String id, Integer mergeRequestId) throws ApiException {
        ApiResponse<MergeRequest> localVarResp = getV3ProjectsIdMergeRequestsMergeRequestIdWithHttpInfo(id, mergeRequestId);
        return localVarResp.getData();
    }

    /**
     * Get a single merge request
     * Get a single merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @return ApiResponse&lt;MergeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single merge request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequest> getV3ProjectsIdMergeRequestsMergeRequestIdWithHttpInfo(String id, Integer mergeRequestId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdValidateBeforeCall(id, mergeRequestId, null);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single merge request (asynchronously)
     * Get a single merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdAsync(String id, Integer mergeRequestId, final ApiCallback<MergeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdValidateBeforeCall(id, mergeRequestId, _callback);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of an Issue, Merge Request or Snippet (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiCall(String id, Integer mergeRequestId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiValidateBeforeCall(String id, Integer mergeRequestId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji(Async)");
        }

        return getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiCall(id, mergeRequestId, page, perPage, _callback);

    }

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of an Issue, Merge Request or Snippet (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji(String id, Integer mergeRequestId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiWithHttpInfo(id, mergeRequestId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of an Issue, Merge Request or Snippet (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiWithHttpInfo(String id, Integer mergeRequestId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiValidateBeforeCall(id, mergeRequestId, page, perPage, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of project +awardable+ award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of an Issue, Merge Request or Snippet (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAsync(String id, Integer mergeRequestId, Integer page, Integer perPage, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiValidateBeforeCall(id, mergeRequestId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdCall(Integer awardId, Integer id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji/{award_id}"
            .replace("{" + "award_id" + "}", localVarApiClient.escapeString(awardId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdValidateBeforeCall(Integer awardId, Integer id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awardId' is set
        if (awardId == null) {
            throw new ApiException("Missing the required parameter 'awardId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(Async)");
        }

        return getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdCall(awardId, id, mergeRequestId, _callback);

    }

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(Integer awardId, Integer id, Integer mergeRequestId) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdWithHttpInfo(awardId, id, mergeRequestId);
        return localVarResp.getData();
    }

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdWithHttpInfo(Integer awardId, Integer id, Integer mergeRequestId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, mergeRequestId, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdAsync(Integer awardId, Integer id, Integer mergeRequestId, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, mergeRequestId, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestsMergeRequestIdChanges
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show the merge request changes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdChangesCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/changes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdChangesValidateBeforeCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdChanges(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdChanges(Async)");
        }

        return getV3ProjectsIdMergeRequestsMergeRequestIdChangesCall(id, mergeRequestId, _callback);

    }

    /**
     * Show the merge request changes
     * Show the merge request changes
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @return MergeRequestChanges
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show the merge request changes </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequestChanges getV3ProjectsIdMergeRequestsMergeRequestIdChanges(String id, Integer mergeRequestId) throws ApiException {
        ApiResponse<MergeRequestChanges> localVarResp = getV3ProjectsIdMergeRequestsMergeRequestIdChangesWithHttpInfo(id, mergeRequestId);
        return localVarResp.getData();
    }

    /**
     * Show the merge request changes
     * Show the merge request changes
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @return ApiResponse&lt;MergeRequestChanges&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show the merge request changes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequestChanges> getV3ProjectsIdMergeRequestsMergeRequestIdChangesWithHttpInfo(String id, Integer mergeRequestId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdChangesValidateBeforeCall(id, mergeRequestId, null);
        Type localVarReturnType = new TypeToken<MergeRequestChanges>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show the merge request changes (asynchronously)
     * Show the merge request changes
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show the merge request changes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdChangesAsync(String id, Integer mergeRequestId, final ApiCallback<MergeRequestChanges> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdChangesValidateBeforeCall(id, mergeRequestId, _callback);
        Type localVarReturnType = new TypeToken<MergeRequestChanges>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List issues that will be closed on merge </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesCall(String id, Integer mergeRequestId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/closes_issues"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesValidateBeforeCall(String id, Integer mergeRequestId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues(Async)");
        }

        return getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesCall(id, mergeRequestId, page, perPage, _callback);

    }

    /**
     * List issues that will be closed on merge
     * List issues that will be closed on merge
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return MRNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List issues that will be closed on merge </td><td>  -  </td></tr>
     </table>
     */
    public MRNote getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues(String id, Integer mergeRequestId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<MRNote> localVarResp = getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesWithHttpInfo(id, mergeRequestId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List issues that will be closed on merge
     * List issues that will be closed on merge
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;MRNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List issues that will be closed on merge </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MRNote> getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesWithHttpInfo(String id, Integer mergeRequestId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesValidateBeforeCall(id, mergeRequestId, page, perPage, null);
        Type localVarReturnType = new TypeToken<MRNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List issues that will be closed on merge (asynchronously)
     * List issues that will be closed on merge
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List issues that will be closed on merge </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesAsync(String id, Integer mergeRequestId, Integer page, Integer perPage, final ApiCallback<MRNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesValidateBeforeCall(id, mergeRequestId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<MRNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestsMergeRequestIdComments
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the comments of a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdCommentsCall(String id, Integer mergeRequestId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/comments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdCommentsValidateBeforeCall(String id, Integer mergeRequestId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdComments(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdComments(Async)");
        }

        return getV3ProjectsIdMergeRequestsMergeRequestIdCommentsCall(id, mergeRequestId, page, perPage, _callback);

    }

    /**
     * Get the comments of a merge request
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return MRNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the comments of a merge request </td><td>  -  </td></tr>
     </table>
     */
    public MRNote getV3ProjectsIdMergeRequestsMergeRequestIdComments(String id, Integer mergeRequestId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<MRNote> localVarResp = getV3ProjectsIdMergeRequestsMergeRequestIdCommentsWithHttpInfo(id, mergeRequestId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get the comments of a merge request
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;MRNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the comments of a merge request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MRNote> getV3ProjectsIdMergeRequestsMergeRequestIdCommentsWithHttpInfo(String id, Integer mergeRequestId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdCommentsValidateBeforeCall(id, mergeRequestId, page, perPage, null);
        Type localVarReturnType = new TypeToken<MRNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the comments of a merge request (asynchronously)
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the comments of a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdCommentsAsync(String id, Integer mergeRequestId, Integer page, Integer perPage, final ApiCallback<MRNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdCommentsValidateBeforeCall(id, mergeRequestId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<MRNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestsMergeRequestIdCommits
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the commits of a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdCommitsCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/commits"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdCommitsValidateBeforeCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdCommits(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdCommits(Async)");
        }

        return getV3ProjectsIdMergeRequestsMergeRequestIdCommitsCall(id, mergeRequestId, _callback);

    }

    /**
     * Get the commits of a merge request
     * Get the commits of a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @return RepoCommit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the commits of a merge request </td><td>  -  </td></tr>
     </table>
     */
    public RepoCommit getV3ProjectsIdMergeRequestsMergeRequestIdCommits(String id, Integer mergeRequestId) throws ApiException {
        ApiResponse<RepoCommit> localVarResp = getV3ProjectsIdMergeRequestsMergeRequestIdCommitsWithHttpInfo(id, mergeRequestId);
        return localVarResp.getData();
    }

    /**
     * Get the commits of a merge request
     * Get the commits of a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @return ApiResponse&lt;RepoCommit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the commits of a merge request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepoCommit> getV3ProjectsIdMergeRequestsMergeRequestIdCommitsWithHttpInfo(String id, Integer mergeRequestId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdCommitsValidateBeforeCall(id, mergeRequestId, null);
        Type localVarReturnType = new TypeToken<RepoCommit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the commits of a merge request (asynchronously)
     * Get the commits of a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the commits of a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdCommitsAsync(String id, Integer mergeRequestId, final ApiCallback<RepoCommit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdCommitsValidateBeforeCall(id, mergeRequestId, _callback);
        Type localVarReturnType = new TypeToken<RepoCommit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param noteId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiCall(Integer id, Integer mergeRequestId, Integer noteId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiValidateBeforeCall(Integer id, Integer mergeRequestId, Integer noteId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(Async)");
        }

        return getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiCall(id, mergeRequestId, noteId, page, perPage, _callback);

    }

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param noteId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(Integer id, Integer mergeRequestId, Integer noteId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiWithHttpInfo(id, mergeRequestId, noteId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param noteId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiWithHttpInfo(Integer id, Integer mergeRequestId, Integer noteId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiValidateBeforeCall(id, mergeRequestId, noteId, page, perPage, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of project +awardable+ award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param noteId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAsync(Integer id, Integer mergeRequestId, Integer noteId, Integer page, Integer perPage, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiValidateBeforeCall(id, mergeRequestId, noteId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param noteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdCall(Integer awardId, Integer id, Integer mergeRequestId, Integer noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji/{award_id}"
            .replace("{" + "award_id" + "}", localVarApiClient.escapeString(awardId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(Integer awardId, Integer id, Integer mergeRequestId, Integer noteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awardId' is set
        if (awardId == null) {
            throw new ApiException("Missing the required parameter 'awardId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        return getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdCall(awardId, id, mergeRequestId, noteId, _callback);

    }

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param noteId  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(Integer awardId, Integer id, Integer mergeRequestId, Integer noteId) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdWithHttpInfo(awardId, id, mergeRequestId, noteId);
        return localVarResp.getData();
    }

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param noteId  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdWithHttpInfo(Integer awardId, Integer id, Integer mergeRequestId, Integer noteId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, mergeRequestId, noteId, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param noteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdAsync(Integer awardId, Integer id, Integer mergeRequestId, Integer noteId, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, mergeRequestId, noteId, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestsMergeRequestIdTimeStats
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show time stats for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/time_stats"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsValidateBeforeCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdTimeStats(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdTimeStats(Async)");
        }

        return getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsCall(id, mergeRequestId, _callback);

    }

    /**
     * Show time stats for a project merge_request
     * Show time stats for a project merge_request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show time stats for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public void getV3ProjectsIdMergeRequestsMergeRequestIdTimeStats(String id, Integer mergeRequestId) throws ApiException {
        getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsWithHttpInfo(id, mergeRequestId);
    }

    /**
     * Show time stats for a project merge_request
     * Show time stats for a project merge_request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show time stats for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsWithHttpInfo(String id, Integer mergeRequestId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsValidateBeforeCall(id, mergeRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Show time stats for a project merge_request (asynchronously)
     * Show time stats for a project merge_request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show time stats for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsAsync(String id, Integer mergeRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsValidateBeforeCall(id, mergeRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestsMergeRequestIdVersions
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a merge request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of merge request diff versions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdVersionsCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/versions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdVersionsValidateBeforeCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdVersions(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdVersions(Async)");
        }

        return getV3ProjectsIdMergeRequestsMergeRequestIdVersionsCall(id, mergeRequestId, _callback);

    }

    /**
     * Get a list of merge request diff versions
     * This feature was introduced in GitLab 8.12.
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a merge request (required)
     * @return MergeRequestDiff
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of merge request diff versions </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequestDiff getV3ProjectsIdMergeRequestsMergeRequestIdVersions(String id, Integer mergeRequestId) throws ApiException {
        ApiResponse<MergeRequestDiff> localVarResp = getV3ProjectsIdMergeRequestsMergeRequestIdVersionsWithHttpInfo(id, mergeRequestId);
        return localVarResp.getData();
    }

    /**
     * Get a list of merge request diff versions
     * This feature was introduced in GitLab 8.12.
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a merge request (required)
     * @return ApiResponse&lt;MergeRequestDiff&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of merge request diff versions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequestDiff> getV3ProjectsIdMergeRequestsMergeRequestIdVersionsWithHttpInfo(String id, Integer mergeRequestId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdVersionsValidateBeforeCall(id, mergeRequestId, null);
        Type localVarReturnType = new TypeToken<MergeRequestDiff>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of merge request diff versions (asynchronously)
     * This feature was introduced in GitLab 8.12.
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a merge request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of merge request diff versions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdVersionsAsync(String id, Integer mergeRequestId, final ApiCallback<MergeRequestDiff> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdVersionsValidateBeforeCall(id, mergeRequestId, _callback);
        Type localVarReturnType = new TypeToken<MergeRequestDiff>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a merge request (required)
     * @param versionId The ID of a merge request diff version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single merge request diff version </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdCall(String id, Integer mergeRequestId, Integer versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/versions/{version_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()))
            .replace("{" + "version_id" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdValidateBeforeCall(String id, Integer mergeRequestId, Integer versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId(Async)");
        }

        return getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdCall(id, mergeRequestId, versionId, _callback);

    }

    /**
     * Get a single merge request diff version
     * This feature was introduced in GitLab 8.12.
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a merge request (required)
     * @param versionId The ID of a merge request diff version (required)
     * @return MergeRequestDiffFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single merge request diff version </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequestDiffFull getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId(String id, Integer mergeRequestId, Integer versionId) throws ApiException {
        ApiResponse<MergeRequestDiffFull> localVarResp = getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdWithHttpInfo(id, mergeRequestId, versionId);
        return localVarResp.getData();
    }

    /**
     * Get a single merge request diff version
     * This feature was introduced in GitLab 8.12.
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a merge request (required)
     * @param versionId The ID of a merge request diff version (required)
     * @return ApiResponse&lt;MergeRequestDiffFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single merge request diff version </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequestDiffFull> getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdWithHttpInfo(String id, Integer mergeRequestId, Integer versionId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdValidateBeforeCall(id, mergeRequestId, versionId, null);
        Type localVarReturnType = new TypeToken<MergeRequestDiffFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single merge request diff version (asynchronously)
     * This feature was introduced in GitLab 8.12.
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a merge request (required)
     * @param versionId The ID of a merge request diff version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single merge request diff version </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdAsync(String id, Integer mergeRequestId, Integer versionId, final ApiCallback<MergeRequestDiffFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdValidateBeforeCall(id, mergeRequestId, versionId, _callback);
        Type localVarReturnType = new TypeToken<MergeRequestDiffFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestsNoteableIdNotes
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +noteable+ notes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsNoteableIdNotesCall(String id, Integer noteableId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{noteable_id}/notes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "noteable_id" + "}", localVarApiClient.escapeString(noteableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestsNoteableIdNotesValidateBeforeCall(String id, Integer noteableId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsNoteableIdNotes(Async)");
        }

        // verify the required parameter 'noteableId' is set
        if (noteableId == null) {
            throw new ApiException("Missing the required parameter 'noteableId' when calling getV3ProjectsIdMergeRequestsNoteableIdNotes(Async)");
        }

        return getV3ProjectsIdMergeRequestsNoteableIdNotesCall(id, noteableId, page, perPage, _callback);

    }

    /**
     * Get a list of project +noteable+ notes
     * Get a list of project +noteable+ notes
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +noteable+ notes </td><td>  -  </td></tr>
     </table>
     */
    public Note getV3ProjectsIdMergeRequestsNoteableIdNotes(String id, Integer noteableId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Note> localVarResp = getV3ProjectsIdMergeRequestsNoteableIdNotesWithHttpInfo(id, noteableId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of project +noteable+ notes
     * Get a list of project +noteable+ notes
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +noteable+ notes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> getV3ProjectsIdMergeRequestsNoteableIdNotesWithHttpInfo(String id, Integer noteableId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsNoteableIdNotesValidateBeforeCall(id, noteableId, page, perPage, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of project +noteable+ notes (asynchronously)
     * Get a list of project +noteable+ notes
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +noteable+ notes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsNoteableIdNotesAsync(String id, Integer noteableId, Integer page, Integer perPage, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsNoteableIdNotesValidateBeforeCall(id, noteableId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId
     * @param id The ID of a project (required)
     * @param noteId The ID of a note (required)
     * @param noteableId The ID of the noteable (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdCall(String id, Integer noteId, Integer noteableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{noteable_id}/notes/{note_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()))
            .replace("{" + "noteable_id" + "}", localVarApiClient.escapeString(noteableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdValidateBeforeCall(String id, Integer noteId, Integer noteableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteableId' is set
        if (noteableId == null) {
            throw new ApiException("Missing the required parameter 'noteableId' when calling getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(Async)");
        }

        return getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdCall(id, noteId, noteableId, _callback);

    }

    /**
     * Get a single +noteable+ note
     * Get a single +noteable+ note
     * @param id The ID of a project (required)
     * @param noteId The ID of a note (required)
     * @param noteableId The ID of the noteable (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public Note getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(String id, Integer noteId, Integer noteableId) throws ApiException {
        ApiResponse<Note> localVarResp = getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdWithHttpInfo(id, noteId, noteableId);
        return localVarResp.getData();
    }

    /**
     * Get a single +noteable+ note
     * Get a single +noteable+ note
     * @param id The ID of a project (required)
     * @param noteId The ID of a note (required)
     * @param noteableId The ID of the noteable (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdWithHttpInfo(String id, Integer noteId, Integer noteableId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdValidateBeforeCall(id, noteId, noteableId, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single +noteable+ note (asynchronously)
     * Get a single +noteable+ note
     * @param id The ID of a project (required)
     * @param noteId The ID of a note (required)
     * @param noteableId The ID of the noteable (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdAsync(String id, Integer noteId, Integer noteableId, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdValidateBeforeCall(id, noteId, noteableId, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMilestones
     * @param id The ID of a project (required)
     * @param state Return \&quot;active\&quot;, \&quot;closed\&quot;, or \&quot;all\&quot; milestones (optional, default to all)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param iid The IID of the milestone (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project milestones </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMilestonesCall(String id, String state, Integer page, Integer perPage, List<Integer> iid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/milestones"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iid != null) {
            localVarFormParams.put("iid", iid);
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMilestonesValidateBeforeCall(String id, String state, Integer page, Integer perPage, List<Integer> iid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMilestones(Async)");
        }

        return getV3ProjectsIdMilestonesCall(id, state, page, perPage, iid, _callback);

    }

    /**
     * Get a list of project milestones
     * Get a list of project milestones
     * @param id The ID of a project (required)
     * @param state Return \&quot;active\&quot;, \&quot;closed\&quot;, or \&quot;all\&quot; milestones (optional, default to all)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param iid The IID of the milestone (optional)
     * @return Milestone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project milestones </td><td>  -  </td></tr>
     </table>
     */
    public Milestone getV3ProjectsIdMilestones(String id, String state, Integer page, Integer perPage, List<Integer> iid) throws ApiException {
        ApiResponse<Milestone> localVarResp = getV3ProjectsIdMilestonesWithHttpInfo(id, state, page, perPage, iid);
        return localVarResp.getData();
    }

    /**
     * Get a list of project milestones
     * Get a list of project milestones
     * @param id The ID of a project (required)
     * @param state Return \&quot;active\&quot;, \&quot;closed\&quot;, or \&quot;all\&quot; milestones (optional, default to all)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param iid The IID of the milestone (optional)
     * @return ApiResponse&lt;Milestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project milestones </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Milestone> getV3ProjectsIdMilestonesWithHttpInfo(String id, String state, Integer page, Integer perPage, List<Integer> iid) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMilestonesValidateBeforeCall(id, state, page, perPage, iid, null);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of project milestones (asynchronously)
     * Get a list of project milestones
     * @param id The ID of a project (required)
     * @param state Return \&quot;active\&quot;, \&quot;closed\&quot;, or \&quot;all\&quot; milestones (optional, default to all)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param iid The IID of the milestone (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project milestones </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMilestonesAsync(String id, String state, Integer page, Integer perPage, List<Integer> iid, final ApiCallback<Milestone> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMilestonesValidateBeforeCall(id, state, page, perPage, iid, _callback);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMilestonesMilestoneId
     * @param id The ID of a project (required)
     * @param milestoneId The ID of a project milestone (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single project milestone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMilestonesMilestoneIdCall(String id, Integer milestoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/milestones/{milestone_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "milestone_id" + "}", localVarApiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMilestonesMilestoneIdValidateBeforeCall(String id, Integer milestoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMilestonesMilestoneId(Async)");
        }

        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling getV3ProjectsIdMilestonesMilestoneId(Async)");
        }

        return getV3ProjectsIdMilestonesMilestoneIdCall(id, milestoneId, _callback);

    }

    /**
     * Get a single project milestone
     * Get a single project milestone
     * @param id The ID of a project (required)
     * @param milestoneId The ID of a project milestone (required)
     * @return Milestone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single project milestone </td><td>  -  </td></tr>
     </table>
     */
    public Milestone getV3ProjectsIdMilestonesMilestoneId(String id, Integer milestoneId) throws ApiException {
        ApiResponse<Milestone> localVarResp = getV3ProjectsIdMilestonesMilestoneIdWithHttpInfo(id, milestoneId);
        return localVarResp.getData();
    }

    /**
     * Get a single project milestone
     * Get a single project milestone
     * @param id The ID of a project (required)
     * @param milestoneId The ID of a project milestone (required)
     * @return ApiResponse&lt;Milestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single project milestone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Milestone> getV3ProjectsIdMilestonesMilestoneIdWithHttpInfo(String id, Integer milestoneId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMilestonesMilestoneIdValidateBeforeCall(id, milestoneId, null);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single project milestone (asynchronously)
     * Get a single project milestone
     * @param id The ID of a project (required)
     * @param milestoneId The ID of a project milestone (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single project milestone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMilestonesMilestoneIdAsync(String id, Integer milestoneId, final ApiCallback<Milestone> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMilestonesMilestoneIdValidateBeforeCall(id, milestoneId, _callback);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdMilestonesMilestoneIdIssues
     * @param id The ID of a project (required)
     * @param milestoneId The ID of a project milestone (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all issues for a single project milestone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMilestonesMilestoneIdIssuesCall(String id, Integer milestoneId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/milestones/{milestone_id}/issues"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "milestone_id" + "}", localVarApiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdMilestonesMilestoneIdIssuesValidateBeforeCall(String id, Integer milestoneId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdMilestonesMilestoneIdIssues(Async)");
        }

        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling getV3ProjectsIdMilestonesMilestoneIdIssues(Async)");
        }

        return getV3ProjectsIdMilestonesMilestoneIdIssuesCall(id, milestoneId, page, perPage, _callback);

    }

    /**
     * Get all issues for a single project milestone
     * Get all issues for a single project milestone
     * @param id The ID of a project (required)
     * @param milestoneId The ID of a project milestone (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all issues for a single project milestone </td><td>  -  </td></tr>
     </table>
     */
    public Issue getV3ProjectsIdMilestonesMilestoneIdIssues(String id, Integer milestoneId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Issue> localVarResp = getV3ProjectsIdMilestonesMilestoneIdIssuesWithHttpInfo(id, milestoneId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all issues for a single project milestone
     * Get all issues for a single project milestone
     * @param id The ID of a project (required)
     * @param milestoneId The ID of a project milestone (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all issues for a single project milestone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Issue> getV3ProjectsIdMilestonesMilestoneIdIssuesWithHttpInfo(String id, Integer milestoneId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdMilestonesMilestoneIdIssuesValidateBeforeCall(id, milestoneId, page, perPage, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all issues for a single project milestone (asynchronously)
     * Get all issues for a single project milestone
     * @param id The ID of a project (required)
     * @param milestoneId The ID of a project milestone (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all issues for a single project milestone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdMilestonesMilestoneIdIssuesAsync(String id, Integer milestoneId, Integer page, Integer perPage, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdMilestonesMilestoneIdIssuesValidateBeforeCall(id, milestoneId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdNotificationSettings
     * @param id The group ID or project ID or project NAMESPACE/PROJECT_NAME (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get project level notification level settings, defaults to Global </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdNotificationSettingsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/notification_settings"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdNotificationSettingsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdNotificationSettings(Async)");
        }

        return getV3ProjectsIdNotificationSettingsCall(id, _callback);

    }

    /**
     * Get project level notification level settings, defaults to Global
     * This feature was introduced in GitLab 8.12
     * @param id The group ID or project ID or project NAMESPACE/PROJECT_NAME (required)
     * @return NotificationSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get project level notification level settings, defaults to Global </td><td>  -  </td></tr>
     </table>
     */
    public NotificationSetting getV3ProjectsIdNotificationSettings(String id) throws ApiException {
        ApiResponse<NotificationSetting> localVarResp = getV3ProjectsIdNotificationSettingsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get project level notification level settings, defaults to Global
     * This feature was introduced in GitLab 8.12
     * @param id The group ID or project ID or project NAMESPACE/PROJECT_NAME (required)
     * @return ApiResponse&lt;NotificationSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get project level notification level settings, defaults to Global </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationSetting> getV3ProjectsIdNotificationSettingsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdNotificationSettingsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<NotificationSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project level notification level settings, defaults to Global (asynchronously)
     * This feature was introduced in GitLab 8.12
     * @param id The group ID or project ID or project NAMESPACE/PROJECT_NAME (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get project level notification level settings, defaults to Global </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdNotificationSettingsAsync(String id, final ApiCallback<NotificationSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdNotificationSettingsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<NotificationSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdPipelines
     * @param id The project ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param scope Either running, branches, or tags (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all Pipelines of the project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdPipelinesCall(String id, Integer page, Integer perPage, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/pipelines"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdPipelinesValidateBeforeCall(String id, Integer page, Integer perPage, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdPipelines(Async)");
        }

        return getV3ProjectsIdPipelinesCall(id, page, perPage, scope, _callback);

    }

    /**
     * Get all Pipelines of the project
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param scope Either running, branches, or tags (optional)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all Pipelines of the project </td><td>  -  </td></tr>
     </table>
     */
    public Pipeline getV3ProjectsIdPipelines(String id, Integer page, Integer perPage, String scope) throws ApiException {
        ApiResponse<Pipeline> localVarResp = getV3ProjectsIdPipelinesWithHttpInfo(id, page, perPage, scope);
        return localVarResp.getData();
    }

    /**
     * Get all Pipelines of the project
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param scope Either running, branches, or tags (optional)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all Pipelines of the project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pipeline> getV3ProjectsIdPipelinesWithHttpInfo(String id, Integer page, Integer perPage, String scope) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdPipelinesValidateBeforeCall(id, page, perPage, scope, null);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Pipelines of the project (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param scope Either running, branches, or tags (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all Pipelines of the project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdPipelinesAsync(String id, Integer page, Integer perPage, String scope, final ApiCallback<Pipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdPipelinesValidateBeforeCall(id, page, perPage, scope, _callback);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdPipelinesPipelineId
     * @param id The project ID (required)
     * @param pipelineId The pipeline ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a specific pipeline for the project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdPipelinesPipelineIdCall(String id, Integer pipelineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/pipelines/{pipeline_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "pipeline_id" + "}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdPipelinesPipelineIdValidateBeforeCall(String id, Integer pipelineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdPipelinesPipelineId(Async)");
        }

        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling getV3ProjectsIdPipelinesPipelineId(Async)");
        }

        return getV3ProjectsIdPipelinesPipelineIdCall(id, pipelineId, _callback);

    }

    /**
     * Gets a specific pipeline for the project
     * This feature was introduced in GitLab 8.11
     * @param id The project ID (required)
     * @param pipelineId The pipeline ID (required)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a specific pipeline for the project </td><td>  -  </td></tr>
     </table>
     */
    public Pipeline getV3ProjectsIdPipelinesPipelineId(String id, Integer pipelineId) throws ApiException {
        ApiResponse<Pipeline> localVarResp = getV3ProjectsIdPipelinesPipelineIdWithHttpInfo(id, pipelineId);
        return localVarResp.getData();
    }

    /**
     * Gets a specific pipeline for the project
     * This feature was introduced in GitLab 8.11
     * @param id The project ID (required)
     * @param pipelineId The pipeline ID (required)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a specific pipeline for the project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pipeline> getV3ProjectsIdPipelinesPipelineIdWithHttpInfo(String id, Integer pipelineId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdPipelinesPipelineIdValidateBeforeCall(id, pipelineId, null);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a specific pipeline for the project (asynchronously)
     * This feature was introduced in GitLab 8.11
     * @param id The project ID (required)
     * @param pipelineId The pipeline ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a specific pipeline for the project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdPipelinesPipelineIdAsync(String id, Integer pipelineId, final ApiCallback<Pipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdPipelinesPipelineIdValidateBeforeCall(id, pipelineId, _callback);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryArchive
     * @param id The ID of a project (required)
     * @param sha The commit sha of the archive to be downloaded (optional)
     * @param format The archive format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an archive of the repository </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryArchiveCall(String id, String sha, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/archive"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sha != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sha", sha));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryArchiveValidateBeforeCall(String id, String sha, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryArchive(Async)");
        }

        return getV3ProjectsIdRepositoryArchiveCall(id, sha, format, _callback);

    }

    /**
     * Get an archive of the repository
     * Get an archive of the repository
     * @param id The ID of a project (required)
     * @param sha The commit sha of the archive to be downloaded (optional)
     * @param format The archive format (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an archive of the repository </td><td>  -  </td></tr>
     </table>
     */
    public void getV3ProjectsIdRepositoryArchive(String id, String sha, String format) throws ApiException {
        getV3ProjectsIdRepositoryArchiveWithHttpInfo(id, sha, format);
    }

    /**
     * Get an archive of the repository
     * Get an archive of the repository
     * @param id The ID of a project (required)
     * @param sha The commit sha of the archive to be downloaded (optional)
     * @param format The archive format (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an archive of the repository </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getV3ProjectsIdRepositoryArchiveWithHttpInfo(String id, String sha, String format) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryArchiveValidateBeforeCall(id, sha, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get an archive of the repository (asynchronously)
     * Get an archive of the repository
     * @param id The ID of a project (required)
     * @param sha The commit sha of the archive to be downloaded (optional)
     * @param format The archive format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an archive of the repository </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryArchiveAsync(String id, String sha, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryArchiveValidateBeforeCall(id, sha, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryBlobsSha
     * @param id The ID of a project (required)
     * @param sha The commit, branch name, or tag name (required)
     * @param filepath The path to the file to display (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw file contents </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryBlobsShaCall(String id, String sha, String filepath, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/blobs/{sha}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filepath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filepath", filepath));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryBlobsShaValidateBeforeCall(String id, String sha, String filepath, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryBlobsSha(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling getV3ProjectsIdRepositoryBlobsSha(Async)");
        }

        // verify the required parameter 'filepath' is set
        if (filepath == null) {
            throw new ApiException("Missing the required parameter 'filepath' when calling getV3ProjectsIdRepositoryBlobsSha(Async)");
        }

        return getV3ProjectsIdRepositoryBlobsShaCall(id, sha, filepath, _callback);

    }

    /**
     * Get a raw file contents
     * Get a raw file contents
     * @param id The ID of a project (required)
     * @param sha The commit, branch name, or tag name (required)
     * @param filepath The path to the file to display (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw file contents </td><td>  -  </td></tr>
     </table>
     */
    public void getV3ProjectsIdRepositoryBlobsSha(String id, String sha, String filepath) throws ApiException {
        getV3ProjectsIdRepositoryBlobsShaWithHttpInfo(id, sha, filepath);
    }

    /**
     * Get a raw file contents
     * Get a raw file contents
     * @param id The ID of a project (required)
     * @param sha The commit, branch name, or tag name (required)
     * @param filepath The path to the file to display (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw file contents </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getV3ProjectsIdRepositoryBlobsShaWithHttpInfo(String id, String sha, String filepath) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryBlobsShaValidateBeforeCall(id, sha, filepath, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a raw file contents (asynchronously)
     * Get a raw file contents
     * @param id The ID of a project (required)
     * @param sha The commit, branch name, or tag name (required)
     * @param filepath The path to the file to display (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw file contents </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryBlobsShaAsync(String id, String sha, String filepath, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryBlobsShaValidateBeforeCall(id, sha, filepath, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryBranches
     * @param id The ID of a project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository branches </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryBranchesCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/branches"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryBranchesValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryBranches(Async)");
        }

        return getV3ProjectsIdRepositoryBranchesCall(id, _callback);

    }

    /**
     * Get a project repository branches
     * Get a project repository branches
     * @param id The ID of a project (required)
     * @return RepoBranch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository branches </td><td>  -  </td></tr>
     </table>
     */
    public RepoBranch getV3ProjectsIdRepositoryBranches(String id) throws ApiException {
        ApiResponse<RepoBranch> localVarResp = getV3ProjectsIdRepositoryBranchesWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a project repository branches
     * Get a project repository branches
     * @param id The ID of a project (required)
     * @return ApiResponse&lt;RepoBranch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository branches </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepoBranch> getV3ProjectsIdRepositoryBranchesWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryBranchesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RepoBranch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a project repository branches (asynchronously)
     * Get a project repository branches
     * @param id The ID of a project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository branches </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryBranchesAsync(String id, final ApiCallback<RepoBranch> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryBranchesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RepoBranch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryBranchesBranch
     * @param id The ID of a project (required)
     * @param branch The name of the branch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single branch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryBranchesBranchCall(String id, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/branches/{branch}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryBranchesBranchValidateBeforeCall(String id, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryBranchesBranch(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getV3ProjectsIdRepositoryBranchesBranch(Async)");
        }

        return getV3ProjectsIdRepositoryBranchesBranchCall(id, branch, _callback);

    }

    /**
     * Get a single branch
     * Get a single branch
     * @param id The ID of a project (required)
     * @param branch The name of the branch (required)
     * @return RepoBranch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single branch </td><td>  -  </td></tr>
     </table>
     */
    public RepoBranch getV3ProjectsIdRepositoryBranchesBranch(String id, String branch) throws ApiException {
        ApiResponse<RepoBranch> localVarResp = getV3ProjectsIdRepositoryBranchesBranchWithHttpInfo(id, branch);
        return localVarResp.getData();
    }

    /**
     * Get a single branch
     * Get a single branch
     * @param id The ID of a project (required)
     * @param branch The name of the branch (required)
     * @return ApiResponse&lt;RepoBranch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single branch </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepoBranch> getV3ProjectsIdRepositoryBranchesBranchWithHttpInfo(String id, String branch) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryBranchesBranchValidateBeforeCall(id, branch, null);
        Type localVarReturnType = new TypeToken<RepoBranch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single branch (asynchronously)
     * Get a single branch
     * @param id The ID of a project (required)
     * @param branch The name of the branch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single branch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryBranchesBranchAsync(String id, String branch, final ApiCallback<RepoBranch> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryBranchesBranchValidateBeforeCall(id, branch, _callback);
        Type localVarReturnType = new TypeToken<RepoBranch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryCommits
     * @param id The ID of a project (required)
     * @param refName The name of a repository branch or tag, if not given the default branch is used (optional)
     * @param since Only commits after or in this date will be returned (optional)
     * @param until Only commits before or in this date will be returned (optional)
     * @param page The page for pagination (optional, default to 0)
     * @param perPage The number of results per page (optional, default to 20)
     * @param path The file path (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository commits </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryCommitsCall(String id, String refName, String since, String until, Integer page, Integer perPage, String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/commits"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (refName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref_name", refName));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryCommitsValidateBeforeCall(String id, String refName, String since, String until, Integer page, Integer perPage, String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryCommits(Async)");
        }

        return getV3ProjectsIdRepositoryCommitsCall(id, refName, since, until, page, perPage, path, _callback);

    }

    /**
     * Get a project repository commits
     * Get a project repository commits
     * @param id The ID of a project (required)
     * @param refName The name of a repository branch or tag, if not given the default branch is used (optional)
     * @param since Only commits after or in this date will be returned (optional)
     * @param until Only commits before or in this date will be returned (optional)
     * @param page The page for pagination (optional, default to 0)
     * @param perPage The number of results per page (optional, default to 20)
     * @param path The file path (optional)
     * @return RepoCommit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository commits </td><td>  -  </td></tr>
     </table>
     */
    public RepoCommit getV3ProjectsIdRepositoryCommits(String id, String refName, String since, String until, Integer page, Integer perPage, String path) throws ApiException {
        ApiResponse<RepoCommit> localVarResp = getV3ProjectsIdRepositoryCommitsWithHttpInfo(id, refName, since, until, page, perPage, path);
        return localVarResp.getData();
    }

    /**
     * Get a project repository commits
     * Get a project repository commits
     * @param id The ID of a project (required)
     * @param refName The name of a repository branch or tag, if not given the default branch is used (optional)
     * @param since Only commits after or in this date will be returned (optional)
     * @param until Only commits before or in this date will be returned (optional)
     * @param page The page for pagination (optional, default to 0)
     * @param perPage The number of results per page (optional, default to 20)
     * @param path The file path (optional)
     * @return ApiResponse&lt;RepoCommit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository commits </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepoCommit> getV3ProjectsIdRepositoryCommitsWithHttpInfo(String id, String refName, String since, String until, Integer page, Integer perPage, String path) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryCommitsValidateBeforeCall(id, refName, since, until, page, perPage, path, null);
        Type localVarReturnType = new TypeToken<RepoCommit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a project repository commits (asynchronously)
     * Get a project repository commits
     * @param id The ID of a project (required)
     * @param refName The name of a repository branch or tag, if not given the default branch is used (optional)
     * @param since Only commits after or in this date will be returned (optional)
     * @param until Only commits before or in this date will be returned (optional)
     * @param page The page for pagination (optional, default to 0)
     * @param perPage The number of results per page (optional, default to 20)
     * @param path The file path (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository commits </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryCommitsAsync(String id, String refName, String since, String until, Integer page, Integer perPage, String path, final ApiCallback<RepoCommit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryCommitsValidateBeforeCall(id, refName, since, until, page, perPage, path, _callback);
        Type localVarReturnType = new TypeToken<RepoCommit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryCommitsSha
     * @param id The ID of a project (required)
     * @param sha A commit sha, or the name of a branch or tag (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific commit of a project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryCommitsShaCall(String id, String sha, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/commits/{sha}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryCommitsShaValidateBeforeCall(String id, String sha, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryCommitsSha(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling getV3ProjectsIdRepositoryCommitsSha(Async)");
        }

        return getV3ProjectsIdRepositoryCommitsShaCall(id, sha, _callback);

    }

    /**
     * Get a specific commit of a project
     * Get a specific commit of a project
     * @param id The ID of a project (required)
     * @param sha A commit sha, or the name of a branch or tag (required)
     * @return RepoCommitDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific commit of a project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RepoCommitDetail getV3ProjectsIdRepositoryCommitsSha(String id, String sha) throws ApiException {
        ApiResponse<RepoCommitDetail> localVarResp = getV3ProjectsIdRepositoryCommitsShaWithHttpInfo(id, sha);
        return localVarResp.getData();
    }

    /**
     * Get a specific commit of a project
     * Get a specific commit of a project
     * @param id The ID of a project (required)
     * @param sha A commit sha, or the name of a branch or tag (required)
     * @return ApiResponse&lt;RepoCommitDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific commit of a project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepoCommitDetail> getV3ProjectsIdRepositoryCommitsShaWithHttpInfo(String id, String sha) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryCommitsShaValidateBeforeCall(id, sha, null);
        Type localVarReturnType = new TypeToken<RepoCommitDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific commit of a project (asynchronously)
     * Get a specific commit of a project
     * @param id The ID of a project (required)
     * @param sha A commit sha, or the name of a branch or tag (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific commit of a project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryCommitsShaAsync(String id, String sha, final ApiCallback<RepoCommitDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryCommitsShaValidateBeforeCall(id, sha, _callback);
        Type localVarReturnType = new TypeToken<RepoCommitDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryCommitsShaBlob
     * @param id The ID of a project (required)
     * @param sha The commit, branch name, or tag name (required)
     * @param filepath The path to the file to display (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw file contents </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryCommitsShaBlobCall(String id, String sha, String filepath, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/commits/{sha}/blob"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filepath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filepath", filepath));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryCommitsShaBlobValidateBeforeCall(String id, String sha, String filepath, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryCommitsShaBlob(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling getV3ProjectsIdRepositoryCommitsShaBlob(Async)");
        }

        // verify the required parameter 'filepath' is set
        if (filepath == null) {
            throw new ApiException("Missing the required parameter 'filepath' when calling getV3ProjectsIdRepositoryCommitsShaBlob(Async)");
        }

        return getV3ProjectsIdRepositoryCommitsShaBlobCall(id, sha, filepath, _callback);

    }

    /**
     * Get a raw file contents
     * Get a raw file contents
     * @param id The ID of a project (required)
     * @param sha The commit, branch name, or tag name (required)
     * @param filepath The path to the file to display (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw file contents </td><td>  -  </td></tr>
     </table>
     */
    public void getV3ProjectsIdRepositoryCommitsShaBlob(String id, String sha, String filepath) throws ApiException {
        getV3ProjectsIdRepositoryCommitsShaBlobWithHttpInfo(id, sha, filepath);
    }

    /**
     * Get a raw file contents
     * Get a raw file contents
     * @param id The ID of a project (required)
     * @param sha The commit, branch name, or tag name (required)
     * @param filepath The path to the file to display (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw file contents </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getV3ProjectsIdRepositoryCommitsShaBlobWithHttpInfo(String id, String sha, String filepath) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryCommitsShaBlobValidateBeforeCall(id, sha, filepath, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a raw file contents (asynchronously)
     * Get a raw file contents
     * @param id The ID of a project (required)
     * @param sha The commit, branch name, or tag name (required)
     * @param filepath The path to the file to display (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw file contents </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryCommitsShaBlobAsync(String id, String sha, String filepath, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryCommitsShaBlobValidateBeforeCall(id, sha, filepath, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryCommitsShaBuilds
     * @param id The ID of a project (required)
     * @param sha The SHA id of a commit (required)
     * @param scope The scope of builds to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get builds for a specific commit of a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryCommitsShaBuildsCall(String id, String sha, String scope, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/commits/{sha}/builds"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryCommitsShaBuildsValidateBeforeCall(String id, String sha, String scope, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryCommitsShaBuilds(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling getV3ProjectsIdRepositoryCommitsShaBuilds(Async)");
        }

        return getV3ProjectsIdRepositoryCommitsShaBuildsCall(id, sha, scope, page, perPage, _callback);

    }

    /**
     * Get builds for a specific commit of a project
     * Get builds for a specific commit of a project
     * @param id The ID of a project (required)
     * @param sha The SHA id of a commit (required)
     * @param scope The scope of builds to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get builds for a specific commit of a project </td><td>  -  </td></tr>
     </table>
     */
    public Build getV3ProjectsIdRepositoryCommitsShaBuilds(String id, String sha, String scope, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Build> localVarResp = getV3ProjectsIdRepositoryCommitsShaBuildsWithHttpInfo(id, sha, scope, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get builds for a specific commit of a project
     * Get builds for a specific commit of a project
     * @param id The ID of a project (required)
     * @param sha The SHA id of a commit (required)
     * @param scope The scope of builds to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get builds for a specific commit of a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Build> getV3ProjectsIdRepositoryCommitsShaBuildsWithHttpInfo(String id, String sha, String scope, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryCommitsShaBuildsValidateBeforeCall(id, sha, scope, page, perPage, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get builds for a specific commit of a project (asynchronously)
     * Get builds for a specific commit of a project
     * @param id The ID of a project (required)
     * @param sha The SHA id of a commit (required)
     * @param scope The scope of builds to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get builds for a specific commit of a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryCommitsShaBuildsAsync(String id, String sha, String scope, Integer page, Integer perPage, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryCommitsShaBuildsValidateBeforeCall(id, sha, scope, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryCommitsShaComments
     * @param id The ID of a project (required)
     * @param sha A commit sha, or the name of a branch or tag (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a commit&#39;s comments </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryCommitsShaCommentsCall(String id, String sha, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/commits/{sha}/comments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryCommitsShaCommentsValidateBeforeCall(String id, String sha, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryCommitsShaComments(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling getV3ProjectsIdRepositoryCommitsShaComments(Async)");
        }

        return getV3ProjectsIdRepositoryCommitsShaCommentsCall(id, sha, page, perPage, _callback);

    }

    /**
     * Get a commit&#39;s comments
     * Get a commit&#39;s comments
     * @param id The ID of a project (required)
     * @param sha A commit sha, or the name of a branch or tag (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return CommitNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a commit&#39;s comments </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CommitNote getV3ProjectsIdRepositoryCommitsShaComments(String id, String sha, Integer page, Integer perPage) throws ApiException {
        ApiResponse<CommitNote> localVarResp = getV3ProjectsIdRepositoryCommitsShaCommentsWithHttpInfo(id, sha, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a commit&#39;s comments
     * Get a commit&#39;s comments
     * @param id The ID of a project (required)
     * @param sha A commit sha, or the name of a branch or tag (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;CommitNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a commit&#39;s comments </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitNote> getV3ProjectsIdRepositoryCommitsShaCommentsWithHttpInfo(String id, String sha, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryCommitsShaCommentsValidateBeforeCall(id, sha, page, perPage, null);
        Type localVarReturnType = new TypeToken<CommitNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a commit&#39;s comments (asynchronously)
     * Get a commit&#39;s comments
     * @param id The ID of a project (required)
     * @param sha A commit sha, or the name of a branch or tag (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a commit&#39;s comments </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryCommitsShaCommentsAsync(String id, String sha, Integer page, Integer perPage, final ApiCallback<CommitNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryCommitsShaCommentsValidateBeforeCall(id, sha, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<CommitNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryCommitsShaDiff
     * @param id The ID of a project (required)
     * @param sha A commit sha, or the name of a branch or tag (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the diff for a specific commit of a project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryCommitsShaDiffCall(String id, String sha, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/commits/{sha}/diff"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryCommitsShaDiffValidateBeforeCall(String id, String sha, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryCommitsShaDiff(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling getV3ProjectsIdRepositoryCommitsShaDiff(Async)");
        }

        return getV3ProjectsIdRepositoryCommitsShaDiffCall(id, sha, _callback);

    }

    /**
     * Get the diff for a specific commit of a project
     * Get the diff for a specific commit of a project
     * @param id The ID of a project (required)
     * @param sha A commit sha, or the name of a branch or tag (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the diff for a specific commit of a project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void getV3ProjectsIdRepositoryCommitsShaDiff(String id, String sha) throws ApiException {
        getV3ProjectsIdRepositoryCommitsShaDiffWithHttpInfo(id, sha);
    }

    /**
     * Get the diff for a specific commit of a project
     * Get the diff for a specific commit of a project
     * @param id The ID of a project (required)
     * @param sha A commit sha, or the name of a branch or tag (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the diff for a specific commit of a project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getV3ProjectsIdRepositoryCommitsShaDiffWithHttpInfo(String id, String sha) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryCommitsShaDiffValidateBeforeCall(id, sha, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the diff for a specific commit of a project (asynchronously)
     * Get the diff for a specific commit of a project
     * @param id The ID of a project (required)
     * @param sha A commit sha, or the name of a branch or tag (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the diff for a specific commit of a project </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryCommitsShaDiffAsync(String id, String sha, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryCommitsShaDiffValidateBeforeCall(id, sha, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryCommitsShaStatuses
     * @param id The ID of a project (required)
     * @param sha The commit hash (required)
     * @param ref The ref (optional)
     * @param stage The stage (optional)
     * @param name The name (optional)
     * @param all Show all statuses, default: false (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a commit&#39;s statuses </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryCommitsShaStatusesCall(String id, String sha, String ref, String stage, String name, String all, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/commits/{sha}/statuses"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        if (stage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage", stage));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryCommitsShaStatusesValidateBeforeCall(String id, String sha, String ref, String stage, String name, String all, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryCommitsShaStatuses(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling getV3ProjectsIdRepositoryCommitsShaStatuses(Async)");
        }

        return getV3ProjectsIdRepositoryCommitsShaStatusesCall(id, sha, ref, stage, name, all, page, perPage, _callback);

    }

    /**
     * Get a commit&#39;s statuses
     * Get a commit&#39;s statuses
     * @param id The ID of a project (required)
     * @param sha The commit hash (required)
     * @param ref The ref (optional)
     * @param stage The stage (optional)
     * @param name The name (optional)
     * @param all Show all statuses, default: false (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return CommitStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a commit&#39;s statuses </td><td>  -  </td></tr>
     </table>
     */
    public CommitStatus getV3ProjectsIdRepositoryCommitsShaStatuses(String id, String sha, String ref, String stage, String name, String all, Integer page, Integer perPage) throws ApiException {
        ApiResponse<CommitStatus> localVarResp = getV3ProjectsIdRepositoryCommitsShaStatusesWithHttpInfo(id, sha, ref, stage, name, all, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a commit&#39;s statuses
     * Get a commit&#39;s statuses
     * @param id The ID of a project (required)
     * @param sha The commit hash (required)
     * @param ref The ref (optional)
     * @param stage The stage (optional)
     * @param name The name (optional)
     * @param all Show all statuses, default: false (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;CommitStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a commit&#39;s statuses </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitStatus> getV3ProjectsIdRepositoryCommitsShaStatusesWithHttpInfo(String id, String sha, String ref, String stage, String name, String all, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryCommitsShaStatusesValidateBeforeCall(id, sha, ref, stage, name, all, page, perPage, null);
        Type localVarReturnType = new TypeToken<CommitStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a commit&#39;s statuses (asynchronously)
     * Get a commit&#39;s statuses
     * @param id The ID of a project (required)
     * @param sha The commit hash (required)
     * @param ref The ref (optional)
     * @param stage The stage (optional)
     * @param name The name (optional)
     * @param all Show all statuses, default: false (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a commit&#39;s statuses </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryCommitsShaStatusesAsync(String id, String sha, String ref, String stage, String name, String all, Integer page, Integer perPage, final ApiCallback<CommitStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryCommitsShaStatusesValidateBeforeCall(id, sha, ref, stage, name, all, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<CommitStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryCompare
     * @param id The ID of a project (required)
     * @param from The commit, branch name, or tag name to start comparison (required)
     * @param to The commit, branch name, or tag name to stop comparison (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Compare two branches, tags, or commits </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryCompareCall(String id, String from, String to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/compare"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryCompareValidateBeforeCall(String id, String from, String to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryCompare(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getV3ProjectsIdRepositoryCompare(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getV3ProjectsIdRepositoryCompare(Async)");
        }

        return getV3ProjectsIdRepositoryCompareCall(id, from, to, _callback);

    }

    /**
     * Compare two branches, tags, or commits
     * Compare two branches, tags, or commits
     * @param id The ID of a project (required)
     * @param from The commit, branch name, or tag name to start comparison (required)
     * @param to The commit, branch name, or tag name to stop comparison (required)
     * @return Compare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Compare two branches, tags, or commits </td><td>  -  </td></tr>
     </table>
     */
    public Compare getV3ProjectsIdRepositoryCompare(String id, String from, String to) throws ApiException {
        ApiResponse<Compare> localVarResp = getV3ProjectsIdRepositoryCompareWithHttpInfo(id, from, to);
        return localVarResp.getData();
    }

    /**
     * Compare two branches, tags, or commits
     * Compare two branches, tags, or commits
     * @param id The ID of a project (required)
     * @param from The commit, branch name, or tag name to start comparison (required)
     * @param to The commit, branch name, or tag name to stop comparison (required)
     * @return ApiResponse&lt;Compare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Compare two branches, tags, or commits </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Compare> getV3ProjectsIdRepositoryCompareWithHttpInfo(String id, String from, String to) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryCompareValidateBeforeCall(id, from, to, null);
        Type localVarReturnType = new TypeToken<Compare>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compare two branches, tags, or commits (asynchronously)
     * Compare two branches, tags, or commits
     * @param id The ID of a project (required)
     * @param from The commit, branch name, or tag name to start comparison (required)
     * @param to The commit, branch name, or tag name to stop comparison (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Compare two branches, tags, or commits </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryCompareAsync(String id, String from, String to, final ApiCallback<Compare> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryCompareValidateBeforeCall(id, from, to, _callback);
        Type localVarReturnType = new TypeToken<Compare>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryContributors
     * @param id The ID of a project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get repository contributors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryContributorsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/contributors"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryContributorsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryContributors(Async)");
        }

        return getV3ProjectsIdRepositoryContributorsCall(id, _callback);

    }

    /**
     * Get repository contributors
     * Get repository contributors
     * @param id The ID of a project (required)
     * @return Contributor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get repository contributors </td><td>  -  </td></tr>
     </table>
     */
    public Contributor getV3ProjectsIdRepositoryContributors(String id) throws ApiException {
        ApiResponse<Contributor> localVarResp = getV3ProjectsIdRepositoryContributorsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get repository contributors
     * Get repository contributors
     * @param id The ID of a project (required)
     * @return ApiResponse&lt;Contributor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get repository contributors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contributor> getV3ProjectsIdRepositoryContributorsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryContributorsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Contributor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get repository contributors (asynchronously)
     * Get repository contributors
     * @param id The ID of a project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get repository contributors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryContributorsAsync(String id, final ApiCallback<Contributor> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryContributorsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Contributor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryFiles
     * @param id The project ID (required)
     * @param filePath The path to the file. Ex. lib/class.rb (required)
     * @param ref The name of branch, tag, or commit (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a file from repository </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryFilesCall(String id, String filePath, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/files"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filePath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_path", filePath));
        }

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryFilesValidateBeforeCall(String id, String filePath, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryFiles(Async)");
        }

        // verify the required parameter 'filePath' is set
        if (filePath == null) {
            throw new ApiException("Missing the required parameter 'filePath' when calling getV3ProjectsIdRepositoryFiles(Async)");
        }

        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling getV3ProjectsIdRepositoryFiles(Async)");
        }

        return getV3ProjectsIdRepositoryFilesCall(id, filePath, ref, _callback);

    }

    /**
     * Get a file from repository
     * Get a file from repository
     * @param id The project ID (required)
     * @param filePath The path to the file. Ex. lib/class.rb (required)
     * @param ref The name of branch, tag, or commit (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a file from repository </td><td>  -  </td></tr>
     </table>
     */
    public void getV3ProjectsIdRepositoryFiles(String id, String filePath, String ref) throws ApiException {
        getV3ProjectsIdRepositoryFilesWithHttpInfo(id, filePath, ref);
    }

    /**
     * Get a file from repository
     * Get a file from repository
     * @param id The project ID (required)
     * @param filePath The path to the file. Ex. lib/class.rb (required)
     * @param ref The name of branch, tag, or commit (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a file from repository </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getV3ProjectsIdRepositoryFilesWithHttpInfo(String id, String filePath, String ref) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryFilesValidateBeforeCall(id, filePath, ref, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a file from repository (asynchronously)
     * Get a file from repository
     * @param id The project ID (required)
     * @param filePath The path to the file. Ex. lib/class.rb (required)
     * @param ref The name of branch, tag, or commit (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a file from repository </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryFilesAsync(String id, String filePath, String ref, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryFilesValidateBeforeCall(id, filePath, ref, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryRawBlobsSha
     * @param id The ID of a project (required)
     * @param sha The commit, branch name, or tag name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw blob contents by blob sha </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryRawBlobsShaCall(String id, String sha, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/raw_blobs/{sha}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryRawBlobsShaValidateBeforeCall(String id, String sha, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryRawBlobsSha(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling getV3ProjectsIdRepositoryRawBlobsSha(Async)");
        }

        return getV3ProjectsIdRepositoryRawBlobsShaCall(id, sha, _callback);

    }

    /**
     * Get a raw blob contents by blob sha
     * Get a raw blob contents by blob sha
     * @param id The ID of a project (required)
     * @param sha The commit, branch name, or tag name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw blob contents by blob sha </td><td>  -  </td></tr>
     </table>
     */
    public void getV3ProjectsIdRepositoryRawBlobsSha(String id, String sha) throws ApiException {
        getV3ProjectsIdRepositoryRawBlobsShaWithHttpInfo(id, sha);
    }

    /**
     * Get a raw blob contents by blob sha
     * Get a raw blob contents by blob sha
     * @param id The ID of a project (required)
     * @param sha The commit, branch name, or tag name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw blob contents by blob sha </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getV3ProjectsIdRepositoryRawBlobsShaWithHttpInfo(String id, String sha) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryRawBlobsShaValidateBeforeCall(id, sha, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a raw blob contents by blob sha (asynchronously)
     * Get a raw blob contents by blob sha
     * @param id The ID of a project (required)
     * @param sha The commit, branch name, or tag name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw blob contents by blob sha </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryRawBlobsShaAsync(String id, String sha, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryRawBlobsShaValidateBeforeCall(id, sha, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryTags
     * @param id The ID of a project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository tags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryTagsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryTagsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryTags(Async)");
        }

        return getV3ProjectsIdRepositoryTagsCall(id, _callback);

    }

    /**
     * Get a project repository tags
     * Get a project repository tags
     * @param id The ID of a project (required)
     * @return RepoTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository tags </td><td>  -  </td></tr>
     </table>
     */
    public RepoTag getV3ProjectsIdRepositoryTags(String id) throws ApiException {
        ApiResponse<RepoTag> localVarResp = getV3ProjectsIdRepositoryTagsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a project repository tags
     * Get a project repository tags
     * @param id The ID of a project (required)
     * @return ApiResponse&lt;RepoTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository tags </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepoTag> getV3ProjectsIdRepositoryTagsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryTagsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RepoTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a project repository tags (asynchronously)
     * Get a project repository tags
     * @param id The ID of a project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository tags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryTagsAsync(String id, final ApiCallback<RepoTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryTagsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RepoTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryTagsTagName
     * @param id The ID of a project (required)
     * @param tagName The name of the tag (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single repository tag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryTagsTagNameCall(String id, String tagName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/tags/{tag_name}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "tag_name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryTagsTagNameValidateBeforeCall(String id, String tagName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryTagsTagName(Async)");
        }

        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling getV3ProjectsIdRepositoryTagsTagName(Async)");
        }

        return getV3ProjectsIdRepositoryTagsTagNameCall(id, tagName, _callback);

    }

    /**
     * Get a single repository tag
     * Get a single repository tag
     * @param id The ID of a project (required)
     * @param tagName The name of the tag (required)
     * @return RepoTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single repository tag </td><td>  -  </td></tr>
     </table>
     */
    public RepoTag getV3ProjectsIdRepositoryTagsTagName(String id, String tagName) throws ApiException {
        ApiResponse<RepoTag> localVarResp = getV3ProjectsIdRepositoryTagsTagNameWithHttpInfo(id, tagName);
        return localVarResp.getData();
    }

    /**
     * Get a single repository tag
     * Get a single repository tag
     * @param id The ID of a project (required)
     * @param tagName The name of the tag (required)
     * @return ApiResponse&lt;RepoTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single repository tag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepoTag> getV3ProjectsIdRepositoryTagsTagNameWithHttpInfo(String id, String tagName) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryTagsTagNameValidateBeforeCall(id, tagName, null);
        Type localVarReturnType = new TypeToken<RepoTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single repository tag (asynchronously)
     * Get a single repository tag
     * @param id The ID of a project (required)
     * @param tagName The name of the tag (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single repository tag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryTagsTagNameAsync(String id, String tagName, final ApiCallback<RepoTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryTagsTagNameValidateBeforeCall(id, tagName, _callback);
        Type localVarReturnType = new TypeToken<RepoTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRepositoryTree
     * @param id The ID of a project (required)
     * @param refName The name of a repository branch or tag, if not given the default branch is used (optional)
     * @param path The path of the tree (optional)
     * @param recursive Used to get a recursive tree (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository tree </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryTreeCall(String id, String refName, String path, Boolean recursive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/tree"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (refName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref_name", refName));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRepositoryTreeValidateBeforeCall(String id, String refName, String path, Boolean recursive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryTree(Async)");
        }

        return getV3ProjectsIdRepositoryTreeCall(id, refName, path, recursive, _callback);

    }

    /**
     * Get a project repository tree
     * Get a project repository tree
     * @param id The ID of a project (required)
     * @param refName The name of a repository branch or tag, if not given the default branch is used (optional)
     * @param path The path of the tree (optional)
     * @param recursive Used to get a recursive tree (optional)
     * @return RepoTreeObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository tree </td><td>  -  </td></tr>
     </table>
     */
    public RepoTreeObject getV3ProjectsIdRepositoryTree(String id, String refName, String path, Boolean recursive) throws ApiException {
        ApiResponse<RepoTreeObject> localVarResp = getV3ProjectsIdRepositoryTreeWithHttpInfo(id, refName, path, recursive);
        return localVarResp.getData();
    }

    /**
     * Get a project repository tree
     * Get a project repository tree
     * @param id The ID of a project (required)
     * @param refName The name of a repository branch or tag, if not given the default branch is used (optional)
     * @param path The path of the tree (optional)
     * @param recursive Used to get a recursive tree (optional)
     * @return ApiResponse&lt;RepoTreeObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository tree </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepoTreeObject> getV3ProjectsIdRepositoryTreeWithHttpInfo(String id, String refName, String path, Boolean recursive) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryTreeValidateBeforeCall(id, refName, path, recursive, null);
        Type localVarReturnType = new TypeToken<RepoTreeObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a project repository tree (asynchronously)
     * Get a project repository tree
     * @param id The ID of a project (required)
     * @param refName The name of a repository branch or tag, if not given the default branch is used (optional)
     * @param path The path of the tree (optional)
     * @param recursive Used to get a recursive tree (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository tree </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRepositoryTreeAsync(String id, String refName, String path, Boolean recursive, final ApiCallback<RepoTreeObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRepositoryTreeValidateBeforeCall(id, refName, path, recursive, _callback);
        Type localVarReturnType = new TypeToken<RepoTreeObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdRunners
     * @param id The ID of a project (required)
     * @param scope The scope of specific runners to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get runners available for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRunnersCall(String id, String scope, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/runners"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdRunnersValidateBeforeCall(String id, String scope, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdRunners(Async)");
        }

        return getV3ProjectsIdRunnersCall(id, scope, page, perPage, _callback);

    }

    /**
     * Get runners available for project
     * Get runners available for project
     * @param id The ID of a project (required)
     * @param scope The scope of specific runners to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Runner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get runners available for project </td><td>  -  </td></tr>
     </table>
     */
    public Runner getV3ProjectsIdRunners(String id, String scope, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Runner> localVarResp = getV3ProjectsIdRunnersWithHttpInfo(id, scope, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get runners available for project
     * Get runners available for project
     * @param id The ID of a project (required)
     * @param scope The scope of specific runners to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Runner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get runners available for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Runner> getV3ProjectsIdRunnersWithHttpInfo(String id, String scope, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdRunnersValidateBeforeCall(id, scope, page, perPage, null);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get runners available for project (asynchronously)
     * Get runners available for project
     * @param id The ID of a project (required)
     * @param scope The scope of specific runners to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get runners available for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdRunnersAsync(String id, String scope, Integer page, Integer perPage, final ApiCallback<Runner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdRunnersValidateBeforeCall(id, scope, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdServicesServiceSlug
     * @param serviceSlug The name of the service (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the service settings for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdServicesServiceSlugCall(String serviceSlug, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/{service_slug}"
            .replace("{" + "service_slug" + "}", localVarApiClient.escapeString(serviceSlug.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdServicesServiceSlugValidateBeforeCall(String serviceSlug, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSlug' is set
        if (serviceSlug == null) {
            throw new ApiException("Missing the required parameter 'serviceSlug' when calling getV3ProjectsIdServicesServiceSlug(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdServicesServiceSlug(Async)");
        }

        return getV3ProjectsIdServicesServiceSlugCall(serviceSlug, id, _callback);

    }

    /**
     * Get the service settings for project
     * Get the service settings for project
     * @param serviceSlug The name of the service (required)
     * @param id  (required)
     * @return ProjectService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the service settings for project </td><td>  -  </td></tr>
     </table>
     */
    public ProjectService getV3ProjectsIdServicesServiceSlug(String serviceSlug, Integer id) throws ApiException {
        ApiResponse<ProjectService> localVarResp = getV3ProjectsIdServicesServiceSlugWithHttpInfo(serviceSlug, id);
        return localVarResp.getData();
    }

    /**
     * Get the service settings for project
     * Get the service settings for project
     * @param serviceSlug The name of the service (required)
     * @param id  (required)
     * @return ApiResponse&lt;ProjectService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the service settings for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectService> getV3ProjectsIdServicesServiceSlugWithHttpInfo(String serviceSlug, Integer id) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdServicesServiceSlugValidateBeforeCall(serviceSlug, id, null);
        Type localVarReturnType = new TypeToken<ProjectService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the service settings for project (asynchronously)
     * Get the service settings for project
     * @param serviceSlug The name of the service (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the service settings for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdServicesServiceSlugAsync(String serviceSlug, Integer id, final ApiCallback<ProjectService> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdServicesServiceSlugValidateBeforeCall(serviceSlug, id, _callback);
        Type localVarReturnType = new TypeToken<ProjectService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdSnippets
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all project snippets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdSnippetsValidateBeforeCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdSnippets(Async)");
        }

        return getV3ProjectsIdSnippetsCall(id, page, perPage, _callback);

    }

    /**
     * Get all project snippets
     * Get all project snippets
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ProjectSnippet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all project snippets </td><td>  -  </td></tr>
     </table>
     */
    public ProjectSnippet getV3ProjectsIdSnippets(String id, Integer page, Integer perPage) throws ApiException {
        ApiResponse<ProjectSnippet> localVarResp = getV3ProjectsIdSnippetsWithHttpInfo(id, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all project snippets
     * Get all project snippets
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;ProjectSnippet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all project snippets </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectSnippet> getV3ProjectsIdSnippetsWithHttpInfo(String id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<ProjectSnippet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all project snippets (asynchronously)
     * Get all project snippets
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all project snippets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsAsync(String id, Integer page, Integer perPage, final ApiCallback<ProjectSnippet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<ProjectSnippet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdSnippetsNoteableIdNotes
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +noteable+ notes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsNoteableIdNotesCall(String id, Integer noteableId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{noteable_id}/notes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "noteable_id" + "}", localVarApiClient.escapeString(noteableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdSnippetsNoteableIdNotesValidateBeforeCall(String id, Integer noteableId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdSnippetsNoteableIdNotes(Async)");
        }

        // verify the required parameter 'noteableId' is set
        if (noteableId == null) {
            throw new ApiException("Missing the required parameter 'noteableId' when calling getV3ProjectsIdSnippetsNoteableIdNotes(Async)");
        }

        return getV3ProjectsIdSnippetsNoteableIdNotesCall(id, noteableId, page, perPage, _callback);

    }

    /**
     * Get a list of project +noteable+ notes
     * Get a list of project +noteable+ notes
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +noteable+ notes </td><td>  -  </td></tr>
     </table>
     */
    public Note getV3ProjectsIdSnippetsNoteableIdNotes(String id, Integer noteableId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Note> localVarResp = getV3ProjectsIdSnippetsNoteableIdNotesWithHttpInfo(id, noteableId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of project +noteable+ notes
     * Get a list of project +noteable+ notes
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +noteable+ notes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> getV3ProjectsIdSnippetsNoteableIdNotesWithHttpInfo(String id, Integer noteableId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsNoteableIdNotesValidateBeforeCall(id, noteableId, page, perPage, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of project +noteable+ notes (asynchronously)
     * Get a list of project +noteable+ notes
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +noteable+ notes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsNoteableIdNotesAsync(String id, Integer noteableId, Integer page, Integer perPage, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsNoteableIdNotesValidateBeforeCall(id, noteableId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdSnippetsNoteableIdNotesNoteId
     * @param id The ID of a project (required)
     * @param noteId The ID of a note (required)
     * @param noteableId The ID of the noteable (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsNoteableIdNotesNoteIdCall(String id, Integer noteId, Integer noteableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{noteable_id}/notes/{note_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()))
            .replace("{" + "noteable_id" + "}", localVarApiClient.escapeString(noteableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdSnippetsNoteableIdNotesNoteIdValidateBeforeCall(String id, Integer noteId, Integer noteableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdSnippetsNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getV3ProjectsIdSnippetsNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteableId' is set
        if (noteableId == null) {
            throw new ApiException("Missing the required parameter 'noteableId' when calling getV3ProjectsIdSnippetsNoteableIdNotesNoteId(Async)");
        }

        return getV3ProjectsIdSnippetsNoteableIdNotesNoteIdCall(id, noteId, noteableId, _callback);

    }

    /**
     * Get a single +noteable+ note
     * Get a single +noteable+ note
     * @param id The ID of a project (required)
     * @param noteId The ID of a note (required)
     * @param noteableId The ID of the noteable (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public Note getV3ProjectsIdSnippetsNoteableIdNotesNoteId(String id, Integer noteId, Integer noteableId) throws ApiException {
        ApiResponse<Note> localVarResp = getV3ProjectsIdSnippetsNoteableIdNotesNoteIdWithHttpInfo(id, noteId, noteableId);
        return localVarResp.getData();
    }

    /**
     * Get a single +noteable+ note
     * Get a single +noteable+ note
     * @param id The ID of a project (required)
     * @param noteId The ID of a note (required)
     * @param noteableId The ID of the noteable (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> getV3ProjectsIdSnippetsNoteableIdNotesNoteIdWithHttpInfo(String id, Integer noteId, Integer noteableId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsNoteableIdNotesNoteIdValidateBeforeCall(id, noteId, noteableId, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single +noteable+ note (asynchronously)
     * Get a single +noteable+ note
     * @param id The ID of a project (required)
     * @param noteId The ID of a note (required)
     * @param noteableId The ID of the noteable (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsNoteableIdNotesNoteIdAsync(String id, Integer noteId, Integer noteableId, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsNoteableIdNotesNoteIdValidateBeforeCall(id, noteId, noteableId, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdSnippetsSnippetId
     * @param id The ID of a project (required)
     * @param snippetId The ID of a project snippet (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single project snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsSnippetIdCall(String id, Integer snippetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{snippet_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "snippet_id" + "}", localVarApiClient.escapeString(snippetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdSnippetsSnippetIdValidateBeforeCall(String id, Integer snippetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdSnippetsSnippetId(Async)");
        }

        // verify the required parameter 'snippetId' is set
        if (snippetId == null) {
            throw new ApiException("Missing the required parameter 'snippetId' when calling getV3ProjectsIdSnippetsSnippetId(Async)");
        }

        return getV3ProjectsIdSnippetsSnippetIdCall(id, snippetId, _callback);

    }

    /**
     * Get a single project snippet
     * Get a single project snippet
     * @param id The ID of a project (required)
     * @param snippetId The ID of a project snippet (required)
     * @return ProjectSnippet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single project snippet </td><td>  -  </td></tr>
     </table>
     */
    public ProjectSnippet getV3ProjectsIdSnippetsSnippetId(String id, Integer snippetId) throws ApiException {
        ApiResponse<ProjectSnippet> localVarResp = getV3ProjectsIdSnippetsSnippetIdWithHttpInfo(id, snippetId);
        return localVarResp.getData();
    }

    /**
     * Get a single project snippet
     * Get a single project snippet
     * @param id The ID of a project (required)
     * @param snippetId The ID of a project snippet (required)
     * @return ApiResponse&lt;ProjectSnippet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single project snippet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectSnippet> getV3ProjectsIdSnippetsSnippetIdWithHttpInfo(String id, Integer snippetId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsSnippetIdValidateBeforeCall(id, snippetId, null);
        Type localVarReturnType = new TypeToken<ProjectSnippet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single project snippet (asynchronously)
     * Get a single project snippet
     * @param id The ID of a project (required)
     * @param snippetId The ID of a project snippet (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single project snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsSnippetIdAsync(String id, Integer snippetId, final ApiCallback<ProjectSnippet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsSnippetIdValidateBeforeCall(id, snippetId, _callback);
        Type localVarReturnType = new TypeToken<ProjectSnippet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdSnippetsSnippetIdAwardEmoji
     * @param id The ID of a project (required)
     * @param snippetId The ID of an Issue, Merge Request or Snippet (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsSnippetIdAwardEmojiCall(String id, Integer snippetId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{snippet_id}/award_emoji"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "snippet_id" + "}", localVarApiClient.escapeString(snippetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdSnippetsSnippetIdAwardEmojiValidateBeforeCall(String id, Integer snippetId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdSnippetsSnippetIdAwardEmoji(Async)");
        }

        // verify the required parameter 'snippetId' is set
        if (snippetId == null) {
            throw new ApiException("Missing the required parameter 'snippetId' when calling getV3ProjectsIdSnippetsSnippetIdAwardEmoji(Async)");
        }

        return getV3ProjectsIdSnippetsSnippetIdAwardEmojiCall(id, snippetId, page, perPage, _callback);

    }

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param id The ID of a project (required)
     * @param snippetId The ID of an Issue, Merge Request or Snippet (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji getV3ProjectsIdSnippetsSnippetIdAwardEmoji(String id, Integer snippetId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = getV3ProjectsIdSnippetsSnippetIdAwardEmojiWithHttpInfo(id, snippetId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param id The ID of a project (required)
     * @param snippetId The ID of an Issue, Merge Request or Snippet (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> getV3ProjectsIdSnippetsSnippetIdAwardEmojiWithHttpInfo(String id, Integer snippetId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsSnippetIdAwardEmojiValidateBeforeCall(id, snippetId, page, perPage, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of project +awardable+ award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param id The ID of a project (required)
     * @param snippetId The ID of an Issue, Merge Request or Snippet (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsSnippetIdAwardEmojiAsync(String id, Integer snippetId, Integer page, Integer perPage, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsSnippetIdAwardEmojiValidateBeforeCall(id, snippetId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param snippetId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdCall(Integer awardId, Integer id, Integer snippetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{snippet_id}/award_emoji/{award_id}"
            .replace("{" + "award_id" + "}", localVarApiClient.escapeString(awardId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "snippet_id" + "}", localVarApiClient.escapeString(snippetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdValidateBeforeCall(Integer awardId, Integer id, Integer snippetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awardId' is set
        if (awardId == null) {
            throw new ApiException("Missing the required parameter 'awardId' when calling getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'snippetId' is set
        if (snippetId == null) {
            throw new ApiException("Missing the required parameter 'snippetId' when calling getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(Async)");
        }

        return getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdCall(awardId, id, snippetId, _callback);

    }

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param snippetId  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(Integer awardId, Integer id, Integer snippetId) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdWithHttpInfo(awardId, id, snippetId);
        return localVarResp.getData();
    }

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param snippetId  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdWithHttpInfo(Integer awardId, Integer id, Integer snippetId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, snippetId, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param snippetId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdAsync(Integer awardId, Integer id, Integer snippetId, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, snippetId, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji
     * @param id  (required)
     * @param snippetId  (required)
     * @param noteId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiCall(Integer id, Integer snippetId, Integer noteId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "snippet_id" + "}", localVarApiClient.escapeString(snippetId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiValidateBeforeCall(Integer id, Integer snippetId, Integer noteId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(Async)");
        }

        // verify the required parameter 'snippetId' is set
        if (snippetId == null) {
            throw new ApiException("Missing the required parameter 'snippetId' when calling getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(Async)");
        }

        return getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiCall(id, snippetId, noteId, page, perPage, _callback);

    }

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param snippetId  (required)
     * @param noteId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(Integer id, Integer snippetId, Integer noteId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiWithHttpInfo(id, snippetId, noteId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param snippetId  (required)
     * @param noteId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiWithHttpInfo(Integer id, Integer snippetId, Integer noteId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiValidateBeforeCall(id, snippetId, noteId, page, perPage, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of project +awardable+ award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param snippetId  (required)
     * @param noteId  (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of project +awardable+ award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAsync(Integer id, Integer snippetId, Integer noteId, Integer page, Integer perPage, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiValidateBeforeCall(id, snippetId, noteId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param snippetId  (required)
     * @param noteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdCall(Integer awardId, Integer id, Integer snippetId, Integer noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji/{award_id}"
            .replace("{" + "award_id" + "}", localVarApiClient.escapeString(awardId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "snippet_id" + "}", localVarApiClient.escapeString(snippetId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(Integer awardId, Integer id, Integer snippetId, Integer noteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awardId' is set
        if (awardId == null) {
            throw new ApiException("Missing the required parameter 'awardId' when calling getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'snippetId' is set
        if (snippetId == null) {
            throw new ApiException("Missing the required parameter 'snippetId' when calling getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(Async)");
        }

        return getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdCall(awardId, id, snippetId, noteId, _callback);

    }

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param snippetId  (required)
     * @param noteId  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(Integer awardId, Integer id, Integer snippetId, Integer noteId) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdWithHttpInfo(awardId, id, snippetId, noteId);
        return localVarResp.getData();
    }

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param snippetId  (required)
     * @param noteId  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdWithHttpInfo(Integer awardId, Integer id, Integer snippetId, Integer noteId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, snippetId, noteId, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific award emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param awardId The ID of the award (required)
     * @param id  (required)
     * @param snippetId  (required)
     * @param noteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific award emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdAsync(Integer awardId, Integer id, Integer snippetId, Integer noteId, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdValidateBeforeCall(awardId, id, snippetId, noteId, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdSnippetsSnippetIdRaw
     * @param id The ID of a project (required)
     * @param snippetId The ID of a project snippet (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw project snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsSnippetIdRawCall(String id, Integer snippetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{snippet_id}/raw"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "snippet_id" + "}", localVarApiClient.escapeString(snippetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdSnippetsSnippetIdRawValidateBeforeCall(String id, Integer snippetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdSnippetsSnippetIdRaw(Async)");
        }

        // verify the required parameter 'snippetId' is set
        if (snippetId == null) {
            throw new ApiException("Missing the required parameter 'snippetId' when calling getV3ProjectsIdSnippetsSnippetIdRaw(Async)");
        }

        return getV3ProjectsIdSnippetsSnippetIdRawCall(id, snippetId, _callback);

    }

    /**
     * Get a raw project snippet
     * Get a raw project snippet
     * @param id The ID of a project (required)
     * @param snippetId The ID of a project snippet (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw project snippet </td><td>  -  </td></tr>
     </table>
     */
    public void getV3ProjectsIdSnippetsSnippetIdRaw(String id, Integer snippetId) throws ApiException {
        getV3ProjectsIdSnippetsSnippetIdRawWithHttpInfo(id, snippetId);
    }

    /**
     * Get a raw project snippet
     * Get a raw project snippet
     * @param id The ID of a project (required)
     * @param snippetId The ID of a project snippet (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw project snippet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getV3ProjectsIdSnippetsSnippetIdRawWithHttpInfo(String id, Integer snippetId) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsSnippetIdRawValidateBeforeCall(id, snippetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a raw project snippet (asynchronously)
     * Get a raw project snippet
     * @param id The ID of a project (required)
     * @param snippetId The ID of a project snippet (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw project snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdSnippetsSnippetIdRawAsync(String id, Integer snippetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdSnippetsSnippetIdRawValidateBeforeCall(id, snippetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdTriggers
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get triggers list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdTriggersCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/triggers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdTriggersValidateBeforeCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdTriggers(Async)");
        }

        return getV3ProjectsIdTriggersCall(id, page, perPage, _callback);

    }

    /**
     * Get triggers list
     * Get triggers list
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Trigger
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get triggers list </td><td>  -  </td></tr>
     </table>
     */
    public Trigger getV3ProjectsIdTriggers(String id, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Trigger> localVarResp = getV3ProjectsIdTriggersWithHttpInfo(id, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get triggers list
     * Get triggers list
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Trigger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get triggers list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Trigger> getV3ProjectsIdTriggersWithHttpInfo(String id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdTriggersValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get triggers list (asynchronously)
     * Get triggers list
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get triggers list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdTriggersAsync(String id, Integer page, Integer perPage, final ApiCallback<Trigger> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdTriggersValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdTriggersToken
     * @param id The ID of a project (required)
     * @param token The unique token of trigger (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get specific trigger of a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdTriggersTokenCall(String id, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/triggers/{token}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdTriggersTokenValidateBeforeCall(String id, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdTriggersToken(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getV3ProjectsIdTriggersToken(Async)");
        }

        return getV3ProjectsIdTriggersTokenCall(id, token, _callback);

    }

    /**
     * Get specific trigger of a project
     * Get specific trigger of a project
     * @param id The ID of a project (required)
     * @param token The unique token of trigger (required)
     * @return Trigger
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get specific trigger of a project </td><td>  -  </td></tr>
     </table>
     */
    public Trigger getV3ProjectsIdTriggersToken(String id, String token) throws ApiException {
        ApiResponse<Trigger> localVarResp = getV3ProjectsIdTriggersTokenWithHttpInfo(id, token);
        return localVarResp.getData();
    }

    /**
     * Get specific trigger of a project
     * Get specific trigger of a project
     * @param id The ID of a project (required)
     * @param token The unique token of trigger (required)
     * @return ApiResponse&lt;Trigger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get specific trigger of a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Trigger> getV3ProjectsIdTriggersTokenWithHttpInfo(String id, String token) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdTriggersTokenValidateBeforeCall(id, token, null);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get specific trigger of a project (asynchronously)
     * Get specific trigger of a project
     * @param id The ID of a project (required)
     * @param token The unique token of trigger (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get specific trigger of a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdTriggersTokenAsync(String id, String token, final ApiCallback<Trigger> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdTriggersTokenValidateBeforeCall(id, token, _callback);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdUsers
     * @param id The ID of a project (required)
     * @param search Return list of users matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the users list of a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdUsersCall(String id, String search, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/users"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdUsersValidateBeforeCall(String id, String search, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdUsers(Async)");
        }

        return getV3ProjectsIdUsersCall(id, search, page, perPage, _callback);

    }

    /**
     * Get the users list of a project
     * Get the users list of a project
     * @param id The ID of a project (required)
     * @param search Return list of users matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return UserBasic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the users list of a project </td><td>  -  </td></tr>
     </table>
     */
    public UserBasic getV3ProjectsIdUsers(String id, String search, Integer page, Integer perPage) throws ApiException {
        ApiResponse<UserBasic> localVarResp = getV3ProjectsIdUsersWithHttpInfo(id, search, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get the users list of a project
     * Get the users list of a project
     * @param id The ID of a project (required)
     * @param search Return list of users matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;UserBasic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the users list of a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserBasic> getV3ProjectsIdUsersWithHttpInfo(String id, String search, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdUsersValidateBeforeCall(id, search, page, perPage, null);
        Type localVarReturnType = new TypeToken<UserBasic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the users list of a project (asynchronously)
     * Get the users list of a project
     * @param id The ID of a project (required)
     * @param search Return list of users matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the users list of a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdUsersAsync(String id, String search, Integer page, Integer perPage, final ApiCallback<UserBasic> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdUsersValidateBeforeCall(id, search, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<UserBasic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdVariables
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get project variables </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdVariablesCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/variables"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdVariablesValidateBeforeCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdVariables(Async)");
        }

        return getV3ProjectsIdVariablesCall(id, page, perPage, _callback);

    }

    /**
     * Get project variables
     * Get project variables
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Variable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get project variables </td><td>  -  </td></tr>
     </table>
     */
    public Variable getV3ProjectsIdVariables(String id, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Variable> localVarResp = getV3ProjectsIdVariablesWithHttpInfo(id, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get project variables
     * Get project variables
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Variable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get project variables </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Variable> getV3ProjectsIdVariablesWithHttpInfo(String id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdVariablesValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project variables (asynchronously)
     * Get project variables
     * @param id The ID of a project (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get project variables </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdVariablesAsync(String id, Integer page, Integer perPage, final ApiCallback<Variable> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdVariablesValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsIdVariablesKey
     * @param id The ID of a project (required)
     * @param key The key of the variable (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific variable from a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdVariablesKeyCall(String id, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/variables/{key}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsIdVariablesKeyValidateBeforeCall(String id, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3ProjectsIdVariablesKey(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getV3ProjectsIdVariablesKey(Async)");
        }

        return getV3ProjectsIdVariablesKeyCall(id, key, _callback);

    }

    /**
     * Get a specific variable from a project
     * Get a specific variable from a project
     * @param id The ID of a project (required)
     * @param key The key of the variable (required)
     * @return Variable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific variable from a project </td><td>  -  </td></tr>
     </table>
     */
    public Variable getV3ProjectsIdVariablesKey(String id, String key) throws ApiException {
        ApiResponse<Variable> localVarResp = getV3ProjectsIdVariablesKeyWithHttpInfo(id, key);
        return localVarResp.getData();
    }

    /**
     * Get a specific variable from a project
     * Get a specific variable from a project
     * @param id The ID of a project (required)
     * @param key The key of the variable (required)
     * @return ApiResponse&lt;Variable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific variable from a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Variable> getV3ProjectsIdVariablesKeyWithHttpInfo(String id, String key) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsIdVariablesKeyValidateBeforeCall(id, key, null);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific variable from a project (asynchronously)
     * Get a specific variable from a project
     * @param id The ID of a project (required)
     * @param key The key of the variable (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific variable from a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsIdVariablesKeyAsync(String id, String key, final ApiCallback<Variable> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsIdVariablesKeyValidateBeforeCall(id, key, _callback);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsOwned
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param statistics Include project statistics (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an owned projects list for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsOwnedCall(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, Boolean statistics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/owned";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        if (visibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibility", visibility));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (simple != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("simple", simple));
        }

        if (statistics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statistics", statistics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsOwnedValidateBeforeCall(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, Boolean statistics, final ApiCallback _callback) throws ApiException {
        return getV3ProjectsOwnedCall(orderBy, sort, archived, visibility, search, page, perPage, simple, statistics, _callback);

    }

    /**
     * Get an owned projects list for authenticated user
     * Get an owned projects list for authenticated user
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param statistics Include project statistics (optional)
     * @return BasicProjectDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an owned projects list for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public BasicProjectDetails getV3ProjectsOwned(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, Boolean statistics) throws ApiException {
        ApiResponse<BasicProjectDetails> localVarResp = getV3ProjectsOwnedWithHttpInfo(orderBy, sort, archived, visibility, search, page, perPage, simple, statistics);
        return localVarResp.getData();
    }

    /**
     * Get an owned projects list for authenticated user
     * Get an owned projects list for authenticated user
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param statistics Include project statistics (optional)
     * @return ApiResponse&lt;BasicProjectDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an owned projects list for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BasicProjectDetails> getV3ProjectsOwnedWithHttpInfo(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, Boolean statistics) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsOwnedValidateBeforeCall(orderBy, sort, archived, visibility, search, page, perPage, simple, statistics, null);
        Type localVarReturnType = new TypeToken<BasicProjectDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an owned projects list for authenticated user (asynchronously)
     * Get an owned projects list for authenticated user
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param statistics Include project statistics (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get an owned projects list for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsOwnedAsync(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, Boolean statistics, final ApiCallback<BasicProjectDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsOwnedValidateBeforeCall(orderBy, sort, archived, visibility, search, page, perPage, simple, statistics, _callback);
        Type localVarReturnType = new TypeToken<BasicProjectDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsSearchQuery
     * @param query The project name to be searched (required)
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search for projects the current user has access to </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsSearchQueryCall(String query, String orderBy, String sort, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/search/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsSearchQueryValidateBeforeCall(String query, String orderBy, String sort, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getV3ProjectsSearchQuery(Async)");
        }

        return getV3ProjectsSearchQueryCall(query, orderBy, sort, page, perPage, _callback);

    }

    /**
     * Search for projects the current user has access to
     * Search for projects the current user has access to
     * @param query The project name to be searched (required)
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search for projects the current user has access to </td><td>  -  </td></tr>
     </table>
     */
    public Project getV3ProjectsSearchQuery(String query, String orderBy, String sort, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Project> localVarResp = getV3ProjectsSearchQueryWithHttpInfo(query, orderBy, sort, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Search for projects the current user has access to
     * Search for projects the current user has access to
     * @param query The project name to be searched (required)
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search for projects the current user has access to </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> getV3ProjectsSearchQueryWithHttpInfo(String query, String orderBy, String sort, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsSearchQueryValidateBeforeCall(query, orderBy, sort, page, perPage, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for projects the current user has access to (asynchronously)
     * Search for projects the current user has access to
     * @param query The project name to be searched (required)
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search for projects the current user has access to </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsSearchQueryAsync(String query, String orderBy, String sort, Integer page, Integer perPage, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsSearchQueryValidateBeforeCall(query, orderBy, sort, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsStarred
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets starred project for the authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsStarredCall(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/starred";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        if (visibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibility", visibility));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (simple != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("simple", simple));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsStarredValidateBeforeCall(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, final ApiCallback _callback) throws ApiException {
        return getV3ProjectsStarredCall(orderBy, sort, archived, visibility, search, page, perPage, simple, _callback);

    }

    /**
     * Gets starred project for the authenticated user
     * Gets starred project for the authenticated user
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @return BasicProjectDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets starred project for the authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public BasicProjectDetails getV3ProjectsStarred(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple) throws ApiException {
        ApiResponse<BasicProjectDetails> localVarResp = getV3ProjectsStarredWithHttpInfo(orderBy, sort, archived, visibility, search, page, perPage, simple);
        return localVarResp.getData();
    }

    /**
     * Gets starred project for the authenticated user
     * Gets starred project for the authenticated user
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @return ApiResponse&lt;BasicProjectDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets starred project for the authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BasicProjectDetails> getV3ProjectsStarredWithHttpInfo(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsStarredValidateBeforeCall(orderBy, sort, archived, visibility, search, page, perPage, simple, null);
        Type localVarReturnType = new TypeToken<BasicProjectDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets starred project for the authenticated user (asynchronously)
     * Gets starred project for the authenticated user
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets starred project for the authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsStarredAsync(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, final ApiCallback<BasicProjectDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsStarredValidateBeforeCall(orderBy, sort, archived, visibility, search, page, perPage, simple, _callback);
        Type localVarReturnType = new TypeToken<BasicProjectDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3ProjectsVisible
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of visible projects for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsVisibleCall(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/visible";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        if (visibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibility", visibility));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (simple != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("simple", simple));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3ProjectsVisibleValidateBeforeCall(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, final ApiCallback _callback) throws ApiException {
        return getV3ProjectsVisibleCall(orderBy, sort, archived, visibility, search, page, perPage, simple, _callback);

    }

    /**
     * Get a list of visible projects for authenticated user
     * Get a list of visible projects for authenticated user
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @return BasicProjectDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of visible projects for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public BasicProjectDetails getV3ProjectsVisible(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple) throws ApiException {
        ApiResponse<BasicProjectDetails> localVarResp = getV3ProjectsVisibleWithHttpInfo(orderBy, sort, archived, visibility, search, page, perPage, simple);
        return localVarResp.getData();
    }

    /**
     * Get a list of visible projects for authenticated user
     * Get a list of visible projects for authenticated user
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @return ApiResponse&lt;BasicProjectDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of visible projects for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BasicProjectDetails> getV3ProjectsVisibleWithHttpInfo(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple) throws ApiException {
        okhttp3.Call localVarCall = getV3ProjectsVisibleValidateBeforeCall(orderBy, sort, archived, visibility, search, page, perPage, simple, null);
        Type localVarReturnType = new TypeToken<BasicProjectDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of visible projects for authenticated user (asynchronously)
     * Get a list of visible projects for authenticated user
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of visible projects for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3ProjectsVisibleAsync(String orderBy, String sort, Boolean archived, String visibility, String search, Integer page, Integer perPage, Boolean simple, final ApiCallback<BasicProjectDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3ProjectsVisibleValidateBeforeCall(orderBy, sort, archived, visibility, search, page, perPage, simple, _callback);
        Type localVarReturnType = new TypeToken<BasicProjectDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3Projects
     * @param postV3ProjectsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create new project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsCall(PostV3ProjectsRequest postV3ProjectsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsValidateBeforeCall(PostV3ProjectsRequest postV3ProjectsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postV3ProjectsRequest' is set
        if (postV3ProjectsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsRequest' when calling postV3Projects(Async)");
        }

        return postV3ProjectsCall(postV3ProjectsRequest, _callback);

    }

    /**
     * Create new project
     * Create new project
     * @param postV3ProjectsRequest  (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create new project </td><td>  -  </td></tr>
     </table>
     */
    public Project postV3Projects(PostV3ProjectsRequest postV3ProjectsRequest) throws ApiException {
        ApiResponse<Project> localVarResp = postV3ProjectsWithHttpInfo(postV3ProjectsRequest);
        return localVarResp.getData();
    }

    /**
     * Create new project
     * Create new project
     * @param postV3ProjectsRequest  (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create new project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> postV3ProjectsWithHttpInfo(PostV3ProjectsRequest postV3ProjectsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsValidateBeforeCall(postV3ProjectsRequest, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new project (asynchronously)
     * Create new project
     * @param postV3ProjectsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create new project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsAsync(PostV3ProjectsRequest postV3ProjectsRequest, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsValidateBeforeCall(postV3ProjectsRequest, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsForkId
     * @param id The ID of a project (required)
     * @param postV3ProjectsForkIdRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Fork new project for the current user or provided namespace. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsForkIdCall(String id, PostV3ProjectsForkIdRequest postV3ProjectsForkIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsForkIdRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/fork/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsForkIdValidateBeforeCall(String id, PostV3ProjectsForkIdRequest postV3ProjectsForkIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsForkId(Async)");
        }

        return postV3ProjectsForkIdCall(id, postV3ProjectsForkIdRequest, _callback);

    }

    /**
     * Fork new project for the current user or provided namespace.
     * Fork new project for the current user or provided namespace.
     * @param id The ID of a project (required)
     * @param postV3ProjectsForkIdRequest  (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Fork new project for the current user or provided namespace. </td><td>  -  </td></tr>
     </table>
     */
    public Project postV3ProjectsForkId(String id, PostV3ProjectsForkIdRequest postV3ProjectsForkIdRequest) throws ApiException {
        ApiResponse<Project> localVarResp = postV3ProjectsForkIdWithHttpInfo(id, postV3ProjectsForkIdRequest);
        return localVarResp.getData();
    }

    /**
     * Fork new project for the current user or provided namespace.
     * Fork new project for the current user or provided namespace.
     * @param id The ID of a project (required)
     * @param postV3ProjectsForkIdRequest  (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Fork new project for the current user or provided namespace. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> postV3ProjectsForkIdWithHttpInfo(String id, PostV3ProjectsForkIdRequest postV3ProjectsForkIdRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsForkIdValidateBeforeCall(id, postV3ProjectsForkIdRequest, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fork new project for the current user or provided namespace. (asynchronously)
     * Fork new project for the current user or provided namespace.
     * @param id The ID of a project (required)
     * @param postV3ProjectsForkIdRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Fork new project for the current user or provided namespace. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsForkIdAsync(String id, PostV3ProjectsForkIdRequest postV3ProjectsForkIdRequest, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsForkIdValidateBeforeCall(id, postV3ProjectsForkIdRequest, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdAccessRequests
     * @param id The project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Requests access for the authenticated user to a project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdAccessRequestsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/access_requests"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdAccessRequestsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdAccessRequests(Async)");
        }

        return postV3ProjectsIdAccessRequestsCall(id, _callback);

    }

    /**
     * Requests access for the authenticated user to a project.
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @return AccessRequester
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Requests access for the authenticated user to a project. </td><td>  -  </td></tr>
     </table>
     */
    public AccessRequester postV3ProjectsIdAccessRequests(String id) throws ApiException {
        ApiResponse<AccessRequester> localVarResp = postV3ProjectsIdAccessRequestsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Requests access for the authenticated user to a project.
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @return ApiResponse&lt;AccessRequester&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Requests access for the authenticated user to a project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessRequester> postV3ProjectsIdAccessRequestsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdAccessRequestsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AccessRequester>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Requests access for the authenticated user to a project. (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Requests access for the authenticated user to a project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdAccessRequestsAsync(String id, final ApiCallback<AccessRequester> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdAccessRequestsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AccessRequester>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdArchive
     * @param id The ID of a project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Archive a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdArchiveCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/archive"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdArchiveValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdArchive(Async)");
        }

        return postV3ProjectsIdArchiveCall(id, _callback);

    }

    /**
     * Archive a project
     * Archive a project
     * @param id The ID of a project (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Archive a project </td><td>  -  </td></tr>
     </table>
     */
    public Project postV3ProjectsIdArchive(String id) throws ApiException {
        ApiResponse<Project> localVarResp = postV3ProjectsIdArchiveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Archive a project
     * Archive a project
     * @param id The ID of a project (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Archive a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> postV3ProjectsIdArchiveWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdArchiveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Archive a project (asynchronously)
     * Archive a project
     * @param id The ID of a project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Archive a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdArchiveAsync(String id, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdArchiveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdBoardsBoardIdLists
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param postV3ProjectsIdBoardsBoardIdListsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new board list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdBoardsBoardIdListsCall(String id, Integer boardId, PostV3ProjectsIdBoardsBoardIdListsRequest postV3ProjectsIdBoardsBoardIdListsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdBoardsBoardIdListsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/boards/{board_id}/lists"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdBoardsBoardIdListsValidateBeforeCall(String id, Integer boardId, PostV3ProjectsIdBoardsBoardIdListsRequest postV3ProjectsIdBoardsBoardIdListsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdBoardsBoardIdLists(Async)");
        }

        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling postV3ProjectsIdBoardsBoardIdLists(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdBoardsBoardIdListsRequest' is set
        if (postV3ProjectsIdBoardsBoardIdListsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdBoardsBoardIdListsRequest' when calling postV3ProjectsIdBoardsBoardIdLists(Async)");
        }

        return postV3ProjectsIdBoardsBoardIdListsCall(id, boardId, postV3ProjectsIdBoardsBoardIdListsRequest, _callback);

    }

    /**
     * Create a new board list
     * This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param postV3ProjectsIdBoardsBoardIdListsRequest  (required)
     * @return ModelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new board list </td><td>  -  </td></tr>
     </table>
     */
    public ModelList postV3ProjectsIdBoardsBoardIdLists(String id, Integer boardId, PostV3ProjectsIdBoardsBoardIdListsRequest postV3ProjectsIdBoardsBoardIdListsRequest) throws ApiException {
        ApiResponse<ModelList> localVarResp = postV3ProjectsIdBoardsBoardIdListsWithHttpInfo(id, boardId, postV3ProjectsIdBoardsBoardIdListsRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new board list
     * This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param postV3ProjectsIdBoardsBoardIdListsRequest  (required)
     * @return ApiResponse&lt;ModelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new board list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelList> postV3ProjectsIdBoardsBoardIdListsWithHttpInfo(String id, Integer boardId, PostV3ProjectsIdBoardsBoardIdListsRequest postV3ProjectsIdBoardsBoardIdListsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdBoardsBoardIdListsValidateBeforeCall(id, boardId, postV3ProjectsIdBoardsBoardIdListsRequest, null);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new board list (asynchronously)
     * This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param postV3ProjectsIdBoardsBoardIdListsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new board list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdBoardsBoardIdListsAsync(String id, Integer boardId, PostV3ProjectsIdBoardsBoardIdListsRequest postV3ProjectsIdBoardsBoardIdListsRequest, final ApiCallback<ModelList> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdBoardsBoardIdListsValidateBeforeCall(id, boardId, postV3ProjectsIdBoardsBoardIdListsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdBuildsBuildIdArtifactsKeep
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Keep the artifacts to prevent them from being deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdBuildsBuildIdArtifactsKeepCall(String id, Integer buildId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/builds/{build_id}/artifacts/keep"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "build_id" + "}", localVarApiClient.escapeString(buildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdBuildsBuildIdArtifactsKeepValidateBeforeCall(String id, Integer buildId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdBuildsBuildIdArtifactsKeep(Async)");
        }

        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling postV3ProjectsIdBuildsBuildIdArtifactsKeep(Async)");
        }

        return postV3ProjectsIdBuildsBuildIdArtifactsKeepCall(id, buildId, _callback);

    }

    /**
     * Keep the artifacts to prevent them from being deleted
     * Keep the artifacts to prevent them from being deleted
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Keep the artifacts to prevent them from being deleted </td><td>  -  </td></tr>
     </table>
     */
    public Build postV3ProjectsIdBuildsBuildIdArtifactsKeep(String id, Integer buildId) throws ApiException {
        ApiResponse<Build> localVarResp = postV3ProjectsIdBuildsBuildIdArtifactsKeepWithHttpInfo(id, buildId);
        return localVarResp.getData();
    }

    /**
     * Keep the artifacts to prevent them from being deleted
     * Keep the artifacts to prevent them from being deleted
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Keep the artifacts to prevent them from being deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Build> postV3ProjectsIdBuildsBuildIdArtifactsKeepWithHttpInfo(String id, Integer buildId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdBuildsBuildIdArtifactsKeepValidateBeforeCall(id, buildId, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Keep the artifacts to prevent them from being deleted (asynchronously)
     * Keep the artifacts to prevent them from being deleted
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Keep the artifacts to prevent them from being deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdBuildsBuildIdArtifactsKeepAsync(String id, Integer buildId, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdBuildsBuildIdArtifactsKeepValidateBeforeCall(id, buildId, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdBuildsBuildIdCancel
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancel a specific build of a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdBuildsBuildIdCancelCall(String id, Integer buildId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/builds/{build_id}/cancel"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "build_id" + "}", localVarApiClient.escapeString(buildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdBuildsBuildIdCancelValidateBeforeCall(String id, Integer buildId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdBuildsBuildIdCancel(Async)");
        }

        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling postV3ProjectsIdBuildsBuildIdCancel(Async)");
        }

        return postV3ProjectsIdBuildsBuildIdCancelCall(id, buildId, _callback);

    }

    /**
     * Cancel a specific build of a project
     * Cancel a specific build of a project
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancel a specific build of a project </td><td>  -  </td></tr>
     </table>
     */
    public Build postV3ProjectsIdBuildsBuildIdCancel(String id, Integer buildId) throws ApiException {
        ApiResponse<Build> localVarResp = postV3ProjectsIdBuildsBuildIdCancelWithHttpInfo(id, buildId);
        return localVarResp.getData();
    }

    /**
     * Cancel a specific build of a project
     * Cancel a specific build of a project
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancel a specific build of a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Build> postV3ProjectsIdBuildsBuildIdCancelWithHttpInfo(String id, Integer buildId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdBuildsBuildIdCancelValidateBeforeCall(id, buildId, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a specific build of a project (asynchronously)
     * Cancel a specific build of a project
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancel a specific build of a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdBuildsBuildIdCancelAsync(String id, Integer buildId, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdBuildsBuildIdCancelValidateBeforeCall(id, buildId, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdBuildsBuildIdErase
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Erase build (remove artifacts and build trace) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdBuildsBuildIdEraseCall(String id, Integer buildId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/builds/{build_id}/erase"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "build_id" + "}", localVarApiClient.escapeString(buildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdBuildsBuildIdEraseValidateBeforeCall(String id, Integer buildId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdBuildsBuildIdErase(Async)");
        }

        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling postV3ProjectsIdBuildsBuildIdErase(Async)");
        }

        return postV3ProjectsIdBuildsBuildIdEraseCall(id, buildId, _callback);

    }

    /**
     * Erase build (remove artifacts and build trace)
     * Erase build (remove artifacts and build trace)
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Erase build (remove artifacts and build trace) </td><td>  -  </td></tr>
     </table>
     */
    public Build postV3ProjectsIdBuildsBuildIdErase(String id, Integer buildId) throws ApiException {
        ApiResponse<Build> localVarResp = postV3ProjectsIdBuildsBuildIdEraseWithHttpInfo(id, buildId);
        return localVarResp.getData();
    }

    /**
     * Erase build (remove artifacts and build trace)
     * Erase build (remove artifacts and build trace)
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Erase build (remove artifacts and build trace) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Build> postV3ProjectsIdBuildsBuildIdEraseWithHttpInfo(String id, Integer buildId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdBuildsBuildIdEraseValidateBeforeCall(id, buildId, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Erase build (remove artifacts and build trace) (asynchronously)
     * Erase build (remove artifacts and build trace)
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Erase build (remove artifacts and build trace) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdBuildsBuildIdEraseAsync(String id, Integer buildId, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdBuildsBuildIdEraseValidateBeforeCall(id, buildId, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdBuildsBuildIdPlay
     * @param id The ID of a project (required)
     * @param buildId The ID of a Build (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Trigger a manual build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdBuildsBuildIdPlayCall(String id, Integer buildId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/builds/{build_id}/play"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "build_id" + "}", localVarApiClient.escapeString(buildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdBuildsBuildIdPlayValidateBeforeCall(String id, Integer buildId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdBuildsBuildIdPlay(Async)");
        }

        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling postV3ProjectsIdBuildsBuildIdPlay(Async)");
        }

        return postV3ProjectsIdBuildsBuildIdPlayCall(id, buildId, _callback);

    }

    /**
     * Trigger a manual build
     * This feature was added in GitLab 8.11
     * @param id The ID of a project (required)
     * @param buildId The ID of a Build (required)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Trigger a manual build </td><td>  -  </td></tr>
     </table>
     */
    public Build postV3ProjectsIdBuildsBuildIdPlay(String id, Integer buildId) throws ApiException {
        ApiResponse<Build> localVarResp = postV3ProjectsIdBuildsBuildIdPlayWithHttpInfo(id, buildId);
        return localVarResp.getData();
    }

    /**
     * Trigger a manual build
     * This feature was added in GitLab 8.11
     * @param id The ID of a project (required)
     * @param buildId The ID of a Build (required)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Trigger a manual build </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Build> postV3ProjectsIdBuildsBuildIdPlayWithHttpInfo(String id, Integer buildId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdBuildsBuildIdPlayValidateBeforeCall(id, buildId, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger a manual build (asynchronously)
     * This feature was added in GitLab 8.11
     * @param id The ID of a project (required)
     * @param buildId The ID of a Build (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Trigger a manual build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdBuildsBuildIdPlayAsync(String id, Integer buildId, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdBuildsBuildIdPlayValidateBeforeCall(id, buildId, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdBuildsBuildIdRetry
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Retry a specific build of a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdBuildsBuildIdRetryCall(String id, Integer buildId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/builds/{build_id}/retry"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "build_id" + "}", localVarApiClient.escapeString(buildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdBuildsBuildIdRetryValidateBeforeCall(String id, Integer buildId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdBuildsBuildIdRetry(Async)");
        }

        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling postV3ProjectsIdBuildsBuildIdRetry(Async)");
        }

        return postV3ProjectsIdBuildsBuildIdRetryCall(id, buildId, _callback);

    }

    /**
     * Retry a specific build of a project
     * Retry a specific build of a project
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Retry a specific build of a project </td><td>  -  </td></tr>
     </table>
     */
    public Build postV3ProjectsIdBuildsBuildIdRetry(String id, Integer buildId) throws ApiException {
        ApiResponse<Build> localVarResp = postV3ProjectsIdBuildsBuildIdRetryWithHttpInfo(id, buildId);
        return localVarResp.getData();
    }

    /**
     * Retry a specific build of a project
     * Retry a specific build of a project
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Retry a specific build of a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Build> postV3ProjectsIdBuildsBuildIdRetryWithHttpInfo(String id, Integer buildId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdBuildsBuildIdRetryValidateBeforeCall(id, buildId, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retry a specific build of a project (asynchronously)
     * Retry a specific build of a project
     * @param id The ID of a project (required)
     * @param buildId The ID of a build (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Retry a specific build of a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdBuildsBuildIdRetryAsync(String id, Integer buildId, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdBuildsBuildIdRetryValidateBeforeCall(id, buildId, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdDeployKeys
     * @param id The ID of the project (required)
     * @param postV3ProjectsIdDeployKeysRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add new deploy key to currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdDeployKeysCall(String id, PostV3ProjectsIdDeployKeysRequest postV3ProjectsIdDeployKeysRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdDeployKeysRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/deploy_keys"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdDeployKeysValidateBeforeCall(String id, PostV3ProjectsIdDeployKeysRequest postV3ProjectsIdDeployKeysRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdDeployKeys(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdDeployKeysRequest' is set
        if (postV3ProjectsIdDeployKeysRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdDeployKeysRequest' when calling postV3ProjectsIdDeployKeys(Async)");
        }

        return postV3ProjectsIdDeployKeysCall(id, postV3ProjectsIdDeployKeysRequest, _callback);

    }

    /**
     * Add new deploy key to currently authenticated user
     * Add new deploy key to currently authenticated user
     * @param id The ID of the project (required)
     * @param postV3ProjectsIdDeployKeysRequest  (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add new deploy key to currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey postV3ProjectsIdDeployKeys(String id, PostV3ProjectsIdDeployKeysRequest postV3ProjectsIdDeployKeysRequest) throws ApiException {
        ApiResponse<SSHKey> localVarResp = postV3ProjectsIdDeployKeysWithHttpInfo(id, postV3ProjectsIdDeployKeysRequest);
        return localVarResp.getData();
    }

    /**
     * Add new deploy key to currently authenticated user
     * Add new deploy key to currently authenticated user
     * @param id The ID of the project (required)
     * @param postV3ProjectsIdDeployKeysRequest  (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add new deploy key to currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> postV3ProjectsIdDeployKeysWithHttpInfo(String id, PostV3ProjectsIdDeployKeysRequest postV3ProjectsIdDeployKeysRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdDeployKeysValidateBeforeCall(id, postV3ProjectsIdDeployKeysRequest, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add new deploy key to currently authenticated user (asynchronously)
     * Add new deploy key to currently authenticated user
     * @param id The ID of the project (required)
     * @param postV3ProjectsIdDeployKeysRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add new deploy key to currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdDeployKeysAsync(String id, PostV3ProjectsIdDeployKeysRequest postV3ProjectsIdDeployKeysRequest, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdDeployKeysValidateBeforeCall(id, postV3ProjectsIdDeployKeysRequest, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdDeployKeysKeyIdEnable
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Enable a deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdDeployKeysKeyIdEnableCall(String id, Integer keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/deploy_keys/{key_id}/enable"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdDeployKeysKeyIdEnableValidateBeforeCall(String id, Integer keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdDeployKeysKeyIdEnable(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling postV3ProjectsIdDeployKeysKeyIdEnable(Async)");
        }

        return postV3ProjectsIdDeployKeysKeyIdEnableCall(id, keyId, _callback);

    }

    /**
     * Enable a deploy key for a project
     * This feature was added in GitLab 8.11
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Enable a deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey postV3ProjectsIdDeployKeysKeyIdEnable(String id, Integer keyId) throws ApiException {
        ApiResponse<SSHKey> localVarResp = postV3ProjectsIdDeployKeysKeyIdEnableWithHttpInfo(id, keyId);
        return localVarResp.getData();
    }

    /**
     * Enable a deploy key for a project
     * This feature was added in GitLab 8.11
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Enable a deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> postV3ProjectsIdDeployKeysKeyIdEnableWithHttpInfo(String id, Integer keyId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdDeployKeysKeyIdEnableValidateBeforeCall(id, keyId, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable a deploy key for a project (asynchronously)
     * This feature was added in GitLab 8.11
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Enable a deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdDeployKeysKeyIdEnableAsync(String id, Integer keyId, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdDeployKeysKeyIdEnableValidateBeforeCall(id, keyId, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdEnvironments
     * @param id The project ID (required)
     * @param postV3ProjectsIdEnvironmentsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creates a new environment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdEnvironmentsCall(String id, PostV3ProjectsIdEnvironmentsRequest postV3ProjectsIdEnvironmentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdEnvironmentsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/environments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdEnvironmentsValidateBeforeCall(String id, PostV3ProjectsIdEnvironmentsRequest postV3ProjectsIdEnvironmentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdEnvironments(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdEnvironmentsRequest' is set
        if (postV3ProjectsIdEnvironmentsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdEnvironmentsRequest' when calling postV3ProjectsIdEnvironments(Async)");
        }

        return postV3ProjectsIdEnvironmentsCall(id, postV3ProjectsIdEnvironmentsRequest, _callback);

    }

    /**
     * Creates a new environment
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param postV3ProjectsIdEnvironmentsRequest  (required)
     * @return Environment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creates a new environment </td><td>  -  </td></tr>
     </table>
     */
    public Environment postV3ProjectsIdEnvironments(String id, PostV3ProjectsIdEnvironmentsRequest postV3ProjectsIdEnvironmentsRequest) throws ApiException {
        ApiResponse<Environment> localVarResp = postV3ProjectsIdEnvironmentsWithHttpInfo(id, postV3ProjectsIdEnvironmentsRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a new environment
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param postV3ProjectsIdEnvironmentsRequest  (required)
     * @return ApiResponse&lt;Environment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creates a new environment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Environment> postV3ProjectsIdEnvironmentsWithHttpInfo(String id, PostV3ProjectsIdEnvironmentsRequest postV3ProjectsIdEnvironmentsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdEnvironmentsValidateBeforeCall(id, postV3ProjectsIdEnvironmentsRequest, null);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new environment (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param postV3ProjectsIdEnvironmentsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creates a new environment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdEnvironmentsAsync(String id, PostV3ProjectsIdEnvironmentsRequest postV3ProjectsIdEnvironmentsRequest, final ApiCallback<Environment> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdEnvironmentsValidateBeforeCall(id, postV3ProjectsIdEnvironmentsRequest, _callback);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdForkForkedFromId
     * @param id The ID of a project (required)
     * @param forkedFromId The ID of the project it was forked from (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Mark this project as forked from another </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdForkForkedFromIdCall(String id, String forkedFromId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/fork/{forked_from_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "forked_from_id" + "}", localVarApiClient.escapeString(forkedFromId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdForkForkedFromIdValidateBeforeCall(String id, String forkedFromId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdForkForkedFromId(Async)");
        }

        // verify the required parameter 'forkedFromId' is set
        if (forkedFromId == null) {
            throw new ApiException("Missing the required parameter 'forkedFromId' when calling postV3ProjectsIdForkForkedFromId(Async)");
        }

        return postV3ProjectsIdForkForkedFromIdCall(id, forkedFromId, _callback);

    }

    /**
     * Mark this project as forked from another
     * Mark this project as forked from another
     * @param id The ID of a project (required)
     * @param forkedFromId The ID of the project it was forked from (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Mark this project as forked from another </td><td>  -  </td></tr>
     </table>
     */
    public void postV3ProjectsIdForkForkedFromId(String id, String forkedFromId) throws ApiException {
        postV3ProjectsIdForkForkedFromIdWithHttpInfo(id, forkedFromId);
    }

    /**
     * Mark this project as forked from another
     * Mark this project as forked from another
     * @param id The ID of a project (required)
     * @param forkedFromId The ID of the project it was forked from (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Mark this project as forked from another </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postV3ProjectsIdForkForkedFromIdWithHttpInfo(String id, String forkedFromId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdForkForkedFromIdValidateBeforeCall(id, forkedFromId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Mark this project as forked from another (asynchronously)
     * Mark this project as forked from another
     * @param id The ID of a project (required)
     * @param forkedFromId The ID of the project it was forked from (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Mark this project as forked from another </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdForkForkedFromIdAsync(String id, String forkedFromId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdForkForkedFromIdValidateBeforeCall(id, forkedFromId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdHooks
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdHooksRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add hook to project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdHooksCall(String id, PostV3ProjectsIdHooksRequest postV3ProjectsIdHooksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdHooksRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/hooks"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdHooksValidateBeforeCall(String id, PostV3ProjectsIdHooksRequest postV3ProjectsIdHooksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdHooks(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdHooksRequest' is set
        if (postV3ProjectsIdHooksRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdHooksRequest' when calling postV3ProjectsIdHooks(Async)");
        }

        return postV3ProjectsIdHooksCall(id, postV3ProjectsIdHooksRequest, _callback);

    }

    /**
     * Add hook to project
     * Add hook to project
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdHooksRequest  (required)
     * @return ProjectHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add hook to project </td><td>  -  </td></tr>
     </table>
     */
    public ProjectHook postV3ProjectsIdHooks(String id, PostV3ProjectsIdHooksRequest postV3ProjectsIdHooksRequest) throws ApiException {
        ApiResponse<ProjectHook> localVarResp = postV3ProjectsIdHooksWithHttpInfo(id, postV3ProjectsIdHooksRequest);
        return localVarResp.getData();
    }

    /**
     * Add hook to project
     * Add hook to project
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdHooksRequest  (required)
     * @return ApiResponse&lt;ProjectHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add hook to project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectHook> postV3ProjectsIdHooksWithHttpInfo(String id, PostV3ProjectsIdHooksRequest postV3ProjectsIdHooksRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdHooksValidateBeforeCall(id, postV3ProjectsIdHooksRequest, null);
        Type localVarReturnType = new TypeToken<ProjectHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add hook to project (asynchronously)
     * Add hook to project
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdHooksRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add hook to project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdHooksAsync(String id, PostV3ProjectsIdHooksRequest postV3ProjectsIdHooksRequest, final ApiCallback<ProjectHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdHooksValidateBeforeCall(id, postV3ProjectsIdHooksRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdIssues
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdIssuesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new project issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesCall(String id, PostV3ProjectsIdIssuesRequest postV3ProjectsIdIssuesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdIssuesRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdIssuesValidateBeforeCall(String id, PostV3ProjectsIdIssuesRequest postV3ProjectsIdIssuesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdIssues(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdIssuesRequest' is set
        if (postV3ProjectsIdIssuesRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdIssuesRequest' when calling postV3ProjectsIdIssues(Async)");
        }

        return postV3ProjectsIdIssuesCall(id, postV3ProjectsIdIssuesRequest, _callback);

    }

    /**
     * Create a new project issue
     * Create a new project issue
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdIssuesRequest  (required)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new project issue </td><td>  -  </td></tr>
     </table>
     */
    public Issue postV3ProjectsIdIssues(String id, PostV3ProjectsIdIssuesRequest postV3ProjectsIdIssuesRequest) throws ApiException {
        ApiResponse<Issue> localVarResp = postV3ProjectsIdIssuesWithHttpInfo(id, postV3ProjectsIdIssuesRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new project issue
     * Create a new project issue
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdIssuesRequest  (required)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new project issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Issue> postV3ProjectsIdIssuesWithHttpInfo(String id, PostV3ProjectsIdIssuesRequest postV3ProjectsIdIssuesRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdIssuesValidateBeforeCall(id, postV3ProjectsIdIssuesRequest, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new project issue (asynchronously)
     * Create a new project issue
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdIssuesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new project issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesAsync(String id, PostV3ProjectsIdIssuesRequest postV3ProjectsIdIssuesRequest, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdIssuesValidateBeforeCall(id, postV3ProjectsIdIssuesRequest, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdIssuesIssueIdAddSpentTime
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add spent time for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesIssueIdAddSpentTimeCall(String id, Integer issueId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}/add_spent_time"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdIssuesIssueIdAddSpentTimeValidateBeforeCall(String id, Integer issueId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesIssueIdAddSpentTime(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling postV3ProjectsIdIssuesIssueIdAddSpentTime(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest' is set
        if (postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest' when calling postV3ProjectsIdIssuesIssueIdAddSpentTime(Async)");
        }

        return postV3ProjectsIdIssuesIssueIdAddSpentTimeCall(id, issueId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, _callback);

    }

    /**
     * Add spent time for a project issue
     * Add spent time for a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add spent time for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public void postV3ProjectsIdIssuesIssueIdAddSpentTime(String id, Integer issueId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest) throws ApiException {
        postV3ProjectsIdIssuesIssueIdAddSpentTimeWithHttpInfo(id, issueId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest);
    }

    /**
     * Add spent time for a project issue
     * Add spent time for a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add spent time for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postV3ProjectsIdIssuesIssueIdAddSpentTimeWithHttpInfo(String id, Integer issueId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdIssuesIssueIdAddSpentTimeValidateBeforeCall(id, issueId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add spent time for a project issue (asynchronously)
     * Add spent time for a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add spent time for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesIssueIdAddSpentTimeAsync(String id, Integer issueId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdIssuesIssueIdAddSpentTimeValidateBeforeCall(id, issueId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdIssuesIssueIdAwardEmoji
     * @param id  (required)
     * @param issueId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesIssueIdAwardEmojiCall(Integer id, Integer issueId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdIssuesIssueIdAwardEmojiRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}/award_emoji"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdIssuesIssueIdAwardEmojiValidateBeforeCall(Integer id, Integer issueId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesIssueIdAwardEmoji(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling postV3ProjectsIdIssuesIssueIdAwardEmoji(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' is set
        if (postV3ProjectsIdIssuesIssueIdAwardEmojiRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' when calling postV3ProjectsIdIssuesIssueIdAwardEmoji(Async)");
        }

        return postV3ProjectsIdIssuesIssueIdAwardEmojiCall(id, issueId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, _callback);

    }

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param issueId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji postV3ProjectsIdIssuesIssueIdAwardEmoji(Integer id, Integer issueId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = postV3ProjectsIdIssuesIssueIdAwardEmojiWithHttpInfo(id, issueId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest);
        return localVarResp.getData();
    }

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param issueId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> postV3ProjectsIdIssuesIssueIdAwardEmojiWithHttpInfo(Integer id, Integer issueId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdIssuesIssueIdAwardEmojiValidateBeforeCall(id, issueId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Award a new Emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param issueId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesIssueIdAwardEmojiAsync(Integer id, Integer issueId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdIssuesIssueIdAwardEmojiValidateBeforeCall(id, issueId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdIssuesIssueIdMove
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param postV3ProjectsIdIssuesIssueIdMoveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Move an existing issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesIssueIdMoveCall(String id, Integer issueId, PostV3ProjectsIdIssuesIssueIdMoveRequest postV3ProjectsIdIssuesIssueIdMoveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdIssuesIssueIdMoveRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}/move"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdIssuesIssueIdMoveValidateBeforeCall(String id, Integer issueId, PostV3ProjectsIdIssuesIssueIdMoveRequest postV3ProjectsIdIssuesIssueIdMoveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesIssueIdMove(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling postV3ProjectsIdIssuesIssueIdMove(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdIssuesIssueIdMoveRequest' is set
        if (postV3ProjectsIdIssuesIssueIdMoveRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdMoveRequest' when calling postV3ProjectsIdIssuesIssueIdMove(Async)");
        }

        return postV3ProjectsIdIssuesIssueIdMoveCall(id, issueId, postV3ProjectsIdIssuesIssueIdMoveRequest, _callback);

    }

    /**
     * Move an existing issue
     * Move an existing issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param postV3ProjectsIdIssuesIssueIdMoveRequest  (required)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Move an existing issue </td><td>  -  </td></tr>
     </table>
     */
    public Issue postV3ProjectsIdIssuesIssueIdMove(String id, Integer issueId, PostV3ProjectsIdIssuesIssueIdMoveRequest postV3ProjectsIdIssuesIssueIdMoveRequest) throws ApiException {
        ApiResponse<Issue> localVarResp = postV3ProjectsIdIssuesIssueIdMoveWithHttpInfo(id, issueId, postV3ProjectsIdIssuesIssueIdMoveRequest);
        return localVarResp.getData();
    }

    /**
     * Move an existing issue
     * Move an existing issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param postV3ProjectsIdIssuesIssueIdMoveRequest  (required)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Move an existing issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Issue> postV3ProjectsIdIssuesIssueIdMoveWithHttpInfo(String id, Integer issueId, PostV3ProjectsIdIssuesIssueIdMoveRequest postV3ProjectsIdIssuesIssueIdMoveRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdIssuesIssueIdMoveValidateBeforeCall(id, issueId, postV3ProjectsIdIssuesIssueIdMoveRequest, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move an existing issue (asynchronously)
     * Move an existing issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param postV3ProjectsIdIssuesIssueIdMoveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Move an existing issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesIssueIdMoveAsync(String id, Integer issueId, PostV3ProjectsIdIssuesIssueIdMoveRequest postV3ProjectsIdIssuesIssueIdMoveRequest, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdIssuesIssueIdMoveValidateBeforeCall(id, issueId, postV3ProjectsIdIssuesIssueIdMoveRequest, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji
     * @param id  (required)
     * @param issueId  (required)
     * @param noteId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiCall(Integer id, Integer issueId, Integer noteId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdIssuesIssueIdAwardEmojiRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiValidateBeforeCall(Integer id, Integer issueId, Integer noteId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' is set
        if (postV3ProjectsIdIssuesIssueIdAwardEmojiRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' when calling postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(Async)");
        }

        return postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiCall(id, issueId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, _callback);

    }

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param issueId  (required)
     * @param noteId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(Integer id, Integer issueId, Integer noteId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiWithHttpInfo(id, issueId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest);
        return localVarResp.getData();
    }

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param issueId  (required)
     * @param noteId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiWithHttpInfo(Integer id, Integer issueId, Integer noteId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiValidateBeforeCall(id, issueId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Award a new Emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param issueId  (required)
     * @param noteId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAsync(Integer id, Integer issueId, Integer noteId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiValidateBeforeCall(id, issueId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdIssuesIssueIdResetSpentTime
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset spent time for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesIssueIdResetSpentTimeCall(String id, Integer issueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}/reset_spent_time"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdIssuesIssueIdResetSpentTimeValidateBeforeCall(String id, Integer issueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesIssueIdResetSpentTime(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling postV3ProjectsIdIssuesIssueIdResetSpentTime(Async)");
        }

        return postV3ProjectsIdIssuesIssueIdResetSpentTimeCall(id, issueId, _callback);

    }

    /**
     * Reset spent time for a project issue
     * Reset spent time for a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset spent time for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public void postV3ProjectsIdIssuesIssueIdResetSpentTime(String id, Integer issueId) throws ApiException {
        postV3ProjectsIdIssuesIssueIdResetSpentTimeWithHttpInfo(id, issueId);
    }

    /**
     * Reset spent time for a project issue
     * Reset spent time for a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset spent time for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postV3ProjectsIdIssuesIssueIdResetSpentTimeWithHttpInfo(String id, Integer issueId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdIssuesIssueIdResetSpentTimeValidateBeforeCall(id, issueId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset spent time for a project issue (asynchronously)
     * Reset spent time for a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset spent time for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesIssueIdResetSpentTimeAsync(String id, Integer issueId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdIssuesIssueIdResetSpentTimeValidateBeforeCall(id, issueId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdIssuesIssueIdResetTimeEstimate
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset the time estimate for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesIssueIdResetTimeEstimateCall(String id, Integer issueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}/reset_time_estimate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdIssuesIssueIdResetTimeEstimateValidateBeforeCall(String id, Integer issueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesIssueIdResetTimeEstimate(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling postV3ProjectsIdIssuesIssueIdResetTimeEstimate(Async)");
        }

        return postV3ProjectsIdIssuesIssueIdResetTimeEstimateCall(id, issueId, _callback);

    }

    /**
     * Reset the time estimate for a project issue
     * Reset the time estimate for a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset the time estimate for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public void postV3ProjectsIdIssuesIssueIdResetTimeEstimate(String id, Integer issueId) throws ApiException {
        postV3ProjectsIdIssuesIssueIdResetTimeEstimateWithHttpInfo(id, issueId);
    }

    /**
     * Reset the time estimate for a project issue
     * Reset the time estimate for a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset the time estimate for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postV3ProjectsIdIssuesIssueIdResetTimeEstimateWithHttpInfo(String id, Integer issueId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdIssuesIssueIdResetTimeEstimateValidateBeforeCall(id, issueId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset the time estimate for a project issue (asynchronously)
     * Reset the time estimate for a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset the time estimate for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesIssueIdResetTimeEstimateAsync(String id, Integer issueId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdIssuesIssueIdResetTimeEstimateValidateBeforeCall(id, issueId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdIssuesIssueIdTimeEstimate
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Set a time estimate for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesIssueIdTimeEstimateCall(String id, Integer issueId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}/time_estimate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdIssuesIssueIdTimeEstimateValidateBeforeCall(String id, Integer issueId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesIssueIdTimeEstimate(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling postV3ProjectsIdIssuesIssueIdTimeEstimate(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest' is set
        if (postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest' when calling postV3ProjectsIdIssuesIssueIdTimeEstimate(Async)");
        }

        return postV3ProjectsIdIssuesIssueIdTimeEstimateCall(id, issueId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, _callback);

    }

    /**
     * Set a time estimate for a project issue
     * Set a time estimate for a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Set a time estimate for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public void postV3ProjectsIdIssuesIssueIdTimeEstimate(String id, Integer issueId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest) throws ApiException {
        postV3ProjectsIdIssuesIssueIdTimeEstimateWithHttpInfo(id, issueId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest);
    }

    /**
     * Set a time estimate for a project issue
     * Set a time estimate for a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Set a time estimate for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postV3ProjectsIdIssuesIssueIdTimeEstimateWithHttpInfo(String id, Integer issueId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdIssuesIssueIdTimeEstimateValidateBeforeCall(id, issueId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set a time estimate for a project issue (asynchronously)
     * Set a time estimate for a project issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Set a time estimate for a project issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesIssueIdTimeEstimateAsync(String id, Integer issueId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdIssuesIssueIdTimeEstimateValidateBeforeCall(id, issueId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdIssuesIssueIdTodo
     * @param id The ID of a project (required)
     * @param issueId The ID of an issuable (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a todo on an issuable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesIssueIdTodoCall(String id, Integer issueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}/todo"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdIssuesIssueIdTodoValidateBeforeCall(String id, Integer issueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesIssueIdTodo(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling postV3ProjectsIdIssuesIssueIdTodo(Async)");
        }

        return postV3ProjectsIdIssuesIssueIdTodoCall(id, issueId, _callback);

    }

    /**
     * Create a todo on an issuable
     * Create a todo on an issuable
     * @param id The ID of a project (required)
     * @param issueId The ID of an issuable (required)
     * @return Todo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a todo on an issuable </td><td>  -  </td></tr>
     </table>
     */
    public Todo postV3ProjectsIdIssuesIssueIdTodo(String id, Integer issueId) throws ApiException {
        ApiResponse<Todo> localVarResp = postV3ProjectsIdIssuesIssueIdTodoWithHttpInfo(id, issueId);
        return localVarResp.getData();
    }

    /**
     * Create a todo on an issuable
     * Create a todo on an issuable
     * @param id The ID of a project (required)
     * @param issueId The ID of an issuable (required)
     * @return ApiResponse&lt;Todo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a todo on an issuable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Todo> postV3ProjectsIdIssuesIssueIdTodoWithHttpInfo(String id, Integer issueId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdIssuesIssueIdTodoValidateBeforeCall(id, issueId, null);
        Type localVarReturnType = new TypeToken<Todo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a todo on an issuable (asynchronously)
     * Create a todo on an issuable
     * @param id The ID of a project (required)
     * @param issueId The ID of an issuable (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a todo on an issuable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesIssueIdTodoAsync(String id, Integer issueId, final ApiCallback<Todo> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdIssuesIssueIdTodoValidateBeforeCall(id, issueId, _callback);
        Type localVarReturnType = new TypeToken<Todo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdIssuesNoteableIdNotes
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param postV3ProjectsIdIssuesNoteableIdNotesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesNoteableIdNotesCall(String id, Integer noteableId, PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdIssuesNoteableIdNotesRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{noteable_id}/notes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "noteable_id" + "}", localVarApiClient.escapeString(noteableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdIssuesNoteableIdNotesValidateBeforeCall(String id, Integer noteableId, PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesNoteableIdNotes(Async)");
        }

        // verify the required parameter 'noteableId' is set
        if (noteableId == null) {
            throw new ApiException("Missing the required parameter 'noteableId' when calling postV3ProjectsIdIssuesNoteableIdNotes(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdIssuesNoteableIdNotesRequest' is set
        if (postV3ProjectsIdIssuesNoteableIdNotesRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdIssuesNoteableIdNotesRequest' when calling postV3ProjectsIdIssuesNoteableIdNotes(Async)");
        }

        return postV3ProjectsIdIssuesNoteableIdNotesCall(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest, _callback);

    }

    /**
     * Create a new +noteable+ note
     * Create a new +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param postV3ProjectsIdIssuesNoteableIdNotesRequest  (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public Note postV3ProjectsIdIssuesNoteableIdNotes(String id, Integer noteableId, PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest) throws ApiException {
        ApiResponse<Note> localVarResp = postV3ProjectsIdIssuesNoteableIdNotesWithHttpInfo(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new +noteable+ note
     * Create a new +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param postV3ProjectsIdIssuesNoteableIdNotesRequest  (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> postV3ProjectsIdIssuesNoteableIdNotesWithHttpInfo(String id, Integer noteableId, PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdIssuesNoteableIdNotesValidateBeforeCall(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new +noteable+ note (asynchronously)
     * Create a new +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param postV3ProjectsIdIssuesNoteableIdNotesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesNoteableIdNotesAsync(String id, Integer noteableId, PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdIssuesNoteableIdNotesValidateBeforeCall(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdIssuesSubscribableIdSubscription
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscribe to a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesSubscribableIdSubscriptionCall(String id, String subscribableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{subscribable_id}/subscription"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "subscribable_id" + "}", localVarApiClient.escapeString(subscribableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdIssuesSubscribableIdSubscriptionValidateBeforeCall(String id, String subscribableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesSubscribableIdSubscription(Async)");
        }

        // verify the required parameter 'subscribableId' is set
        if (subscribableId == null) {
            throw new ApiException("Missing the required parameter 'subscribableId' when calling postV3ProjectsIdIssuesSubscribableIdSubscription(Async)");
        }

        return postV3ProjectsIdIssuesSubscribableIdSubscriptionCall(id, subscribableId, _callback);

    }

    /**
     * Subscribe to a resource
     * Subscribe to a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscribe to a resource </td><td>  -  </td></tr>
     </table>
     */
    public Issue postV3ProjectsIdIssuesSubscribableIdSubscription(String id, String subscribableId) throws ApiException {
        ApiResponse<Issue> localVarResp = postV3ProjectsIdIssuesSubscribableIdSubscriptionWithHttpInfo(id, subscribableId);
        return localVarResp.getData();
    }

    /**
     * Subscribe to a resource
     * Subscribe to a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscribe to a resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Issue> postV3ProjectsIdIssuesSubscribableIdSubscriptionWithHttpInfo(String id, String subscribableId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdIssuesSubscribableIdSubscriptionValidateBeforeCall(id, subscribableId, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Subscribe to a resource (asynchronously)
     * Subscribe to a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscribe to a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdIssuesSubscribableIdSubscriptionAsync(String id, String subscribableId, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdIssuesSubscribableIdSubscriptionValidateBeforeCall(id, subscribableId, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdKeys
     * @param id The ID of the project (required)
     * @param postV3ProjectsIdDeployKeysRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add new deploy key to currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdKeysCall(String id, PostV3ProjectsIdDeployKeysRequest postV3ProjectsIdDeployKeysRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdDeployKeysRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/keys"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdKeysValidateBeforeCall(String id, PostV3ProjectsIdDeployKeysRequest postV3ProjectsIdDeployKeysRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdKeys(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdDeployKeysRequest' is set
        if (postV3ProjectsIdDeployKeysRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdDeployKeysRequest' when calling postV3ProjectsIdKeys(Async)");
        }

        return postV3ProjectsIdKeysCall(id, postV3ProjectsIdDeployKeysRequest, _callback);

    }

    /**
     * Add new deploy key to currently authenticated user
     * Add new deploy key to currently authenticated user
     * @param id The ID of the project (required)
     * @param postV3ProjectsIdDeployKeysRequest  (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add new deploy key to currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey postV3ProjectsIdKeys(String id, PostV3ProjectsIdDeployKeysRequest postV3ProjectsIdDeployKeysRequest) throws ApiException {
        ApiResponse<SSHKey> localVarResp = postV3ProjectsIdKeysWithHttpInfo(id, postV3ProjectsIdDeployKeysRequest);
        return localVarResp.getData();
    }

    /**
     * Add new deploy key to currently authenticated user
     * Add new deploy key to currently authenticated user
     * @param id The ID of the project (required)
     * @param postV3ProjectsIdDeployKeysRequest  (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add new deploy key to currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> postV3ProjectsIdKeysWithHttpInfo(String id, PostV3ProjectsIdDeployKeysRequest postV3ProjectsIdDeployKeysRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdKeysValidateBeforeCall(id, postV3ProjectsIdDeployKeysRequest, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add new deploy key to currently authenticated user (asynchronously)
     * Add new deploy key to currently authenticated user
     * @param id The ID of the project (required)
     * @param postV3ProjectsIdDeployKeysRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add new deploy key to currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdKeysAsync(String id, PostV3ProjectsIdDeployKeysRequest postV3ProjectsIdDeployKeysRequest, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdKeysValidateBeforeCall(id, postV3ProjectsIdDeployKeysRequest, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdKeysKeyIdEnable
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Enable a deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdKeysKeyIdEnableCall(String id, Integer keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/keys/{key_id}/enable"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdKeysKeyIdEnableValidateBeforeCall(String id, Integer keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdKeysKeyIdEnable(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling postV3ProjectsIdKeysKeyIdEnable(Async)");
        }

        return postV3ProjectsIdKeysKeyIdEnableCall(id, keyId, _callback);

    }

    /**
     * Enable a deploy key for a project
     * This feature was added in GitLab 8.11
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Enable a deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey postV3ProjectsIdKeysKeyIdEnable(String id, Integer keyId) throws ApiException {
        ApiResponse<SSHKey> localVarResp = postV3ProjectsIdKeysKeyIdEnableWithHttpInfo(id, keyId);
        return localVarResp.getData();
    }

    /**
     * Enable a deploy key for a project
     * This feature was added in GitLab 8.11
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Enable a deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> postV3ProjectsIdKeysKeyIdEnableWithHttpInfo(String id, Integer keyId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdKeysKeyIdEnableValidateBeforeCall(id, keyId, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable a deploy key for a project (asynchronously)
     * This feature was added in GitLab 8.11
     * @param id The ID of the project (required)
     * @param keyId The ID of the deploy key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Enable a deploy key for a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdKeysKeyIdEnableAsync(String id, Integer keyId, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdKeysKeyIdEnableValidateBeforeCall(id, keyId, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdLabels
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdLabelsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new label </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdLabelsCall(String id, PostV3ProjectsIdLabelsRequest postV3ProjectsIdLabelsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdLabelsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/labels"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdLabelsValidateBeforeCall(String id, PostV3ProjectsIdLabelsRequest postV3ProjectsIdLabelsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdLabels(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdLabelsRequest' is set
        if (postV3ProjectsIdLabelsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdLabelsRequest' when calling postV3ProjectsIdLabels(Async)");
        }

        return postV3ProjectsIdLabelsCall(id, postV3ProjectsIdLabelsRequest, _callback);

    }

    /**
     * Create a new label
     * Create a new label
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdLabelsRequest  (required)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new label </td><td>  -  </td></tr>
     </table>
     */
    public Label postV3ProjectsIdLabels(String id, PostV3ProjectsIdLabelsRequest postV3ProjectsIdLabelsRequest) throws ApiException {
        ApiResponse<Label> localVarResp = postV3ProjectsIdLabelsWithHttpInfo(id, postV3ProjectsIdLabelsRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new label
     * Create a new label
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdLabelsRequest  (required)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new label </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Label> postV3ProjectsIdLabelsWithHttpInfo(String id, PostV3ProjectsIdLabelsRequest postV3ProjectsIdLabelsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdLabelsValidateBeforeCall(id, postV3ProjectsIdLabelsRequest, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new label (asynchronously)
     * Create a new label
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdLabelsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new label </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdLabelsAsync(String id, PostV3ProjectsIdLabelsRequest postV3ProjectsIdLabelsRequest, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdLabelsValidateBeforeCall(id, postV3ProjectsIdLabelsRequest, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdLabelsSubscribableIdSubscription
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscribe to a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdLabelsSubscribableIdSubscriptionCall(String id, String subscribableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/labels/{subscribable_id}/subscription"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "subscribable_id" + "}", localVarApiClient.escapeString(subscribableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdLabelsSubscribableIdSubscriptionValidateBeforeCall(String id, String subscribableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdLabelsSubscribableIdSubscription(Async)");
        }

        // verify the required parameter 'subscribableId' is set
        if (subscribableId == null) {
            throw new ApiException("Missing the required parameter 'subscribableId' when calling postV3ProjectsIdLabelsSubscribableIdSubscription(Async)");
        }

        return postV3ProjectsIdLabelsSubscribableIdSubscriptionCall(id, subscribableId, _callback);

    }

    /**
     * Subscribe to a resource
     * Subscribe to a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscribe to a resource </td><td>  -  </td></tr>
     </table>
     */
    public Label postV3ProjectsIdLabelsSubscribableIdSubscription(String id, String subscribableId) throws ApiException {
        ApiResponse<Label> localVarResp = postV3ProjectsIdLabelsSubscribableIdSubscriptionWithHttpInfo(id, subscribableId);
        return localVarResp.getData();
    }

    /**
     * Subscribe to a resource
     * Subscribe to a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscribe to a resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Label> postV3ProjectsIdLabelsSubscribableIdSubscriptionWithHttpInfo(String id, String subscribableId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdLabelsSubscribableIdSubscriptionValidateBeforeCall(id, subscribableId, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Subscribe to a resource (asynchronously)
     * Subscribe to a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscribe to a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdLabelsSubscribableIdSubscriptionAsync(String id, String subscribableId, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdLabelsSubscribableIdSubscriptionValidateBeforeCall(id, subscribableId, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMembers
     * @param id The project ID (required)
     * @param postV3GroupsIdMembersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Adds a member to a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMembersCall(String id, PostV3GroupsIdMembersRequest postV3GroupsIdMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3GroupsIdMembersRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/members"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMembersValidateBeforeCall(String id, PostV3GroupsIdMembersRequest postV3GroupsIdMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMembers(Async)");
        }

        // verify the required parameter 'postV3GroupsIdMembersRequest' is set
        if (postV3GroupsIdMembersRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3GroupsIdMembersRequest' when calling postV3ProjectsIdMembers(Async)");
        }

        return postV3ProjectsIdMembersCall(id, postV3GroupsIdMembersRequest, _callback);

    }

    /**
     * Adds a member to a group or project.
     * Adds a member to a group or project.
     * @param id The project ID (required)
     * @param postV3GroupsIdMembersRequest  (required)
     * @return Member
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Adds a member to a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public Member postV3ProjectsIdMembers(String id, PostV3GroupsIdMembersRequest postV3GroupsIdMembersRequest) throws ApiException {
        ApiResponse<Member> localVarResp = postV3ProjectsIdMembersWithHttpInfo(id, postV3GroupsIdMembersRequest);
        return localVarResp.getData();
    }

    /**
     * Adds a member to a group or project.
     * Adds a member to a group or project.
     * @param id The project ID (required)
     * @param postV3GroupsIdMembersRequest  (required)
     * @return ApiResponse&lt;Member&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Adds a member to a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Member> postV3ProjectsIdMembersWithHttpInfo(String id, PostV3GroupsIdMembersRequest postV3GroupsIdMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMembersValidateBeforeCall(id, postV3GroupsIdMembersRequest, null);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a member to a group or project. (asynchronously)
     * Adds a member to a group or project.
     * @param id The project ID (required)
     * @param postV3GroupsIdMembersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Adds a member to a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMembersAsync(String id, PostV3GroupsIdMembersRequest postV3GroupsIdMembersRequest, final ApiCallback<Member> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMembersValidateBeforeCall(id, postV3GroupsIdMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_request/{merge_request_id}/cancel_merge_when_build_succeeds"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsValidateBeforeCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds(Async)");
        }

        return postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsCall(id, mergeRequestId, _callback);

    }

    /**
     * Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled
     * Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @return MergeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequest postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds(String id, Integer mergeRequestId) throws ApiException {
        ApiResponse<MergeRequest> localVarResp = postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsWithHttpInfo(id, mergeRequestId);
        return localVarResp.getData();
    }

    /**
     * Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled
     * Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @return ApiResponse&lt;MergeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequest> postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsWithHttpInfo(String id, Integer mergeRequestId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsValidateBeforeCall(id, mergeRequestId, null);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled (asynchronously)
     * Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsAsync(String id, Integer mergeRequestId, final ApiCallback<MergeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsValidateBeforeCall(id, mergeRequestId, _callback);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMergeRequestMergeRequestIdComments
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post a comment to a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestMergeRequestIdCommentsCall(String id, Integer mergeRequestId, PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_request/{merge_request_id}/comments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMergeRequestMergeRequestIdCommentsValidateBeforeCall(String id, Integer mergeRequestId, PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestMergeRequestIdComments(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestMergeRequestIdComments(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest' is set
        if (postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest' when calling postV3ProjectsIdMergeRequestMergeRequestIdComments(Async)");
        }

        return postV3ProjectsIdMergeRequestMergeRequestIdCommentsCall(id, mergeRequestId, postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest, _callback);

    }

    /**
     * Post a comment to a merge request
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest  (required)
     * @return MRNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post a comment to a merge request </td><td>  -  </td></tr>
     </table>
     */
    public MRNote postV3ProjectsIdMergeRequestMergeRequestIdComments(String id, Integer mergeRequestId, PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest) throws ApiException {
        ApiResponse<MRNote> localVarResp = postV3ProjectsIdMergeRequestMergeRequestIdCommentsWithHttpInfo(id, mergeRequestId, postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest);
        return localVarResp.getData();
    }

    /**
     * Post a comment to a merge request
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest  (required)
     * @return ApiResponse&lt;MRNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post a comment to a merge request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MRNote> postV3ProjectsIdMergeRequestMergeRequestIdCommentsWithHttpInfo(String id, Integer mergeRequestId, PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestMergeRequestIdCommentsValidateBeforeCall(id, mergeRequestId, postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest, null);
        Type localVarReturnType = new TypeToken<MRNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post a comment to a merge request (asynchronously)
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post a comment to a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestMergeRequestIdCommentsAsync(String id, Integer mergeRequestId, PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest, final ApiCallback<MRNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestMergeRequestIdCommentsValidateBeforeCall(id, mergeRequestId, postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest, _callback);
        Type localVarReturnType = new TypeToken<MRNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMergeRequestSubscribableIdSubscription
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscribe to a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestSubscribableIdSubscriptionCall(String id, String subscribableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_request/{subscribable_id}/subscription"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "subscribable_id" + "}", localVarApiClient.escapeString(subscribableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMergeRequestSubscribableIdSubscriptionValidateBeforeCall(String id, String subscribableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestSubscribableIdSubscription(Async)");
        }

        // verify the required parameter 'subscribableId' is set
        if (subscribableId == null) {
            throw new ApiException("Missing the required parameter 'subscribableId' when calling postV3ProjectsIdMergeRequestSubscribableIdSubscription(Async)");
        }

        return postV3ProjectsIdMergeRequestSubscribableIdSubscriptionCall(id, subscribableId, _callback);

    }

    /**
     * Subscribe to a resource
     * Subscribe to a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @return MergeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscribe to a resource </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequest postV3ProjectsIdMergeRequestSubscribableIdSubscription(String id, String subscribableId) throws ApiException {
        ApiResponse<MergeRequest> localVarResp = postV3ProjectsIdMergeRequestSubscribableIdSubscriptionWithHttpInfo(id, subscribableId);
        return localVarResp.getData();
    }

    /**
     * Subscribe to a resource
     * Subscribe to a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @return ApiResponse&lt;MergeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscribe to a resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequest> postV3ProjectsIdMergeRequestSubscribableIdSubscriptionWithHttpInfo(String id, String subscribableId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestSubscribableIdSubscriptionValidateBeforeCall(id, subscribableId, null);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Subscribe to a resource (asynchronously)
     * Subscribe to a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscribe to a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestSubscribableIdSubscriptionAsync(String id, String subscribableId, final ApiCallback<MergeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestSubscribableIdSubscriptionValidateBeforeCall(id, subscribableId, _callback);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMergeRequests
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdMergeRequestsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsCall(String id, PostV3ProjectsIdMergeRequestsRequest postV3ProjectsIdMergeRequestsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdMergeRequestsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMergeRequestsValidateBeforeCall(String id, PostV3ProjectsIdMergeRequestsRequest postV3ProjectsIdMergeRequestsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequests(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdMergeRequestsRequest' is set
        if (postV3ProjectsIdMergeRequestsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdMergeRequestsRequest' when calling postV3ProjectsIdMergeRequests(Async)");
        }

        return postV3ProjectsIdMergeRequestsCall(id, postV3ProjectsIdMergeRequestsRequest, _callback);

    }

    /**
     * Create a merge request
     * Create a merge request
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdMergeRequestsRequest  (required)
     * @return MergeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a merge request </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequest postV3ProjectsIdMergeRequests(String id, PostV3ProjectsIdMergeRequestsRequest postV3ProjectsIdMergeRequestsRequest) throws ApiException {
        ApiResponse<MergeRequest> localVarResp = postV3ProjectsIdMergeRequestsWithHttpInfo(id, postV3ProjectsIdMergeRequestsRequest);
        return localVarResp.getData();
    }

    /**
     * Create a merge request
     * Create a merge request
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdMergeRequestsRequest  (required)
     * @return ApiResponse&lt;MergeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a merge request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequest> postV3ProjectsIdMergeRequestsWithHttpInfo(String id, PostV3ProjectsIdMergeRequestsRequest postV3ProjectsIdMergeRequestsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsValidateBeforeCall(id, postV3ProjectsIdMergeRequestsRequest, null);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a merge request (asynchronously)
     * Create a merge request
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdMergeRequestsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsAsync(String id, PostV3ProjectsIdMergeRequestsRequest postV3ProjectsIdMergeRequestsRequest, final ApiCallback<MergeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsValidateBeforeCall(id, postV3ProjectsIdMergeRequestsRequest, _callback);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @param postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add spent time for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeCall(String id, Integer mergeRequestId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/add_spent_time"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeValidateBeforeCall(String id, Integer mergeRequestId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest' is set
        if (postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest' when calling postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime(Async)");
        }

        return postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeCall(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, _callback);

    }

    /**
     * Add spent time for a project merge_request
     * Add spent time for a project merge_request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @param postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add spent time for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public void postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime(String id, Integer mergeRequestId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest) throws ApiException {
        postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeWithHttpInfo(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest);
    }

    /**
     * Add spent time for a project merge_request
     * Add spent time for a project merge_request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @param postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add spent time for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeWithHttpInfo(String id, Integer mergeRequestId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeValidateBeforeCall(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add spent time for a project merge_request (asynchronously)
     * Add spent time for a project merge_request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @param postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add spent time for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeAsync(String id, Integer mergeRequestId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeValidateBeforeCall(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiCall(Integer id, Integer mergeRequestId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdIssuesIssueIdAwardEmojiRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiValidateBeforeCall(Integer id, Integer mergeRequestId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' is set
        if (postV3ProjectsIdIssuesIssueIdAwardEmojiRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' when calling postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji(Async)");
        }

        return postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiCall(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, _callback);

    }

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji(Integer id, Integer mergeRequestId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiWithHttpInfo(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest);
        return localVarResp.getData();
    }

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiWithHttpInfo(Integer id, Integer mergeRequestId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiValidateBeforeCall(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Award a new Emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAsync(Integer id, Integer mergeRequestId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiValidateBeforeCall(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/cancel_merge_when_build_succeeds"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsValidateBeforeCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds(Async)");
        }

        return postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsCall(id, mergeRequestId, _callback);

    }

    /**
     * Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled
     * Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @return MergeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequest postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds(String id, Integer mergeRequestId) throws ApiException {
        ApiResponse<MergeRequest> localVarResp = postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsWithHttpInfo(id, mergeRequestId);
        return localVarResp.getData();
    }

    /**
     * Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled
     * Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @return ApiResponse&lt;MergeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequest> postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsWithHttpInfo(String id, Integer mergeRequestId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsValidateBeforeCall(id, mergeRequestId, null);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled (asynchronously)
     * Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsAsync(String id, Integer mergeRequestId, final ApiCallback<MergeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsValidateBeforeCall(id, mergeRequestId, _callback);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMergeRequestsMergeRequestIdComments
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post a comment to a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdCommentsCall(String id, Integer mergeRequestId, PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/comments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdCommentsValidateBeforeCall(String id, Integer mergeRequestId, PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdComments(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdComments(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest' is set
        if (postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest' when calling postV3ProjectsIdMergeRequestsMergeRequestIdComments(Async)");
        }

        return postV3ProjectsIdMergeRequestsMergeRequestIdCommentsCall(id, mergeRequestId, postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest, _callback);

    }

    /**
     * Post a comment to a merge request
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest  (required)
     * @return MRNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post a comment to a merge request </td><td>  -  </td></tr>
     </table>
     */
    public MRNote postV3ProjectsIdMergeRequestsMergeRequestIdComments(String id, Integer mergeRequestId, PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest) throws ApiException {
        ApiResponse<MRNote> localVarResp = postV3ProjectsIdMergeRequestsMergeRequestIdCommentsWithHttpInfo(id, mergeRequestId, postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest);
        return localVarResp.getData();
    }

    /**
     * Post a comment to a merge request
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest  (required)
     * @return ApiResponse&lt;MRNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post a comment to a merge request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MRNote> postV3ProjectsIdMergeRequestsMergeRequestIdCommentsWithHttpInfo(String id, Integer mergeRequestId, PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdCommentsValidateBeforeCall(id, mergeRequestId, postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest, null);
        Type localVarReturnType = new TypeToken<MRNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post a comment to a merge request (asynchronously)
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post a comment to a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdCommentsAsync(String id, Integer mergeRequestId, PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest, final ApiCallback<MRNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdCommentsValidateBeforeCall(id, mergeRequestId, postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest, _callback);
        Type localVarReturnType = new TypeToken<MRNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param noteId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiCall(Integer id, Integer mergeRequestId, Integer noteId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdIssuesIssueIdAwardEmojiRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiValidateBeforeCall(Integer id, Integer mergeRequestId, Integer noteId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' is set
        if (postV3ProjectsIdIssuesIssueIdAwardEmojiRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' when calling postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(Async)");
        }

        return postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiCall(id, mergeRequestId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, _callback);

    }

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param noteId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(Integer id, Integer mergeRequestId, Integer noteId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiWithHttpInfo(id, mergeRequestId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest);
        return localVarResp.getData();
    }

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param noteId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiWithHttpInfo(Integer id, Integer mergeRequestId, Integer noteId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiValidateBeforeCall(id, mergeRequestId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Award a new Emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param mergeRequestId  (required)
     * @param noteId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAsync(Integer id, Integer mergeRequestId, Integer noteId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiValidateBeforeCall(id, mergeRequestId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset spent time for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/reset_spent_time"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeValidateBeforeCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime(Async)");
        }

        return postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeCall(id, mergeRequestId, _callback);

    }

    /**
     * Reset spent time for a project merge_request
     * Reset spent time for a project merge_request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset spent time for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public void postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime(String id, Integer mergeRequestId) throws ApiException {
        postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeWithHttpInfo(id, mergeRequestId);
    }

    /**
     * Reset spent time for a project merge_request
     * Reset spent time for a project merge_request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset spent time for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeWithHttpInfo(String id, Integer mergeRequestId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeValidateBeforeCall(id, mergeRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset spent time for a project merge_request (asynchronously)
     * Reset spent time for a project merge_request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset spent time for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeAsync(String id, Integer mergeRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeValidateBeforeCall(id, mergeRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset the time estimate for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/reset_time_estimate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateValidateBeforeCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate(Async)");
        }

        return postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateCall(id, mergeRequestId, _callback);

    }

    /**
     * Reset the time estimate for a project merge_request
     * Reset the time estimate for a project merge_request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset the time estimate for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public void postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate(String id, Integer mergeRequestId) throws ApiException {
        postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateWithHttpInfo(id, mergeRequestId);
    }

    /**
     * Reset the time estimate for a project merge_request
     * Reset the time estimate for a project merge_request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset the time estimate for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateWithHttpInfo(String id, Integer mergeRequestId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateValidateBeforeCall(id, mergeRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset the time estimate for a project merge_request (asynchronously)
     * Reset the time estimate for a project merge_request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Reset the time estimate for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateAsync(String id, Integer mergeRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateValidateBeforeCall(id, mergeRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @param postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Set a time estimate for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateCall(String id, Integer mergeRequestId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/time_estimate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateValidateBeforeCall(String id, Integer mergeRequestId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest' is set
        if (postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest' when calling postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate(Async)");
        }

        return postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateCall(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, _callback);

    }

    /**
     * Set a time estimate for a project merge_request
     * Set a time estimate for a project merge_request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @param postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Set a time estimate for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public void postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate(String id, Integer mergeRequestId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest) throws ApiException {
        postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateWithHttpInfo(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest);
    }

    /**
     * Set a time estimate for a project merge_request
     * Set a time estimate for a project merge_request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @param postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Set a time estimate for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateWithHttpInfo(String id, Integer mergeRequestId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateValidateBeforeCall(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set a time estimate for a project merge_request (asynchronously)
     * Set a time estimate for a project merge_request
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of a project merge_request (required)
     * @param postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Set a time estimate for a project merge_request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateAsync(String id, Integer mergeRequestId, PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateValidateBeforeCall(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMergeRequestsMergeRequestIdTodo
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of an issuable (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a todo on an issuable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdTodoCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/todo"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdTodoValidateBeforeCall(String id, Integer mergeRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdTodo(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdTodo(Async)");
        }

        return postV3ProjectsIdMergeRequestsMergeRequestIdTodoCall(id, mergeRequestId, _callback);

    }

    /**
     * Create a todo on an issuable
     * Create a todo on an issuable
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of an issuable (required)
     * @return Todo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a todo on an issuable </td><td>  -  </td></tr>
     </table>
     */
    public Todo postV3ProjectsIdMergeRequestsMergeRequestIdTodo(String id, Integer mergeRequestId) throws ApiException {
        ApiResponse<Todo> localVarResp = postV3ProjectsIdMergeRequestsMergeRequestIdTodoWithHttpInfo(id, mergeRequestId);
        return localVarResp.getData();
    }

    /**
     * Create a todo on an issuable
     * Create a todo on an issuable
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of an issuable (required)
     * @return ApiResponse&lt;Todo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a todo on an issuable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Todo> postV3ProjectsIdMergeRequestsMergeRequestIdTodoWithHttpInfo(String id, Integer mergeRequestId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdTodoValidateBeforeCall(id, mergeRequestId, null);
        Type localVarReturnType = new TypeToken<Todo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a todo on an issuable (asynchronously)
     * Create a todo on an issuable
     * @param id The ID of a project (required)
     * @param mergeRequestId The ID of an issuable (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a todo on an issuable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsMergeRequestIdTodoAsync(String id, Integer mergeRequestId, final ApiCallback<Todo> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsMergeRequestIdTodoValidateBeforeCall(id, mergeRequestId, _callback);
        Type localVarReturnType = new TypeToken<Todo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMergeRequestsNoteableIdNotes
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param postV3ProjectsIdIssuesNoteableIdNotesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsNoteableIdNotesCall(String id, Integer noteableId, PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdIssuesNoteableIdNotesRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{noteable_id}/notes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "noteable_id" + "}", localVarApiClient.escapeString(noteableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMergeRequestsNoteableIdNotesValidateBeforeCall(String id, Integer noteableId, PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsNoteableIdNotes(Async)");
        }

        // verify the required parameter 'noteableId' is set
        if (noteableId == null) {
            throw new ApiException("Missing the required parameter 'noteableId' when calling postV3ProjectsIdMergeRequestsNoteableIdNotes(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdIssuesNoteableIdNotesRequest' is set
        if (postV3ProjectsIdIssuesNoteableIdNotesRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdIssuesNoteableIdNotesRequest' when calling postV3ProjectsIdMergeRequestsNoteableIdNotes(Async)");
        }

        return postV3ProjectsIdMergeRequestsNoteableIdNotesCall(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest, _callback);

    }

    /**
     * Create a new +noteable+ note
     * Create a new +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param postV3ProjectsIdIssuesNoteableIdNotesRequest  (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public Note postV3ProjectsIdMergeRequestsNoteableIdNotes(String id, Integer noteableId, PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest) throws ApiException {
        ApiResponse<Note> localVarResp = postV3ProjectsIdMergeRequestsNoteableIdNotesWithHttpInfo(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new +noteable+ note
     * Create a new +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param postV3ProjectsIdIssuesNoteableIdNotesRequest  (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> postV3ProjectsIdMergeRequestsNoteableIdNotesWithHttpInfo(String id, Integer noteableId, PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsNoteableIdNotesValidateBeforeCall(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new +noteable+ note (asynchronously)
     * Create a new +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param postV3ProjectsIdIssuesNoteableIdNotesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsNoteableIdNotesAsync(String id, Integer noteableId, PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsNoteableIdNotesValidateBeforeCall(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMergeRequestsSubscribableIdSubscription
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscribe to a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionCall(String id, String subscribableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{subscribable_id}/subscription"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "subscribable_id" + "}", localVarApiClient.escapeString(subscribableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionValidateBeforeCall(String id, String subscribableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsSubscribableIdSubscription(Async)");
        }

        // verify the required parameter 'subscribableId' is set
        if (subscribableId == null) {
            throw new ApiException("Missing the required parameter 'subscribableId' when calling postV3ProjectsIdMergeRequestsSubscribableIdSubscription(Async)");
        }

        return postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionCall(id, subscribableId, _callback);

    }

    /**
     * Subscribe to a resource
     * Subscribe to a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @return MergeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscribe to a resource </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequest postV3ProjectsIdMergeRequestsSubscribableIdSubscription(String id, String subscribableId) throws ApiException {
        ApiResponse<MergeRequest> localVarResp = postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionWithHttpInfo(id, subscribableId);
        return localVarResp.getData();
    }

    /**
     * Subscribe to a resource
     * Subscribe to a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @return ApiResponse&lt;MergeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscribe to a resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequest> postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionWithHttpInfo(String id, String subscribableId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionValidateBeforeCall(id, subscribableId, null);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Subscribe to a resource (asynchronously)
     * Subscribe to a resource
     * @param id The ID of a project (required)
     * @param subscribableId The ID of a resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscribe to a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionAsync(String id, String subscribableId, final ApiCallback<MergeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionValidateBeforeCall(id, subscribableId, _callback);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdMilestones
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdMilestonesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new project milestone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMilestonesCall(String id, PostV3ProjectsIdMilestonesRequest postV3ProjectsIdMilestonesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdMilestonesRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/milestones"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdMilestonesValidateBeforeCall(String id, PostV3ProjectsIdMilestonesRequest postV3ProjectsIdMilestonesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdMilestones(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdMilestonesRequest' is set
        if (postV3ProjectsIdMilestonesRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdMilestonesRequest' when calling postV3ProjectsIdMilestones(Async)");
        }

        return postV3ProjectsIdMilestonesCall(id, postV3ProjectsIdMilestonesRequest, _callback);

    }

    /**
     * Create a new project milestone
     * Create a new project milestone
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdMilestonesRequest  (required)
     * @return Milestone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new project milestone </td><td>  -  </td></tr>
     </table>
     */
    public Milestone postV3ProjectsIdMilestones(String id, PostV3ProjectsIdMilestonesRequest postV3ProjectsIdMilestonesRequest) throws ApiException {
        ApiResponse<Milestone> localVarResp = postV3ProjectsIdMilestonesWithHttpInfo(id, postV3ProjectsIdMilestonesRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new project milestone
     * Create a new project milestone
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdMilestonesRequest  (required)
     * @return ApiResponse&lt;Milestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new project milestone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Milestone> postV3ProjectsIdMilestonesWithHttpInfo(String id, PostV3ProjectsIdMilestonesRequest postV3ProjectsIdMilestonesRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdMilestonesValidateBeforeCall(id, postV3ProjectsIdMilestonesRequest, null);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new project milestone (asynchronously)
     * Create a new project milestone
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdMilestonesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new project milestone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdMilestonesAsync(String id, PostV3ProjectsIdMilestonesRequest postV3ProjectsIdMilestonesRequest, final ApiCallback<Milestone> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdMilestonesValidateBeforeCall(id, postV3ProjectsIdMilestonesRequest, _callback);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdPipeline
     * @param id The project ID (required)
     * @param postV3ProjectsIdPipelineRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdPipelineCall(String id, PostV3ProjectsIdPipelineRequest postV3ProjectsIdPipelineRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdPipelineRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/pipeline"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdPipelineValidateBeforeCall(String id, PostV3ProjectsIdPipelineRequest postV3ProjectsIdPipelineRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdPipeline(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdPipelineRequest' is set
        if (postV3ProjectsIdPipelineRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdPipelineRequest' when calling postV3ProjectsIdPipeline(Async)");
        }

        return postV3ProjectsIdPipelineCall(id, postV3ProjectsIdPipelineRequest, _callback);

    }

    /**
     * Create a new pipeline
     * This feature was introduced in GitLab 8.14
     * @param id The project ID (required)
     * @param postV3ProjectsIdPipelineRequest  (required)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new pipeline </td><td>  -  </td></tr>
     </table>
     */
    public Pipeline postV3ProjectsIdPipeline(String id, PostV3ProjectsIdPipelineRequest postV3ProjectsIdPipelineRequest) throws ApiException {
        ApiResponse<Pipeline> localVarResp = postV3ProjectsIdPipelineWithHttpInfo(id, postV3ProjectsIdPipelineRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new pipeline
     * This feature was introduced in GitLab 8.14
     * @param id The project ID (required)
     * @param postV3ProjectsIdPipelineRequest  (required)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new pipeline </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pipeline> postV3ProjectsIdPipelineWithHttpInfo(String id, PostV3ProjectsIdPipelineRequest postV3ProjectsIdPipelineRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdPipelineValidateBeforeCall(id, postV3ProjectsIdPipelineRequest, null);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new pipeline (asynchronously)
     * This feature was introduced in GitLab 8.14
     * @param id The project ID (required)
     * @param postV3ProjectsIdPipelineRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdPipelineAsync(String id, PostV3ProjectsIdPipelineRequest postV3ProjectsIdPipelineRequest, final ApiCallback<Pipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdPipelineValidateBeforeCall(id, postV3ProjectsIdPipelineRequest, _callback);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdPipelinesPipelineIdCancel
     * @param id The project ID (required)
     * @param pipelineId The pipeline ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancel all builds in the pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdPipelinesPipelineIdCancelCall(String id, Integer pipelineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/pipelines/{pipeline_id}/cancel"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "pipeline_id" + "}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdPipelinesPipelineIdCancelValidateBeforeCall(String id, Integer pipelineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdPipelinesPipelineIdCancel(Async)");
        }

        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling postV3ProjectsIdPipelinesPipelineIdCancel(Async)");
        }

        return postV3ProjectsIdPipelinesPipelineIdCancelCall(id, pipelineId, _callback);

    }

    /**
     * Cancel all builds in the pipeline
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param pipelineId The pipeline ID (required)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancel all builds in the pipeline </td><td>  -  </td></tr>
     </table>
     */
    public Pipeline postV3ProjectsIdPipelinesPipelineIdCancel(String id, Integer pipelineId) throws ApiException {
        ApiResponse<Pipeline> localVarResp = postV3ProjectsIdPipelinesPipelineIdCancelWithHttpInfo(id, pipelineId);
        return localVarResp.getData();
    }

    /**
     * Cancel all builds in the pipeline
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param pipelineId The pipeline ID (required)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancel all builds in the pipeline </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pipeline> postV3ProjectsIdPipelinesPipelineIdCancelWithHttpInfo(String id, Integer pipelineId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdPipelinesPipelineIdCancelValidateBeforeCall(id, pipelineId, null);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel all builds in the pipeline (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param pipelineId The pipeline ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancel all builds in the pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdPipelinesPipelineIdCancelAsync(String id, Integer pipelineId, final ApiCallback<Pipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdPipelinesPipelineIdCancelValidateBeforeCall(id, pipelineId, _callback);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdPipelinesPipelineIdRetry
     * @param id The project ID (required)
     * @param pipelineId The pipeline ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Retry failed builds in the pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdPipelinesPipelineIdRetryCall(String id, Integer pipelineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/pipelines/{pipeline_id}/retry"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "pipeline_id" + "}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdPipelinesPipelineIdRetryValidateBeforeCall(String id, Integer pipelineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdPipelinesPipelineIdRetry(Async)");
        }

        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling postV3ProjectsIdPipelinesPipelineIdRetry(Async)");
        }

        return postV3ProjectsIdPipelinesPipelineIdRetryCall(id, pipelineId, _callback);

    }

    /**
     * Retry failed builds in the pipeline
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param pipelineId The pipeline ID (required)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Retry failed builds in the pipeline </td><td>  -  </td></tr>
     </table>
     */
    public Pipeline postV3ProjectsIdPipelinesPipelineIdRetry(String id, Integer pipelineId) throws ApiException {
        ApiResponse<Pipeline> localVarResp = postV3ProjectsIdPipelinesPipelineIdRetryWithHttpInfo(id, pipelineId);
        return localVarResp.getData();
    }

    /**
     * Retry failed builds in the pipeline
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param pipelineId The pipeline ID (required)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Retry failed builds in the pipeline </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pipeline> postV3ProjectsIdPipelinesPipelineIdRetryWithHttpInfo(String id, Integer pipelineId) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdPipelinesPipelineIdRetryValidateBeforeCall(id, pipelineId, null);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retry failed builds in the pipeline (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param pipelineId The pipeline ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Retry failed builds in the pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdPipelinesPipelineIdRetryAsync(String id, Integer pipelineId, final ApiCallback<Pipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdPipelinesPipelineIdRetryValidateBeforeCall(id, pipelineId, _callback);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdRefReftriggerBuilds
     * @param id The ID of a project (required)
     * @param ref The commit sha or name of a branch or tag (required)
     * @param postV3ProjectsIdRefRefTriggerBuildsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Trigger a GitLab project build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRefReftriggerBuildsCall(String id, String ref, PostV3ProjectsIdRefRefTriggerBuildsRequest postV3ProjectsIdRefRefTriggerBuildsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdRefRefTriggerBuildsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/(ref/{ref}/)trigger/builds"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "ref" + "}", localVarApiClient.escapeString(ref.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdRefReftriggerBuildsValidateBeforeCall(String id, String ref, PostV3ProjectsIdRefRefTriggerBuildsRequest postV3ProjectsIdRefRefTriggerBuildsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdRefReftriggerBuilds(Async)");
        }

        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling postV3ProjectsIdRefReftriggerBuilds(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdRefRefTriggerBuildsRequest' is set
        if (postV3ProjectsIdRefRefTriggerBuildsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdRefRefTriggerBuildsRequest' when calling postV3ProjectsIdRefReftriggerBuilds(Async)");
        }

        return postV3ProjectsIdRefReftriggerBuildsCall(id, ref, postV3ProjectsIdRefRefTriggerBuildsRequest, _callback);

    }

    /**
     * Trigger a GitLab project build
     * Trigger a GitLab project build
     * @param id The ID of a project (required)
     * @param ref The commit sha or name of a branch or tag (required)
     * @param postV3ProjectsIdRefRefTriggerBuildsRequest  (required)
     * @return TriggerRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Trigger a GitLab project build </td><td>  -  </td></tr>
     </table>
     */
    public TriggerRequest postV3ProjectsIdRefReftriggerBuilds(String id, String ref, PostV3ProjectsIdRefRefTriggerBuildsRequest postV3ProjectsIdRefRefTriggerBuildsRequest) throws ApiException {
        ApiResponse<TriggerRequest> localVarResp = postV3ProjectsIdRefReftriggerBuildsWithHttpInfo(id, ref, postV3ProjectsIdRefRefTriggerBuildsRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger a GitLab project build
     * Trigger a GitLab project build
     * @param id The ID of a project (required)
     * @param ref The commit sha or name of a branch or tag (required)
     * @param postV3ProjectsIdRefRefTriggerBuildsRequest  (required)
     * @return ApiResponse&lt;TriggerRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Trigger a GitLab project build </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TriggerRequest> postV3ProjectsIdRefReftriggerBuildsWithHttpInfo(String id, String ref, PostV3ProjectsIdRefRefTriggerBuildsRequest postV3ProjectsIdRefRefTriggerBuildsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdRefReftriggerBuildsValidateBeforeCall(id, ref, postV3ProjectsIdRefRefTriggerBuildsRequest, null);
        Type localVarReturnType = new TypeToken<TriggerRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger a GitLab project build (asynchronously)
     * Trigger a GitLab project build
     * @param id The ID of a project (required)
     * @param ref The commit sha or name of a branch or tag (required)
     * @param postV3ProjectsIdRefRefTriggerBuildsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Trigger a GitLab project build </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRefReftriggerBuildsAsync(String id, String ref, PostV3ProjectsIdRefRefTriggerBuildsRequest postV3ProjectsIdRefRefTriggerBuildsRequest, final ApiCallback<TriggerRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdRefReftriggerBuildsValidateBeforeCall(id, ref, postV3ProjectsIdRefRefTriggerBuildsRequest, _callback);
        Type localVarReturnType = new TypeToken<TriggerRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdRepositoryBranches
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdRepositoryBranchesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create branch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRepositoryBranchesCall(String id, PostV3ProjectsIdRepositoryBranchesRequest postV3ProjectsIdRepositoryBranchesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdRepositoryBranchesRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/branches"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdRepositoryBranchesValidateBeforeCall(String id, PostV3ProjectsIdRepositoryBranchesRequest postV3ProjectsIdRepositoryBranchesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdRepositoryBranches(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdRepositoryBranchesRequest' is set
        if (postV3ProjectsIdRepositoryBranchesRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdRepositoryBranchesRequest' when calling postV3ProjectsIdRepositoryBranches(Async)");
        }

        return postV3ProjectsIdRepositoryBranchesCall(id, postV3ProjectsIdRepositoryBranchesRequest, _callback);

    }

    /**
     * Create branch
     * Create branch
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdRepositoryBranchesRequest  (required)
     * @return RepoBranch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create branch </td><td>  -  </td></tr>
     </table>
     */
    public RepoBranch postV3ProjectsIdRepositoryBranches(String id, PostV3ProjectsIdRepositoryBranchesRequest postV3ProjectsIdRepositoryBranchesRequest) throws ApiException {
        ApiResponse<RepoBranch> localVarResp = postV3ProjectsIdRepositoryBranchesWithHttpInfo(id, postV3ProjectsIdRepositoryBranchesRequest);
        return localVarResp.getData();
    }

    /**
     * Create branch
     * Create branch
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdRepositoryBranchesRequest  (required)
     * @return ApiResponse&lt;RepoBranch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create branch </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepoBranch> postV3ProjectsIdRepositoryBranchesWithHttpInfo(String id, PostV3ProjectsIdRepositoryBranchesRequest postV3ProjectsIdRepositoryBranchesRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdRepositoryBranchesValidateBeforeCall(id, postV3ProjectsIdRepositoryBranchesRequest, null);
        Type localVarReturnType = new TypeToken<RepoBranch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create branch (asynchronously)
     * Create branch
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdRepositoryBranchesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create branch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRepositoryBranchesAsync(String id, PostV3ProjectsIdRepositoryBranchesRequest postV3ProjectsIdRepositoryBranchesRequest, final ApiCallback<RepoBranch> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdRepositoryBranchesValidateBeforeCall(id, postV3ProjectsIdRepositoryBranchesRequest, _callback);
        Type localVarReturnType = new TypeToken<RepoBranch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdRepositoryCommits
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdRepositoryCommitsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Commit multiple file changes as one commit </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRepositoryCommitsCall(String id, PostV3ProjectsIdRepositoryCommitsRequest postV3ProjectsIdRepositoryCommitsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdRepositoryCommitsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/commits"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdRepositoryCommitsValidateBeforeCall(String id, PostV3ProjectsIdRepositoryCommitsRequest postV3ProjectsIdRepositoryCommitsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdRepositoryCommits(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdRepositoryCommitsRequest' is set
        if (postV3ProjectsIdRepositoryCommitsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdRepositoryCommitsRequest' when calling postV3ProjectsIdRepositoryCommits(Async)");
        }

        return postV3ProjectsIdRepositoryCommitsCall(id, postV3ProjectsIdRepositoryCommitsRequest, _callback);

    }

    /**
     * Commit multiple file changes as one commit
     * This feature was introduced in GitLab 8.13
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdRepositoryCommitsRequest  (required)
     * @return RepoCommitDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Commit multiple file changes as one commit </td><td>  -  </td></tr>
     </table>
     */
    public RepoCommitDetail postV3ProjectsIdRepositoryCommits(String id, PostV3ProjectsIdRepositoryCommitsRequest postV3ProjectsIdRepositoryCommitsRequest) throws ApiException {
        ApiResponse<RepoCommitDetail> localVarResp = postV3ProjectsIdRepositoryCommitsWithHttpInfo(id, postV3ProjectsIdRepositoryCommitsRequest);
        return localVarResp.getData();
    }

    /**
     * Commit multiple file changes as one commit
     * This feature was introduced in GitLab 8.13
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdRepositoryCommitsRequest  (required)
     * @return ApiResponse&lt;RepoCommitDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Commit multiple file changes as one commit </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepoCommitDetail> postV3ProjectsIdRepositoryCommitsWithHttpInfo(String id, PostV3ProjectsIdRepositoryCommitsRequest postV3ProjectsIdRepositoryCommitsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdRepositoryCommitsValidateBeforeCall(id, postV3ProjectsIdRepositoryCommitsRequest, null);
        Type localVarReturnType = new TypeToken<RepoCommitDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Commit multiple file changes as one commit (asynchronously)
     * This feature was introduced in GitLab 8.13
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdRepositoryCommitsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Commit multiple file changes as one commit </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRepositoryCommitsAsync(String id, PostV3ProjectsIdRepositoryCommitsRequest postV3ProjectsIdRepositoryCommitsRequest, final ApiCallback<RepoCommitDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdRepositoryCommitsValidateBeforeCall(id, postV3ProjectsIdRepositoryCommitsRequest, _callback);
        Type localVarReturnType = new TypeToken<RepoCommitDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdRepositoryCommitsShaCherryPick
     * @param id The ID of a project (required)
     * @param sha A commit sha to be cherry picked (required)
     * @param postV3ProjectsIdRepositoryCommitsShaCherryPickRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cherry pick commit into a branch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRepositoryCommitsShaCherryPickCall(String id, String sha, PostV3ProjectsIdRepositoryCommitsShaCherryPickRequest postV3ProjectsIdRepositoryCommitsShaCherryPickRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdRepositoryCommitsShaCherryPickRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/commits/{sha}/cherry_pick"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdRepositoryCommitsShaCherryPickValidateBeforeCall(String id, String sha, PostV3ProjectsIdRepositoryCommitsShaCherryPickRequest postV3ProjectsIdRepositoryCommitsShaCherryPickRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdRepositoryCommitsShaCherryPick(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling postV3ProjectsIdRepositoryCommitsShaCherryPick(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdRepositoryCommitsShaCherryPickRequest' is set
        if (postV3ProjectsIdRepositoryCommitsShaCherryPickRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdRepositoryCommitsShaCherryPickRequest' when calling postV3ProjectsIdRepositoryCommitsShaCherryPick(Async)");
        }

        return postV3ProjectsIdRepositoryCommitsShaCherryPickCall(id, sha, postV3ProjectsIdRepositoryCommitsShaCherryPickRequest, _callback);

    }

    /**
     * Cherry pick commit into a branch
     * This feature was introduced in GitLab 8.15
     * @param id The ID of a project (required)
     * @param sha A commit sha to be cherry picked (required)
     * @param postV3ProjectsIdRepositoryCommitsShaCherryPickRequest  (required)
     * @return RepoCommit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cherry pick commit into a branch </td><td>  -  </td></tr>
     </table>
     */
    public RepoCommit postV3ProjectsIdRepositoryCommitsShaCherryPick(String id, String sha, PostV3ProjectsIdRepositoryCommitsShaCherryPickRequest postV3ProjectsIdRepositoryCommitsShaCherryPickRequest) throws ApiException {
        ApiResponse<RepoCommit> localVarResp = postV3ProjectsIdRepositoryCommitsShaCherryPickWithHttpInfo(id, sha, postV3ProjectsIdRepositoryCommitsShaCherryPickRequest);
        return localVarResp.getData();
    }

    /**
     * Cherry pick commit into a branch
     * This feature was introduced in GitLab 8.15
     * @param id The ID of a project (required)
     * @param sha A commit sha to be cherry picked (required)
     * @param postV3ProjectsIdRepositoryCommitsShaCherryPickRequest  (required)
     * @return ApiResponse&lt;RepoCommit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cherry pick commit into a branch </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepoCommit> postV3ProjectsIdRepositoryCommitsShaCherryPickWithHttpInfo(String id, String sha, PostV3ProjectsIdRepositoryCommitsShaCherryPickRequest postV3ProjectsIdRepositoryCommitsShaCherryPickRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdRepositoryCommitsShaCherryPickValidateBeforeCall(id, sha, postV3ProjectsIdRepositoryCommitsShaCherryPickRequest, null);
        Type localVarReturnType = new TypeToken<RepoCommit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cherry pick commit into a branch (asynchronously)
     * This feature was introduced in GitLab 8.15
     * @param id The ID of a project (required)
     * @param sha A commit sha to be cherry picked (required)
     * @param postV3ProjectsIdRepositoryCommitsShaCherryPickRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cherry pick commit into a branch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRepositoryCommitsShaCherryPickAsync(String id, String sha, PostV3ProjectsIdRepositoryCommitsShaCherryPickRequest postV3ProjectsIdRepositoryCommitsShaCherryPickRequest, final ApiCallback<RepoCommit> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdRepositoryCommitsShaCherryPickValidateBeforeCall(id, sha, postV3ProjectsIdRepositoryCommitsShaCherryPickRequest, _callback);
        Type localVarReturnType = new TypeToken<RepoCommit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdRepositoryCommitsShaComments
     * @param id The ID of a project (required)
     * @param sha The commit&#39;s SHA (required)
     * @param postV3ProjectsIdRepositoryCommitsShaCommentsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post comment to commit </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRepositoryCommitsShaCommentsCall(String id, String sha, PostV3ProjectsIdRepositoryCommitsShaCommentsRequest postV3ProjectsIdRepositoryCommitsShaCommentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdRepositoryCommitsShaCommentsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/commits/{sha}/comments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdRepositoryCommitsShaCommentsValidateBeforeCall(String id, String sha, PostV3ProjectsIdRepositoryCommitsShaCommentsRequest postV3ProjectsIdRepositoryCommitsShaCommentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdRepositoryCommitsShaComments(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling postV3ProjectsIdRepositoryCommitsShaComments(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdRepositoryCommitsShaCommentsRequest' is set
        if (postV3ProjectsIdRepositoryCommitsShaCommentsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdRepositoryCommitsShaCommentsRequest' when calling postV3ProjectsIdRepositoryCommitsShaComments(Async)");
        }

        return postV3ProjectsIdRepositoryCommitsShaCommentsCall(id, sha, postV3ProjectsIdRepositoryCommitsShaCommentsRequest, _callback);

    }

    /**
     * Post comment to commit
     * Post comment to commit
     * @param id The ID of a project (required)
     * @param sha The commit&#39;s SHA (required)
     * @param postV3ProjectsIdRepositoryCommitsShaCommentsRequest  (required)
     * @return CommitNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post comment to commit </td><td>  -  </td></tr>
     </table>
     */
    public CommitNote postV3ProjectsIdRepositoryCommitsShaComments(String id, String sha, PostV3ProjectsIdRepositoryCommitsShaCommentsRequest postV3ProjectsIdRepositoryCommitsShaCommentsRequest) throws ApiException {
        ApiResponse<CommitNote> localVarResp = postV3ProjectsIdRepositoryCommitsShaCommentsWithHttpInfo(id, sha, postV3ProjectsIdRepositoryCommitsShaCommentsRequest);
        return localVarResp.getData();
    }

    /**
     * Post comment to commit
     * Post comment to commit
     * @param id The ID of a project (required)
     * @param sha The commit&#39;s SHA (required)
     * @param postV3ProjectsIdRepositoryCommitsShaCommentsRequest  (required)
     * @return ApiResponse&lt;CommitNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post comment to commit </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitNote> postV3ProjectsIdRepositoryCommitsShaCommentsWithHttpInfo(String id, String sha, PostV3ProjectsIdRepositoryCommitsShaCommentsRequest postV3ProjectsIdRepositoryCommitsShaCommentsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdRepositoryCommitsShaCommentsValidateBeforeCall(id, sha, postV3ProjectsIdRepositoryCommitsShaCommentsRequest, null);
        Type localVarReturnType = new TypeToken<CommitNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post comment to commit (asynchronously)
     * Post comment to commit
     * @param id The ID of a project (required)
     * @param sha The commit&#39;s SHA (required)
     * @param postV3ProjectsIdRepositoryCommitsShaCommentsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post comment to commit </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRepositoryCommitsShaCommentsAsync(String id, String sha, PostV3ProjectsIdRepositoryCommitsShaCommentsRequest postV3ProjectsIdRepositoryCommitsShaCommentsRequest, final ApiCallback<CommitNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdRepositoryCommitsShaCommentsValidateBeforeCall(id, sha, postV3ProjectsIdRepositoryCommitsShaCommentsRequest, _callback);
        Type localVarReturnType = new TypeToken<CommitNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdRepositoryFiles
     * @param id The project ID (required)
     * @param putV3ProjectsIdRepositoryFilesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create new file in repository </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRepositoryFilesCall(String id, PutV3ProjectsIdRepositoryFilesRequest putV3ProjectsIdRepositoryFilesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdRepositoryFilesRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/files"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdRepositoryFilesValidateBeforeCall(String id, PutV3ProjectsIdRepositoryFilesRequest putV3ProjectsIdRepositoryFilesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdRepositoryFiles(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdRepositoryFilesRequest' is set
        if (putV3ProjectsIdRepositoryFilesRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdRepositoryFilesRequest' when calling postV3ProjectsIdRepositoryFiles(Async)");
        }

        return postV3ProjectsIdRepositoryFilesCall(id, putV3ProjectsIdRepositoryFilesRequest, _callback);

    }

    /**
     * Create new file in repository
     * Create new file in repository
     * @param id The project ID (required)
     * @param putV3ProjectsIdRepositoryFilesRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create new file in repository </td><td>  -  </td></tr>
     </table>
     */
    public void postV3ProjectsIdRepositoryFiles(String id, PutV3ProjectsIdRepositoryFilesRequest putV3ProjectsIdRepositoryFilesRequest) throws ApiException {
        postV3ProjectsIdRepositoryFilesWithHttpInfo(id, putV3ProjectsIdRepositoryFilesRequest);
    }

    /**
     * Create new file in repository
     * Create new file in repository
     * @param id The project ID (required)
     * @param putV3ProjectsIdRepositoryFilesRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create new file in repository </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postV3ProjectsIdRepositoryFilesWithHttpInfo(String id, PutV3ProjectsIdRepositoryFilesRequest putV3ProjectsIdRepositoryFilesRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdRepositoryFilesValidateBeforeCall(id, putV3ProjectsIdRepositoryFilesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create new file in repository (asynchronously)
     * Create new file in repository
     * @param id The project ID (required)
     * @param putV3ProjectsIdRepositoryFilesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create new file in repository </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRepositoryFilesAsync(String id, PutV3ProjectsIdRepositoryFilesRequest putV3ProjectsIdRepositoryFilesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdRepositoryFilesValidateBeforeCall(id, putV3ProjectsIdRepositoryFilesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdRepositoryTags
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdRepositoryTagsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new repository tag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRepositoryTagsCall(String id, PostV3ProjectsIdRepositoryTagsRequest postV3ProjectsIdRepositoryTagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdRepositoryTagsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdRepositoryTagsValidateBeforeCall(String id, PostV3ProjectsIdRepositoryTagsRequest postV3ProjectsIdRepositoryTagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdRepositoryTags(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdRepositoryTagsRequest' is set
        if (postV3ProjectsIdRepositoryTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdRepositoryTagsRequest' when calling postV3ProjectsIdRepositoryTags(Async)");
        }

        return postV3ProjectsIdRepositoryTagsCall(id, postV3ProjectsIdRepositoryTagsRequest, _callback);

    }

    /**
     * Create a new repository tag
     * Create a new repository tag
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdRepositoryTagsRequest  (required)
     * @return RepoTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new repository tag </td><td>  -  </td></tr>
     </table>
     */
    public RepoTag postV3ProjectsIdRepositoryTags(String id, PostV3ProjectsIdRepositoryTagsRequest postV3ProjectsIdRepositoryTagsRequest) throws ApiException {
        ApiResponse<RepoTag> localVarResp = postV3ProjectsIdRepositoryTagsWithHttpInfo(id, postV3ProjectsIdRepositoryTagsRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new repository tag
     * Create a new repository tag
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdRepositoryTagsRequest  (required)
     * @return ApiResponse&lt;RepoTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new repository tag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepoTag> postV3ProjectsIdRepositoryTagsWithHttpInfo(String id, PostV3ProjectsIdRepositoryTagsRequest postV3ProjectsIdRepositoryTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdRepositoryTagsValidateBeforeCall(id, postV3ProjectsIdRepositoryTagsRequest, null);
        Type localVarReturnType = new TypeToken<RepoTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new repository tag (asynchronously)
     * Create a new repository tag
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdRepositoryTagsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new repository tag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRepositoryTagsAsync(String id, PostV3ProjectsIdRepositoryTagsRequest postV3ProjectsIdRepositoryTagsRequest, final ApiCallback<RepoTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdRepositoryTagsValidateBeforeCall(id, postV3ProjectsIdRepositoryTagsRequest, _callback);
        Type localVarReturnType = new TypeToken<RepoTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdRepositoryTagsTagNameRelease
     * @param id The ID of a project (required)
     * @param tagName The name of the tag (required)
     * @param putV3ProjectsIdRepositoryTagsTagNameReleaseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add a release note to a tag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRepositoryTagsTagNameReleaseCall(String id, String tagName, PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest putV3ProjectsIdRepositoryTagsTagNameReleaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdRepositoryTagsTagNameReleaseRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/tags/{tag_name}/release"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "tag_name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdRepositoryTagsTagNameReleaseValidateBeforeCall(String id, String tagName, PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest putV3ProjectsIdRepositoryTagsTagNameReleaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdRepositoryTagsTagNameRelease(Async)");
        }

        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling postV3ProjectsIdRepositoryTagsTagNameRelease(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdRepositoryTagsTagNameReleaseRequest' is set
        if (putV3ProjectsIdRepositoryTagsTagNameReleaseRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdRepositoryTagsTagNameReleaseRequest' when calling postV3ProjectsIdRepositoryTagsTagNameRelease(Async)");
        }

        return postV3ProjectsIdRepositoryTagsTagNameReleaseCall(id, tagName, putV3ProjectsIdRepositoryTagsTagNameReleaseRequest, _callback);

    }

    /**
     * Add a release note to a tag
     * Add a release note to a tag
     * @param id The ID of a project (required)
     * @param tagName The name of the tag (required)
     * @param putV3ProjectsIdRepositoryTagsTagNameReleaseRequest  (required)
     * @return Release
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add a release note to a tag </td><td>  -  </td></tr>
     </table>
     */
    public Release postV3ProjectsIdRepositoryTagsTagNameRelease(String id, String tagName, PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest putV3ProjectsIdRepositoryTagsTagNameReleaseRequest) throws ApiException {
        ApiResponse<Release> localVarResp = postV3ProjectsIdRepositoryTagsTagNameReleaseWithHttpInfo(id, tagName, putV3ProjectsIdRepositoryTagsTagNameReleaseRequest);
        return localVarResp.getData();
    }

    /**
     * Add a release note to a tag
     * Add a release note to a tag
     * @param id The ID of a project (required)
     * @param tagName The name of the tag (required)
     * @param putV3ProjectsIdRepositoryTagsTagNameReleaseRequest  (required)
     * @return ApiResponse&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add a release note to a tag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Release> postV3ProjectsIdRepositoryTagsTagNameReleaseWithHttpInfo(String id, String tagName, PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest putV3ProjectsIdRepositoryTagsTagNameReleaseRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdRepositoryTagsTagNameReleaseValidateBeforeCall(id, tagName, putV3ProjectsIdRepositoryTagsTagNameReleaseRequest, null);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a release note to a tag (asynchronously)
     * Add a release note to a tag
     * @param id The ID of a project (required)
     * @param tagName The name of the tag (required)
     * @param putV3ProjectsIdRepositoryTagsTagNameReleaseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add a release note to a tag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRepositoryTagsTagNameReleaseAsync(String id, String tagName, PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest putV3ProjectsIdRepositoryTagsTagNameReleaseRequest, final ApiCallback<Release> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdRepositoryTagsTagNameReleaseValidateBeforeCall(id, tagName, putV3ProjectsIdRepositoryTagsTagNameReleaseRequest, _callback);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdRunners
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdRunnersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Enable a runner for a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRunnersCall(String id, PostV3ProjectsIdRunnersRequest postV3ProjectsIdRunnersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdRunnersRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/runners"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdRunnersValidateBeforeCall(String id, PostV3ProjectsIdRunnersRequest postV3ProjectsIdRunnersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdRunners(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdRunnersRequest' is set
        if (postV3ProjectsIdRunnersRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdRunnersRequest' when calling postV3ProjectsIdRunners(Async)");
        }

        return postV3ProjectsIdRunnersCall(id, postV3ProjectsIdRunnersRequest, _callback);

    }

    /**
     * Enable a runner for a project
     * Enable a runner for a project
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdRunnersRequest  (required)
     * @return Runner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Enable a runner for a project </td><td>  -  </td></tr>
     </table>
     */
    public Runner postV3ProjectsIdRunners(String id, PostV3ProjectsIdRunnersRequest postV3ProjectsIdRunnersRequest) throws ApiException {
        ApiResponse<Runner> localVarResp = postV3ProjectsIdRunnersWithHttpInfo(id, postV3ProjectsIdRunnersRequest);
        return localVarResp.getData();
    }

    /**
     * Enable a runner for a project
     * Enable a runner for a project
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdRunnersRequest  (required)
     * @return ApiResponse&lt;Runner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Enable a runner for a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Runner> postV3ProjectsIdRunnersWithHttpInfo(String id, PostV3ProjectsIdRunnersRequest postV3ProjectsIdRunnersRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdRunnersValidateBeforeCall(id, postV3ProjectsIdRunnersRequest, null);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable a runner for a project (asynchronously)
     * Enable a runner for a project
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdRunnersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Enable a runner for a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdRunnersAsync(String id, PostV3ProjectsIdRunnersRequest postV3ProjectsIdRunnersRequest, final ApiCallback<Runner> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdRunnersValidateBeforeCall(id, postV3ProjectsIdRunnersRequest, _callback);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdServicesMattermostSlashCommandsTrigger
     * @param id The ID of a project (required)
     * @param putV3ProjectsIdServicesMattermostSlashCommandsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Trigger a slash command for mattermost-slash-commands </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdServicesMattermostSlashCommandsTriggerCall(String id, PutV3ProjectsIdServicesMattermostSlashCommandsRequest putV3ProjectsIdServicesMattermostSlashCommandsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesMattermostSlashCommandsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/mattermost_slash_commands/trigger"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdServicesMattermostSlashCommandsTriggerValidateBeforeCall(String id, PutV3ProjectsIdServicesMattermostSlashCommandsRequest putV3ProjectsIdServicesMattermostSlashCommandsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdServicesMattermostSlashCommandsTrigger(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesMattermostSlashCommandsRequest' is set
        if (putV3ProjectsIdServicesMattermostSlashCommandsRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesMattermostSlashCommandsRequest' when calling postV3ProjectsIdServicesMattermostSlashCommandsTrigger(Async)");
        }

        return postV3ProjectsIdServicesMattermostSlashCommandsTriggerCall(id, putV3ProjectsIdServicesMattermostSlashCommandsRequest, _callback);

    }

    /**
     * Trigger a slash command for mattermost-slash-commands
     * Added in GitLab 8.13
     * @param id The ID of a project (required)
     * @param putV3ProjectsIdServicesMattermostSlashCommandsRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Trigger a slash command for mattermost-slash-commands </td><td>  -  </td></tr>
     </table>
     */
    public void postV3ProjectsIdServicesMattermostSlashCommandsTrigger(String id, PutV3ProjectsIdServicesMattermostSlashCommandsRequest putV3ProjectsIdServicesMattermostSlashCommandsRequest) throws ApiException {
        postV3ProjectsIdServicesMattermostSlashCommandsTriggerWithHttpInfo(id, putV3ProjectsIdServicesMattermostSlashCommandsRequest);
    }

    /**
     * Trigger a slash command for mattermost-slash-commands
     * Added in GitLab 8.13
     * @param id The ID of a project (required)
     * @param putV3ProjectsIdServicesMattermostSlashCommandsRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Trigger a slash command for mattermost-slash-commands </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postV3ProjectsIdServicesMattermostSlashCommandsTriggerWithHttpInfo(String id, PutV3ProjectsIdServicesMattermostSlashCommandsRequest putV3ProjectsIdServicesMattermostSlashCommandsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdServicesMattermostSlashCommandsTriggerValidateBeforeCall(id, putV3ProjectsIdServicesMattermostSlashCommandsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Trigger a slash command for mattermost-slash-commands (asynchronously)
     * Added in GitLab 8.13
     * @param id The ID of a project (required)
     * @param putV3ProjectsIdServicesMattermostSlashCommandsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Trigger a slash command for mattermost-slash-commands </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdServicesMattermostSlashCommandsTriggerAsync(String id, PutV3ProjectsIdServicesMattermostSlashCommandsRequest putV3ProjectsIdServicesMattermostSlashCommandsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdServicesMattermostSlashCommandsTriggerValidateBeforeCall(id, putV3ProjectsIdServicesMattermostSlashCommandsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdServicesSlackSlashCommandsTrigger
     * @param id The ID of a project (required)
     * @param putV3ProjectsIdServicesSlackSlashCommandsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Trigger a slash command for slack-slash-commands </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdServicesSlackSlashCommandsTriggerCall(String id, PutV3ProjectsIdServicesSlackSlashCommandsRequest putV3ProjectsIdServicesSlackSlashCommandsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesSlackSlashCommandsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/slack_slash_commands/trigger"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdServicesSlackSlashCommandsTriggerValidateBeforeCall(String id, PutV3ProjectsIdServicesSlackSlashCommandsRequest putV3ProjectsIdServicesSlackSlashCommandsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdServicesSlackSlashCommandsTrigger(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesSlackSlashCommandsRequest' is set
        if (putV3ProjectsIdServicesSlackSlashCommandsRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesSlackSlashCommandsRequest' when calling postV3ProjectsIdServicesSlackSlashCommandsTrigger(Async)");
        }

        return postV3ProjectsIdServicesSlackSlashCommandsTriggerCall(id, putV3ProjectsIdServicesSlackSlashCommandsRequest, _callback);

    }

    /**
     * Trigger a slash command for slack-slash-commands
     * Added in GitLab 8.13
     * @param id The ID of a project (required)
     * @param putV3ProjectsIdServicesSlackSlashCommandsRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Trigger a slash command for slack-slash-commands </td><td>  -  </td></tr>
     </table>
     */
    public void postV3ProjectsIdServicesSlackSlashCommandsTrigger(String id, PutV3ProjectsIdServicesSlackSlashCommandsRequest putV3ProjectsIdServicesSlackSlashCommandsRequest) throws ApiException {
        postV3ProjectsIdServicesSlackSlashCommandsTriggerWithHttpInfo(id, putV3ProjectsIdServicesSlackSlashCommandsRequest);
    }

    /**
     * Trigger a slash command for slack-slash-commands
     * Added in GitLab 8.13
     * @param id The ID of a project (required)
     * @param putV3ProjectsIdServicesSlackSlashCommandsRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Trigger a slash command for slack-slash-commands </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postV3ProjectsIdServicesSlackSlashCommandsTriggerWithHttpInfo(String id, PutV3ProjectsIdServicesSlackSlashCommandsRequest putV3ProjectsIdServicesSlackSlashCommandsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdServicesSlackSlashCommandsTriggerValidateBeforeCall(id, putV3ProjectsIdServicesSlackSlashCommandsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Trigger a slash command for slack-slash-commands (asynchronously)
     * Added in GitLab 8.13
     * @param id The ID of a project (required)
     * @param putV3ProjectsIdServicesSlackSlashCommandsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Trigger a slash command for slack-slash-commands </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdServicesSlackSlashCommandsTriggerAsync(String id, PutV3ProjectsIdServicesSlackSlashCommandsRequest putV3ProjectsIdServicesSlackSlashCommandsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdServicesSlackSlashCommandsTriggerValidateBeforeCall(id, putV3ProjectsIdServicesSlackSlashCommandsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdShare
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdShareRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Share the project with a group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdShareCall(String id, PostV3ProjectsIdShareRequest postV3ProjectsIdShareRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdShareRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/share"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdShareValidateBeforeCall(String id, PostV3ProjectsIdShareRequest postV3ProjectsIdShareRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdShare(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdShareRequest' is set
        if (postV3ProjectsIdShareRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdShareRequest' when calling postV3ProjectsIdShare(Async)");
        }

        return postV3ProjectsIdShareCall(id, postV3ProjectsIdShareRequest, _callback);

    }

    /**
     * Share the project with a group
     * Share the project with a group
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdShareRequest  (required)
     * @return ProjectGroupLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Share the project with a group </td><td>  -  </td></tr>
     </table>
     */
    public ProjectGroupLink postV3ProjectsIdShare(String id, PostV3ProjectsIdShareRequest postV3ProjectsIdShareRequest) throws ApiException {
        ApiResponse<ProjectGroupLink> localVarResp = postV3ProjectsIdShareWithHttpInfo(id, postV3ProjectsIdShareRequest);
        return localVarResp.getData();
    }

    /**
     * Share the project with a group
     * Share the project with a group
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdShareRequest  (required)
     * @return ApiResponse&lt;ProjectGroupLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Share the project with a group </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectGroupLink> postV3ProjectsIdShareWithHttpInfo(String id, PostV3ProjectsIdShareRequest postV3ProjectsIdShareRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdShareValidateBeforeCall(id, postV3ProjectsIdShareRequest, null);
        Type localVarReturnType = new TypeToken<ProjectGroupLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Share the project with a group (asynchronously)
     * Share the project with a group
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdShareRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Share the project with a group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdShareAsync(String id, PostV3ProjectsIdShareRequest postV3ProjectsIdShareRequest, final ApiCallback<ProjectGroupLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdShareValidateBeforeCall(id, postV3ProjectsIdShareRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectGroupLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdSnippets
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdSnippetsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new project snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdSnippetsCall(String id, PostV3ProjectsIdSnippetsRequest postV3ProjectsIdSnippetsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdSnippetsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdSnippetsValidateBeforeCall(String id, PostV3ProjectsIdSnippetsRequest postV3ProjectsIdSnippetsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdSnippets(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdSnippetsRequest' is set
        if (postV3ProjectsIdSnippetsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdSnippetsRequest' when calling postV3ProjectsIdSnippets(Async)");
        }

        return postV3ProjectsIdSnippetsCall(id, postV3ProjectsIdSnippetsRequest, _callback);

    }

    /**
     * Create a new project snippet
     * Create a new project snippet
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdSnippetsRequest  (required)
     * @return ProjectSnippet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new project snippet </td><td>  -  </td></tr>
     </table>
     */
    public ProjectSnippet postV3ProjectsIdSnippets(String id, PostV3ProjectsIdSnippetsRequest postV3ProjectsIdSnippetsRequest) throws ApiException {
        ApiResponse<ProjectSnippet> localVarResp = postV3ProjectsIdSnippetsWithHttpInfo(id, postV3ProjectsIdSnippetsRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new project snippet
     * Create a new project snippet
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdSnippetsRequest  (required)
     * @return ApiResponse&lt;ProjectSnippet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new project snippet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectSnippet> postV3ProjectsIdSnippetsWithHttpInfo(String id, PostV3ProjectsIdSnippetsRequest postV3ProjectsIdSnippetsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdSnippetsValidateBeforeCall(id, postV3ProjectsIdSnippetsRequest, null);
        Type localVarReturnType = new TypeToken<ProjectSnippet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new project snippet (asynchronously)
     * Create a new project snippet
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdSnippetsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new project snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdSnippetsAsync(String id, PostV3ProjectsIdSnippetsRequest postV3ProjectsIdSnippetsRequest, final ApiCallback<ProjectSnippet> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdSnippetsValidateBeforeCall(id, postV3ProjectsIdSnippetsRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectSnippet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdSnippetsNoteableIdNotes
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param postV3ProjectsIdIssuesNoteableIdNotesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdSnippetsNoteableIdNotesCall(String id, Integer noteableId, PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdIssuesNoteableIdNotesRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{noteable_id}/notes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "noteable_id" + "}", localVarApiClient.escapeString(noteableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdSnippetsNoteableIdNotesValidateBeforeCall(String id, Integer noteableId, PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdSnippetsNoteableIdNotes(Async)");
        }

        // verify the required parameter 'noteableId' is set
        if (noteableId == null) {
            throw new ApiException("Missing the required parameter 'noteableId' when calling postV3ProjectsIdSnippetsNoteableIdNotes(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdIssuesNoteableIdNotesRequest' is set
        if (postV3ProjectsIdIssuesNoteableIdNotesRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdIssuesNoteableIdNotesRequest' when calling postV3ProjectsIdSnippetsNoteableIdNotes(Async)");
        }

        return postV3ProjectsIdSnippetsNoteableIdNotesCall(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest, _callback);

    }

    /**
     * Create a new +noteable+ note
     * Create a new +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param postV3ProjectsIdIssuesNoteableIdNotesRequest  (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public Note postV3ProjectsIdSnippetsNoteableIdNotes(String id, Integer noteableId, PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest) throws ApiException {
        ApiResponse<Note> localVarResp = postV3ProjectsIdSnippetsNoteableIdNotesWithHttpInfo(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new +noteable+ note
     * Create a new +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param postV3ProjectsIdIssuesNoteableIdNotesRequest  (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> postV3ProjectsIdSnippetsNoteableIdNotesWithHttpInfo(String id, Integer noteableId, PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdSnippetsNoteableIdNotesValidateBeforeCall(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new +noteable+ note (asynchronously)
     * Create a new +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param postV3ProjectsIdIssuesNoteableIdNotesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdSnippetsNoteableIdNotesAsync(String id, Integer noteableId, PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdSnippetsNoteableIdNotesValidateBeforeCall(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdSnippetsSnippetIdAwardEmoji
     * @param id  (required)
     * @param snippetId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdSnippetsSnippetIdAwardEmojiCall(Integer id, Integer snippetId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdIssuesIssueIdAwardEmojiRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{snippet_id}/award_emoji"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "snippet_id" + "}", localVarApiClient.escapeString(snippetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdSnippetsSnippetIdAwardEmojiValidateBeforeCall(Integer id, Integer snippetId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdSnippetsSnippetIdAwardEmoji(Async)");
        }

        // verify the required parameter 'snippetId' is set
        if (snippetId == null) {
            throw new ApiException("Missing the required parameter 'snippetId' when calling postV3ProjectsIdSnippetsSnippetIdAwardEmoji(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' is set
        if (postV3ProjectsIdIssuesIssueIdAwardEmojiRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' when calling postV3ProjectsIdSnippetsSnippetIdAwardEmoji(Async)");
        }

        return postV3ProjectsIdSnippetsSnippetIdAwardEmojiCall(id, snippetId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, _callback);

    }

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param snippetId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji postV3ProjectsIdSnippetsSnippetIdAwardEmoji(Integer id, Integer snippetId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = postV3ProjectsIdSnippetsSnippetIdAwardEmojiWithHttpInfo(id, snippetId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest);
        return localVarResp.getData();
    }

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param snippetId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> postV3ProjectsIdSnippetsSnippetIdAwardEmojiWithHttpInfo(Integer id, Integer snippetId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdSnippetsSnippetIdAwardEmojiValidateBeforeCall(id, snippetId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Award a new Emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param snippetId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdSnippetsSnippetIdAwardEmojiAsync(Integer id, Integer snippetId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdSnippetsSnippetIdAwardEmojiValidateBeforeCall(id, snippetId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji
     * @param id  (required)
     * @param snippetId  (required)
     * @param noteId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiCall(Integer id, Integer snippetId, Integer noteId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdIssuesIssueIdAwardEmojiRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "snippet_id" + "}", localVarApiClient.escapeString(snippetId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiValidateBeforeCall(Integer id, Integer snippetId, Integer noteId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(Async)");
        }

        // verify the required parameter 'snippetId' is set
        if (snippetId == null) {
            throw new ApiException("Missing the required parameter 'snippetId' when calling postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' is set
        if (postV3ProjectsIdIssuesIssueIdAwardEmojiRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' when calling postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(Async)");
        }

        return postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiCall(id, snippetId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, _callback);

    }

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param snippetId  (required)
     * @param noteId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @return AwardEmoji
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public AwardEmoji postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(Integer id, Integer snippetId, Integer noteId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest) throws ApiException {
        ApiResponse<AwardEmoji> localVarResp = postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiWithHttpInfo(id, snippetId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest);
        return localVarResp.getData();
    }

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param snippetId  (required)
     * @param noteId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @return ApiResponse&lt;AwardEmoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AwardEmoji> postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiWithHttpInfo(Integer id, Integer snippetId, Integer noteId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiValidateBeforeCall(id, snippetId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, null);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Award a new Emoji (asynchronously)
     * This feature was introduced in 8.9
     * @param id  (required)
     * @param snippetId  (required)
     * @param noteId  (required)
     * @param postV3ProjectsIdIssuesIssueIdAwardEmojiRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Award a new Emoji </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAsync(Integer id, Integer snippetId, Integer noteId, PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, final ApiCallback<AwardEmoji> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiValidateBeforeCall(id, snippetId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, _callback);
        Type localVarReturnType = new TypeToken<AwardEmoji>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdStar
     * @param id The ID of a project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Star a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdStarCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/star"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdStarValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdStar(Async)");
        }

        return postV3ProjectsIdStarCall(id, _callback);

    }

    /**
     * Star a project
     * Star a project
     * @param id The ID of a project (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Star a project </td><td>  -  </td></tr>
     </table>
     */
    public Project postV3ProjectsIdStar(String id) throws ApiException {
        ApiResponse<Project> localVarResp = postV3ProjectsIdStarWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Star a project
     * Star a project
     * @param id The ID of a project (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Star a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> postV3ProjectsIdStarWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdStarValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Star a project (asynchronously)
     * Star a project
     * @param id The ID of a project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Star a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdStarAsync(String id, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdStarValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdStatusesSha
     * @param id The ID of a project (required)
     * @param sha The commit hash (required)
     * @param postV3ProjectsIdStatusesShaRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post status to a commit </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdStatusesShaCall(String id, String sha, PostV3ProjectsIdStatusesShaRequest postV3ProjectsIdStatusesShaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdStatusesShaRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/statuses/{sha}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdStatusesShaValidateBeforeCall(String id, String sha, PostV3ProjectsIdStatusesShaRequest postV3ProjectsIdStatusesShaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdStatusesSha(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling postV3ProjectsIdStatusesSha(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdStatusesShaRequest' is set
        if (postV3ProjectsIdStatusesShaRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdStatusesShaRequest' when calling postV3ProjectsIdStatusesSha(Async)");
        }

        return postV3ProjectsIdStatusesShaCall(id, sha, postV3ProjectsIdStatusesShaRequest, _callback);

    }

    /**
     * Post status to a commit
     * Post status to a commit
     * @param id The ID of a project (required)
     * @param sha The commit hash (required)
     * @param postV3ProjectsIdStatusesShaRequest  (required)
     * @return CommitStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post status to a commit </td><td>  -  </td></tr>
     </table>
     */
    public CommitStatus postV3ProjectsIdStatusesSha(String id, String sha, PostV3ProjectsIdStatusesShaRequest postV3ProjectsIdStatusesShaRequest) throws ApiException {
        ApiResponse<CommitStatus> localVarResp = postV3ProjectsIdStatusesShaWithHttpInfo(id, sha, postV3ProjectsIdStatusesShaRequest);
        return localVarResp.getData();
    }

    /**
     * Post status to a commit
     * Post status to a commit
     * @param id The ID of a project (required)
     * @param sha The commit hash (required)
     * @param postV3ProjectsIdStatusesShaRequest  (required)
     * @return ApiResponse&lt;CommitStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post status to a commit </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommitStatus> postV3ProjectsIdStatusesShaWithHttpInfo(String id, String sha, PostV3ProjectsIdStatusesShaRequest postV3ProjectsIdStatusesShaRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdStatusesShaValidateBeforeCall(id, sha, postV3ProjectsIdStatusesShaRequest, null);
        Type localVarReturnType = new TypeToken<CommitStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post status to a commit (asynchronously)
     * Post status to a commit
     * @param id The ID of a project (required)
     * @param sha The commit hash (required)
     * @param postV3ProjectsIdStatusesShaRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post status to a commit </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdStatusesShaAsync(String id, String sha, PostV3ProjectsIdStatusesShaRequest postV3ProjectsIdStatusesShaRequest, final ApiCallback<CommitStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdStatusesShaValidateBeforeCall(id, sha, postV3ProjectsIdStatusesShaRequest, _callback);
        Type localVarReturnType = new TypeToken<CommitStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdTriggers
     * @param id The ID of a project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a trigger </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdTriggersCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/triggers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdTriggersValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdTriggers(Async)");
        }

        return postV3ProjectsIdTriggersCall(id, _callback);

    }

    /**
     * Create a trigger
     * Create a trigger
     * @param id The ID of a project (required)
     * @return Trigger
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a trigger </td><td>  -  </td></tr>
     </table>
     */
    public Trigger postV3ProjectsIdTriggers(String id) throws ApiException {
        ApiResponse<Trigger> localVarResp = postV3ProjectsIdTriggersWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Create a trigger
     * Create a trigger
     * @param id The ID of a project (required)
     * @return ApiResponse&lt;Trigger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a trigger </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Trigger> postV3ProjectsIdTriggersWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdTriggersValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a trigger (asynchronously)
     * Create a trigger
     * @param id The ID of a project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a trigger </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdTriggersAsync(String id, final ApiCallback<Trigger> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdTriggersValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdUnarchive
     * @param id The ID of a project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Unarchive a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdUnarchiveCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/unarchive"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdUnarchiveValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdUnarchive(Async)");
        }

        return postV3ProjectsIdUnarchiveCall(id, _callback);

    }

    /**
     * Unarchive a project
     * Unarchive a project
     * @param id The ID of a project (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Unarchive a project </td><td>  -  </td></tr>
     </table>
     */
    public Project postV3ProjectsIdUnarchive(String id) throws ApiException {
        ApiResponse<Project> localVarResp = postV3ProjectsIdUnarchiveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Unarchive a project
     * Unarchive a project
     * @param id The ID of a project (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Unarchive a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> postV3ProjectsIdUnarchiveWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdUnarchiveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unarchive a project (asynchronously)
     * Unarchive a project
     * @param id The ID of a project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Unarchive a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdUnarchiveAsync(String id, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdUnarchiveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdUploads
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdUploadsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload a file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdUploadsCall(String id, PostV3ProjectsIdUploadsRequest postV3ProjectsIdUploadsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdUploadsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/uploads"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdUploadsValidateBeforeCall(String id, PostV3ProjectsIdUploadsRequest postV3ProjectsIdUploadsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdUploads(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdUploadsRequest' is set
        if (postV3ProjectsIdUploadsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdUploadsRequest' when calling postV3ProjectsIdUploads(Async)");
        }

        return postV3ProjectsIdUploadsCall(id, postV3ProjectsIdUploadsRequest, _callback);

    }

    /**
     * Upload a file
     * Upload a file
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdUploadsRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload a file </td><td>  -  </td></tr>
     </table>
     */
    public void postV3ProjectsIdUploads(String id, PostV3ProjectsIdUploadsRequest postV3ProjectsIdUploadsRequest) throws ApiException {
        postV3ProjectsIdUploadsWithHttpInfo(id, postV3ProjectsIdUploadsRequest);
    }

    /**
     * Upload a file
     * Upload a file
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdUploadsRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload a file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postV3ProjectsIdUploadsWithHttpInfo(String id, PostV3ProjectsIdUploadsRequest postV3ProjectsIdUploadsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdUploadsValidateBeforeCall(id, postV3ProjectsIdUploadsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload a file (asynchronously)
     * Upload a file
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdUploadsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload a file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdUploadsAsync(String id, PostV3ProjectsIdUploadsRequest postV3ProjectsIdUploadsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdUploadsValidateBeforeCall(id, postV3ProjectsIdUploadsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsIdVariables
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdVariablesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new variable in a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdVariablesCall(String id, PostV3ProjectsIdVariablesRequest postV3ProjectsIdVariablesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdVariablesRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/variables"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsIdVariablesValidateBeforeCall(String id, PostV3ProjectsIdVariablesRequest postV3ProjectsIdVariablesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3ProjectsIdVariables(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdVariablesRequest' is set
        if (postV3ProjectsIdVariablesRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdVariablesRequest' when calling postV3ProjectsIdVariables(Async)");
        }

        return postV3ProjectsIdVariablesCall(id, postV3ProjectsIdVariablesRequest, _callback);

    }

    /**
     * Create a new variable in a project
     * Create a new variable in a project
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdVariablesRequest  (required)
     * @return Variable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new variable in a project </td><td>  -  </td></tr>
     </table>
     */
    public Variable postV3ProjectsIdVariables(String id, PostV3ProjectsIdVariablesRequest postV3ProjectsIdVariablesRequest) throws ApiException {
        ApiResponse<Variable> localVarResp = postV3ProjectsIdVariablesWithHttpInfo(id, postV3ProjectsIdVariablesRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new variable in a project
     * Create a new variable in a project
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdVariablesRequest  (required)
     * @return ApiResponse&lt;Variable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new variable in a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Variable> postV3ProjectsIdVariablesWithHttpInfo(String id, PostV3ProjectsIdVariablesRequest postV3ProjectsIdVariablesRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsIdVariablesValidateBeforeCall(id, postV3ProjectsIdVariablesRequest, null);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new variable in a project (asynchronously)
     * Create a new variable in a project
     * @param id The ID of a project (required)
     * @param postV3ProjectsIdVariablesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new variable in a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsIdVariablesAsync(String id, PostV3ProjectsIdVariablesRequest postV3ProjectsIdVariablesRequest, final ApiCallback<Variable> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsIdVariablesValidateBeforeCall(id, postV3ProjectsIdVariablesRequest, _callback);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3ProjectsUserUserId
     * @param userId The ID of a user (required)
     * @param postV3ProjectsUserUserIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create new project for a specified user. Only available to admin users. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsUserUserIdCall(Integer userId, PostV3ProjectsUserUserIdRequest postV3ProjectsUserUserIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsUserUserIdRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/user/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3ProjectsUserUserIdValidateBeforeCall(Integer userId, PostV3ProjectsUserUserIdRequest postV3ProjectsUserUserIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling postV3ProjectsUserUserId(Async)");
        }

        // verify the required parameter 'postV3ProjectsUserUserIdRequest' is set
        if (postV3ProjectsUserUserIdRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsUserUserIdRequest' when calling postV3ProjectsUserUserId(Async)");
        }

        return postV3ProjectsUserUserIdCall(userId, postV3ProjectsUserUserIdRequest, _callback);

    }

    /**
     * Create new project for a specified user. Only available to admin users.
     * Create new project for a specified user. Only available to admin users.
     * @param userId The ID of a user (required)
     * @param postV3ProjectsUserUserIdRequest  (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create new project for a specified user. Only available to admin users. </td><td>  -  </td></tr>
     </table>
     */
    public Project postV3ProjectsUserUserId(Integer userId, PostV3ProjectsUserUserIdRequest postV3ProjectsUserUserIdRequest) throws ApiException {
        ApiResponse<Project> localVarResp = postV3ProjectsUserUserIdWithHttpInfo(userId, postV3ProjectsUserUserIdRequest);
        return localVarResp.getData();
    }

    /**
     * Create new project for a specified user. Only available to admin users.
     * Create new project for a specified user. Only available to admin users.
     * @param userId The ID of a user (required)
     * @param postV3ProjectsUserUserIdRequest  (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create new project for a specified user. Only available to admin users. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> postV3ProjectsUserUserIdWithHttpInfo(Integer userId, PostV3ProjectsUserUserIdRequest postV3ProjectsUserUserIdRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3ProjectsUserUserIdValidateBeforeCall(userId, postV3ProjectsUserUserIdRequest, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new project for a specified user. Only available to admin users. (asynchronously)
     * Create new project for a specified user. Only available to admin users.
     * @param userId The ID of a user (required)
     * @param postV3ProjectsUserUserIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create new project for a specified user. Only available to admin users. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3ProjectsUserUserIdAsync(Integer userId, PostV3ProjectsUserUserIdRequest postV3ProjectsUserUserIdRequest, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3ProjectsUserUserIdValidateBeforeCall(userId, postV3ProjectsUserUserIdRequest, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsId
     * @param id The ID of a project (required)
     * @param putV3ProjectsIdRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdCall(String id, PutV3ProjectsIdRequest putV3ProjectsIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdValidateBeforeCall(String id, PutV3ProjectsIdRequest putV3ProjectsIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsId(Async)");
        }

        return putV3ProjectsIdCall(id, putV3ProjectsIdRequest, _callback);

    }

    /**
     * Update an existing project
     * Update an existing project
     * @param id The ID of a project (required)
     * @param putV3ProjectsIdRequest  (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing project </td><td>  -  </td></tr>
     </table>
     */
    public Project putV3ProjectsId(String id, PutV3ProjectsIdRequest putV3ProjectsIdRequest) throws ApiException {
        ApiResponse<Project> localVarResp = putV3ProjectsIdWithHttpInfo(id, putV3ProjectsIdRequest);
        return localVarResp.getData();
    }

    /**
     * Update an existing project
     * Update an existing project
     * @param id The ID of a project (required)
     * @param putV3ProjectsIdRequest  (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> putV3ProjectsIdWithHttpInfo(String id, PutV3ProjectsIdRequest putV3ProjectsIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdValidateBeforeCall(id, putV3ProjectsIdRequest, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing project (asynchronously)
     * Update an existing project
     * @param id The ID of a project (required)
     * @param putV3ProjectsIdRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdAsync(String id, PutV3ProjectsIdRequest putV3ProjectsIdRequest, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdValidateBeforeCall(id, putV3ProjectsIdRequest, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdAccessRequestsUserIdApprove
     * @param id The project ID (required)
     * @param userId The user ID of the access requester (required)
     * @param putV3GroupsIdAccessRequestsUserIdApproveRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Approves an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdAccessRequestsUserIdApproveCall(String id, Integer userId, PutV3GroupsIdAccessRequestsUserIdApproveRequest putV3GroupsIdAccessRequestsUserIdApproveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3GroupsIdAccessRequestsUserIdApproveRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/access_requests/{user_id}/approve"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdAccessRequestsUserIdApproveValidateBeforeCall(String id, Integer userId, PutV3GroupsIdAccessRequestsUserIdApproveRequest putV3GroupsIdAccessRequestsUserIdApproveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdAccessRequestsUserIdApprove(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling putV3ProjectsIdAccessRequestsUserIdApprove(Async)");
        }

        return putV3ProjectsIdAccessRequestsUserIdApproveCall(id, userId, putV3GroupsIdAccessRequestsUserIdApproveRequest, _callback);

    }

    /**
     * Approves an access request for the given user.
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param userId The user ID of the access requester (required)
     * @param putV3GroupsIdAccessRequestsUserIdApproveRequest  (optional)
     * @return Member
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Approves an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public Member putV3ProjectsIdAccessRequestsUserIdApprove(String id, Integer userId, PutV3GroupsIdAccessRequestsUserIdApproveRequest putV3GroupsIdAccessRequestsUserIdApproveRequest) throws ApiException {
        ApiResponse<Member> localVarResp = putV3ProjectsIdAccessRequestsUserIdApproveWithHttpInfo(id, userId, putV3GroupsIdAccessRequestsUserIdApproveRequest);
        return localVarResp.getData();
    }

    /**
     * Approves an access request for the given user.
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param userId The user ID of the access requester (required)
     * @param putV3GroupsIdAccessRequestsUserIdApproveRequest  (optional)
     * @return ApiResponse&lt;Member&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Approves an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Member> putV3ProjectsIdAccessRequestsUserIdApproveWithHttpInfo(String id, Integer userId, PutV3GroupsIdAccessRequestsUserIdApproveRequest putV3GroupsIdAccessRequestsUserIdApproveRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdAccessRequestsUserIdApproveValidateBeforeCall(id, userId, putV3GroupsIdAccessRequestsUserIdApproveRequest, null);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Approves an access request for the given user. (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param userId The user ID of the access requester (required)
     * @param putV3GroupsIdAccessRequestsUserIdApproveRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Approves an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdAccessRequestsUserIdApproveAsync(String id, Integer userId, PutV3GroupsIdAccessRequestsUserIdApproveRequest putV3GroupsIdAccessRequestsUserIdApproveRequest, final ApiCallback<Member> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdAccessRequestsUserIdApproveValidateBeforeCall(id, userId, putV3GroupsIdAccessRequestsUserIdApproveRequest, _callback);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdBoardsBoardIdListsListId
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param listId The ID of a list (required)
     * @param putV3ProjectsIdBoardsBoardIdListsListIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Moves a board list to a new position </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdBoardsBoardIdListsListIdCall(String id, Integer boardId, Integer listId, PutV3ProjectsIdBoardsBoardIdListsListIdRequest putV3ProjectsIdBoardsBoardIdListsListIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdBoardsBoardIdListsListIdRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/boards/{board_id}/lists/{list_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "board_id" + "}", localVarApiClient.escapeString(boardId.toString()))
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdBoardsBoardIdListsListIdValidateBeforeCall(String id, Integer boardId, Integer listId, PutV3ProjectsIdBoardsBoardIdListsListIdRequest putV3ProjectsIdBoardsBoardIdListsListIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdBoardsBoardIdListsListId(Async)");
        }

        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling putV3ProjectsIdBoardsBoardIdListsListId(Async)");
        }

        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling putV3ProjectsIdBoardsBoardIdListsListId(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdBoardsBoardIdListsListIdRequest' is set
        if (putV3ProjectsIdBoardsBoardIdListsListIdRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdBoardsBoardIdListsListIdRequest' when calling putV3ProjectsIdBoardsBoardIdListsListId(Async)");
        }

        return putV3ProjectsIdBoardsBoardIdListsListIdCall(id, boardId, listId, putV3ProjectsIdBoardsBoardIdListsListIdRequest, _callback);

    }

    /**
     * Moves a board list to a new position
     * This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param listId The ID of a list (required)
     * @param putV3ProjectsIdBoardsBoardIdListsListIdRequest  (required)
     * @return ModelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Moves a board list to a new position </td><td>  -  </td></tr>
     </table>
     */
    public ModelList putV3ProjectsIdBoardsBoardIdListsListId(String id, Integer boardId, Integer listId, PutV3ProjectsIdBoardsBoardIdListsListIdRequest putV3ProjectsIdBoardsBoardIdListsListIdRequest) throws ApiException {
        ApiResponse<ModelList> localVarResp = putV3ProjectsIdBoardsBoardIdListsListIdWithHttpInfo(id, boardId, listId, putV3ProjectsIdBoardsBoardIdListsListIdRequest);
        return localVarResp.getData();
    }

    /**
     * Moves a board list to a new position
     * This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param listId The ID of a list (required)
     * @param putV3ProjectsIdBoardsBoardIdListsListIdRequest  (required)
     * @return ApiResponse&lt;ModelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Moves a board list to a new position </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelList> putV3ProjectsIdBoardsBoardIdListsListIdWithHttpInfo(String id, Integer boardId, Integer listId, PutV3ProjectsIdBoardsBoardIdListsListIdRequest putV3ProjectsIdBoardsBoardIdListsListIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdBoardsBoardIdListsListIdValidateBeforeCall(id, boardId, listId, putV3ProjectsIdBoardsBoardIdListsListIdRequest, null);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Moves a board list to a new position (asynchronously)
     * This feature was introduced in 8.13
     * @param id The ID of a project (required)
     * @param boardId The ID of a board (required)
     * @param listId The ID of a list (required)
     * @param putV3ProjectsIdBoardsBoardIdListsListIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Moves a board list to a new position </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdBoardsBoardIdListsListIdAsync(String id, Integer boardId, Integer listId, PutV3ProjectsIdBoardsBoardIdListsListIdRequest putV3ProjectsIdBoardsBoardIdListsListIdRequest, final ApiCallback<ModelList> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdBoardsBoardIdListsListIdValidateBeforeCall(id, boardId, listId, putV3ProjectsIdBoardsBoardIdListsListIdRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdEnvironmentsEnvironmentId
     * @param id The project ID (required)
     * @param environmentId The environment ID (required)
     * @param putV3ProjectsIdEnvironmentsEnvironmentIdRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates an existing environment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdEnvironmentsEnvironmentIdCall(String id, Integer environmentId, PutV3ProjectsIdEnvironmentsEnvironmentIdRequest putV3ProjectsIdEnvironmentsEnvironmentIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdEnvironmentsEnvironmentIdRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/environments/{environment_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "environment_id" + "}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdEnvironmentsEnvironmentIdValidateBeforeCall(String id, Integer environmentId, PutV3ProjectsIdEnvironmentsEnvironmentIdRequest putV3ProjectsIdEnvironmentsEnvironmentIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdEnvironmentsEnvironmentId(Async)");
        }

        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling putV3ProjectsIdEnvironmentsEnvironmentId(Async)");
        }

        return putV3ProjectsIdEnvironmentsEnvironmentIdCall(id, environmentId, putV3ProjectsIdEnvironmentsEnvironmentIdRequest, _callback);

    }

    /**
     * Updates an existing environment
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param environmentId The environment ID (required)
     * @param putV3ProjectsIdEnvironmentsEnvironmentIdRequest  (optional)
     * @return Environment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates an existing environment </td><td>  -  </td></tr>
     </table>
     */
    public Environment putV3ProjectsIdEnvironmentsEnvironmentId(String id, Integer environmentId, PutV3ProjectsIdEnvironmentsEnvironmentIdRequest putV3ProjectsIdEnvironmentsEnvironmentIdRequest) throws ApiException {
        ApiResponse<Environment> localVarResp = putV3ProjectsIdEnvironmentsEnvironmentIdWithHttpInfo(id, environmentId, putV3ProjectsIdEnvironmentsEnvironmentIdRequest);
        return localVarResp.getData();
    }

    /**
     * Updates an existing environment
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param environmentId The environment ID (required)
     * @param putV3ProjectsIdEnvironmentsEnvironmentIdRequest  (optional)
     * @return ApiResponse&lt;Environment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates an existing environment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Environment> putV3ProjectsIdEnvironmentsEnvironmentIdWithHttpInfo(String id, Integer environmentId, PutV3ProjectsIdEnvironmentsEnvironmentIdRequest putV3ProjectsIdEnvironmentsEnvironmentIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdEnvironmentsEnvironmentIdValidateBeforeCall(id, environmentId, putV3ProjectsIdEnvironmentsEnvironmentIdRequest, null);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an existing environment (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The project ID (required)
     * @param environmentId The environment ID (required)
     * @param putV3ProjectsIdEnvironmentsEnvironmentIdRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates an existing environment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdEnvironmentsEnvironmentIdAsync(String id, Integer environmentId, PutV3ProjectsIdEnvironmentsEnvironmentIdRequest putV3ProjectsIdEnvironmentsEnvironmentIdRequest, final ApiCallback<Environment> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdEnvironmentsEnvironmentIdValidateBeforeCall(id, environmentId, putV3ProjectsIdEnvironmentsEnvironmentIdRequest, _callback);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdHooksHookId
     * @param id The ID of a project (required)
     * @param hookId The ID of the hook to update (required)
     * @param postV3ProjectsIdHooksRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing project hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdHooksHookIdCall(String id, Integer hookId, PostV3ProjectsIdHooksRequest postV3ProjectsIdHooksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3ProjectsIdHooksRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/hooks/{hook_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdHooksHookIdValidateBeforeCall(String id, Integer hookId, PostV3ProjectsIdHooksRequest postV3ProjectsIdHooksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdHooksHookId(Async)");
        }

        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling putV3ProjectsIdHooksHookId(Async)");
        }

        // verify the required parameter 'postV3ProjectsIdHooksRequest' is set
        if (postV3ProjectsIdHooksRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3ProjectsIdHooksRequest' when calling putV3ProjectsIdHooksHookId(Async)");
        }

        return putV3ProjectsIdHooksHookIdCall(id, hookId, postV3ProjectsIdHooksRequest, _callback);

    }

    /**
     * Update an existing project hook
     * Update an existing project hook
     * @param id The ID of a project (required)
     * @param hookId The ID of the hook to update (required)
     * @param postV3ProjectsIdHooksRequest  (required)
     * @return ProjectHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing project hook </td><td>  -  </td></tr>
     </table>
     */
    public ProjectHook putV3ProjectsIdHooksHookId(String id, Integer hookId, PostV3ProjectsIdHooksRequest postV3ProjectsIdHooksRequest) throws ApiException {
        ApiResponse<ProjectHook> localVarResp = putV3ProjectsIdHooksHookIdWithHttpInfo(id, hookId, postV3ProjectsIdHooksRequest);
        return localVarResp.getData();
    }

    /**
     * Update an existing project hook
     * Update an existing project hook
     * @param id The ID of a project (required)
     * @param hookId The ID of the hook to update (required)
     * @param postV3ProjectsIdHooksRequest  (required)
     * @return ApiResponse&lt;ProjectHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing project hook </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectHook> putV3ProjectsIdHooksHookIdWithHttpInfo(String id, Integer hookId, PostV3ProjectsIdHooksRequest postV3ProjectsIdHooksRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdHooksHookIdValidateBeforeCall(id, hookId, postV3ProjectsIdHooksRequest, null);
        Type localVarReturnType = new TypeToken<ProjectHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing project hook (asynchronously)
     * Update an existing project hook
     * @param id The ID of a project (required)
     * @param hookId The ID of the hook to update (required)
     * @param postV3ProjectsIdHooksRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing project hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdHooksHookIdAsync(String id, Integer hookId, PostV3ProjectsIdHooksRequest postV3ProjectsIdHooksRequest, final ApiCallback<ProjectHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdHooksHookIdValidateBeforeCall(id, hookId, postV3ProjectsIdHooksRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdIssuesIssueId
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param putV3ProjectsIdIssuesIssueIdRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdIssuesIssueIdCall(String id, Integer issueId, PutV3ProjectsIdIssuesIssueIdRequest putV3ProjectsIdIssuesIssueIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdIssuesIssueIdRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{issue_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdIssuesIssueIdValidateBeforeCall(String id, Integer issueId, PutV3ProjectsIdIssuesIssueIdRequest putV3ProjectsIdIssuesIssueIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdIssuesIssueId(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling putV3ProjectsIdIssuesIssueId(Async)");
        }

        return putV3ProjectsIdIssuesIssueIdCall(id, issueId, putV3ProjectsIdIssuesIssueIdRequest, _callback);

    }

    /**
     * Update an existing issue
     * Update an existing issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param putV3ProjectsIdIssuesIssueIdRequest  (optional)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing issue </td><td>  -  </td></tr>
     </table>
     */
    public Issue putV3ProjectsIdIssuesIssueId(String id, Integer issueId, PutV3ProjectsIdIssuesIssueIdRequest putV3ProjectsIdIssuesIssueIdRequest) throws ApiException {
        ApiResponse<Issue> localVarResp = putV3ProjectsIdIssuesIssueIdWithHttpInfo(id, issueId, putV3ProjectsIdIssuesIssueIdRequest);
        return localVarResp.getData();
    }

    /**
     * Update an existing issue
     * Update an existing issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param putV3ProjectsIdIssuesIssueIdRequest  (optional)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing issue </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Issue> putV3ProjectsIdIssuesIssueIdWithHttpInfo(String id, Integer issueId, PutV3ProjectsIdIssuesIssueIdRequest putV3ProjectsIdIssuesIssueIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdIssuesIssueIdValidateBeforeCall(id, issueId, putV3ProjectsIdIssuesIssueIdRequest, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing issue (asynchronously)
     * Update an existing issue
     * @param id The ID of a project (required)
     * @param issueId The ID of a project issue (required)
     * @param putV3ProjectsIdIssuesIssueIdRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing issue </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdIssuesIssueIdAsync(String id, Integer issueId, PutV3ProjectsIdIssuesIssueIdRequest putV3ProjectsIdIssuesIssueIdRequest, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdIssuesIssueIdValidateBeforeCall(id, issueId, putV3ProjectsIdIssuesIssueIdRequest, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdIssuesNoteableIdNotesNoteId
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdIssuesNoteableIdNotesNoteIdCall(String id, Integer noteableId, Integer noteId, PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/issues/{noteable_id}/notes/{note_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "noteable_id" + "}", localVarApiClient.escapeString(noteableId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdIssuesNoteableIdNotesNoteIdValidateBeforeCall(String id, Integer noteableId, Integer noteId, PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdIssuesNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteableId' is set
        if (noteableId == null) {
            throw new ApiException("Missing the required parameter 'noteableId' when calling putV3ProjectsIdIssuesNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling putV3ProjectsIdIssuesNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest' is set
        if (putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest' when calling putV3ProjectsIdIssuesNoteableIdNotesNoteId(Async)");
        }

        return putV3ProjectsIdIssuesNoteableIdNotesNoteIdCall(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, _callback);

    }

    /**
     * Update an existing +noteable+ note
     * Update an existing +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest  (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public Note putV3ProjectsIdIssuesNoteableIdNotesNoteId(String id, Integer noteableId, Integer noteId, PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest) throws ApiException {
        ApiResponse<Note> localVarResp = putV3ProjectsIdIssuesNoteableIdNotesNoteIdWithHttpInfo(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest);
        return localVarResp.getData();
    }

    /**
     * Update an existing +noteable+ note
     * Update an existing +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest  (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> putV3ProjectsIdIssuesNoteableIdNotesNoteIdWithHttpInfo(String id, Integer noteableId, Integer noteId, PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdIssuesNoteableIdNotesNoteIdValidateBeforeCall(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing +noteable+ note (asynchronously)
     * Update an existing +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdIssuesNoteableIdNotesNoteIdAsync(String id, Integer noteableId, Integer noteId, PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdIssuesNoteableIdNotesNoteIdValidateBeforeCall(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdLabels
     * @param id The ID of a project (required)
     * @param putV3ProjectsIdLabelsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing label. At least one optional parameter is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdLabelsCall(String id, PutV3ProjectsIdLabelsRequest putV3ProjectsIdLabelsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdLabelsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/labels"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdLabelsValidateBeforeCall(String id, PutV3ProjectsIdLabelsRequest putV3ProjectsIdLabelsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdLabels(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdLabelsRequest' is set
        if (putV3ProjectsIdLabelsRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdLabelsRequest' when calling putV3ProjectsIdLabels(Async)");
        }

        return putV3ProjectsIdLabelsCall(id, putV3ProjectsIdLabelsRequest, _callback);

    }

    /**
     * Update an existing label. At least one optional parameter is required.
     * Update an existing label. At least one optional parameter is required.
     * @param id The ID of a project (required)
     * @param putV3ProjectsIdLabelsRequest  (required)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing label. At least one optional parameter is required. </td><td>  -  </td></tr>
     </table>
     */
    public Label putV3ProjectsIdLabels(String id, PutV3ProjectsIdLabelsRequest putV3ProjectsIdLabelsRequest) throws ApiException {
        ApiResponse<Label> localVarResp = putV3ProjectsIdLabelsWithHttpInfo(id, putV3ProjectsIdLabelsRequest);
        return localVarResp.getData();
    }

    /**
     * Update an existing label. At least one optional parameter is required.
     * Update an existing label. At least one optional parameter is required.
     * @param id The ID of a project (required)
     * @param putV3ProjectsIdLabelsRequest  (required)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing label. At least one optional parameter is required. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Label> putV3ProjectsIdLabelsWithHttpInfo(String id, PutV3ProjectsIdLabelsRequest putV3ProjectsIdLabelsRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdLabelsValidateBeforeCall(id, putV3ProjectsIdLabelsRequest, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing label. At least one optional parameter is required. (asynchronously)
     * Update an existing label. At least one optional parameter is required.
     * @param id The ID of a project (required)
     * @param putV3ProjectsIdLabelsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing label. At least one optional parameter is required. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdLabelsAsync(String id, PutV3ProjectsIdLabelsRequest putV3ProjectsIdLabelsRequest, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdLabelsValidateBeforeCall(id, putV3ProjectsIdLabelsRequest, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdMembersUserId
     * @param id The project ID (required)
     * @param userId The user ID of the new member (required)
     * @param putV3GroupsIdMembersUserIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates a member of a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdMembersUserIdCall(String id, Integer userId, PutV3GroupsIdMembersUserIdRequest putV3GroupsIdMembersUserIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3GroupsIdMembersUserIdRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/members/{user_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdMembersUserIdValidateBeforeCall(String id, Integer userId, PutV3GroupsIdMembersUserIdRequest putV3GroupsIdMembersUserIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdMembersUserId(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling putV3ProjectsIdMembersUserId(Async)");
        }

        // verify the required parameter 'putV3GroupsIdMembersUserIdRequest' is set
        if (putV3GroupsIdMembersUserIdRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3GroupsIdMembersUserIdRequest' when calling putV3ProjectsIdMembersUserId(Async)");
        }

        return putV3ProjectsIdMembersUserIdCall(id, userId, putV3GroupsIdMembersUserIdRequest, _callback);

    }

    /**
     * Updates a member of a group or project.
     * Updates a member of a group or project.
     * @param id The project ID (required)
     * @param userId The user ID of the new member (required)
     * @param putV3GroupsIdMembersUserIdRequest  (required)
     * @return Member
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates a member of a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public Member putV3ProjectsIdMembersUserId(String id, Integer userId, PutV3GroupsIdMembersUserIdRequest putV3GroupsIdMembersUserIdRequest) throws ApiException {
        ApiResponse<Member> localVarResp = putV3ProjectsIdMembersUserIdWithHttpInfo(id, userId, putV3GroupsIdMembersUserIdRequest);
        return localVarResp.getData();
    }

    /**
     * Updates a member of a group or project.
     * Updates a member of a group or project.
     * @param id The project ID (required)
     * @param userId The user ID of the new member (required)
     * @param putV3GroupsIdMembersUserIdRequest  (required)
     * @return ApiResponse&lt;Member&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates a member of a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Member> putV3ProjectsIdMembersUserIdWithHttpInfo(String id, Integer userId, PutV3GroupsIdMembersUserIdRequest putV3GroupsIdMembersUserIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdMembersUserIdValidateBeforeCall(id, userId, putV3GroupsIdMembersUserIdRequest, null);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a member of a group or project. (asynchronously)
     * Updates a member of a group or project.
     * @param id The project ID (required)
     * @param userId The user ID of the new member (required)
     * @param putV3GroupsIdMembersUserIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates a member of a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdMembersUserIdAsync(String id, Integer userId, PutV3GroupsIdMembersUserIdRequest putV3GroupsIdMembersUserIdRequest, final ApiCallback<Member> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdMembersUserIdValidateBeforeCall(id, userId, putV3GroupsIdMembersUserIdRequest, _callback);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdMergeRequestMergeRequestId
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param putV3ProjectsIdMergeRequestMergeRequestIdRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdMergeRequestMergeRequestIdCall(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdRequest putV3ProjectsIdMergeRequestMergeRequestIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdMergeRequestMergeRequestIdRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_request/{merge_request_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdMergeRequestMergeRequestIdValidateBeforeCall(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdRequest putV3ProjectsIdMergeRequestMergeRequestIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdMergeRequestMergeRequestId(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling putV3ProjectsIdMergeRequestMergeRequestId(Async)");
        }

        return putV3ProjectsIdMergeRequestMergeRequestIdCall(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdRequest, _callback);

    }

    /**
     * Update a merge request
     * Update a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param putV3ProjectsIdMergeRequestMergeRequestIdRequest  (optional)
     * @return MergeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a merge request </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequest putV3ProjectsIdMergeRequestMergeRequestId(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdRequest putV3ProjectsIdMergeRequestMergeRequestIdRequest) throws ApiException {
        ApiResponse<MergeRequest> localVarResp = putV3ProjectsIdMergeRequestMergeRequestIdWithHttpInfo(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdRequest);
        return localVarResp.getData();
    }

    /**
     * Update a merge request
     * Update a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param putV3ProjectsIdMergeRequestMergeRequestIdRequest  (optional)
     * @return ApiResponse&lt;MergeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a merge request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequest> putV3ProjectsIdMergeRequestMergeRequestIdWithHttpInfo(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdRequest putV3ProjectsIdMergeRequestMergeRequestIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdMergeRequestMergeRequestIdValidateBeforeCall(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdRequest, null);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a merge request (asynchronously)
     * Update a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param putV3ProjectsIdMergeRequestMergeRequestIdRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdMergeRequestMergeRequestIdAsync(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdRequest putV3ProjectsIdMergeRequestMergeRequestIdRequest, final ApiCallback<MergeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdMergeRequestMergeRequestIdValidateBeforeCall(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdRequest, _callback);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdMergeRequestMergeRequestIdMerge
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Merge a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdMergeRequestMergeRequestIdMergeCall(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_request/{merge_request_id}/merge"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdMergeRequestMergeRequestIdMergeValidateBeforeCall(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdMergeRequestMergeRequestIdMerge(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling putV3ProjectsIdMergeRequestMergeRequestIdMerge(Async)");
        }

        return putV3ProjectsIdMergeRequestMergeRequestIdMergeCall(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest, _callback);

    }

    /**
     * Merge a merge request
     * Merge a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest  (optional)
     * @return MergeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Merge a merge request </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequest putV3ProjectsIdMergeRequestMergeRequestIdMerge(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest) throws ApiException {
        ApiResponse<MergeRequest> localVarResp = putV3ProjectsIdMergeRequestMergeRequestIdMergeWithHttpInfo(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest);
        return localVarResp.getData();
    }

    /**
     * Merge a merge request
     * Merge a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest  (optional)
     * @return ApiResponse&lt;MergeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Merge a merge request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequest> putV3ProjectsIdMergeRequestMergeRequestIdMergeWithHttpInfo(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdMergeRequestMergeRequestIdMergeValidateBeforeCall(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest, null);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Merge a merge request (asynchronously)
     * Merge a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Merge a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdMergeRequestMergeRequestIdMergeAsync(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest, final ApiCallback<MergeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdMergeRequestMergeRequestIdMergeValidateBeforeCall(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest, _callback);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdMergeRequestsMergeRequestId
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param putV3ProjectsIdMergeRequestMergeRequestIdRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdMergeRequestsMergeRequestIdCall(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdRequest putV3ProjectsIdMergeRequestMergeRequestIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdMergeRequestMergeRequestIdRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdMergeRequestsMergeRequestIdValidateBeforeCall(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdRequest putV3ProjectsIdMergeRequestMergeRequestIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdMergeRequestsMergeRequestId(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling putV3ProjectsIdMergeRequestsMergeRequestId(Async)");
        }

        return putV3ProjectsIdMergeRequestsMergeRequestIdCall(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdRequest, _callback);

    }

    /**
     * Update a merge request
     * Update a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param putV3ProjectsIdMergeRequestMergeRequestIdRequest  (optional)
     * @return MergeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a merge request </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequest putV3ProjectsIdMergeRequestsMergeRequestId(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdRequest putV3ProjectsIdMergeRequestMergeRequestIdRequest) throws ApiException {
        ApiResponse<MergeRequest> localVarResp = putV3ProjectsIdMergeRequestsMergeRequestIdWithHttpInfo(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdRequest);
        return localVarResp.getData();
    }

    /**
     * Update a merge request
     * Update a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param putV3ProjectsIdMergeRequestMergeRequestIdRequest  (optional)
     * @return ApiResponse&lt;MergeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a merge request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequest> putV3ProjectsIdMergeRequestsMergeRequestIdWithHttpInfo(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdRequest putV3ProjectsIdMergeRequestMergeRequestIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdMergeRequestsMergeRequestIdValidateBeforeCall(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdRequest, null);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a merge request (asynchronously)
     * Update a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param putV3ProjectsIdMergeRequestMergeRequestIdRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdMergeRequestsMergeRequestIdAsync(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdRequest putV3ProjectsIdMergeRequestMergeRequestIdRequest, final ApiCallback<MergeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdMergeRequestsMergeRequestIdValidateBeforeCall(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdRequest, _callback);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdMergeRequestsMergeRequestIdMerge
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Merge a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdMergeRequestsMergeRequestIdMergeCall(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{merge_request_id}/merge"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "merge_request_id" + "}", localVarApiClient.escapeString(mergeRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdMergeRequestsMergeRequestIdMergeValidateBeforeCall(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdMergeRequestsMergeRequestIdMerge(Async)");
        }

        // verify the required parameter 'mergeRequestId' is set
        if (mergeRequestId == null) {
            throw new ApiException("Missing the required parameter 'mergeRequestId' when calling putV3ProjectsIdMergeRequestsMergeRequestIdMerge(Async)");
        }

        return putV3ProjectsIdMergeRequestsMergeRequestIdMergeCall(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest, _callback);

    }

    /**
     * Merge a merge request
     * Merge a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest  (optional)
     * @return MergeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Merge a merge request </td><td>  -  </td></tr>
     </table>
     */
    public MergeRequest putV3ProjectsIdMergeRequestsMergeRequestIdMerge(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest) throws ApiException {
        ApiResponse<MergeRequest> localVarResp = putV3ProjectsIdMergeRequestsMergeRequestIdMergeWithHttpInfo(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest);
        return localVarResp.getData();
    }

    /**
     * Merge a merge request
     * Merge a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest  (optional)
     * @return ApiResponse&lt;MergeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Merge a merge request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergeRequest> putV3ProjectsIdMergeRequestsMergeRequestIdMergeWithHttpInfo(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdMergeRequestsMergeRequestIdMergeValidateBeforeCall(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest, null);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Merge a merge request (asynchronously)
     * Merge a merge request
     * @param id The ID of a project (required)
     * @param mergeRequestId  (required)
     * @param putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Merge a merge request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdMergeRequestsMergeRequestIdMergeAsync(String id, Integer mergeRequestId, PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest, final ApiCallback<MergeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdMergeRequestsMergeRequestIdMergeValidateBeforeCall(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest, _callback);
        Type localVarReturnType = new TypeToken<MergeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdCall(String id, Integer noteableId, Integer noteId, PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/merge_requests/{noteable_id}/notes/{note_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "noteable_id" + "}", localVarApiClient.escapeString(noteableId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdValidateBeforeCall(String id, Integer noteableId, Integer noteId, PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteableId' is set
        if (noteableId == null) {
            throw new ApiException("Missing the required parameter 'noteableId' when calling putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest' is set
        if (putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest' when calling putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(Async)");
        }

        return putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdCall(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, _callback);

    }

    /**
     * Update an existing +noteable+ note
     * Update an existing +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest  (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public Note putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(String id, Integer noteableId, Integer noteId, PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest) throws ApiException {
        ApiResponse<Note> localVarResp = putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdWithHttpInfo(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest);
        return localVarResp.getData();
    }

    /**
     * Update an existing +noteable+ note
     * Update an existing +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest  (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdWithHttpInfo(String id, Integer noteableId, Integer noteId, PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdValidateBeforeCall(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing +noteable+ note (asynchronously)
     * Update an existing +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdAsync(String id, Integer noteableId, Integer noteId, PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdValidateBeforeCall(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdMilestonesMilestoneId
     * @param id The ID of a project (required)
     * @param milestoneId The ID of a project milestone (required)
     * @param putV3ProjectsIdMilestonesMilestoneIdRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing project milestone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdMilestonesMilestoneIdCall(String id, Integer milestoneId, PutV3ProjectsIdMilestonesMilestoneIdRequest putV3ProjectsIdMilestonesMilestoneIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdMilestonesMilestoneIdRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/milestones/{milestone_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "milestone_id" + "}", localVarApiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdMilestonesMilestoneIdValidateBeforeCall(String id, Integer milestoneId, PutV3ProjectsIdMilestonesMilestoneIdRequest putV3ProjectsIdMilestonesMilestoneIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdMilestonesMilestoneId(Async)");
        }

        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling putV3ProjectsIdMilestonesMilestoneId(Async)");
        }

        return putV3ProjectsIdMilestonesMilestoneIdCall(id, milestoneId, putV3ProjectsIdMilestonesMilestoneIdRequest, _callback);

    }

    /**
     * Update an existing project milestone
     * Update an existing project milestone
     * @param id The ID of a project (required)
     * @param milestoneId The ID of a project milestone (required)
     * @param putV3ProjectsIdMilestonesMilestoneIdRequest  (optional)
     * @return Milestone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing project milestone </td><td>  -  </td></tr>
     </table>
     */
    public Milestone putV3ProjectsIdMilestonesMilestoneId(String id, Integer milestoneId, PutV3ProjectsIdMilestonesMilestoneIdRequest putV3ProjectsIdMilestonesMilestoneIdRequest) throws ApiException {
        ApiResponse<Milestone> localVarResp = putV3ProjectsIdMilestonesMilestoneIdWithHttpInfo(id, milestoneId, putV3ProjectsIdMilestonesMilestoneIdRequest);
        return localVarResp.getData();
    }

    /**
     * Update an existing project milestone
     * Update an existing project milestone
     * @param id The ID of a project (required)
     * @param milestoneId The ID of a project milestone (required)
     * @param putV3ProjectsIdMilestonesMilestoneIdRequest  (optional)
     * @return ApiResponse&lt;Milestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing project milestone </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Milestone> putV3ProjectsIdMilestonesMilestoneIdWithHttpInfo(String id, Integer milestoneId, PutV3ProjectsIdMilestonesMilestoneIdRequest putV3ProjectsIdMilestonesMilestoneIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdMilestonesMilestoneIdValidateBeforeCall(id, milestoneId, putV3ProjectsIdMilestonesMilestoneIdRequest, null);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing project milestone (asynchronously)
     * Update an existing project milestone
     * @param id The ID of a project (required)
     * @param milestoneId The ID of a project milestone (required)
     * @param putV3ProjectsIdMilestonesMilestoneIdRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing project milestone </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdMilestonesMilestoneIdAsync(String id, Integer milestoneId, PutV3ProjectsIdMilestonesMilestoneIdRequest putV3ProjectsIdMilestonesMilestoneIdRequest, final ApiCallback<Milestone> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdMilestonesMilestoneIdValidateBeforeCall(id, milestoneId, putV3ProjectsIdMilestonesMilestoneIdRequest, _callback);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdNotificationSettings
     * @param id The group ID or project ID or project NAMESPACE/PROJECT_NAME (required)
     * @param putV3ProjectsIdNotificationSettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update project level notification level settings, defaults to Global </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdNotificationSettingsCall(String id, PutV3ProjectsIdNotificationSettingsRequest putV3ProjectsIdNotificationSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdNotificationSettingsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/notification_settings"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdNotificationSettingsValidateBeforeCall(String id, PutV3ProjectsIdNotificationSettingsRequest putV3ProjectsIdNotificationSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdNotificationSettings(Async)");
        }

        return putV3ProjectsIdNotificationSettingsCall(id, putV3ProjectsIdNotificationSettingsRequest, _callback);

    }

    /**
     * Update project level notification level settings, defaults to Global
     * This feature was introduced in GitLab 8.12
     * @param id The group ID or project ID or project NAMESPACE/PROJECT_NAME (required)
     * @param putV3ProjectsIdNotificationSettingsRequest  (optional)
     * @return NotificationSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update project level notification level settings, defaults to Global </td><td>  -  </td></tr>
     </table>
     */
    public NotificationSetting putV3ProjectsIdNotificationSettings(String id, PutV3ProjectsIdNotificationSettingsRequest putV3ProjectsIdNotificationSettingsRequest) throws ApiException {
        ApiResponse<NotificationSetting> localVarResp = putV3ProjectsIdNotificationSettingsWithHttpInfo(id, putV3ProjectsIdNotificationSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update project level notification level settings, defaults to Global
     * This feature was introduced in GitLab 8.12
     * @param id The group ID or project ID or project NAMESPACE/PROJECT_NAME (required)
     * @param putV3ProjectsIdNotificationSettingsRequest  (optional)
     * @return ApiResponse&lt;NotificationSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update project level notification level settings, defaults to Global </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationSetting> putV3ProjectsIdNotificationSettingsWithHttpInfo(String id, PutV3ProjectsIdNotificationSettingsRequest putV3ProjectsIdNotificationSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdNotificationSettingsValidateBeforeCall(id, putV3ProjectsIdNotificationSettingsRequest, null);
        Type localVarReturnType = new TypeToken<NotificationSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update project level notification level settings, defaults to Global (asynchronously)
     * This feature was introduced in GitLab 8.12
     * @param id The group ID or project ID or project NAMESPACE/PROJECT_NAME (required)
     * @param putV3ProjectsIdNotificationSettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update project level notification level settings, defaults to Global </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdNotificationSettingsAsync(String id, PutV3ProjectsIdNotificationSettingsRequest putV3ProjectsIdNotificationSettingsRequest, final ApiCallback<NotificationSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdNotificationSettingsValidateBeforeCall(id, putV3ProjectsIdNotificationSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<NotificationSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdRepositoryBranchesBranchProtect
     * @param id The ID of a project (required)
     * @param branch The name of the branch (required)
     * @param putV3ProjectsIdRepositoryBranchesBranchProtectRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Protect a single branch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdRepositoryBranchesBranchProtectCall(String id, String branch, PutV3ProjectsIdRepositoryBranchesBranchProtectRequest putV3ProjectsIdRepositoryBranchesBranchProtectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdRepositoryBranchesBranchProtectRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/branches/{branch}/protect"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdRepositoryBranchesBranchProtectValidateBeforeCall(String id, String branch, PutV3ProjectsIdRepositoryBranchesBranchProtectRequest putV3ProjectsIdRepositoryBranchesBranchProtectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdRepositoryBranchesBranchProtect(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling putV3ProjectsIdRepositoryBranchesBranchProtect(Async)");
        }

        return putV3ProjectsIdRepositoryBranchesBranchProtectCall(id, branch, putV3ProjectsIdRepositoryBranchesBranchProtectRequest, _callback);

    }

    /**
     * Protect a single branch
     * Protect a single branch
     * @param id The ID of a project (required)
     * @param branch The name of the branch (required)
     * @param putV3ProjectsIdRepositoryBranchesBranchProtectRequest  (optional)
     * @return RepoBranch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Protect a single branch </td><td>  -  </td></tr>
     </table>
     */
    public RepoBranch putV3ProjectsIdRepositoryBranchesBranchProtect(String id, String branch, PutV3ProjectsIdRepositoryBranchesBranchProtectRequest putV3ProjectsIdRepositoryBranchesBranchProtectRequest) throws ApiException {
        ApiResponse<RepoBranch> localVarResp = putV3ProjectsIdRepositoryBranchesBranchProtectWithHttpInfo(id, branch, putV3ProjectsIdRepositoryBranchesBranchProtectRequest);
        return localVarResp.getData();
    }

    /**
     * Protect a single branch
     * Protect a single branch
     * @param id The ID of a project (required)
     * @param branch The name of the branch (required)
     * @param putV3ProjectsIdRepositoryBranchesBranchProtectRequest  (optional)
     * @return ApiResponse&lt;RepoBranch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Protect a single branch </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepoBranch> putV3ProjectsIdRepositoryBranchesBranchProtectWithHttpInfo(String id, String branch, PutV3ProjectsIdRepositoryBranchesBranchProtectRequest putV3ProjectsIdRepositoryBranchesBranchProtectRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdRepositoryBranchesBranchProtectValidateBeforeCall(id, branch, putV3ProjectsIdRepositoryBranchesBranchProtectRequest, null);
        Type localVarReturnType = new TypeToken<RepoBranch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Protect a single branch (asynchronously)
     * Protect a single branch
     * @param id The ID of a project (required)
     * @param branch The name of the branch (required)
     * @param putV3ProjectsIdRepositoryBranchesBranchProtectRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Protect a single branch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdRepositoryBranchesBranchProtectAsync(String id, String branch, PutV3ProjectsIdRepositoryBranchesBranchProtectRequest putV3ProjectsIdRepositoryBranchesBranchProtectRequest, final ApiCallback<RepoBranch> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdRepositoryBranchesBranchProtectValidateBeforeCall(id, branch, putV3ProjectsIdRepositoryBranchesBranchProtectRequest, _callback);
        Type localVarReturnType = new TypeToken<RepoBranch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdRepositoryBranchesBranchUnprotect
     * @param id The ID of a project (required)
     * @param branch The name of the branch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unprotect a single branch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdRepositoryBranchesBranchUnprotectCall(String id, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/branches/{branch}/unprotect"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdRepositoryBranchesBranchUnprotectValidateBeforeCall(String id, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdRepositoryBranchesBranchUnprotect(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling putV3ProjectsIdRepositoryBranchesBranchUnprotect(Async)");
        }

        return putV3ProjectsIdRepositoryBranchesBranchUnprotectCall(id, branch, _callback);

    }

    /**
     * Unprotect a single branch
     * Unprotect a single branch
     * @param id The ID of a project (required)
     * @param branch The name of the branch (required)
     * @return RepoBranch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unprotect a single branch </td><td>  -  </td></tr>
     </table>
     */
    public RepoBranch putV3ProjectsIdRepositoryBranchesBranchUnprotect(String id, String branch) throws ApiException {
        ApiResponse<RepoBranch> localVarResp = putV3ProjectsIdRepositoryBranchesBranchUnprotectWithHttpInfo(id, branch);
        return localVarResp.getData();
    }

    /**
     * Unprotect a single branch
     * Unprotect a single branch
     * @param id The ID of a project (required)
     * @param branch The name of the branch (required)
     * @return ApiResponse&lt;RepoBranch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unprotect a single branch </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RepoBranch> putV3ProjectsIdRepositoryBranchesBranchUnprotectWithHttpInfo(String id, String branch) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdRepositoryBranchesBranchUnprotectValidateBeforeCall(id, branch, null);
        Type localVarReturnType = new TypeToken<RepoBranch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unprotect a single branch (asynchronously)
     * Unprotect a single branch
     * @param id The ID of a project (required)
     * @param branch The name of the branch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unprotect a single branch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdRepositoryBranchesBranchUnprotectAsync(String id, String branch, final ApiCallback<RepoBranch> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdRepositoryBranchesBranchUnprotectValidateBeforeCall(id, branch, _callback);
        Type localVarReturnType = new TypeToken<RepoBranch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdRepositoryFiles
     * @param id The project ID (required)
     * @param putV3ProjectsIdRepositoryFilesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update existing file in repository </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdRepositoryFilesCall(String id, PutV3ProjectsIdRepositoryFilesRequest putV3ProjectsIdRepositoryFilesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdRepositoryFilesRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/files"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdRepositoryFilesValidateBeforeCall(String id, PutV3ProjectsIdRepositoryFilesRequest putV3ProjectsIdRepositoryFilesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdRepositoryFiles(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdRepositoryFilesRequest' is set
        if (putV3ProjectsIdRepositoryFilesRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdRepositoryFilesRequest' when calling putV3ProjectsIdRepositoryFiles(Async)");
        }

        return putV3ProjectsIdRepositoryFilesCall(id, putV3ProjectsIdRepositoryFilesRequest, _callback);

    }

    /**
     * Update existing file in repository
     * Update existing file in repository
     * @param id The project ID (required)
     * @param putV3ProjectsIdRepositoryFilesRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update existing file in repository </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdRepositoryFiles(String id, PutV3ProjectsIdRepositoryFilesRequest putV3ProjectsIdRepositoryFilesRequest) throws ApiException {
        putV3ProjectsIdRepositoryFilesWithHttpInfo(id, putV3ProjectsIdRepositoryFilesRequest);
    }

    /**
     * Update existing file in repository
     * Update existing file in repository
     * @param id The project ID (required)
     * @param putV3ProjectsIdRepositoryFilesRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update existing file in repository </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdRepositoryFilesWithHttpInfo(String id, PutV3ProjectsIdRepositoryFilesRequest putV3ProjectsIdRepositoryFilesRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdRepositoryFilesValidateBeforeCall(id, putV3ProjectsIdRepositoryFilesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update existing file in repository (asynchronously)
     * Update existing file in repository
     * @param id The project ID (required)
     * @param putV3ProjectsIdRepositoryFilesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update existing file in repository </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdRepositoryFilesAsync(String id, PutV3ProjectsIdRepositoryFilesRequest putV3ProjectsIdRepositoryFilesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdRepositoryFilesValidateBeforeCall(id, putV3ProjectsIdRepositoryFilesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdRepositoryTagsTagNameRelease
     * @param id The ID of a project (required)
     * @param tagName The name of the tag (required)
     * @param putV3ProjectsIdRepositoryTagsTagNameReleaseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a tag&#39;s release note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdRepositoryTagsTagNameReleaseCall(String id, String tagName, PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest putV3ProjectsIdRepositoryTagsTagNameReleaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdRepositoryTagsTagNameReleaseRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/repository/tags/{tag_name}/release"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "tag_name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdRepositoryTagsTagNameReleaseValidateBeforeCall(String id, String tagName, PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest putV3ProjectsIdRepositoryTagsTagNameReleaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdRepositoryTagsTagNameRelease(Async)");
        }

        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling putV3ProjectsIdRepositoryTagsTagNameRelease(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdRepositoryTagsTagNameReleaseRequest' is set
        if (putV3ProjectsIdRepositoryTagsTagNameReleaseRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdRepositoryTagsTagNameReleaseRequest' when calling putV3ProjectsIdRepositoryTagsTagNameRelease(Async)");
        }

        return putV3ProjectsIdRepositoryTagsTagNameReleaseCall(id, tagName, putV3ProjectsIdRepositoryTagsTagNameReleaseRequest, _callback);

    }

    /**
     * Update a tag&#39;s release note
     * Update a tag&#39;s release note
     * @param id The ID of a project (required)
     * @param tagName The name of the tag (required)
     * @param putV3ProjectsIdRepositoryTagsTagNameReleaseRequest  (required)
     * @return Release
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a tag&#39;s release note </td><td>  -  </td></tr>
     </table>
     */
    public Release putV3ProjectsIdRepositoryTagsTagNameRelease(String id, String tagName, PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest putV3ProjectsIdRepositoryTagsTagNameReleaseRequest) throws ApiException {
        ApiResponse<Release> localVarResp = putV3ProjectsIdRepositoryTagsTagNameReleaseWithHttpInfo(id, tagName, putV3ProjectsIdRepositoryTagsTagNameReleaseRequest);
        return localVarResp.getData();
    }

    /**
     * Update a tag&#39;s release note
     * Update a tag&#39;s release note
     * @param id The ID of a project (required)
     * @param tagName The name of the tag (required)
     * @param putV3ProjectsIdRepositoryTagsTagNameReleaseRequest  (required)
     * @return ApiResponse&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a tag&#39;s release note </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Release> putV3ProjectsIdRepositoryTagsTagNameReleaseWithHttpInfo(String id, String tagName, PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest putV3ProjectsIdRepositoryTagsTagNameReleaseRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdRepositoryTagsTagNameReleaseValidateBeforeCall(id, tagName, putV3ProjectsIdRepositoryTagsTagNameReleaseRequest, null);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a tag&#39;s release note (asynchronously)
     * Update a tag&#39;s release note
     * @param id The ID of a project (required)
     * @param tagName The name of the tag (required)
     * @param putV3ProjectsIdRepositoryTagsTagNameReleaseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a tag&#39;s release note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdRepositoryTagsTagNameReleaseAsync(String id, String tagName, PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest putV3ProjectsIdRepositoryTagsTagNameReleaseRequest, final ApiCallback<Release> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdRepositoryTagsTagNameReleaseValidateBeforeCall(id, tagName, putV3ProjectsIdRepositoryTagsTagNameReleaseRequest, _callback);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesAsana
     * @param id  (required)
     * @param putV3ProjectsIdServicesAsanaRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set asana service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesAsanaCall(Integer id, PutV3ProjectsIdServicesAsanaRequest putV3ProjectsIdServicesAsanaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesAsanaRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/asana"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesAsanaValidateBeforeCall(Integer id, PutV3ProjectsIdServicesAsanaRequest putV3ProjectsIdServicesAsanaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesAsana(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesAsanaRequest' is set
        if (putV3ProjectsIdServicesAsanaRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesAsanaRequest' when calling putV3ProjectsIdServicesAsana(Async)");
        }

        return putV3ProjectsIdServicesAsanaCall(id, putV3ProjectsIdServicesAsanaRequest, _callback);

    }

    /**
     * Set asana service for project
     * Set asana service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesAsanaRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set asana service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesAsana(Integer id, PutV3ProjectsIdServicesAsanaRequest putV3ProjectsIdServicesAsanaRequest) throws ApiException {
        putV3ProjectsIdServicesAsanaWithHttpInfo(id, putV3ProjectsIdServicesAsanaRequest);
    }

    /**
     * Set asana service for project
     * Set asana service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesAsanaRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set asana service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesAsanaWithHttpInfo(Integer id, PutV3ProjectsIdServicesAsanaRequest putV3ProjectsIdServicesAsanaRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesAsanaValidateBeforeCall(id, putV3ProjectsIdServicesAsanaRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set asana service for project (asynchronously)
     * Set asana service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesAsanaRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set asana service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesAsanaAsync(Integer id, PutV3ProjectsIdServicesAsanaRequest putV3ProjectsIdServicesAsanaRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesAsanaValidateBeforeCall(id, putV3ProjectsIdServicesAsanaRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesAssembla
     * @param id  (required)
     * @param putV3ProjectsIdServicesAssemblaRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set assembla service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesAssemblaCall(Integer id, PutV3ProjectsIdServicesAssemblaRequest putV3ProjectsIdServicesAssemblaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesAssemblaRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/assembla"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesAssemblaValidateBeforeCall(Integer id, PutV3ProjectsIdServicesAssemblaRequest putV3ProjectsIdServicesAssemblaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesAssembla(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesAssemblaRequest' is set
        if (putV3ProjectsIdServicesAssemblaRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesAssemblaRequest' when calling putV3ProjectsIdServicesAssembla(Async)");
        }

        return putV3ProjectsIdServicesAssemblaCall(id, putV3ProjectsIdServicesAssemblaRequest, _callback);

    }

    /**
     * Set assembla service for project
     * Set assembla service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesAssemblaRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set assembla service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesAssembla(Integer id, PutV3ProjectsIdServicesAssemblaRequest putV3ProjectsIdServicesAssemblaRequest) throws ApiException {
        putV3ProjectsIdServicesAssemblaWithHttpInfo(id, putV3ProjectsIdServicesAssemblaRequest);
    }

    /**
     * Set assembla service for project
     * Set assembla service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesAssemblaRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set assembla service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesAssemblaWithHttpInfo(Integer id, PutV3ProjectsIdServicesAssemblaRequest putV3ProjectsIdServicesAssemblaRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesAssemblaValidateBeforeCall(id, putV3ProjectsIdServicesAssemblaRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set assembla service for project (asynchronously)
     * Set assembla service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesAssemblaRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set assembla service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesAssemblaAsync(Integer id, PutV3ProjectsIdServicesAssemblaRequest putV3ProjectsIdServicesAssemblaRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesAssemblaValidateBeforeCall(id, putV3ProjectsIdServicesAssemblaRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesBamboo
     * @param id  (required)
     * @param putV3ProjectsIdServicesBambooRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set bamboo service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesBambooCall(Integer id, PutV3ProjectsIdServicesBambooRequest putV3ProjectsIdServicesBambooRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesBambooRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/bamboo"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesBambooValidateBeforeCall(Integer id, PutV3ProjectsIdServicesBambooRequest putV3ProjectsIdServicesBambooRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesBamboo(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesBambooRequest' is set
        if (putV3ProjectsIdServicesBambooRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesBambooRequest' when calling putV3ProjectsIdServicesBamboo(Async)");
        }

        return putV3ProjectsIdServicesBambooCall(id, putV3ProjectsIdServicesBambooRequest, _callback);

    }

    /**
     * Set bamboo service for project
     * Set bamboo service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesBambooRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set bamboo service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesBamboo(Integer id, PutV3ProjectsIdServicesBambooRequest putV3ProjectsIdServicesBambooRequest) throws ApiException {
        putV3ProjectsIdServicesBambooWithHttpInfo(id, putV3ProjectsIdServicesBambooRequest);
    }

    /**
     * Set bamboo service for project
     * Set bamboo service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesBambooRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set bamboo service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesBambooWithHttpInfo(Integer id, PutV3ProjectsIdServicesBambooRequest putV3ProjectsIdServicesBambooRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesBambooValidateBeforeCall(id, putV3ProjectsIdServicesBambooRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set bamboo service for project (asynchronously)
     * Set bamboo service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesBambooRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set bamboo service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesBambooAsync(Integer id, PutV3ProjectsIdServicesBambooRequest putV3ProjectsIdServicesBambooRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesBambooValidateBeforeCall(id, putV3ProjectsIdServicesBambooRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesBugzilla
     * @param id  (required)
     * @param putV3ProjectsIdServicesBugzillaRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set bugzilla service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesBugzillaCall(Integer id, PutV3ProjectsIdServicesBugzillaRequest putV3ProjectsIdServicesBugzillaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesBugzillaRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/bugzilla"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesBugzillaValidateBeforeCall(Integer id, PutV3ProjectsIdServicesBugzillaRequest putV3ProjectsIdServicesBugzillaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesBugzilla(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesBugzillaRequest' is set
        if (putV3ProjectsIdServicesBugzillaRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesBugzillaRequest' when calling putV3ProjectsIdServicesBugzilla(Async)");
        }

        return putV3ProjectsIdServicesBugzillaCall(id, putV3ProjectsIdServicesBugzillaRequest, _callback);

    }

    /**
     * Set bugzilla service for project
     * Set bugzilla service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesBugzillaRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set bugzilla service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesBugzilla(Integer id, PutV3ProjectsIdServicesBugzillaRequest putV3ProjectsIdServicesBugzillaRequest) throws ApiException {
        putV3ProjectsIdServicesBugzillaWithHttpInfo(id, putV3ProjectsIdServicesBugzillaRequest);
    }

    /**
     * Set bugzilla service for project
     * Set bugzilla service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesBugzillaRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set bugzilla service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesBugzillaWithHttpInfo(Integer id, PutV3ProjectsIdServicesBugzillaRequest putV3ProjectsIdServicesBugzillaRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesBugzillaValidateBeforeCall(id, putV3ProjectsIdServicesBugzillaRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set bugzilla service for project (asynchronously)
     * Set bugzilla service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesBugzillaRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set bugzilla service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesBugzillaAsync(Integer id, PutV3ProjectsIdServicesBugzillaRequest putV3ProjectsIdServicesBugzillaRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesBugzillaValidateBeforeCall(id, putV3ProjectsIdServicesBugzillaRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesBuildkite
     * @param id  (required)
     * @param putV3ProjectsIdServicesBuildkiteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set buildkite service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesBuildkiteCall(Integer id, PutV3ProjectsIdServicesBuildkiteRequest putV3ProjectsIdServicesBuildkiteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesBuildkiteRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/buildkite"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesBuildkiteValidateBeforeCall(Integer id, PutV3ProjectsIdServicesBuildkiteRequest putV3ProjectsIdServicesBuildkiteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesBuildkite(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesBuildkiteRequest' is set
        if (putV3ProjectsIdServicesBuildkiteRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesBuildkiteRequest' when calling putV3ProjectsIdServicesBuildkite(Async)");
        }

        return putV3ProjectsIdServicesBuildkiteCall(id, putV3ProjectsIdServicesBuildkiteRequest, _callback);

    }

    /**
     * Set buildkite service for project
     * Set buildkite service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesBuildkiteRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set buildkite service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesBuildkite(Integer id, PutV3ProjectsIdServicesBuildkiteRequest putV3ProjectsIdServicesBuildkiteRequest) throws ApiException {
        putV3ProjectsIdServicesBuildkiteWithHttpInfo(id, putV3ProjectsIdServicesBuildkiteRequest);
    }

    /**
     * Set buildkite service for project
     * Set buildkite service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesBuildkiteRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set buildkite service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesBuildkiteWithHttpInfo(Integer id, PutV3ProjectsIdServicesBuildkiteRequest putV3ProjectsIdServicesBuildkiteRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesBuildkiteValidateBeforeCall(id, putV3ProjectsIdServicesBuildkiteRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set buildkite service for project (asynchronously)
     * Set buildkite service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesBuildkiteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set buildkite service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesBuildkiteAsync(Integer id, PutV3ProjectsIdServicesBuildkiteRequest putV3ProjectsIdServicesBuildkiteRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesBuildkiteValidateBeforeCall(id, putV3ProjectsIdServicesBuildkiteRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesBuildsEmail
     * @param id  (required)
     * @param putV3ProjectsIdServicesBuildsEmailRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set builds-email service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesBuildsEmailCall(Integer id, PutV3ProjectsIdServicesBuildsEmailRequest putV3ProjectsIdServicesBuildsEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesBuildsEmailRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/builds-email"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesBuildsEmailValidateBeforeCall(Integer id, PutV3ProjectsIdServicesBuildsEmailRequest putV3ProjectsIdServicesBuildsEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesBuildsEmail(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesBuildsEmailRequest' is set
        if (putV3ProjectsIdServicesBuildsEmailRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesBuildsEmailRequest' when calling putV3ProjectsIdServicesBuildsEmail(Async)");
        }

        return putV3ProjectsIdServicesBuildsEmailCall(id, putV3ProjectsIdServicesBuildsEmailRequest, _callback);

    }

    /**
     * Set builds-email service for project
     * Set builds-email service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesBuildsEmailRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set builds-email service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesBuildsEmail(Integer id, PutV3ProjectsIdServicesBuildsEmailRequest putV3ProjectsIdServicesBuildsEmailRequest) throws ApiException {
        putV3ProjectsIdServicesBuildsEmailWithHttpInfo(id, putV3ProjectsIdServicesBuildsEmailRequest);
    }

    /**
     * Set builds-email service for project
     * Set builds-email service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesBuildsEmailRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set builds-email service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesBuildsEmailWithHttpInfo(Integer id, PutV3ProjectsIdServicesBuildsEmailRequest putV3ProjectsIdServicesBuildsEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesBuildsEmailValidateBeforeCall(id, putV3ProjectsIdServicesBuildsEmailRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set builds-email service for project (asynchronously)
     * Set builds-email service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesBuildsEmailRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set builds-email service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesBuildsEmailAsync(Integer id, PutV3ProjectsIdServicesBuildsEmailRequest putV3ProjectsIdServicesBuildsEmailRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesBuildsEmailValidateBeforeCall(id, putV3ProjectsIdServicesBuildsEmailRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesCampfire
     * @param id  (required)
     * @param putV3ProjectsIdServicesCampfireRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set campfire service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesCampfireCall(Integer id, PutV3ProjectsIdServicesCampfireRequest putV3ProjectsIdServicesCampfireRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesCampfireRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/campfire"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesCampfireValidateBeforeCall(Integer id, PutV3ProjectsIdServicesCampfireRequest putV3ProjectsIdServicesCampfireRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesCampfire(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesCampfireRequest' is set
        if (putV3ProjectsIdServicesCampfireRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesCampfireRequest' when calling putV3ProjectsIdServicesCampfire(Async)");
        }

        return putV3ProjectsIdServicesCampfireCall(id, putV3ProjectsIdServicesCampfireRequest, _callback);

    }

    /**
     * Set campfire service for project
     * Set campfire service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesCampfireRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set campfire service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesCampfire(Integer id, PutV3ProjectsIdServicesCampfireRequest putV3ProjectsIdServicesCampfireRequest) throws ApiException {
        putV3ProjectsIdServicesCampfireWithHttpInfo(id, putV3ProjectsIdServicesCampfireRequest);
    }

    /**
     * Set campfire service for project
     * Set campfire service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesCampfireRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set campfire service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesCampfireWithHttpInfo(Integer id, PutV3ProjectsIdServicesCampfireRequest putV3ProjectsIdServicesCampfireRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesCampfireValidateBeforeCall(id, putV3ProjectsIdServicesCampfireRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set campfire service for project (asynchronously)
     * Set campfire service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesCampfireRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set campfire service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesCampfireAsync(Integer id, PutV3ProjectsIdServicesCampfireRequest putV3ProjectsIdServicesCampfireRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesCampfireValidateBeforeCall(id, putV3ProjectsIdServicesCampfireRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesCustomIssueTracker
     * @param id  (required)
     * @param putV3ProjectsIdServicesBugzillaRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set custom-issue-tracker service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesCustomIssueTrackerCall(Integer id, PutV3ProjectsIdServicesBugzillaRequest putV3ProjectsIdServicesBugzillaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesBugzillaRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/custom-issue-tracker"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesCustomIssueTrackerValidateBeforeCall(Integer id, PutV3ProjectsIdServicesBugzillaRequest putV3ProjectsIdServicesBugzillaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesCustomIssueTracker(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesBugzillaRequest' is set
        if (putV3ProjectsIdServicesBugzillaRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesBugzillaRequest' when calling putV3ProjectsIdServicesCustomIssueTracker(Async)");
        }

        return putV3ProjectsIdServicesCustomIssueTrackerCall(id, putV3ProjectsIdServicesBugzillaRequest, _callback);

    }

    /**
     * Set custom-issue-tracker service for project
     * Set custom-issue-tracker service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesBugzillaRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set custom-issue-tracker service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesCustomIssueTracker(Integer id, PutV3ProjectsIdServicesBugzillaRequest putV3ProjectsIdServicesBugzillaRequest) throws ApiException {
        putV3ProjectsIdServicesCustomIssueTrackerWithHttpInfo(id, putV3ProjectsIdServicesBugzillaRequest);
    }

    /**
     * Set custom-issue-tracker service for project
     * Set custom-issue-tracker service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesBugzillaRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set custom-issue-tracker service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesCustomIssueTrackerWithHttpInfo(Integer id, PutV3ProjectsIdServicesBugzillaRequest putV3ProjectsIdServicesBugzillaRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesCustomIssueTrackerValidateBeforeCall(id, putV3ProjectsIdServicesBugzillaRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set custom-issue-tracker service for project (asynchronously)
     * Set custom-issue-tracker service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesBugzillaRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set custom-issue-tracker service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesCustomIssueTrackerAsync(Integer id, PutV3ProjectsIdServicesBugzillaRequest putV3ProjectsIdServicesBugzillaRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesCustomIssueTrackerValidateBeforeCall(id, putV3ProjectsIdServicesBugzillaRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesDroneCi
     * @param id  (required)
     * @param putV3ProjectsIdServicesDroneCiRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set drone-ci service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesDroneCiCall(Integer id, PutV3ProjectsIdServicesDroneCiRequest putV3ProjectsIdServicesDroneCiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesDroneCiRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/drone-ci"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesDroneCiValidateBeforeCall(Integer id, PutV3ProjectsIdServicesDroneCiRequest putV3ProjectsIdServicesDroneCiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesDroneCi(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesDroneCiRequest' is set
        if (putV3ProjectsIdServicesDroneCiRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesDroneCiRequest' when calling putV3ProjectsIdServicesDroneCi(Async)");
        }

        return putV3ProjectsIdServicesDroneCiCall(id, putV3ProjectsIdServicesDroneCiRequest, _callback);

    }

    /**
     * Set drone-ci service for project
     * Set drone-ci service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesDroneCiRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set drone-ci service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesDroneCi(Integer id, PutV3ProjectsIdServicesDroneCiRequest putV3ProjectsIdServicesDroneCiRequest) throws ApiException {
        putV3ProjectsIdServicesDroneCiWithHttpInfo(id, putV3ProjectsIdServicesDroneCiRequest);
    }

    /**
     * Set drone-ci service for project
     * Set drone-ci service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesDroneCiRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set drone-ci service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesDroneCiWithHttpInfo(Integer id, PutV3ProjectsIdServicesDroneCiRequest putV3ProjectsIdServicesDroneCiRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesDroneCiValidateBeforeCall(id, putV3ProjectsIdServicesDroneCiRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set drone-ci service for project (asynchronously)
     * Set drone-ci service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesDroneCiRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set drone-ci service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesDroneCiAsync(Integer id, PutV3ProjectsIdServicesDroneCiRequest putV3ProjectsIdServicesDroneCiRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesDroneCiValidateBeforeCall(id, putV3ProjectsIdServicesDroneCiRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesEmailsOnPush
     * @param id  (required)
     * @param putV3ProjectsIdServicesEmailsOnPushRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set emails-on-push service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesEmailsOnPushCall(Integer id, PutV3ProjectsIdServicesEmailsOnPushRequest putV3ProjectsIdServicesEmailsOnPushRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesEmailsOnPushRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/emails-on-push"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesEmailsOnPushValidateBeforeCall(Integer id, PutV3ProjectsIdServicesEmailsOnPushRequest putV3ProjectsIdServicesEmailsOnPushRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesEmailsOnPush(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesEmailsOnPushRequest' is set
        if (putV3ProjectsIdServicesEmailsOnPushRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesEmailsOnPushRequest' when calling putV3ProjectsIdServicesEmailsOnPush(Async)");
        }

        return putV3ProjectsIdServicesEmailsOnPushCall(id, putV3ProjectsIdServicesEmailsOnPushRequest, _callback);

    }

    /**
     * Set emails-on-push service for project
     * Set emails-on-push service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesEmailsOnPushRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set emails-on-push service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesEmailsOnPush(Integer id, PutV3ProjectsIdServicesEmailsOnPushRequest putV3ProjectsIdServicesEmailsOnPushRequest) throws ApiException {
        putV3ProjectsIdServicesEmailsOnPushWithHttpInfo(id, putV3ProjectsIdServicesEmailsOnPushRequest);
    }

    /**
     * Set emails-on-push service for project
     * Set emails-on-push service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesEmailsOnPushRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set emails-on-push service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesEmailsOnPushWithHttpInfo(Integer id, PutV3ProjectsIdServicesEmailsOnPushRequest putV3ProjectsIdServicesEmailsOnPushRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesEmailsOnPushValidateBeforeCall(id, putV3ProjectsIdServicesEmailsOnPushRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set emails-on-push service for project (asynchronously)
     * Set emails-on-push service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesEmailsOnPushRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set emails-on-push service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesEmailsOnPushAsync(Integer id, PutV3ProjectsIdServicesEmailsOnPushRequest putV3ProjectsIdServicesEmailsOnPushRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesEmailsOnPushValidateBeforeCall(id, putV3ProjectsIdServicesEmailsOnPushRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesExternalWiki
     * @param id  (required)
     * @param putV3ProjectsIdServicesExternalWikiRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set external-wiki service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesExternalWikiCall(Integer id, PutV3ProjectsIdServicesExternalWikiRequest putV3ProjectsIdServicesExternalWikiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesExternalWikiRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/external-wiki"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesExternalWikiValidateBeforeCall(Integer id, PutV3ProjectsIdServicesExternalWikiRequest putV3ProjectsIdServicesExternalWikiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesExternalWiki(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesExternalWikiRequest' is set
        if (putV3ProjectsIdServicesExternalWikiRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesExternalWikiRequest' when calling putV3ProjectsIdServicesExternalWiki(Async)");
        }

        return putV3ProjectsIdServicesExternalWikiCall(id, putV3ProjectsIdServicesExternalWikiRequest, _callback);

    }

    /**
     * Set external-wiki service for project
     * Set external-wiki service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesExternalWikiRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set external-wiki service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesExternalWiki(Integer id, PutV3ProjectsIdServicesExternalWikiRequest putV3ProjectsIdServicesExternalWikiRequest) throws ApiException {
        putV3ProjectsIdServicesExternalWikiWithHttpInfo(id, putV3ProjectsIdServicesExternalWikiRequest);
    }

    /**
     * Set external-wiki service for project
     * Set external-wiki service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesExternalWikiRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set external-wiki service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesExternalWikiWithHttpInfo(Integer id, PutV3ProjectsIdServicesExternalWikiRequest putV3ProjectsIdServicesExternalWikiRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesExternalWikiValidateBeforeCall(id, putV3ProjectsIdServicesExternalWikiRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set external-wiki service for project (asynchronously)
     * Set external-wiki service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesExternalWikiRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set external-wiki service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesExternalWikiAsync(Integer id, PutV3ProjectsIdServicesExternalWikiRequest putV3ProjectsIdServicesExternalWikiRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesExternalWikiValidateBeforeCall(id, putV3ProjectsIdServicesExternalWikiRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesFlowdock
     * @param id  (required)
     * @param putV3ProjectsIdServicesFlowdockRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set flowdock service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesFlowdockCall(Integer id, PutV3ProjectsIdServicesFlowdockRequest putV3ProjectsIdServicesFlowdockRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesFlowdockRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/flowdock"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesFlowdockValidateBeforeCall(Integer id, PutV3ProjectsIdServicesFlowdockRequest putV3ProjectsIdServicesFlowdockRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesFlowdock(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesFlowdockRequest' is set
        if (putV3ProjectsIdServicesFlowdockRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesFlowdockRequest' when calling putV3ProjectsIdServicesFlowdock(Async)");
        }

        return putV3ProjectsIdServicesFlowdockCall(id, putV3ProjectsIdServicesFlowdockRequest, _callback);

    }

    /**
     * Set flowdock service for project
     * Set flowdock service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesFlowdockRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set flowdock service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesFlowdock(Integer id, PutV3ProjectsIdServicesFlowdockRequest putV3ProjectsIdServicesFlowdockRequest) throws ApiException {
        putV3ProjectsIdServicesFlowdockWithHttpInfo(id, putV3ProjectsIdServicesFlowdockRequest);
    }

    /**
     * Set flowdock service for project
     * Set flowdock service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesFlowdockRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set flowdock service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesFlowdockWithHttpInfo(Integer id, PutV3ProjectsIdServicesFlowdockRequest putV3ProjectsIdServicesFlowdockRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesFlowdockValidateBeforeCall(id, putV3ProjectsIdServicesFlowdockRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set flowdock service for project (asynchronously)
     * Set flowdock service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesFlowdockRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set flowdock service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesFlowdockAsync(Integer id, PutV3ProjectsIdServicesFlowdockRequest putV3ProjectsIdServicesFlowdockRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesFlowdockValidateBeforeCall(id, putV3ProjectsIdServicesFlowdockRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesGemnasium
     * @param id  (required)
     * @param putV3ProjectsIdServicesGemnasiumRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set gemnasium service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesGemnasiumCall(Integer id, PutV3ProjectsIdServicesGemnasiumRequest putV3ProjectsIdServicesGemnasiumRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesGemnasiumRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/gemnasium"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesGemnasiumValidateBeforeCall(Integer id, PutV3ProjectsIdServicesGemnasiumRequest putV3ProjectsIdServicesGemnasiumRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesGemnasium(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesGemnasiumRequest' is set
        if (putV3ProjectsIdServicesGemnasiumRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesGemnasiumRequest' when calling putV3ProjectsIdServicesGemnasium(Async)");
        }

        return putV3ProjectsIdServicesGemnasiumCall(id, putV3ProjectsIdServicesGemnasiumRequest, _callback);

    }

    /**
     * Set gemnasium service for project
     * Set gemnasium service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesGemnasiumRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set gemnasium service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesGemnasium(Integer id, PutV3ProjectsIdServicesGemnasiumRequest putV3ProjectsIdServicesGemnasiumRequest) throws ApiException {
        putV3ProjectsIdServicesGemnasiumWithHttpInfo(id, putV3ProjectsIdServicesGemnasiumRequest);
    }

    /**
     * Set gemnasium service for project
     * Set gemnasium service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesGemnasiumRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set gemnasium service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesGemnasiumWithHttpInfo(Integer id, PutV3ProjectsIdServicesGemnasiumRequest putV3ProjectsIdServicesGemnasiumRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesGemnasiumValidateBeforeCall(id, putV3ProjectsIdServicesGemnasiumRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set gemnasium service for project (asynchronously)
     * Set gemnasium service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesGemnasiumRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set gemnasium service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesGemnasiumAsync(Integer id, PutV3ProjectsIdServicesGemnasiumRequest putV3ProjectsIdServicesGemnasiumRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesGemnasiumValidateBeforeCall(id, putV3ProjectsIdServicesGemnasiumRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesHipchat
     * @param id  (required)
     * @param putV3ProjectsIdServicesHipchatRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set hipchat service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesHipchatCall(Integer id, PutV3ProjectsIdServicesHipchatRequest putV3ProjectsIdServicesHipchatRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesHipchatRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/hipchat"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesHipchatValidateBeforeCall(Integer id, PutV3ProjectsIdServicesHipchatRequest putV3ProjectsIdServicesHipchatRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesHipchat(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesHipchatRequest' is set
        if (putV3ProjectsIdServicesHipchatRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesHipchatRequest' when calling putV3ProjectsIdServicesHipchat(Async)");
        }

        return putV3ProjectsIdServicesHipchatCall(id, putV3ProjectsIdServicesHipchatRequest, _callback);

    }

    /**
     * Set hipchat service for project
     * Set hipchat service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesHipchatRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set hipchat service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesHipchat(Integer id, PutV3ProjectsIdServicesHipchatRequest putV3ProjectsIdServicesHipchatRequest) throws ApiException {
        putV3ProjectsIdServicesHipchatWithHttpInfo(id, putV3ProjectsIdServicesHipchatRequest);
    }

    /**
     * Set hipchat service for project
     * Set hipchat service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesHipchatRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set hipchat service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesHipchatWithHttpInfo(Integer id, PutV3ProjectsIdServicesHipchatRequest putV3ProjectsIdServicesHipchatRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesHipchatValidateBeforeCall(id, putV3ProjectsIdServicesHipchatRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set hipchat service for project (asynchronously)
     * Set hipchat service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesHipchatRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set hipchat service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesHipchatAsync(Integer id, PutV3ProjectsIdServicesHipchatRequest putV3ProjectsIdServicesHipchatRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesHipchatValidateBeforeCall(id, putV3ProjectsIdServicesHipchatRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesIrker
     * @param id  (required)
     * @param putV3ProjectsIdServicesIrkerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set irker service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesIrkerCall(Integer id, PutV3ProjectsIdServicesIrkerRequest putV3ProjectsIdServicesIrkerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesIrkerRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/irker"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesIrkerValidateBeforeCall(Integer id, PutV3ProjectsIdServicesIrkerRequest putV3ProjectsIdServicesIrkerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesIrker(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesIrkerRequest' is set
        if (putV3ProjectsIdServicesIrkerRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesIrkerRequest' when calling putV3ProjectsIdServicesIrker(Async)");
        }

        return putV3ProjectsIdServicesIrkerCall(id, putV3ProjectsIdServicesIrkerRequest, _callback);

    }

    /**
     * Set irker service for project
     * Set irker service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesIrkerRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set irker service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesIrker(Integer id, PutV3ProjectsIdServicesIrkerRequest putV3ProjectsIdServicesIrkerRequest) throws ApiException {
        putV3ProjectsIdServicesIrkerWithHttpInfo(id, putV3ProjectsIdServicesIrkerRequest);
    }

    /**
     * Set irker service for project
     * Set irker service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesIrkerRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set irker service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesIrkerWithHttpInfo(Integer id, PutV3ProjectsIdServicesIrkerRequest putV3ProjectsIdServicesIrkerRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesIrkerValidateBeforeCall(id, putV3ProjectsIdServicesIrkerRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set irker service for project (asynchronously)
     * Set irker service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesIrkerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set irker service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesIrkerAsync(Integer id, PutV3ProjectsIdServicesIrkerRequest putV3ProjectsIdServicesIrkerRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesIrkerValidateBeforeCall(id, putV3ProjectsIdServicesIrkerRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesJira
     * @param id  (required)
     * @param putV3ProjectsIdServicesJiraRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set jira service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesJiraCall(Integer id, PutV3ProjectsIdServicesJiraRequest putV3ProjectsIdServicesJiraRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesJiraRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/jira"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesJiraValidateBeforeCall(Integer id, PutV3ProjectsIdServicesJiraRequest putV3ProjectsIdServicesJiraRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesJira(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesJiraRequest' is set
        if (putV3ProjectsIdServicesJiraRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesJiraRequest' when calling putV3ProjectsIdServicesJira(Async)");
        }

        return putV3ProjectsIdServicesJiraCall(id, putV3ProjectsIdServicesJiraRequest, _callback);

    }

    /**
     * Set jira service for project
     * Set jira service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesJiraRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set jira service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesJira(Integer id, PutV3ProjectsIdServicesJiraRequest putV3ProjectsIdServicesJiraRequest) throws ApiException {
        putV3ProjectsIdServicesJiraWithHttpInfo(id, putV3ProjectsIdServicesJiraRequest);
    }

    /**
     * Set jira service for project
     * Set jira service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesJiraRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set jira service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesJiraWithHttpInfo(Integer id, PutV3ProjectsIdServicesJiraRequest putV3ProjectsIdServicesJiraRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesJiraValidateBeforeCall(id, putV3ProjectsIdServicesJiraRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set jira service for project (asynchronously)
     * Set jira service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesJiraRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set jira service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesJiraAsync(Integer id, PutV3ProjectsIdServicesJiraRequest putV3ProjectsIdServicesJiraRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesJiraValidateBeforeCall(id, putV3ProjectsIdServicesJiraRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesKubernetes
     * @param id  (required)
     * @param putV3ProjectsIdServicesKubernetesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set kubernetes service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesKubernetesCall(Integer id, PutV3ProjectsIdServicesKubernetesRequest putV3ProjectsIdServicesKubernetesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesKubernetesRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/kubernetes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesKubernetesValidateBeforeCall(Integer id, PutV3ProjectsIdServicesKubernetesRequest putV3ProjectsIdServicesKubernetesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesKubernetes(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesKubernetesRequest' is set
        if (putV3ProjectsIdServicesKubernetesRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesKubernetesRequest' when calling putV3ProjectsIdServicesKubernetes(Async)");
        }

        return putV3ProjectsIdServicesKubernetesCall(id, putV3ProjectsIdServicesKubernetesRequest, _callback);

    }

    /**
     * Set kubernetes service for project
     * Set kubernetes service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesKubernetesRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set kubernetes service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesKubernetes(Integer id, PutV3ProjectsIdServicesKubernetesRequest putV3ProjectsIdServicesKubernetesRequest) throws ApiException {
        putV3ProjectsIdServicesKubernetesWithHttpInfo(id, putV3ProjectsIdServicesKubernetesRequest);
    }

    /**
     * Set kubernetes service for project
     * Set kubernetes service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesKubernetesRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set kubernetes service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesKubernetesWithHttpInfo(Integer id, PutV3ProjectsIdServicesKubernetesRequest putV3ProjectsIdServicesKubernetesRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesKubernetesValidateBeforeCall(id, putV3ProjectsIdServicesKubernetesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set kubernetes service for project (asynchronously)
     * Set kubernetes service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesKubernetesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set kubernetes service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesKubernetesAsync(Integer id, PutV3ProjectsIdServicesKubernetesRequest putV3ProjectsIdServicesKubernetesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesKubernetesValidateBeforeCall(id, putV3ProjectsIdServicesKubernetesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesMattermost
     * @param id  (required)
     * @param putV3ProjectsIdServicesMattermostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set mattermost service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesMattermostCall(Integer id, PutV3ProjectsIdServicesMattermostRequest putV3ProjectsIdServicesMattermostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesMattermostRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/mattermost"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesMattermostValidateBeforeCall(Integer id, PutV3ProjectsIdServicesMattermostRequest putV3ProjectsIdServicesMattermostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesMattermost(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesMattermostRequest' is set
        if (putV3ProjectsIdServicesMattermostRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesMattermostRequest' when calling putV3ProjectsIdServicesMattermost(Async)");
        }

        return putV3ProjectsIdServicesMattermostCall(id, putV3ProjectsIdServicesMattermostRequest, _callback);

    }

    /**
     * Set mattermost service for project
     * Set mattermost service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesMattermostRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set mattermost service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesMattermost(Integer id, PutV3ProjectsIdServicesMattermostRequest putV3ProjectsIdServicesMattermostRequest) throws ApiException {
        putV3ProjectsIdServicesMattermostWithHttpInfo(id, putV3ProjectsIdServicesMattermostRequest);
    }

    /**
     * Set mattermost service for project
     * Set mattermost service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesMattermostRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set mattermost service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesMattermostWithHttpInfo(Integer id, PutV3ProjectsIdServicesMattermostRequest putV3ProjectsIdServicesMattermostRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesMattermostValidateBeforeCall(id, putV3ProjectsIdServicesMattermostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set mattermost service for project (asynchronously)
     * Set mattermost service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesMattermostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set mattermost service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesMattermostAsync(Integer id, PutV3ProjectsIdServicesMattermostRequest putV3ProjectsIdServicesMattermostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesMattermostValidateBeforeCall(id, putV3ProjectsIdServicesMattermostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesMattermostSlashCommands
     * @param id  (required)
     * @param putV3ProjectsIdServicesMattermostSlashCommandsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set mattermost-slash-commands service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesMattermostSlashCommandsCall(Integer id, PutV3ProjectsIdServicesMattermostSlashCommandsRequest putV3ProjectsIdServicesMattermostSlashCommandsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesMattermostSlashCommandsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/mattermost-slash-commands"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesMattermostSlashCommandsValidateBeforeCall(Integer id, PutV3ProjectsIdServicesMattermostSlashCommandsRequest putV3ProjectsIdServicesMattermostSlashCommandsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesMattermostSlashCommands(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesMattermostSlashCommandsRequest' is set
        if (putV3ProjectsIdServicesMattermostSlashCommandsRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesMattermostSlashCommandsRequest' when calling putV3ProjectsIdServicesMattermostSlashCommands(Async)");
        }

        return putV3ProjectsIdServicesMattermostSlashCommandsCall(id, putV3ProjectsIdServicesMattermostSlashCommandsRequest, _callback);

    }

    /**
     * Set mattermost-slash-commands service for project
     * Set mattermost-slash-commands service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesMattermostSlashCommandsRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set mattermost-slash-commands service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesMattermostSlashCommands(Integer id, PutV3ProjectsIdServicesMattermostSlashCommandsRequest putV3ProjectsIdServicesMattermostSlashCommandsRequest) throws ApiException {
        putV3ProjectsIdServicesMattermostSlashCommandsWithHttpInfo(id, putV3ProjectsIdServicesMattermostSlashCommandsRequest);
    }

    /**
     * Set mattermost-slash-commands service for project
     * Set mattermost-slash-commands service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesMattermostSlashCommandsRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set mattermost-slash-commands service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesMattermostSlashCommandsWithHttpInfo(Integer id, PutV3ProjectsIdServicesMattermostSlashCommandsRequest putV3ProjectsIdServicesMattermostSlashCommandsRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesMattermostSlashCommandsValidateBeforeCall(id, putV3ProjectsIdServicesMattermostSlashCommandsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set mattermost-slash-commands service for project (asynchronously)
     * Set mattermost-slash-commands service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesMattermostSlashCommandsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set mattermost-slash-commands service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesMattermostSlashCommandsAsync(Integer id, PutV3ProjectsIdServicesMattermostSlashCommandsRequest putV3ProjectsIdServicesMattermostSlashCommandsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesMattermostSlashCommandsValidateBeforeCall(id, putV3ProjectsIdServicesMattermostSlashCommandsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesPipelinesEmail
     * @param id  (required)
     * @param putV3ProjectsIdServicesPipelinesEmailRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set pipelines-email service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesPipelinesEmailCall(Integer id, PutV3ProjectsIdServicesPipelinesEmailRequest putV3ProjectsIdServicesPipelinesEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesPipelinesEmailRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/pipelines-email"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesPipelinesEmailValidateBeforeCall(Integer id, PutV3ProjectsIdServicesPipelinesEmailRequest putV3ProjectsIdServicesPipelinesEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesPipelinesEmail(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesPipelinesEmailRequest' is set
        if (putV3ProjectsIdServicesPipelinesEmailRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesPipelinesEmailRequest' when calling putV3ProjectsIdServicesPipelinesEmail(Async)");
        }

        return putV3ProjectsIdServicesPipelinesEmailCall(id, putV3ProjectsIdServicesPipelinesEmailRequest, _callback);

    }

    /**
     * Set pipelines-email service for project
     * Set pipelines-email service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesPipelinesEmailRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set pipelines-email service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesPipelinesEmail(Integer id, PutV3ProjectsIdServicesPipelinesEmailRequest putV3ProjectsIdServicesPipelinesEmailRequest) throws ApiException {
        putV3ProjectsIdServicesPipelinesEmailWithHttpInfo(id, putV3ProjectsIdServicesPipelinesEmailRequest);
    }

    /**
     * Set pipelines-email service for project
     * Set pipelines-email service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesPipelinesEmailRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set pipelines-email service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesPipelinesEmailWithHttpInfo(Integer id, PutV3ProjectsIdServicesPipelinesEmailRequest putV3ProjectsIdServicesPipelinesEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesPipelinesEmailValidateBeforeCall(id, putV3ProjectsIdServicesPipelinesEmailRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set pipelines-email service for project (asynchronously)
     * Set pipelines-email service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesPipelinesEmailRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set pipelines-email service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesPipelinesEmailAsync(Integer id, PutV3ProjectsIdServicesPipelinesEmailRequest putV3ProjectsIdServicesPipelinesEmailRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesPipelinesEmailValidateBeforeCall(id, putV3ProjectsIdServicesPipelinesEmailRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesPivotaltracker
     * @param id  (required)
     * @param putV3ProjectsIdServicesPivotaltrackerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set pivotaltracker service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesPivotaltrackerCall(Integer id, PutV3ProjectsIdServicesPivotaltrackerRequest putV3ProjectsIdServicesPivotaltrackerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesPivotaltrackerRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/pivotaltracker"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesPivotaltrackerValidateBeforeCall(Integer id, PutV3ProjectsIdServicesPivotaltrackerRequest putV3ProjectsIdServicesPivotaltrackerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesPivotaltracker(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesPivotaltrackerRequest' is set
        if (putV3ProjectsIdServicesPivotaltrackerRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesPivotaltrackerRequest' when calling putV3ProjectsIdServicesPivotaltracker(Async)");
        }

        return putV3ProjectsIdServicesPivotaltrackerCall(id, putV3ProjectsIdServicesPivotaltrackerRequest, _callback);

    }

    /**
     * Set pivotaltracker service for project
     * Set pivotaltracker service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesPivotaltrackerRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set pivotaltracker service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesPivotaltracker(Integer id, PutV3ProjectsIdServicesPivotaltrackerRequest putV3ProjectsIdServicesPivotaltrackerRequest) throws ApiException {
        putV3ProjectsIdServicesPivotaltrackerWithHttpInfo(id, putV3ProjectsIdServicesPivotaltrackerRequest);
    }

    /**
     * Set pivotaltracker service for project
     * Set pivotaltracker service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesPivotaltrackerRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set pivotaltracker service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesPivotaltrackerWithHttpInfo(Integer id, PutV3ProjectsIdServicesPivotaltrackerRequest putV3ProjectsIdServicesPivotaltrackerRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesPivotaltrackerValidateBeforeCall(id, putV3ProjectsIdServicesPivotaltrackerRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set pivotaltracker service for project (asynchronously)
     * Set pivotaltracker service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesPivotaltrackerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set pivotaltracker service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesPivotaltrackerAsync(Integer id, PutV3ProjectsIdServicesPivotaltrackerRequest putV3ProjectsIdServicesPivotaltrackerRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesPivotaltrackerValidateBeforeCall(id, putV3ProjectsIdServicesPivotaltrackerRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesPushover
     * @param id  (required)
     * @param putV3ProjectsIdServicesPushoverRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set pushover service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesPushoverCall(Integer id, PutV3ProjectsIdServicesPushoverRequest putV3ProjectsIdServicesPushoverRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesPushoverRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/pushover"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesPushoverValidateBeforeCall(Integer id, PutV3ProjectsIdServicesPushoverRequest putV3ProjectsIdServicesPushoverRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesPushover(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesPushoverRequest' is set
        if (putV3ProjectsIdServicesPushoverRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesPushoverRequest' when calling putV3ProjectsIdServicesPushover(Async)");
        }

        return putV3ProjectsIdServicesPushoverCall(id, putV3ProjectsIdServicesPushoverRequest, _callback);

    }

    /**
     * Set pushover service for project
     * Set pushover service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesPushoverRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set pushover service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesPushover(Integer id, PutV3ProjectsIdServicesPushoverRequest putV3ProjectsIdServicesPushoverRequest) throws ApiException {
        putV3ProjectsIdServicesPushoverWithHttpInfo(id, putV3ProjectsIdServicesPushoverRequest);
    }

    /**
     * Set pushover service for project
     * Set pushover service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesPushoverRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set pushover service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesPushoverWithHttpInfo(Integer id, PutV3ProjectsIdServicesPushoverRequest putV3ProjectsIdServicesPushoverRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesPushoverValidateBeforeCall(id, putV3ProjectsIdServicesPushoverRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set pushover service for project (asynchronously)
     * Set pushover service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesPushoverRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set pushover service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesPushoverAsync(Integer id, PutV3ProjectsIdServicesPushoverRequest putV3ProjectsIdServicesPushoverRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesPushoverValidateBeforeCall(id, putV3ProjectsIdServicesPushoverRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesRedmine
     * @param id  (required)
     * @param putV3ProjectsIdServicesRedmineRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set redmine service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesRedmineCall(Integer id, PutV3ProjectsIdServicesRedmineRequest putV3ProjectsIdServicesRedmineRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesRedmineRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/redmine"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesRedmineValidateBeforeCall(Integer id, PutV3ProjectsIdServicesRedmineRequest putV3ProjectsIdServicesRedmineRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesRedmine(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesRedmineRequest' is set
        if (putV3ProjectsIdServicesRedmineRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesRedmineRequest' when calling putV3ProjectsIdServicesRedmine(Async)");
        }

        return putV3ProjectsIdServicesRedmineCall(id, putV3ProjectsIdServicesRedmineRequest, _callback);

    }

    /**
     * Set redmine service for project
     * Set redmine service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesRedmineRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set redmine service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesRedmine(Integer id, PutV3ProjectsIdServicesRedmineRequest putV3ProjectsIdServicesRedmineRequest) throws ApiException {
        putV3ProjectsIdServicesRedmineWithHttpInfo(id, putV3ProjectsIdServicesRedmineRequest);
    }

    /**
     * Set redmine service for project
     * Set redmine service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesRedmineRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set redmine service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesRedmineWithHttpInfo(Integer id, PutV3ProjectsIdServicesRedmineRequest putV3ProjectsIdServicesRedmineRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesRedmineValidateBeforeCall(id, putV3ProjectsIdServicesRedmineRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set redmine service for project (asynchronously)
     * Set redmine service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesRedmineRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set redmine service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesRedmineAsync(Integer id, PutV3ProjectsIdServicesRedmineRequest putV3ProjectsIdServicesRedmineRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesRedmineValidateBeforeCall(id, putV3ProjectsIdServicesRedmineRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesSlack
     * @param id  (required)
     * @param putV3ProjectsIdServicesSlackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set slack service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesSlackCall(Integer id, PutV3ProjectsIdServicesSlackRequest putV3ProjectsIdServicesSlackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesSlackRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/slack"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesSlackValidateBeforeCall(Integer id, PutV3ProjectsIdServicesSlackRequest putV3ProjectsIdServicesSlackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesSlack(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesSlackRequest' is set
        if (putV3ProjectsIdServicesSlackRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesSlackRequest' when calling putV3ProjectsIdServicesSlack(Async)");
        }

        return putV3ProjectsIdServicesSlackCall(id, putV3ProjectsIdServicesSlackRequest, _callback);

    }

    /**
     * Set slack service for project
     * Set slack service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesSlackRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set slack service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesSlack(Integer id, PutV3ProjectsIdServicesSlackRequest putV3ProjectsIdServicesSlackRequest) throws ApiException {
        putV3ProjectsIdServicesSlackWithHttpInfo(id, putV3ProjectsIdServicesSlackRequest);
    }

    /**
     * Set slack service for project
     * Set slack service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesSlackRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set slack service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesSlackWithHttpInfo(Integer id, PutV3ProjectsIdServicesSlackRequest putV3ProjectsIdServicesSlackRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesSlackValidateBeforeCall(id, putV3ProjectsIdServicesSlackRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set slack service for project (asynchronously)
     * Set slack service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesSlackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set slack service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesSlackAsync(Integer id, PutV3ProjectsIdServicesSlackRequest putV3ProjectsIdServicesSlackRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesSlackValidateBeforeCall(id, putV3ProjectsIdServicesSlackRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesSlackSlashCommands
     * @param id  (required)
     * @param putV3ProjectsIdServicesSlackSlashCommandsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set slack-slash-commands service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesSlackSlashCommandsCall(Integer id, PutV3ProjectsIdServicesSlackSlashCommandsRequest putV3ProjectsIdServicesSlackSlashCommandsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesSlackSlashCommandsRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/slack-slash-commands"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesSlackSlashCommandsValidateBeforeCall(Integer id, PutV3ProjectsIdServicesSlackSlashCommandsRequest putV3ProjectsIdServicesSlackSlashCommandsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesSlackSlashCommands(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesSlackSlashCommandsRequest' is set
        if (putV3ProjectsIdServicesSlackSlashCommandsRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesSlackSlashCommandsRequest' when calling putV3ProjectsIdServicesSlackSlashCommands(Async)");
        }

        return putV3ProjectsIdServicesSlackSlashCommandsCall(id, putV3ProjectsIdServicesSlackSlashCommandsRequest, _callback);

    }

    /**
     * Set slack-slash-commands service for project
     * Set slack-slash-commands service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesSlackSlashCommandsRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set slack-slash-commands service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesSlackSlashCommands(Integer id, PutV3ProjectsIdServicesSlackSlashCommandsRequest putV3ProjectsIdServicesSlackSlashCommandsRequest) throws ApiException {
        putV3ProjectsIdServicesSlackSlashCommandsWithHttpInfo(id, putV3ProjectsIdServicesSlackSlashCommandsRequest);
    }

    /**
     * Set slack-slash-commands service for project
     * Set slack-slash-commands service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesSlackSlashCommandsRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set slack-slash-commands service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesSlackSlashCommandsWithHttpInfo(Integer id, PutV3ProjectsIdServicesSlackSlashCommandsRequest putV3ProjectsIdServicesSlackSlashCommandsRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesSlackSlashCommandsValidateBeforeCall(id, putV3ProjectsIdServicesSlackSlashCommandsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set slack-slash-commands service for project (asynchronously)
     * Set slack-slash-commands service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesSlackSlashCommandsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set slack-slash-commands service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesSlackSlashCommandsAsync(Integer id, PutV3ProjectsIdServicesSlackSlashCommandsRequest putV3ProjectsIdServicesSlackSlashCommandsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesSlackSlashCommandsValidateBeforeCall(id, putV3ProjectsIdServicesSlackSlashCommandsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdServicesTeamcity
     * @param id  (required)
     * @param putV3ProjectsIdServicesTeamcityRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set teamcity service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesTeamcityCall(Integer id, PutV3ProjectsIdServicesTeamcityRequest putV3ProjectsIdServicesTeamcityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdServicesTeamcityRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/services/teamcity"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdServicesTeamcityValidateBeforeCall(Integer id, PutV3ProjectsIdServicesTeamcityRequest putV3ProjectsIdServicesTeamcityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdServicesTeamcity(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdServicesTeamcityRequest' is set
        if (putV3ProjectsIdServicesTeamcityRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdServicesTeamcityRequest' when calling putV3ProjectsIdServicesTeamcity(Async)");
        }

        return putV3ProjectsIdServicesTeamcityCall(id, putV3ProjectsIdServicesTeamcityRequest, _callback);

    }

    /**
     * Set teamcity service for project
     * Set teamcity service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesTeamcityRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set teamcity service for project </td><td>  -  </td></tr>
     </table>
     */
    public void putV3ProjectsIdServicesTeamcity(Integer id, PutV3ProjectsIdServicesTeamcityRequest putV3ProjectsIdServicesTeamcityRequest) throws ApiException {
        putV3ProjectsIdServicesTeamcityWithHttpInfo(id, putV3ProjectsIdServicesTeamcityRequest);
    }

    /**
     * Set teamcity service for project
     * Set teamcity service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesTeamcityRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set teamcity service for project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3ProjectsIdServicesTeamcityWithHttpInfo(Integer id, PutV3ProjectsIdServicesTeamcityRequest putV3ProjectsIdServicesTeamcityRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdServicesTeamcityValidateBeforeCall(id, putV3ProjectsIdServicesTeamcityRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set teamcity service for project (asynchronously)
     * Set teamcity service for project
     * @param id  (required)
     * @param putV3ProjectsIdServicesTeamcityRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set teamcity service for project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdServicesTeamcityAsync(Integer id, PutV3ProjectsIdServicesTeamcityRequest putV3ProjectsIdServicesTeamcityRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdServicesTeamcityValidateBeforeCall(id, putV3ProjectsIdServicesTeamcityRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdSnippetsNoteableIdNotesNoteId
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdSnippetsNoteableIdNotesNoteIdCall(String id, Integer noteableId, Integer noteId, PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{noteable_id}/notes/{note_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "noteable_id" + "}", localVarApiClient.escapeString(noteableId.toString()))
            .replace("{" + "note_id" + "}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdSnippetsNoteableIdNotesNoteIdValidateBeforeCall(String id, Integer noteableId, Integer noteId, PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdSnippetsNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteableId' is set
        if (noteableId == null) {
            throw new ApiException("Missing the required parameter 'noteableId' when calling putV3ProjectsIdSnippetsNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling putV3ProjectsIdSnippetsNoteableIdNotesNoteId(Async)");
        }

        // verify the required parameter 'putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest' is set
        if (putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest' when calling putV3ProjectsIdSnippetsNoteableIdNotesNoteId(Async)");
        }

        return putV3ProjectsIdSnippetsNoteableIdNotesNoteIdCall(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, _callback);

    }

    /**
     * Update an existing +noteable+ note
     * Update an existing +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest  (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public Note putV3ProjectsIdSnippetsNoteableIdNotesNoteId(String id, Integer noteableId, Integer noteId, PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest) throws ApiException {
        ApiResponse<Note> localVarResp = putV3ProjectsIdSnippetsNoteableIdNotesNoteIdWithHttpInfo(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest);
        return localVarResp.getData();
    }

    /**
     * Update an existing +noteable+ note
     * Update an existing +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest  (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> putV3ProjectsIdSnippetsNoteableIdNotesNoteIdWithHttpInfo(String id, Integer noteableId, Integer noteId, PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdSnippetsNoteableIdNotesNoteIdValidateBeforeCall(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing +noteable+ note (asynchronously)
     * Update an existing +noteable+ note
     * @param id The ID of a project (required)
     * @param noteableId The ID of the noteable (required)
     * @param noteId The ID of a note (required)
     * @param putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing +noteable+ note </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdSnippetsNoteableIdNotesNoteIdAsync(String id, Integer noteableId, Integer noteId, PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdSnippetsNoteableIdNotesNoteIdValidateBeforeCall(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdSnippetsSnippetId
     * @param id The ID of a project (required)
     * @param snippetId The ID of a project snippet (required)
     * @param putV3ProjectsIdSnippetsSnippetIdRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing project snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdSnippetsSnippetIdCall(String id, Integer snippetId, PutV3ProjectsIdSnippetsSnippetIdRequest putV3ProjectsIdSnippetsSnippetIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdSnippetsSnippetIdRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/snippets/{snippet_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "snippet_id" + "}", localVarApiClient.escapeString(snippetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdSnippetsSnippetIdValidateBeforeCall(String id, Integer snippetId, PutV3ProjectsIdSnippetsSnippetIdRequest putV3ProjectsIdSnippetsSnippetIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdSnippetsSnippetId(Async)");
        }

        // verify the required parameter 'snippetId' is set
        if (snippetId == null) {
            throw new ApiException("Missing the required parameter 'snippetId' when calling putV3ProjectsIdSnippetsSnippetId(Async)");
        }

        return putV3ProjectsIdSnippetsSnippetIdCall(id, snippetId, putV3ProjectsIdSnippetsSnippetIdRequest, _callback);

    }

    /**
     * Update an existing project snippet
     * Update an existing project snippet
     * @param id The ID of a project (required)
     * @param snippetId The ID of a project snippet (required)
     * @param putV3ProjectsIdSnippetsSnippetIdRequest  (optional)
     * @return ProjectSnippet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing project snippet </td><td>  -  </td></tr>
     </table>
     */
    public ProjectSnippet putV3ProjectsIdSnippetsSnippetId(String id, Integer snippetId, PutV3ProjectsIdSnippetsSnippetIdRequest putV3ProjectsIdSnippetsSnippetIdRequest) throws ApiException {
        ApiResponse<ProjectSnippet> localVarResp = putV3ProjectsIdSnippetsSnippetIdWithHttpInfo(id, snippetId, putV3ProjectsIdSnippetsSnippetIdRequest);
        return localVarResp.getData();
    }

    /**
     * Update an existing project snippet
     * Update an existing project snippet
     * @param id The ID of a project (required)
     * @param snippetId The ID of a project snippet (required)
     * @param putV3ProjectsIdSnippetsSnippetIdRequest  (optional)
     * @return ApiResponse&lt;ProjectSnippet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing project snippet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectSnippet> putV3ProjectsIdSnippetsSnippetIdWithHttpInfo(String id, Integer snippetId, PutV3ProjectsIdSnippetsSnippetIdRequest putV3ProjectsIdSnippetsSnippetIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdSnippetsSnippetIdValidateBeforeCall(id, snippetId, putV3ProjectsIdSnippetsSnippetIdRequest, null);
        Type localVarReturnType = new TypeToken<ProjectSnippet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing project snippet (asynchronously)
     * Update an existing project snippet
     * @param id The ID of a project (required)
     * @param snippetId The ID of a project snippet (required)
     * @param putV3ProjectsIdSnippetsSnippetIdRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing project snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdSnippetsSnippetIdAsync(String id, Integer snippetId, PutV3ProjectsIdSnippetsSnippetIdRequest putV3ProjectsIdSnippetsSnippetIdRequest, final ApiCallback<ProjectSnippet> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdSnippetsSnippetIdValidateBeforeCall(id, snippetId, putV3ProjectsIdSnippetsSnippetIdRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectSnippet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3ProjectsIdVariablesKey
     * @param id The ID of a project (required)
     * @param key The key of the variable (required)
     * @param putV3ProjectsIdVariablesKeyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing variable from a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdVariablesKeyCall(String id, String key, PutV3ProjectsIdVariablesKeyRequest putV3ProjectsIdVariablesKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3ProjectsIdVariablesKeyRequest;

        // create path and map variables
        String localVarPath = "/v3/projects/{id}/variables/{key}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3ProjectsIdVariablesKeyValidateBeforeCall(String id, String key, PutV3ProjectsIdVariablesKeyRequest putV3ProjectsIdVariablesKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3ProjectsIdVariablesKey(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling putV3ProjectsIdVariablesKey(Async)");
        }

        return putV3ProjectsIdVariablesKeyCall(id, key, putV3ProjectsIdVariablesKeyRequest, _callback);

    }

    /**
     * Update an existing variable from a project
     * Update an existing variable from a project
     * @param id The ID of a project (required)
     * @param key The key of the variable (required)
     * @param putV3ProjectsIdVariablesKeyRequest  (optional)
     * @return Variable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing variable from a project </td><td>  -  </td></tr>
     </table>
     */
    public Variable putV3ProjectsIdVariablesKey(String id, String key, PutV3ProjectsIdVariablesKeyRequest putV3ProjectsIdVariablesKeyRequest) throws ApiException {
        ApiResponse<Variable> localVarResp = putV3ProjectsIdVariablesKeyWithHttpInfo(id, key, putV3ProjectsIdVariablesKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Update an existing variable from a project
     * Update an existing variable from a project
     * @param id The ID of a project (required)
     * @param key The key of the variable (required)
     * @param putV3ProjectsIdVariablesKeyRequest  (optional)
     * @return ApiResponse&lt;Variable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing variable from a project </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Variable> putV3ProjectsIdVariablesKeyWithHttpInfo(String id, String key, PutV3ProjectsIdVariablesKeyRequest putV3ProjectsIdVariablesKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3ProjectsIdVariablesKeyValidateBeforeCall(id, key, putV3ProjectsIdVariablesKeyRequest, null);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing variable from a project (asynchronously)
     * Update an existing variable from a project
     * @param id The ID of a project (required)
     * @param key The key of the variable (required)
     * @param putV3ProjectsIdVariablesKeyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing variable from a project </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3ProjectsIdVariablesKeyAsync(String id, String key, PutV3ProjectsIdVariablesKeyRequest putV3ProjectsIdVariablesKeyRequest, final ApiCallback<Variable> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3ProjectsIdVariablesKeyValidateBeforeCall(id, key, putV3ProjectsIdVariablesKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<Variable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
