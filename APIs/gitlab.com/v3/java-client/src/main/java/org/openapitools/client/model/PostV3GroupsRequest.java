/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostV3GroupsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostV3GroupsRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_VISIBILITY_LEVEL = "visibility_level";
  @SerializedName(SERIALIZED_NAME_VISIBILITY_LEVEL)
  private Integer visibilityLevel;

  public static final String SERIALIZED_NAME_LFS_ENABLED = "lfs_enabled";
  @SerializedName(SERIALIZED_NAME_LFS_ENABLED)
  private Boolean lfsEnabled;

  public static final String SERIALIZED_NAME_REQUEST_ACCESS_ENABLED = "request_access_enabled";
  @SerializedName(SERIALIZED_NAME_REQUEST_ACCESS_ENABLED)
  private Boolean requestAccessEnabled;

  public PostV3GroupsRequest() {
  }

  public PostV3GroupsRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the group
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PostV3GroupsRequest path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The path of the group
   * @return path
   */
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public PostV3GroupsRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the group
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PostV3GroupsRequest visibilityLevel(Integer visibilityLevel) {
    this.visibilityLevel = visibilityLevel;
    return this;
  }

  /**
   * The visibility level of the group
   * @return visibilityLevel
   */
  @javax.annotation.Nullable
  public Integer getVisibilityLevel() {
    return visibilityLevel;
  }

  public void setVisibilityLevel(Integer visibilityLevel) {
    this.visibilityLevel = visibilityLevel;
  }


  public PostV3GroupsRequest lfsEnabled(Boolean lfsEnabled) {
    this.lfsEnabled = lfsEnabled;
    return this;
  }

  /**
   * Enable/disable LFS for the projects in this group
   * @return lfsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getLfsEnabled() {
    return lfsEnabled;
  }

  public void setLfsEnabled(Boolean lfsEnabled) {
    this.lfsEnabled = lfsEnabled;
  }


  public PostV3GroupsRequest requestAccessEnabled(Boolean requestAccessEnabled) {
    this.requestAccessEnabled = requestAccessEnabled;
    return this;
  }

  /**
   * Allow users to request member access
   * @return requestAccessEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRequestAccessEnabled() {
    return requestAccessEnabled;
  }

  public void setRequestAccessEnabled(Boolean requestAccessEnabled) {
    this.requestAccessEnabled = requestAccessEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostV3GroupsRequest postV3GroupsRequest = (PostV3GroupsRequest) o;
    return Objects.equals(this.name, postV3GroupsRequest.name) &&
        Objects.equals(this.path, postV3GroupsRequest.path) &&
        Objects.equals(this.description, postV3GroupsRequest.description) &&
        Objects.equals(this.visibilityLevel, postV3GroupsRequest.visibilityLevel) &&
        Objects.equals(this.lfsEnabled, postV3GroupsRequest.lfsEnabled) &&
        Objects.equals(this.requestAccessEnabled, postV3GroupsRequest.requestAccessEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, path, description, visibilityLevel, lfsEnabled, requestAccessEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostV3GroupsRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    visibilityLevel: ").append(toIndentedString(visibilityLevel)).append("\n");
    sb.append("    lfsEnabled: ").append(toIndentedString(lfsEnabled)).append("\n");
    sb.append("    requestAccessEnabled: ").append(toIndentedString(requestAccessEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("description");
    openapiFields.add("visibility_level");
    openapiFields.add("lfs_enabled");
    openapiFields.add("request_access_enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("path");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostV3GroupsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostV3GroupsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostV3GroupsRequest is not found in the empty JSON string", PostV3GroupsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostV3GroupsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostV3GroupsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostV3GroupsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostV3GroupsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostV3GroupsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostV3GroupsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostV3GroupsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostV3GroupsRequest>() {
           @Override
           public void write(JsonWriter out, PostV3GroupsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostV3GroupsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostV3GroupsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostV3GroupsRequest
   * @throws IOException if the JSON string is invalid with respect to PostV3GroupsRequest
   */
  public static PostV3GroupsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostV3GroupsRequest.class);
  }

  /**
   * Convert an instance of PostV3GroupsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

