/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Milestone;
import org.openapitools.client.model.RepoDiff;
import org.openapitools.client.model.UserBasic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Show the merge request changes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MergeRequestChanges {
  public static final String SERIALIZED_NAME_ASSIGNEE = "assignee";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE)
  private UserBasic assignee;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private UserBasic author;

  public static final String SERIALIZED_NAME_CHANGES = "changes";
  @SerializedName(SERIALIZED_NAME_CHANGES)
  private RepoDiff changes;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOWNVOTES = "downvotes";
  @SerializedName(SERIALIZED_NAME_DOWNVOTES)
  private String downvotes;

  public static final String SERIALIZED_NAME_FORCE_REMOVE_SOURCE_BRANCH = "force_remove_source_branch";
  @SerializedName(SERIALIZED_NAME_FORCE_REMOVE_SOURCE_BRANCH)
  private String forceRemoveSourceBranch;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IID = "iid";
  @SerializedName(SERIALIZED_NAME_IID)
  private String iid;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private String labels;

  public static final String SERIALIZED_NAME_MERGE_COMMIT_SHA = "merge_commit_sha";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT_SHA)
  private String mergeCommitSha;

  public static final String SERIALIZED_NAME_MERGE_STATUS = "merge_status";
  @SerializedName(SERIALIZED_NAME_MERGE_STATUS)
  private String mergeStatus;

  public static final String SERIALIZED_NAME_MERGE_WHEN_BUILD_SUCCEEDS = "merge_when_build_succeeds";
  @SerializedName(SERIALIZED_NAME_MERGE_WHEN_BUILD_SUCCEEDS)
  private String mergeWhenBuildSucceeds;

  public static final String SERIALIZED_NAME_MILESTONE = "milestone";
  @SerializedName(SERIALIZED_NAME_MILESTONE)
  private Milestone milestone;

  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_SHA = "sha";
  @SerializedName(SERIALIZED_NAME_SHA)
  private String sha;

  public static final String SERIALIZED_NAME_SHOULD_REMOVE_SOURCE_BRANCH = "should_remove_source_branch";
  @SerializedName(SERIALIZED_NAME_SHOULD_REMOVE_SOURCE_BRANCH)
  private String shouldRemoveSourceBranch;

  public static final String SERIALIZED_NAME_SOURCE_BRANCH = "source_branch";
  @SerializedName(SERIALIZED_NAME_SOURCE_BRANCH)
  private String sourceBranch;

  public static final String SERIALIZED_NAME_SOURCE_PROJECT_ID = "source_project_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_PROJECT_ID)
  private String sourceProjectId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SUBSCRIBED = "subscribed";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBED)
  private String subscribed;

  public static final String SERIALIZED_NAME_TARGET_BRANCH = "target_branch";
  @SerializedName(SERIALIZED_NAME_TARGET_BRANCH)
  private String targetBranch;

  public static final String SERIALIZED_NAME_TARGET_PROJECT_ID = "target_project_id";
  @SerializedName(SERIALIZED_NAME_TARGET_PROJECT_ID)
  private String targetProjectId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_UPVOTES = "upvotes";
  @SerializedName(SERIALIZED_NAME_UPVOTES)
  private String upvotes;

  public static final String SERIALIZED_NAME_USER_NOTES_COUNT = "user_notes_count";
  @SerializedName(SERIALIZED_NAME_USER_NOTES_COUNT)
  private String userNotesCount;

  public static final String SERIALIZED_NAME_WEB_URL = "web_url";
  @SerializedName(SERIALIZED_NAME_WEB_URL)
  private String webUrl;

  public static final String SERIALIZED_NAME_WORK_IN_PROGRESS = "work_in_progress";
  @SerializedName(SERIALIZED_NAME_WORK_IN_PROGRESS)
  private String workInProgress;

  public MergeRequestChanges() {
  }

  public MergeRequestChanges assignee(UserBasic assignee) {
    this.assignee = assignee;
    return this;
  }

  /**
   * Get assignee
   * @return assignee
   */
  @javax.annotation.Nullable
  public UserBasic getAssignee() {
    return assignee;
  }

  public void setAssignee(UserBasic assignee) {
    this.assignee = assignee;
  }


  public MergeRequestChanges author(UserBasic author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public UserBasic getAuthor() {
    return author;
  }

  public void setAuthor(UserBasic author) {
    this.author = author;
  }


  public MergeRequestChanges changes(RepoDiff changes) {
    this.changes = changes;
    return this;
  }

  /**
   * Get changes
   * @return changes
   */
  @javax.annotation.Nullable
  public RepoDiff getChanges() {
    return changes;
  }

  public void setChanges(RepoDiff changes) {
    this.changes = changes;
  }


  public MergeRequestChanges createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public MergeRequestChanges description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public MergeRequestChanges downvotes(String downvotes) {
    this.downvotes = downvotes;
    return this;
  }

  /**
   * Get downvotes
   * @return downvotes
   */
  @javax.annotation.Nullable
  public String getDownvotes() {
    return downvotes;
  }

  public void setDownvotes(String downvotes) {
    this.downvotes = downvotes;
  }


  public MergeRequestChanges forceRemoveSourceBranch(String forceRemoveSourceBranch) {
    this.forceRemoveSourceBranch = forceRemoveSourceBranch;
    return this;
  }

  /**
   * Get forceRemoveSourceBranch
   * @return forceRemoveSourceBranch
   */
  @javax.annotation.Nullable
  public String getForceRemoveSourceBranch() {
    return forceRemoveSourceBranch;
  }

  public void setForceRemoveSourceBranch(String forceRemoveSourceBranch) {
    this.forceRemoveSourceBranch = forceRemoveSourceBranch;
  }


  public MergeRequestChanges id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MergeRequestChanges iid(String iid) {
    this.iid = iid;
    return this;
  }

  /**
   * Get iid
   * @return iid
   */
  @javax.annotation.Nullable
  public String getIid() {
    return iid;
  }

  public void setIid(String iid) {
    this.iid = iid;
  }


  public MergeRequestChanges labels(String labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public String getLabels() {
    return labels;
  }

  public void setLabels(String labels) {
    this.labels = labels;
  }


  public MergeRequestChanges mergeCommitSha(String mergeCommitSha) {
    this.mergeCommitSha = mergeCommitSha;
    return this;
  }

  /**
   * Get mergeCommitSha
   * @return mergeCommitSha
   */
  @javax.annotation.Nullable
  public String getMergeCommitSha() {
    return mergeCommitSha;
  }

  public void setMergeCommitSha(String mergeCommitSha) {
    this.mergeCommitSha = mergeCommitSha;
  }


  public MergeRequestChanges mergeStatus(String mergeStatus) {
    this.mergeStatus = mergeStatus;
    return this;
  }

  /**
   * Get mergeStatus
   * @return mergeStatus
   */
  @javax.annotation.Nullable
  public String getMergeStatus() {
    return mergeStatus;
  }

  public void setMergeStatus(String mergeStatus) {
    this.mergeStatus = mergeStatus;
  }


  public MergeRequestChanges mergeWhenBuildSucceeds(String mergeWhenBuildSucceeds) {
    this.mergeWhenBuildSucceeds = mergeWhenBuildSucceeds;
    return this;
  }

  /**
   * Get mergeWhenBuildSucceeds
   * @return mergeWhenBuildSucceeds
   */
  @javax.annotation.Nullable
  public String getMergeWhenBuildSucceeds() {
    return mergeWhenBuildSucceeds;
  }

  public void setMergeWhenBuildSucceeds(String mergeWhenBuildSucceeds) {
    this.mergeWhenBuildSucceeds = mergeWhenBuildSucceeds;
  }


  public MergeRequestChanges milestone(Milestone milestone) {
    this.milestone = milestone;
    return this;
  }

  /**
   * Get milestone
   * @return milestone
   */
  @javax.annotation.Nullable
  public Milestone getMilestone() {
    return milestone;
  }

  public void setMilestone(Milestone milestone) {
    this.milestone = milestone;
  }


  public MergeRequestChanges projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public MergeRequestChanges sha(String sha) {
    this.sha = sha;
    return this;
  }

  /**
   * Get sha
   * @return sha
   */
  @javax.annotation.Nullable
  public String getSha() {
    return sha;
  }

  public void setSha(String sha) {
    this.sha = sha;
  }


  public MergeRequestChanges shouldRemoveSourceBranch(String shouldRemoveSourceBranch) {
    this.shouldRemoveSourceBranch = shouldRemoveSourceBranch;
    return this;
  }

  /**
   * Get shouldRemoveSourceBranch
   * @return shouldRemoveSourceBranch
   */
  @javax.annotation.Nullable
  public String getShouldRemoveSourceBranch() {
    return shouldRemoveSourceBranch;
  }

  public void setShouldRemoveSourceBranch(String shouldRemoveSourceBranch) {
    this.shouldRemoveSourceBranch = shouldRemoveSourceBranch;
  }


  public MergeRequestChanges sourceBranch(String sourceBranch) {
    this.sourceBranch = sourceBranch;
    return this;
  }

  /**
   * Get sourceBranch
   * @return sourceBranch
   */
  @javax.annotation.Nullable
  public String getSourceBranch() {
    return sourceBranch;
  }

  public void setSourceBranch(String sourceBranch) {
    this.sourceBranch = sourceBranch;
  }


  public MergeRequestChanges sourceProjectId(String sourceProjectId) {
    this.sourceProjectId = sourceProjectId;
    return this;
  }

  /**
   * Get sourceProjectId
   * @return sourceProjectId
   */
  @javax.annotation.Nullable
  public String getSourceProjectId() {
    return sourceProjectId;
  }

  public void setSourceProjectId(String sourceProjectId) {
    this.sourceProjectId = sourceProjectId;
  }


  public MergeRequestChanges state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public MergeRequestChanges subscribed(String subscribed) {
    this.subscribed = subscribed;
    return this;
  }

  /**
   * Get subscribed
   * @return subscribed
   */
  @javax.annotation.Nullable
  public String getSubscribed() {
    return subscribed;
  }

  public void setSubscribed(String subscribed) {
    this.subscribed = subscribed;
  }


  public MergeRequestChanges targetBranch(String targetBranch) {
    this.targetBranch = targetBranch;
    return this;
  }

  /**
   * Get targetBranch
   * @return targetBranch
   */
  @javax.annotation.Nullable
  public String getTargetBranch() {
    return targetBranch;
  }

  public void setTargetBranch(String targetBranch) {
    this.targetBranch = targetBranch;
  }


  public MergeRequestChanges targetProjectId(String targetProjectId) {
    this.targetProjectId = targetProjectId;
    return this;
  }

  /**
   * Get targetProjectId
   * @return targetProjectId
   */
  @javax.annotation.Nullable
  public String getTargetProjectId() {
    return targetProjectId;
  }

  public void setTargetProjectId(String targetProjectId) {
    this.targetProjectId = targetProjectId;
  }


  public MergeRequestChanges title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public MergeRequestChanges updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public MergeRequestChanges upvotes(String upvotes) {
    this.upvotes = upvotes;
    return this;
  }

  /**
   * Get upvotes
   * @return upvotes
   */
  @javax.annotation.Nullable
  public String getUpvotes() {
    return upvotes;
  }

  public void setUpvotes(String upvotes) {
    this.upvotes = upvotes;
  }


  public MergeRequestChanges userNotesCount(String userNotesCount) {
    this.userNotesCount = userNotesCount;
    return this;
  }

  /**
   * Get userNotesCount
   * @return userNotesCount
   */
  @javax.annotation.Nullable
  public String getUserNotesCount() {
    return userNotesCount;
  }

  public void setUserNotesCount(String userNotesCount) {
    this.userNotesCount = userNotesCount;
  }


  public MergeRequestChanges webUrl(String webUrl) {
    this.webUrl = webUrl;
    return this;
  }

  /**
   * Get webUrl
   * @return webUrl
   */
  @javax.annotation.Nullable
  public String getWebUrl() {
    return webUrl;
  }

  public void setWebUrl(String webUrl) {
    this.webUrl = webUrl;
  }


  public MergeRequestChanges workInProgress(String workInProgress) {
    this.workInProgress = workInProgress;
    return this;
  }

  /**
   * Get workInProgress
   * @return workInProgress
   */
  @javax.annotation.Nullable
  public String getWorkInProgress() {
    return workInProgress;
  }

  public void setWorkInProgress(String workInProgress) {
    this.workInProgress = workInProgress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MergeRequestChanges mergeRequestChanges = (MergeRequestChanges) o;
    return Objects.equals(this.assignee, mergeRequestChanges.assignee) &&
        Objects.equals(this.author, mergeRequestChanges.author) &&
        Objects.equals(this.changes, mergeRequestChanges.changes) &&
        Objects.equals(this.createdAt, mergeRequestChanges.createdAt) &&
        Objects.equals(this.description, mergeRequestChanges.description) &&
        Objects.equals(this.downvotes, mergeRequestChanges.downvotes) &&
        Objects.equals(this.forceRemoveSourceBranch, mergeRequestChanges.forceRemoveSourceBranch) &&
        Objects.equals(this.id, mergeRequestChanges.id) &&
        Objects.equals(this.iid, mergeRequestChanges.iid) &&
        Objects.equals(this.labels, mergeRequestChanges.labels) &&
        Objects.equals(this.mergeCommitSha, mergeRequestChanges.mergeCommitSha) &&
        Objects.equals(this.mergeStatus, mergeRequestChanges.mergeStatus) &&
        Objects.equals(this.mergeWhenBuildSucceeds, mergeRequestChanges.mergeWhenBuildSucceeds) &&
        Objects.equals(this.milestone, mergeRequestChanges.milestone) &&
        Objects.equals(this.projectId, mergeRequestChanges.projectId) &&
        Objects.equals(this.sha, mergeRequestChanges.sha) &&
        Objects.equals(this.shouldRemoveSourceBranch, mergeRequestChanges.shouldRemoveSourceBranch) &&
        Objects.equals(this.sourceBranch, mergeRequestChanges.sourceBranch) &&
        Objects.equals(this.sourceProjectId, mergeRequestChanges.sourceProjectId) &&
        Objects.equals(this.state, mergeRequestChanges.state) &&
        Objects.equals(this.subscribed, mergeRequestChanges.subscribed) &&
        Objects.equals(this.targetBranch, mergeRequestChanges.targetBranch) &&
        Objects.equals(this.targetProjectId, mergeRequestChanges.targetProjectId) &&
        Objects.equals(this.title, mergeRequestChanges.title) &&
        Objects.equals(this.updatedAt, mergeRequestChanges.updatedAt) &&
        Objects.equals(this.upvotes, mergeRequestChanges.upvotes) &&
        Objects.equals(this.userNotesCount, mergeRequestChanges.userNotesCount) &&
        Objects.equals(this.webUrl, mergeRequestChanges.webUrl) &&
        Objects.equals(this.workInProgress, mergeRequestChanges.workInProgress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignee, author, changes, createdAt, description, downvotes, forceRemoveSourceBranch, id, iid, labels, mergeCommitSha, mergeStatus, mergeWhenBuildSucceeds, milestone, projectId, sha, shouldRemoveSourceBranch, sourceBranch, sourceProjectId, state, subscribed, targetBranch, targetProjectId, title, updatedAt, upvotes, userNotesCount, webUrl, workInProgress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MergeRequestChanges {\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    downvotes: ").append(toIndentedString(downvotes)).append("\n");
    sb.append("    forceRemoveSourceBranch: ").append(toIndentedString(forceRemoveSourceBranch)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    iid: ").append(toIndentedString(iid)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    mergeCommitSha: ").append(toIndentedString(mergeCommitSha)).append("\n");
    sb.append("    mergeStatus: ").append(toIndentedString(mergeStatus)).append("\n");
    sb.append("    mergeWhenBuildSucceeds: ").append(toIndentedString(mergeWhenBuildSucceeds)).append("\n");
    sb.append("    milestone: ").append(toIndentedString(milestone)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    sha: ").append(toIndentedString(sha)).append("\n");
    sb.append("    shouldRemoveSourceBranch: ").append(toIndentedString(shouldRemoveSourceBranch)).append("\n");
    sb.append("    sourceBranch: ").append(toIndentedString(sourceBranch)).append("\n");
    sb.append("    sourceProjectId: ").append(toIndentedString(sourceProjectId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    subscribed: ").append(toIndentedString(subscribed)).append("\n");
    sb.append("    targetBranch: ").append(toIndentedString(targetBranch)).append("\n");
    sb.append("    targetProjectId: ").append(toIndentedString(targetProjectId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    upvotes: ").append(toIndentedString(upvotes)).append("\n");
    sb.append("    userNotesCount: ").append(toIndentedString(userNotesCount)).append("\n");
    sb.append("    webUrl: ").append(toIndentedString(webUrl)).append("\n");
    sb.append("    workInProgress: ").append(toIndentedString(workInProgress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignee");
    openapiFields.add("author");
    openapiFields.add("changes");
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("downvotes");
    openapiFields.add("force_remove_source_branch");
    openapiFields.add("id");
    openapiFields.add("iid");
    openapiFields.add("labels");
    openapiFields.add("merge_commit_sha");
    openapiFields.add("merge_status");
    openapiFields.add("merge_when_build_succeeds");
    openapiFields.add("milestone");
    openapiFields.add("project_id");
    openapiFields.add("sha");
    openapiFields.add("should_remove_source_branch");
    openapiFields.add("source_branch");
    openapiFields.add("source_project_id");
    openapiFields.add("state");
    openapiFields.add("subscribed");
    openapiFields.add("target_branch");
    openapiFields.add("target_project_id");
    openapiFields.add("title");
    openapiFields.add("updated_at");
    openapiFields.add("upvotes");
    openapiFields.add("user_notes_count");
    openapiFields.add("web_url");
    openapiFields.add("work_in_progress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MergeRequestChanges
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MergeRequestChanges.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MergeRequestChanges is not found in the empty JSON string", MergeRequestChanges.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MergeRequestChanges.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MergeRequestChanges` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assignee`
      if (jsonObj.get("assignee") != null && !jsonObj.get("assignee").isJsonNull()) {
        UserBasic.validateJsonElement(jsonObj.get("assignee"));
      }
      // validate the optional field `author`
      if (jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) {
        UserBasic.validateJsonElement(jsonObj.get("author"));
      }
      // validate the optional field `changes`
      if (jsonObj.get("changes") != null && !jsonObj.get("changes").isJsonNull()) {
        RepoDiff.validateJsonElement(jsonObj.get("changes"));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("downvotes") != null && !jsonObj.get("downvotes").isJsonNull()) && !jsonObj.get("downvotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downvotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downvotes").toString()));
      }
      if ((jsonObj.get("force_remove_source_branch") != null && !jsonObj.get("force_remove_source_branch").isJsonNull()) && !jsonObj.get("force_remove_source_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `force_remove_source_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("force_remove_source_branch").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("iid") != null && !jsonObj.get("iid").isJsonNull()) && !jsonObj.get("iid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iid").toString()));
      }
      if ((jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) && !jsonObj.get("labels").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("merge_commit_sha") != null && !jsonObj.get("merge_commit_sha").isJsonNull()) && !jsonObj.get("merge_commit_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_commit_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_commit_sha").toString()));
      }
      if ((jsonObj.get("merge_status") != null && !jsonObj.get("merge_status").isJsonNull()) && !jsonObj.get("merge_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_status").toString()));
      }
      if ((jsonObj.get("merge_when_build_succeeds") != null && !jsonObj.get("merge_when_build_succeeds").isJsonNull()) && !jsonObj.get("merge_when_build_succeeds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_when_build_succeeds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_when_build_succeeds").toString()));
      }
      // validate the optional field `milestone`
      if (jsonObj.get("milestone") != null && !jsonObj.get("milestone").isJsonNull()) {
        Milestone.validateJsonElement(jsonObj.get("milestone"));
      }
      if ((jsonObj.get("project_id") != null && !jsonObj.get("project_id").isJsonNull()) && !jsonObj.get("project_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project_id").toString()));
      }
      if ((jsonObj.get("sha") != null && !jsonObj.get("sha").isJsonNull()) && !jsonObj.get("sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sha").toString()));
      }
      if ((jsonObj.get("should_remove_source_branch") != null && !jsonObj.get("should_remove_source_branch").isJsonNull()) && !jsonObj.get("should_remove_source_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `should_remove_source_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("should_remove_source_branch").toString()));
      }
      if ((jsonObj.get("source_branch") != null && !jsonObj.get("source_branch").isJsonNull()) && !jsonObj.get("source_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_branch").toString()));
      }
      if ((jsonObj.get("source_project_id") != null && !jsonObj.get("source_project_id").isJsonNull()) && !jsonObj.get("source_project_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_project_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_project_id").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("subscribed") != null && !jsonObj.get("subscribed").isJsonNull()) && !jsonObj.get("subscribed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscribed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscribed").toString()));
      }
      if ((jsonObj.get("target_branch") != null && !jsonObj.get("target_branch").isJsonNull()) && !jsonObj.get("target_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_branch").toString()));
      }
      if ((jsonObj.get("target_project_id") != null && !jsonObj.get("target_project_id").isJsonNull()) && !jsonObj.get("target_project_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_project_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_project_id").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("upvotes") != null && !jsonObj.get("upvotes").isJsonNull()) && !jsonObj.get("upvotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upvotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upvotes").toString()));
      }
      if ((jsonObj.get("user_notes_count") != null && !jsonObj.get("user_notes_count").isJsonNull()) && !jsonObj.get("user_notes_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_notes_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_notes_count").toString()));
      }
      if ((jsonObj.get("web_url") != null && !jsonObj.get("web_url").isJsonNull()) && !jsonObj.get("web_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `web_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("web_url").toString()));
      }
      if ((jsonObj.get("work_in_progress") != null && !jsonObj.get("work_in_progress").isJsonNull()) && !jsonObj.get("work_in_progress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `work_in_progress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("work_in_progress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MergeRequestChanges.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MergeRequestChanges' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MergeRequestChanges> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MergeRequestChanges.class));

       return (TypeAdapter<T>) new TypeAdapter<MergeRequestChanges>() {
           @Override
           public void write(JsonWriter out, MergeRequestChanges value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MergeRequestChanges read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MergeRequestChanges given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MergeRequestChanges
   * @throws IOException if the JSON string is invalid with respect to MergeRequestChanges
   */
  public static MergeRequestChanges fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MergeRequestChanges.class);
  }

  /**
   * Convert an instance of MergeRequestChanges to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

