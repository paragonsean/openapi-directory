/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UserBasic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Delete a +noteable+ note
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Note {
  public static final String SERIALIZED_NAME_ATTACHMENT = "attachment";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT)
  private String attachment;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private UserBasic author;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DOWNVOTE_QUESTION_MARK = "downvote?";
  @SerializedName(SERIALIZED_NAME_DOWNVOTE_QUESTION_MARK)
  private String downvoteQuestionMark;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NOTEABLE_ID = "noteable_id";
  @SerializedName(SERIALIZED_NAME_NOTEABLE_ID)
  private String noteableId;

  public static final String SERIALIZED_NAME_NOTEABLE_TYPE = "noteable_type";
  @SerializedName(SERIALIZED_NAME_NOTEABLE_TYPE)
  private String noteableType;

  public static final String SERIALIZED_NAME_SYSTEM = "system";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private String system;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_UPVOTE_QUESTION_MARK = "upvote?";
  @SerializedName(SERIALIZED_NAME_UPVOTE_QUESTION_MARK)
  private String upvoteQuestionMark;

  public Note() {
  }

  public Note attachment(String attachment) {
    this.attachment = attachment;
    return this;
  }

  /**
   * Get attachment
   * @return attachment
   */
  @javax.annotation.Nullable
  public String getAttachment() {
    return attachment;
  }

  public void setAttachment(String attachment) {
    this.attachment = attachment;
  }


  public Note author(UserBasic author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public UserBasic getAuthor() {
    return author;
  }

  public void setAuthor(UserBasic author) {
    this.author = author;
  }


  public Note body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public Note createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Note downvoteQuestionMark(String downvoteQuestionMark) {
    this.downvoteQuestionMark = downvoteQuestionMark;
    return this;
  }

  /**
   * Get downvoteQuestionMark
   * @return downvoteQuestionMark
   */
  @javax.annotation.Nullable
  public String getDownvoteQuestionMark() {
    return downvoteQuestionMark;
  }

  public void setDownvoteQuestionMark(String downvoteQuestionMark) {
    this.downvoteQuestionMark = downvoteQuestionMark;
  }


  public Note id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Note noteableId(String noteableId) {
    this.noteableId = noteableId;
    return this;
  }

  /**
   * Get noteableId
   * @return noteableId
   */
  @javax.annotation.Nullable
  public String getNoteableId() {
    return noteableId;
  }

  public void setNoteableId(String noteableId) {
    this.noteableId = noteableId;
  }


  public Note noteableType(String noteableType) {
    this.noteableType = noteableType;
    return this;
  }

  /**
   * Get noteableType
   * @return noteableType
   */
  @javax.annotation.Nullable
  public String getNoteableType() {
    return noteableType;
  }

  public void setNoteableType(String noteableType) {
    this.noteableType = noteableType;
  }


  public Note system(String system) {
    this.system = system;
    return this;
  }

  /**
   * Get system
   * @return system
   */
  @javax.annotation.Nullable
  public String getSystem() {
    return system;
  }

  public void setSystem(String system) {
    this.system = system;
  }


  public Note updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Note upvoteQuestionMark(String upvoteQuestionMark) {
    this.upvoteQuestionMark = upvoteQuestionMark;
    return this;
  }

  /**
   * Get upvoteQuestionMark
   * @return upvoteQuestionMark
   */
  @javax.annotation.Nullable
  public String getUpvoteQuestionMark() {
    return upvoteQuestionMark;
  }

  public void setUpvoteQuestionMark(String upvoteQuestionMark) {
    this.upvoteQuestionMark = upvoteQuestionMark;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Note note = (Note) o;
    return Objects.equals(this.attachment, note.attachment) &&
        Objects.equals(this.author, note.author) &&
        Objects.equals(this.body, note.body) &&
        Objects.equals(this.createdAt, note.createdAt) &&
        Objects.equals(this.downvoteQuestionMark, note.downvoteQuestionMark) &&
        Objects.equals(this.id, note.id) &&
        Objects.equals(this.noteableId, note.noteableId) &&
        Objects.equals(this.noteableType, note.noteableType) &&
        Objects.equals(this.system, note.system) &&
        Objects.equals(this.updatedAt, note.updatedAt) &&
        Objects.equals(this.upvoteQuestionMark, note.upvoteQuestionMark);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachment, author, body, createdAt, downvoteQuestionMark, id, noteableId, noteableType, system, updatedAt, upvoteQuestionMark);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Note {\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    downvoteQuestionMark: ").append(toIndentedString(downvoteQuestionMark)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    noteableId: ").append(toIndentedString(noteableId)).append("\n");
    sb.append("    noteableType: ").append(toIndentedString(noteableType)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    upvoteQuestionMark: ").append(toIndentedString(upvoteQuestionMark)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachment");
    openapiFields.add("author");
    openapiFields.add("body");
    openapiFields.add("created_at");
    openapiFields.add("downvote?");
    openapiFields.add("id");
    openapiFields.add("noteable_id");
    openapiFields.add("noteable_type");
    openapiFields.add("system");
    openapiFields.add("updated_at");
    openapiFields.add("upvote?");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Note
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Note.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Note is not found in the empty JSON string", Note.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Note.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Note` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attachment") != null && !jsonObj.get("attachment").isJsonNull()) && !jsonObj.get("attachment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attachment").toString()));
      }
      // validate the optional field `author`
      if (jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) {
        UserBasic.validateJsonElement(jsonObj.get("author"));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("downvote?") != null && !jsonObj.get("downvote?").isJsonNull()) && !jsonObj.get("downvote?").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downvote?` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downvote?").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("noteable_id") != null && !jsonObj.get("noteable_id").isJsonNull()) && !jsonObj.get("noteable_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noteable_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noteable_id").toString()));
      }
      if ((jsonObj.get("noteable_type") != null && !jsonObj.get("noteable_type").isJsonNull()) && !jsonObj.get("noteable_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noteable_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noteable_type").toString()));
      }
      if ((jsonObj.get("system") != null && !jsonObj.get("system").isJsonNull()) && !jsonObj.get("system").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `system` to be a primitive type in the JSON string but got `%s`", jsonObj.get("system").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("upvote?") != null && !jsonObj.get("upvote?").isJsonNull()) && !jsonObj.get("upvote?").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upvote?` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upvote?").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Note.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Note' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Note> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Note.class));

       return (TypeAdapter<T>) new TypeAdapter<Note>() {
           @Override
           public void write(JsonWriter out, Note value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Note read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Note given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Note
   * @throws IOException if the JSON string is invalid with respect to Note
   */
  public static Note fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Note.class);
  }

  /**
   * Convert an instance of Note to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

