/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostV3ProjectsIdRepositoryCommitsShaCommentsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostV3ProjectsIdRepositoryCommitsShaCommentsRequest {
  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_LINE = "line";
  @SerializedName(SERIALIZED_NAME_LINE)
  private Integer line;

  /**
   * The type of the line
   */
  @JsonAdapter(LineTypeEnum.Adapter.class)
  public enum LineTypeEnum {
    NEW("new"),
    
    OLD("old");

    private String value;

    LineTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LineTypeEnum fromValue(String value) {
      for (LineTypeEnum b : LineTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LineTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LineTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LineTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LineTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LineTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINE_TYPE = "line_type";
  @SerializedName(SERIALIZED_NAME_LINE_TYPE)
  private LineTypeEnum lineType = LineTypeEnum.NEW;

  public PostV3ProjectsIdRepositoryCommitsShaCommentsRequest() {
  }

  public PostV3ProjectsIdRepositoryCommitsShaCommentsRequest note(String note) {
    this.note = note;
    return this;
  }

  /**
   * The text of the comment
   * @return note
   */
  @javax.annotation.Nonnull
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public PostV3ProjectsIdRepositoryCommitsShaCommentsRequest path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The file path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public PostV3ProjectsIdRepositoryCommitsShaCommentsRequest line(Integer line) {
    this.line = line;
    return this;
  }

  /**
   * The line number
   * @return line
   */
  @javax.annotation.Nonnull
  public Integer getLine() {
    return line;
  }

  public void setLine(Integer line) {
    this.line = line;
  }


  public PostV3ProjectsIdRepositoryCommitsShaCommentsRequest lineType(LineTypeEnum lineType) {
    this.lineType = lineType;
    return this;
  }

  /**
   * The type of the line
   * @return lineType
   */
  @javax.annotation.Nonnull
  public LineTypeEnum getLineType() {
    return lineType;
  }

  public void setLineType(LineTypeEnum lineType) {
    this.lineType = lineType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostV3ProjectsIdRepositoryCommitsShaCommentsRequest postV3ProjectsIdRepositoryCommitsShaCommentsRequest = (PostV3ProjectsIdRepositoryCommitsShaCommentsRequest) o;
    return Objects.equals(this.note, postV3ProjectsIdRepositoryCommitsShaCommentsRequest.note) &&
        Objects.equals(this.path, postV3ProjectsIdRepositoryCommitsShaCommentsRequest.path) &&
        Objects.equals(this.line, postV3ProjectsIdRepositoryCommitsShaCommentsRequest.line) &&
        Objects.equals(this.lineType, postV3ProjectsIdRepositoryCommitsShaCommentsRequest.lineType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(note, path, line, lineType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostV3ProjectsIdRepositoryCommitsShaCommentsRequest {\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    lineType: ").append(toIndentedString(lineType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("note");
    openapiFields.add("path");
    openapiFields.add("line");
    openapiFields.add("line_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("note");
    openapiRequiredFields.add("line");
    openapiRequiredFields.add("line_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostV3ProjectsIdRepositoryCommitsShaCommentsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostV3ProjectsIdRepositoryCommitsShaCommentsRequest is not found in the empty JSON string", PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostV3ProjectsIdRepositoryCommitsShaCommentsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (!jsonObj.get("line_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line_type").toString()));
      }
      // validate the required field `line_type`
      LineTypeEnum.validateJsonElement(jsonObj.get("line_type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostV3ProjectsIdRepositoryCommitsShaCommentsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostV3ProjectsIdRepositoryCommitsShaCommentsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostV3ProjectsIdRepositoryCommitsShaCommentsRequest>() {
           @Override
           public void write(JsonWriter out, PostV3ProjectsIdRepositoryCommitsShaCommentsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostV3ProjectsIdRepositoryCommitsShaCommentsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostV3ProjectsIdRepositoryCommitsShaCommentsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostV3ProjectsIdRepositoryCommitsShaCommentsRequest
   * @throws IOException if the JSON string is invalid with respect to PostV3ProjectsIdRepositoryCommitsShaCommentsRequest
   */
  public static PostV3ProjectsIdRepositoryCommitsShaCommentsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.class);
  }

  /**
   * Convert an instance of PostV3ProjectsIdRepositoryCommitsShaCommentsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

