/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest {
  public static final String SERIALIZED_NAME_MERGE_COMMIT_MESSAGE = "merge_commit_message";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT_MESSAGE)
  private String mergeCommitMessage;

  public static final String SERIALIZED_NAME_SHOULD_REMOVE_SOURCE_BRANCH = "should_remove_source_branch";
  @SerializedName(SERIALIZED_NAME_SHOULD_REMOVE_SOURCE_BRANCH)
  private Boolean shouldRemoveSourceBranch;

  public static final String SERIALIZED_NAME_MERGE_WHEN_BUILD_SUCCEEDS = "merge_when_build_succeeds";
  @SerializedName(SERIALIZED_NAME_MERGE_WHEN_BUILD_SUCCEEDS)
  private Boolean mergeWhenBuildSucceeds;

  public static final String SERIALIZED_NAME_SHA = "sha";
  @SerializedName(SERIALIZED_NAME_SHA)
  private String sha;

  public PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest() {
  }

  public PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest mergeCommitMessage(String mergeCommitMessage) {
    this.mergeCommitMessage = mergeCommitMessage;
    return this;
  }

  /**
   * Custom merge commit message
   * @return mergeCommitMessage
   */
  @javax.annotation.Nullable
  public String getMergeCommitMessage() {
    return mergeCommitMessage;
  }

  public void setMergeCommitMessage(String mergeCommitMessage) {
    this.mergeCommitMessage = mergeCommitMessage;
  }


  public PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest shouldRemoveSourceBranch(Boolean shouldRemoveSourceBranch) {
    this.shouldRemoveSourceBranch = shouldRemoveSourceBranch;
    return this;
  }

  /**
   * When true, the source branch will be deleted if possible
   * @return shouldRemoveSourceBranch
   */
  @javax.annotation.Nullable
  public Boolean getShouldRemoveSourceBranch() {
    return shouldRemoveSourceBranch;
  }

  public void setShouldRemoveSourceBranch(Boolean shouldRemoveSourceBranch) {
    this.shouldRemoveSourceBranch = shouldRemoveSourceBranch;
  }


  public PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest mergeWhenBuildSucceeds(Boolean mergeWhenBuildSucceeds) {
    this.mergeWhenBuildSucceeds = mergeWhenBuildSucceeds;
    return this;
  }

  /**
   * When true, this merge request will be merged when the pipeline succeeds
   * @return mergeWhenBuildSucceeds
   */
  @javax.annotation.Nullable
  public Boolean getMergeWhenBuildSucceeds() {
    return mergeWhenBuildSucceeds;
  }

  public void setMergeWhenBuildSucceeds(Boolean mergeWhenBuildSucceeds) {
    this.mergeWhenBuildSucceeds = mergeWhenBuildSucceeds;
  }


  public PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest sha(String sha) {
    this.sha = sha;
    return this;
  }

  /**
   * When present, must have the HEAD SHA of the source branch
   * @return sha
   */
  @javax.annotation.Nullable
  public String getSha() {
    return sha;
  }

  public void setSha(String sha) {
    this.sha = sha;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest = (PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest) o;
    return Objects.equals(this.mergeCommitMessage, putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.mergeCommitMessage) &&
        Objects.equals(this.shouldRemoveSourceBranch, putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.shouldRemoveSourceBranch) &&
        Objects.equals(this.mergeWhenBuildSucceeds, putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.mergeWhenBuildSucceeds) &&
        Objects.equals(this.sha, putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.sha);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mergeCommitMessage, shouldRemoveSourceBranch, mergeWhenBuildSucceeds, sha);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest {\n");
    sb.append("    mergeCommitMessage: ").append(toIndentedString(mergeCommitMessage)).append("\n");
    sb.append("    shouldRemoveSourceBranch: ").append(toIndentedString(shouldRemoveSourceBranch)).append("\n");
    sb.append("    mergeWhenBuildSucceeds: ").append(toIndentedString(mergeWhenBuildSucceeds)).append("\n");
    sb.append("    sha: ").append(toIndentedString(sha)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("merge_commit_message");
    openapiFields.add("should_remove_source_branch");
    openapiFields.add("merge_when_build_succeeds");
    openapiFields.add("sha");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest is not found in the empty JSON string", PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("merge_commit_message") != null && !jsonObj.get("merge_commit_message").isJsonNull()) && !jsonObj.get("merge_commit_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_commit_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_commit_message").toString()));
      }
      if ((jsonObj.get("sha") != null && !jsonObj.get("sha").isJsonNull()) && !jsonObj.get("sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sha").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest>() {
           @Override
           public void write(JsonWriter out, PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest
   * @throws IOException if the JSON string is invalid with respect to PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest
   */
  public static PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.class);
  }

  /**
   * Convert an instance of PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

