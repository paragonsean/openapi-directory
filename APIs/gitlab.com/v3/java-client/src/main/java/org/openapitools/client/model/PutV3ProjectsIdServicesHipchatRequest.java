/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutV3ProjectsIdServicesHipchatRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutV3ProjectsIdServicesHipchatRequest {
  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_ROOM = "room";
  @SerializedName(SERIALIZED_NAME_ROOM)
  private String room;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_NOTIFY = "notify";
  @SerializedName(SERIALIZED_NAME_NOTIFY)
  private Boolean notify;

  public static final String SERIALIZED_NAME_API_VERSION = "api_version";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private String apiVersion;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  public static final String SERIALIZED_NAME_PUSH_EVENTS = "push_events";
  @SerializedName(SERIALIZED_NAME_PUSH_EVENTS)
  private String pushEvents;

  public static final String SERIALIZED_NAME_ISSUE_EVENTS = "issue_events";
  @SerializedName(SERIALIZED_NAME_ISSUE_EVENTS)
  private String issueEvents;

  public static final String SERIALIZED_NAME_CONFIDENTIAL_ISSUE_EVENTS = "confidential_issue_events";
  @SerializedName(SERIALIZED_NAME_CONFIDENTIAL_ISSUE_EVENTS)
  private String confidentialIssueEvents;

  public static final String SERIALIZED_NAME_MERGE_REQUEST_EVENTS = "merge_request_events";
  @SerializedName(SERIALIZED_NAME_MERGE_REQUEST_EVENTS)
  private String mergeRequestEvents;

  public static final String SERIALIZED_NAME_NOTE_EVENTS = "note_events";
  @SerializedName(SERIALIZED_NAME_NOTE_EVENTS)
  private String noteEvents;

  public static final String SERIALIZED_NAME_TAG_PUSH_EVENTS = "tag_push_events";
  @SerializedName(SERIALIZED_NAME_TAG_PUSH_EVENTS)
  private String tagPushEvents;

  public static final String SERIALIZED_NAME_BUILD_EVENTS = "build_events";
  @SerializedName(SERIALIZED_NAME_BUILD_EVENTS)
  private String buildEvents;

  public PutV3ProjectsIdServicesHipchatRequest() {
  }

  public PutV3ProjectsIdServicesHipchatRequest token(String token) {
    this.token = token;
    return this;
  }

  /**
   * The room token
   * @return token
   */
  @javax.annotation.Nonnull
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public PutV3ProjectsIdServicesHipchatRequest room(String room) {
    this.room = room;
    return this;
  }

  /**
   * The room name or ID
   * @return room
   */
  @javax.annotation.Nullable
  public String getRoom() {
    return room;
  }

  public void setRoom(String room) {
    this.room = room;
  }


  public PutV3ProjectsIdServicesHipchatRequest color(String color) {
    this.color = color;
    return this;
  }

  /**
   * The room color
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public PutV3ProjectsIdServicesHipchatRequest notify(Boolean notify) {
    this.notify = notify;
    return this;
  }

  /**
   * Enable notifications
   * @return notify
   */
  @javax.annotation.Nullable
  public Boolean getNotify() {
    return notify;
  }

  public void setNotify(Boolean notify) {
    this.notify = notify;
  }


  public PutV3ProjectsIdServicesHipchatRequest apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * Leave blank for default (v2)
   * @return apiVersion
   */
  @javax.annotation.Nullable
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public PutV3ProjectsIdServicesHipchatRequest server(String server) {
    this.server = server;
    return this;
  }

  /**
   * Leave blank for default. https://hipchat.example.com
   * @return server
   */
  @javax.annotation.Nullable
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }


  public PutV3ProjectsIdServicesHipchatRequest pushEvents(String pushEvents) {
    this.pushEvents = pushEvents;
    return this;
  }

  /**
   * Event will be triggered by a push to the repository
   * @return pushEvents
   */
  @javax.annotation.Nullable
  public String getPushEvents() {
    return pushEvents;
  }

  public void setPushEvents(String pushEvents) {
    this.pushEvents = pushEvents;
  }


  public PutV3ProjectsIdServicesHipchatRequest issueEvents(String issueEvents) {
    this.issueEvents = issueEvents;
    return this;
  }

  /**
   * Event will be triggered when an issue is created/updated/closed
   * @return issueEvents
   */
  @javax.annotation.Nullable
  public String getIssueEvents() {
    return issueEvents;
  }

  public void setIssueEvents(String issueEvents) {
    this.issueEvents = issueEvents;
  }


  public PutV3ProjectsIdServicesHipchatRequest confidentialIssueEvents(String confidentialIssueEvents) {
    this.confidentialIssueEvents = confidentialIssueEvents;
    return this;
  }

  /**
   * Event will be triggered when a confidential issue is created/updated/closed
   * @return confidentialIssueEvents
   */
  @javax.annotation.Nullable
  public String getConfidentialIssueEvents() {
    return confidentialIssueEvents;
  }

  public void setConfidentialIssueEvents(String confidentialIssueEvents) {
    this.confidentialIssueEvents = confidentialIssueEvents;
  }


  public PutV3ProjectsIdServicesHipchatRequest mergeRequestEvents(String mergeRequestEvents) {
    this.mergeRequestEvents = mergeRequestEvents;
    return this;
  }

  /**
   * Event will be triggered when a merge request is created/updated/merged
   * @return mergeRequestEvents
   */
  @javax.annotation.Nullable
  public String getMergeRequestEvents() {
    return mergeRequestEvents;
  }

  public void setMergeRequestEvents(String mergeRequestEvents) {
    this.mergeRequestEvents = mergeRequestEvents;
  }


  public PutV3ProjectsIdServicesHipchatRequest noteEvents(String noteEvents) {
    this.noteEvents = noteEvents;
    return this;
  }

  /**
   * Event will be triggered when someone adds a comment
   * @return noteEvents
   */
  @javax.annotation.Nullable
  public String getNoteEvents() {
    return noteEvents;
  }

  public void setNoteEvents(String noteEvents) {
    this.noteEvents = noteEvents;
  }


  public PutV3ProjectsIdServicesHipchatRequest tagPushEvents(String tagPushEvents) {
    this.tagPushEvents = tagPushEvents;
    return this;
  }

  /**
   * Event will be triggered when a new tag is pushed to the repository
   * @return tagPushEvents
   */
  @javax.annotation.Nullable
  public String getTagPushEvents() {
    return tagPushEvents;
  }

  public void setTagPushEvents(String tagPushEvents) {
    this.tagPushEvents = tagPushEvents;
  }


  public PutV3ProjectsIdServicesHipchatRequest buildEvents(String buildEvents) {
    this.buildEvents = buildEvents;
    return this;
  }

  /**
   * Event will be triggered when a build status changes
   * @return buildEvents
   */
  @javax.annotation.Nullable
  public String getBuildEvents() {
    return buildEvents;
  }

  public void setBuildEvents(String buildEvents) {
    this.buildEvents = buildEvents;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutV3ProjectsIdServicesHipchatRequest putV3ProjectsIdServicesHipchatRequest = (PutV3ProjectsIdServicesHipchatRequest) o;
    return Objects.equals(this.token, putV3ProjectsIdServicesHipchatRequest.token) &&
        Objects.equals(this.room, putV3ProjectsIdServicesHipchatRequest.room) &&
        Objects.equals(this.color, putV3ProjectsIdServicesHipchatRequest.color) &&
        Objects.equals(this.notify, putV3ProjectsIdServicesHipchatRequest.notify) &&
        Objects.equals(this.apiVersion, putV3ProjectsIdServicesHipchatRequest.apiVersion) &&
        Objects.equals(this.server, putV3ProjectsIdServicesHipchatRequest.server) &&
        Objects.equals(this.pushEvents, putV3ProjectsIdServicesHipchatRequest.pushEvents) &&
        Objects.equals(this.issueEvents, putV3ProjectsIdServicesHipchatRequest.issueEvents) &&
        Objects.equals(this.confidentialIssueEvents, putV3ProjectsIdServicesHipchatRequest.confidentialIssueEvents) &&
        Objects.equals(this.mergeRequestEvents, putV3ProjectsIdServicesHipchatRequest.mergeRequestEvents) &&
        Objects.equals(this.noteEvents, putV3ProjectsIdServicesHipchatRequest.noteEvents) &&
        Objects.equals(this.tagPushEvents, putV3ProjectsIdServicesHipchatRequest.tagPushEvents) &&
        Objects.equals(this.buildEvents, putV3ProjectsIdServicesHipchatRequest.buildEvents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(token, room, color, notify, apiVersion, server, pushEvents, issueEvents, confidentialIssueEvents, mergeRequestEvents, noteEvents, tagPushEvents, buildEvents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutV3ProjectsIdServicesHipchatRequest {\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    room: ").append(toIndentedString(room)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    notify: ").append(toIndentedString(notify)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    pushEvents: ").append(toIndentedString(pushEvents)).append("\n");
    sb.append("    issueEvents: ").append(toIndentedString(issueEvents)).append("\n");
    sb.append("    confidentialIssueEvents: ").append(toIndentedString(confidentialIssueEvents)).append("\n");
    sb.append("    mergeRequestEvents: ").append(toIndentedString(mergeRequestEvents)).append("\n");
    sb.append("    noteEvents: ").append(toIndentedString(noteEvents)).append("\n");
    sb.append("    tagPushEvents: ").append(toIndentedString(tagPushEvents)).append("\n");
    sb.append("    buildEvents: ").append(toIndentedString(buildEvents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("token");
    openapiFields.add("room");
    openapiFields.add("color");
    openapiFields.add("notify");
    openapiFields.add("api_version");
    openapiFields.add("server");
    openapiFields.add("push_events");
    openapiFields.add("issue_events");
    openapiFields.add("confidential_issue_events");
    openapiFields.add("merge_request_events");
    openapiFields.add("note_events");
    openapiFields.add("tag_push_events");
    openapiFields.add("build_events");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("token");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutV3ProjectsIdServicesHipchatRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutV3ProjectsIdServicesHipchatRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutV3ProjectsIdServicesHipchatRequest is not found in the empty JSON string", PutV3ProjectsIdServicesHipchatRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutV3ProjectsIdServicesHipchatRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutV3ProjectsIdServicesHipchatRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutV3ProjectsIdServicesHipchatRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("room") != null && !jsonObj.get("room").isJsonNull()) && !jsonObj.get("room").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `room` to be a primitive type in the JSON string but got `%s`", jsonObj.get("room").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if ((jsonObj.get("api_version") != null && !jsonObj.get("api_version").isJsonNull()) && !jsonObj.get("api_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_version").toString()));
      }
      if ((jsonObj.get("server") != null && !jsonObj.get("server").isJsonNull()) && !jsonObj.get("server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server").toString()));
      }
      if ((jsonObj.get("push_events") != null && !jsonObj.get("push_events").isJsonNull()) && !jsonObj.get("push_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `push_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("push_events").toString()));
      }
      if ((jsonObj.get("issue_events") != null && !jsonObj.get("issue_events").isJsonNull()) && !jsonObj.get("issue_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_events").toString()));
      }
      if ((jsonObj.get("confidential_issue_events") != null && !jsonObj.get("confidential_issue_events").isJsonNull()) && !jsonObj.get("confidential_issue_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confidential_issue_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confidential_issue_events").toString()));
      }
      if ((jsonObj.get("merge_request_events") != null && !jsonObj.get("merge_request_events").isJsonNull()) && !jsonObj.get("merge_request_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_request_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_request_events").toString()));
      }
      if ((jsonObj.get("note_events") != null && !jsonObj.get("note_events").isJsonNull()) && !jsonObj.get("note_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note_events").toString()));
      }
      if ((jsonObj.get("tag_push_events") != null && !jsonObj.get("tag_push_events").isJsonNull()) && !jsonObj.get("tag_push_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_push_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_push_events").toString()));
      }
      if ((jsonObj.get("build_events") != null && !jsonObj.get("build_events").isJsonNull()) && !jsonObj.get("build_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `build_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("build_events").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutV3ProjectsIdServicesHipchatRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutV3ProjectsIdServicesHipchatRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutV3ProjectsIdServicesHipchatRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutV3ProjectsIdServicesHipchatRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutV3ProjectsIdServicesHipchatRequest>() {
           @Override
           public void write(JsonWriter out, PutV3ProjectsIdServicesHipchatRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutV3ProjectsIdServicesHipchatRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutV3ProjectsIdServicesHipchatRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutV3ProjectsIdServicesHipchatRequest
   * @throws IOException if the JSON string is invalid with respect to PutV3ProjectsIdServicesHipchatRequest
   */
  public static PutV3ProjectsIdServicesHipchatRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutV3ProjectsIdServicesHipchatRequest.class);
  }

  /**
   * Convert an instance of PutV3ProjectsIdServicesHipchatRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

