/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutV3ApplicationSettingsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutV3ApplicationSettingsRequest {
  /**
   * Determine if developers can push to master
   */
  @JsonAdapter(DefaultBranchProtectionEnum.Adapter.class)
  public enum DefaultBranchProtectionEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    DefaultBranchProtectionEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultBranchProtectionEnum fromValue(Integer value) {
      for (DefaultBranchProtectionEnum b : DefaultBranchProtectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultBranchProtectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultBranchProtectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultBranchProtectionEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DefaultBranchProtectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DefaultBranchProtectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_BRANCH_PROTECTION = "default_branch_protection";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRANCH_PROTECTION)
  private DefaultBranchProtectionEnum defaultBranchProtection;

  /**
   * The default project visibility
   */
  @JsonAdapter(DefaultProjectVisibilityEnum.Adapter.class)
  public enum DefaultProjectVisibilityEnum {
    NUMBER_0(0),
    
    NUMBER_10(10),
    
    NUMBER_20(20);

    private Integer value;

    DefaultProjectVisibilityEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultProjectVisibilityEnum fromValue(Integer value) {
      for (DefaultProjectVisibilityEnum b : DefaultProjectVisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultProjectVisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultProjectVisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultProjectVisibilityEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DefaultProjectVisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DefaultProjectVisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_PROJECT_VISIBILITY = "default_project_visibility";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PROJECT_VISIBILITY)
  private DefaultProjectVisibilityEnum defaultProjectVisibility;

  /**
   * The default snippet visibility
   */
  @JsonAdapter(DefaultSnippetVisibilityEnum.Adapter.class)
  public enum DefaultSnippetVisibilityEnum {
    NUMBER_0(0),
    
    NUMBER_10(10),
    
    NUMBER_20(20);

    private Integer value;

    DefaultSnippetVisibilityEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultSnippetVisibilityEnum fromValue(Integer value) {
      for (DefaultSnippetVisibilityEnum b : DefaultSnippetVisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultSnippetVisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultSnippetVisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultSnippetVisibilityEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DefaultSnippetVisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DefaultSnippetVisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_SNIPPET_VISIBILITY = "default_snippet_visibility";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SNIPPET_VISIBILITY)
  private DefaultSnippetVisibilityEnum defaultSnippetVisibility;

  /**
   * The default group visibility
   */
  @JsonAdapter(DefaultGroupVisibilityEnum.Adapter.class)
  public enum DefaultGroupVisibilityEnum {
    NUMBER_0(0),
    
    NUMBER_10(10),
    
    NUMBER_20(20);

    private Integer value;

    DefaultGroupVisibilityEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultGroupVisibilityEnum fromValue(Integer value) {
      for (DefaultGroupVisibilityEnum b : DefaultGroupVisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultGroupVisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultGroupVisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultGroupVisibilityEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DefaultGroupVisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DefaultGroupVisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_GROUP_VISIBILITY = "default_group_visibility";
  @SerializedName(SERIALIZED_NAME_DEFAULT_GROUP_VISIBILITY)
  private DefaultGroupVisibilityEnum defaultGroupVisibility;

  public static final String SERIALIZED_NAME_RESTRICTED_VISIBILITY_LEVELS = "restricted_visibility_levels";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_VISIBILITY_LEVELS)
  private List<String> restrictedVisibilityLevels = new ArrayList<>();

  /**
   * Gets or Sets importSources
   */
  @JsonAdapter(String.Adapter.class)
  public enum String {

    private String value;

    String(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static String fromValue(String value) {
      for (String b : String.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<String> {
      @Override
      public void write(final JsonWriter jsonWriter, final String enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public String read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return String.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      String.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IMPORT_SOURCES = "import_sources";
  @SerializedName(SERIALIZED_NAME_IMPORT_SOURCES)
  private ImportSourcesEnum importSources = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISABLED_OAUTH_SIGN_IN_SOURCES = "disabled_oauth_sign_in_sources";
  @SerializedName(SERIALIZED_NAME_DISABLED_OAUTH_SIGN_IN_SOURCES)
  private List<String> disabledOauthSignInSources = new ArrayList<>();

  /**
   * Allow only the selected protocols to be used for Git access.
   */
  @JsonAdapter(EnabledGitAccessProtocolEnum.Adapter.class)
  public enum EnabledGitAccessProtocolEnum {
    SSH("ssh"),
    
    HTTP("http"),
    
    NIL("nil");

    private String value;

    EnabledGitAccessProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnabledGitAccessProtocolEnum fromValue(String value) {
      for (EnabledGitAccessProtocolEnum b : EnabledGitAccessProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnabledGitAccessProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnabledGitAccessProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnabledGitAccessProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnabledGitAccessProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnabledGitAccessProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENABLED_GIT_ACCESS_PROTOCOL = "enabled_git_access_protocol";
  @SerializedName(SERIALIZED_NAME_ENABLED_GIT_ACCESS_PROTOCOL)
  private EnabledGitAccessProtocolEnum enabledGitAccessProtocol;

  public static final String SERIALIZED_NAME_GRAVATAR_ENABLED = "gravatar_enabled";
  @SerializedName(SERIALIZED_NAME_GRAVATAR_ENABLED)
  private Boolean gravatarEnabled;

  public static final String SERIALIZED_NAME_DEFAULT_PROJECTS_LIMIT = "default_projects_limit";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PROJECTS_LIMIT)
  private Integer defaultProjectsLimit;

  public static final String SERIALIZED_NAME_MAX_ATTACHMENT_SIZE = "max_attachment_size";
  @SerializedName(SERIALIZED_NAME_MAX_ATTACHMENT_SIZE)
  private Integer maxAttachmentSize;

  public static final String SERIALIZED_NAME_SESSION_EXPIRE_DELAY = "session_expire_delay";
  @SerializedName(SERIALIZED_NAME_SESSION_EXPIRE_DELAY)
  private Integer sessionExpireDelay;

  public static final String SERIALIZED_NAME_USER_OAUTH_APPLICATIONS = "user_oauth_applications";
  @SerializedName(SERIALIZED_NAME_USER_OAUTH_APPLICATIONS)
  private Boolean userOauthApplications;

  public static final String SERIALIZED_NAME_USER_DEFAULT_EXTERNAL = "user_default_external";
  @SerializedName(SERIALIZED_NAME_USER_DEFAULT_EXTERNAL)
  private Boolean userDefaultExternal;

  public static final String SERIALIZED_NAME_SIGNUP_ENABLED = "signup_enabled";
  @SerializedName(SERIALIZED_NAME_SIGNUP_ENABLED)
  private Boolean signupEnabled;

  public static final String SERIALIZED_NAME_SEND_USER_CONFIRMATION_EMAIL = "send_user_confirmation_email";
  @SerializedName(SERIALIZED_NAME_SEND_USER_CONFIRMATION_EMAIL)
  private Boolean sendUserConfirmationEmail;

  public static final String SERIALIZED_NAME_DOMAIN_WHITELIST = "domain_whitelist";
  @SerializedName(SERIALIZED_NAME_DOMAIN_WHITELIST)
  private String domainWhitelist;

  public static final String SERIALIZED_NAME_DOMAIN_BLACKLIST_ENABLED = "domain_blacklist_enabled";
  @SerializedName(SERIALIZED_NAME_DOMAIN_BLACKLIST_ENABLED)
  private Boolean domainBlacklistEnabled;

  public static final String SERIALIZED_NAME_DOMAIN_BLACKLIST = "domain_blacklist";
  @SerializedName(SERIALIZED_NAME_DOMAIN_BLACKLIST)
  private String domainBlacklist;

  public static final String SERIALIZED_NAME_AFTER_SIGN_UP_TEXT = "after_sign_up_text";
  @SerializedName(SERIALIZED_NAME_AFTER_SIGN_UP_TEXT)
  private String afterSignUpText;

  public static final String SERIALIZED_NAME_SIGNIN_ENABLED = "signin_enabled";
  @SerializedName(SERIALIZED_NAME_SIGNIN_ENABLED)
  private Boolean signinEnabled;

  public static final String SERIALIZED_NAME_REQUIRE_TWO_FACTOR_AUTHENTICATION = "require_two_factor_authentication";
  @SerializedName(SERIALIZED_NAME_REQUIRE_TWO_FACTOR_AUTHENTICATION)
  private Boolean requireTwoFactorAuthentication;

  public static final String SERIALIZED_NAME_TWO_FACTOR_GRACE_PERIOD = "two_factor_grace_period";
  @SerializedName(SERIALIZED_NAME_TWO_FACTOR_GRACE_PERIOD)
  private Integer twoFactorGracePeriod;

  public static final String SERIALIZED_NAME_HOME_PAGE_URL = "home_page_url";
  @SerializedName(SERIALIZED_NAME_HOME_PAGE_URL)
  private String homePageUrl;

  public static final String SERIALIZED_NAME_AFTER_SIGN_OUT_PATH = "after_sign_out_path";
  @SerializedName(SERIALIZED_NAME_AFTER_SIGN_OUT_PATH)
  private String afterSignOutPath;

  public static final String SERIALIZED_NAME_SIGN_IN_TEXT = "sign_in_text";
  @SerializedName(SERIALIZED_NAME_SIGN_IN_TEXT)
  private String signInText;

  public static final String SERIALIZED_NAME_HELP_PAGE_TEXT = "help_page_text";
  @SerializedName(SERIALIZED_NAME_HELP_PAGE_TEXT)
  private String helpPageText;

  public static final String SERIALIZED_NAME_SHARED_RUNNERS_ENABLED = "shared_runners_enabled";
  @SerializedName(SERIALIZED_NAME_SHARED_RUNNERS_ENABLED)
  private Boolean sharedRunnersEnabled;

  public static final String SERIALIZED_NAME_SHARED_RUNNERS_TEXT = "shared_runners_text";
  @SerializedName(SERIALIZED_NAME_SHARED_RUNNERS_TEXT)
  private String sharedRunnersText;

  public static final String SERIALIZED_NAME_MAX_ARTIFACTS_SIZE = "max_artifacts_size";
  @SerializedName(SERIALIZED_NAME_MAX_ARTIFACTS_SIZE)
  private Integer maxArtifactsSize;

  public static final String SERIALIZED_NAME_CONTAINER_REGISTRY_TOKEN_EXPIRE_DELAY = "container_registry_token_expire_delay";
  @SerializedName(SERIALIZED_NAME_CONTAINER_REGISTRY_TOKEN_EXPIRE_DELAY)
  private Integer containerRegistryTokenExpireDelay;

  public static final String SERIALIZED_NAME_METRICS_ENABLED = "metrics_enabled";
  @SerializedName(SERIALIZED_NAME_METRICS_ENABLED)
  private Boolean metricsEnabled;

  public static final String SERIALIZED_NAME_METRICS_HOST = "metrics_host";
  @SerializedName(SERIALIZED_NAME_METRICS_HOST)
  private String metricsHost;

  public static final String SERIALIZED_NAME_METRICS_PORT = "metrics_port";
  @SerializedName(SERIALIZED_NAME_METRICS_PORT)
  private Integer metricsPort;

  public static final String SERIALIZED_NAME_METRICS_POOL_SIZE = "metrics_pool_size";
  @SerializedName(SERIALIZED_NAME_METRICS_POOL_SIZE)
  private Integer metricsPoolSize;

  public static final String SERIALIZED_NAME_METRICS_TIMEOUT = "metrics_timeout";
  @SerializedName(SERIALIZED_NAME_METRICS_TIMEOUT)
  private Integer metricsTimeout;

  public static final String SERIALIZED_NAME_METRICS_METHOD_CALL_THRESHOLD = "metrics_method_call_threshold";
  @SerializedName(SERIALIZED_NAME_METRICS_METHOD_CALL_THRESHOLD)
  private Integer metricsMethodCallThreshold;

  public static final String SERIALIZED_NAME_METRICS_SAMPLE_INTERVAL = "metrics_sample_interval";
  @SerializedName(SERIALIZED_NAME_METRICS_SAMPLE_INTERVAL)
  private Integer metricsSampleInterval;

  public static final String SERIALIZED_NAME_METRICS_PACKET_SIZE = "metrics_packet_size";
  @SerializedName(SERIALIZED_NAME_METRICS_PACKET_SIZE)
  private Integer metricsPacketSize;

  public static final String SERIALIZED_NAME_SIDEKIQ_THROTTLING_ENABLED = "sidekiq_throttling_enabled";
  @SerializedName(SERIALIZED_NAME_SIDEKIQ_THROTTLING_ENABLED)
  private Boolean sidekiqThrottlingEnabled;

  public static final String SERIALIZED_NAME_SIDEKIQ_THROTTLING_QUEUS = "sidekiq_throttling_queus";
  @SerializedName(SERIALIZED_NAME_SIDEKIQ_THROTTLING_QUEUS)
  private List<String> sidekiqThrottlingQueus = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIDEKIQ_THROTTLING_FACTOR = "sidekiq_throttling_factor";
  @SerializedName(SERIALIZED_NAME_SIDEKIQ_THROTTLING_FACTOR)
  private Float sidekiqThrottlingFactor;

  public static final String SERIALIZED_NAME_RECAPTCHA_ENABLED = "recaptcha_enabled";
  @SerializedName(SERIALIZED_NAME_RECAPTCHA_ENABLED)
  private Boolean recaptchaEnabled;

  public static final String SERIALIZED_NAME_RECAPTCHA_SITE_KEY = "recaptcha_site_key";
  @SerializedName(SERIALIZED_NAME_RECAPTCHA_SITE_KEY)
  private String recaptchaSiteKey;

  public static final String SERIALIZED_NAME_RECAPTCHA_PRIVATE_KEY = "recaptcha_private_key";
  @SerializedName(SERIALIZED_NAME_RECAPTCHA_PRIVATE_KEY)
  private String recaptchaPrivateKey;

  public static final String SERIALIZED_NAME_AKISMET_ENABLED = "akismet_enabled";
  @SerializedName(SERIALIZED_NAME_AKISMET_ENABLED)
  private Boolean akismetEnabled;

  public static final String SERIALIZED_NAME_AKISMET_API_KEY = "akismet_api_key";
  @SerializedName(SERIALIZED_NAME_AKISMET_API_KEY)
  private String akismetApiKey;

  public static final String SERIALIZED_NAME_ADMIN_NOTIFICATION_EMAIL = "admin_notification_email";
  @SerializedName(SERIALIZED_NAME_ADMIN_NOTIFICATION_EMAIL)
  private String adminNotificationEmail;

  public static final String SERIALIZED_NAME_SENTRY_ENABLED = "sentry_enabled";
  @SerializedName(SERIALIZED_NAME_SENTRY_ENABLED)
  private Boolean sentryEnabled;

  public static final String SERIALIZED_NAME_SENTRY_DSN = "sentry_dsn";
  @SerializedName(SERIALIZED_NAME_SENTRY_DSN)
  private String sentryDsn;

  public static final String SERIALIZED_NAME_REPOSITORY_STORAGE = "repository_storage";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_STORAGE)
  private String repositoryStorage;

  public static final String SERIALIZED_NAME_REPOSITORY_CHECKS_ENABLED = "repository_checks_enabled";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_CHECKS_ENABLED)
  private Boolean repositoryChecksEnabled;

  public static final String SERIALIZED_NAME_KODING_ENABLED = "koding_enabled";
  @SerializedName(SERIALIZED_NAME_KODING_ENABLED)
  private Boolean kodingEnabled;

  public static final String SERIALIZED_NAME_KODING_URL = "koding_url";
  @SerializedName(SERIALIZED_NAME_KODING_URL)
  private String kodingUrl;

  public static final String SERIALIZED_NAME_PLANTUML_ENABLED = "plantuml_enabled";
  @SerializedName(SERIALIZED_NAME_PLANTUML_ENABLED)
  private Boolean plantumlEnabled;

  public static final String SERIALIZED_NAME_PLANTUML_URL = "plantuml_url";
  @SerializedName(SERIALIZED_NAME_PLANTUML_URL)
  private String plantumlUrl;

  public static final String SERIALIZED_NAME_VERSION_CHECK_ENABLED = "version_check_enabled";
  @SerializedName(SERIALIZED_NAME_VERSION_CHECK_ENABLED)
  private Boolean versionCheckEnabled;

  public static final String SERIALIZED_NAME_EMAIL_AUTHOR_IN_BODY = "email_author_in_body";
  @SerializedName(SERIALIZED_NAME_EMAIL_AUTHOR_IN_BODY)
  private Boolean emailAuthorInBody;

  public static final String SERIALIZED_NAME_HTML_EMAILS_ENABLED = "html_emails_enabled";
  @SerializedName(SERIALIZED_NAME_HTML_EMAILS_ENABLED)
  private Boolean htmlEmailsEnabled;

  public static final String SERIALIZED_NAME_HOUSEKEEPING_ENABLED = "housekeeping_enabled";
  @SerializedName(SERIALIZED_NAME_HOUSEKEEPING_ENABLED)
  private Boolean housekeepingEnabled;

  public static final String SERIALIZED_NAME_HOUSEKEEPING_BITMAPS_ENABLED = "housekeeping_bitmaps_enabled";
  @SerializedName(SERIALIZED_NAME_HOUSEKEEPING_BITMAPS_ENABLED)
  private Boolean housekeepingBitmapsEnabled;

  public static final String SERIALIZED_NAME_HOUSEKEEPING_INCREMENTAL_REPACK_PERIOD = "housekeeping_incremental_repack_period";
  @SerializedName(SERIALIZED_NAME_HOUSEKEEPING_INCREMENTAL_REPACK_PERIOD)
  private Integer housekeepingIncrementalRepackPeriod;

  public static final String SERIALIZED_NAME_HOUSEKEEPING_FULL_REPACK_PERIOD = "housekeeping_full_repack_period";
  @SerializedName(SERIALIZED_NAME_HOUSEKEEPING_FULL_REPACK_PERIOD)
  private Integer housekeepingFullRepackPeriod;

  public static final String SERIALIZED_NAME_HOUSEKEEPING_GC_PERIOD = "housekeeping_gc_period";
  @SerializedName(SERIALIZED_NAME_HOUSEKEEPING_GC_PERIOD)
  private Integer housekeepingGcPeriod;

  public PutV3ApplicationSettingsRequest() {
  }

  public PutV3ApplicationSettingsRequest defaultBranchProtection(DefaultBranchProtectionEnum defaultBranchProtection) {
    this.defaultBranchProtection = defaultBranchProtection;
    return this;
  }

  /**
   * Determine if developers can push to master
   * @return defaultBranchProtection
   */
  @javax.annotation.Nullable
  public DefaultBranchProtectionEnum getDefaultBranchProtection() {
    return defaultBranchProtection;
  }

  public void setDefaultBranchProtection(DefaultBranchProtectionEnum defaultBranchProtection) {
    this.defaultBranchProtection = defaultBranchProtection;
  }


  public PutV3ApplicationSettingsRequest defaultProjectVisibility(DefaultProjectVisibilityEnum defaultProjectVisibility) {
    this.defaultProjectVisibility = defaultProjectVisibility;
    return this;
  }

  /**
   * The default project visibility
   * @return defaultProjectVisibility
   */
  @javax.annotation.Nullable
  public DefaultProjectVisibilityEnum getDefaultProjectVisibility() {
    return defaultProjectVisibility;
  }

  public void setDefaultProjectVisibility(DefaultProjectVisibilityEnum defaultProjectVisibility) {
    this.defaultProjectVisibility = defaultProjectVisibility;
  }


  public PutV3ApplicationSettingsRequest defaultSnippetVisibility(DefaultSnippetVisibilityEnum defaultSnippetVisibility) {
    this.defaultSnippetVisibility = defaultSnippetVisibility;
    return this;
  }

  /**
   * The default snippet visibility
   * @return defaultSnippetVisibility
   */
  @javax.annotation.Nullable
  public DefaultSnippetVisibilityEnum getDefaultSnippetVisibility() {
    return defaultSnippetVisibility;
  }

  public void setDefaultSnippetVisibility(DefaultSnippetVisibilityEnum defaultSnippetVisibility) {
    this.defaultSnippetVisibility = defaultSnippetVisibility;
  }


  public PutV3ApplicationSettingsRequest defaultGroupVisibility(DefaultGroupVisibilityEnum defaultGroupVisibility) {
    this.defaultGroupVisibility = defaultGroupVisibility;
    return this;
  }

  /**
   * The default group visibility
   * @return defaultGroupVisibility
   */
  @javax.annotation.Nullable
  public DefaultGroupVisibilityEnum getDefaultGroupVisibility() {
    return defaultGroupVisibility;
  }

  public void setDefaultGroupVisibility(DefaultGroupVisibilityEnum defaultGroupVisibility) {
    this.defaultGroupVisibility = defaultGroupVisibility;
  }


  public PutV3ApplicationSettingsRequest restrictedVisibilityLevels(List<String> restrictedVisibilityLevels) {
    this.restrictedVisibilityLevels = restrictedVisibilityLevels;
    return this;
  }

  public PutV3ApplicationSettingsRequest addRestrictedVisibilityLevelsItem(String restrictedVisibilityLevelsItem) {
    if (this.restrictedVisibilityLevels == null) {
      this.restrictedVisibilityLevels = new ArrayList<>();
    }
    this.restrictedVisibilityLevels.add(restrictedVisibilityLevelsItem);
    return this;
  }

  /**
   * Selected levels cannot be used by non-admin users for projects or snippets. If the public level is restricted, user profiles are only visible to logged in users.
   * @return restrictedVisibilityLevels
   */
  @javax.annotation.Nullable
  public List<String> getRestrictedVisibilityLevels() {
    return restrictedVisibilityLevels;
  }

  public void setRestrictedVisibilityLevels(List<String> restrictedVisibilityLevels) {
    this.restrictedVisibilityLevels = restrictedVisibilityLevels;
  }


  public PutV3ApplicationSettingsRequest importSources(ImportSourcesEnum importSources) {
    this.importSources = importSources;
    return this;
  }

  public PutV3ApplicationSettingsRequest addImportSourcesItem(String importSourcesItem) {
    if (this.importSources == null) {
      this.importSources = new ArrayList<>();
    }
    this.importSources.add(importSourcesItem);
    return this;
  }

  /**
   * Enabled sources for code import during project creation. OmniAuth must be configured for GitHub, Bitbucket, and GitLab.com
   * @return importSources
   */
  @javax.annotation.Nullable
  public ImportSourcesEnum getImportSources() {
    return importSources;
  }

  public void setImportSources(ImportSourcesEnum importSources) {
    this.importSources = importSources;
  }


  public PutV3ApplicationSettingsRequest disabledOauthSignInSources(List<String> disabledOauthSignInSources) {
    this.disabledOauthSignInSources = disabledOauthSignInSources;
    return this;
  }

  public PutV3ApplicationSettingsRequest addDisabledOauthSignInSourcesItem(String disabledOauthSignInSourcesItem) {
    if (this.disabledOauthSignInSources == null) {
      this.disabledOauthSignInSources = new ArrayList<>();
    }
    this.disabledOauthSignInSources.add(disabledOauthSignInSourcesItem);
    return this;
  }

  /**
   * Disable certain OAuth sign-in sources
   * @return disabledOauthSignInSources
   */
  @javax.annotation.Nullable
  public List<String> getDisabledOauthSignInSources() {
    return disabledOauthSignInSources;
  }

  public void setDisabledOauthSignInSources(List<String> disabledOauthSignInSources) {
    this.disabledOauthSignInSources = disabledOauthSignInSources;
  }


  public PutV3ApplicationSettingsRequest enabledGitAccessProtocol(EnabledGitAccessProtocolEnum enabledGitAccessProtocol) {
    this.enabledGitAccessProtocol = enabledGitAccessProtocol;
    return this;
  }

  /**
   * Allow only the selected protocols to be used for Git access.
   * @return enabledGitAccessProtocol
   */
  @javax.annotation.Nullable
  public EnabledGitAccessProtocolEnum getEnabledGitAccessProtocol() {
    return enabledGitAccessProtocol;
  }

  public void setEnabledGitAccessProtocol(EnabledGitAccessProtocolEnum enabledGitAccessProtocol) {
    this.enabledGitAccessProtocol = enabledGitAccessProtocol;
  }


  public PutV3ApplicationSettingsRequest gravatarEnabled(Boolean gravatarEnabled) {
    this.gravatarEnabled = gravatarEnabled;
    return this;
  }

  /**
   * Flag indicating if the Gravatar service is enabled
   * @return gravatarEnabled
   */
  @javax.annotation.Nullable
  public Boolean getGravatarEnabled() {
    return gravatarEnabled;
  }

  public void setGravatarEnabled(Boolean gravatarEnabled) {
    this.gravatarEnabled = gravatarEnabled;
  }


  public PutV3ApplicationSettingsRequest defaultProjectsLimit(Integer defaultProjectsLimit) {
    this.defaultProjectsLimit = defaultProjectsLimit;
    return this;
  }

  /**
   * The maximum number of personal projects
   * @return defaultProjectsLimit
   */
  @javax.annotation.Nullable
  public Integer getDefaultProjectsLimit() {
    return defaultProjectsLimit;
  }

  public void setDefaultProjectsLimit(Integer defaultProjectsLimit) {
    this.defaultProjectsLimit = defaultProjectsLimit;
  }


  public PutV3ApplicationSettingsRequest maxAttachmentSize(Integer maxAttachmentSize) {
    this.maxAttachmentSize = maxAttachmentSize;
    return this;
  }

  /**
   * Maximum attachment size in MB
   * @return maxAttachmentSize
   */
  @javax.annotation.Nullable
  public Integer getMaxAttachmentSize() {
    return maxAttachmentSize;
  }

  public void setMaxAttachmentSize(Integer maxAttachmentSize) {
    this.maxAttachmentSize = maxAttachmentSize;
  }


  public PutV3ApplicationSettingsRequest sessionExpireDelay(Integer sessionExpireDelay) {
    this.sessionExpireDelay = sessionExpireDelay;
    return this;
  }

  /**
   * Session duration in minutes. GitLab restart is required to apply changes.
   * @return sessionExpireDelay
   */
  @javax.annotation.Nullable
  public Integer getSessionExpireDelay() {
    return sessionExpireDelay;
  }

  public void setSessionExpireDelay(Integer sessionExpireDelay) {
    this.sessionExpireDelay = sessionExpireDelay;
  }


  public PutV3ApplicationSettingsRequest userOauthApplications(Boolean userOauthApplications) {
    this.userOauthApplications = userOauthApplications;
    return this;
  }

  /**
   * Allow users to register any application to use GitLab as an OAuth provider
   * @return userOauthApplications
   */
  @javax.annotation.Nullable
  public Boolean getUserOauthApplications() {
    return userOauthApplications;
  }

  public void setUserOauthApplications(Boolean userOauthApplications) {
    this.userOauthApplications = userOauthApplications;
  }


  public PutV3ApplicationSettingsRequest userDefaultExternal(Boolean userDefaultExternal) {
    this.userDefaultExternal = userDefaultExternal;
    return this;
  }

  /**
   * Newly registered users will by default be external
   * @return userDefaultExternal
   */
  @javax.annotation.Nullable
  public Boolean getUserDefaultExternal() {
    return userDefaultExternal;
  }

  public void setUserDefaultExternal(Boolean userDefaultExternal) {
    this.userDefaultExternal = userDefaultExternal;
  }


  public PutV3ApplicationSettingsRequest signupEnabled(Boolean signupEnabled) {
    this.signupEnabled = signupEnabled;
    return this;
  }

  /**
   * Flag indicating if sign up is enabled
   * @return signupEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSignupEnabled() {
    return signupEnabled;
  }

  public void setSignupEnabled(Boolean signupEnabled) {
    this.signupEnabled = signupEnabled;
  }


  public PutV3ApplicationSettingsRequest sendUserConfirmationEmail(Boolean sendUserConfirmationEmail) {
    this.sendUserConfirmationEmail = sendUserConfirmationEmail;
    return this;
  }

  /**
   * Send confirmation email on sign-up
   * @return sendUserConfirmationEmail
   */
  @javax.annotation.Nullable
  public Boolean getSendUserConfirmationEmail() {
    return sendUserConfirmationEmail;
  }

  public void setSendUserConfirmationEmail(Boolean sendUserConfirmationEmail) {
    this.sendUserConfirmationEmail = sendUserConfirmationEmail;
  }


  public PutV3ApplicationSettingsRequest domainWhitelist(String domainWhitelist) {
    this.domainWhitelist = domainWhitelist;
    return this;
  }

  /**
   * ONLY users with e-mail addresses that match these domain(s) will be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com
   * @return domainWhitelist
   */
  @javax.annotation.Nullable
  public String getDomainWhitelist() {
    return domainWhitelist;
  }

  public void setDomainWhitelist(String domainWhitelist) {
    this.domainWhitelist = domainWhitelist;
  }


  public PutV3ApplicationSettingsRequest domainBlacklistEnabled(Boolean domainBlacklistEnabled) {
    this.domainBlacklistEnabled = domainBlacklistEnabled;
    return this;
  }

  /**
   * Enable domain blacklist for sign ups
   * @return domainBlacklistEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDomainBlacklistEnabled() {
    return domainBlacklistEnabled;
  }

  public void setDomainBlacklistEnabled(Boolean domainBlacklistEnabled) {
    this.domainBlacklistEnabled = domainBlacklistEnabled;
  }


  public PutV3ApplicationSettingsRequest domainBlacklist(String domainBlacklist) {
    this.domainBlacklist = domainBlacklist;
    return this;
  }

  /**
   * Users with e-mail addresses that match these domain(s) will NOT be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com
   * @return domainBlacklist
   */
  @javax.annotation.Nonnull
  public String getDomainBlacklist() {
    return domainBlacklist;
  }

  public void setDomainBlacklist(String domainBlacklist) {
    this.domainBlacklist = domainBlacklist;
  }


  public PutV3ApplicationSettingsRequest afterSignUpText(String afterSignUpText) {
    this.afterSignUpText = afterSignUpText;
    return this;
  }

  /**
   * Text shown after sign up
   * @return afterSignUpText
   */
  @javax.annotation.Nullable
  public String getAfterSignUpText() {
    return afterSignUpText;
  }

  public void setAfterSignUpText(String afterSignUpText) {
    this.afterSignUpText = afterSignUpText;
  }


  public PutV3ApplicationSettingsRequest signinEnabled(Boolean signinEnabled) {
    this.signinEnabled = signinEnabled;
    return this;
  }

  /**
   * Flag indicating if sign in is enabled
   * @return signinEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSigninEnabled() {
    return signinEnabled;
  }

  public void setSigninEnabled(Boolean signinEnabled) {
    this.signinEnabled = signinEnabled;
  }


  public PutV3ApplicationSettingsRequest requireTwoFactorAuthentication(Boolean requireTwoFactorAuthentication) {
    this.requireTwoFactorAuthentication = requireTwoFactorAuthentication;
    return this;
  }

  /**
   * Require all users to setup Two-factor authentication
   * @return requireTwoFactorAuthentication
   */
  @javax.annotation.Nullable
  public Boolean getRequireTwoFactorAuthentication() {
    return requireTwoFactorAuthentication;
  }

  public void setRequireTwoFactorAuthentication(Boolean requireTwoFactorAuthentication) {
    this.requireTwoFactorAuthentication = requireTwoFactorAuthentication;
  }


  public PutV3ApplicationSettingsRequest twoFactorGracePeriod(Integer twoFactorGracePeriod) {
    this.twoFactorGracePeriod = twoFactorGracePeriod;
    return this;
  }

  /**
   * Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication
   * @return twoFactorGracePeriod
   */
  @javax.annotation.Nonnull
  public Integer getTwoFactorGracePeriod() {
    return twoFactorGracePeriod;
  }

  public void setTwoFactorGracePeriod(Integer twoFactorGracePeriod) {
    this.twoFactorGracePeriod = twoFactorGracePeriod;
  }


  public PutV3ApplicationSettingsRequest homePageUrl(String homePageUrl) {
    this.homePageUrl = homePageUrl;
    return this;
  }

  /**
   * We will redirect non-logged in users to this page
   * @return homePageUrl
   */
  @javax.annotation.Nullable
  public String getHomePageUrl() {
    return homePageUrl;
  }

  public void setHomePageUrl(String homePageUrl) {
    this.homePageUrl = homePageUrl;
  }


  public PutV3ApplicationSettingsRequest afterSignOutPath(String afterSignOutPath) {
    this.afterSignOutPath = afterSignOutPath;
    return this;
  }

  /**
   * We will redirect users to this page after they sign out
   * @return afterSignOutPath
   */
  @javax.annotation.Nullable
  public String getAfterSignOutPath() {
    return afterSignOutPath;
  }

  public void setAfterSignOutPath(String afterSignOutPath) {
    this.afterSignOutPath = afterSignOutPath;
  }


  public PutV3ApplicationSettingsRequest signInText(String signInText) {
    this.signInText = signInText;
    return this;
  }

  /**
   * The sign in text of the GitLab application
   * @return signInText
   */
  @javax.annotation.Nullable
  public String getSignInText() {
    return signInText;
  }

  public void setSignInText(String signInText) {
    this.signInText = signInText;
  }


  public PutV3ApplicationSettingsRequest helpPageText(String helpPageText) {
    this.helpPageText = helpPageText;
    return this;
  }

  /**
   * Custom text displayed on the help page
   * @return helpPageText
   */
  @javax.annotation.Nullable
  public String getHelpPageText() {
    return helpPageText;
  }

  public void setHelpPageText(String helpPageText) {
    this.helpPageText = helpPageText;
  }


  public PutV3ApplicationSettingsRequest sharedRunnersEnabled(Boolean sharedRunnersEnabled) {
    this.sharedRunnersEnabled = sharedRunnersEnabled;
    return this;
  }

  /**
   * Enable shared runners for new projects
   * @return sharedRunnersEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSharedRunnersEnabled() {
    return sharedRunnersEnabled;
  }

  public void setSharedRunnersEnabled(Boolean sharedRunnersEnabled) {
    this.sharedRunnersEnabled = sharedRunnersEnabled;
  }


  public PutV3ApplicationSettingsRequest sharedRunnersText(String sharedRunnersText) {
    this.sharedRunnersText = sharedRunnersText;
    return this;
  }

  /**
   * Shared runners text 
   * @return sharedRunnersText
   */
  @javax.annotation.Nonnull
  public String getSharedRunnersText() {
    return sharedRunnersText;
  }

  public void setSharedRunnersText(String sharedRunnersText) {
    this.sharedRunnersText = sharedRunnersText;
  }


  public PutV3ApplicationSettingsRequest maxArtifactsSize(Integer maxArtifactsSize) {
    this.maxArtifactsSize = maxArtifactsSize;
    return this;
  }

  /**
   * Set the maximum file size each build&#39;s artifacts can have
   * @return maxArtifactsSize
   */
  @javax.annotation.Nullable
  public Integer getMaxArtifactsSize() {
    return maxArtifactsSize;
  }

  public void setMaxArtifactsSize(Integer maxArtifactsSize) {
    this.maxArtifactsSize = maxArtifactsSize;
  }


  public PutV3ApplicationSettingsRequest containerRegistryTokenExpireDelay(Integer containerRegistryTokenExpireDelay) {
    this.containerRegistryTokenExpireDelay = containerRegistryTokenExpireDelay;
    return this;
  }

  /**
   * Authorization token duration (minutes)
   * @return containerRegistryTokenExpireDelay
   */
  @javax.annotation.Nullable
  public Integer getContainerRegistryTokenExpireDelay() {
    return containerRegistryTokenExpireDelay;
  }

  public void setContainerRegistryTokenExpireDelay(Integer containerRegistryTokenExpireDelay) {
    this.containerRegistryTokenExpireDelay = containerRegistryTokenExpireDelay;
  }


  public PutV3ApplicationSettingsRequest metricsEnabled(Boolean metricsEnabled) {
    this.metricsEnabled = metricsEnabled;
    return this;
  }

  /**
   * Enable the InfluxDB metrics
   * @return metricsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMetricsEnabled() {
    return metricsEnabled;
  }

  public void setMetricsEnabled(Boolean metricsEnabled) {
    this.metricsEnabled = metricsEnabled;
  }


  public PutV3ApplicationSettingsRequest metricsHost(String metricsHost) {
    this.metricsHost = metricsHost;
    return this;
  }

  /**
   * The InfluxDB host
   * @return metricsHost
   */
  @javax.annotation.Nonnull
  public String getMetricsHost() {
    return metricsHost;
  }

  public void setMetricsHost(String metricsHost) {
    this.metricsHost = metricsHost;
  }


  public PutV3ApplicationSettingsRequest metricsPort(Integer metricsPort) {
    this.metricsPort = metricsPort;
    return this;
  }

  /**
   * The UDP port to use for connecting to InfluxDB
   * @return metricsPort
   */
  @javax.annotation.Nonnull
  public Integer getMetricsPort() {
    return metricsPort;
  }

  public void setMetricsPort(Integer metricsPort) {
    this.metricsPort = metricsPort;
  }


  public PutV3ApplicationSettingsRequest metricsPoolSize(Integer metricsPoolSize) {
    this.metricsPoolSize = metricsPoolSize;
    return this;
  }

  /**
   * The amount of InfluxDB connections to open
   * @return metricsPoolSize
   */
  @javax.annotation.Nonnull
  public Integer getMetricsPoolSize() {
    return metricsPoolSize;
  }

  public void setMetricsPoolSize(Integer metricsPoolSize) {
    this.metricsPoolSize = metricsPoolSize;
  }


  public PutV3ApplicationSettingsRequest metricsTimeout(Integer metricsTimeout) {
    this.metricsTimeout = metricsTimeout;
    return this;
  }

  /**
   * The amount of seconds after which an InfluxDB connection will time out
   * @return metricsTimeout
   */
  @javax.annotation.Nonnull
  public Integer getMetricsTimeout() {
    return metricsTimeout;
  }

  public void setMetricsTimeout(Integer metricsTimeout) {
    this.metricsTimeout = metricsTimeout;
  }


  public PutV3ApplicationSettingsRequest metricsMethodCallThreshold(Integer metricsMethodCallThreshold) {
    this.metricsMethodCallThreshold = metricsMethodCallThreshold;
    return this;
  }

  /**
   * A method call is only tracked when it takes longer to complete than the given amount of milliseconds.
   * @return metricsMethodCallThreshold
   */
  @javax.annotation.Nonnull
  public Integer getMetricsMethodCallThreshold() {
    return metricsMethodCallThreshold;
  }

  public void setMetricsMethodCallThreshold(Integer metricsMethodCallThreshold) {
    this.metricsMethodCallThreshold = metricsMethodCallThreshold;
  }


  public PutV3ApplicationSettingsRequest metricsSampleInterval(Integer metricsSampleInterval) {
    this.metricsSampleInterval = metricsSampleInterval;
    return this;
  }

  /**
   * The sampling interval in seconds
   * @return metricsSampleInterval
   */
  @javax.annotation.Nonnull
  public Integer getMetricsSampleInterval() {
    return metricsSampleInterval;
  }

  public void setMetricsSampleInterval(Integer metricsSampleInterval) {
    this.metricsSampleInterval = metricsSampleInterval;
  }


  public PutV3ApplicationSettingsRequest metricsPacketSize(Integer metricsPacketSize) {
    this.metricsPacketSize = metricsPacketSize;
    return this;
  }

  /**
   * The amount of points to store in a single UDP packet
   * @return metricsPacketSize
   */
  @javax.annotation.Nonnull
  public Integer getMetricsPacketSize() {
    return metricsPacketSize;
  }

  public void setMetricsPacketSize(Integer metricsPacketSize) {
    this.metricsPacketSize = metricsPacketSize;
  }


  public PutV3ApplicationSettingsRequest sidekiqThrottlingEnabled(Boolean sidekiqThrottlingEnabled) {
    this.sidekiqThrottlingEnabled = sidekiqThrottlingEnabled;
    return this;
  }

  /**
   * Enable Sidekiq Job Throttling
   * @return sidekiqThrottlingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSidekiqThrottlingEnabled() {
    return sidekiqThrottlingEnabled;
  }

  public void setSidekiqThrottlingEnabled(Boolean sidekiqThrottlingEnabled) {
    this.sidekiqThrottlingEnabled = sidekiqThrottlingEnabled;
  }


  public PutV3ApplicationSettingsRequest sidekiqThrottlingQueus(List<String> sidekiqThrottlingQueus) {
    this.sidekiqThrottlingQueus = sidekiqThrottlingQueus;
    return this;
  }

  public PutV3ApplicationSettingsRequest addSidekiqThrottlingQueusItem(String sidekiqThrottlingQueusItem) {
    if (this.sidekiqThrottlingQueus == null) {
      this.sidekiqThrottlingQueus = new ArrayList<>();
    }
    this.sidekiqThrottlingQueus.add(sidekiqThrottlingQueusItem);
    return this;
  }

  /**
   * Choose which queues you wish to throttle
   * @return sidekiqThrottlingQueus
   */
  @javax.annotation.Nonnull
  public List<String> getSidekiqThrottlingQueus() {
    return sidekiqThrottlingQueus;
  }

  public void setSidekiqThrottlingQueus(List<String> sidekiqThrottlingQueus) {
    this.sidekiqThrottlingQueus = sidekiqThrottlingQueus;
  }


  public PutV3ApplicationSettingsRequest sidekiqThrottlingFactor(Float sidekiqThrottlingFactor) {
    this.sidekiqThrottlingFactor = sidekiqThrottlingFactor;
    return this;
  }

  /**
   * The factor by which the queues should be throttled. A value between 0.0 and 1.0, exclusive.
   * @return sidekiqThrottlingFactor
   */
  @javax.annotation.Nonnull
  public Float getSidekiqThrottlingFactor() {
    return sidekiqThrottlingFactor;
  }

  public void setSidekiqThrottlingFactor(Float sidekiqThrottlingFactor) {
    this.sidekiqThrottlingFactor = sidekiqThrottlingFactor;
  }


  public PutV3ApplicationSettingsRequest recaptchaEnabled(Boolean recaptchaEnabled) {
    this.recaptchaEnabled = recaptchaEnabled;
    return this;
  }

  /**
   * Helps prevent bots from creating accounts
   * @return recaptchaEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRecaptchaEnabled() {
    return recaptchaEnabled;
  }

  public void setRecaptchaEnabled(Boolean recaptchaEnabled) {
    this.recaptchaEnabled = recaptchaEnabled;
  }


  public PutV3ApplicationSettingsRequest recaptchaSiteKey(String recaptchaSiteKey) {
    this.recaptchaSiteKey = recaptchaSiteKey;
    return this;
  }

  /**
   * Generate site key at http://www.google.com/recaptcha
   * @return recaptchaSiteKey
   */
  @javax.annotation.Nonnull
  public String getRecaptchaSiteKey() {
    return recaptchaSiteKey;
  }

  public void setRecaptchaSiteKey(String recaptchaSiteKey) {
    this.recaptchaSiteKey = recaptchaSiteKey;
  }


  public PutV3ApplicationSettingsRequest recaptchaPrivateKey(String recaptchaPrivateKey) {
    this.recaptchaPrivateKey = recaptchaPrivateKey;
    return this;
  }

  /**
   * Generate private key at http://www.google.com/recaptcha
   * @return recaptchaPrivateKey
   */
  @javax.annotation.Nonnull
  public String getRecaptchaPrivateKey() {
    return recaptchaPrivateKey;
  }

  public void setRecaptchaPrivateKey(String recaptchaPrivateKey) {
    this.recaptchaPrivateKey = recaptchaPrivateKey;
  }


  public PutV3ApplicationSettingsRequest akismetEnabled(Boolean akismetEnabled) {
    this.akismetEnabled = akismetEnabled;
    return this;
  }

  /**
   * Helps prevent bots from creating issues
   * @return akismetEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAkismetEnabled() {
    return akismetEnabled;
  }

  public void setAkismetEnabled(Boolean akismetEnabled) {
    this.akismetEnabled = akismetEnabled;
  }


  public PutV3ApplicationSettingsRequest akismetApiKey(String akismetApiKey) {
    this.akismetApiKey = akismetApiKey;
    return this;
  }

  /**
   * Generate API key at http://www.akismet.com
   * @return akismetApiKey
   */
  @javax.annotation.Nonnull
  public String getAkismetApiKey() {
    return akismetApiKey;
  }

  public void setAkismetApiKey(String akismetApiKey) {
    this.akismetApiKey = akismetApiKey;
  }


  public PutV3ApplicationSettingsRequest adminNotificationEmail(String adminNotificationEmail) {
    this.adminNotificationEmail = adminNotificationEmail;
    return this;
  }

  /**
   * Abuse reports will be sent to this address if it is set. Abuse reports are always available in the admin area.
   * @return adminNotificationEmail
   */
  @javax.annotation.Nullable
  public String getAdminNotificationEmail() {
    return adminNotificationEmail;
  }

  public void setAdminNotificationEmail(String adminNotificationEmail) {
    this.adminNotificationEmail = adminNotificationEmail;
  }


  public PutV3ApplicationSettingsRequest sentryEnabled(Boolean sentryEnabled) {
    this.sentryEnabled = sentryEnabled;
    return this;
  }

  /**
   * Sentry is an error reporting and logging tool which is currently not shipped with GitLab, get it here: https://getsentry.com
   * @return sentryEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSentryEnabled() {
    return sentryEnabled;
  }

  public void setSentryEnabled(Boolean sentryEnabled) {
    this.sentryEnabled = sentryEnabled;
  }


  public PutV3ApplicationSettingsRequest sentryDsn(String sentryDsn) {
    this.sentryDsn = sentryDsn;
    return this;
  }

  /**
   * Sentry Data Source Name
   * @return sentryDsn
   */
  @javax.annotation.Nonnull
  public String getSentryDsn() {
    return sentryDsn;
  }

  public void setSentryDsn(String sentryDsn) {
    this.sentryDsn = sentryDsn;
  }


  public PutV3ApplicationSettingsRequest repositoryStorage(String repositoryStorage) {
    this.repositoryStorage = repositoryStorage;
    return this;
  }

  /**
   * Storage paths for new projects
   * @return repositoryStorage
   */
  @javax.annotation.Nullable
  public String getRepositoryStorage() {
    return repositoryStorage;
  }

  public void setRepositoryStorage(String repositoryStorage) {
    this.repositoryStorage = repositoryStorage;
  }


  public PutV3ApplicationSettingsRequest repositoryChecksEnabled(Boolean repositoryChecksEnabled) {
    this.repositoryChecksEnabled = repositoryChecksEnabled;
    return this;
  }

  /**
   * GitLab will periodically run &#39;git fsck&#39; in all project and wiki repositories to look for silent disk corruption issues.
   * @return repositoryChecksEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRepositoryChecksEnabled() {
    return repositoryChecksEnabled;
  }

  public void setRepositoryChecksEnabled(Boolean repositoryChecksEnabled) {
    this.repositoryChecksEnabled = repositoryChecksEnabled;
  }


  public PutV3ApplicationSettingsRequest kodingEnabled(Boolean kodingEnabled) {
    this.kodingEnabled = kodingEnabled;
    return this;
  }

  /**
   * Enable Koding
   * @return kodingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getKodingEnabled() {
    return kodingEnabled;
  }

  public void setKodingEnabled(Boolean kodingEnabled) {
    this.kodingEnabled = kodingEnabled;
  }


  public PutV3ApplicationSettingsRequest kodingUrl(String kodingUrl) {
    this.kodingUrl = kodingUrl;
    return this;
  }

  /**
   * The Koding team URL
   * @return kodingUrl
   */
  @javax.annotation.Nonnull
  public String getKodingUrl() {
    return kodingUrl;
  }

  public void setKodingUrl(String kodingUrl) {
    this.kodingUrl = kodingUrl;
  }


  public PutV3ApplicationSettingsRequest plantumlEnabled(Boolean plantumlEnabled) {
    this.plantumlEnabled = plantumlEnabled;
    return this;
  }

  /**
   * Enable PlantUML
   * @return plantumlEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPlantumlEnabled() {
    return plantumlEnabled;
  }

  public void setPlantumlEnabled(Boolean plantumlEnabled) {
    this.plantumlEnabled = plantumlEnabled;
  }


  public PutV3ApplicationSettingsRequest plantumlUrl(String plantumlUrl) {
    this.plantumlUrl = plantumlUrl;
    return this;
  }

  /**
   * The PlantUML server URL
   * @return plantumlUrl
   */
  @javax.annotation.Nonnull
  public String getPlantumlUrl() {
    return plantumlUrl;
  }

  public void setPlantumlUrl(String plantumlUrl) {
    this.plantumlUrl = plantumlUrl;
  }


  public PutV3ApplicationSettingsRequest versionCheckEnabled(Boolean versionCheckEnabled) {
    this.versionCheckEnabled = versionCheckEnabled;
    return this;
  }

  /**
   * Let GitLab inform you when an update is available.
   * @return versionCheckEnabled
   */
  @javax.annotation.Nullable
  public Boolean getVersionCheckEnabled() {
    return versionCheckEnabled;
  }

  public void setVersionCheckEnabled(Boolean versionCheckEnabled) {
    this.versionCheckEnabled = versionCheckEnabled;
  }


  public PutV3ApplicationSettingsRequest emailAuthorInBody(Boolean emailAuthorInBody) {
    this.emailAuthorInBody = emailAuthorInBody;
    return this;
  }

  /**
   * Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
   * @return emailAuthorInBody
   */
  @javax.annotation.Nullable
  public Boolean getEmailAuthorInBody() {
    return emailAuthorInBody;
  }

  public void setEmailAuthorInBody(Boolean emailAuthorInBody) {
    this.emailAuthorInBody = emailAuthorInBody;
  }


  public PutV3ApplicationSettingsRequest htmlEmailsEnabled(Boolean htmlEmailsEnabled) {
    this.htmlEmailsEnabled = htmlEmailsEnabled;
    return this;
  }

  /**
   * By default GitLab sends emails in HTML and plain text formats so mail clients can choose what format to use. Disable this option if you only want to send emails in plain text format.
   * @return htmlEmailsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getHtmlEmailsEnabled() {
    return htmlEmailsEnabled;
  }

  public void setHtmlEmailsEnabled(Boolean htmlEmailsEnabled) {
    this.htmlEmailsEnabled = htmlEmailsEnabled;
  }


  public PutV3ApplicationSettingsRequest housekeepingEnabled(Boolean housekeepingEnabled) {
    this.housekeepingEnabled = housekeepingEnabled;
    return this;
  }

  /**
   * Enable automatic repository housekeeping (git repack, git gc)
   * @return housekeepingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getHousekeepingEnabled() {
    return housekeepingEnabled;
  }

  public void setHousekeepingEnabled(Boolean housekeepingEnabled) {
    this.housekeepingEnabled = housekeepingEnabled;
  }


  public PutV3ApplicationSettingsRequest housekeepingBitmapsEnabled(Boolean housekeepingBitmapsEnabled) {
    this.housekeepingBitmapsEnabled = housekeepingBitmapsEnabled;
    return this;
  }

  /**
   * Creating pack file bitmaps makes housekeeping take a little longer but bitmaps should accelerate &#39;git clone&#39; performance.
   * @return housekeepingBitmapsEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getHousekeepingBitmapsEnabled() {
    return housekeepingBitmapsEnabled;
  }

  public void setHousekeepingBitmapsEnabled(Boolean housekeepingBitmapsEnabled) {
    this.housekeepingBitmapsEnabled = housekeepingBitmapsEnabled;
  }


  public PutV3ApplicationSettingsRequest housekeepingIncrementalRepackPeriod(Integer housekeepingIncrementalRepackPeriod) {
    this.housekeepingIncrementalRepackPeriod = housekeepingIncrementalRepackPeriod;
    return this;
  }

  /**
   * Number of Git pushes after which an incremental &#39;git repack&#39; is run.
   * @return housekeepingIncrementalRepackPeriod
   */
  @javax.annotation.Nonnull
  public Integer getHousekeepingIncrementalRepackPeriod() {
    return housekeepingIncrementalRepackPeriod;
  }

  public void setHousekeepingIncrementalRepackPeriod(Integer housekeepingIncrementalRepackPeriod) {
    this.housekeepingIncrementalRepackPeriod = housekeepingIncrementalRepackPeriod;
  }


  public PutV3ApplicationSettingsRequest housekeepingFullRepackPeriod(Integer housekeepingFullRepackPeriod) {
    this.housekeepingFullRepackPeriod = housekeepingFullRepackPeriod;
    return this;
  }

  /**
   * Number of Git pushes after which a full &#39;git repack&#39; is run.
   * @return housekeepingFullRepackPeriod
   */
  @javax.annotation.Nonnull
  public Integer getHousekeepingFullRepackPeriod() {
    return housekeepingFullRepackPeriod;
  }

  public void setHousekeepingFullRepackPeriod(Integer housekeepingFullRepackPeriod) {
    this.housekeepingFullRepackPeriod = housekeepingFullRepackPeriod;
  }


  public PutV3ApplicationSettingsRequest housekeepingGcPeriod(Integer housekeepingGcPeriod) {
    this.housekeepingGcPeriod = housekeepingGcPeriod;
    return this;
  }

  /**
   * Number of Git pushes after which &#39;git gc&#39; is run.
   * @return housekeepingGcPeriod
   */
  @javax.annotation.Nonnull
  public Integer getHousekeepingGcPeriod() {
    return housekeepingGcPeriod;
  }

  public void setHousekeepingGcPeriod(Integer housekeepingGcPeriod) {
    this.housekeepingGcPeriod = housekeepingGcPeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutV3ApplicationSettingsRequest putV3ApplicationSettingsRequest = (PutV3ApplicationSettingsRequest) o;
    return Objects.equals(this.defaultBranchProtection, putV3ApplicationSettingsRequest.defaultBranchProtection) &&
        Objects.equals(this.defaultProjectVisibility, putV3ApplicationSettingsRequest.defaultProjectVisibility) &&
        Objects.equals(this.defaultSnippetVisibility, putV3ApplicationSettingsRequest.defaultSnippetVisibility) &&
        Objects.equals(this.defaultGroupVisibility, putV3ApplicationSettingsRequest.defaultGroupVisibility) &&
        Objects.equals(this.restrictedVisibilityLevels, putV3ApplicationSettingsRequest.restrictedVisibilityLevels) &&
        Objects.equals(this.importSources, putV3ApplicationSettingsRequest.importSources) &&
        Objects.equals(this.disabledOauthSignInSources, putV3ApplicationSettingsRequest.disabledOauthSignInSources) &&
        Objects.equals(this.enabledGitAccessProtocol, putV3ApplicationSettingsRequest.enabledGitAccessProtocol) &&
        Objects.equals(this.gravatarEnabled, putV3ApplicationSettingsRequest.gravatarEnabled) &&
        Objects.equals(this.defaultProjectsLimit, putV3ApplicationSettingsRequest.defaultProjectsLimit) &&
        Objects.equals(this.maxAttachmentSize, putV3ApplicationSettingsRequest.maxAttachmentSize) &&
        Objects.equals(this.sessionExpireDelay, putV3ApplicationSettingsRequest.sessionExpireDelay) &&
        Objects.equals(this.userOauthApplications, putV3ApplicationSettingsRequest.userOauthApplications) &&
        Objects.equals(this.userDefaultExternal, putV3ApplicationSettingsRequest.userDefaultExternal) &&
        Objects.equals(this.signupEnabled, putV3ApplicationSettingsRequest.signupEnabled) &&
        Objects.equals(this.sendUserConfirmationEmail, putV3ApplicationSettingsRequest.sendUserConfirmationEmail) &&
        Objects.equals(this.domainWhitelist, putV3ApplicationSettingsRequest.domainWhitelist) &&
        Objects.equals(this.domainBlacklistEnabled, putV3ApplicationSettingsRequest.domainBlacklistEnabled) &&
        Objects.equals(this.domainBlacklist, putV3ApplicationSettingsRequest.domainBlacklist) &&
        Objects.equals(this.afterSignUpText, putV3ApplicationSettingsRequest.afterSignUpText) &&
        Objects.equals(this.signinEnabled, putV3ApplicationSettingsRequest.signinEnabled) &&
        Objects.equals(this.requireTwoFactorAuthentication, putV3ApplicationSettingsRequest.requireTwoFactorAuthentication) &&
        Objects.equals(this.twoFactorGracePeriod, putV3ApplicationSettingsRequest.twoFactorGracePeriod) &&
        Objects.equals(this.homePageUrl, putV3ApplicationSettingsRequest.homePageUrl) &&
        Objects.equals(this.afterSignOutPath, putV3ApplicationSettingsRequest.afterSignOutPath) &&
        Objects.equals(this.signInText, putV3ApplicationSettingsRequest.signInText) &&
        Objects.equals(this.helpPageText, putV3ApplicationSettingsRequest.helpPageText) &&
        Objects.equals(this.sharedRunnersEnabled, putV3ApplicationSettingsRequest.sharedRunnersEnabled) &&
        Objects.equals(this.sharedRunnersText, putV3ApplicationSettingsRequest.sharedRunnersText) &&
        Objects.equals(this.maxArtifactsSize, putV3ApplicationSettingsRequest.maxArtifactsSize) &&
        Objects.equals(this.containerRegistryTokenExpireDelay, putV3ApplicationSettingsRequest.containerRegistryTokenExpireDelay) &&
        Objects.equals(this.metricsEnabled, putV3ApplicationSettingsRequest.metricsEnabled) &&
        Objects.equals(this.metricsHost, putV3ApplicationSettingsRequest.metricsHost) &&
        Objects.equals(this.metricsPort, putV3ApplicationSettingsRequest.metricsPort) &&
        Objects.equals(this.metricsPoolSize, putV3ApplicationSettingsRequest.metricsPoolSize) &&
        Objects.equals(this.metricsTimeout, putV3ApplicationSettingsRequest.metricsTimeout) &&
        Objects.equals(this.metricsMethodCallThreshold, putV3ApplicationSettingsRequest.metricsMethodCallThreshold) &&
        Objects.equals(this.metricsSampleInterval, putV3ApplicationSettingsRequest.metricsSampleInterval) &&
        Objects.equals(this.metricsPacketSize, putV3ApplicationSettingsRequest.metricsPacketSize) &&
        Objects.equals(this.sidekiqThrottlingEnabled, putV3ApplicationSettingsRequest.sidekiqThrottlingEnabled) &&
        Objects.equals(this.sidekiqThrottlingQueus, putV3ApplicationSettingsRequest.sidekiqThrottlingQueus) &&
        Objects.equals(this.sidekiqThrottlingFactor, putV3ApplicationSettingsRequest.sidekiqThrottlingFactor) &&
        Objects.equals(this.recaptchaEnabled, putV3ApplicationSettingsRequest.recaptchaEnabled) &&
        Objects.equals(this.recaptchaSiteKey, putV3ApplicationSettingsRequest.recaptchaSiteKey) &&
        Objects.equals(this.recaptchaPrivateKey, putV3ApplicationSettingsRequest.recaptchaPrivateKey) &&
        Objects.equals(this.akismetEnabled, putV3ApplicationSettingsRequest.akismetEnabled) &&
        Objects.equals(this.akismetApiKey, putV3ApplicationSettingsRequest.akismetApiKey) &&
        Objects.equals(this.adminNotificationEmail, putV3ApplicationSettingsRequest.adminNotificationEmail) &&
        Objects.equals(this.sentryEnabled, putV3ApplicationSettingsRequest.sentryEnabled) &&
        Objects.equals(this.sentryDsn, putV3ApplicationSettingsRequest.sentryDsn) &&
        Objects.equals(this.repositoryStorage, putV3ApplicationSettingsRequest.repositoryStorage) &&
        Objects.equals(this.repositoryChecksEnabled, putV3ApplicationSettingsRequest.repositoryChecksEnabled) &&
        Objects.equals(this.kodingEnabled, putV3ApplicationSettingsRequest.kodingEnabled) &&
        Objects.equals(this.kodingUrl, putV3ApplicationSettingsRequest.kodingUrl) &&
        Objects.equals(this.plantumlEnabled, putV3ApplicationSettingsRequest.plantumlEnabled) &&
        Objects.equals(this.plantumlUrl, putV3ApplicationSettingsRequest.plantumlUrl) &&
        Objects.equals(this.versionCheckEnabled, putV3ApplicationSettingsRequest.versionCheckEnabled) &&
        Objects.equals(this.emailAuthorInBody, putV3ApplicationSettingsRequest.emailAuthorInBody) &&
        Objects.equals(this.htmlEmailsEnabled, putV3ApplicationSettingsRequest.htmlEmailsEnabled) &&
        Objects.equals(this.housekeepingEnabled, putV3ApplicationSettingsRequest.housekeepingEnabled) &&
        Objects.equals(this.housekeepingBitmapsEnabled, putV3ApplicationSettingsRequest.housekeepingBitmapsEnabled) &&
        Objects.equals(this.housekeepingIncrementalRepackPeriod, putV3ApplicationSettingsRequest.housekeepingIncrementalRepackPeriod) &&
        Objects.equals(this.housekeepingFullRepackPeriod, putV3ApplicationSettingsRequest.housekeepingFullRepackPeriod) &&
        Objects.equals(this.housekeepingGcPeriod, putV3ApplicationSettingsRequest.housekeepingGcPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultBranchProtection, defaultProjectVisibility, defaultSnippetVisibility, defaultGroupVisibility, restrictedVisibilityLevels, importSources, disabledOauthSignInSources, enabledGitAccessProtocol, gravatarEnabled, defaultProjectsLimit, maxAttachmentSize, sessionExpireDelay, userOauthApplications, userDefaultExternal, signupEnabled, sendUserConfirmationEmail, domainWhitelist, domainBlacklistEnabled, domainBlacklist, afterSignUpText, signinEnabled, requireTwoFactorAuthentication, twoFactorGracePeriod, homePageUrl, afterSignOutPath, signInText, helpPageText, sharedRunnersEnabled, sharedRunnersText, maxArtifactsSize, containerRegistryTokenExpireDelay, metricsEnabled, metricsHost, metricsPort, metricsPoolSize, metricsTimeout, metricsMethodCallThreshold, metricsSampleInterval, metricsPacketSize, sidekiqThrottlingEnabled, sidekiqThrottlingQueus, sidekiqThrottlingFactor, recaptchaEnabled, recaptchaSiteKey, recaptchaPrivateKey, akismetEnabled, akismetApiKey, adminNotificationEmail, sentryEnabled, sentryDsn, repositoryStorage, repositoryChecksEnabled, kodingEnabled, kodingUrl, plantumlEnabled, plantumlUrl, versionCheckEnabled, emailAuthorInBody, htmlEmailsEnabled, housekeepingEnabled, housekeepingBitmapsEnabled, housekeepingIncrementalRepackPeriod, housekeepingFullRepackPeriod, housekeepingGcPeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutV3ApplicationSettingsRequest {\n");
    sb.append("    defaultBranchProtection: ").append(toIndentedString(defaultBranchProtection)).append("\n");
    sb.append("    defaultProjectVisibility: ").append(toIndentedString(defaultProjectVisibility)).append("\n");
    sb.append("    defaultSnippetVisibility: ").append(toIndentedString(defaultSnippetVisibility)).append("\n");
    sb.append("    defaultGroupVisibility: ").append(toIndentedString(defaultGroupVisibility)).append("\n");
    sb.append("    restrictedVisibilityLevels: ").append(toIndentedString(restrictedVisibilityLevels)).append("\n");
    sb.append("    importSources: ").append(toIndentedString(importSources)).append("\n");
    sb.append("    disabledOauthSignInSources: ").append(toIndentedString(disabledOauthSignInSources)).append("\n");
    sb.append("    enabledGitAccessProtocol: ").append(toIndentedString(enabledGitAccessProtocol)).append("\n");
    sb.append("    gravatarEnabled: ").append(toIndentedString(gravatarEnabled)).append("\n");
    sb.append("    defaultProjectsLimit: ").append(toIndentedString(defaultProjectsLimit)).append("\n");
    sb.append("    maxAttachmentSize: ").append(toIndentedString(maxAttachmentSize)).append("\n");
    sb.append("    sessionExpireDelay: ").append(toIndentedString(sessionExpireDelay)).append("\n");
    sb.append("    userOauthApplications: ").append(toIndentedString(userOauthApplications)).append("\n");
    sb.append("    userDefaultExternal: ").append(toIndentedString(userDefaultExternal)).append("\n");
    sb.append("    signupEnabled: ").append(toIndentedString(signupEnabled)).append("\n");
    sb.append("    sendUserConfirmationEmail: ").append(toIndentedString(sendUserConfirmationEmail)).append("\n");
    sb.append("    domainWhitelist: ").append(toIndentedString(domainWhitelist)).append("\n");
    sb.append("    domainBlacklistEnabled: ").append(toIndentedString(domainBlacklistEnabled)).append("\n");
    sb.append("    domainBlacklist: ").append(toIndentedString(domainBlacklist)).append("\n");
    sb.append("    afterSignUpText: ").append(toIndentedString(afterSignUpText)).append("\n");
    sb.append("    signinEnabled: ").append(toIndentedString(signinEnabled)).append("\n");
    sb.append("    requireTwoFactorAuthentication: ").append(toIndentedString(requireTwoFactorAuthentication)).append("\n");
    sb.append("    twoFactorGracePeriod: ").append(toIndentedString(twoFactorGracePeriod)).append("\n");
    sb.append("    homePageUrl: ").append(toIndentedString(homePageUrl)).append("\n");
    sb.append("    afterSignOutPath: ").append(toIndentedString(afterSignOutPath)).append("\n");
    sb.append("    signInText: ").append(toIndentedString(signInText)).append("\n");
    sb.append("    helpPageText: ").append(toIndentedString(helpPageText)).append("\n");
    sb.append("    sharedRunnersEnabled: ").append(toIndentedString(sharedRunnersEnabled)).append("\n");
    sb.append("    sharedRunnersText: ").append(toIndentedString(sharedRunnersText)).append("\n");
    sb.append("    maxArtifactsSize: ").append(toIndentedString(maxArtifactsSize)).append("\n");
    sb.append("    containerRegistryTokenExpireDelay: ").append(toIndentedString(containerRegistryTokenExpireDelay)).append("\n");
    sb.append("    metricsEnabled: ").append(toIndentedString(metricsEnabled)).append("\n");
    sb.append("    metricsHost: ").append(toIndentedString(metricsHost)).append("\n");
    sb.append("    metricsPort: ").append(toIndentedString(metricsPort)).append("\n");
    sb.append("    metricsPoolSize: ").append(toIndentedString(metricsPoolSize)).append("\n");
    sb.append("    metricsTimeout: ").append(toIndentedString(metricsTimeout)).append("\n");
    sb.append("    metricsMethodCallThreshold: ").append(toIndentedString(metricsMethodCallThreshold)).append("\n");
    sb.append("    metricsSampleInterval: ").append(toIndentedString(metricsSampleInterval)).append("\n");
    sb.append("    metricsPacketSize: ").append(toIndentedString(metricsPacketSize)).append("\n");
    sb.append("    sidekiqThrottlingEnabled: ").append(toIndentedString(sidekiqThrottlingEnabled)).append("\n");
    sb.append("    sidekiqThrottlingQueus: ").append(toIndentedString(sidekiqThrottlingQueus)).append("\n");
    sb.append("    sidekiqThrottlingFactor: ").append(toIndentedString(sidekiqThrottlingFactor)).append("\n");
    sb.append("    recaptchaEnabled: ").append(toIndentedString(recaptchaEnabled)).append("\n");
    sb.append("    recaptchaSiteKey: ").append(toIndentedString(recaptchaSiteKey)).append("\n");
    sb.append("    recaptchaPrivateKey: ").append(toIndentedString(recaptchaPrivateKey)).append("\n");
    sb.append("    akismetEnabled: ").append(toIndentedString(akismetEnabled)).append("\n");
    sb.append("    akismetApiKey: ").append(toIndentedString(akismetApiKey)).append("\n");
    sb.append("    adminNotificationEmail: ").append(toIndentedString(adminNotificationEmail)).append("\n");
    sb.append("    sentryEnabled: ").append(toIndentedString(sentryEnabled)).append("\n");
    sb.append("    sentryDsn: ").append(toIndentedString(sentryDsn)).append("\n");
    sb.append("    repositoryStorage: ").append(toIndentedString(repositoryStorage)).append("\n");
    sb.append("    repositoryChecksEnabled: ").append(toIndentedString(repositoryChecksEnabled)).append("\n");
    sb.append("    kodingEnabled: ").append(toIndentedString(kodingEnabled)).append("\n");
    sb.append("    kodingUrl: ").append(toIndentedString(kodingUrl)).append("\n");
    sb.append("    plantumlEnabled: ").append(toIndentedString(plantumlEnabled)).append("\n");
    sb.append("    plantumlUrl: ").append(toIndentedString(plantumlUrl)).append("\n");
    sb.append("    versionCheckEnabled: ").append(toIndentedString(versionCheckEnabled)).append("\n");
    sb.append("    emailAuthorInBody: ").append(toIndentedString(emailAuthorInBody)).append("\n");
    sb.append("    htmlEmailsEnabled: ").append(toIndentedString(htmlEmailsEnabled)).append("\n");
    sb.append("    housekeepingEnabled: ").append(toIndentedString(housekeepingEnabled)).append("\n");
    sb.append("    housekeepingBitmapsEnabled: ").append(toIndentedString(housekeepingBitmapsEnabled)).append("\n");
    sb.append("    housekeepingIncrementalRepackPeriod: ").append(toIndentedString(housekeepingIncrementalRepackPeriod)).append("\n");
    sb.append("    housekeepingFullRepackPeriod: ").append(toIndentedString(housekeepingFullRepackPeriod)).append("\n");
    sb.append("    housekeepingGcPeriod: ").append(toIndentedString(housekeepingGcPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("default_branch_protection");
    openapiFields.add("default_project_visibility");
    openapiFields.add("default_snippet_visibility");
    openapiFields.add("default_group_visibility");
    openapiFields.add("restricted_visibility_levels");
    openapiFields.add("import_sources");
    openapiFields.add("disabled_oauth_sign_in_sources");
    openapiFields.add("enabled_git_access_protocol");
    openapiFields.add("gravatar_enabled");
    openapiFields.add("default_projects_limit");
    openapiFields.add("max_attachment_size");
    openapiFields.add("session_expire_delay");
    openapiFields.add("user_oauth_applications");
    openapiFields.add("user_default_external");
    openapiFields.add("signup_enabled");
    openapiFields.add("send_user_confirmation_email");
    openapiFields.add("domain_whitelist");
    openapiFields.add("domain_blacklist_enabled");
    openapiFields.add("domain_blacklist");
    openapiFields.add("after_sign_up_text");
    openapiFields.add("signin_enabled");
    openapiFields.add("require_two_factor_authentication");
    openapiFields.add("two_factor_grace_period");
    openapiFields.add("home_page_url");
    openapiFields.add("after_sign_out_path");
    openapiFields.add("sign_in_text");
    openapiFields.add("help_page_text");
    openapiFields.add("shared_runners_enabled");
    openapiFields.add("shared_runners_text");
    openapiFields.add("max_artifacts_size");
    openapiFields.add("container_registry_token_expire_delay");
    openapiFields.add("metrics_enabled");
    openapiFields.add("metrics_host");
    openapiFields.add("metrics_port");
    openapiFields.add("metrics_pool_size");
    openapiFields.add("metrics_timeout");
    openapiFields.add("metrics_method_call_threshold");
    openapiFields.add("metrics_sample_interval");
    openapiFields.add("metrics_packet_size");
    openapiFields.add("sidekiq_throttling_enabled");
    openapiFields.add("sidekiq_throttling_queus");
    openapiFields.add("sidekiq_throttling_factor");
    openapiFields.add("recaptcha_enabled");
    openapiFields.add("recaptcha_site_key");
    openapiFields.add("recaptcha_private_key");
    openapiFields.add("akismet_enabled");
    openapiFields.add("akismet_api_key");
    openapiFields.add("admin_notification_email");
    openapiFields.add("sentry_enabled");
    openapiFields.add("sentry_dsn");
    openapiFields.add("repository_storage");
    openapiFields.add("repository_checks_enabled");
    openapiFields.add("koding_enabled");
    openapiFields.add("koding_url");
    openapiFields.add("plantuml_enabled");
    openapiFields.add("plantuml_url");
    openapiFields.add("version_check_enabled");
    openapiFields.add("email_author_in_body");
    openapiFields.add("html_emails_enabled");
    openapiFields.add("housekeeping_enabled");
    openapiFields.add("housekeeping_bitmaps_enabled");
    openapiFields.add("housekeeping_incremental_repack_period");
    openapiFields.add("housekeeping_full_repack_period");
    openapiFields.add("housekeeping_gc_period");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domain_blacklist");
    openapiRequiredFields.add("two_factor_grace_period");
    openapiRequiredFields.add("shared_runners_text");
    openapiRequiredFields.add("metrics_host");
    openapiRequiredFields.add("metrics_port");
    openapiRequiredFields.add("metrics_pool_size");
    openapiRequiredFields.add("metrics_timeout");
    openapiRequiredFields.add("metrics_method_call_threshold");
    openapiRequiredFields.add("metrics_sample_interval");
    openapiRequiredFields.add("metrics_packet_size");
    openapiRequiredFields.add("sidekiq_throttling_queus");
    openapiRequiredFields.add("sidekiq_throttling_factor");
    openapiRequiredFields.add("recaptcha_site_key");
    openapiRequiredFields.add("recaptcha_private_key");
    openapiRequiredFields.add("akismet_api_key");
    openapiRequiredFields.add("sentry_dsn");
    openapiRequiredFields.add("koding_url");
    openapiRequiredFields.add("plantuml_url");
    openapiRequiredFields.add("housekeeping_bitmaps_enabled");
    openapiRequiredFields.add("housekeeping_incremental_repack_period");
    openapiRequiredFields.add("housekeeping_full_repack_period");
    openapiRequiredFields.add("housekeeping_gc_period");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutV3ApplicationSettingsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutV3ApplicationSettingsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutV3ApplicationSettingsRequest is not found in the empty JSON string", PutV3ApplicationSettingsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutV3ApplicationSettingsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutV3ApplicationSettingsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutV3ApplicationSettingsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `default_branch_protection`
      if (jsonObj.get("default_branch_protection") != null && !jsonObj.get("default_branch_protection").isJsonNull()) {
        DefaultBranchProtectionEnum.validateJsonElement(jsonObj.get("default_branch_protection"));
      }
      // validate the optional field `default_project_visibility`
      if (jsonObj.get("default_project_visibility") != null && !jsonObj.get("default_project_visibility").isJsonNull()) {
        DefaultProjectVisibilityEnum.validateJsonElement(jsonObj.get("default_project_visibility"));
      }
      // validate the optional field `default_snippet_visibility`
      if (jsonObj.get("default_snippet_visibility") != null && !jsonObj.get("default_snippet_visibility").isJsonNull()) {
        DefaultSnippetVisibilityEnum.validateJsonElement(jsonObj.get("default_snippet_visibility"));
      }
      // validate the optional field `default_group_visibility`
      if (jsonObj.get("default_group_visibility") != null && !jsonObj.get("default_group_visibility").isJsonNull()) {
        DefaultGroupVisibilityEnum.validateJsonElement(jsonObj.get("default_group_visibility"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("restricted_visibility_levels") != null && !jsonObj.get("restricted_visibility_levels").isJsonNull() && !jsonObj.get("restricted_visibility_levels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restricted_visibility_levels` to be an array in the JSON string but got `%s`", jsonObj.get("restricted_visibility_levels").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("import_sources") != null && !jsonObj.get("import_sources").isJsonNull() && !jsonObj.get("import_sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `import_sources` to be an array in the JSON string but got `%s`", jsonObj.get("import_sources").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("disabled_oauth_sign_in_sources") != null && !jsonObj.get("disabled_oauth_sign_in_sources").isJsonNull() && !jsonObj.get("disabled_oauth_sign_in_sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `disabled_oauth_sign_in_sources` to be an array in the JSON string but got `%s`", jsonObj.get("disabled_oauth_sign_in_sources").toString()));
      }
      if ((jsonObj.get("enabled_git_access_protocol") != null && !jsonObj.get("enabled_git_access_protocol").isJsonNull()) && !jsonObj.get("enabled_git_access_protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enabled_git_access_protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enabled_git_access_protocol").toString()));
      }
      // validate the optional field `enabled_git_access_protocol`
      if (jsonObj.get("enabled_git_access_protocol") != null && !jsonObj.get("enabled_git_access_protocol").isJsonNull()) {
        EnabledGitAccessProtocolEnum.validateJsonElement(jsonObj.get("enabled_git_access_protocol"));
      }
      if ((jsonObj.get("domain_whitelist") != null && !jsonObj.get("domain_whitelist").isJsonNull()) && !jsonObj.get("domain_whitelist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_whitelist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_whitelist").toString()));
      }
      if (!jsonObj.get("domain_blacklist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_blacklist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_blacklist").toString()));
      }
      if ((jsonObj.get("after_sign_up_text") != null && !jsonObj.get("after_sign_up_text").isJsonNull()) && !jsonObj.get("after_sign_up_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `after_sign_up_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("after_sign_up_text").toString()));
      }
      if ((jsonObj.get("home_page_url") != null && !jsonObj.get("home_page_url").isJsonNull()) && !jsonObj.get("home_page_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_page_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_page_url").toString()));
      }
      if ((jsonObj.get("after_sign_out_path") != null && !jsonObj.get("after_sign_out_path").isJsonNull()) && !jsonObj.get("after_sign_out_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `after_sign_out_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("after_sign_out_path").toString()));
      }
      if ((jsonObj.get("sign_in_text") != null && !jsonObj.get("sign_in_text").isJsonNull()) && !jsonObj.get("sign_in_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sign_in_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sign_in_text").toString()));
      }
      if ((jsonObj.get("help_page_text") != null && !jsonObj.get("help_page_text").isJsonNull()) && !jsonObj.get("help_page_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `help_page_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("help_page_text").toString()));
      }
      if (!jsonObj.get("shared_runners_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shared_runners_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shared_runners_text").toString()));
      }
      if (!jsonObj.get("metrics_host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metrics_host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metrics_host").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("sidekiq_throttling_queus") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("sidekiq_throttling_queus").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sidekiq_throttling_queus` to be an array in the JSON string but got `%s`", jsonObj.get("sidekiq_throttling_queus").toString()));
      }
      if (!jsonObj.get("recaptcha_site_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recaptcha_site_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recaptcha_site_key").toString()));
      }
      if (!jsonObj.get("recaptcha_private_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recaptcha_private_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recaptcha_private_key").toString()));
      }
      if (!jsonObj.get("akismet_api_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `akismet_api_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("akismet_api_key").toString()));
      }
      if ((jsonObj.get("admin_notification_email") != null && !jsonObj.get("admin_notification_email").isJsonNull()) && !jsonObj.get("admin_notification_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_notification_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin_notification_email").toString()));
      }
      if (!jsonObj.get("sentry_dsn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentry_dsn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentry_dsn").toString()));
      }
      if ((jsonObj.get("repository_storage") != null && !jsonObj.get("repository_storage").isJsonNull()) && !jsonObj.get("repository_storage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_storage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository_storage").toString()));
      }
      if (!jsonObj.get("koding_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `koding_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("koding_url").toString()));
      }
      if (!jsonObj.get("plantuml_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plantuml_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plantuml_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutV3ApplicationSettingsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutV3ApplicationSettingsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutV3ApplicationSettingsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutV3ApplicationSettingsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutV3ApplicationSettingsRequest>() {
           @Override
           public void write(JsonWriter out, PutV3ApplicationSettingsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutV3ApplicationSettingsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutV3ApplicationSettingsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutV3ApplicationSettingsRequest
   * @throws IOException if the JSON string is invalid with respect to PutV3ApplicationSettingsRequest
   */
  public static PutV3ApplicationSettingsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutV3ApplicationSettingsRequest.class);
  }

  /**
   * Convert an instance of PutV3ApplicationSettingsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

