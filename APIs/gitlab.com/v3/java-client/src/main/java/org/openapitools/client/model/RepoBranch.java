/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Create branch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepoBranch {
  public static final String SERIALIZED_NAME_COMMIT = "commit";
  @SerializedName(SERIALIZED_NAME_COMMIT)
  private String commit;

  public static final String SERIALIZED_NAME_DEVELOPERS_CAN_MERGE = "developers_can_merge";
  @SerializedName(SERIALIZED_NAME_DEVELOPERS_CAN_MERGE)
  private String developersCanMerge;

  public static final String SERIALIZED_NAME_DEVELOPERS_CAN_PUSH = "developers_can_push";
  @SerializedName(SERIALIZED_NAME_DEVELOPERS_CAN_PUSH)
  private String developersCanPush;

  public static final String SERIALIZED_NAME_MERGED = "merged";
  @SerializedName(SERIALIZED_NAME_MERGED)
  private String merged;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROTECTED = "protected";
  @SerializedName(SERIALIZED_NAME_PROTECTED)
  private String _protected;

  public RepoBranch() {
  }

  public RepoBranch commit(String commit) {
    this.commit = commit;
    return this;
  }

  /**
   * Get commit
   * @return commit
   */
  @javax.annotation.Nullable
  public String getCommit() {
    return commit;
  }

  public void setCommit(String commit) {
    this.commit = commit;
  }


  public RepoBranch developersCanMerge(String developersCanMerge) {
    this.developersCanMerge = developersCanMerge;
    return this;
  }

  /**
   * Get developersCanMerge
   * @return developersCanMerge
   */
  @javax.annotation.Nullable
  public String getDevelopersCanMerge() {
    return developersCanMerge;
  }

  public void setDevelopersCanMerge(String developersCanMerge) {
    this.developersCanMerge = developersCanMerge;
  }


  public RepoBranch developersCanPush(String developersCanPush) {
    this.developersCanPush = developersCanPush;
    return this;
  }

  /**
   * Get developersCanPush
   * @return developersCanPush
   */
  @javax.annotation.Nullable
  public String getDevelopersCanPush() {
    return developersCanPush;
  }

  public void setDevelopersCanPush(String developersCanPush) {
    this.developersCanPush = developersCanPush;
  }


  public RepoBranch merged(String merged) {
    this.merged = merged;
    return this;
  }

  /**
   * Get merged
   * @return merged
   */
  @javax.annotation.Nullable
  public String getMerged() {
    return merged;
  }

  public void setMerged(String merged) {
    this.merged = merged;
  }


  public RepoBranch name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RepoBranch _protected(String _protected) {
    this._protected = _protected;
    return this;
  }

  /**
   * Get _protected
   * @return _protected
   */
  @javax.annotation.Nullable
  public String getProtected() {
    return _protected;
  }

  public void setProtected(String _protected) {
    this._protected = _protected;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepoBranch repoBranch = (RepoBranch) o;
    return Objects.equals(this.commit, repoBranch.commit) &&
        Objects.equals(this.developersCanMerge, repoBranch.developersCanMerge) &&
        Objects.equals(this.developersCanPush, repoBranch.developersCanPush) &&
        Objects.equals(this.merged, repoBranch.merged) &&
        Objects.equals(this.name, repoBranch.name) &&
        Objects.equals(this._protected, repoBranch._protected);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commit, developersCanMerge, developersCanPush, merged, name, _protected);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepoBranch {\n");
    sb.append("    commit: ").append(toIndentedString(commit)).append("\n");
    sb.append("    developersCanMerge: ").append(toIndentedString(developersCanMerge)).append("\n");
    sb.append("    developersCanPush: ").append(toIndentedString(developersCanPush)).append("\n");
    sb.append("    merged: ").append(toIndentedString(merged)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _protected: ").append(toIndentedString(_protected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commit");
    openapiFields.add("developers_can_merge");
    openapiFields.add("developers_can_push");
    openapiFields.add("merged");
    openapiFields.add("name");
    openapiFields.add("protected");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepoBranch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepoBranch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepoBranch is not found in the empty JSON string", RepoBranch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepoBranch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepoBranch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commit") != null && !jsonObj.get("commit").isJsonNull()) && !jsonObj.get("commit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit").toString()));
      }
      if ((jsonObj.get("developers_can_merge") != null && !jsonObj.get("developers_can_merge").isJsonNull()) && !jsonObj.get("developers_can_merge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developers_can_merge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developers_can_merge").toString()));
      }
      if ((jsonObj.get("developers_can_push") != null && !jsonObj.get("developers_can_push").isJsonNull()) && !jsonObj.get("developers_can_push").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developers_can_push` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developers_can_push").toString()));
      }
      if ((jsonObj.get("merged") != null && !jsonObj.get("merged").isJsonNull()) && !jsonObj.get("merged").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merged` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merged").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("protected") != null && !jsonObj.get("protected").isJsonNull()) && !jsonObj.get("protected").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protected` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protected").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepoBranch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepoBranch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepoBranch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepoBranch.class));

       return (TypeAdapter<T>) new TypeAdapter<RepoBranch>() {
           @Override
           public void write(JsonWriter out, RepoBranch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepoBranch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepoBranch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepoBranch
   * @throws IOException if the JSON string is invalid with respect to RepoBranch
   */
  public static RepoBranch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepoBranch.class);
  }

  /**
   * Convert an instance of RepoBranch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

