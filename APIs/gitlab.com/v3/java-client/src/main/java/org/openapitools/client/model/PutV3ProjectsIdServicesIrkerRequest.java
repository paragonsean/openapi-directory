/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutV3ProjectsIdServicesIrkerRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutV3ProjectsIdServicesIrkerRequest {
  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private String recipients;

  public static final String SERIALIZED_NAME_DEFAULT_IRC_URI = "default_irc_uri";
  @SerializedName(SERIALIZED_NAME_DEFAULT_IRC_URI)
  private String defaultIrcUri;

  public static final String SERIALIZED_NAME_SERVER_HOST = "server_host";
  @SerializedName(SERIALIZED_NAME_SERVER_HOST)
  private String serverHost;

  public static final String SERIALIZED_NAME_SERVER_PORT = "server_port";
  @SerializedName(SERIALIZED_NAME_SERVER_PORT)
  private Integer serverPort;

  public static final String SERIALIZED_NAME_COLORIZE_MESSAGES = "colorize_messages";
  @SerializedName(SERIALIZED_NAME_COLORIZE_MESSAGES)
  private Boolean colorizeMessages;

  public static final String SERIALIZED_NAME_PUSH_EVENTS = "push_events";
  @SerializedName(SERIALIZED_NAME_PUSH_EVENTS)
  private String pushEvents;

  public PutV3ProjectsIdServicesIrkerRequest() {
  }

  public PutV3ProjectsIdServicesIrkerRequest recipients(String recipients) {
    this.recipients = recipients;
    return this;
  }

  /**
   * Recipients/channels separated by whitespaces
   * @return recipients
   */
  @javax.annotation.Nonnull
  public String getRecipients() {
    return recipients;
  }

  public void setRecipients(String recipients) {
    this.recipients = recipients;
  }


  public PutV3ProjectsIdServicesIrkerRequest defaultIrcUri(String defaultIrcUri) {
    this.defaultIrcUri = defaultIrcUri;
    return this;
  }

  /**
   * Default: irc://irc.network.net:6697
   * @return defaultIrcUri
   */
  @javax.annotation.Nullable
  public String getDefaultIrcUri() {
    return defaultIrcUri;
  }

  public void setDefaultIrcUri(String defaultIrcUri) {
    this.defaultIrcUri = defaultIrcUri;
  }


  public PutV3ProjectsIdServicesIrkerRequest serverHost(String serverHost) {
    this.serverHost = serverHost;
    return this;
  }

  /**
   * Server host. Default localhost
   * @return serverHost
   */
  @javax.annotation.Nullable
  public String getServerHost() {
    return serverHost;
  }

  public void setServerHost(String serverHost) {
    this.serverHost = serverHost;
  }


  public PutV3ProjectsIdServicesIrkerRequest serverPort(Integer serverPort) {
    this.serverPort = serverPort;
    return this;
  }

  /**
   * Server port. Default 6659
   * @return serverPort
   */
  @javax.annotation.Nullable
  public Integer getServerPort() {
    return serverPort;
  }

  public void setServerPort(Integer serverPort) {
    this.serverPort = serverPort;
  }


  public PutV3ProjectsIdServicesIrkerRequest colorizeMessages(Boolean colorizeMessages) {
    this.colorizeMessages = colorizeMessages;
    return this;
  }

  /**
   * Colorize messages
   * @return colorizeMessages
   */
  @javax.annotation.Nullable
  public Boolean getColorizeMessages() {
    return colorizeMessages;
  }

  public void setColorizeMessages(Boolean colorizeMessages) {
    this.colorizeMessages = colorizeMessages;
  }


  public PutV3ProjectsIdServicesIrkerRequest pushEvents(String pushEvents) {
    this.pushEvents = pushEvents;
    return this;
  }

  /**
   * Event will be triggered by a push to the repository
   * @return pushEvents
   */
  @javax.annotation.Nullable
  public String getPushEvents() {
    return pushEvents;
  }

  public void setPushEvents(String pushEvents) {
    this.pushEvents = pushEvents;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutV3ProjectsIdServicesIrkerRequest putV3ProjectsIdServicesIrkerRequest = (PutV3ProjectsIdServicesIrkerRequest) o;
    return Objects.equals(this.recipients, putV3ProjectsIdServicesIrkerRequest.recipients) &&
        Objects.equals(this.defaultIrcUri, putV3ProjectsIdServicesIrkerRequest.defaultIrcUri) &&
        Objects.equals(this.serverHost, putV3ProjectsIdServicesIrkerRequest.serverHost) &&
        Objects.equals(this.serverPort, putV3ProjectsIdServicesIrkerRequest.serverPort) &&
        Objects.equals(this.colorizeMessages, putV3ProjectsIdServicesIrkerRequest.colorizeMessages) &&
        Objects.equals(this.pushEvents, putV3ProjectsIdServicesIrkerRequest.pushEvents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recipients, defaultIrcUri, serverHost, serverPort, colorizeMessages, pushEvents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutV3ProjectsIdServicesIrkerRequest {\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    defaultIrcUri: ").append(toIndentedString(defaultIrcUri)).append("\n");
    sb.append("    serverHost: ").append(toIndentedString(serverHost)).append("\n");
    sb.append("    serverPort: ").append(toIndentedString(serverPort)).append("\n");
    sb.append("    colorizeMessages: ").append(toIndentedString(colorizeMessages)).append("\n");
    sb.append("    pushEvents: ").append(toIndentedString(pushEvents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("recipients");
    openapiFields.add("default_irc_uri");
    openapiFields.add("server_host");
    openapiFields.add("server_port");
    openapiFields.add("colorize_messages");
    openapiFields.add("push_events");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("recipients");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutV3ProjectsIdServicesIrkerRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutV3ProjectsIdServicesIrkerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutV3ProjectsIdServicesIrkerRequest is not found in the empty JSON string", PutV3ProjectsIdServicesIrkerRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutV3ProjectsIdServicesIrkerRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutV3ProjectsIdServicesIrkerRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutV3ProjectsIdServicesIrkerRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("recipients").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipients` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
      }
      if ((jsonObj.get("default_irc_uri") != null && !jsonObj.get("default_irc_uri").isJsonNull()) && !jsonObj.get("default_irc_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_irc_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_irc_uri").toString()));
      }
      if ((jsonObj.get("server_host") != null && !jsonObj.get("server_host").isJsonNull()) && !jsonObj.get("server_host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server_host").toString()));
      }
      if ((jsonObj.get("push_events") != null && !jsonObj.get("push_events").isJsonNull()) && !jsonObj.get("push_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `push_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("push_events").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutV3ProjectsIdServicesIrkerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutV3ProjectsIdServicesIrkerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutV3ProjectsIdServicesIrkerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutV3ProjectsIdServicesIrkerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutV3ProjectsIdServicesIrkerRequest>() {
           @Override
           public void write(JsonWriter out, PutV3ProjectsIdServicesIrkerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutV3ProjectsIdServicesIrkerRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutV3ProjectsIdServicesIrkerRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutV3ProjectsIdServicesIrkerRequest
   * @throws IOException if the JSON string is invalid with respect to PutV3ProjectsIdServicesIrkerRequest
   */
  public static PutV3ProjectsIdServicesIrkerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutV3ProjectsIdServicesIrkerRequest.class);
  }

  /**
   * Convert an instance of PutV3ProjectsIdServicesIrkerRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

