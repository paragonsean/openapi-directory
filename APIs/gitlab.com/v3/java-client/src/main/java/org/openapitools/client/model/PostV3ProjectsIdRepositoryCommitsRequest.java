/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostV3ProjectsIdRepositoryCommitsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostV3ProjectsIdRepositoryCommitsRequest {
  public static final String SERIALIZED_NAME_BRANCH_NAME = "branch_name";
  @SerializedName(SERIALIZED_NAME_BRANCH_NAME)
  private String branchName;

  public static final String SERIALIZED_NAME_COMMIT_MESSAGE = "commit_message";
  @SerializedName(SERIALIZED_NAME_COMMIT_MESSAGE)
  private String commitMessage;

  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<Object> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHOR_EMAIL = "author_email";
  @SerializedName(SERIALIZED_NAME_AUTHOR_EMAIL)
  private String authorEmail;

  public static final String SERIALIZED_NAME_AUTHOR_NAME = "author_name";
  @SerializedName(SERIALIZED_NAME_AUTHOR_NAME)
  private String authorName;

  public PostV3ProjectsIdRepositoryCommitsRequest() {
  }

  public PostV3ProjectsIdRepositoryCommitsRequest branchName(String branchName) {
    this.branchName = branchName;
    return this;
  }

  /**
   * The name of branch
   * @return branchName
   */
  @javax.annotation.Nonnull
  public String getBranchName() {
    return branchName;
  }

  public void setBranchName(String branchName) {
    this.branchName = branchName;
  }


  public PostV3ProjectsIdRepositoryCommitsRequest commitMessage(String commitMessage) {
    this.commitMessage = commitMessage;
    return this;
  }

  /**
   * Commit message
   * @return commitMessage
   */
  @javax.annotation.Nonnull
  public String getCommitMessage() {
    return commitMessage;
  }

  public void setCommitMessage(String commitMessage) {
    this.commitMessage = commitMessage;
  }


  public PostV3ProjectsIdRepositoryCommitsRequest actions(List<Object> actions) {
    this.actions = actions;
    return this;
  }

  public PostV3ProjectsIdRepositoryCommitsRequest addActionsItem(Object actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * Actions to perform in commit
   * @return actions
   */
  @javax.annotation.Nonnull
  public List<Object> getActions() {
    return actions;
  }

  public void setActions(List<Object> actions) {
    this.actions = actions;
  }


  public PostV3ProjectsIdRepositoryCommitsRequest authorEmail(String authorEmail) {
    this.authorEmail = authorEmail;
    return this;
  }

  /**
   * Author email for commit
   * @return authorEmail
   */
  @javax.annotation.Nullable
  public String getAuthorEmail() {
    return authorEmail;
  }

  public void setAuthorEmail(String authorEmail) {
    this.authorEmail = authorEmail;
  }


  public PostV3ProjectsIdRepositoryCommitsRequest authorName(String authorName) {
    this.authorName = authorName;
    return this;
  }

  /**
   * Author name for commit
   * @return authorName
   */
  @javax.annotation.Nullable
  public String getAuthorName() {
    return authorName;
  }

  public void setAuthorName(String authorName) {
    this.authorName = authorName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostV3ProjectsIdRepositoryCommitsRequest postV3ProjectsIdRepositoryCommitsRequest = (PostV3ProjectsIdRepositoryCommitsRequest) o;
    return Objects.equals(this.branchName, postV3ProjectsIdRepositoryCommitsRequest.branchName) &&
        Objects.equals(this.commitMessage, postV3ProjectsIdRepositoryCommitsRequest.commitMessage) &&
        Objects.equals(this.actions, postV3ProjectsIdRepositoryCommitsRequest.actions) &&
        Objects.equals(this.authorEmail, postV3ProjectsIdRepositoryCommitsRequest.authorEmail) &&
        Objects.equals(this.authorName, postV3ProjectsIdRepositoryCommitsRequest.authorName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branchName, commitMessage, actions, authorEmail, authorName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostV3ProjectsIdRepositoryCommitsRequest {\n");
    sb.append("    branchName: ").append(toIndentedString(branchName)).append("\n");
    sb.append("    commitMessage: ").append(toIndentedString(commitMessage)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    authorEmail: ").append(toIndentedString(authorEmail)).append("\n");
    sb.append("    authorName: ").append(toIndentedString(authorName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("branch_name");
    openapiFields.add("commit_message");
    openapiFields.add("actions");
    openapiFields.add("author_email");
    openapiFields.add("author_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("branch_name");
    openapiRequiredFields.add("commit_message");
    openapiRequiredFields.add("actions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostV3ProjectsIdRepositoryCommitsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostV3ProjectsIdRepositoryCommitsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostV3ProjectsIdRepositoryCommitsRequest is not found in the empty JSON string", PostV3ProjectsIdRepositoryCommitsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostV3ProjectsIdRepositoryCommitsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostV3ProjectsIdRepositoryCommitsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostV3ProjectsIdRepositoryCommitsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("branch_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch_name").toString()));
      }
      if (!jsonObj.get("commit_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_message").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("actions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("actions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
      }
      if ((jsonObj.get("author_email") != null && !jsonObj.get("author_email").isJsonNull()) && !jsonObj.get("author_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_email").toString()));
      }
      if ((jsonObj.get("author_name") != null && !jsonObj.get("author_name").isJsonNull()) && !jsonObj.get("author_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostV3ProjectsIdRepositoryCommitsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostV3ProjectsIdRepositoryCommitsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostV3ProjectsIdRepositoryCommitsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostV3ProjectsIdRepositoryCommitsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostV3ProjectsIdRepositoryCommitsRequest>() {
           @Override
           public void write(JsonWriter out, PostV3ProjectsIdRepositoryCommitsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostV3ProjectsIdRepositoryCommitsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostV3ProjectsIdRepositoryCommitsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostV3ProjectsIdRepositoryCommitsRequest
   * @throws IOException if the JSON string is invalid with respect to PostV3ProjectsIdRepositoryCommitsRequest
   */
  public static PostV3ProjectsIdRepositoryCommitsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostV3ProjectsIdRepositoryCommitsRequest.class);
  }

  /**
   * Convert an instance of PostV3ProjectsIdRepositoryCommitsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

