/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutV3ProjectsIdMilestonesMilestoneIdRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutV3ProjectsIdMilestonesMilestoneIdRequest {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * The state event of the milestone 
   */
  @JsonAdapter(StateEventEnum.Adapter.class)
  public enum StateEventEnum {
    CLOSE("close"),
    
    ACTIVATE("activate");

    private String value;

    StateEventEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEventEnum fromValue(String value) {
      for (StateEventEnum b : StateEventEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEventEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEventEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEventEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEventEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEventEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE_EVENT = "state_event";
  @SerializedName(SERIALIZED_NAME_STATE_EVENT)
  private StateEventEnum stateEvent;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private String dueDate;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public PutV3ProjectsIdMilestonesMilestoneIdRequest() {
  }

  public PutV3ProjectsIdMilestonesMilestoneIdRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the milestone
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PutV3ProjectsIdMilestonesMilestoneIdRequest stateEvent(StateEventEnum stateEvent) {
    this.stateEvent = stateEvent;
    return this;
  }

  /**
   * The state event of the milestone 
   * @return stateEvent
   */
  @javax.annotation.Nullable
  public StateEventEnum getStateEvent() {
    return stateEvent;
  }

  public void setStateEvent(StateEventEnum stateEvent) {
    this.stateEvent = stateEvent;
  }


  public PutV3ProjectsIdMilestonesMilestoneIdRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the milestone
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PutV3ProjectsIdMilestonesMilestoneIdRequest dueDate(String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * The due date of the milestone. The ISO 8601 date format (%Y-%m-%d)
   * @return dueDate
   */
  @javax.annotation.Nullable
  public String getDueDate() {
    return dueDate;
  }

  public void setDueDate(String dueDate) {
    this.dueDate = dueDate;
  }


  public PutV3ProjectsIdMilestonesMilestoneIdRequest startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The start date of the milestone. The ISO 8601 date format (%Y-%m-%d)
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutV3ProjectsIdMilestonesMilestoneIdRequest putV3ProjectsIdMilestonesMilestoneIdRequest = (PutV3ProjectsIdMilestonesMilestoneIdRequest) o;
    return Objects.equals(this.title, putV3ProjectsIdMilestonesMilestoneIdRequest.title) &&
        Objects.equals(this.stateEvent, putV3ProjectsIdMilestonesMilestoneIdRequest.stateEvent) &&
        Objects.equals(this.description, putV3ProjectsIdMilestonesMilestoneIdRequest.description) &&
        Objects.equals(this.dueDate, putV3ProjectsIdMilestonesMilestoneIdRequest.dueDate) &&
        Objects.equals(this.startDate, putV3ProjectsIdMilestonesMilestoneIdRequest.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, stateEvent, description, dueDate, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutV3ProjectsIdMilestonesMilestoneIdRequest {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    stateEvent: ").append(toIndentedString(stateEvent)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("state_event");
    openapiFields.add("description");
    openapiFields.add("due_date");
    openapiFields.add("start_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutV3ProjectsIdMilestonesMilestoneIdRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutV3ProjectsIdMilestonesMilestoneIdRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutV3ProjectsIdMilestonesMilestoneIdRequest is not found in the empty JSON string", PutV3ProjectsIdMilestonesMilestoneIdRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutV3ProjectsIdMilestonesMilestoneIdRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutV3ProjectsIdMilestonesMilestoneIdRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("state_event") != null && !jsonObj.get("state_event").isJsonNull()) && !jsonObj.get("state_event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_event").toString()));
      }
      // validate the optional field `state_event`
      if (jsonObj.get("state_event") != null && !jsonObj.get("state_event").isJsonNull()) {
        StateEventEnum.validateJsonElement(jsonObj.get("state_event"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("due_date") != null && !jsonObj.get("due_date").isJsonNull()) && !jsonObj.get("due_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `due_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("due_date").toString()));
      }
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutV3ProjectsIdMilestonesMilestoneIdRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutV3ProjectsIdMilestonesMilestoneIdRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutV3ProjectsIdMilestonesMilestoneIdRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutV3ProjectsIdMilestonesMilestoneIdRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutV3ProjectsIdMilestonesMilestoneIdRequest>() {
           @Override
           public void write(JsonWriter out, PutV3ProjectsIdMilestonesMilestoneIdRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutV3ProjectsIdMilestonesMilestoneIdRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutV3ProjectsIdMilestonesMilestoneIdRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutV3ProjectsIdMilestonesMilestoneIdRequest
   * @throws IOException if the JSON string is invalid with respect to PutV3ProjectsIdMilestonesMilestoneIdRequest
   */
  public static PutV3ProjectsIdMilestonesMilestoneIdRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutV3ProjectsIdMilestonesMilestoneIdRequest.class);
  }

  /**
   * Convert an instance of PutV3ProjectsIdMilestonesMilestoneIdRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

