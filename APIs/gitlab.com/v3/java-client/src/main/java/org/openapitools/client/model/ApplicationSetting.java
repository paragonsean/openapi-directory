/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Modify application settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationSetting {
  public static final String SERIALIZED_NAME_AFTER_SIGN_OUT_PATH = "after_sign_out_path";
  @SerializedName(SERIALIZED_NAME_AFTER_SIGN_OUT_PATH)
  private String afterSignOutPath;

  public static final String SERIALIZED_NAME_AFTER_SIGN_UP_TEXT = "after_sign_up_text";
  @SerializedName(SERIALIZED_NAME_AFTER_SIGN_UP_TEXT)
  private String afterSignUpText;

  public static final String SERIALIZED_NAME_CONTAINER_REGISTRY_TOKEN_EXPIRE_DELAY = "container_registry_token_expire_delay";
  @SerializedName(SERIALIZED_NAME_CONTAINER_REGISTRY_TOKEN_EXPIRE_DELAY)
  private String containerRegistryTokenExpireDelay;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DEFAULT_BRANCH_PROTECTION = "default_branch_protection";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRANCH_PROTECTION)
  private String defaultBranchProtection;

  public static final String SERIALIZED_NAME_DEFAULT_GROUP_VISIBILITY = "default_group_visibility";
  @SerializedName(SERIALIZED_NAME_DEFAULT_GROUP_VISIBILITY)
  private String defaultGroupVisibility;

  public static final String SERIALIZED_NAME_DEFAULT_PROJECT_VISIBILITY = "default_project_visibility";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PROJECT_VISIBILITY)
  private String defaultProjectVisibility;

  public static final String SERIALIZED_NAME_DEFAULT_PROJECTS_LIMIT = "default_projects_limit";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PROJECTS_LIMIT)
  private String defaultProjectsLimit;

  public static final String SERIALIZED_NAME_DEFAULT_SNIPPET_VISIBILITY = "default_snippet_visibility";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SNIPPET_VISIBILITY)
  private String defaultSnippetVisibility;

  public static final String SERIALIZED_NAME_DOMAIN_BLACKLIST = "domain_blacklist";
  @SerializedName(SERIALIZED_NAME_DOMAIN_BLACKLIST)
  private String domainBlacklist;

  public static final String SERIALIZED_NAME_DOMAIN_BLACKLIST_ENABLED = "domain_blacklist_enabled";
  @SerializedName(SERIALIZED_NAME_DOMAIN_BLACKLIST_ENABLED)
  private String domainBlacklistEnabled;

  public static final String SERIALIZED_NAME_DOMAIN_WHITELIST = "domain_whitelist";
  @SerializedName(SERIALIZED_NAME_DOMAIN_WHITELIST)
  private String domainWhitelist;

  public static final String SERIALIZED_NAME_GRAVATAR_ENABLED = "gravatar_enabled";
  @SerializedName(SERIALIZED_NAME_GRAVATAR_ENABLED)
  private String gravatarEnabled;

  public static final String SERIALIZED_NAME_HOME_PAGE_URL = "home_page_url";
  @SerializedName(SERIALIZED_NAME_HOME_PAGE_URL)
  private String homePageUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KODING_ENABLED = "koding_enabled";
  @SerializedName(SERIALIZED_NAME_KODING_ENABLED)
  private String kodingEnabled;

  public static final String SERIALIZED_NAME_KODING_URL = "koding_url";
  @SerializedName(SERIALIZED_NAME_KODING_URL)
  private String kodingUrl;

  public static final String SERIALIZED_NAME_MAX_ATTACHMENT_SIZE = "max_attachment_size";
  @SerializedName(SERIALIZED_NAME_MAX_ATTACHMENT_SIZE)
  private String maxAttachmentSize;

  public static final String SERIALIZED_NAME_PLANTUML_ENABLED = "plantuml_enabled";
  @SerializedName(SERIALIZED_NAME_PLANTUML_ENABLED)
  private String plantumlEnabled;

  public static final String SERIALIZED_NAME_PLANTUML_URL = "plantuml_url";
  @SerializedName(SERIALIZED_NAME_PLANTUML_URL)
  private String plantumlUrl;

  public static final String SERIALIZED_NAME_REPOSITORY_STORAGE = "repository_storage";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_STORAGE)
  private String repositoryStorage;

  public static final String SERIALIZED_NAME_REPOSITORY_STORAGES = "repository_storages";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_STORAGES)
  private String repositoryStorages;

  public static final String SERIALIZED_NAME_RESTRICTED_VISIBILITY_LEVELS = "restricted_visibility_levels";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_VISIBILITY_LEVELS)
  private String restrictedVisibilityLevels;

  public static final String SERIALIZED_NAME_SESSION_EXPIRE_DELAY = "session_expire_delay";
  @SerializedName(SERIALIZED_NAME_SESSION_EXPIRE_DELAY)
  private String sessionExpireDelay;

  public static final String SERIALIZED_NAME_SIGN_IN_TEXT = "sign_in_text";
  @SerializedName(SERIALIZED_NAME_SIGN_IN_TEXT)
  private String signInText;

  public static final String SERIALIZED_NAME_SIGNIN_ENABLED = "signin_enabled";
  @SerializedName(SERIALIZED_NAME_SIGNIN_ENABLED)
  private String signinEnabled;

  public static final String SERIALIZED_NAME_SIGNUP_ENABLED = "signup_enabled";
  @SerializedName(SERIALIZED_NAME_SIGNUP_ENABLED)
  private String signupEnabled;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_USER_OAUTH_APPLICATIONS = "user_oauth_applications";
  @SerializedName(SERIALIZED_NAME_USER_OAUTH_APPLICATIONS)
  private String userOauthApplications;

  public ApplicationSetting() {
  }

  public ApplicationSetting afterSignOutPath(String afterSignOutPath) {
    this.afterSignOutPath = afterSignOutPath;
    return this;
  }

  /**
   * Get afterSignOutPath
   * @return afterSignOutPath
   */
  @javax.annotation.Nullable
  public String getAfterSignOutPath() {
    return afterSignOutPath;
  }

  public void setAfterSignOutPath(String afterSignOutPath) {
    this.afterSignOutPath = afterSignOutPath;
  }


  public ApplicationSetting afterSignUpText(String afterSignUpText) {
    this.afterSignUpText = afterSignUpText;
    return this;
  }

  /**
   * Get afterSignUpText
   * @return afterSignUpText
   */
  @javax.annotation.Nullable
  public String getAfterSignUpText() {
    return afterSignUpText;
  }

  public void setAfterSignUpText(String afterSignUpText) {
    this.afterSignUpText = afterSignUpText;
  }


  public ApplicationSetting containerRegistryTokenExpireDelay(String containerRegistryTokenExpireDelay) {
    this.containerRegistryTokenExpireDelay = containerRegistryTokenExpireDelay;
    return this;
  }

  /**
   * Get containerRegistryTokenExpireDelay
   * @return containerRegistryTokenExpireDelay
   */
  @javax.annotation.Nullable
  public String getContainerRegistryTokenExpireDelay() {
    return containerRegistryTokenExpireDelay;
  }

  public void setContainerRegistryTokenExpireDelay(String containerRegistryTokenExpireDelay) {
    this.containerRegistryTokenExpireDelay = containerRegistryTokenExpireDelay;
  }


  public ApplicationSetting createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public ApplicationSetting defaultBranchProtection(String defaultBranchProtection) {
    this.defaultBranchProtection = defaultBranchProtection;
    return this;
  }

  /**
   * Get defaultBranchProtection
   * @return defaultBranchProtection
   */
  @javax.annotation.Nullable
  public String getDefaultBranchProtection() {
    return defaultBranchProtection;
  }

  public void setDefaultBranchProtection(String defaultBranchProtection) {
    this.defaultBranchProtection = defaultBranchProtection;
  }


  public ApplicationSetting defaultGroupVisibility(String defaultGroupVisibility) {
    this.defaultGroupVisibility = defaultGroupVisibility;
    return this;
  }

  /**
   * Get defaultGroupVisibility
   * @return defaultGroupVisibility
   */
  @javax.annotation.Nullable
  public String getDefaultGroupVisibility() {
    return defaultGroupVisibility;
  }

  public void setDefaultGroupVisibility(String defaultGroupVisibility) {
    this.defaultGroupVisibility = defaultGroupVisibility;
  }


  public ApplicationSetting defaultProjectVisibility(String defaultProjectVisibility) {
    this.defaultProjectVisibility = defaultProjectVisibility;
    return this;
  }

  /**
   * Get defaultProjectVisibility
   * @return defaultProjectVisibility
   */
  @javax.annotation.Nullable
  public String getDefaultProjectVisibility() {
    return defaultProjectVisibility;
  }

  public void setDefaultProjectVisibility(String defaultProjectVisibility) {
    this.defaultProjectVisibility = defaultProjectVisibility;
  }


  public ApplicationSetting defaultProjectsLimit(String defaultProjectsLimit) {
    this.defaultProjectsLimit = defaultProjectsLimit;
    return this;
  }

  /**
   * Get defaultProjectsLimit
   * @return defaultProjectsLimit
   */
  @javax.annotation.Nullable
  public String getDefaultProjectsLimit() {
    return defaultProjectsLimit;
  }

  public void setDefaultProjectsLimit(String defaultProjectsLimit) {
    this.defaultProjectsLimit = defaultProjectsLimit;
  }


  public ApplicationSetting defaultSnippetVisibility(String defaultSnippetVisibility) {
    this.defaultSnippetVisibility = defaultSnippetVisibility;
    return this;
  }

  /**
   * Get defaultSnippetVisibility
   * @return defaultSnippetVisibility
   */
  @javax.annotation.Nullable
  public String getDefaultSnippetVisibility() {
    return defaultSnippetVisibility;
  }

  public void setDefaultSnippetVisibility(String defaultSnippetVisibility) {
    this.defaultSnippetVisibility = defaultSnippetVisibility;
  }


  public ApplicationSetting domainBlacklist(String domainBlacklist) {
    this.domainBlacklist = domainBlacklist;
    return this;
  }

  /**
   * Get domainBlacklist
   * @return domainBlacklist
   */
  @javax.annotation.Nullable
  public String getDomainBlacklist() {
    return domainBlacklist;
  }

  public void setDomainBlacklist(String domainBlacklist) {
    this.domainBlacklist = domainBlacklist;
  }


  public ApplicationSetting domainBlacklistEnabled(String domainBlacklistEnabled) {
    this.domainBlacklistEnabled = domainBlacklistEnabled;
    return this;
  }

  /**
   * Get domainBlacklistEnabled
   * @return domainBlacklistEnabled
   */
  @javax.annotation.Nullable
  public String getDomainBlacklistEnabled() {
    return domainBlacklistEnabled;
  }

  public void setDomainBlacklistEnabled(String domainBlacklistEnabled) {
    this.domainBlacklistEnabled = domainBlacklistEnabled;
  }


  public ApplicationSetting domainWhitelist(String domainWhitelist) {
    this.domainWhitelist = domainWhitelist;
    return this;
  }

  /**
   * Get domainWhitelist
   * @return domainWhitelist
   */
  @javax.annotation.Nullable
  public String getDomainWhitelist() {
    return domainWhitelist;
  }

  public void setDomainWhitelist(String domainWhitelist) {
    this.domainWhitelist = domainWhitelist;
  }


  public ApplicationSetting gravatarEnabled(String gravatarEnabled) {
    this.gravatarEnabled = gravatarEnabled;
    return this;
  }

  /**
   * Get gravatarEnabled
   * @return gravatarEnabled
   */
  @javax.annotation.Nullable
  public String getGravatarEnabled() {
    return gravatarEnabled;
  }

  public void setGravatarEnabled(String gravatarEnabled) {
    this.gravatarEnabled = gravatarEnabled;
  }


  public ApplicationSetting homePageUrl(String homePageUrl) {
    this.homePageUrl = homePageUrl;
    return this;
  }

  /**
   * Get homePageUrl
   * @return homePageUrl
   */
  @javax.annotation.Nullable
  public String getHomePageUrl() {
    return homePageUrl;
  }

  public void setHomePageUrl(String homePageUrl) {
    this.homePageUrl = homePageUrl;
  }


  public ApplicationSetting id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ApplicationSetting kodingEnabled(String kodingEnabled) {
    this.kodingEnabled = kodingEnabled;
    return this;
  }

  /**
   * Get kodingEnabled
   * @return kodingEnabled
   */
  @javax.annotation.Nullable
  public String getKodingEnabled() {
    return kodingEnabled;
  }

  public void setKodingEnabled(String kodingEnabled) {
    this.kodingEnabled = kodingEnabled;
  }


  public ApplicationSetting kodingUrl(String kodingUrl) {
    this.kodingUrl = kodingUrl;
    return this;
  }

  /**
   * Get kodingUrl
   * @return kodingUrl
   */
  @javax.annotation.Nullable
  public String getKodingUrl() {
    return kodingUrl;
  }

  public void setKodingUrl(String kodingUrl) {
    this.kodingUrl = kodingUrl;
  }


  public ApplicationSetting maxAttachmentSize(String maxAttachmentSize) {
    this.maxAttachmentSize = maxAttachmentSize;
    return this;
  }

  /**
   * Get maxAttachmentSize
   * @return maxAttachmentSize
   */
  @javax.annotation.Nullable
  public String getMaxAttachmentSize() {
    return maxAttachmentSize;
  }

  public void setMaxAttachmentSize(String maxAttachmentSize) {
    this.maxAttachmentSize = maxAttachmentSize;
  }


  public ApplicationSetting plantumlEnabled(String plantumlEnabled) {
    this.plantumlEnabled = plantumlEnabled;
    return this;
  }

  /**
   * Get plantumlEnabled
   * @return plantumlEnabled
   */
  @javax.annotation.Nullable
  public String getPlantumlEnabled() {
    return plantumlEnabled;
  }

  public void setPlantumlEnabled(String plantumlEnabled) {
    this.plantumlEnabled = plantumlEnabled;
  }


  public ApplicationSetting plantumlUrl(String plantumlUrl) {
    this.plantumlUrl = plantumlUrl;
    return this;
  }

  /**
   * Get plantumlUrl
   * @return plantumlUrl
   */
  @javax.annotation.Nullable
  public String getPlantumlUrl() {
    return plantumlUrl;
  }

  public void setPlantumlUrl(String plantumlUrl) {
    this.plantumlUrl = plantumlUrl;
  }


  public ApplicationSetting repositoryStorage(String repositoryStorage) {
    this.repositoryStorage = repositoryStorage;
    return this;
  }

  /**
   * Get repositoryStorage
   * @return repositoryStorage
   */
  @javax.annotation.Nullable
  public String getRepositoryStorage() {
    return repositoryStorage;
  }

  public void setRepositoryStorage(String repositoryStorage) {
    this.repositoryStorage = repositoryStorage;
  }


  public ApplicationSetting repositoryStorages(String repositoryStorages) {
    this.repositoryStorages = repositoryStorages;
    return this;
  }

  /**
   * Get repositoryStorages
   * @return repositoryStorages
   */
  @javax.annotation.Nullable
  public String getRepositoryStorages() {
    return repositoryStorages;
  }

  public void setRepositoryStorages(String repositoryStorages) {
    this.repositoryStorages = repositoryStorages;
  }


  public ApplicationSetting restrictedVisibilityLevels(String restrictedVisibilityLevels) {
    this.restrictedVisibilityLevels = restrictedVisibilityLevels;
    return this;
  }

  /**
   * Get restrictedVisibilityLevels
   * @return restrictedVisibilityLevels
   */
  @javax.annotation.Nullable
  public String getRestrictedVisibilityLevels() {
    return restrictedVisibilityLevels;
  }

  public void setRestrictedVisibilityLevels(String restrictedVisibilityLevels) {
    this.restrictedVisibilityLevels = restrictedVisibilityLevels;
  }


  public ApplicationSetting sessionExpireDelay(String sessionExpireDelay) {
    this.sessionExpireDelay = sessionExpireDelay;
    return this;
  }

  /**
   * Get sessionExpireDelay
   * @return sessionExpireDelay
   */
  @javax.annotation.Nullable
  public String getSessionExpireDelay() {
    return sessionExpireDelay;
  }

  public void setSessionExpireDelay(String sessionExpireDelay) {
    this.sessionExpireDelay = sessionExpireDelay;
  }


  public ApplicationSetting signInText(String signInText) {
    this.signInText = signInText;
    return this;
  }

  /**
   * Get signInText
   * @return signInText
   */
  @javax.annotation.Nullable
  public String getSignInText() {
    return signInText;
  }

  public void setSignInText(String signInText) {
    this.signInText = signInText;
  }


  public ApplicationSetting signinEnabled(String signinEnabled) {
    this.signinEnabled = signinEnabled;
    return this;
  }

  /**
   * Get signinEnabled
   * @return signinEnabled
   */
  @javax.annotation.Nullable
  public String getSigninEnabled() {
    return signinEnabled;
  }

  public void setSigninEnabled(String signinEnabled) {
    this.signinEnabled = signinEnabled;
  }


  public ApplicationSetting signupEnabled(String signupEnabled) {
    this.signupEnabled = signupEnabled;
    return this;
  }

  /**
   * Get signupEnabled
   * @return signupEnabled
   */
  @javax.annotation.Nullable
  public String getSignupEnabled() {
    return signupEnabled;
  }

  public void setSignupEnabled(String signupEnabled) {
    this.signupEnabled = signupEnabled;
  }


  public ApplicationSetting updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public ApplicationSetting userOauthApplications(String userOauthApplications) {
    this.userOauthApplications = userOauthApplications;
    return this;
  }

  /**
   * Get userOauthApplications
   * @return userOauthApplications
   */
  @javax.annotation.Nullable
  public String getUserOauthApplications() {
    return userOauthApplications;
  }

  public void setUserOauthApplications(String userOauthApplications) {
    this.userOauthApplications = userOauthApplications;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationSetting applicationSetting = (ApplicationSetting) o;
    return Objects.equals(this.afterSignOutPath, applicationSetting.afterSignOutPath) &&
        Objects.equals(this.afterSignUpText, applicationSetting.afterSignUpText) &&
        Objects.equals(this.containerRegistryTokenExpireDelay, applicationSetting.containerRegistryTokenExpireDelay) &&
        Objects.equals(this.createdAt, applicationSetting.createdAt) &&
        Objects.equals(this.defaultBranchProtection, applicationSetting.defaultBranchProtection) &&
        Objects.equals(this.defaultGroupVisibility, applicationSetting.defaultGroupVisibility) &&
        Objects.equals(this.defaultProjectVisibility, applicationSetting.defaultProjectVisibility) &&
        Objects.equals(this.defaultProjectsLimit, applicationSetting.defaultProjectsLimit) &&
        Objects.equals(this.defaultSnippetVisibility, applicationSetting.defaultSnippetVisibility) &&
        Objects.equals(this.domainBlacklist, applicationSetting.domainBlacklist) &&
        Objects.equals(this.domainBlacklistEnabled, applicationSetting.domainBlacklistEnabled) &&
        Objects.equals(this.domainWhitelist, applicationSetting.domainWhitelist) &&
        Objects.equals(this.gravatarEnabled, applicationSetting.gravatarEnabled) &&
        Objects.equals(this.homePageUrl, applicationSetting.homePageUrl) &&
        Objects.equals(this.id, applicationSetting.id) &&
        Objects.equals(this.kodingEnabled, applicationSetting.kodingEnabled) &&
        Objects.equals(this.kodingUrl, applicationSetting.kodingUrl) &&
        Objects.equals(this.maxAttachmentSize, applicationSetting.maxAttachmentSize) &&
        Objects.equals(this.plantumlEnabled, applicationSetting.plantumlEnabled) &&
        Objects.equals(this.plantumlUrl, applicationSetting.plantumlUrl) &&
        Objects.equals(this.repositoryStorage, applicationSetting.repositoryStorage) &&
        Objects.equals(this.repositoryStorages, applicationSetting.repositoryStorages) &&
        Objects.equals(this.restrictedVisibilityLevels, applicationSetting.restrictedVisibilityLevels) &&
        Objects.equals(this.sessionExpireDelay, applicationSetting.sessionExpireDelay) &&
        Objects.equals(this.signInText, applicationSetting.signInText) &&
        Objects.equals(this.signinEnabled, applicationSetting.signinEnabled) &&
        Objects.equals(this.signupEnabled, applicationSetting.signupEnabled) &&
        Objects.equals(this.updatedAt, applicationSetting.updatedAt) &&
        Objects.equals(this.userOauthApplications, applicationSetting.userOauthApplications);
  }

  @Override
  public int hashCode() {
    return Objects.hash(afterSignOutPath, afterSignUpText, containerRegistryTokenExpireDelay, createdAt, defaultBranchProtection, defaultGroupVisibility, defaultProjectVisibility, defaultProjectsLimit, defaultSnippetVisibility, domainBlacklist, domainBlacklistEnabled, domainWhitelist, gravatarEnabled, homePageUrl, id, kodingEnabled, kodingUrl, maxAttachmentSize, plantumlEnabled, plantumlUrl, repositoryStorage, repositoryStorages, restrictedVisibilityLevels, sessionExpireDelay, signInText, signinEnabled, signupEnabled, updatedAt, userOauthApplications);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationSetting {\n");
    sb.append("    afterSignOutPath: ").append(toIndentedString(afterSignOutPath)).append("\n");
    sb.append("    afterSignUpText: ").append(toIndentedString(afterSignUpText)).append("\n");
    sb.append("    containerRegistryTokenExpireDelay: ").append(toIndentedString(containerRegistryTokenExpireDelay)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    defaultBranchProtection: ").append(toIndentedString(defaultBranchProtection)).append("\n");
    sb.append("    defaultGroupVisibility: ").append(toIndentedString(defaultGroupVisibility)).append("\n");
    sb.append("    defaultProjectVisibility: ").append(toIndentedString(defaultProjectVisibility)).append("\n");
    sb.append("    defaultProjectsLimit: ").append(toIndentedString(defaultProjectsLimit)).append("\n");
    sb.append("    defaultSnippetVisibility: ").append(toIndentedString(defaultSnippetVisibility)).append("\n");
    sb.append("    domainBlacklist: ").append(toIndentedString(domainBlacklist)).append("\n");
    sb.append("    domainBlacklistEnabled: ").append(toIndentedString(domainBlacklistEnabled)).append("\n");
    sb.append("    domainWhitelist: ").append(toIndentedString(domainWhitelist)).append("\n");
    sb.append("    gravatarEnabled: ").append(toIndentedString(gravatarEnabled)).append("\n");
    sb.append("    homePageUrl: ").append(toIndentedString(homePageUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kodingEnabled: ").append(toIndentedString(kodingEnabled)).append("\n");
    sb.append("    kodingUrl: ").append(toIndentedString(kodingUrl)).append("\n");
    sb.append("    maxAttachmentSize: ").append(toIndentedString(maxAttachmentSize)).append("\n");
    sb.append("    plantumlEnabled: ").append(toIndentedString(plantumlEnabled)).append("\n");
    sb.append("    plantumlUrl: ").append(toIndentedString(plantumlUrl)).append("\n");
    sb.append("    repositoryStorage: ").append(toIndentedString(repositoryStorage)).append("\n");
    sb.append("    repositoryStorages: ").append(toIndentedString(repositoryStorages)).append("\n");
    sb.append("    restrictedVisibilityLevels: ").append(toIndentedString(restrictedVisibilityLevels)).append("\n");
    sb.append("    sessionExpireDelay: ").append(toIndentedString(sessionExpireDelay)).append("\n");
    sb.append("    signInText: ").append(toIndentedString(signInText)).append("\n");
    sb.append("    signinEnabled: ").append(toIndentedString(signinEnabled)).append("\n");
    sb.append("    signupEnabled: ").append(toIndentedString(signupEnabled)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userOauthApplications: ").append(toIndentedString(userOauthApplications)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("after_sign_out_path");
    openapiFields.add("after_sign_up_text");
    openapiFields.add("container_registry_token_expire_delay");
    openapiFields.add("created_at");
    openapiFields.add("default_branch_protection");
    openapiFields.add("default_group_visibility");
    openapiFields.add("default_project_visibility");
    openapiFields.add("default_projects_limit");
    openapiFields.add("default_snippet_visibility");
    openapiFields.add("domain_blacklist");
    openapiFields.add("domain_blacklist_enabled");
    openapiFields.add("domain_whitelist");
    openapiFields.add("gravatar_enabled");
    openapiFields.add("home_page_url");
    openapiFields.add("id");
    openapiFields.add("koding_enabled");
    openapiFields.add("koding_url");
    openapiFields.add("max_attachment_size");
    openapiFields.add("plantuml_enabled");
    openapiFields.add("plantuml_url");
    openapiFields.add("repository_storage");
    openapiFields.add("repository_storages");
    openapiFields.add("restricted_visibility_levels");
    openapiFields.add("session_expire_delay");
    openapiFields.add("sign_in_text");
    openapiFields.add("signin_enabled");
    openapiFields.add("signup_enabled");
    openapiFields.add("updated_at");
    openapiFields.add("user_oauth_applications");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationSetting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationSetting is not found in the empty JSON string", ApplicationSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationSetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("after_sign_out_path") != null && !jsonObj.get("after_sign_out_path").isJsonNull()) && !jsonObj.get("after_sign_out_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `after_sign_out_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("after_sign_out_path").toString()));
      }
      if ((jsonObj.get("after_sign_up_text") != null && !jsonObj.get("after_sign_up_text").isJsonNull()) && !jsonObj.get("after_sign_up_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `after_sign_up_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("after_sign_up_text").toString()));
      }
      if ((jsonObj.get("container_registry_token_expire_delay") != null && !jsonObj.get("container_registry_token_expire_delay").isJsonNull()) && !jsonObj.get("container_registry_token_expire_delay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container_registry_token_expire_delay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container_registry_token_expire_delay").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("default_branch_protection") != null && !jsonObj.get("default_branch_protection").isJsonNull()) && !jsonObj.get("default_branch_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_branch_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_branch_protection").toString()));
      }
      if ((jsonObj.get("default_group_visibility") != null && !jsonObj.get("default_group_visibility").isJsonNull()) && !jsonObj.get("default_group_visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_group_visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_group_visibility").toString()));
      }
      if ((jsonObj.get("default_project_visibility") != null && !jsonObj.get("default_project_visibility").isJsonNull()) && !jsonObj.get("default_project_visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_project_visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_project_visibility").toString()));
      }
      if ((jsonObj.get("default_projects_limit") != null && !jsonObj.get("default_projects_limit").isJsonNull()) && !jsonObj.get("default_projects_limit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_projects_limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_projects_limit").toString()));
      }
      if ((jsonObj.get("default_snippet_visibility") != null && !jsonObj.get("default_snippet_visibility").isJsonNull()) && !jsonObj.get("default_snippet_visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_snippet_visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_snippet_visibility").toString()));
      }
      if ((jsonObj.get("domain_blacklist") != null && !jsonObj.get("domain_blacklist").isJsonNull()) && !jsonObj.get("domain_blacklist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_blacklist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_blacklist").toString()));
      }
      if ((jsonObj.get("domain_blacklist_enabled") != null && !jsonObj.get("domain_blacklist_enabled").isJsonNull()) && !jsonObj.get("domain_blacklist_enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_blacklist_enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_blacklist_enabled").toString()));
      }
      if ((jsonObj.get("domain_whitelist") != null && !jsonObj.get("domain_whitelist").isJsonNull()) && !jsonObj.get("domain_whitelist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_whitelist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_whitelist").toString()));
      }
      if ((jsonObj.get("gravatar_enabled") != null && !jsonObj.get("gravatar_enabled").isJsonNull()) && !jsonObj.get("gravatar_enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gravatar_enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gravatar_enabled").toString()));
      }
      if ((jsonObj.get("home_page_url") != null && !jsonObj.get("home_page_url").isJsonNull()) && !jsonObj.get("home_page_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_page_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_page_url").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("koding_enabled") != null && !jsonObj.get("koding_enabled").isJsonNull()) && !jsonObj.get("koding_enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `koding_enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("koding_enabled").toString()));
      }
      if ((jsonObj.get("koding_url") != null && !jsonObj.get("koding_url").isJsonNull()) && !jsonObj.get("koding_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `koding_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("koding_url").toString()));
      }
      if ((jsonObj.get("max_attachment_size") != null && !jsonObj.get("max_attachment_size").isJsonNull()) && !jsonObj.get("max_attachment_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_attachment_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_attachment_size").toString()));
      }
      if ((jsonObj.get("plantuml_enabled") != null && !jsonObj.get("plantuml_enabled").isJsonNull()) && !jsonObj.get("plantuml_enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plantuml_enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plantuml_enabled").toString()));
      }
      if ((jsonObj.get("plantuml_url") != null && !jsonObj.get("plantuml_url").isJsonNull()) && !jsonObj.get("plantuml_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plantuml_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plantuml_url").toString()));
      }
      if ((jsonObj.get("repository_storage") != null && !jsonObj.get("repository_storage").isJsonNull()) && !jsonObj.get("repository_storage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_storage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository_storage").toString()));
      }
      if ((jsonObj.get("repository_storages") != null && !jsonObj.get("repository_storages").isJsonNull()) && !jsonObj.get("repository_storages").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_storages` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository_storages").toString()));
      }
      if ((jsonObj.get("restricted_visibility_levels") != null && !jsonObj.get("restricted_visibility_levels").isJsonNull()) && !jsonObj.get("restricted_visibility_levels").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restricted_visibility_levels` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restricted_visibility_levels").toString()));
      }
      if ((jsonObj.get("session_expire_delay") != null && !jsonObj.get("session_expire_delay").isJsonNull()) && !jsonObj.get("session_expire_delay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_expire_delay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_expire_delay").toString()));
      }
      if ((jsonObj.get("sign_in_text") != null && !jsonObj.get("sign_in_text").isJsonNull()) && !jsonObj.get("sign_in_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sign_in_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sign_in_text").toString()));
      }
      if ((jsonObj.get("signin_enabled") != null && !jsonObj.get("signin_enabled").isJsonNull()) && !jsonObj.get("signin_enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signin_enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signin_enabled").toString()));
      }
      if ((jsonObj.get("signup_enabled") != null && !jsonObj.get("signup_enabled").isJsonNull()) && !jsonObj.get("signup_enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signup_enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signup_enabled").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("user_oauth_applications") != null && !jsonObj.get("user_oauth_applications").isJsonNull()) && !jsonObj.get("user_oauth_applications").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_oauth_applications` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_oauth_applications").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationSetting>() {
           @Override
           public void write(JsonWriter out, ApplicationSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationSetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationSetting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationSetting
   * @throws IOException if the JSON string is invalid with respect to ApplicationSetting
   */
  public static ApplicationSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationSetting.class);
  }

  /**
   * Convert an instance of ApplicationSetting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

