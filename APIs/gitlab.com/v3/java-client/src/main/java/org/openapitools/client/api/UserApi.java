/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Email;
import org.openapitools.client.model.PostV3UserEmailsRequest;
import org.openapitools.client.model.PostV3UserKeysRequest;
import org.openapitools.client.model.SSHKey;
import org.openapitools.client.model.UserPublic;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteV3UserEmailsEmailId
     * @param emailId The ID of the email (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete an email address from the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3UserEmailsEmailIdCall(Integer emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/user/emails/{email_id}"
            .replace("{" + "email_id" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3UserEmailsEmailIdValidateBeforeCall(Integer emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling deleteV3UserEmailsEmailId(Async)");
        }

        return deleteV3UserEmailsEmailIdCall(emailId, _callback);

    }

    /**
     * Delete an email address from the currently authenticated user
     * Delete an email address from the currently authenticated user
     * @param emailId The ID of the email (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete an email address from the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3UserEmailsEmailId(Integer emailId) throws ApiException {
        deleteV3UserEmailsEmailIdWithHttpInfo(emailId);
    }

    /**
     * Delete an email address from the currently authenticated user
     * Delete an email address from the currently authenticated user
     * @param emailId The ID of the email (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete an email address from the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3UserEmailsEmailIdWithHttpInfo(Integer emailId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3UserEmailsEmailIdValidateBeforeCall(emailId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an email address from the currently authenticated user (asynchronously)
     * Delete an email address from the currently authenticated user
     * @param emailId The ID of the email (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete an email address from the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3UserEmailsEmailIdAsync(Integer emailId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3UserEmailsEmailIdValidateBeforeCall(emailId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3UserKeysKeyId
     * @param keyId The ID of the SSH key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an SSH key from the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3UserKeysKeyIdCall(Integer keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/user/keys/{key_id}"
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3UserKeysKeyIdValidateBeforeCall(Integer keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling deleteV3UserKeysKeyId(Async)");
        }

        return deleteV3UserKeysKeyIdCall(keyId, _callback);

    }

    /**
     * Delete an SSH key from the currently authenticated user
     * Delete an SSH key from the currently authenticated user
     * @param keyId The ID of the SSH key (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an SSH key from the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey deleteV3UserKeysKeyId(Integer keyId) throws ApiException {
        ApiResponse<SSHKey> localVarResp = deleteV3UserKeysKeyIdWithHttpInfo(keyId);
        return localVarResp.getData();
    }

    /**
     * Delete an SSH key from the currently authenticated user
     * Delete an SSH key from the currently authenticated user
     * @param keyId The ID of the SSH key (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an SSH key from the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> deleteV3UserKeysKeyIdWithHttpInfo(Integer keyId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3UserKeysKeyIdValidateBeforeCall(keyId, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an SSH key from the currently authenticated user (asynchronously)
     * Delete an SSH key from the currently authenticated user
     * @param keyId The ID of the SSH key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an SSH key from the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3UserKeysKeyIdAsync(Integer keyId, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3UserKeysKeyIdValidateBeforeCall(keyId, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3User
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UserCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3UserValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getV3UserCall(_callback);

    }

    /**
     * Get the currently authenticated user
     * Get the currently authenticated user
     * @return UserPublic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public UserPublic getV3User() throws ApiException {
        ApiResponse<UserPublic> localVarResp = getV3UserWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the currently authenticated user
     * Get the currently authenticated user
     * @return ApiResponse&lt;UserPublic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserPublic> getV3UserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getV3UserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserPublic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the currently authenticated user (asynchronously)
     * Get the currently authenticated user
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UserAsync(final ApiCallback<UserPublic> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3UserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserPublic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3UserEmails
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the currently authenticated user&#39;s email addresses </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UserEmailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/user/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3UserEmailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getV3UserEmailsCall(_callback);

    }

    /**
     * Get the currently authenticated user&#39;s email addresses
     * Get the currently authenticated user&#39;s email addresses
     * @return Email
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the currently authenticated user&#39;s email addresses </td><td>  -  </td></tr>
     </table>
     */
    public Email getV3UserEmails() throws ApiException {
        ApiResponse<Email> localVarResp = getV3UserEmailsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the currently authenticated user&#39;s email addresses
     * Get the currently authenticated user&#39;s email addresses
     * @return ApiResponse&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the currently authenticated user&#39;s email addresses </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Email> getV3UserEmailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getV3UserEmailsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the currently authenticated user&#39;s email addresses (asynchronously)
     * Get the currently authenticated user&#39;s email addresses
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the currently authenticated user&#39;s email addresses </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UserEmailsAsync(final ApiCallback<Email> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3UserEmailsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3UserEmailsEmailId
     * @param emailId The ID of the email (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single email address owned by the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UserEmailsEmailIdCall(Integer emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/user/emails/{email_id}"
            .replace("{" + "email_id" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3UserEmailsEmailIdValidateBeforeCall(Integer emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getV3UserEmailsEmailId(Async)");
        }

        return getV3UserEmailsEmailIdCall(emailId, _callback);

    }

    /**
     * Get a single email address owned by the currently authenticated user
     * Get a single email address owned by the currently authenticated user
     * @param emailId The ID of the email (required)
     * @return Email
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single email address owned by the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public Email getV3UserEmailsEmailId(Integer emailId) throws ApiException {
        ApiResponse<Email> localVarResp = getV3UserEmailsEmailIdWithHttpInfo(emailId);
        return localVarResp.getData();
    }

    /**
     * Get a single email address owned by the currently authenticated user
     * Get a single email address owned by the currently authenticated user
     * @param emailId The ID of the email (required)
     * @return ApiResponse&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single email address owned by the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Email> getV3UserEmailsEmailIdWithHttpInfo(Integer emailId) throws ApiException {
        okhttp3.Call localVarCall = getV3UserEmailsEmailIdValidateBeforeCall(emailId, null);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single email address owned by the currently authenticated user (asynchronously)
     * Get a single email address owned by the currently authenticated user
     * @param emailId The ID of the email (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single email address owned by the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UserEmailsEmailIdAsync(Integer emailId, final ApiCallback<Email> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3UserEmailsEmailIdValidateBeforeCall(emailId, _callback);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3UserKeys
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the currently authenticated user&#39;s SSH keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UserKeysCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/user/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3UserKeysValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getV3UserKeysCall(_callback);

    }

    /**
     * Get the currently authenticated user&#39;s SSH keys
     * Get the currently authenticated user&#39;s SSH keys
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the currently authenticated user&#39;s SSH keys </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey getV3UserKeys() throws ApiException {
        ApiResponse<SSHKey> localVarResp = getV3UserKeysWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the currently authenticated user&#39;s SSH keys
     * Get the currently authenticated user&#39;s SSH keys
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the currently authenticated user&#39;s SSH keys </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> getV3UserKeysWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getV3UserKeysValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the currently authenticated user&#39;s SSH keys (asynchronously)
     * Get the currently authenticated user&#39;s SSH keys
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the currently authenticated user&#39;s SSH keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UserKeysAsync(final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3UserKeysValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3UserKeysKeyId
     * @param keyId The ID of the SSH key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single key owned by currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UserKeysKeyIdCall(Integer keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/user/keys/{key_id}"
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3UserKeysKeyIdValidateBeforeCall(Integer keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling getV3UserKeysKeyId(Async)");
        }

        return getV3UserKeysKeyIdCall(keyId, _callback);

    }

    /**
     * Get a single key owned by currently authenticated user
     * Get a single key owned by currently authenticated user
     * @param keyId The ID of the SSH key (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single key owned by currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey getV3UserKeysKeyId(Integer keyId) throws ApiException {
        ApiResponse<SSHKey> localVarResp = getV3UserKeysKeyIdWithHttpInfo(keyId);
        return localVarResp.getData();
    }

    /**
     * Get a single key owned by currently authenticated user
     * Get a single key owned by currently authenticated user
     * @param keyId The ID of the SSH key (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single key owned by currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> getV3UserKeysKeyIdWithHttpInfo(Integer keyId) throws ApiException {
        okhttp3.Call localVarCall = getV3UserKeysKeyIdValidateBeforeCall(keyId, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single key owned by currently authenticated user (asynchronously)
     * Get a single key owned by currently authenticated user
     * @param keyId The ID of the SSH key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single key owned by currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UserKeysKeyIdAsync(Integer keyId, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3UserKeysKeyIdValidateBeforeCall(keyId, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3UserEmails
     * @param postV3UserEmailsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add new email address to the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3UserEmailsCall(PostV3UserEmailsRequest postV3UserEmailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3UserEmailsRequest;

        // create path and map variables
        String localVarPath = "/v3/user/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3UserEmailsValidateBeforeCall(PostV3UserEmailsRequest postV3UserEmailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postV3UserEmailsRequest' is set
        if (postV3UserEmailsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3UserEmailsRequest' when calling postV3UserEmails(Async)");
        }

        return postV3UserEmailsCall(postV3UserEmailsRequest, _callback);

    }

    /**
     * Add new email address to the currently authenticated user
     * Add new email address to the currently authenticated user
     * @param postV3UserEmailsRequest  (required)
     * @return Email
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add new email address to the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public Email postV3UserEmails(PostV3UserEmailsRequest postV3UserEmailsRequest) throws ApiException {
        ApiResponse<Email> localVarResp = postV3UserEmailsWithHttpInfo(postV3UserEmailsRequest);
        return localVarResp.getData();
    }

    /**
     * Add new email address to the currently authenticated user
     * Add new email address to the currently authenticated user
     * @param postV3UserEmailsRequest  (required)
     * @return ApiResponse&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add new email address to the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Email> postV3UserEmailsWithHttpInfo(PostV3UserEmailsRequest postV3UserEmailsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3UserEmailsValidateBeforeCall(postV3UserEmailsRequest, null);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add new email address to the currently authenticated user (asynchronously)
     * Add new email address to the currently authenticated user
     * @param postV3UserEmailsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add new email address to the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3UserEmailsAsync(PostV3UserEmailsRequest postV3UserEmailsRequest, final ApiCallback<Email> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3UserEmailsValidateBeforeCall(postV3UserEmailsRequest, _callback);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3UserKeys
     * @param postV3UserKeysRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add a new SSH key to the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3UserKeysCall(PostV3UserKeysRequest postV3UserKeysRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3UserKeysRequest;

        // create path and map variables
        String localVarPath = "/v3/user/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3UserKeysValidateBeforeCall(PostV3UserKeysRequest postV3UserKeysRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postV3UserKeysRequest' is set
        if (postV3UserKeysRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3UserKeysRequest' when calling postV3UserKeys(Async)");
        }

        return postV3UserKeysCall(postV3UserKeysRequest, _callback);

    }

    /**
     * Add a new SSH key to the currently authenticated user
     * Add a new SSH key to the currently authenticated user
     * @param postV3UserKeysRequest  (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add a new SSH key to the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey postV3UserKeys(PostV3UserKeysRequest postV3UserKeysRequest) throws ApiException {
        ApiResponse<SSHKey> localVarResp = postV3UserKeysWithHttpInfo(postV3UserKeysRequest);
        return localVarResp.getData();
    }

    /**
     * Add a new SSH key to the currently authenticated user
     * Add a new SSH key to the currently authenticated user
     * @param postV3UserKeysRequest  (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add a new SSH key to the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> postV3UserKeysWithHttpInfo(PostV3UserKeysRequest postV3UserKeysRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3UserKeysValidateBeforeCall(postV3UserKeysRequest, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new SSH key to the currently authenticated user (asynchronously)
     * Add a new SSH key to the currently authenticated user
     * @param postV3UserKeysRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add a new SSH key to the currently authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3UserKeysAsync(PostV3UserKeysRequest postV3UserKeysRequest, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3UserKeysValidateBeforeCall(postV3UserKeysRequest, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
