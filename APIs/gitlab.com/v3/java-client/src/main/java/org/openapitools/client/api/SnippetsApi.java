/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PersonalSnippet;
import org.openapitools.client.model.PostV3SnippetsRequest;
import org.openapitools.client.model.PutV3SnippetsIdRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SnippetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SnippetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SnippetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteV3SnippetsId
     * @param id The ID of a snippet (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3SnippetsIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/snippets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3SnippetsIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3SnippetsId(Async)");
        }

        return deleteV3SnippetsIdCall(id, _callback);

    }

    /**
     * Remove snippet
     * This feature was introduced in GitLab 8.15.
     * @param id The ID of a snippet (required)
     * @return PersonalSnippet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove snippet </td><td>  -  </td></tr>
     </table>
     */
    public PersonalSnippet deleteV3SnippetsId(Integer id) throws ApiException {
        ApiResponse<PersonalSnippet> localVarResp = deleteV3SnippetsIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Remove snippet
     * This feature was introduced in GitLab 8.15.
     * @param id The ID of a snippet (required)
     * @return ApiResponse&lt;PersonalSnippet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove snippet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalSnippet> deleteV3SnippetsIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteV3SnippetsIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PersonalSnippet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove snippet (asynchronously)
     * This feature was introduced in GitLab 8.15.
     * @param id The ID of a snippet (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3SnippetsIdAsync(Integer id, final ApiCallback<PersonalSnippet> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3SnippetsIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PersonalSnippet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3Snippets
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a snippets list for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3SnippetsCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/snippets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3SnippetsValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getV3SnippetsCall(page, perPage, _callback);

    }

    /**
     * Get a snippets list for authenticated user
     * This feature was introduced in GitLab 8.15.
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return PersonalSnippet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a snippets list for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public PersonalSnippet getV3Snippets(Integer page, Integer perPage) throws ApiException {
        ApiResponse<PersonalSnippet> localVarResp = getV3SnippetsWithHttpInfo(page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a snippets list for authenticated user
     * This feature was introduced in GitLab 8.15.
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;PersonalSnippet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a snippets list for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalSnippet> getV3SnippetsWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3SnippetsValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<PersonalSnippet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a snippets list for authenticated user (asynchronously)
     * This feature was introduced in GitLab 8.15.
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a snippets list for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3SnippetsAsync(Integer page, Integer perPage, final ApiCallback<PersonalSnippet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3SnippetsValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<PersonalSnippet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3SnippetsId
     * @param id The ID of a snippet (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3SnippetsIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/snippets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3SnippetsIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3SnippetsId(Async)");
        }

        return getV3SnippetsIdCall(id, _callback);

    }

    /**
     * Get a single snippet
     * This feature was introduced in GitLab 8.15.
     * @param id The ID of a snippet (required)
     * @return PersonalSnippet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single snippet </td><td>  -  </td></tr>
     </table>
     */
    public PersonalSnippet getV3SnippetsId(Integer id) throws ApiException {
        ApiResponse<PersonalSnippet> localVarResp = getV3SnippetsIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a single snippet
     * This feature was introduced in GitLab 8.15.
     * @param id The ID of a snippet (required)
     * @return ApiResponse&lt;PersonalSnippet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single snippet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalSnippet> getV3SnippetsIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getV3SnippetsIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PersonalSnippet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single snippet (asynchronously)
     * This feature was introduced in GitLab 8.15.
     * @param id The ID of a snippet (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3SnippetsIdAsync(Integer id, final ApiCallback<PersonalSnippet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3SnippetsIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PersonalSnippet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3SnippetsIdRaw
     * @param id The ID of a snippet (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3SnippetsIdRawCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/snippets/{id}/raw"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3SnippetsIdRawValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3SnippetsIdRaw(Async)");
        }

        return getV3SnippetsIdRawCall(id, _callback);

    }

    /**
     * Get a raw snippet
     * This feature was introduced in GitLab 8.15.
     * @param id The ID of a snippet (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw snippet </td><td>  -  </td></tr>
     </table>
     */
    public void getV3SnippetsIdRaw(Integer id) throws ApiException {
        getV3SnippetsIdRawWithHttpInfo(id);
    }

    /**
     * Get a raw snippet
     * This feature was introduced in GitLab 8.15.
     * @param id The ID of a snippet (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw snippet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getV3SnippetsIdRawWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getV3SnippetsIdRawValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a raw snippet (asynchronously)
     * This feature was introduced in GitLab 8.15.
     * @param id The ID of a snippet (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a raw snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3SnippetsIdRawAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3SnippetsIdRawValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3SnippetsPublic
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all public snippets current_user has access to </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3SnippetsPublicCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/snippets/public";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3SnippetsPublicValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getV3SnippetsPublicCall(page, perPage, _callback);

    }

    /**
     * List all public snippets current_user has access to
     * This feature was introduced in GitLab 8.15.
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return PersonalSnippet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all public snippets current_user has access to </td><td>  -  </td></tr>
     </table>
     */
    public PersonalSnippet getV3SnippetsPublic(Integer page, Integer perPage) throws ApiException {
        ApiResponse<PersonalSnippet> localVarResp = getV3SnippetsPublicWithHttpInfo(page, perPage);
        return localVarResp.getData();
    }

    /**
     * List all public snippets current_user has access to
     * This feature was introduced in GitLab 8.15.
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;PersonalSnippet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all public snippets current_user has access to </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalSnippet> getV3SnippetsPublicWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3SnippetsPublicValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<PersonalSnippet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all public snippets current_user has access to (asynchronously)
     * This feature was introduced in GitLab 8.15.
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all public snippets current_user has access to </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3SnippetsPublicAsync(Integer page, Integer perPage, final ApiCallback<PersonalSnippet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3SnippetsPublicValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<PersonalSnippet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3Snippets
     * @param postV3SnippetsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create new snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3SnippetsCall(PostV3SnippetsRequest postV3SnippetsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3SnippetsRequest;

        // create path and map variables
        String localVarPath = "/v3/snippets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3SnippetsValidateBeforeCall(PostV3SnippetsRequest postV3SnippetsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postV3SnippetsRequest' is set
        if (postV3SnippetsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3SnippetsRequest' when calling postV3Snippets(Async)");
        }

        return postV3SnippetsCall(postV3SnippetsRequest, _callback);

    }

    /**
     * Create new snippet
     * This feature was introduced in GitLab 8.15.
     * @param postV3SnippetsRequest  (required)
     * @return PersonalSnippet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create new snippet </td><td>  -  </td></tr>
     </table>
     */
    public PersonalSnippet postV3Snippets(PostV3SnippetsRequest postV3SnippetsRequest) throws ApiException {
        ApiResponse<PersonalSnippet> localVarResp = postV3SnippetsWithHttpInfo(postV3SnippetsRequest);
        return localVarResp.getData();
    }

    /**
     * Create new snippet
     * This feature was introduced in GitLab 8.15.
     * @param postV3SnippetsRequest  (required)
     * @return ApiResponse&lt;PersonalSnippet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create new snippet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalSnippet> postV3SnippetsWithHttpInfo(PostV3SnippetsRequest postV3SnippetsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3SnippetsValidateBeforeCall(postV3SnippetsRequest, null);
        Type localVarReturnType = new TypeToken<PersonalSnippet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new snippet (asynchronously)
     * This feature was introduced in GitLab 8.15.
     * @param postV3SnippetsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create new snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3SnippetsAsync(PostV3SnippetsRequest postV3SnippetsRequest, final ApiCallback<PersonalSnippet> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3SnippetsValidateBeforeCall(postV3SnippetsRequest, _callback);
        Type localVarReturnType = new TypeToken<PersonalSnippet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3SnippetsId
     * @param id The ID of a snippet (required)
     * @param putV3SnippetsIdRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3SnippetsIdCall(Integer id, PutV3SnippetsIdRequest putV3SnippetsIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3SnippetsIdRequest;

        // create path and map variables
        String localVarPath = "/v3/snippets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3SnippetsIdValidateBeforeCall(Integer id, PutV3SnippetsIdRequest putV3SnippetsIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3SnippetsId(Async)");
        }

        return putV3SnippetsIdCall(id, putV3SnippetsIdRequest, _callback);

    }

    /**
     * Update an existing snippet
     * This feature was introduced in GitLab 8.15.
     * @param id The ID of a snippet (required)
     * @param putV3SnippetsIdRequest  (optional)
     * @return PersonalSnippet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing snippet </td><td>  -  </td></tr>
     </table>
     */
    public PersonalSnippet putV3SnippetsId(Integer id, PutV3SnippetsIdRequest putV3SnippetsIdRequest) throws ApiException {
        ApiResponse<PersonalSnippet> localVarResp = putV3SnippetsIdWithHttpInfo(id, putV3SnippetsIdRequest);
        return localVarResp.getData();
    }

    /**
     * Update an existing snippet
     * This feature was introduced in GitLab 8.15.
     * @param id The ID of a snippet (required)
     * @param putV3SnippetsIdRequest  (optional)
     * @return ApiResponse&lt;PersonalSnippet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing snippet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalSnippet> putV3SnippetsIdWithHttpInfo(Integer id, PutV3SnippetsIdRequest putV3SnippetsIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3SnippetsIdValidateBeforeCall(id, putV3SnippetsIdRequest, null);
        Type localVarReturnType = new TypeToken<PersonalSnippet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing snippet (asynchronously)
     * This feature was introduced in GitLab 8.15.
     * @param id The ID of a snippet (required)
     * @param putV3SnippetsIdRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an existing snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3SnippetsIdAsync(Integer id, PutV3SnippetsIdRequest putV3SnippetsIdRequest, final ApiCallback<PersonalSnippet> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3SnippetsIdValidateBeforeCall(id, putV3SnippetsIdRequest, _callback);
        Type localVarReturnType = new TypeToken<PersonalSnippet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
