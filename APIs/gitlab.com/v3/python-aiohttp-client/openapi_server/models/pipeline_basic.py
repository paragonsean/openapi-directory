# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PipelineBasic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, ref: str=None, sha: str=None, status: str=None):
        """PipelineBasic - a model defined in OpenAPI

        :param id: The id of this PipelineBasic.
        :param ref: The ref of this PipelineBasic.
        :param sha: The sha of this PipelineBasic.
        :param status: The status of this PipelineBasic.
        """
        self.openapi_types = {
            'id': str,
            'ref': str,
            'sha': str,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'ref': 'ref',
            'sha': 'sha',
            'status': 'status'
        }

        self._id = id
        self._ref = ref
        self._sha = sha
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PipelineBasic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PipelineBasic of this PipelineBasic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PipelineBasic.


        :return: The id of this PipelineBasic.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PipelineBasic.


        :param id: The id of this PipelineBasic.
        :type id: str
        """

        self._id = id

    @property
    def ref(self):
        """Gets the ref of this PipelineBasic.


        :return: The ref of this PipelineBasic.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this PipelineBasic.


        :param ref: The ref of this PipelineBasic.
        :type ref: str
        """

        self._ref = ref

    @property
    def sha(self):
        """Gets the sha of this PipelineBasic.


        :return: The sha of this PipelineBasic.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this PipelineBasic.


        :param sha: The sha of this PipelineBasic.
        :type sha: str
        """

        self._sha = sha

    @property
    def status(self):
        """Gets the status of this PipelineBasic.


        :return: The status of this PipelineBasic.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PipelineBasic.


        :param status: The status of this PipelineBasic.
        :type status: str
        """

        self._status = status
