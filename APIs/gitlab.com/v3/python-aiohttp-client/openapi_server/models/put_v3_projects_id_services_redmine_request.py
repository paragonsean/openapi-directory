# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ProjectsIdServicesRedmineRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_issue_url: str=None, project_url: str=None, issues_url: str=None, description: str=None, push_events: str=None):
        """PutV3ProjectsIdServicesRedmineRequest - a model defined in OpenAPI

        :param new_issue_url: The new_issue_url of this PutV3ProjectsIdServicesRedmineRequest.
        :param project_url: The project_url of this PutV3ProjectsIdServicesRedmineRequest.
        :param issues_url: The issues_url of this PutV3ProjectsIdServicesRedmineRequest.
        :param description: The description of this PutV3ProjectsIdServicesRedmineRequest.
        :param push_events: The push_events of this PutV3ProjectsIdServicesRedmineRequest.
        """
        self.openapi_types = {
            'new_issue_url': str,
            'project_url': str,
            'issues_url': str,
            'description': str,
            'push_events': str
        }

        self.attribute_map = {
            'new_issue_url': 'new_issue_url',
            'project_url': 'project_url',
            'issues_url': 'issues_url',
            'description': 'description',
            'push_events': 'push_events'
        }

        self._new_issue_url = new_issue_url
        self._project_url = project_url
        self._issues_url = issues_url
        self._description = description
        self._push_events = push_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ProjectsIdServicesRedmineRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ProjectsIdServicesRedmine_request of this PutV3ProjectsIdServicesRedmineRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_issue_url(self):
        """Gets the new_issue_url of this PutV3ProjectsIdServicesRedmineRequest.

        The new issue URL

        :return: The new_issue_url of this PutV3ProjectsIdServicesRedmineRequest.
        :rtype: str
        """
        return self._new_issue_url

    @new_issue_url.setter
    def new_issue_url(self, new_issue_url):
        """Sets the new_issue_url of this PutV3ProjectsIdServicesRedmineRequest.

        The new issue URL

        :param new_issue_url: The new_issue_url of this PutV3ProjectsIdServicesRedmineRequest.
        :type new_issue_url: str
        """
        if new_issue_url is None:
            raise ValueError("Invalid value for `new_issue_url`, must not be `None`")

        self._new_issue_url = new_issue_url

    @property
    def project_url(self):
        """Gets the project_url of this PutV3ProjectsIdServicesRedmineRequest.

        The project URL

        :return: The project_url of this PutV3ProjectsIdServicesRedmineRequest.
        :rtype: str
        """
        return self._project_url

    @project_url.setter
    def project_url(self, project_url):
        """Sets the project_url of this PutV3ProjectsIdServicesRedmineRequest.

        The project URL

        :param project_url: The project_url of this PutV3ProjectsIdServicesRedmineRequest.
        :type project_url: str
        """
        if project_url is None:
            raise ValueError("Invalid value for `project_url`, must not be `None`")

        self._project_url = project_url

    @property
    def issues_url(self):
        """Gets the issues_url of this PutV3ProjectsIdServicesRedmineRequest.

        The issues URL

        :return: The issues_url of this PutV3ProjectsIdServicesRedmineRequest.
        :rtype: str
        """
        return self._issues_url

    @issues_url.setter
    def issues_url(self, issues_url):
        """Sets the issues_url of this PutV3ProjectsIdServicesRedmineRequest.

        The issues URL

        :param issues_url: The issues_url of this PutV3ProjectsIdServicesRedmineRequest.
        :type issues_url: str
        """
        if issues_url is None:
            raise ValueError("Invalid value for `issues_url`, must not be `None`")

        self._issues_url = issues_url

    @property
    def description(self):
        """Gets the description of this PutV3ProjectsIdServicesRedmineRequest.

        The description of the tracker

        :return: The description of this PutV3ProjectsIdServicesRedmineRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutV3ProjectsIdServicesRedmineRequest.

        The description of the tracker

        :param description: The description of this PutV3ProjectsIdServicesRedmineRequest.
        :type description: str
        """

        self._description = description

    @property
    def push_events(self):
        """Gets the push_events of this PutV3ProjectsIdServicesRedmineRequest.

        Event will be triggered by a push to the repository

        :return: The push_events of this PutV3ProjectsIdServicesRedmineRequest.
        :rtype: str
        """
        return self._push_events

    @push_events.setter
    def push_events(self, push_events):
        """Sets the push_events of this PutV3ProjectsIdServicesRedmineRequest.

        Event will be triggered by a push to the repository

        :param push_events: The push_events of this PutV3ProjectsIdServicesRedmineRequest.
        :type push_events: str
        """

        self._push_events = push_events
