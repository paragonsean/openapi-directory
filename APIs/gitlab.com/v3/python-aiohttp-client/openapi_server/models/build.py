# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_artifact_file import BuildArtifactFile
from openapi_server.models.pipeline_basic import PipelineBasic
from openapi_server.models.repo_commit import RepoCommit
from openapi_server.models.runner import Runner
from openapi_server.models.user import User
from openapi_server import util


class Build(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifacts_file: BuildArtifactFile=None, commit: RepoCommit=None, coverage: str=None, created_at: str=None, finished_at: str=None, id: str=None, name: str=None, pipeline: PipelineBasic=None, ref: str=None, runner: Runner=None, stage: str=None, started_at: str=None, status: str=None, tag: str=None, user: User=None):
        """Build - a model defined in OpenAPI

        :param artifacts_file: The artifacts_file of this Build.
        :param commit: The commit of this Build.
        :param coverage: The coverage of this Build.
        :param created_at: The created_at of this Build.
        :param finished_at: The finished_at of this Build.
        :param id: The id of this Build.
        :param name: The name of this Build.
        :param pipeline: The pipeline of this Build.
        :param ref: The ref of this Build.
        :param runner: The runner of this Build.
        :param stage: The stage of this Build.
        :param started_at: The started_at of this Build.
        :param status: The status of this Build.
        :param tag: The tag of this Build.
        :param user: The user of this Build.
        """
        self.openapi_types = {
            'artifacts_file': BuildArtifactFile,
            'commit': RepoCommit,
            'coverage': str,
            'created_at': str,
            'finished_at': str,
            'id': str,
            'name': str,
            'pipeline': PipelineBasic,
            'ref': str,
            'runner': Runner,
            'stage': str,
            'started_at': str,
            'status': str,
            'tag': str,
            'user': User
        }

        self.attribute_map = {
            'artifacts_file': 'artifacts_file',
            'commit': 'commit',
            'coverage': 'coverage',
            'created_at': 'created_at',
            'finished_at': 'finished_at',
            'id': 'id',
            'name': 'name',
            'pipeline': 'pipeline',
            'ref': 'ref',
            'runner': 'runner',
            'stage': 'stage',
            'started_at': 'started_at',
            'status': 'status',
            'tag': 'tag',
            'user': 'user'
        }

        self._artifacts_file = artifacts_file
        self._commit = commit
        self._coverage = coverage
        self._created_at = created_at
        self._finished_at = finished_at
        self._id = id
        self._name = name
        self._pipeline = pipeline
        self._ref = ref
        self._runner = runner
        self._stage = stage
        self._started_at = started_at
        self._status = status
        self._tag = tag
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Build':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Build of this Build.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifacts_file(self):
        """Gets the artifacts_file of this Build.


        :return: The artifacts_file of this Build.
        :rtype: BuildArtifactFile
        """
        return self._artifacts_file

    @artifacts_file.setter
    def artifacts_file(self, artifacts_file):
        """Sets the artifacts_file of this Build.


        :param artifacts_file: The artifacts_file of this Build.
        :type artifacts_file: BuildArtifactFile
        """

        self._artifacts_file = artifacts_file

    @property
    def commit(self):
        """Gets the commit of this Build.


        :return: The commit of this Build.
        :rtype: RepoCommit
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this Build.


        :param commit: The commit of this Build.
        :type commit: RepoCommit
        """

        self._commit = commit

    @property
    def coverage(self):
        """Gets the coverage of this Build.


        :return: The coverage of this Build.
        :rtype: str
        """
        return self._coverage

    @coverage.setter
    def coverage(self, coverage):
        """Sets the coverage of this Build.


        :param coverage: The coverage of this Build.
        :type coverage: str
        """

        self._coverage = coverage

    @property
    def created_at(self):
        """Gets the created_at of this Build.


        :return: The created_at of this Build.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Build.


        :param created_at: The created_at of this Build.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def finished_at(self):
        """Gets the finished_at of this Build.


        :return: The finished_at of this Build.
        :rtype: str
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this Build.


        :param finished_at: The finished_at of this Build.
        :type finished_at: str
        """

        self._finished_at = finished_at

    @property
    def id(self):
        """Gets the id of this Build.


        :return: The id of this Build.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Build.


        :param id: The id of this Build.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Build.


        :return: The name of this Build.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Build.


        :param name: The name of this Build.
        :type name: str
        """

        self._name = name

    @property
    def pipeline(self):
        """Gets the pipeline of this Build.


        :return: The pipeline of this Build.
        :rtype: PipelineBasic
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline):
        """Sets the pipeline of this Build.


        :param pipeline: The pipeline of this Build.
        :type pipeline: PipelineBasic
        """

        self._pipeline = pipeline

    @property
    def ref(self):
        """Gets the ref of this Build.


        :return: The ref of this Build.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this Build.


        :param ref: The ref of this Build.
        :type ref: str
        """

        self._ref = ref

    @property
    def runner(self):
        """Gets the runner of this Build.


        :return: The runner of this Build.
        :rtype: Runner
        """
        return self._runner

    @runner.setter
    def runner(self, runner):
        """Sets the runner of this Build.


        :param runner: The runner of this Build.
        :type runner: Runner
        """

        self._runner = runner

    @property
    def stage(self):
        """Gets the stage of this Build.


        :return: The stage of this Build.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this Build.


        :param stage: The stage of this Build.
        :type stage: str
        """

        self._stage = stage

    @property
    def started_at(self):
        """Gets the started_at of this Build.


        :return: The started_at of this Build.
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Build.


        :param started_at: The started_at of this Build.
        :type started_at: str
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this Build.


        :return: The status of this Build.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Build.


        :param status: The status of this Build.
        :type status: str
        """

        self._status = status

    @property
    def tag(self):
        """Gets the tag of this Build.


        :return: The tag of this Build.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Build.


        :param tag: The tag of this Build.
        :type tag: str
        """

        self._tag = tag

    @property
    def user(self):
        """Gets the user of this Build.


        :return: The user of this Build.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Build.


        :param user: The user of this Build.
        :type user: User
        """

        self._user = user
