# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3RunnersIdRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, active: bool=None, tag_list: List[str]=None, run_untagged: bool=None, locked: bool=None):
        """PutV3RunnersIdRequest - a model defined in OpenAPI

        :param description: The description of this PutV3RunnersIdRequest.
        :param active: The active of this PutV3RunnersIdRequest.
        :param tag_list: The tag_list of this PutV3RunnersIdRequest.
        :param run_untagged: The run_untagged of this PutV3RunnersIdRequest.
        :param locked: The locked of this PutV3RunnersIdRequest.
        """
        self.openapi_types = {
            'description': str,
            'active': bool,
            'tag_list': List[str],
            'run_untagged': bool,
            'locked': bool
        }

        self.attribute_map = {
            'description': 'description',
            'active': 'active',
            'tag_list': 'tag_list',
            'run_untagged': 'run_untagged',
            'locked': 'locked'
        }

        self._description = description
        self._active = active
        self._tag_list = tag_list
        self._run_untagged = run_untagged
        self._locked = locked

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3RunnersIdRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3RunnersId_request of this PutV3RunnersIdRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PutV3RunnersIdRequest.

        The description of the runner

        :return: The description of this PutV3RunnersIdRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutV3RunnersIdRequest.

        The description of the runner

        :param description: The description of this PutV3RunnersIdRequest.
        :type description: str
        """

        self._description = description

    @property
    def active(self):
        """Gets the active of this PutV3RunnersIdRequest.

        The state of a runner

        :return: The active of this PutV3RunnersIdRequest.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this PutV3RunnersIdRequest.

        The state of a runner

        :param active: The active of this PutV3RunnersIdRequest.
        :type active: bool
        """

        self._active = active

    @property
    def tag_list(self):
        """Gets the tag_list of this PutV3RunnersIdRequest.

        The list of tags for a runner

        :return: The tag_list of this PutV3RunnersIdRequest.
        :rtype: List[str]
        """
        return self._tag_list

    @tag_list.setter
    def tag_list(self, tag_list):
        """Sets the tag_list of this PutV3RunnersIdRequest.

        The list of tags for a runner

        :param tag_list: The tag_list of this PutV3RunnersIdRequest.
        :type tag_list: List[str]
        """

        self._tag_list = tag_list

    @property
    def run_untagged(self):
        """Gets the run_untagged of this PutV3RunnersIdRequest.

        Flag indicating the runner can execute untagged jobs

        :return: The run_untagged of this PutV3RunnersIdRequest.
        :rtype: bool
        """
        return self._run_untagged

    @run_untagged.setter
    def run_untagged(self, run_untagged):
        """Sets the run_untagged of this PutV3RunnersIdRequest.

        Flag indicating the runner can execute untagged jobs

        :param run_untagged: The run_untagged of this PutV3RunnersIdRequest.
        :type run_untagged: bool
        """

        self._run_untagged = run_untagged

    @property
    def locked(self):
        """Gets the locked of this PutV3RunnersIdRequest.

        Flag indicating the runner is locked

        :return: The locked of this PutV3RunnersIdRequest.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this PutV3RunnersIdRequest.

        Flag indicating the runner is locked

        :param locked: The locked of this PutV3RunnersIdRequest.
        :type locked: bool
        """

        self._locked = locked
