# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ProjectsIdServicesMattermostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, webhook: str=None, push_events: str=None, issue_events: str=None, confidential_issue_events: str=None, merge_request_events: str=None, note_events: str=None, tag_push_events: str=None, build_events: str=None, pipeline_events: str=None, wiki_page_events: str=None):
        """PutV3ProjectsIdServicesMattermostRequest - a model defined in OpenAPI

        :param webhook: The webhook of this PutV3ProjectsIdServicesMattermostRequest.
        :param push_events: The push_events of this PutV3ProjectsIdServicesMattermostRequest.
        :param issue_events: The issue_events of this PutV3ProjectsIdServicesMattermostRequest.
        :param confidential_issue_events: The confidential_issue_events of this PutV3ProjectsIdServicesMattermostRequest.
        :param merge_request_events: The merge_request_events of this PutV3ProjectsIdServicesMattermostRequest.
        :param note_events: The note_events of this PutV3ProjectsIdServicesMattermostRequest.
        :param tag_push_events: The tag_push_events of this PutV3ProjectsIdServicesMattermostRequest.
        :param build_events: The build_events of this PutV3ProjectsIdServicesMattermostRequest.
        :param pipeline_events: The pipeline_events of this PutV3ProjectsIdServicesMattermostRequest.
        :param wiki_page_events: The wiki_page_events of this PutV3ProjectsIdServicesMattermostRequest.
        """
        self.openapi_types = {
            'webhook': str,
            'push_events': str,
            'issue_events': str,
            'confidential_issue_events': str,
            'merge_request_events': str,
            'note_events': str,
            'tag_push_events': str,
            'build_events': str,
            'pipeline_events': str,
            'wiki_page_events': str
        }

        self.attribute_map = {
            'webhook': 'webhook',
            'push_events': 'push_events',
            'issue_events': 'issue_events',
            'confidential_issue_events': 'confidential_issue_events',
            'merge_request_events': 'merge_request_events',
            'note_events': 'note_events',
            'tag_push_events': 'tag_push_events',
            'build_events': 'build_events',
            'pipeline_events': 'pipeline_events',
            'wiki_page_events': 'wiki_page_events'
        }

        self._webhook = webhook
        self._push_events = push_events
        self._issue_events = issue_events
        self._confidential_issue_events = confidential_issue_events
        self._merge_request_events = merge_request_events
        self._note_events = note_events
        self._tag_push_events = tag_push_events
        self._build_events = build_events
        self._pipeline_events = pipeline_events
        self._wiki_page_events = wiki_page_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ProjectsIdServicesMattermostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ProjectsIdServicesMattermost_request of this PutV3ProjectsIdServicesMattermostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def webhook(self):
        """Gets the webhook of this PutV3ProjectsIdServicesMattermostRequest.

        The Mattermost webhook. e.g. http://mattermost_host/hooks/...

        :return: The webhook of this PutV3ProjectsIdServicesMattermostRequest.
        :rtype: str
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this PutV3ProjectsIdServicesMattermostRequest.

        The Mattermost webhook. e.g. http://mattermost_host/hooks/...

        :param webhook: The webhook of this PutV3ProjectsIdServicesMattermostRequest.
        :type webhook: str
        """
        if webhook is None:
            raise ValueError("Invalid value for `webhook`, must not be `None`")

        self._webhook = webhook

    @property
    def push_events(self):
        """Gets the push_events of this PutV3ProjectsIdServicesMattermostRequest.

        Event will be triggered by a push to the repository

        :return: The push_events of this PutV3ProjectsIdServicesMattermostRequest.
        :rtype: str
        """
        return self._push_events

    @push_events.setter
    def push_events(self, push_events):
        """Sets the push_events of this PutV3ProjectsIdServicesMattermostRequest.

        Event will be triggered by a push to the repository

        :param push_events: The push_events of this PutV3ProjectsIdServicesMattermostRequest.
        :type push_events: str
        """

        self._push_events = push_events

    @property
    def issue_events(self):
        """Gets the issue_events of this PutV3ProjectsIdServicesMattermostRequest.

        Event will be triggered when an issue is created/updated/closed

        :return: The issue_events of this PutV3ProjectsIdServicesMattermostRequest.
        :rtype: str
        """
        return self._issue_events

    @issue_events.setter
    def issue_events(self, issue_events):
        """Sets the issue_events of this PutV3ProjectsIdServicesMattermostRequest.

        Event will be triggered when an issue is created/updated/closed

        :param issue_events: The issue_events of this PutV3ProjectsIdServicesMattermostRequest.
        :type issue_events: str
        """

        self._issue_events = issue_events

    @property
    def confidential_issue_events(self):
        """Gets the confidential_issue_events of this PutV3ProjectsIdServicesMattermostRequest.

        Event will be triggered when a confidential issue is created/updated/closed

        :return: The confidential_issue_events of this PutV3ProjectsIdServicesMattermostRequest.
        :rtype: str
        """
        return self._confidential_issue_events

    @confidential_issue_events.setter
    def confidential_issue_events(self, confidential_issue_events):
        """Sets the confidential_issue_events of this PutV3ProjectsIdServicesMattermostRequest.

        Event will be triggered when a confidential issue is created/updated/closed

        :param confidential_issue_events: The confidential_issue_events of this PutV3ProjectsIdServicesMattermostRequest.
        :type confidential_issue_events: str
        """

        self._confidential_issue_events = confidential_issue_events

    @property
    def merge_request_events(self):
        """Gets the merge_request_events of this PutV3ProjectsIdServicesMattermostRequest.

        Event will be triggered when a merge request is created/updated/merged

        :return: The merge_request_events of this PutV3ProjectsIdServicesMattermostRequest.
        :rtype: str
        """
        return self._merge_request_events

    @merge_request_events.setter
    def merge_request_events(self, merge_request_events):
        """Sets the merge_request_events of this PutV3ProjectsIdServicesMattermostRequest.

        Event will be triggered when a merge request is created/updated/merged

        :param merge_request_events: The merge_request_events of this PutV3ProjectsIdServicesMattermostRequest.
        :type merge_request_events: str
        """

        self._merge_request_events = merge_request_events

    @property
    def note_events(self):
        """Gets the note_events of this PutV3ProjectsIdServicesMattermostRequest.

        Event will be triggered when someone adds a comment

        :return: The note_events of this PutV3ProjectsIdServicesMattermostRequest.
        :rtype: str
        """
        return self._note_events

    @note_events.setter
    def note_events(self, note_events):
        """Sets the note_events of this PutV3ProjectsIdServicesMattermostRequest.

        Event will be triggered when someone adds a comment

        :param note_events: The note_events of this PutV3ProjectsIdServicesMattermostRequest.
        :type note_events: str
        """

        self._note_events = note_events

    @property
    def tag_push_events(self):
        """Gets the tag_push_events of this PutV3ProjectsIdServicesMattermostRequest.

        Event will be triggered when a new tag is pushed to the repository

        :return: The tag_push_events of this PutV3ProjectsIdServicesMattermostRequest.
        :rtype: str
        """
        return self._tag_push_events

    @tag_push_events.setter
    def tag_push_events(self, tag_push_events):
        """Sets the tag_push_events of this PutV3ProjectsIdServicesMattermostRequest.

        Event will be triggered when a new tag is pushed to the repository

        :param tag_push_events: The tag_push_events of this PutV3ProjectsIdServicesMattermostRequest.
        :type tag_push_events: str
        """

        self._tag_push_events = tag_push_events

    @property
    def build_events(self):
        """Gets the build_events of this PutV3ProjectsIdServicesMattermostRequest.

        Event will be triggered when a build status changes

        :return: The build_events of this PutV3ProjectsIdServicesMattermostRequest.
        :rtype: str
        """
        return self._build_events

    @build_events.setter
    def build_events(self, build_events):
        """Sets the build_events of this PutV3ProjectsIdServicesMattermostRequest.

        Event will be triggered when a build status changes

        :param build_events: The build_events of this PutV3ProjectsIdServicesMattermostRequest.
        :type build_events: str
        """

        self._build_events = build_events

    @property
    def pipeline_events(self):
        """Gets the pipeline_events of this PutV3ProjectsIdServicesMattermostRequest.


        :return: The pipeline_events of this PutV3ProjectsIdServicesMattermostRequest.
        :rtype: str
        """
        return self._pipeline_events

    @pipeline_events.setter
    def pipeline_events(self, pipeline_events):
        """Sets the pipeline_events of this PutV3ProjectsIdServicesMattermostRequest.


        :param pipeline_events: The pipeline_events of this PutV3ProjectsIdServicesMattermostRequest.
        :type pipeline_events: str
        """

        self._pipeline_events = pipeline_events

    @property
    def wiki_page_events(self):
        """Gets the wiki_page_events of this PutV3ProjectsIdServicesMattermostRequest.

        Event will be triggered when a wiki page is created/updated

        :return: The wiki_page_events of this PutV3ProjectsIdServicesMattermostRequest.
        :rtype: str
        """
        return self._wiki_page_events

    @wiki_page_events.setter
    def wiki_page_events(self, wiki_page_events):
        """Sets the wiki_page_events of this PutV3ProjectsIdServicesMattermostRequest.

        Event will be triggered when a wiki page is created/updated

        :param wiki_page_events: The wiki_page_events of this PutV3ProjectsIdServicesMattermostRequest.
        :type wiki_page_events: str
        """

        self._wiki_page_events = wiki_page_events
