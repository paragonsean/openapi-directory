# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merge_commit_message: str=None, should_remove_source_branch: bool=None, merge_when_build_succeeds: bool=None, sha: str=None):
        """PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest - a model defined in OpenAPI

        :param merge_commit_message: The merge_commit_message of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.
        :param should_remove_source_branch: The should_remove_source_branch of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.
        :param merge_when_build_succeeds: The merge_when_build_succeeds of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.
        :param sha: The sha of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.
        """
        self.openapi_types = {
            'merge_commit_message': str,
            'should_remove_source_branch': bool,
            'merge_when_build_succeeds': bool,
            'sha': str
        }

        self.attribute_map = {
            'merge_commit_message': 'merge_commit_message',
            'should_remove_source_branch': 'should_remove_source_branch',
            'merge_when_build_succeeds': 'merge_when_build_succeeds',
            'sha': 'sha'
        }

        self._merge_commit_message = merge_commit_message
        self._should_remove_source_branch = should_remove_source_branch
        self._merge_when_build_succeeds = merge_when_build_succeeds
        self._sha = sha

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ProjectsIdMergeRequestMergeRequestIdMerge_request of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merge_commit_message(self):
        """Gets the merge_commit_message of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.

        Custom merge commit message

        :return: The merge_commit_message of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.
        :rtype: str
        """
        return self._merge_commit_message

    @merge_commit_message.setter
    def merge_commit_message(self, merge_commit_message):
        """Sets the merge_commit_message of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.

        Custom merge commit message

        :param merge_commit_message: The merge_commit_message of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.
        :type merge_commit_message: str
        """

        self._merge_commit_message = merge_commit_message

    @property
    def should_remove_source_branch(self):
        """Gets the should_remove_source_branch of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.

        When true, the source branch will be deleted if possible

        :return: The should_remove_source_branch of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.
        :rtype: bool
        """
        return self._should_remove_source_branch

    @should_remove_source_branch.setter
    def should_remove_source_branch(self, should_remove_source_branch):
        """Sets the should_remove_source_branch of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.

        When true, the source branch will be deleted if possible

        :param should_remove_source_branch: The should_remove_source_branch of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.
        :type should_remove_source_branch: bool
        """

        self._should_remove_source_branch = should_remove_source_branch

    @property
    def merge_when_build_succeeds(self):
        """Gets the merge_when_build_succeeds of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.

        When true, this merge request will be merged when the pipeline succeeds

        :return: The merge_when_build_succeeds of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.
        :rtype: bool
        """
        return self._merge_when_build_succeeds

    @merge_when_build_succeeds.setter
    def merge_when_build_succeeds(self, merge_when_build_succeeds):
        """Sets the merge_when_build_succeeds of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.

        When true, this merge request will be merged when the pipeline succeeds

        :param merge_when_build_succeeds: The merge_when_build_succeeds of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.
        :type merge_when_build_succeeds: bool
        """

        self._merge_when_build_succeeds = merge_when_build_succeeds

    @property
    def sha(self):
        """Gets the sha of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.

        When present, must have the HEAD SHA of the source branch

        :return: The sha of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.

        When present, must have the HEAD SHA of the source branch

        :param sha: The sha of this PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.
        :type sha: str
        """

        self._sha = sha
