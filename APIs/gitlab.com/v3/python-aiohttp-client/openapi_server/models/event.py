# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.note import Note
from openapi_server.models.user_basic import UserBasic
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_name: str=None, author: UserBasic=None, author_id: str=None, author_username: str=None, created_at: str=None, data: str=None, note: Note=None, project_id: str=None, target_id: str=None, target_title: str=None, target_type: str=None, title: str=None):
        """Event - a model defined in OpenAPI

        :param action_name: The action_name of this Event.
        :param author: The author of this Event.
        :param author_id: The author_id of this Event.
        :param author_username: The author_username of this Event.
        :param created_at: The created_at of this Event.
        :param data: The data of this Event.
        :param note: The note of this Event.
        :param project_id: The project_id of this Event.
        :param target_id: The target_id of this Event.
        :param target_title: The target_title of this Event.
        :param target_type: The target_type of this Event.
        :param title: The title of this Event.
        """
        self.openapi_types = {
            'action_name': str,
            'author': UserBasic,
            'author_id': str,
            'author_username': str,
            'created_at': str,
            'data': str,
            'note': Note,
            'project_id': str,
            'target_id': str,
            'target_title': str,
            'target_type': str,
            'title': str
        }

        self.attribute_map = {
            'action_name': 'action_name',
            'author': 'author',
            'author_id': 'author_id',
            'author_username': 'author_username',
            'created_at': 'created_at',
            'data': 'data',
            'note': 'note',
            'project_id': 'project_id',
            'target_id': 'target_id',
            'target_title': 'target_title',
            'target_type': 'target_type',
            'title': 'title'
        }

        self._action_name = action_name
        self._author = author
        self._author_id = author_id
        self._author_username = author_username
        self._created_at = created_at
        self._data = data
        self._note = note
        self._project_id = project_id
        self._target_id = target_id
        self._target_title = target_title
        self._target_type = target_type
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_name(self):
        """Gets the action_name of this Event.


        :return: The action_name of this Event.
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this Event.


        :param action_name: The action_name of this Event.
        :type action_name: str
        """

        self._action_name = action_name

    @property
    def author(self):
        """Gets the author of this Event.


        :return: The author of this Event.
        :rtype: UserBasic
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Event.


        :param author: The author of this Event.
        :type author: UserBasic
        """

        self._author = author

    @property
    def author_id(self):
        """Gets the author_id of this Event.


        :return: The author_id of this Event.
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this Event.


        :param author_id: The author_id of this Event.
        :type author_id: str
        """

        self._author_id = author_id

    @property
    def author_username(self):
        """Gets the author_username of this Event.


        :return: The author_username of this Event.
        :rtype: str
        """
        return self._author_username

    @author_username.setter
    def author_username(self, author_username):
        """Sets the author_username of this Event.


        :param author_username: The author_username of this Event.
        :type author_username: str
        """

        self._author_username = author_username

    @property
    def created_at(self):
        """Gets the created_at of this Event.


        :return: The created_at of this Event.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Event.


        :param created_at: The created_at of this Event.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def data(self):
        """Gets the data of this Event.


        :return: The data of this Event.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Event.


        :param data: The data of this Event.
        :type data: str
        """

        self._data = data

    @property
    def note(self):
        """Gets the note of this Event.


        :return: The note of this Event.
        :rtype: Note
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Event.


        :param note: The note of this Event.
        :type note: Note
        """

        self._note = note

    @property
    def project_id(self):
        """Gets the project_id of this Event.


        :return: The project_id of this Event.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Event.


        :param project_id: The project_id of this Event.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def target_id(self):
        """Gets the target_id of this Event.


        :return: The target_id of this Event.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this Event.


        :param target_id: The target_id of this Event.
        :type target_id: str
        """

        self._target_id = target_id

    @property
    def target_title(self):
        """Gets the target_title of this Event.


        :return: The target_title of this Event.
        :rtype: str
        """
        return self._target_title

    @target_title.setter
    def target_title(self, target_title):
        """Sets the target_title of this Event.


        :param target_title: The target_title of this Event.
        :type target_title: str
        """

        self._target_title = target_title

    @property
    def target_type(self):
        """Gets the target_type of this Event.


        :return: The target_type of this Event.
        :rtype: str
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this Event.


        :param target_type: The target_type of this Event.
        :type target_type: str
        """

        self._target_type = target_type

    @property
    def title(self):
        """Gets the title of this Event.


        :return: The title of this Event.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Event.


        :param title: The title of this Event.
        :type title: str
        """

        self._title = title
