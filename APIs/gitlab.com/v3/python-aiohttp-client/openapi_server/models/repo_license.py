# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RepoLicense(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conditions: str=None, content: str=None, description: str=None, html_url: str=None, key: str=None, limitations: str=None, name: str=None, nickname: str=None, permissions: str=None, popular: str=None, source_url: str=None):
        """RepoLicense - a model defined in OpenAPI

        :param conditions: The conditions of this RepoLicense.
        :param content: The content of this RepoLicense.
        :param description: The description of this RepoLicense.
        :param html_url: The html_url of this RepoLicense.
        :param key: The key of this RepoLicense.
        :param limitations: The limitations of this RepoLicense.
        :param name: The name of this RepoLicense.
        :param nickname: The nickname of this RepoLicense.
        :param permissions: The permissions of this RepoLicense.
        :param popular: The popular of this RepoLicense.
        :param source_url: The source_url of this RepoLicense.
        """
        self.openapi_types = {
            'conditions': str,
            'content': str,
            'description': str,
            'html_url': str,
            'key': str,
            'limitations': str,
            'name': str,
            'nickname': str,
            'permissions': str,
            'popular': str,
            'source_url': str
        }

        self.attribute_map = {
            'conditions': 'conditions',
            'content': 'content',
            'description': 'description',
            'html_url': 'html_url',
            'key': 'key',
            'limitations': 'limitations',
            'name': 'name',
            'nickname': 'nickname',
            'permissions': 'permissions',
            'popular': 'popular',
            'source_url': 'source_url'
        }

        self._conditions = conditions
        self._content = content
        self._description = description
        self._html_url = html_url
        self._key = key
        self._limitations = limitations
        self._name = name
        self._nickname = nickname
        self._permissions = permissions
        self._popular = popular
        self._source_url = source_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepoLicense':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepoLicense of this RepoLicense.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conditions(self):
        """Gets the conditions of this RepoLicense.


        :return: The conditions of this RepoLicense.
        :rtype: str
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this RepoLicense.


        :param conditions: The conditions of this RepoLicense.
        :type conditions: str
        """

        self._conditions = conditions

    @property
    def content(self):
        """Gets the content of this RepoLicense.


        :return: The content of this RepoLicense.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this RepoLicense.


        :param content: The content of this RepoLicense.
        :type content: str
        """

        self._content = content

    @property
    def description(self):
        """Gets the description of this RepoLicense.


        :return: The description of this RepoLicense.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RepoLicense.


        :param description: The description of this RepoLicense.
        :type description: str
        """

        self._description = description

    @property
    def html_url(self):
        """Gets the html_url of this RepoLicense.


        :return: The html_url of this RepoLicense.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this RepoLicense.


        :param html_url: The html_url of this RepoLicense.
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def key(self):
        """Gets the key of this RepoLicense.


        :return: The key of this RepoLicense.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this RepoLicense.


        :param key: The key of this RepoLicense.
        :type key: str
        """

        self._key = key

    @property
    def limitations(self):
        """Gets the limitations of this RepoLicense.


        :return: The limitations of this RepoLicense.
        :rtype: str
        """
        return self._limitations

    @limitations.setter
    def limitations(self, limitations):
        """Sets the limitations of this RepoLicense.


        :param limitations: The limitations of this RepoLicense.
        :type limitations: str
        """

        self._limitations = limitations

    @property
    def name(self):
        """Gets the name of this RepoLicense.


        :return: The name of this RepoLicense.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepoLicense.


        :param name: The name of this RepoLicense.
        :type name: str
        """

        self._name = name

    @property
    def nickname(self):
        """Gets the nickname of this RepoLicense.


        :return: The nickname of this RepoLicense.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this RepoLicense.


        :param nickname: The nickname of this RepoLicense.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def permissions(self):
        """Gets the permissions of this RepoLicense.


        :return: The permissions of this RepoLicense.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this RepoLicense.


        :param permissions: The permissions of this RepoLicense.
        :type permissions: str
        """

        self._permissions = permissions

    @property
    def popular(self):
        """Gets the popular of this RepoLicense.


        :return: The popular of this RepoLicense.
        :rtype: str
        """
        return self._popular

    @popular.setter
    def popular(self, popular):
        """Sets the popular of this RepoLicense.


        :param popular: The popular of this RepoLicense.
        :type popular: str
        """

        self._popular = popular

    @property
    def source_url(self):
        """Gets the source_url of this RepoLicense.


        :return: The source_url of this RepoLicense.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this RepoLicense.


        :param source_url: The source_url of this RepoLicense.
        :type source_url: str
        """

        self._source_url = source_url
