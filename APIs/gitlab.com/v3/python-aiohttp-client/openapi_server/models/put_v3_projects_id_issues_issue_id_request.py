# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ProjectsIdIssuesIssueIdRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title: str=None, updated_at: datetime=None, state_event: str=None, description: str=None, assignee_id: int=None, milestone_id: int=None, labels: str=None, due_date: str=None, confidential: bool=None, created_at: str=None):
        """PutV3ProjectsIdIssuesIssueIdRequest - a model defined in OpenAPI

        :param title: The title of this PutV3ProjectsIdIssuesIssueIdRequest.
        :param updated_at: The updated_at of this PutV3ProjectsIdIssuesIssueIdRequest.
        :param state_event: The state_event of this PutV3ProjectsIdIssuesIssueIdRequest.
        :param description: The description of this PutV3ProjectsIdIssuesIssueIdRequest.
        :param assignee_id: The assignee_id of this PutV3ProjectsIdIssuesIssueIdRequest.
        :param milestone_id: The milestone_id of this PutV3ProjectsIdIssuesIssueIdRequest.
        :param labels: The labels of this PutV3ProjectsIdIssuesIssueIdRequest.
        :param due_date: The due_date of this PutV3ProjectsIdIssuesIssueIdRequest.
        :param confidential: The confidential of this PutV3ProjectsIdIssuesIssueIdRequest.
        :param created_at: The created_at of this PutV3ProjectsIdIssuesIssueIdRequest.
        """
        self.openapi_types = {
            'title': str,
            'updated_at': datetime,
            'state_event': str,
            'description': str,
            'assignee_id': int,
            'milestone_id': int,
            'labels': str,
            'due_date': str,
            'confidential': bool,
            'created_at': str
        }

        self.attribute_map = {
            'title': 'title',
            'updated_at': 'updated_at',
            'state_event': 'state_event',
            'description': 'description',
            'assignee_id': 'assignee_id',
            'milestone_id': 'milestone_id',
            'labels': 'labels',
            'due_date': 'due_date',
            'confidential': 'confidential',
            'created_at': 'created_at'
        }

        self._title = title
        self._updated_at = updated_at
        self._state_event = state_event
        self._description = description
        self._assignee_id = assignee_id
        self._milestone_id = milestone_id
        self._labels = labels
        self._due_date = due_date
        self._confidential = confidential
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ProjectsIdIssuesIssueIdRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ProjectsIdIssuesIssueId_request of this PutV3ProjectsIdIssuesIssueIdRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this PutV3ProjectsIdIssuesIssueIdRequest.

        The title of an issue

        :return: The title of this PutV3ProjectsIdIssuesIssueIdRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PutV3ProjectsIdIssuesIssueIdRequest.

        The title of an issue

        :param title: The title of this PutV3ProjectsIdIssuesIssueIdRequest.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this PutV3ProjectsIdIssuesIssueIdRequest.

        Date time when the issue was updated. Available only for admins and project owners.

        :return: The updated_at of this PutV3ProjectsIdIssuesIssueIdRequest.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PutV3ProjectsIdIssuesIssueIdRequest.

        Date time when the issue was updated. Available only for admins and project owners.

        :param updated_at: The updated_at of this PutV3ProjectsIdIssuesIssueIdRequest.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def state_event(self):
        """Gets the state_event of this PutV3ProjectsIdIssuesIssueIdRequest.

        State of the issue

        :return: The state_event of this PutV3ProjectsIdIssuesIssueIdRequest.
        :rtype: str
        """
        return self._state_event

    @state_event.setter
    def state_event(self, state_event):
        """Sets the state_event of this PutV3ProjectsIdIssuesIssueIdRequest.

        State of the issue

        :param state_event: The state_event of this PutV3ProjectsIdIssuesIssueIdRequest.
        :type state_event: str
        """
        allowed_values = ["reopen", "close"]  # noqa: E501
        if state_event not in allowed_values:
            raise ValueError(
                "Invalid value for `state_event` ({0}), must be one of {1}"
                .format(state_event, allowed_values)
            )

        self._state_event = state_event

    @property
    def description(self):
        """Gets the description of this PutV3ProjectsIdIssuesIssueIdRequest.

        The description of an issue

        :return: The description of this PutV3ProjectsIdIssuesIssueIdRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutV3ProjectsIdIssuesIssueIdRequest.

        The description of an issue

        :param description: The description of this PutV3ProjectsIdIssuesIssueIdRequest.
        :type description: str
        """

        self._description = description

    @property
    def assignee_id(self):
        """Gets the assignee_id of this PutV3ProjectsIdIssuesIssueIdRequest.

        The ID of a user to assign issue

        :return: The assignee_id of this PutV3ProjectsIdIssuesIssueIdRequest.
        :rtype: int
        """
        return self._assignee_id

    @assignee_id.setter
    def assignee_id(self, assignee_id):
        """Sets the assignee_id of this PutV3ProjectsIdIssuesIssueIdRequest.

        The ID of a user to assign issue

        :param assignee_id: The assignee_id of this PutV3ProjectsIdIssuesIssueIdRequest.
        :type assignee_id: int
        """

        self._assignee_id = assignee_id

    @property
    def milestone_id(self):
        """Gets the milestone_id of this PutV3ProjectsIdIssuesIssueIdRequest.

        The ID of a milestone to assign issue

        :return: The milestone_id of this PutV3ProjectsIdIssuesIssueIdRequest.
        :rtype: int
        """
        return self._milestone_id

    @milestone_id.setter
    def milestone_id(self, milestone_id):
        """Sets the milestone_id of this PutV3ProjectsIdIssuesIssueIdRequest.

        The ID of a milestone to assign issue

        :param milestone_id: The milestone_id of this PutV3ProjectsIdIssuesIssueIdRequest.
        :type milestone_id: int
        """

        self._milestone_id = milestone_id

    @property
    def labels(self):
        """Gets the labels of this PutV3ProjectsIdIssuesIssueIdRequest.

        Comma-separated list of label names

        :return: The labels of this PutV3ProjectsIdIssuesIssueIdRequest.
        :rtype: str
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PutV3ProjectsIdIssuesIssueIdRequest.

        Comma-separated list of label names

        :param labels: The labels of this PutV3ProjectsIdIssuesIssueIdRequest.
        :type labels: str
        """

        self._labels = labels

    @property
    def due_date(self):
        """Gets the due_date of this PutV3ProjectsIdIssuesIssueIdRequest.

        Date time string in the format YEAR-MONTH-DAY

        :return: The due_date of this PutV3ProjectsIdIssuesIssueIdRequest.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this PutV3ProjectsIdIssuesIssueIdRequest.

        Date time string in the format YEAR-MONTH-DAY

        :param due_date: The due_date of this PutV3ProjectsIdIssuesIssueIdRequest.
        :type due_date: str
        """

        self._due_date = due_date

    @property
    def confidential(self):
        """Gets the confidential of this PutV3ProjectsIdIssuesIssueIdRequest.

        Boolean parameter if the issue should be confidential

        :return: The confidential of this PutV3ProjectsIdIssuesIssueIdRequest.
        :rtype: bool
        """
        return self._confidential

    @confidential.setter
    def confidential(self, confidential):
        """Sets the confidential of this PutV3ProjectsIdIssuesIssueIdRequest.

        Boolean parameter if the issue should be confidential

        :param confidential: The confidential of this PutV3ProjectsIdIssuesIssueIdRequest.
        :type confidential: bool
        """

        self._confidential = confidential

    @property
    def created_at(self):
        """Gets the created_at of this PutV3ProjectsIdIssuesIssueIdRequest.


        :return: The created_at of this PutV3ProjectsIdIssuesIssueIdRequest.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PutV3ProjectsIdIssuesIssueIdRequest.


        :param created_at: The created_at of this PutV3ProjectsIdIssuesIssueIdRequest.
        :type created_at: str
        """

        self._created_at = created_at
