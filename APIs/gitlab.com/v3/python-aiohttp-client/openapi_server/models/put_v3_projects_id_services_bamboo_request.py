# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ProjectsIdServicesBambooRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bamboo_url: str=None, build_key: str=None, username: str=None, password: str=None, push_events: str=None):
        """PutV3ProjectsIdServicesBambooRequest - a model defined in OpenAPI

        :param bamboo_url: The bamboo_url of this PutV3ProjectsIdServicesBambooRequest.
        :param build_key: The build_key of this PutV3ProjectsIdServicesBambooRequest.
        :param username: The username of this PutV3ProjectsIdServicesBambooRequest.
        :param password: The password of this PutV3ProjectsIdServicesBambooRequest.
        :param push_events: The push_events of this PutV3ProjectsIdServicesBambooRequest.
        """
        self.openapi_types = {
            'bamboo_url': str,
            'build_key': str,
            'username': str,
            'password': str,
            'push_events': str
        }

        self.attribute_map = {
            'bamboo_url': 'bamboo_url',
            'build_key': 'build_key',
            'username': 'username',
            'password': 'password',
            'push_events': 'push_events'
        }

        self._bamboo_url = bamboo_url
        self._build_key = build_key
        self._username = username
        self._password = password
        self._push_events = push_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ProjectsIdServicesBambooRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ProjectsIdServicesBamboo_request of this PutV3ProjectsIdServicesBambooRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bamboo_url(self):
        """Gets the bamboo_url of this PutV3ProjectsIdServicesBambooRequest.

        Bamboo root URL like https://bamboo.example.com

        :return: The bamboo_url of this PutV3ProjectsIdServicesBambooRequest.
        :rtype: str
        """
        return self._bamboo_url

    @bamboo_url.setter
    def bamboo_url(self, bamboo_url):
        """Sets the bamboo_url of this PutV3ProjectsIdServicesBambooRequest.

        Bamboo root URL like https://bamboo.example.com

        :param bamboo_url: The bamboo_url of this PutV3ProjectsIdServicesBambooRequest.
        :type bamboo_url: str
        """
        if bamboo_url is None:
            raise ValueError("Invalid value for `bamboo_url`, must not be `None`")

        self._bamboo_url = bamboo_url

    @property
    def build_key(self):
        """Gets the build_key of this PutV3ProjectsIdServicesBambooRequest.

        Bamboo build plan key like

        :return: The build_key of this PutV3ProjectsIdServicesBambooRequest.
        :rtype: str
        """
        return self._build_key

    @build_key.setter
    def build_key(self, build_key):
        """Sets the build_key of this PutV3ProjectsIdServicesBambooRequest.

        Bamboo build plan key like

        :param build_key: The build_key of this PutV3ProjectsIdServicesBambooRequest.
        :type build_key: str
        """
        if build_key is None:
            raise ValueError("Invalid value for `build_key`, must not be `None`")

        self._build_key = build_key

    @property
    def username(self):
        """Gets the username of this PutV3ProjectsIdServicesBambooRequest.

        A user with API access, if applicable

        :return: The username of this PutV3ProjectsIdServicesBambooRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PutV3ProjectsIdServicesBambooRequest.

        A user with API access, if applicable

        :param username: The username of this PutV3ProjectsIdServicesBambooRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def password(self):
        """Gets the password of this PutV3ProjectsIdServicesBambooRequest.

        Passord of the user

        :return: The password of this PutV3ProjectsIdServicesBambooRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PutV3ProjectsIdServicesBambooRequest.

        Passord of the user

        :param password: The password of this PutV3ProjectsIdServicesBambooRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def push_events(self):
        """Gets the push_events of this PutV3ProjectsIdServicesBambooRequest.

        Event will be triggered by a push to the repository

        :return: The push_events of this PutV3ProjectsIdServicesBambooRequest.
        :rtype: str
        """
        return self._push_events

    @push_events.setter
    def push_events(self, push_events):
        """Sets the push_events of this PutV3ProjectsIdServicesBambooRequest.

        Event will be triggered by a push to the repository

        :param push_events: The push_events of this PutV3ProjectsIdServicesBambooRequest.
        :type push_events: str
        """

        self._push_events = push_events
