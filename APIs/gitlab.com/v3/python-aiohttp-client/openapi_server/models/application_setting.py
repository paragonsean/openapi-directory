# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after_sign_out_path: str=None, after_sign_up_text: str=None, container_registry_token_expire_delay: str=None, created_at: str=None, default_branch_protection: str=None, default_group_visibility: str=None, default_project_visibility: str=None, default_projects_limit: str=None, default_snippet_visibility: str=None, domain_blacklist: str=None, domain_blacklist_enabled: str=None, domain_whitelist: str=None, gravatar_enabled: str=None, home_page_url: str=None, id: str=None, koding_enabled: str=None, koding_url: str=None, max_attachment_size: str=None, plantuml_enabled: str=None, plantuml_url: str=None, repository_storage: str=None, repository_storages: str=None, restricted_visibility_levels: str=None, session_expire_delay: str=None, sign_in_text: str=None, signin_enabled: str=None, signup_enabled: str=None, updated_at: str=None, user_oauth_applications: str=None):
        """ApplicationSetting - a model defined in OpenAPI

        :param after_sign_out_path: The after_sign_out_path of this ApplicationSetting.
        :param after_sign_up_text: The after_sign_up_text of this ApplicationSetting.
        :param container_registry_token_expire_delay: The container_registry_token_expire_delay of this ApplicationSetting.
        :param created_at: The created_at of this ApplicationSetting.
        :param default_branch_protection: The default_branch_protection of this ApplicationSetting.
        :param default_group_visibility: The default_group_visibility of this ApplicationSetting.
        :param default_project_visibility: The default_project_visibility of this ApplicationSetting.
        :param default_projects_limit: The default_projects_limit of this ApplicationSetting.
        :param default_snippet_visibility: The default_snippet_visibility of this ApplicationSetting.
        :param domain_blacklist: The domain_blacklist of this ApplicationSetting.
        :param domain_blacklist_enabled: The domain_blacklist_enabled of this ApplicationSetting.
        :param domain_whitelist: The domain_whitelist of this ApplicationSetting.
        :param gravatar_enabled: The gravatar_enabled of this ApplicationSetting.
        :param home_page_url: The home_page_url of this ApplicationSetting.
        :param id: The id of this ApplicationSetting.
        :param koding_enabled: The koding_enabled of this ApplicationSetting.
        :param koding_url: The koding_url of this ApplicationSetting.
        :param max_attachment_size: The max_attachment_size of this ApplicationSetting.
        :param plantuml_enabled: The plantuml_enabled of this ApplicationSetting.
        :param plantuml_url: The plantuml_url of this ApplicationSetting.
        :param repository_storage: The repository_storage of this ApplicationSetting.
        :param repository_storages: The repository_storages of this ApplicationSetting.
        :param restricted_visibility_levels: The restricted_visibility_levels of this ApplicationSetting.
        :param session_expire_delay: The session_expire_delay of this ApplicationSetting.
        :param sign_in_text: The sign_in_text of this ApplicationSetting.
        :param signin_enabled: The signin_enabled of this ApplicationSetting.
        :param signup_enabled: The signup_enabled of this ApplicationSetting.
        :param updated_at: The updated_at of this ApplicationSetting.
        :param user_oauth_applications: The user_oauth_applications of this ApplicationSetting.
        """
        self.openapi_types = {
            'after_sign_out_path': str,
            'after_sign_up_text': str,
            'container_registry_token_expire_delay': str,
            'created_at': str,
            'default_branch_protection': str,
            'default_group_visibility': str,
            'default_project_visibility': str,
            'default_projects_limit': str,
            'default_snippet_visibility': str,
            'domain_blacklist': str,
            'domain_blacklist_enabled': str,
            'domain_whitelist': str,
            'gravatar_enabled': str,
            'home_page_url': str,
            'id': str,
            'koding_enabled': str,
            'koding_url': str,
            'max_attachment_size': str,
            'plantuml_enabled': str,
            'plantuml_url': str,
            'repository_storage': str,
            'repository_storages': str,
            'restricted_visibility_levels': str,
            'session_expire_delay': str,
            'sign_in_text': str,
            'signin_enabled': str,
            'signup_enabled': str,
            'updated_at': str,
            'user_oauth_applications': str
        }

        self.attribute_map = {
            'after_sign_out_path': 'after_sign_out_path',
            'after_sign_up_text': 'after_sign_up_text',
            'container_registry_token_expire_delay': 'container_registry_token_expire_delay',
            'created_at': 'created_at',
            'default_branch_protection': 'default_branch_protection',
            'default_group_visibility': 'default_group_visibility',
            'default_project_visibility': 'default_project_visibility',
            'default_projects_limit': 'default_projects_limit',
            'default_snippet_visibility': 'default_snippet_visibility',
            'domain_blacklist': 'domain_blacklist',
            'domain_blacklist_enabled': 'domain_blacklist_enabled',
            'domain_whitelist': 'domain_whitelist',
            'gravatar_enabled': 'gravatar_enabled',
            'home_page_url': 'home_page_url',
            'id': 'id',
            'koding_enabled': 'koding_enabled',
            'koding_url': 'koding_url',
            'max_attachment_size': 'max_attachment_size',
            'plantuml_enabled': 'plantuml_enabled',
            'plantuml_url': 'plantuml_url',
            'repository_storage': 'repository_storage',
            'repository_storages': 'repository_storages',
            'restricted_visibility_levels': 'restricted_visibility_levels',
            'session_expire_delay': 'session_expire_delay',
            'sign_in_text': 'sign_in_text',
            'signin_enabled': 'signin_enabled',
            'signup_enabled': 'signup_enabled',
            'updated_at': 'updated_at',
            'user_oauth_applications': 'user_oauth_applications'
        }

        self._after_sign_out_path = after_sign_out_path
        self._after_sign_up_text = after_sign_up_text
        self._container_registry_token_expire_delay = container_registry_token_expire_delay
        self._created_at = created_at
        self._default_branch_protection = default_branch_protection
        self._default_group_visibility = default_group_visibility
        self._default_project_visibility = default_project_visibility
        self._default_projects_limit = default_projects_limit
        self._default_snippet_visibility = default_snippet_visibility
        self._domain_blacklist = domain_blacklist
        self._domain_blacklist_enabled = domain_blacklist_enabled
        self._domain_whitelist = domain_whitelist
        self._gravatar_enabled = gravatar_enabled
        self._home_page_url = home_page_url
        self._id = id
        self._koding_enabled = koding_enabled
        self._koding_url = koding_url
        self._max_attachment_size = max_attachment_size
        self._plantuml_enabled = plantuml_enabled
        self._plantuml_url = plantuml_url
        self._repository_storage = repository_storage
        self._repository_storages = repository_storages
        self._restricted_visibility_levels = restricted_visibility_levels
        self._session_expire_delay = session_expire_delay
        self._sign_in_text = sign_in_text
        self._signin_enabled = signin_enabled
        self._signup_enabled = signup_enabled
        self._updated_at = updated_at
        self._user_oauth_applications = user_oauth_applications

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationSetting of this ApplicationSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after_sign_out_path(self):
        """Gets the after_sign_out_path of this ApplicationSetting.


        :return: The after_sign_out_path of this ApplicationSetting.
        :rtype: str
        """
        return self._after_sign_out_path

    @after_sign_out_path.setter
    def after_sign_out_path(self, after_sign_out_path):
        """Sets the after_sign_out_path of this ApplicationSetting.


        :param after_sign_out_path: The after_sign_out_path of this ApplicationSetting.
        :type after_sign_out_path: str
        """

        self._after_sign_out_path = after_sign_out_path

    @property
    def after_sign_up_text(self):
        """Gets the after_sign_up_text of this ApplicationSetting.


        :return: The after_sign_up_text of this ApplicationSetting.
        :rtype: str
        """
        return self._after_sign_up_text

    @after_sign_up_text.setter
    def after_sign_up_text(self, after_sign_up_text):
        """Sets the after_sign_up_text of this ApplicationSetting.


        :param after_sign_up_text: The after_sign_up_text of this ApplicationSetting.
        :type after_sign_up_text: str
        """

        self._after_sign_up_text = after_sign_up_text

    @property
    def container_registry_token_expire_delay(self):
        """Gets the container_registry_token_expire_delay of this ApplicationSetting.


        :return: The container_registry_token_expire_delay of this ApplicationSetting.
        :rtype: str
        """
        return self._container_registry_token_expire_delay

    @container_registry_token_expire_delay.setter
    def container_registry_token_expire_delay(self, container_registry_token_expire_delay):
        """Sets the container_registry_token_expire_delay of this ApplicationSetting.


        :param container_registry_token_expire_delay: The container_registry_token_expire_delay of this ApplicationSetting.
        :type container_registry_token_expire_delay: str
        """

        self._container_registry_token_expire_delay = container_registry_token_expire_delay

    @property
    def created_at(self):
        """Gets the created_at of this ApplicationSetting.


        :return: The created_at of this ApplicationSetting.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ApplicationSetting.


        :param created_at: The created_at of this ApplicationSetting.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def default_branch_protection(self):
        """Gets the default_branch_protection of this ApplicationSetting.


        :return: The default_branch_protection of this ApplicationSetting.
        :rtype: str
        """
        return self._default_branch_protection

    @default_branch_protection.setter
    def default_branch_protection(self, default_branch_protection):
        """Sets the default_branch_protection of this ApplicationSetting.


        :param default_branch_protection: The default_branch_protection of this ApplicationSetting.
        :type default_branch_protection: str
        """

        self._default_branch_protection = default_branch_protection

    @property
    def default_group_visibility(self):
        """Gets the default_group_visibility of this ApplicationSetting.


        :return: The default_group_visibility of this ApplicationSetting.
        :rtype: str
        """
        return self._default_group_visibility

    @default_group_visibility.setter
    def default_group_visibility(self, default_group_visibility):
        """Sets the default_group_visibility of this ApplicationSetting.


        :param default_group_visibility: The default_group_visibility of this ApplicationSetting.
        :type default_group_visibility: str
        """

        self._default_group_visibility = default_group_visibility

    @property
    def default_project_visibility(self):
        """Gets the default_project_visibility of this ApplicationSetting.


        :return: The default_project_visibility of this ApplicationSetting.
        :rtype: str
        """
        return self._default_project_visibility

    @default_project_visibility.setter
    def default_project_visibility(self, default_project_visibility):
        """Sets the default_project_visibility of this ApplicationSetting.


        :param default_project_visibility: The default_project_visibility of this ApplicationSetting.
        :type default_project_visibility: str
        """

        self._default_project_visibility = default_project_visibility

    @property
    def default_projects_limit(self):
        """Gets the default_projects_limit of this ApplicationSetting.


        :return: The default_projects_limit of this ApplicationSetting.
        :rtype: str
        """
        return self._default_projects_limit

    @default_projects_limit.setter
    def default_projects_limit(self, default_projects_limit):
        """Sets the default_projects_limit of this ApplicationSetting.


        :param default_projects_limit: The default_projects_limit of this ApplicationSetting.
        :type default_projects_limit: str
        """

        self._default_projects_limit = default_projects_limit

    @property
    def default_snippet_visibility(self):
        """Gets the default_snippet_visibility of this ApplicationSetting.


        :return: The default_snippet_visibility of this ApplicationSetting.
        :rtype: str
        """
        return self._default_snippet_visibility

    @default_snippet_visibility.setter
    def default_snippet_visibility(self, default_snippet_visibility):
        """Sets the default_snippet_visibility of this ApplicationSetting.


        :param default_snippet_visibility: The default_snippet_visibility of this ApplicationSetting.
        :type default_snippet_visibility: str
        """

        self._default_snippet_visibility = default_snippet_visibility

    @property
    def domain_blacklist(self):
        """Gets the domain_blacklist of this ApplicationSetting.


        :return: The domain_blacklist of this ApplicationSetting.
        :rtype: str
        """
        return self._domain_blacklist

    @domain_blacklist.setter
    def domain_blacklist(self, domain_blacklist):
        """Sets the domain_blacklist of this ApplicationSetting.


        :param domain_blacklist: The domain_blacklist of this ApplicationSetting.
        :type domain_blacklist: str
        """

        self._domain_blacklist = domain_blacklist

    @property
    def domain_blacklist_enabled(self):
        """Gets the domain_blacklist_enabled of this ApplicationSetting.


        :return: The domain_blacklist_enabled of this ApplicationSetting.
        :rtype: str
        """
        return self._domain_blacklist_enabled

    @domain_blacklist_enabled.setter
    def domain_blacklist_enabled(self, domain_blacklist_enabled):
        """Sets the domain_blacklist_enabled of this ApplicationSetting.


        :param domain_blacklist_enabled: The domain_blacklist_enabled of this ApplicationSetting.
        :type domain_blacklist_enabled: str
        """

        self._domain_blacklist_enabled = domain_blacklist_enabled

    @property
    def domain_whitelist(self):
        """Gets the domain_whitelist of this ApplicationSetting.


        :return: The domain_whitelist of this ApplicationSetting.
        :rtype: str
        """
        return self._domain_whitelist

    @domain_whitelist.setter
    def domain_whitelist(self, domain_whitelist):
        """Sets the domain_whitelist of this ApplicationSetting.


        :param domain_whitelist: The domain_whitelist of this ApplicationSetting.
        :type domain_whitelist: str
        """

        self._domain_whitelist = domain_whitelist

    @property
    def gravatar_enabled(self):
        """Gets the gravatar_enabled of this ApplicationSetting.


        :return: The gravatar_enabled of this ApplicationSetting.
        :rtype: str
        """
        return self._gravatar_enabled

    @gravatar_enabled.setter
    def gravatar_enabled(self, gravatar_enabled):
        """Sets the gravatar_enabled of this ApplicationSetting.


        :param gravatar_enabled: The gravatar_enabled of this ApplicationSetting.
        :type gravatar_enabled: str
        """

        self._gravatar_enabled = gravatar_enabled

    @property
    def home_page_url(self):
        """Gets the home_page_url of this ApplicationSetting.


        :return: The home_page_url of this ApplicationSetting.
        :rtype: str
        """
        return self._home_page_url

    @home_page_url.setter
    def home_page_url(self, home_page_url):
        """Sets the home_page_url of this ApplicationSetting.


        :param home_page_url: The home_page_url of this ApplicationSetting.
        :type home_page_url: str
        """

        self._home_page_url = home_page_url

    @property
    def id(self):
        """Gets the id of this ApplicationSetting.


        :return: The id of this ApplicationSetting.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationSetting.


        :param id: The id of this ApplicationSetting.
        :type id: str
        """

        self._id = id

    @property
    def koding_enabled(self):
        """Gets the koding_enabled of this ApplicationSetting.


        :return: The koding_enabled of this ApplicationSetting.
        :rtype: str
        """
        return self._koding_enabled

    @koding_enabled.setter
    def koding_enabled(self, koding_enabled):
        """Sets the koding_enabled of this ApplicationSetting.


        :param koding_enabled: The koding_enabled of this ApplicationSetting.
        :type koding_enabled: str
        """

        self._koding_enabled = koding_enabled

    @property
    def koding_url(self):
        """Gets the koding_url of this ApplicationSetting.


        :return: The koding_url of this ApplicationSetting.
        :rtype: str
        """
        return self._koding_url

    @koding_url.setter
    def koding_url(self, koding_url):
        """Sets the koding_url of this ApplicationSetting.


        :param koding_url: The koding_url of this ApplicationSetting.
        :type koding_url: str
        """

        self._koding_url = koding_url

    @property
    def max_attachment_size(self):
        """Gets the max_attachment_size of this ApplicationSetting.


        :return: The max_attachment_size of this ApplicationSetting.
        :rtype: str
        """
        return self._max_attachment_size

    @max_attachment_size.setter
    def max_attachment_size(self, max_attachment_size):
        """Sets the max_attachment_size of this ApplicationSetting.


        :param max_attachment_size: The max_attachment_size of this ApplicationSetting.
        :type max_attachment_size: str
        """

        self._max_attachment_size = max_attachment_size

    @property
    def plantuml_enabled(self):
        """Gets the plantuml_enabled of this ApplicationSetting.


        :return: The plantuml_enabled of this ApplicationSetting.
        :rtype: str
        """
        return self._plantuml_enabled

    @plantuml_enabled.setter
    def plantuml_enabled(self, plantuml_enabled):
        """Sets the plantuml_enabled of this ApplicationSetting.


        :param plantuml_enabled: The plantuml_enabled of this ApplicationSetting.
        :type plantuml_enabled: str
        """

        self._plantuml_enabled = plantuml_enabled

    @property
    def plantuml_url(self):
        """Gets the plantuml_url of this ApplicationSetting.


        :return: The plantuml_url of this ApplicationSetting.
        :rtype: str
        """
        return self._plantuml_url

    @plantuml_url.setter
    def plantuml_url(self, plantuml_url):
        """Sets the plantuml_url of this ApplicationSetting.


        :param plantuml_url: The plantuml_url of this ApplicationSetting.
        :type plantuml_url: str
        """

        self._plantuml_url = plantuml_url

    @property
    def repository_storage(self):
        """Gets the repository_storage of this ApplicationSetting.


        :return: The repository_storage of this ApplicationSetting.
        :rtype: str
        """
        return self._repository_storage

    @repository_storage.setter
    def repository_storage(self, repository_storage):
        """Sets the repository_storage of this ApplicationSetting.


        :param repository_storage: The repository_storage of this ApplicationSetting.
        :type repository_storage: str
        """

        self._repository_storage = repository_storage

    @property
    def repository_storages(self):
        """Gets the repository_storages of this ApplicationSetting.


        :return: The repository_storages of this ApplicationSetting.
        :rtype: str
        """
        return self._repository_storages

    @repository_storages.setter
    def repository_storages(self, repository_storages):
        """Sets the repository_storages of this ApplicationSetting.


        :param repository_storages: The repository_storages of this ApplicationSetting.
        :type repository_storages: str
        """

        self._repository_storages = repository_storages

    @property
    def restricted_visibility_levels(self):
        """Gets the restricted_visibility_levels of this ApplicationSetting.


        :return: The restricted_visibility_levels of this ApplicationSetting.
        :rtype: str
        """
        return self._restricted_visibility_levels

    @restricted_visibility_levels.setter
    def restricted_visibility_levels(self, restricted_visibility_levels):
        """Sets the restricted_visibility_levels of this ApplicationSetting.


        :param restricted_visibility_levels: The restricted_visibility_levels of this ApplicationSetting.
        :type restricted_visibility_levels: str
        """

        self._restricted_visibility_levels = restricted_visibility_levels

    @property
    def session_expire_delay(self):
        """Gets the session_expire_delay of this ApplicationSetting.


        :return: The session_expire_delay of this ApplicationSetting.
        :rtype: str
        """
        return self._session_expire_delay

    @session_expire_delay.setter
    def session_expire_delay(self, session_expire_delay):
        """Sets the session_expire_delay of this ApplicationSetting.


        :param session_expire_delay: The session_expire_delay of this ApplicationSetting.
        :type session_expire_delay: str
        """

        self._session_expire_delay = session_expire_delay

    @property
    def sign_in_text(self):
        """Gets the sign_in_text of this ApplicationSetting.


        :return: The sign_in_text of this ApplicationSetting.
        :rtype: str
        """
        return self._sign_in_text

    @sign_in_text.setter
    def sign_in_text(self, sign_in_text):
        """Sets the sign_in_text of this ApplicationSetting.


        :param sign_in_text: The sign_in_text of this ApplicationSetting.
        :type sign_in_text: str
        """

        self._sign_in_text = sign_in_text

    @property
    def signin_enabled(self):
        """Gets the signin_enabled of this ApplicationSetting.


        :return: The signin_enabled of this ApplicationSetting.
        :rtype: str
        """
        return self._signin_enabled

    @signin_enabled.setter
    def signin_enabled(self, signin_enabled):
        """Sets the signin_enabled of this ApplicationSetting.


        :param signin_enabled: The signin_enabled of this ApplicationSetting.
        :type signin_enabled: str
        """

        self._signin_enabled = signin_enabled

    @property
    def signup_enabled(self):
        """Gets the signup_enabled of this ApplicationSetting.


        :return: The signup_enabled of this ApplicationSetting.
        :rtype: str
        """
        return self._signup_enabled

    @signup_enabled.setter
    def signup_enabled(self, signup_enabled):
        """Sets the signup_enabled of this ApplicationSetting.


        :param signup_enabled: The signup_enabled of this ApplicationSetting.
        :type signup_enabled: str
        """

        self._signup_enabled = signup_enabled

    @property
    def updated_at(self):
        """Gets the updated_at of this ApplicationSetting.


        :return: The updated_at of this ApplicationSetting.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ApplicationSetting.


        :param updated_at: The updated_at of this ApplicationSetting.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def user_oauth_applications(self):
        """Gets the user_oauth_applications of this ApplicationSetting.


        :return: The user_oauth_applications of this ApplicationSetting.
        :rtype: str
        """
        return self._user_oauth_applications

    @user_oauth_applications.setter
    def user_oauth_applications(self, user_oauth_applications):
        """Sets the user_oauth_applications of this ApplicationSetting.


        :param user_oauth_applications: The user_oauth_applications of this ApplicationSetting.
        :type user_oauth_applications: str
        """

        self._user_oauth_applications = user_oauth_applications
