# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostV3ProjectsIdRepositoryCommitsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch_name: str=None, commit_message: str=None, actions: List[object]=None, author_email: str=None, author_name: str=None):
        """PostV3ProjectsIdRepositoryCommitsRequest - a model defined in OpenAPI

        :param branch_name: The branch_name of this PostV3ProjectsIdRepositoryCommitsRequest.
        :param commit_message: The commit_message of this PostV3ProjectsIdRepositoryCommitsRequest.
        :param actions: The actions of this PostV3ProjectsIdRepositoryCommitsRequest.
        :param author_email: The author_email of this PostV3ProjectsIdRepositoryCommitsRequest.
        :param author_name: The author_name of this PostV3ProjectsIdRepositoryCommitsRequest.
        """
        self.openapi_types = {
            'branch_name': str,
            'commit_message': str,
            'actions': List[object],
            'author_email': str,
            'author_name': str
        }

        self.attribute_map = {
            'branch_name': 'branch_name',
            'commit_message': 'commit_message',
            'actions': 'actions',
            'author_email': 'author_email',
            'author_name': 'author_name'
        }

        self._branch_name = branch_name
        self._commit_message = commit_message
        self._actions = actions
        self._author_email = author_email
        self._author_name = author_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostV3ProjectsIdRepositoryCommitsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postV3ProjectsIdRepositoryCommits_request of this PostV3ProjectsIdRepositoryCommitsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch_name(self):
        """Gets the branch_name of this PostV3ProjectsIdRepositoryCommitsRequest.

        The name of branch

        :return: The branch_name of this PostV3ProjectsIdRepositoryCommitsRequest.
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this PostV3ProjectsIdRepositoryCommitsRequest.

        The name of branch

        :param branch_name: The branch_name of this PostV3ProjectsIdRepositoryCommitsRequest.
        :type branch_name: str
        """
        if branch_name is None:
            raise ValueError("Invalid value for `branch_name`, must not be `None`")

        self._branch_name = branch_name

    @property
    def commit_message(self):
        """Gets the commit_message of this PostV3ProjectsIdRepositoryCommitsRequest.

        Commit message

        :return: The commit_message of this PostV3ProjectsIdRepositoryCommitsRequest.
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this PostV3ProjectsIdRepositoryCommitsRequest.

        Commit message

        :param commit_message: The commit_message of this PostV3ProjectsIdRepositoryCommitsRequest.
        :type commit_message: str
        """
        if commit_message is None:
            raise ValueError("Invalid value for `commit_message`, must not be `None`")

        self._commit_message = commit_message

    @property
    def actions(self):
        """Gets the actions of this PostV3ProjectsIdRepositoryCommitsRequest.

        Actions to perform in commit

        :return: The actions of this PostV3ProjectsIdRepositoryCommitsRequest.
        :rtype: List[object]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this PostV3ProjectsIdRepositoryCommitsRequest.

        Actions to perform in commit

        :param actions: The actions of this PostV3ProjectsIdRepositoryCommitsRequest.
        :type actions: List[object]
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def author_email(self):
        """Gets the author_email of this PostV3ProjectsIdRepositoryCommitsRequest.

        Author email for commit

        :return: The author_email of this PostV3ProjectsIdRepositoryCommitsRequest.
        :rtype: str
        """
        return self._author_email

    @author_email.setter
    def author_email(self, author_email):
        """Sets the author_email of this PostV3ProjectsIdRepositoryCommitsRequest.

        Author email for commit

        :param author_email: The author_email of this PostV3ProjectsIdRepositoryCommitsRequest.
        :type author_email: str
        """

        self._author_email = author_email

    @property
    def author_name(self):
        """Gets the author_name of this PostV3ProjectsIdRepositoryCommitsRequest.

        Author name for commit

        :return: The author_name of this PostV3ProjectsIdRepositoryCommitsRequest.
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this PostV3ProjectsIdRepositoryCommitsRequest.

        Author name for commit

        :param author_name: The author_name of this PostV3ProjectsIdRepositoryCommitsRequest.
        :type author_name: str
        """

        self._author_name = author_name
