# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ProjectsIdServicesEmailsOnPushRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recipients: str=None, disable_diffs: bool=None, send_from_committer_email: bool=None, push_events: str=None, tag_push_events: str=None):
        """PutV3ProjectsIdServicesEmailsOnPushRequest - a model defined in OpenAPI

        :param recipients: The recipients of this PutV3ProjectsIdServicesEmailsOnPushRequest.
        :param disable_diffs: The disable_diffs of this PutV3ProjectsIdServicesEmailsOnPushRequest.
        :param send_from_committer_email: The send_from_committer_email of this PutV3ProjectsIdServicesEmailsOnPushRequest.
        :param push_events: The push_events of this PutV3ProjectsIdServicesEmailsOnPushRequest.
        :param tag_push_events: The tag_push_events of this PutV3ProjectsIdServicesEmailsOnPushRequest.
        """
        self.openapi_types = {
            'recipients': str,
            'disable_diffs': bool,
            'send_from_committer_email': bool,
            'push_events': str,
            'tag_push_events': str
        }

        self.attribute_map = {
            'recipients': 'recipients',
            'disable_diffs': 'disable_diffs',
            'send_from_committer_email': 'send_from_committer_email',
            'push_events': 'push_events',
            'tag_push_events': 'tag_push_events'
        }

        self._recipients = recipients
        self._disable_diffs = disable_diffs
        self._send_from_committer_email = send_from_committer_email
        self._push_events = push_events
        self._tag_push_events = tag_push_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ProjectsIdServicesEmailsOnPushRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ProjectsIdServicesEmailsOnPush_request of this PutV3ProjectsIdServicesEmailsOnPushRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recipients(self):
        """Gets the recipients of this PutV3ProjectsIdServicesEmailsOnPushRequest.

        Comma-separated list of recipient email addresses

        :return: The recipients of this PutV3ProjectsIdServicesEmailsOnPushRequest.
        :rtype: str
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this PutV3ProjectsIdServicesEmailsOnPushRequest.

        Comma-separated list of recipient email addresses

        :param recipients: The recipients of this PutV3ProjectsIdServicesEmailsOnPushRequest.
        :type recipients: str
        """
        if recipients is None:
            raise ValueError("Invalid value for `recipients`, must not be `None`")

        self._recipients = recipients

    @property
    def disable_diffs(self):
        """Gets the disable_diffs of this PutV3ProjectsIdServicesEmailsOnPushRequest.

        Disable code diffs

        :return: The disable_diffs of this PutV3ProjectsIdServicesEmailsOnPushRequest.
        :rtype: bool
        """
        return self._disable_diffs

    @disable_diffs.setter
    def disable_diffs(self, disable_diffs):
        """Sets the disable_diffs of this PutV3ProjectsIdServicesEmailsOnPushRequest.

        Disable code diffs

        :param disable_diffs: The disable_diffs of this PutV3ProjectsIdServicesEmailsOnPushRequest.
        :type disable_diffs: bool
        """

        self._disable_diffs = disable_diffs

    @property
    def send_from_committer_email(self):
        """Gets the send_from_committer_email of this PutV3ProjectsIdServicesEmailsOnPushRequest.

        Send from committer

        :return: The send_from_committer_email of this PutV3ProjectsIdServicesEmailsOnPushRequest.
        :rtype: bool
        """
        return self._send_from_committer_email

    @send_from_committer_email.setter
    def send_from_committer_email(self, send_from_committer_email):
        """Sets the send_from_committer_email of this PutV3ProjectsIdServicesEmailsOnPushRequest.

        Send from committer

        :param send_from_committer_email: The send_from_committer_email of this PutV3ProjectsIdServicesEmailsOnPushRequest.
        :type send_from_committer_email: bool
        """

        self._send_from_committer_email = send_from_committer_email

    @property
    def push_events(self):
        """Gets the push_events of this PutV3ProjectsIdServicesEmailsOnPushRequest.

        Event will be triggered by a push to the repository

        :return: The push_events of this PutV3ProjectsIdServicesEmailsOnPushRequest.
        :rtype: str
        """
        return self._push_events

    @push_events.setter
    def push_events(self, push_events):
        """Sets the push_events of this PutV3ProjectsIdServicesEmailsOnPushRequest.

        Event will be triggered by a push to the repository

        :param push_events: The push_events of this PutV3ProjectsIdServicesEmailsOnPushRequest.
        :type push_events: str
        """

        self._push_events = push_events

    @property
    def tag_push_events(self):
        """Gets the tag_push_events of this PutV3ProjectsIdServicesEmailsOnPushRequest.

        Event will be triggered when a new tag is pushed to the repository

        :return: The tag_push_events of this PutV3ProjectsIdServicesEmailsOnPushRequest.
        :rtype: str
        """
        return self._tag_push_events

    @tag_push_events.setter
    def tag_push_events(self, tag_push_events):
        """Sets the tag_push_events of this PutV3ProjectsIdServicesEmailsOnPushRequest.

        Event will be triggered when a new tag is pushed to the repository

        :param tag_push_events: The tag_push_events of this PutV3ProjectsIdServicesEmailsOnPushRequest.
        :type tag_push_events: str
        """

        self._tag_push_events = tag_push_events
