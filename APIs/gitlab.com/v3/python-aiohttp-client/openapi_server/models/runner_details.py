# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.basic_project_details import BasicProjectDetails
from openapi_server import util


class RunnerDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: str=None, architecture: str=None, contacted_at: str=None, description: str=None, id: str=None, is_shared: str=None, locked: str=None, name: str=None, platform: str=None, projects: BasicProjectDetails=None, revision: str=None, run_untagged: str=None, tag_list: str=None, token: str=None, version: str=None):
        """RunnerDetails - a model defined in OpenAPI

        :param active: The active of this RunnerDetails.
        :param architecture: The architecture of this RunnerDetails.
        :param contacted_at: The contacted_at of this RunnerDetails.
        :param description: The description of this RunnerDetails.
        :param id: The id of this RunnerDetails.
        :param is_shared: The is_shared of this RunnerDetails.
        :param locked: The locked of this RunnerDetails.
        :param name: The name of this RunnerDetails.
        :param platform: The platform of this RunnerDetails.
        :param projects: The projects of this RunnerDetails.
        :param revision: The revision of this RunnerDetails.
        :param run_untagged: The run_untagged of this RunnerDetails.
        :param tag_list: The tag_list of this RunnerDetails.
        :param token: The token of this RunnerDetails.
        :param version: The version of this RunnerDetails.
        """
        self.openapi_types = {
            'active': str,
            'architecture': str,
            'contacted_at': str,
            'description': str,
            'id': str,
            'is_shared': str,
            'locked': str,
            'name': str,
            'platform': str,
            'projects': BasicProjectDetails,
            'revision': str,
            'run_untagged': str,
            'tag_list': str,
            'token': str,
            'version': str
        }

        self.attribute_map = {
            'active': 'active',
            'architecture': 'architecture',
            'contacted_at': 'contacted_at',
            'description': 'description',
            'id': 'id',
            'is_shared': 'is_shared',
            'locked': 'locked',
            'name': 'name',
            'platform': 'platform',
            'projects': 'projects',
            'revision': 'revision',
            'run_untagged': 'run_untagged',
            'tag_list': 'tag_list',
            'token': 'token',
            'version': 'version'
        }

        self._active = active
        self._architecture = architecture
        self._contacted_at = contacted_at
        self._description = description
        self._id = id
        self._is_shared = is_shared
        self._locked = locked
        self._name = name
        self._platform = platform
        self._projects = projects
        self._revision = revision
        self._run_untagged = run_untagged
        self._tag_list = tag_list
        self._token = token
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunnerDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunnerDetails of this RunnerDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this RunnerDetails.


        :return: The active of this RunnerDetails.
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this RunnerDetails.


        :param active: The active of this RunnerDetails.
        :type active: str
        """

        self._active = active

    @property
    def architecture(self):
        """Gets the architecture of this RunnerDetails.


        :return: The architecture of this RunnerDetails.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this RunnerDetails.


        :param architecture: The architecture of this RunnerDetails.
        :type architecture: str
        """

        self._architecture = architecture

    @property
    def contacted_at(self):
        """Gets the contacted_at of this RunnerDetails.


        :return: The contacted_at of this RunnerDetails.
        :rtype: str
        """
        return self._contacted_at

    @contacted_at.setter
    def contacted_at(self, contacted_at):
        """Sets the contacted_at of this RunnerDetails.


        :param contacted_at: The contacted_at of this RunnerDetails.
        :type contacted_at: str
        """

        self._contacted_at = contacted_at

    @property
    def description(self):
        """Gets the description of this RunnerDetails.


        :return: The description of this RunnerDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RunnerDetails.


        :param description: The description of this RunnerDetails.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this RunnerDetails.


        :return: The id of this RunnerDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RunnerDetails.


        :param id: The id of this RunnerDetails.
        :type id: str
        """

        self._id = id

    @property
    def is_shared(self):
        """Gets the is_shared of this RunnerDetails.


        :return: The is_shared of this RunnerDetails.
        :rtype: str
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this RunnerDetails.


        :param is_shared: The is_shared of this RunnerDetails.
        :type is_shared: str
        """

        self._is_shared = is_shared

    @property
    def locked(self):
        """Gets the locked of this RunnerDetails.


        :return: The locked of this RunnerDetails.
        :rtype: str
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this RunnerDetails.


        :param locked: The locked of this RunnerDetails.
        :type locked: str
        """

        self._locked = locked

    @property
    def name(self):
        """Gets the name of this RunnerDetails.


        :return: The name of this RunnerDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RunnerDetails.


        :param name: The name of this RunnerDetails.
        :type name: str
        """

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this RunnerDetails.


        :return: The platform of this RunnerDetails.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this RunnerDetails.


        :param platform: The platform of this RunnerDetails.
        :type platform: str
        """

        self._platform = platform

    @property
    def projects(self):
        """Gets the projects of this RunnerDetails.


        :return: The projects of this RunnerDetails.
        :rtype: BasicProjectDetails
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this RunnerDetails.


        :param projects: The projects of this RunnerDetails.
        :type projects: BasicProjectDetails
        """

        self._projects = projects

    @property
    def revision(self):
        """Gets the revision of this RunnerDetails.


        :return: The revision of this RunnerDetails.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this RunnerDetails.


        :param revision: The revision of this RunnerDetails.
        :type revision: str
        """

        self._revision = revision

    @property
    def run_untagged(self):
        """Gets the run_untagged of this RunnerDetails.


        :return: The run_untagged of this RunnerDetails.
        :rtype: str
        """
        return self._run_untagged

    @run_untagged.setter
    def run_untagged(self, run_untagged):
        """Sets the run_untagged of this RunnerDetails.


        :param run_untagged: The run_untagged of this RunnerDetails.
        :type run_untagged: str
        """

        self._run_untagged = run_untagged

    @property
    def tag_list(self):
        """Gets the tag_list of this RunnerDetails.


        :return: The tag_list of this RunnerDetails.
        :rtype: str
        """
        return self._tag_list

    @tag_list.setter
    def tag_list(self, tag_list):
        """Sets the tag_list of this RunnerDetails.


        :param tag_list: The tag_list of this RunnerDetails.
        :type tag_list: str
        """

        self._tag_list = tag_list

    @property
    def token(self):
        """Gets the token of this RunnerDetails.


        :return: The token of this RunnerDetails.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this RunnerDetails.


        :param token: The token of this RunnerDetails.
        :type token: str
        """

        self._token = token

    @property
    def version(self):
        """Gets the version of this RunnerDetails.


        :return: The version of this RunnerDetails.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RunnerDetails.


        :param version: The version of this RunnerDetails.
        :type version: str
        """

        self._version = version
