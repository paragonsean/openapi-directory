# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectGroupLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expires_at: str=None, group_access: str=None, group_id: str=None, id: str=None, project_id: str=None):
        """ProjectGroupLink - a model defined in OpenAPI

        :param expires_at: The expires_at of this ProjectGroupLink.
        :param group_access: The group_access of this ProjectGroupLink.
        :param group_id: The group_id of this ProjectGroupLink.
        :param id: The id of this ProjectGroupLink.
        :param project_id: The project_id of this ProjectGroupLink.
        """
        self.openapi_types = {
            'expires_at': str,
            'group_access': str,
            'group_id': str,
            'id': str,
            'project_id': str
        }

        self.attribute_map = {
            'expires_at': 'expires_at',
            'group_access': 'group_access',
            'group_id': 'group_id',
            'id': 'id',
            'project_id': 'project_id'
        }

        self._expires_at = expires_at
        self._group_access = group_access
        self._group_id = group_id
        self._id = id
        self._project_id = project_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectGroupLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectGroupLink of this ProjectGroupLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires_at(self):
        """Gets the expires_at of this ProjectGroupLink.


        :return: The expires_at of this ProjectGroupLink.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this ProjectGroupLink.


        :param expires_at: The expires_at of this ProjectGroupLink.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def group_access(self):
        """Gets the group_access of this ProjectGroupLink.


        :return: The group_access of this ProjectGroupLink.
        :rtype: str
        """
        return self._group_access

    @group_access.setter
    def group_access(self, group_access):
        """Sets the group_access of this ProjectGroupLink.


        :param group_access: The group_access of this ProjectGroupLink.
        :type group_access: str
        """

        self._group_access = group_access

    @property
    def group_id(self):
        """Gets the group_id of this ProjectGroupLink.


        :return: The group_id of this ProjectGroupLink.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ProjectGroupLink.


        :param group_id: The group_id of this ProjectGroupLink.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this ProjectGroupLink.


        :return: The id of this ProjectGroupLink.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectGroupLink.


        :param id: The id of this ProjectGroupLink.
        :type id: str
        """

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this ProjectGroupLink.


        :return: The project_id of this ProjectGroupLink.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectGroupLink.


        :param project_id: The project_id of this ProjectGroupLink.
        :type project_id: str
        """

        self._project_id = project_id
