# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ProjectsIdRepositoryFilesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_path: str=None, branch_name: str=None, commit_message: str=None, author_email: str=None, author_name: str=None, content: str=None, encoding: str=None):
        """PutV3ProjectsIdRepositoryFilesRequest - a model defined in OpenAPI

        :param file_path: The file_path of this PutV3ProjectsIdRepositoryFilesRequest.
        :param branch_name: The branch_name of this PutV3ProjectsIdRepositoryFilesRequest.
        :param commit_message: The commit_message of this PutV3ProjectsIdRepositoryFilesRequest.
        :param author_email: The author_email of this PutV3ProjectsIdRepositoryFilesRequest.
        :param author_name: The author_name of this PutV3ProjectsIdRepositoryFilesRequest.
        :param content: The content of this PutV3ProjectsIdRepositoryFilesRequest.
        :param encoding: The encoding of this PutV3ProjectsIdRepositoryFilesRequest.
        """
        self.openapi_types = {
            'file_path': str,
            'branch_name': str,
            'commit_message': str,
            'author_email': str,
            'author_name': str,
            'content': str,
            'encoding': str
        }

        self.attribute_map = {
            'file_path': 'file_path',
            'branch_name': 'branch_name',
            'commit_message': 'commit_message',
            'author_email': 'author_email',
            'author_name': 'author_name',
            'content': 'content',
            'encoding': 'encoding'
        }

        self._file_path = file_path
        self._branch_name = branch_name
        self._commit_message = commit_message
        self._author_email = author_email
        self._author_name = author_name
        self._content = content
        self._encoding = encoding

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ProjectsIdRepositoryFilesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ProjectsIdRepositoryFiles_request of this PutV3ProjectsIdRepositoryFilesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_path(self):
        """Gets the file_path of this PutV3ProjectsIdRepositoryFilesRequest.

        The path to new file. Ex. lib/class.rb

        :return: The file_path of this PutV3ProjectsIdRepositoryFilesRequest.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this PutV3ProjectsIdRepositoryFilesRequest.

        The path to new file. Ex. lib/class.rb

        :param file_path: The file_path of this PutV3ProjectsIdRepositoryFilesRequest.
        :type file_path: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")

        self._file_path = file_path

    @property
    def branch_name(self):
        """Gets the branch_name of this PutV3ProjectsIdRepositoryFilesRequest.

        The name of branch

        :return: The branch_name of this PutV3ProjectsIdRepositoryFilesRequest.
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this PutV3ProjectsIdRepositoryFilesRequest.

        The name of branch

        :param branch_name: The branch_name of this PutV3ProjectsIdRepositoryFilesRequest.
        :type branch_name: str
        """
        if branch_name is None:
            raise ValueError("Invalid value for `branch_name`, must not be `None`")

        self._branch_name = branch_name

    @property
    def commit_message(self):
        """Gets the commit_message of this PutV3ProjectsIdRepositoryFilesRequest.

        Commit Message

        :return: The commit_message of this PutV3ProjectsIdRepositoryFilesRequest.
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this PutV3ProjectsIdRepositoryFilesRequest.

        Commit Message

        :param commit_message: The commit_message of this PutV3ProjectsIdRepositoryFilesRequest.
        :type commit_message: str
        """
        if commit_message is None:
            raise ValueError("Invalid value for `commit_message`, must not be `None`")

        self._commit_message = commit_message

    @property
    def author_email(self):
        """Gets the author_email of this PutV3ProjectsIdRepositoryFilesRequest.

        The email of the author

        :return: The author_email of this PutV3ProjectsIdRepositoryFilesRequest.
        :rtype: str
        """
        return self._author_email

    @author_email.setter
    def author_email(self, author_email):
        """Sets the author_email of this PutV3ProjectsIdRepositoryFilesRequest.

        The email of the author

        :param author_email: The author_email of this PutV3ProjectsIdRepositoryFilesRequest.
        :type author_email: str
        """

        self._author_email = author_email

    @property
    def author_name(self):
        """Gets the author_name of this PutV3ProjectsIdRepositoryFilesRequest.

        The name of the author

        :return: The author_name of this PutV3ProjectsIdRepositoryFilesRequest.
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this PutV3ProjectsIdRepositoryFilesRequest.

        The name of the author

        :param author_name: The author_name of this PutV3ProjectsIdRepositoryFilesRequest.
        :type author_name: str
        """

        self._author_name = author_name

    @property
    def content(self):
        """Gets the content of this PutV3ProjectsIdRepositoryFilesRequest.

        File content

        :return: The content of this PutV3ProjectsIdRepositoryFilesRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PutV3ProjectsIdRepositoryFilesRequest.

        File content

        :param content: The content of this PutV3ProjectsIdRepositoryFilesRequest.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def encoding(self):
        """Gets the encoding of this PutV3ProjectsIdRepositoryFilesRequest.

        File encoding

        :return: The encoding of this PutV3ProjectsIdRepositoryFilesRequest.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this PutV3ProjectsIdRepositoryFilesRequest.

        File encoding

        :param encoding: The encoding of this PutV3ProjectsIdRepositoryFilesRequest.
        :type encoding: str
        """
        allowed_values = ["base64"]  # noqa: E501
        if encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"
                .format(encoding, allowed_values)
            )

        self._encoding = encoding
