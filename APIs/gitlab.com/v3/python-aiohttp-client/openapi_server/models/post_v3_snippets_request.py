# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostV3SnippetsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title: str=None, file_name: str=None, content: str=None, visibility_level: int=10):
        """PostV3SnippetsRequest - a model defined in OpenAPI

        :param title: The title of this PostV3SnippetsRequest.
        :param file_name: The file_name of this PostV3SnippetsRequest.
        :param content: The content of this PostV3SnippetsRequest.
        :param visibility_level: The visibility_level of this PostV3SnippetsRequest.
        """
        self.openapi_types = {
            'title': str,
            'file_name': str,
            'content': str,
            'visibility_level': int
        }

        self.attribute_map = {
            'title': 'title',
            'file_name': 'file_name',
            'content': 'content',
            'visibility_level': 'visibility_level'
        }

        self._title = title
        self._file_name = file_name
        self._content = content
        self._visibility_level = visibility_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostV3SnippetsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postV3Snippets_request of this PostV3SnippetsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this PostV3SnippetsRequest.

        The title of a snippet

        :return: The title of this PostV3SnippetsRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PostV3SnippetsRequest.

        The title of a snippet

        :param title: The title of this PostV3SnippetsRequest.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def file_name(self):
        """Gets the file_name of this PostV3SnippetsRequest.

        The name of a snippet file

        :return: The file_name of this PostV3SnippetsRequest.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this PostV3SnippetsRequest.

        The name of a snippet file

        :param file_name: The file_name of this PostV3SnippetsRequest.
        :type file_name: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")

        self._file_name = file_name

    @property
    def content(self):
        """Gets the content of this PostV3SnippetsRequest.

        The content of a snippet

        :return: The content of this PostV3SnippetsRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PostV3SnippetsRequest.

        The content of a snippet

        :param content: The content of this PostV3SnippetsRequest.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def visibility_level(self):
        """Gets the visibility_level of this PostV3SnippetsRequest.

        The visibility level of the snippet

        :return: The visibility_level of this PostV3SnippetsRequest.
        :rtype: int
        """
        return self._visibility_level

    @visibility_level.setter
    def visibility_level(self, visibility_level):
        """Sets the visibility_level of this PostV3SnippetsRequest.

        The visibility level of the snippet

        :param visibility_level: The visibility_level of this PostV3SnippetsRequest.
        :type visibility_level: int
        """
        allowed_values = [0, 10, 20]  # noqa: E501
        if visibility_level not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility_level` ({0}), must be one of {1}"
                .format(visibility_level, allowed_values)
            )

        self._visibility_level = visibility_level
