# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostV3GroupsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, path: str=None, description: str=None, visibility_level: int=None, lfs_enabled: bool=None, request_access_enabled: bool=None):
        """PostV3GroupsRequest - a model defined in OpenAPI

        :param name: The name of this PostV3GroupsRequest.
        :param path: The path of this PostV3GroupsRequest.
        :param description: The description of this PostV3GroupsRequest.
        :param visibility_level: The visibility_level of this PostV3GroupsRequest.
        :param lfs_enabled: The lfs_enabled of this PostV3GroupsRequest.
        :param request_access_enabled: The request_access_enabled of this PostV3GroupsRequest.
        """
        self.openapi_types = {
            'name': str,
            'path': str,
            'description': str,
            'visibility_level': int,
            'lfs_enabled': bool,
            'request_access_enabled': bool
        }

        self.attribute_map = {
            'name': 'name',
            'path': 'path',
            'description': 'description',
            'visibility_level': 'visibility_level',
            'lfs_enabled': 'lfs_enabled',
            'request_access_enabled': 'request_access_enabled'
        }

        self._name = name
        self._path = path
        self._description = description
        self._visibility_level = visibility_level
        self._lfs_enabled = lfs_enabled
        self._request_access_enabled = request_access_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostV3GroupsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postV3Groups_request of this PostV3GroupsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PostV3GroupsRequest.

        The name of the group

        :return: The name of this PostV3GroupsRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostV3GroupsRequest.

        The name of the group

        :param name: The name of this PostV3GroupsRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def path(self):
        """Gets the path of this PostV3GroupsRequest.

        The path of the group

        :return: The path of this PostV3GroupsRequest.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PostV3GroupsRequest.

        The path of the group

        :param path: The path of this PostV3GroupsRequest.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def description(self):
        """Gets the description of this PostV3GroupsRequest.

        The description of the group

        :return: The description of this PostV3GroupsRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostV3GroupsRequest.

        The description of the group

        :param description: The description of this PostV3GroupsRequest.
        :type description: str
        """

        self._description = description

    @property
    def visibility_level(self):
        """Gets the visibility_level of this PostV3GroupsRequest.

        The visibility level of the group

        :return: The visibility_level of this PostV3GroupsRequest.
        :rtype: int
        """
        return self._visibility_level

    @visibility_level.setter
    def visibility_level(self, visibility_level):
        """Sets the visibility_level of this PostV3GroupsRequest.

        The visibility level of the group

        :param visibility_level: The visibility_level of this PostV3GroupsRequest.
        :type visibility_level: int
        """

        self._visibility_level = visibility_level

    @property
    def lfs_enabled(self):
        """Gets the lfs_enabled of this PostV3GroupsRequest.

        Enable/disable LFS for the projects in this group

        :return: The lfs_enabled of this PostV3GroupsRequest.
        :rtype: bool
        """
        return self._lfs_enabled

    @lfs_enabled.setter
    def lfs_enabled(self, lfs_enabled):
        """Sets the lfs_enabled of this PostV3GroupsRequest.

        Enable/disable LFS for the projects in this group

        :param lfs_enabled: The lfs_enabled of this PostV3GroupsRequest.
        :type lfs_enabled: bool
        """

        self._lfs_enabled = lfs_enabled

    @property
    def request_access_enabled(self):
        """Gets the request_access_enabled of this PostV3GroupsRequest.

        Allow users to request member access

        :return: The request_access_enabled of this PostV3GroupsRequest.
        :rtype: bool
        """
        return self._request_access_enabled

    @request_access_enabled.setter
    def request_access_enabled(self, request_access_enabled):
        """Sets the request_access_enabled of this PostV3GroupsRequest.

        Allow users to request member access

        :param request_access_enabled: The request_access_enabled of this PostV3GroupsRequest.
        :type request_access_enabled: bool
        """

        self._request_access_enabled = request_access_enabled
