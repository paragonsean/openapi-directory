# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.basic_project_details import BasicProjectDetails
from openapi_server.models.namespace import Namespace
from openapi_server.models.project_statistics import ProjectStatistics
from openapi_server.models.user_basic import UserBasic
from openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: str=None, avatar_url: str=None, builds_enabled: str=None, container_registry_enabled: str=None, created_at: str=None, creator_id: str=None, default_branch: str=None, description: str=None, forked_from_project: BasicProjectDetails=None, forks_count: str=None, http_url_to_repo: str=None, id: str=None, issues_enabled: str=None, last_activity_at: str=None, lfs_enabled: str=None, merge_requests_enabled: str=None, name: str=None, name_with_namespace: str=None, namespace: Namespace=None, only_allow_merge_if_all_discussions_are_resolved: str=None, only_allow_merge_if_build_succeeds: str=None, open_issues_count: str=None, owner: UserBasic=None, path: str=None, path_with_namespace: str=None, public: str=None, public_builds: str=None, request_access_enabled: str=None, runners_token: str=None, shared_runners_enabled: str=None, shared_with_groups: str=None, snippets_enabled: str=None, ssh_url_to_repo: str=None, star_count: str=None, statistics: ProjectStatistics=None, tag_list: str=None, visibility_level: str=None, web_url: str=None, wiki_enabled: str=None):
        """Project - a model defined in OpenAPI

        :param archived: The archived of this Project.
        :param avatar_url: The avatar_url of this Project.
        :param builds_enabled: The builds_enabled of this Project.
        :param container_registry_enabled: The container_registry_enabled of this Project.
        :param created_at: The created_at of this Project.
        :param creator_id: The creator_id of this Project.
        :param default_branch: The default_branch of this Project.
        :param description: The description of this Project.
        :param forked_from_project: The forked_from_project of this Project.
        :param forks_count: The forks_count of this Project.
        :param http_url_to_repo: The http_url_to_repo of this Project.
        :param id: The id of this Project.
        :param issues_enabled: The issues_enabled of this Project.
        :param last_activity_at: The last_activity_at of this Project.
        :param lfs_enabled: The lfs_enabled of this Project.
        :param merge_requests_enabled: The merge_requests_enabled of this Project.
        :param name: The name of this Project.
        :param name_with_namespace: The name_with_namespace of this Project.
        :param namespace: The namespace of this Project.
        :param only_allow_merge_if_all_discussions_are_resolved: The only_allow_merge_if_all_discussions_are_resolved of this Project.
        :param only_allow_merge_if_build_succeeds: The only_allow_merge_if_build_succeeds of this Project.
        :param open_issues_count: The open_issues_count of this Project.
        :param owner: The owner of this Project.
        :param path: The path of this Project.
        :param path_with_namespace: The path_with_namespace of this Project.
        :param public: The public of this Project.
        :param public_builds: The public_builds of this Project.
        :param request_access_enabled: The request_access_enabled of this Project.
        :param runners_token: The runners_token of this Project.
        :param shared_runners_enabled: The shared_runners_enabled of this Project.
        :param shared_with_groups: The shared_with_groups of this Project.
        :param snippets_enabled: The snippets_enabled of this Project.
        :param ssh_url_to_repo: The ssh_url_to_repo of this Project.
        :param star_count: The star_count of this Project.
        :param statistics: The statistics of this Project.
        :param tag_list: The tag_list of this Project.
        :param visibility_level: The visibility_level of this Project.
        :param web_url: The web_url of this Project.
        :param wiki_enabled: The wiki_enabled of this Project.
        """
        self.openapi_types = {
            'archived': str,
            'avatar_url': str,
            'builds_enabled': str,
            'container_registry_enabled': str,
            'created_at': str,
            'creator_id': str,
            'default_branch': str,
            'description': str,
            'forked_from_project': BasicProjectDetails,
            'forks_count': str,
            'http_url_to_repo': str,
            'id': str,
            'issues_enabled': str,
            'last_activity_at': str,
            'lfs_enabled': str,
            'merge_requests_enabled': str,
            'name': str,
            'name_with_namespace': str,
            'namespace': Namespace,
            'only_allow_merge_if_all_discussions_are_resolved': str,
            'only_allow_merge_if_build_succeeds': str,
            'open_issues_count': str,
            'owner': UserBasic,
            'path': str,
            'path_with_namespace': str,
            'public': str,
            'public_builds': str,
            'request_access_enabled': str,
            'runners_token': str,
            'shared_runners_enabled': str,
            'shared_with_groups': str,
            'snippets_enabled': str,
            'ssh_url_to_repo': str,
            'star_count': str,
            'statistics': ProjectStatistics,
            'tag_list': str,
            'visibility_level': str,
            'web_url': str,
            'wiki_enabled': str
        }

        self.attribute_map = {
            'archived': 'archived',
            'avatar_url': 'avatar_url',
            'builds_enabled': 'builds_enabled',
            'container_registry_enabled': 'container_registry_enabled',
            'created_at': 'created_at',
            'creator_id': 'creator_id',
            'default_branch': 'default_branch',
            'description': 'description',
            'forked_from_project': 'forked_from_project',
            'forks_count': 'forks_count',
            'http_url_to_repo': 'http_url_to_repo',
            'id': 'id',
            'issues_enabled': 'issues_enabled',
            'last_activity_at': 'last_activity_at',
            'lfs_enabled': 'lfs_enabled',
            'merge_requests_enabled': 'merge_requests_enabled',
            'name': 'name',
            'name_with_namespace': 'name_with_namespace',
            'namespace': 'namespace',
            'only_allow_merge_if_all_discussions_are_resolved': 'only_allow_merge_if_all_discussions_are_resolved',
            'only_allow_merge_if_build_succeeds': 'only_allow_merge_if_build_succeeds',
            'open_issues_count': 'open_issues_count',
            'owner': 'owner',
            'path': 'path',
            'path_with_namespace': 'path_with_namespace',
            'public': 'public',
            'public_builds': 'public_builds',
            'request_access_enabled': 'request_access_enabled',
            'runners_token': 'runners_token',
            'shared_runners_enabled': 'shared_runners_enabled',
            'shared_with_groups': 'shared_with_groups',
            'snippets_enabled': 'snippets_enabled',
            'ssh_url_to_repo': 'ssh_url_to_repo',
            'star_count': 'star_count',
            'statistics': 'statistics',
            'tag_list': 'tag_list',
            'visibility_level': 'visibility_level',
            'web_url': 'web_url',
            'wiki_enabled': 'wiki_enabled'
        }

        self._archived = archived
        self._avatar_url = avatar_url
        self._builds_enabled = builds_enabled
        self._container_registry_enabled = container_registry_enabled
        self._created_at = created_at
        self._creator_id = creator_id
        self._default_branch = default_branch
        self._description = description
        self._forked_from_project = forked_from_project
        self._forks_count = forks_count
        self._http_url_to_repo = http_url_to_repo
        self._id = id
        self._issues_enabled = issues_enabled
        self._last_activity_at = last_activity_at
        self._lfs_enabled = lfs_enabled
        self._merge_requests_enabled = merge_requests_enabled
        self._name = name
        self._name_with_namespace = name_with_namespace
        self._namespace = namespace
        self._only_allow_merge_if_all_discussions_are_resolved = only_allow_merge_if_all_discussions_are_resolved
        self._only_allow_merge_if_build_succeeds = only_allow_merge_if_build_succeeds
        self._open_issues_count = open_issues_count
        self._owner = owner
        self._path = path
        self._path_with_namespace = path_with_namespace
        self._public = public
        self._public_builds = public_builds
        self._request_access_enabled = request_access_enabled
        self._runners_token = runners_token
        self._shared_runners_enabled = shared_runners_enabled
        self._shared_with_groups = shared_with_groups
        self._snippets_enabled = snippets_enabled
        self._ssh_url_to_repo = ssh_url_to_repo
        self._star_count = star_count
        self._statistics = statistics
        self._tag_list = tag_list
        self._visibility_level = visibility_level
        self._web_url = web_url
        self._wiki_enabled = wiki_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project of this Project.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this Project.


        :return: The archived of this Project.
        :rtype: str
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Project.


        :param archived: The archived of this Project.
        :type archived: str
        """

        self._archived = archived

    @property
    def avatar_url(self):
        """Gets the avatar_url of this Project.


        :return: The avatar_url of this Project.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this Project.


        :param avatar_url: The avatar_url of this Project.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def builds_enabled(self):
        """Gets the builds_enabled of this Project.


        :return: The builds_enabled of this Project.
        :rtype: str
        """
        return self._builds_enabled

    @builds_enabled.setter
    def builds_enabled(self, builds_enabled):
        """Sets the builds_enabled of this Project.


        :param builds_enabled: The builds_enabled of this Project.
        :type builds_enabled: str
        """

        self._builds_enabled = builds_enabled

    @property
    def container_registry_enabled(self):
        """Gets the container_registry_enabled of this Project.


        :return: The container_registry_enabled of this Project.
        :rtype: str
        """
        return self._container_registry_enabled

    @container_registry_enabled.setter
    def container_registry_enabled(self, container_registry_enabled):
        """Sets the container_registry_enabled of this Project.


        :param container_registry_enabled: The container_registry_enabled of this Project.
        :type container_registry_enabled: str
        """

        self._container_registry_enabled = container_registry_enabled

    @property
    def created_at(self):
        """Gets the created_at of this Project.


        :return: The created_at of this Project.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Project.


        :param created_at: The created_at of this Project.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def creator_id(self):
        """Gets the creator_id of this Project.


        :return: The creator_id of this Project.
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this Project.


        :param creator_id: The creator_id of this Project.
        :type creator_id: str
        """

        self._creator_id = creator_id

    @property
    def default_branch(self):
        """Gets the default_branch of this Project.


        :return: The default_branch of this Project.
        :rtype: str
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this Project.


        :param default_branch: The default_branch of this Project.
        :type default_branch: str
        """

        self._default_branch = default_branch

    @property
    def description(self):
        """Gets the description of this Project.


        :return: The description of this Project.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.


        :param description: The description of this Project.
        :type description: str
        """

        self._description = description

    @property
    def forked_from_project(self):
        """Gets the forked_from_project of this Project.


        :return: The forked_from_project of this Project.
        :rtype: BasicProjectDetails
        """
        return self._forked_from_project

    @forked_from_project.setter
    def forked_from_project(self, forked_from_project):
        """Sets the forked_from_project of this Project.


        :param forked_from_project: The forked_from_project of this Project.
        :type forked_from_project: BasicProjectDetails
        """

        self._forked_from_project = forked_from_project

    @property
    def forks_count(self):
        """Gets the forks_count of this Project.


        :return: The forks_count of this Project.
        :rtype: str
        """
        return self._forks_count

    @forks_count.setter
    def forks_count(self, forks_count):
        """Sets the forks_count of this Project.


        :param forks_count: The forks_count of this Project.
        :type forks_count: str
        """

        self._forks_count = forks_count

    @property
    def http_url_to_repo(self):
        """Gets the http_url_to_repo of this Project.


        :return: The http_url_to_repo of this Project.
        :rtype: str
        """
        return self._http_url_to_repo

    @http_url_to_repo.setter
    def http_url_to_repo(self, http_url_to_repo):
        """Sets the http_url_to_repo of this Project.


        :param http_url_to_repo: The http_url_to_repo of this Project.
        :type http_url_to_repo: str
        """

        self._http_url_to_repo = http_url_to_repo

    @property
    def id(self):
        """Gets the id of this Project.


        :return: The id of this Project.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.
        :type id: str
        """

        self._id = id

    @property
    def issues_enabled(self):
        """Gets the issues_enabled of this Project.


        :return: The issues_enabled of this Project.
        :rtype: str
        """
        return self._issues_enabled

    @issues_enabled.setter
    def issues_enabled(self, issues_enabled):
        """Sets the issues_enabled of this Project.


        :param issues_enabled: The issues_enabled of this Project.
        :type issues_enabled: str
        """

        self._issues_enabled = issues_enabled

    @property
    def last_activity_at(self):
        """Gets the last_activity_at of this Project.


        :return: The last_activity_at of this Project.
        :rtype: str
        """
        return self._last_activity_at

    @last_activity_at.setter
    def last_activity_at(self, last_activity_at):
        """Sets the last_activity_at of this Project.


        :param last_activity_at: The last_activity_at of this Project.
        :type last_activity_at: str
        """

        self._last_activity_at = last_activity_at

    @property
    def lfs_enabled(self):
        """Gets the lfs_enabled of this Project.


        :return: The lfs_enabled of this Project.
        :rtype: str
        """
        return self._lfs_enabled

    @lfs_enabled.setter
    def lfs_enabled(self, lfs_enabled):
        """Sets the lfs_enabled of this Project.


        :param lfs_enabled: The lfs_enabled of this Project.
        :type lfs_enabled: str
        """

        self._lfs_enabled = lfs_enabled

    @property
    def merge_requests_enabled(self):
        """Gets the merge_requests_enabled of this Project.


        :return: The merge_requests_enabled of this Project.
        :rtype: str
        """
        return self._merge_requests_enabled

    @merge_requests_enabled.setter
    def merge_requests_enabled(self, merge_requests_enabled):
        """Sets the merge_requests_enabled of this Project.


        :param merge_requests_enabled: The merge_requests_enabled of this Project.
        :type merge_requests_enabled: str
        """

        self._merge_requests_enabled = merge_requests_enabled

    @property
    def name(self):
        """Gets the name of this Project.


        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.
        :type name: str
        """

        self._name = name

    @property
    def name_with_namespace(self):
        """Gets the name_with_namespace of this Project.


        :return: The name_with_namespace of this Project.
        :rtype: str
        """
        return self._name_with_namespace

    @name_with_namespace.setter
    def name_with_namespace(self, name_with_namespace):
        """Sets the name_with_namespace of this Project.


        :param name_with_namespace: The name_with_namespace of this Project.
        :type name_with_namespace: str
        """

        self._name_with_namespace = name_with_namespace

    @property
    def namespace(self):
        """Gets the namespace of this Project.


        :return: The namespace of this Project.
        :rtype: Namespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Project.


        :param namespace: The namespace of this Project.
        :type namespace: Namespace
        """

        self._namespace = namespace

    @property
    def only_allow_merge_if_all_discussions_are_resolved(self):
        """Gets the only_allow_merge_if_all_discussions_are_resolved of this Project.


        :return: The only_allow_merge_if_all_discussions_are_resolved of this Project.
        :rtype: str
        """
        return self._only_allow_merge_if_all_discussions_are_resolved

    @only_allow_merge_if_all_discussions_are_resolved.setter
    def only_allow_merge_if_all_discussions_are_resolved(self, only_allow_merge_if_all_discussions_are_resolved):
        """Sets the only_allow_merge_if_all_discussions_are_resolved of this Project.


        :param only_allow_merge_if_all_discussions_are_resolved: The only_allow_merge_if_all_discussions_are_resolved of this Project.
        :type only_allow_merge_if_all_discussions_are_resolved: str
        """

        self._only_allow_merge_if_all_discussions_are_resolved = only_allow_merge_if_all_discussions_are_resolved

    @property
    def only_allow_merge_if_build_succeeds(self):
        """Gets the only_allow_merge_if_build_succeeds of this Project.


        :return: The only_allow_merge_if_build_succeeds of this Project.
        :rtype: str
        """
        return self._only_allow_merge_if_build_succeeds

    @only_allow_merge_if_build_succeeds.setter
    def only_allow_merge_if_build_succeeds(self, only_allow_merge_if_build_succeeds):
        """Sets the only_allow_merge_if_build_succeeds of this Project.


        :param only_allow_merge_if_build_succeeds: The only_allow_merge_if_build_succeeds of this Project.
        :type only_allow_merge_if_build_succeeds: str
        """

        self._only_allow_merge_if_build_succeeds = only_allow_merge_if_build_succeeds

    @property
    def open_issues_count(self):
        """Gets the open_issues_count of this Project.


        :return: The open_issues_count of this Project.
        :rtype: str
        """
        return self._open_issues_count

    @open_issues_count.setter
    def open_issues_count(self, open_issues_count):
        """Sets the open_issues_count of this Project.


        :param open_issues_count: The open_issues_count of this Project.
        :type open_issues_count: str
        """

        self._open_issues_count = open_issues_count

    @property
    def owner(self):
        """Gets the owner of this Project.


        :return: The owner of this Project.
        :rtype: UserBasic
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Project.


        :param owner: The owner of this Project.
        :type owner: UserBasic
        """

        self._owner = owner

    @property
    def path(self):
        """Gets the path of this Project.


        :return: The path of this Project.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Project.


        :param path: The path of this Project.
        :type path: str
        """

        self._path = path

    @property
    def path_with_namespace(self):
        """Gets the path_with_namespace of this Project.


        :return: The path_with_namespace of this Project.
        :rtype: str
        """
        return self._path_with_namespace

    @path_with_namespace.setter
    def path_with_namespace(self, path_with_namespace):
        """Sets the path_with_namespace of this Project.


        :param path_with_namespace: The path_with_namespace of this Project.
        :type path_with_namespace: str
        """

        self._path_with_namespace = path_with_namespace

    @property
    def public(self):
        """Gets the public of this Project.


        :return: The public of this Project.
        :rtype: str
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Project.


        :param public: The public of this Project.
        :type public: str
        """

        self._public = public

    @property
    def public_builds(self):
        """Gets the public_builds of this Project.


        :return: The public_builds of this Project.
        :rtype: str
        """
        return self._public_builds

    @public_builds.setter
    def public_builds(self, public_builds):
        """Sets the public_builds of this Project.


        :param public_builds: The public_builds of this Project.
        :type public_builds: str
        """

        self._public_builds = public_builds

    @property
    def request_access_enabled(self):
        """Gets the request_access_enabled of this Project.


        :return: The request_access_enabled of this Project.
        :rtype: str
        """
        return self._request_access_enabled

    @request_access_enabled.setter
    def request_access_enabled(self, request_access_enabled):
        """Sets the request_access_enabled of this Project.


        :param request_access_enabled: The request_access_enabled of this Project.
        :type request_access_enabled: str
        """

        self._request_access_enabled = request_access_enabled

    @property
    def runners_token(self):
        """Gets the runners_token of this Project.


        :return: The runners_token of this Project.
        :rtype: str
        """
        return self._runners_token

    @runners_token.setter
    def runners_token(self, runners_token):
        """Sets the runners_token of this Project.


        :param runners_token: The runners_token of this Project.
        :type runners_token: str
        """

        self._runners_token = runners_token

    @property
    def shared_runners_enabled(self):
        """Gets the shared_runners_enabled of this Project.


        :return: The shared_runners_enabled of this Project.
        :rtype: str
        """
        return self._shared_runners_enabled

    @shared_runners_enabled.setter
    def shared_runners_enabled(self, shared_runners_enabled):
        """Sets the shared_runners_enabled of this Project.


        :param shared_runners_enabled: The shared_runners_enabled of this Project.
        :type shared_runners_enabled: str
        """

        self._shared_runners_enabled = shared_runners_enabled

    @property
    def shared_with_groups(self):
        """Gets the shared_with_groups of this Project.


        :return: The shared_with_groups of this Project.
        :rtype: str
        """
        return self._shared_with_groups

    @shared_with_groups.setter
    def shared_with_groups(self, shared_with_groups):
        """Sets the shared_with_groups of this Project.


        :param shared_with_groups: The shared_with_groups of this Project.
        :type shared_with_groups: str
        """

        self._shared_with_groups = shared_with_groups

    @property
    def snippets_enabled(self):
        """Gets the snippets_enabled of this Project.


        :return: The snippets_enabled of this Project.
        :rtype: str
        """
        return self._snippets_enabled

    @snippets_enabled.setter
    def snippets_enabled(self, snippets_enabled):
        """Sets the snippets_enabled of this Project.


        :param snippets_enabled: The snippets_enabled of this Project.
        :type snippets_enabled: str
        """

        self._snippets_enabled = snippets_enabled

    @property
    def ssh_url_to_repo(self):
        """Gets the ssh_url_to_repo of this Project.


        :return: The ssh_url_to_repo of this Project.
        :rtype: str
        """
        return self._ssh_url_to_repo

    @ssh_url_to_repo.setter
    def ssh_url_to_repo(self, ssh_url_to_repo):
        """Sets the ssh_url_to_repo of this Project.


        :param ssh_url_to_repo: The ssh_url_to_repo of this Project.
        :type ssh_url_to_repo: str
        """

        self._ssh_url_to_repo = ssh_url_to_repo

    @property
    def star_count(self):
        """Gets the star_count of this Project.


        :return: The star_count of this Project.
        :rtype: str
        """
        return self._star_count

    @star_count.setter
    def star_count(self, star_count):
        """Sets the star_count of this Project.


        :param star_count: The star_count of this Project.
        :type star_count: str
        """

        self._star_count = star_count

    @property
    def statistics(self):
        """Gets the statistics of this Project.


        :return: The statistics of this Project.
        :rtype: ProjectStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this Project.


        :param statistics: The statistics of this Project.
        :type statistics: ProjectStatistics
        """

        self._statistics = statistics

    @property
    def tag_list(self):
        """Gets the tag_list of this Project.


        :return: The tag_list of this Project.
        :rtype: str
        """
        return self._tag_list

    @tag_list.setter
    def tag_list(self, tag_list):
        """Sets the tag_list of this Project.


        :param tag_list: The tag_list of this Project.
        :type tag_list: str
        """

        self._tag_list = tag_list

    @property
    def visibility_level(self):
        """Gets the visibility_level of this Project.


        :return: The visibility_level of this Project.
        :rtype: str
        """
        return self._visibility_level

    @visibility_level.setter
    def visibility_level(self, visibility_level):
        """Sets the visibility_level of this Project.


        :param visibility_level: The visibility_level of this Project.
        :type visibility_level: str
        """

        self._visibility_level = visibility_level

    @property
    def web_url(self):
        """Gets the web_url of this Project.


        :return: The web_url of this Project.
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """Sets the web_url of this Project.


        :param web_url: The web_url of this Project.
        :type web_url: str
        """

        self._web_url = web_url

    @property
    def wiki_enabled(self):
        """Gets the wiki_enabled of this Project.


        :return: The wiki_enabled of this Project.
        :rtype: str
        """
        return self._wiki_enabled

    @wiki_enabled.setter
    def wiki_enabled(self, wiki_enabled):
        """Sets the wiki_enabled of this Project.


        :param wiki_enabled: The wiki_enabled of this Project.
        :type wiki_enabled: str
        """

        self._wiki_enabled = wiki_enabled
