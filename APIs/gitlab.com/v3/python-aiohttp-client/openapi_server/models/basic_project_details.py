# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BasicProjectDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, http_url_to_repo: str=None, id: str=None, name: str=None, name_with_namespace: str=None, path: str=None, path_with_namespace: str=None, web_url: str=None):
        """BasicProjectDetails - a model defined in OpenAPI

        :param http_url_to_repo: The http_url_to_repo of this BasicProjectDetails.
        :param id: The id of this BasicProjectDetails.
        :param name: The name of this BasicProjectDetails.
        :param name_with_namespace: The name_with_namespace of this BasicProjectDetails.
        :param path: The path of this BasicProjectDetails.
        :param path_with_namespace: The path_with_namespace of this BasicProjectDetails.
        :param web_url: The web_url of this BasicProjectDetails.
        """
        self.openapi_types = {
            'http_url_to_repo': str,
            'id': str,
            'name': str,
            'name_with_namespace': str,
            'path': str,
            'path_with_namespace': str,
            'web_url': str
        }

        self.attribute_map = {
            'http_url_to_repo': 'http_url_to_repo',
            'id': 'id',
            'name': 'name',
            'name_with_namespace': 'name_with_namespace',
            'path': 'path',
            'path_with_namespace': 'path_with_namespace',
            'web_url': 'web_url'
        }

        self._http_url_to_repo = http_url_to_repo
        self._id = id
        self._name = name
        self._name_with_namespace = name_with_namespace
        self._path = path
        self._path_with_namespace = path_with_namespace
        self._web_url = web_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasicProjectDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BasicProjectDetails of this BasicProjectDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def http_url_to_repo(self):
        """Gets the http_url_to_repo of this BasicProjectDetails.


        :return: The http_url_to_repo of this BasicProjectDetails.
        :rtype: str
        """
        return self._http_url_to_repo

    @http_url_to_repo.setter
    def http_url_to_repo(self, http_url_to_repo):
        """Sets the http_url_to_repo of this BasicProjectDetails.


        :param http_url_to_repo: The http_url_to_repo of this BasicProjectDetails.
        :type http_url_to_repo: str
        """

        self._http_url_to_repo = http_url_to_repo

    @property
    def id(self):
        """Gets the id of this BasicProjectDetails.


        :return: The id of this BasicProjectDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BasicProjectDetails.


        :param id: The id of this BasicProjectDetails.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BasicProjectDetails.


        :return: The name of this BasicProjectDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BasicProjectDetails.


        :param name: The name of this BasicProjectDetails.
        :type name: str
        """

        self._name = name

    @property
    def name_with_namespace(self):
        """Gets the name_with_namespace of this BasicProjectDetails.


        :return: The name_with_namespace of this BasicProjectDetails.
        :rtype: str
        """
        return self._name_with_namespace

    @name_with_namespace.setter
    def name_with_namespace(self, name_with_namespace):
        """Sets the name_with_namespace of this BasicProjectDetails.


        :param name_with_namespace: The name_with_namespace of this BasicProjectDetails.
        :type name_with_namespace: str
        """

        self._name_with_namespace = name_with_namespace

    @property
    def path(self):
        """Gets the path of this BasicProjectDetails.


        :return: The path of this BasicProjectDetails.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BasicProjectDetails.


        :param path: The path of this BasicProjectDetails.
        :type path: str
        """

        self._path = path

    @property
    def path_with_namespace(self):
        """Gets the path_with_namespace of this BasicProjectDetails.


        :return: The path_with_namespace of this BasicProjectDetails.
        :rtype: str
        """
        return self._path_with_namespace

    @path_with_namespace.setter
    def path_with_namespace(self, path_with_namespace):
        """Sets the path_with_namespace of this BasicProjectDetails.


        :param path_with_namespace: The path_with_namespace of this BasicProjectDetails.
        :type path_with_namespace: str
        """

        self._path_with_namespace = path_with_namespace

    @property
    def web_url(self):
        """Gets the web_url of this BasicProjectDetails.


        :return: The web_url of this BasicProjectDetails.
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """Sets the web_url of this BasicProjectDetails.


        :param web_url: The web_url of this BasicProjectDetails.
        :type web_url: str
        """

        self._web_url = web_url
