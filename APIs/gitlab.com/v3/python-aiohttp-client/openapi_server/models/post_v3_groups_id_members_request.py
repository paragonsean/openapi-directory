# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostV3GroupsIdMembersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id: int=None, access_level: int=None, expires_at: datetime=None):
        """PostV3GroupsIdMembersRequest - a model defined in OpenAPI

        :param user_id: The user_id of this PostV3GroupsIdMembersRequest.
        :param access_level: The access_level of this PostV3GroupsIdMembersRequest.
        :param expires_at: The expires_at of this PostV3GroupsIdMembersRequest.
        """
        self.openapi_types = {
            'user_id': int,
            'access_level': int,
            'expires_at': datetime
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'access_level': 'access_level',
            'expires_at': 'expires_at'
        }

        self._user_id = user_id
        self._access_level = access_level
        self._expires_at = expires_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostV3GroupsIdMembersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postV3GroupsIdMembers_request of this PostV3GroupsIdMembersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self):
        """Gets the user_id of this PostV3GroupsIdMembersRequest.

        The user ID of the new member

        :return: The user_id of this PostV3GroupsIdMembersRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PostV3GroupsIdMembersRequest.

        The user ID of the new member

        :param user_id: The user_id of this PostV3GroupsIdMembersRequest.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def access_level(self):
        """Gets the access_level of this PostV3GroupsIdMembersRequest.

        A valid access level (defaults: `30`, developer access level)

        :return: The access_level of this PostV3GroupsIdMembersRequest.
        :rtype: int
        """
        return self._access_level

    @access_level.setter
    def access_level(self, access_level):
        """Sets the access_level of this PostV3GroupsIdMembersRequest.

        A valid access level (defaults: `30`, developer access level)

        :param access_level: The access_level of this PostV3GroupsIdMembersRequest.
        :type access_level: int
        """
        if access_level is None:
            raise ValueError("Invalid value for `access_level`, must not be `None`")

        self._access_level = access_level

    @property
    def expires_at(self):
        """Gets the expires_at of this PostV3GroupsIdMembersRequest.

        Date string in the format YEAR-MONTH-DAY

        :return: The expires_at of this PostV3GroupsIdMembersRequest.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this PostV3GroupsIdMembersRequest.

        Date string in the format YEAR-MONTH-DAY

        :param expires_at: The expires_at of this PostV3GroupsIdMembersRequest.
        :type expires_at: datetime
        """

        self._expires_at = expires_at
