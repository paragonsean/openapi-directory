# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ProjectsIdServicesKubernetesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace: str=None, api_url: str=None, token: str=None, ca_pem: str=None):
        """PutV3ProjectsIdServicesKubernetesRequest - a model defined in OpenAPI

        :param namespace: The namespace of this PutV3ProjectsIdServicesKubernetesRequest.
        :param api_url: The api_url of this PutV3ProjectsIdServicesKubernetesRequest.
        :param token: The token of this PutV3ProjectsIdServicesKubernetesRequest.
        :param ca_pem: The ca_pem of this PutV3ProjectsIdServicesKubernetesRequest.
        """
        self.openapi_types = {
            'namespace': str,
            'api_url': str,
            'token': str,
            'ca_pem': str
        }

        self.attribute_map = {
            'namespace': 'namespace',
            'api_url': 'api_url',
            'token': 'token',
            'ca_pem': 'ca_pem'
        }

        self._namespace = namespace
        self._api_url = api_url
        self._token = token
        self._ca_pem = ca_pem

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ProjectsIdServicesKubernetesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ProjectsIdServicesKubernetes_request of this PutV3ProjectsIdServicesKubernetesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace(self):
        """Gets the namespace of this PutV3ProjectsIdServicesKubernetesRequest.

        The Kubernetes namespace to use

        :return: The namespace of this PutV3ProjectsIdServicesKubernetesRequest.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this PutV3ProjectsIdServicesKubernetesRequest.

        The Kubernetes namespace to use

        :param namespace: The namespace of this PutV3ProjectsIdServicesKubernetesRequest.
        :type namespace: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")

        self._namespace = namespace

    @property
    def api_url(self):
        """Gets the api_url of this PutV3ProjectsIdServicesKubernetesRequest.

        The URL to the Kubernetes cluster API, e.g., https://kubernetes.example.com

        :return: The api_url of this PutV3ProjectsIdServicesKubernetesRequest.
        :rtype: str
        """
        return self._api_url

    @api_url.setter
    def api_url(self, api_url):
        """Sets the api_url of this PutV3ProjectsIdServicesKubernetesRequest.

        The URL to the Kubernetes cluster API, e.g., https://kubernetes.example.com

        :param api_url: The api_url of this PutV3ProjectsIdServicesKubernetesRequest.
        :type api_url: str
        """
        if api_url is None:
            raise ValueError("Invalid value for `api_url`, must not be `None`")

        self._api_url = api_url

    @property
    def token(self):
        """Gets the token of this PutV3ProjectsIdServicesKubernetesRequest.

        The service token to authenticate against the Kubernetes cluster with

        :return: The token of this PutV3ProjectsIdServicesKubernetesRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PutV3ProjectsIdServicesKubernetesRequest.

        The service token to authenticate against the Kubernetes cluster with

        :param token: The token of this PutV3ProjectsIdServicesKubernetesRequest.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def ca_pem(self):
        """Gets the ca_pem of this PutV3ProjectsIdServicesKubernetesRequest.

        A custom certificate authority bundle to verify the Kubernetes cluster with (PEM format)

        :return: The ca_pem of this PutV3ProjectsIdServicesKubernetesRequest.
        :rtype: str
        """
        return self._ca_pem

    @ca_pem.setter
    def ca_pem(self, ca_pem):
        """Sets the ca_pem of this PutV3ProjectsIdServicesKubernetesRequest.

        A custom certificate authority bundle to verify the Kubernetes cluster with (PEM format)

        :param ca_pem: The ca_pem of this PutV3ProjectsIdServicesKubernetesRequest.
        :type ca_pem: str
        """

        self._ca_pem = ca_pem
