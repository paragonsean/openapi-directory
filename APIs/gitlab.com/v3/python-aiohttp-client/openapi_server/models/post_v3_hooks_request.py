# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostV3HooksRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, url: str=None, token: str=None, push_events: bool=None, tag_push_events: bool=None, enable_ssl_verification: bool=None):
        """PostV3HooksRequest - a model defined in OpenAPI

        :param url: The url of this PostV3HooksRequest.
        :param token: The token of this PostV3HooksRequest.
        :param push_events: The push_events of this PostV3HooksRequest.
        :param tag_push_events: The tag_push_events of this PostV3HooksRequest.
        :param enable_ssl_verification: The enable_ssl_verification of this PostV3HooksRequest.
        """
        self.openapi_types = {
            'url': str,
            'token': str,
            'push_events': bool,
            'tag_push_events': bool,
            'enable_ssl_verification': bool
        }

        self.attribute_map = {
            'url': 'url',
            'token': 'token',
            'push_events': 'push_events',
            'tag_push_events': 'tag_push_events',
            'enable_ssl_verification': 'enable_ssl_verification'
        }

        self._url = url
        self._token = token
        self._push_events = push_events
        self._tag_push_events = tag_push_events
        self._enable_ssl_verification = enable_ssl_verification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostV3HooksRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postV3Hooks_request of this PostV3HooksRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self):
        """Gets the url of this PostV3HooksRequest.

        The URL to send the request to

        :return: The url of this PostV3HooksRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PostV3HooksRequest.

        The URL to send the request to

        :param url: The url of this PostV3HooksRequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def token(self):
        """Gets the token of this PostV3HooksRequest.

        The token used to validate payloads

        :return: The token of this PostV3HooksRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PostV3HooksRequest.

        The token used to validate payloads

        :param token: The token of this PostV3HooksRequest.
        :type token: str
        """

        self._token = token

    @property
    def push_events(self):
        """Gets the push_events of this PostV3HooksRequest.

        Trigger hook on push events

        :return: The push_events of this PostV3HooksRequest.
        :rtype: bool
        """
        return self._push_events

    @push_events.setter
    def push_events(self, push_events):
        """Sets the push_events of this PostV3HooksRequest.

        Trigger hook on push events

        :param push_events: The push_events of this PostV3HooksRequest.
        :type push_events: bool
        """

        self._push_events = push_events

    @property
    def tag_push_events(self):
        """Gets the tag_push_events of this PostV3HooksRequest.

        Trigger hook on tag push events

        :return: The tag_push_events of this PostV3HooksRequest.
        :rtype: bool
        """
        return self._tag_push_events

    @tag_push_events.setter
    def tag_push_events(self, tag_push_events):
        """Sets the tag_push_events of this PostV3HooksRequest.

        Trigger hook on tag push events

        :param tag_push_events: The tag_push_events of this PostV3HooksRequest.
        :type tag_push_events: bool
        """

        self._tag_push_events = tag_push_events

    @property
    def enable_ssl_verification(self):
        """Gets the enable_ssl_verification of this PostV3HooksRequest.

        Do SSL verification when triggering the hook

        :return: The enable_ssl_verification of this PostV3HooksRequest.
        :rtype: bool
        """
        return self._enable_ssl_verification

    @enable_ssl_verification.setter
    def enable_ssl_verification(self, enable_ssl_verification):
        """Sets the enable_ssl_verification of this PostV3HooksRequest.

        Do SSL verification when triggering the hook

        :param enable_ssl_verification: The enable_ssl_verification of this PostV3HooksRequest.
        :type enable_ssl_verification: bool
        """

        self._enable_ssl_verification = enable_ssl_verification
