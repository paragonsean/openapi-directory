# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostV3UsersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, password: str=None, name: str=None, username: str=None, skype: str=None, linkedin: str=None, twitter: str=None, website_url: str=None, organization: str=None, projects_limit: int=None, extern_uid: str=None, provider: str=None, bio: str=None, location: str=None, admin: bool=None, can_create_group: bool=None, confirm: bool=None, external: bool=None):
        """PostV3UsersRequest - a model defined in OpenAPI

        :param email: The email of this PostV3UsersRequest.
        :param password: The password of this PostV3UsersRequest.
        :param name: The name of this PostV3UsersRequest.
        :param username: The username of this PostV3UsersRequest.
        :param skype: The skype of this PostV3UsersRequest.
        :param linkedin: The linkedin of this PostV3UsersRequest.
        :param twitter: The twitter of this PostV3UsersRequest.
        :param website_url: The website_url of this PostV3UsersRequest.
        :param organization: The organization of this PostV3UsersRequest.
        :param projects_limit: The projects_limit of this PostV3UsersRequest.
        :param extern_uid: The extern_uid of this PostV3UsersRequest.
        :param provider: The provider of this PostV3UsersRequest.
        :param bio: The bio of this PostV3UsersRequest.
        :param location: The location of this PostV3UsersRequest.
        :param admin: The admin of this PostV3UsersRequest.
        :param can_create_group: The can_create_group of this PostV3UsersRequest.
        :param confirm: The confirm of this PostV3UsersRequest.
        :param external: The external of this PostV3UsersRequest.
        """
        self.openapi_types = {
            'email': str,
            'password': str,
            'name': str,
            'username': str,
            'skype': str,
            'linkedin': str,
            'twitter': str,
            'website_url': str,
            'organization': str,
            'projects_limit': int,
            'extern_uid': str,
            'provider': str,
            'bio': str,
            'location': str,
            'admin': bool,
            'can_create_group': bool,
            'confirm': bool,
            'external': bool
        }

        self.attribute_map = {
            'email': 'email',
            'password': 'password',
            'name': 'name',
            'username': 'username',
            'skype': 'skype',
            'linkedin': 'linkedin',
            'twitter': 'twitter',
            'website_url': 'website_url',
            'organization': 'organization',
            'projects_limit': 'projects_limit',
            'extern_uid': 'extern_uid',
            'provider': 'provider',
            'bio': 'bio',
            'location': 'location',
            'admin': 'admin',
            'can_create_group': 'can_create_group',
            'confirm': 'confirm',
            'external': 'external'
        }

        self._email = email
        self._password = password
        self._name = name
        self._username = username
        self._skype = skype
        self._linkedin = linkedin
        self._twitter = twitter
        self._website_url = website_url
        self._organization = organization
        self._projects_limit = projects_limit
        self._extern_uid = extern_uid
        self._provider = provider
        self._bio = bio
        self._location = location
        self._admin = admin
        self._can_create_group = can_create_group
        self._confirm = confirm
        self._external = external

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostV3UsersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postV3Users_request of this PostV3UsersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this PostV3UsersRequest.

        The email of the user

        :return: The email of this PostV3UsersRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PostV3UsersRequest.

        The email of the user

        :param email: The email of this PostV3UsersRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def password(self):
        """Gets the password of this PostV3UsersRequest.

        The password of the new user

        :return: The password of this PostV3UsersRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PostV3UsersRequest.

        The password of the new user

        :param password: The password of this PostV3UsersRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def name(self):
        """Gets the name of this PostV3UsersRequest.

        The name of the user

        :return: The name of this PostV3UsersRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostV3UsersRequest.

        The name of the user

        :param name: The name of this PostV3UsersRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def username(self):
        """Gets the username of this PostV3UsersRequest.

        The username of the user

        :return: The username of this PostV3UsersRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PostV3UsersRequest.

        The username of the user

        :param username: The username of this PostV3UsersRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def skype(self):
        """Gets the skype of this PostV3UsersRequest.

        The Skype username

        :return: The skype of this PostV3UsersRequest.
        :rtype: str
        """
        return self._skype

    @skype.setter
    def skype(self, skype):
        """Sets the skype of this PostV3UsersRequest.

        The Skype username

        :param skype: The skype of this PostV3UsersRequest.
        :type skype: str
        """

        self._skype = skype

    @property
    def linkedin(self):
        """Gets the linkedin of this PostV3UsersRequest.

        The LinkedIn username

        :return: The linkedin of this PostV3UsersRequest.
        :rtype: str
        """
        return self._linkedin

    @linkedin.setter
    def linkedin(self, linkedin):
        """Sets the linkedin of this PostV3UsersRequest.

        The LinkedIn username

        :param linkedin: The linkedin of this PostV3UsersRequest.
        :type linkedin: str
        """

        self._linkedin = linkedin

    @property
    def twitter(self):
        """Gets the twitter of this PostV3UsersRequest.

        The Twitter username

        :return: The twitter of this PostV3UsersRequest.
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this PostV3UsersRequest.

        The Twitter username

        :param twitter: The twitter of this PostV3UsersRequest.
        :type twitter: str
        """

        self._twitter = twitter

    @property
    def website_url(self):
        """Gets the website_url of this PostV3UsersRequest.

        The website of the user

        :return: The website_url of this PostV3UsersRequest.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this PostV3UsersRequest.

        The website of the user

        :param website_url: The website_url of this PostV3UsersRequest.
        :type website_url: str
        """

        self._website_url = website_url

    @property
    def organization(self):
        """Gets the organization of this PostV3UsersRequest.

        The organization of the user

        :return: The organization of this PostV3UsersRequest.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this PostV3UsersRequest.

        The organization of the user

        :param organization: The organization of this PostV3UsersRequest.
        :type organization: str
        """

        self._organization = organization

    @property
    def projects_limit(self):
        """Gets the projects_limit of this PostV3UsersRequest.

        The number of projects a user can create

        :return: The projects_limit of this PostV3UsersRequest.
        :rtype: int
        """
        return self._projects_limit

    @projects_limit.setter
    def projects_limit(self, projects_limit):
        """Sets the projects_limit of this PostV3UsersRequest.

        The number of projects a user can create

        :param projects_limit: The projects_limit of this PostV3UsersRequest.
        :type projects_limit: int
        """

        self._projects_limit = projects_limit

    @property
    def extern_uid(self):
        """Gets the extern_uid of this PostV3UsersRequest.

        The external authentication provider UID

        :return: The extern_uid of this PostV3UsersRequest.
        :rtype: str
        """
        return self._extern_uid

    @extern_uid.setter
    def extern_uid(self, extern_uid):
        """Sets the extern_uid of this PostV3UsersRequest.

        The external authentication provider UID

        :param extern_uid: The extern_uid of this PostV3UsersRequest.
        :type extern_uid: str
        """

        self._extern_uid = extern_uid

    @property
    def provider(self):
        """Gets the provider of this PostV3UsersRequest.

        The external provider

        :return: The provider of this PostV3UsersRequest.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this PostV3UsersRequest.

        The external provider

        :param provider: The provider of this PostV3UsersRequest.
        :type provider: str
        """

        self._provider = provider

    @property
    def bio(self):
        """Gets the bio of this PostV3UsersRequest.

        The biography of the user

        :return: The bio of this PostV3UsersRequest.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this PostV3UsersRequest.

        The biography of the user

        :param bio: The bio of this PostV3UsersRequest.
        :type bio: str
        """

        self._bio = bio

    @property
    def location(self):
        """Gets the location of this PostV3UsersRequest.

        The location of the user

        :return: The location of this PostV3UsersRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PostV3UsersRequest.

        The location of the user

        :param location: The location of this PostV3UsersRequest.
        :type location: str
        """

        self._location = location

    @property
    def admin(self):
        """Gets the admin of this PostV3UsersRequest.

        Flag indicating the user is an administrator

        :return: The admin of this PostV3UsersRequest.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this PostV3UsersRequest.

        Flag indicating the user is an administrator

        :param admin: The admin of this PostV3UsersRequest.
        :type admin: bool
        """

        self._admin = admin

    @property
    def can_create_group(self):
        """Gets the can_create_group of this PostV3UsersRequest.

        Flag indicating the user can create groups

        :return: The can_create_group of this PostV3UsersRequest.
        :rtype: bool
        """
        return self._can_create_group

    @can_create_group.setter
    def can_create_group(self, can_create_group):
        """Sets the can_create_group of this PostV3UsersRequest.

        Flag indicating the user can create groups

        :param can_create_group: The can_create_group of this PostV3UsersRequest.
        :type can_create_group: bool
        """

        self._can_create_group = can_create_group

    @property
    def confirm(self):
        """Gets the confirm of this PostV3UsersRequest.

        Flag indicating the account needs to be confirmed

        :return: The confirm of this PostV3UsersRequest.
        :rtype: bool
        """
        return self._confirm

    @confirm.setter
    def confirm(self, confirm):
        """Sets the confirm of this PostV3UsersRequest.

        Flag indicating the account needs to be confirmed

        :param confirm: The confirm of this PostV3UsersRequest.
        :type confirm: bool
        """

        self._confirm = confirm

    @property
    def external(self):
        """Gets the external of this PostV3UsersRequest.

        Flag indicating the user is an external user

        :return: The external of this PostV3UsersRequest.
        :rtype: bool
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this PostV3UsersRequest.

        Flag indicating the user is an external user

        :param external: The external of this PostV3UsersRequest.
        :type external: bool
        """

        self._external = external
