# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ProjectsIdRepositoryBranchesBranchProtectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, developers_can_push: bool=None, developers_can_merge: bool=None):
        """PutV3ProjectsIdRepositoryBranchesBranchProtectRequest - a model defined in OpenAPI

        :param developers_can_push: The developers_can_push of this PutV3ProjectsIdRepositoryBranchesBranchProtectRequest.
        :param developers_can_merge: The developers_can_merge of this PutV3ProjectsIdRepositoryBranchesBranchProtectRequest.
        """
        self.openapi_types = {
            'developers_can_push': bool,
            'developers_can_merge': bool
        }

        self.attribute_map = {
            'developers_can_push': 'developers_can_push',
            'developers_can_merge': 'developers_can_merge'
        }

        self._developers_can_push = developers_can_push
        self._developers_can_merge = developers_can_merge

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ProjectsIdRepositoryBranchesBranchProtectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ProjectsIdRepositoryBranchesBranchProtect_request of this PutV3ProjectsIdRepositoryBranchesBranchProtectRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def developers_can_push(self):
        """Gets the developers_can_push of this PutV3ProjectsIdRepositoryBranchesBranchProtectRequest.

        Flag if developers can push to that branch

        :return: The developers_can_push of this PutV3ProjectsIdRepositoryBranchesBranchProtectRequest.
        :rtype: bool
        """
        return self._developers_can_push

    @developers_can_push.setter
    def developers_can_push(self, developers_can_push):
        """Sets the developers_can_push of this PutV3ProjectsIdRepositoryBranchesBranchProtectRequest.

        Flag if developers can push to that branch

        :param developers_can_push: The developers_can_push of this PutV3ProjectsIdRepositoryBranchesBranchProtectRequest.
        :type developers_can_push: bool
        """

        self._developers_can_push = developers_can_push

    @property
    def developers_can_merge(self):
        """Gets the developers_can_merge of this PutV3ProjectsIdRepositoryBranchesBranchProtectRequest.

        Flag if developers can merge to that branch

        :return: The developers_can_merge of this PutV3ProjectsIdRepositoryBranchesBranchProtectRequest.
        :rtype: bool
        """
        return self._developers_can_merge

    @developers_can_merge.setter
    def developers_can_merge(self, developers_can_merge):
        """Sets the developers_can_merge of this PutV3ProjectsIdRepositoryBranchesBranchProtectRequest.

        Flag if developers can merge to that branch

        :param developers_can_merge: The developers_can_merge of this PutV3ProjectsIdRepositoryBranchesBranchProtectRequest.
        :type developers_can_merge: bool
        """

        self._developers_can_merge = developers_can_merge
