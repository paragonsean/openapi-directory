# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: str=None, build_events: str=None, created_at: str=None, id: str=None, issues_events: str=None, merge_requests_events: str=None, note_events: str=None, pipeline_events: str=None, properties: str=None, push_events: str=None, tag_push_events: str=None, title: str=None, updated_at: str=None):
        """ProjectService - a model defined in OpenAPI

        :param active: The active of this ProjectService.
        :param build_events: The build_events of this ProjectService.
        :param created_at: The created_at of this ProjectService.
        :param id: The id of this ProjectService.
        :param issues_events: The issues_events of this ProjectService.
        :param merge_requests_events: The merge_requests_events of this ProjectService.
        :param note_events: The note_events of this ProjectService.
        :param pipeline_events: The pipeline_events of this ProjectService.
        :param properties: The properties of this ProjectService.
        :param push_events: The push_events of this ProjectService.
        :param tag_push_events: The tag_push_events of this ProjectService.
        :param title: The title of this ProjectService.
        :param updated_at: The updated_at of this ProjectService.
        """
        self.openapi_types = {
            'active': str,
            'build_events': str,
            'created_at': str,
            'id': str,
            'issues_events': str,
            'merge_requests_events': str,
            'note_events': str,
            'pipeline_events': str,
            'properties': str,
            'push_events': str,
            'tag_push_events': str,
            'title': str,
            'updated_at': str
        }

        self.attribute_map = {
            'active': 'active',
            'build_events': 'build_events',
            'created_at': 'created_at',
            'id': 'id',
            'issues_events': 'issues_events',
            'merge_requests_events': 'merge_requests_events',
            'note_events': 'note_events',
            'pipeline_events': 'pipeline_events',
            'properties': 'properties',
            'push_events': 'push_events',
            'tag_push_events': 'tag_push_events',
            'title': 'title',
            'updated_at': 'updated_at'
        }

        self._active = active
        self._build_events = build_events
        self._created_at = created_at
        self._id = id
        self._issues_events = issues_events
        self._merge_requests_events = merge_requests_events
        self._note_events = note_events
        self._pipeline_events = pipeline_events
        self._properties = properties
        self._push_events = push_events
        self._tag_push_events = tag_push_events
        self._title = title
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectService of this ProjectService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ProjectService.


        :return: The active of this ProjectService.
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ProjectService.


        :param active: The active of this ProjectService.
        :type active: str
        """

        self._active = active

    @property
    def build_events(self):
        """Gets the build_events of this ProjectService.


        :return: The build_events of this ProjectService.
        :rtype: str
        """
        return self._build_events

    @build_events.setter
    def build_events(self, build_events):
        """Sets the build_events of this ProjectService.


        :param build_events: The build_events of this ProjectService.
        :type build_events: str
        """

        self._build_events = build_events

    @property
    def created_at(self):
        """Gets the created_at of this ProjectService.


        :return: The created_at of this ProjectService.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProjectService.


        :param created_at: The created_at of this ProjectService.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this ProjectService.


        :return: The id of this ProjectService.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectService.


        :param id: The id of this ProjectService.
        :type id: str
        """

        self._id = id

    @property
    def issues_events(self):
        """Gets the issues_events of this ProjectService.


        :return: The issues_events of this ProjectService.
        :rtype: str
        """
        return self._issues_events

    @issues_events.setter
    def issues_events(self, issues_events):
        """Sets the issues_events of this ProjectService.


        :param issues_events: The issues_events of this ProjectService.
        :type issues_events: str
        """

        self._issues_events = issues_events

    @property
    def merge_requests_events(self):
        """Gets the merge_requests_events of this ProjectService.


        :return: The merge_requests_events of this ProjectService.
        :rtype: str
        """
        return self._merge_requests_events

    @merge_requests_events.setter
    def merge_requests_events(self, merge_requests_events):
        """Sets the merge_requests_events of this ProjectService.


        :param merge_requests_events: The merge_requests_events of this ProjectService.
        :type merge_requests_events: str
        """

        self._merge_requests_events = merge_requests_events

    @property
    def note_events(self):
        """Gets the note_events of this ProjectService.


        :return: The note_events of this ProjectService.
        :rtype: str
        """
        return self._note_events

    @note_events.setter
    def note_events(self, note_events):
        """Sets the note_events of this ProjectService.


        :param note_events: The note_events of this ProjectService.
        :type note_events: str
        """

        self._note_events = note_events

    @property
    def pipeline_events(self):
        """Gets the pipeline_events of this ProjectService.


        :return: The pipeline_events of this ProjectService.
        :rtype: str
        """
        return self._pipeline_events

    @pipeline_events.setter
    def pipeline_events(self, pipeline_events):
        """Sets the pipeline_events of this ProjectService.


        :param pipeline_events: The pipeline_events of this ProjectService.
        :type pipeline_events: str
        """

        self._pipeline_events = pipeline_events

    @property
    def properties(self):
        """Gets the properties of this ProjectService.


        :return: The properties of this ProjectService.
        :rtype: str
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ProjectService.


        :param properties: The properties of this ProjectService.
        :type properties: str
        """

        self._properties = properties

    @property
    def push_events(self):
        """Gets the push_events of this ProjectService.


        :return: The push_events of this ProjectService.
        :rtype: str
        """
        return self._push_events

    @push_events.setter
    def push_events(self, push_events):
        """Sets the push_events of this ProjectService.


        :param push_events: The push_events of this ProjectService.
        :type push_events: str
        """

        self._push_events = push_events

    @property
    def tag_push_events(self):
        """Gets the tag_push_events of this ProjectService.


        :return: The tag_push_events of this ProjectService.
        :rtype: str
        """
        return self._tag_push_events

    @tag_push_events.setter
    def tag_push_events(self, tag_push_events):
        """Sets the tag_push_events of this ProjectService.


        :param tag_push_events: The tag_push_events of this ProjectService.
        :type tag_push_events: str
        """

        self._tag_push_events = tag_push_events

    @property
    def title(self):
        """Gets the title of this ProjectService.


        :return: The title of this ProjectService.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProjectService.


        :param title: The title of this ProjectService.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this ProjectService.


        :return: The updated_at of this ProjectService.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ProjectService.


        :param updated_at: The updated_at of this ProjectService.
        :type updated_at: str
        """

        self._updated_at = updated_at
