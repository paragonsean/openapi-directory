# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Label(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed_issues_count: str=None, color: str=None, description: str=None, id: str=None, name: str=None, open_issues_count: str=None, open_merge_requests_count: str=None, priority: str=None, subscribed: str=None):
        """Label - a model defined in OpenAPI

        :param closed_issues_count: The closed_issues_count of this Label.
        :param color: The color of this Label.
        :param description: The description of this Label.
        :param id: The id of this Label.
        :param name: The name of this Label.
        :param open_issues_count: The open_issues_count of this Label.
        :param open_merge_requests_count: The open_merge_requests_count of this Label.
        :param priority: The priority of this Label.
        :param subscribed: The subscribed of this Label.
        """
        self.openapi_types = {
            'closed_issues_count': str,
            'color': str,
            'description': str,
            'id': str,
            'name': str,
            'open_issues_count': str,
            'open_merge_requests_count': str,
            'priority': str,
            'subscribed': str
        }

        self.attribute_map = {
            'closed_issues_count': 'closed_issues_count',
            'color': 'color',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'open_issues_count': 'open_issues_count',
            'open_merge_requests_count': 'open_merge_requests_count',
            'priority': 'priority',
            'subscribed': 'subscribed'
        }

        self._closed_issues_count = closed_issues_count
        self._color = color
        self._description = description
        self._id = id
        self._name = name
        self._open_issues_count = open_issues_count
        self._open_merge_requests_count = open_merge_requests_count
        self._priority = priority
        self._subscribed = subscribed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Label':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Label of this Label.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed_issues_count(self):
        """Gets the closed_issues_count of this Label.


        :return: The closed_issues_count of this Label.
        :rtype: str
        """
        return self._closed_issues_count

    @closed_issues_count.setter
    def closed_issues_count(self, closed_issues_count):
        """Sets the closed_issues_count of this Label.


        :param closed_issues_count: The closed_issues_count of this Label.
        :type closed_issues_count: str
        """

        self._closed_issues_count = closed_issues_count

    @property
    def color(self):
        """Gets the color of this Label.


        :return: The color of this Label.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Label.


        :param color: The color of this Label.
        :type color: str
        """

        self._color = color

    @property
    def description(self):
        """Gets the description of this Label.


        :return: The description of this Label.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Label.


        :param description: The description of this Label.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Label.


        :return: The id of this Label.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Label.


        :param id: The id of this Label.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Label.


        :return: The name of this Label.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Label.


        :param name: The name of this Label.
        :type name: str
        """

        self._name = name

    @property
    def open_issues_count(self):
        """Gets the open_issues_count of this Label.


        :return: The open_issues_count of this Label.
        :rtype: str
        """
        return self._open_issues_count

    @open_issues_count.setter
    def open_issues_count(self, open_issues_count):
        """Sets the open_issues_count of this Label.


        :param open_issues_count: The open_issues_count of this Label.
        :type open_issues_count: str
        """

        self._open_issues_count = open_issues_count

    @property
    def open_merge_requests_count(self):
        """Gets the open_merge_requests_count of this Label.


        :return: The open_merge_requests_count of this Label.
        :rtype: str
        """
        return self._open_merge_requests_count

    @open_merge_requests_count.setter
    def open_merge_requests_count(self, open_merge_requests_count):
        """Sets the open_merge_requests_count of this Label.


        :param open_merge_requests_count: The open_merge_requests_count of this Label.
        :type open_merge_requests_count: str
        """

        self._open_merge_requests_count = open_merge_requests_count

    @property
    def priority(self):
        """Gets the priority of this Label.


        :return: The priority of this Label.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Label.


        :param priority: The priority of this Label.
        :type priority: str
        """

        self._priority = priority

    @property
    def subscribed(self):
        """Gets the subscribed of this Label.


        :return: The subscribed of this Label.
        :rtype: str
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this Label.


        :param subscribed: The subscribed of this Label.
        :type subscribed: str
        """

        self._subscribed = subscribed
