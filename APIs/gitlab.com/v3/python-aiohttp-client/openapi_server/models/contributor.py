# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Contributor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additions: str=None, commits: str=None, deletions: str=None, email: str=None, name: str=None):
        """Contributor - a model defined in OpenAPI

        :param additions: The additions of this Contributor.
        :param commits: The commits of this Contributor.
        :param deletions: The deletions of this Contributor.
        :param email: The email of this Contributor.
        :param name: The name of this Contributor.
        """
        self.openapi_types = {
            'additions': str,
            'commits': str,
            'deletions': str,
            'email': str,
            'name': str
        }

        self.attribute_map = {
            'additions': 'additions',
            'commits': 'commits',
            'deletions': 'deletions',
            'email': 'email',
            'name': 'name'
        }

        self._additions = additions
        self._commits = commits
        self._deletions = deletions
        self._email = email
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contributor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contributor of this Contributor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additions(self):
        """Gets the additions of this Contributor.


        :return: The additions of this Contributor.
        :rtype: str
        """
        return self._additions

    @additions.setter
    def additions(self, additions):
        """Sets the additions of this Contributor.


        :param additions: The additions of this Contributor.
        :type additions: str
        """

        self._additions = additions

    @property
    def commits(self):
        """Gets the commits of this Contributor.


        :return: The commits of this Contributor.
        :rtype: str
        """
        return self._commits

    @commits.setter
    def commits(self, commits):
        """Sets the commits of this Contributor.


        :param commits: The commits of this Contributor.
        :type commits: str
        """

        self._commits = commits

    @property
    def deletions(self):
        """Gets the deletions of this Contributor.


        :return: The deletions of this Contributor.
        :rtype: str
        """
        return self._deletions

    @deletions.setter
    def deletions(self, deletions):
        """Sets the deletions of this Contributor.


        :param deletions: The deletions of this Contributor.
        :type deletions: str
        """

        self._deletions = deletions

    @property
    def email(self):
        """Gets the email of this Contributor.


        :return: The email of this Contributor.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Contributor.


        :param email: The email of this Contributor.
        :type email: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this Contributor.


        :return: The name of this Contributor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Contributor.


        :param name: The name of this Contributor.
        :type name: str
        """

        self._name = name
