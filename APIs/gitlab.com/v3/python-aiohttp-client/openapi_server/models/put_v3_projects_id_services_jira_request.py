# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ProjectsIdServicesJiraRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, url: str=None, project_key: str=None, username: str=None, password: str=None, jira_issue_transition_id: int=None, commit_events: str=None, merge_request_events: str=None):
        """PutV3ProjectsIdServicesJiraRequest - a model defined in OpenAPI

        :param url: The url of this PutV3ProjectsIdServicesJiraRequest.
        :param project_key: The project_key of this PutV3ProjectsIdServicesJiraRequest.
        :param username: The username of this PutV3ProjectsIdServicesJiraRequest.
        :param password: The password of this PutV3ProjectsIdServicesJiraRequest.
        :param jira_issue_transition_id: The jira_issue_transition_id of this PutV3ProjectsIdServicesJiraRequest.
        :param commit_events: The commit_events of this PutV3ProjectsIdServicesJiraRequest.
        :param merge_request_events: The merge_request_events of this PutV3ProjectsIdServicesJiraRequest.
        """
        self.openapi_types = {
            'url': str,
            'project_key': str,
            'username': str,
            'password': str,
            'jira_issue_transition_id': int,
            'commit_events': str,
            'merge_request_events': str
        }

        self.attribute_map = {
            'url': 'url',
            'project_key': 'project_key',
            'username': 'username',
            'password': 'password',
            'jira_issue_transition_id': 'jira_issue_transition_id',
            'commit_events': 'commit_events',
            'merge_request_events': 'merge_request_events'
        }

        self._url = url
        self._project_key = project_key
        self._username = username
        self._password = password
        self._jira_issue_transition_id = jira_issue_transition_id
        self._commit_events = commit_events
        self._merge_request_events = merge_request_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ProjectsIdServicesJiraRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ProjectsIdServicesJira_request of this PutV3ProjectsIdServicesJiraRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self):
        """Gets the url of this PutV3ProjectsIdServicesJiraRequest.

        The URL to the JIRA project which is being linked to this GitLab project, e.g., https://jira.example.com

        :return: The url of this PutV3ProjectsIdServicesJiraRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PutV3ProjectsIdServicesJiraRequest.

        The URL to the JIRA project which is being linked to this GitLab project, e.g., https://jira.example.com

        :param url: The url of this PutV3ProjectsIdServicesJiraRequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def project_key(self):
        """Gets the project_key of this PutV3ProjectsIdServicesJiraRequest.

        The short identifier for your JIRA project, all uppercase, e.g., PROJ

        :return: The project_key of this PutV3ProjectsIdServicesJiraRequest.
        :rtype: str
        """
        return self._project_key

    @project_key.setter
    def project_key(self, project_key):
        """Sets the project_key of this PutV3ProjectsIdServicesJiraRequest.

        The short identifier for your JIRA project, all uppercase, e.g., PROJ

        :param project_key: The project_key of this PutV3ProjectsIdServicesJiraRequest.
        :type project_key: str
        """
        if project_key is None:
            raise ValueError("Invalid value for `project_key`, must not be `None`")

        self._project_key = project_key

    @property
    def username(self):
        """Gets the username of this PutV3ProjectsIdServicesJiraRequest.

        The username of the user created to be used with GitLab/JIRA

        :return: The username of this PutV3ProjectsIdServicesJiraRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PutV3ProjectsIdServicesJiraRequest.

        The username of the user created to be used with GitLab/JIRA

        :param username: The username of this PutV3ProjectsIdServicesJiraRequest.
        :type username: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this PutV3ProjectsIdServicesJiraRequest.

        The password of the user created to be used with GitLab/JIRA

        :return: The password of this PutV3ProjectsIdServicesJiraRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PutV3ProjectsIdServicesJiraRequest.

        The password of the user created to be used with GitLab/JIRA

        :param password: The password of this PutV3ProjectsIdServicesJiraRequest.
        :type password: str
        """

        self._password = password

    @property
    def jira_issue_transition_id(self):
        """Gets the jira_issue_transition_id of this PutV3ProjectsIdServicesJiraRequest.

        The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (**Administration > Issues > Workflows**) by selecting **View** under **Operations** of the desired workflow of your project. The ID of each state can be found inside the parenthesis of each transition name under the **Transitions (id)** column ([see screenshot][trans]). By default, this ID is set to `2`

        :return: The jira_issue_transition_id of this PutV3ProjectsIdServicesJiraRequest.
        :rtype: int
        """
        return self._jira_issue_transition_id

    @jira_issue_transition_id.setter
    def jira_issue_transition_id(self, jira_issue_transition_id):
        """Sets the jira_issue_transition_id of this PutV3ProjectsIdServicesJiraRequest.

        The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (**Administration > Issues > Workflows**) by selecting **View** under **Operations** of the desired workflow of your project. The ID of each state can be found inside the parenthesis of each transition name under the **Transitions (id)** column ([see screenshot][trans]). By default, this ID is set to `2`

        :param jira_issue_transition_id: The jira_issue_transition_id of this PutV3ProjectsIdServicesJiraRequest.
        :type jira_issue_transition_id: int
        """

        self._jira_issue_transition_id = jira_issue_transition_id

    @property
    def commit_events(self):
        """Gets the commit_events of this PutV3ProjectsIdServicesJiraRequest.

        Event will be triggered when a commit is created/updated

        :return: The commit_events of this PutV3ProjectsIdServicesJiraRequest.
        :rtype: str
        """
        return self._commit_events

    @commit_events.setter
    def commit_events(self, commit_events):
        """Sets the commit_events of this PutV3ProjectsIdServicesJiraRequest.

        Event will be triggered when a commit is created/updated

        :param commit_events: The commit_events of this PutV3ProjectsIdServicesJiraRequest.
        :type commit_events: str
        """

        self._commit_events = commit_events

    @property
    def merge_request_events(self):
        """Gets the merge_request_events of this PutV3ProjectsIdServicesJiraRequest.

        Event will be triggered when a merge request is created/updated/merged

        :return: The merge_request_events of this PutV3ProjectsIdServicesJiraRequest.
        :rtype: str
        """
        return self._merge_request_events

    @merge_request_events.setter
    def merge_request_events(self, merge_request_events):
        """Sets the merge_request_events of this PutV3ProjectsIdServicesJiraRequest.

        Event will be triggered when a merge request is created/updated/merged

        :param merge_request_events: The merge_request_events of this PutV3ProjectsIdServicesJiraRequest.
        :type merge_request_events: str
        """

        self._merge_request_events = merge_request_events
