# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostV3ProjectsIdEnvironmentsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, external_url: str=None, slug: str=None):
        """PostV3ProjectsIdEnvironmentsRequest - a model defined in OpenAPI

        :param name: The name of this PostV3ProjectsIdEnvironmentsRequest.
        :param external_url: The external_url of this PostV3ProjectsIdEnvironmentsRequest.
        :param slug: The slug of this PostV3ProjectsIdEnvironmentsRequest.
        """
        self.openapi_types = {
            'name': str,
            'external_url': str,
            'slug': str
        }

        self.attribute_map = {
            'name': 'name',
            'external_url': 'external_url',
            'slug': 'slug'
        }

        self._name = name
        self._external_url = external_url
        self._slug = slug

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostV3ProjectsIdEnvironmentsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postV3ProjectsIdEnvironments_request of this PostV3ProjectsIdEnvironmentsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PostV3ProjectsIdEnvironmentsRequest.

        The name of the environment to be created

        :return: The name of this PostV3ProjectsIdEnvironmentsRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostV3ProjectsIdEnvironmentsRequest.

        The name of the environment to be created

        :param name: The name of this PostV3ProjectsIdEnvironmentsRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def external_url(self):
        """Gets the external_url of this PostV3ProjectsIdEnvironmentsRequest.

        URL on which this deployment is viewable

        :return: The external_url of this PostV3ProjectsIdEnvironmentsRequest.
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this PostV3ProjectsIdEnvironmentsRequest.

        URL on which this deployment is viewable

        :param external_url: The external_url of this PostV3ProjectsIdEnvironmentsRequest.
        :type external_url: str
        """

        self._external_url = external_url

    @property
    def slug(self):
        """Gets the slug of this PostV3ProjectsIdEnvironmentsRequest.


        :return: The slug of this PostV3ProjectsIdEnvironmentsRequest.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this PostV3ProjectsIdEnvironmentsRequest.


        :param slug: The slug of this PostV3ProjectsIdEnvironmentsRequest.
        :type slug: str
        """

        self._slug = slug
