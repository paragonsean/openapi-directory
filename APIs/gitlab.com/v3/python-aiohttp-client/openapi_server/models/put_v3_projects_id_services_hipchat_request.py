# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ProjectsIdServicesHipchatRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token: str=None, room: str=None, color: str=None, notify: bool=None, api_version: str=None, server: str=None, push_events: str=None, issue_events: str=None, confidential_issue_events: str=None, merge_request_events: str=None, note_events: str=None, tag_push_events: str=None, build_events: str=None):
        """PutV3ProjectsIdServicesHipchatRequest - a model defined in OpenAPI

        :param token: The token of this PutV3ProjectsIdServicesHipchatRequest.
        :param room: The room of this PutV3ProjectsIdServicesHipchatRequest.
        :param color: The color of this PutV3ProjectsIdServicesHipchatRequest.
        :param notify: The notify of this PutV3ProjectsIdServicesHipchatRequest.
        :param api_version: The api_version of this PutV3ProjectsIdServicesHipchatRequest.
        :param server: The server of this PutV3ProjectsIdServicesHipchatRequest.
        :param push_events: The push_events of this PutV3ProjectsIdServicesHipchatRequest.
        :param issue_events: The issue_events of this PutV3ProjectsIdServicesHipchatRequest.
        :param confidential_issue_events: The confidential_issue_events of this PutV3ProjectsIdServicesHipchatRequest.
        :param merge_request_events: The merge_request_events of this PutV3ProjectsIdServicesHipchatRequest.
        :param note_events: The note_events of this PutV3ProjectsIdServicesHipchatRequest.
        :param tag_push_events: The tag_push_events of this PutV3ProjectsIdServicesHipchatRequest.
        :param build_events: The build_events of this PutV3ProjectsIdServicesHipchatRequest.
        """
        self.openapi_types = {
            'token': str,
            'room': str,
            'color': str,
            'notify': bool,
            'api_version': str,
            'server': str,
            'push_events': str,
            'issue_events': str,
            'confidential_issue_events': str,
            'merge_request_events': str,
            'note_events': str,
            'tag_push_events': str,
            'build_events': str
        }

        self.attribute_map = {
            'token': 'token',
            'room': 'room',
            'color': 'color',
            'notify': 'notify',
            'api_version': 'api_version',
            'server': 'server',
            'push_events': 'push_events',
            'issue_events': 'issue_events',
            'confidential_issue_events': 'confidential_issue_events',
            'merge_request_events': 'merge_request_events',
            'note_events': 'note_events',
            'tag_push_events': 'tag_push_events',
            'build_events': 'build_events'
        }

        self._token = token
        self._room = room
        self._color = color
        self._notify = notify
        self._api_version = api_version
        self._server = server
        self._push_events = push_events
        self._issue_events = issue_events
        self._confidential_issue_events = confidential_issue_events
        self._merge_request_events = merge_request_events
        self._note_events = note_events
        self._tag_push_events = tag_push_events
        self._build_events = build_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ProjectsIdServicesHipchatRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ProjectsIdServicesHipchat_request of this PutV3ProjectsIdServicesHipchatRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token(self):
        """Gets the token of this PutV3ProjectsIdServicesHipchatRequest.

        The room token

        :return: The token of this PutV3ProjectsIdServicesHipchatRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PutV3ProjectsIdServicesHipchatRequest.

        The room token

        :param token: The token of this PutV3ProjectsIdServicesHipchatRequest.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def room(self):
        """Gets the room of this PutV3ProjectsIdServicesHipchatRequest.

        The room name or ID

        :return: The room of this PutV3ProjectsIdServicesHipchatRequest.
        :rtype: str
        """
        return self._room

    @room.setter
    def room(self, room):
        """Sets the room of this PutV3ProjectsIdServicesHipchatRequest.

        The room name or ID

        :param room: The room of this PutV3ProjectsIdServicesHipchatRequest.
        :type room: str
        """

        self._room = room

    @property
    def color(self):
        """Gets the color of this PutV3ProjectsIdServicesHipchatRequest.

        The room color

        :return: The color of this PutV3ProjectsIdServicesHipchatRequest.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PutV3ProjectsIdServicesHipchatRequest.

        The room color

        :param color: The color of this PutV3ProjectsIdServicesHipchatRequest.
        :type color: str
        """

        self._color = color

    @property
    def notify(self):
        """Gets the notify of this PutV3ProjectsIdServicesHipchatRequest.

        Enable notifications

        :return: The notify of this PutV3ProjectsIdServicesHipchatRequest.
        :rtype: bool
        """
        return self._notify

    @notify.setter
    def notify(self, notify):
        """Sets the notify of this PutV3ProjectsIdServicesHipchatRequest.

        Enable notifications

        :param notify: The notify of this PutV3ProjectsIdServicesHipchatRequest.
        :type notify: bool
        """

        self._notify = notify

    @property
    def api_version(self):
        """Gets the api_version of this PutV3ProjectsIdServicesHipchatRequest.

        Leave blank for default (v2)

        :return: The api_version of this PutV3ProjectsIdServicesHipchatRequest.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this PutV3ProjectsIdServicesHipchatRequest.

        Leave blank for default (v2)

        :param api_version: The api_version of this PutV3ProjectsIdServicesHipchatRequest.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def server(self):
        """Gets the server of this PutV3ProjectsIdServicesHipchatRequest.

        Leave blank for default. https://hipchat.example.com

        :return: The server of this PutV3ProjectsIdServicesHipchatRequest.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this PutV3ProjectsIdServicesHipchatRequest.

        Leave blank for default. https://hipchat.example.com

        :param server: The server of this PutV3ProjectsIdServicesHipchatRequest.
        :type server: str
        """

        self._server = server

    @property
    def push_events(self):
        """Gets the push_events of this PutV3ProjectsIdServicesHipchatRequest.

        Event will be triggered by a push to the repository

        :return: The push_events of this PutV3ProjectsIdServicesHipchatRequest.
        :rtype: str
        """
        return self._push_events

    @push_events.setter
    def push_events(self, push_events):
        """Sets the push_events of this PutV3ProjectsIdServicesHipchatRequest.

        Event will be triggered by a push to the repository

        :param push_events: The push_events of this PutV3ProjectsIdServicesHipchatRequest.
        :type push_events: str
        """

        self._push_events = push_events

    @property
    def issue_events(self):
        """Gets the issue_events of this PutV3ProjectsIdServicesHipchatRequest.

        Event will be triggered when an issue is created/updated/closed

        :return: The issue_events of this PutV3ProjectsIdServicesHipchatRequest.
        :rtype: str
        """
        return self._issue_events

    @issue_events.setter
    def issue_events(self, issue_events):
        """Sets the issue_events of this PutV3ProjectsIdServicesHipchatRequest.

        Event will be triggered when an issue is created/updated/closed

        :param issue_events: The issue_events of this PutV3ProjectsIdServicesHipchatRequest.
        :type issue_events: str
        """

        self._issue_events = issue_events

    @property
    def confidential_issue_events(self):
        """Gets the confidential_issue_events of this PutV3ProjectsIdServicesHipchatRequest.

        Event will be triggered when a confidential issue is created/updated/closed

        :return: The confidential_issue_events of this PutV3ProjectsIdServicesHipchatRequest.
        :rtype: str
        """
        return self._confidential_issue_events

    @confidential_issue_events.setter
    def confidential_issue_events(self, confidential_issue_events):
        """Sets the confidential_issue_events of this PutV3ProjectsIdServicesHipchatRequest.

        Event will be triggered when a confidential issue is created/updated/closed

        :param confidential_issue_events: The confidential_issue_events of this PutV3ProjectsIdServicesHipchatRequest.
        :type confidential_issue_events: str
        """

        self._confidential_issue_events = confidential_issue_events

    @property
    def merge_request_events(self):
        """Gets the merge_request_events of this PutV3ProjectsIdServicesHipchatRequest.

        Event will be triggered when a merge request is created/updated/merged

        :return: The merge_request_events of this PutV3ProjectsIdServicesHipchatRequest.
        :rtype: str
        """
        return self._merge_request_events

    @merge_request_events.setter
    def merge_request_events(self, merge_request_events):
        """Sets the merge_request_events of this PutV3ProjectsIdServicesHipchatRequest.

        Event will be triggered when a merge request is created/updated/merged

        :param merge_request_events: The merge_request_events of this PutV3ProjectsIdServicesHipchatRequest.
        :type merge_request_events: str
        """

        self._merge_request_events = merge_request_events

    @property
    def note_events(self):
        """Gets the note_events of this PutV3ProjectsIdServicesHipchatRequest.

        Event will be triggered when someone adds a comment

        :return: The note_events of this PutV3ProjectsIdServicesHipchatRequest.
        :rtype: str
        """
        return self._note_events

    @note_events.setter
    def note_events(self, note_events):
        """Sets the note_events of this PutV3ProjectsIdServicesHipchatRequest.

        Event will be triggered when someone adds a comment

        :param note_events: The note_events of this PutV3ProjectsIdServicesHipchatRequest.
        :type note_events: str
        """

        self._note_events = note_events

    @property
    def tag_push_events(self):
        """Gets the tag_push_events of this PutV3ProjectsIdServicesHipchatRequest.

        Event will be triggered when a new tag is pushed to the repository

        :return: The tag_push_events of this PutV3ProjectsIdServicesHipchatRequest.
        :rtype: str
        """
        return self._tag_push_events

    @tag_push_events.setter
    def tag_push_events(self, tag_push_events):
        """Sets the tag_push_events of this PutV3ProjectsIdServicesHipchatRequest.

        Event will be triggered when a new tag is pushed to the repository

        :param tag_push_events: The tag_push_events of this PutV3ProjectsIdServicesHipchatRequest.
        :type tag_push_events: str
        """

        self._tag_push_events = tag_push_events

    @property
    def build_events(self):
        """Gets the build_events of this PutV3ProjectsIdServicesHipchatRequest.

        Event will be triggered when a build status changes

        :return: The build_events of this PutV3ProjectsIdServicesHipchatRequest.
        :rtype: str
        """
        return self._build_events

    @build_events.setter
    def build_events(self, build_events):
        """Sets the build_events of this PutV3ProjectsIdServicesHipchatRequest.

        Event will be triggered when a build status changes

        :param build_events: The build_events of this PutV3ProjectsIdServicesHipchatRequest.
        :type build_events: str
        """

        self._build_events = build_events
