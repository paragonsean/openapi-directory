# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RepoBranch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit: str=None, developers_can_merge: str=None, developers_can_push: str=None, merged: str=None, name: str=None, protected: str=None):
        """RepoBranch - a model defined in OpenAPI

        :param commit: The commit of this RepoBranch.
        :param developers_can_merge: The developers_can_merge of this RepoBranch.
        :param developers_can_push: The developers_can_push of this RepoBranch.
        :param merged: The merged of this RepoBranch.
        :param name: The name of this RepoBranch.
        :param protected: The protected of this RepoBranch.
        """
        self.openapi_types = {
            'commit': str,
            'developers_can_merge': str,
            'developers_can_push': str,
            'merged': str,
            'name': str,
            'protected': str
        }

        self.attribute_map = {
            'commit': 'commit',
            'developers_can_merge': 'developers_can_merge',
            'developers_can_push': 'developers_can_push',
            'merged': 'merged',
            'name': 'name',
            'protected': 'protected'
        }

        self._commit = commit
        self._developers_can_merge = developers_can_merge
        self._developers_can_push = developers_can_push
        self._merged = merged
        self._name = name
        self._protected = protected

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepoBranch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepoBranch of this RepoBranch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit(self):
        """Gets the commit of this RepoBranch.


        :return: The commit of this RepoBranch.
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this RepoBranch.


        :param commit: The commit of this RepoBranch.
        :type commit: str
        """

        self._commit = commit

    @property
    def developers_can_merge(self):
        """Gets the developers_can_merge of this RepoBranch.


        :return: The developers_can_merge of this RepoBranch.
        :rtype: str
        """
        return self._developers_can_merge

    @developers_can_merge.setter
    def developers_can_merge(self, developers_can_merge):
        """Sets the developers_can_merge of this RepoBranch.


        :param developers_can_merge: The developers_can_merge of this RepoBranch.
        :type developers_can_merge: str
        """

        self._developers_can_merge = developers_can_merge

    @property
    def developers_can_push(self):
        """Gets the developers_can_push of this RepoBranch.


        :return: The developers_can_push of this RepoBranch.
        :rtype: str
        """
        return self._developers_can_push

    @developers_can_push.setter
    def developers_can_push(self, developers_can_push):
        """Sets the developers_can_push of this RepoBranch.


        :param developers_can_push: The developers_can_push of this RepoBranch.
        :type developers_can_push: str
        """

        self._developers_can_push = developers_can_push

    @property
    def merged(self):
        """Gets the merged of this RepoBranch.


        :return: The merged of this RepoBranch.
        :rtype: str
        """
        return self._merged

    @merged.setter
    def merged(self, merged):
        """Sets the merged of this RepoBranch.


        :param merged: The merged of this RepoBranch.
        :type merged: str
        """

        self._merged = merged

    @property
    def name(self):
        """Gets the name of this RepoBranch.


        :return: The name of this RepoBranch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepoBranch.


        :param name: The name of this RepoBranch.
        :type name: str
        """

        self._name = name

    @property
    def protected(self):
        """Gets the protected of this RepoBranch.


        :return: The protected of this RepoBranch.
        :rtype: str
        """
        return self._protected

    @protected.setter
    def protected(self, protected):
        """Sets the protected of this RepoBranch.


        :param protected: The protected of this RepoBranch.
        :type protected: str
        """

        self._protected = protected
