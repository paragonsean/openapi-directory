# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ProjectsIdServicesPushoverRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key: str=None, user_key: str=None, priority: str=None, device: str=None, sound: str=None, push_events: str=None):
        """PutV3ProjectsIdServicesPushoverRequest - a model defined in OpenAPI

        :param api_key: The api_key of this PutV3ProjectsIdServicesPushoverRequest.
        :param user_key: The user_key of this PutV3ProjectsIdServicesPushoverRequest.
        :param priority: The priority of this PutV3ProjectsIdServicesPushoverRequest.
        :param device: The device of this PutV3ProjectsIdServicesPushoverRequest.
        :param sound: The sound of this PutV3ProjectsIdServicesPushoverRequest.
        :param push_events: The push_events of this PutV3ProjectsIdServicesPushoverRequest.
        """
        self.openapi_types = {
            'api_key': str,
            'user_key': str,
            'priority': str,
            'device': str,
            'sound': str,
            'push_events': str
        }

        self.attribute_map = {
            'api_key': 'api_key',
            'user_key': 'user_key',
            'priority': 'priority',
            'device': 'device',
            'sound': 'sound',
            'push_events': 'push_events'
        }

        self._api_key = api_key
        self._user_key = user_key
        self._priority = priority
        self._device = device
        self._sound = sound
        self._push_events = push_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ProjectsIdServicesPushoverRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ProjectsIdServicesPushover_request of this PutV3ProjectsIdServicesPushoverRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self):
        """Gets the api_key of this PutV3ProjectsIdServicesPushoverRequest.

        The application key

        :return: The api_key of this PutV3ProjectsIdServicesPushoverRequest.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this PutV3ProjectsIdServicesPushoverRequest.

        The application key

        :param api_key: The api_key of this PutV3ProjectsIdServicesPushoverRequest.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")

        self._api_key = api_key

    @property
    def user_key(self):
        """Gets the user_key of this PutV3ProjectsIdServicesPushoverRequest.

        The user key

        :return: The user_key of this PutV3ProjectsIdServicesPushoverRequest.
        :rtype: str
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this PutV3ProjectsIdServicesPushoverRequest.

        The user key

        :param user_key: The user_key of this PutV3ProjectsIdServicesPushoverRequest.
        :type user_key: str
        """
        if user_key is None:
            raise ValueError("Invalid value for `user_key`, must not be `None`")

        self._user_key = user_key

    @property
    def priority(self):
        """Gets the priority of this PutV3ProjectsIdServicesPushoverRequest.

        The priority

        :return: The priority of this PutV3ProjectsIdServicesPushoverRequest.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this PutV3ProjectsIdServicesPushoverRequest.

        The priority

        :param priority: The priority of this PutV3ProjectsIdServicesPushoverRequest.
        :type priority: str
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def device(self):
        """Gets the device of this PutV3ProjectsIdServicesPushoverRequest.

        Leave blank for all active devices

        :return: The device of this PutV3ProjectsIdServicesPushoverRequest.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this PutV3ProjectsIdServicesPushoverRequest.

        Leave blank for all active devices

        :param device: The device of this PutV3ProjectsIdServicesPushoverRequest.
        :type device: str
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def sound(self):
        """Gets the sound of this PutV3ProjectsIdServicesPushoverRequest.

        The sound of the notification

        :return: The sound of this PutV3ProjectsIdServicesPushoverRequest.
        :rtype: str
        """
        return self._sound

    @sound.setter
    def sound(self, sound):
        """Sets the sound of this PutV3ProjectsIdServicesPushoverRequest.

        The sound of the notification

        :param sound: The sound of this PutV3ProjectsIdServicesPushoverRequest.
        :type sound: str
        """
        if sound is None:
            raise ValueError("Invalid value for `sound`, must not be `None`")

        self._sound = sound

    @property
    def push_events(self):
        """Gets the push_events of this PutV3ProjectsIdServicesPushoverRequest.

        Event will be triggered by a push to the repository

        :return: The push_events of this PutV3ProjectsIdServicesPushoverRequest.
        :rtype: str
        """
        return self._push_events

    @push_events.setter
    def push_events(self, push_events):
        """Sets the push_events of this PutV3ProjectsIdServicesPushoverRequest.

        Event will be triggered by a push to the repository

        :param push_events: The push_events of this PutV3ProjectsIdServicesPushoverRequest.
        :type push_events: str
        """

        self._push_events = push_events
