# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_basic import UserBasic
from openapi_server import util


class Note(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment: str=None, author: UserBasic=None, body: str=None, created_at: str=None, downvote: str=None, id: str=None, noteable_id: str=None, noteable_type: str=None, system: str=None, updated_at: str=None, upvote: str=None):
        """Note - a model defined in OpenAPI

        :param attachment: The attachment of this Note.
        :param author: The author of this Note.
        :param body: The body of this Note.
        :param created_at: The created_at of this Note.
        :param downvote: The downvote of this Note.
        :param id: The id of this Note.
        :param noteable_id: The noteable_id of this Note.
        :param noteable_type: The noteable_type of this Note.
        :param system: The system of this Note.
        :param updated_at: The updated_at of this Note.
        :param upvote: The upvote of this Note.
        """
        self.openapi_types = {
            'attachment': str,
            'author': UserBasic,
            'body': str,
            'created_at': str,
            'downvote': str,
            'id': str,
            'noteable_id': str,
            'noteable_type': str,
            'system': str,
            'updated_at': str,
            'upvote': str
        }

        self.attribute_map = {
            'attachment': 'attachment',
            'author': 'author',
            'body': 'body',
            'created_at': 'created_at',
            'downvote': 'downvote?',
            'id': 'id',
            'noteable_id': 'noteable_id',
            'noteable_type': 'noteable_type',
            'system': 'system',
            'updated_at': 'updated_at',
            'upvote': 'upvote?'
        }

        self._attachment = attachment
        self._author = author
        self._body = body
        self._created_at = created_at
        self._downvote = downvote
        self._id = id
        self._noteable_id = noteable_id
        self._noteable_type = noteable_type
        self._system = system
        self._updated_at = updated_at
        self._upvote = upvote

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Note':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Note of this Note.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment(self):
        """Gets the attachment of this Note.


        :return: The attachment of this Note.
        :rtype: str
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this Note.


        :param attachment: The attachment of this Note.
        :type attachment: str
        """

        self._attachment = attachment

    @property
    def author(self):
        """Gets the author of this Note.


        :return: The author of this Note.
        :rtype: UserBasic
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Note.


        :param author: The author of this Note.
        :type author: UserBasic
        """

        self._author = author

    @property
    def body(self):
        """Gets the body of this Note.


        :return: The body of this Note.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Note.


        :param body: The body of this Note.
        :type body: str
        """

        self._body = body

    @property
    def created_at(self):
        """Gets the created_at of this Note.


        :return: The created_at of this Note.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Note.


        :param created_at: The created_at of this Note.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def downvote(self):
        """Gets the downvote of this Note.


        :return: The downvote of this Note.
        :rtype: str
        """
        return self._downvote

    @downvote.setter
    def downvote(self, downvote):
        """Sets the downvote of this Note.


        :param downvote: The downvote of this Note.
        :type downvote: str
        """

        self._downvote = downvote

    @property
    def id(self):
        """Gets the id of this Note.


        :return: The id of this Note.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Note.


        :param id: The id of this Note.
        :type id: str
        """

        self._id = id

    @property
    def noteable_id(self):
        """Gets the noteable_id of this Note.


        :return: The noteable_id of this Note.
        :rtype: str
        """
        return self._noteable_id

    @noteable_id.setter
    def noteable_id(self, noteable_id):
        """Sets the noteable_id of this Note.


        :param noteable_id: The noteable_id of this Note.
        :type noteable_id: str
        """

        self._noteable_id = noteable_id

    @property
    def noteable_type(self):
        """Gets the noteable_type of this Note.


        :return: The noteable_type of this Note.
        :rtype: str
        """
        return self._noteable_type

    @noteable_type.setter
    def noteable_type(self, noteable_type):
        """Sets the noteable_type of this Note.


        :param noteable_type: The noteable_type of this Note.
        :type noteable_type: str
        """

        self._noteable_type = noteable_type

    @property
    def system(self):
        """Gets the system of this Note.


        :return: The system of this Note.
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this Note.


        :param system: The system of this Note.
        :type system: str
        """

        self._system = system

    @property
    def updated_at(self):
        """Gets the updated_at of this Note.


        :return: The updated_at of this Note.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Note.


        :param updated_at: The updated_at of this Note.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def upvote(self):
        """Gets the upvote of this Note.


        :return: The upvote of this Note.
        :rtype: str
        """
        return self._upvote

    @upvote.setter
    def upvote(self, upvote):
        """Sets the upvote of this Note.


        :param upvote: The upvote of this Note.
        :type upvote: str
        """

        self._upvote = upvote
