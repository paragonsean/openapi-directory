# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project import Project
from openapi_server import util


class GroupDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_url: str=None, description: str=None, id: str=None, lfs_enabled: str=None, name: str=None, path: str=None, projects: Project=None, request_access_enabled: str=None, shared_projects: Project=None, statistics: str=None, visibility_level: str=None, web_url: str=None):
        """GroupDetail - a model defined in OpenAPI

        :param avatar_url: The avatar_url of this GroupDetail.
        :param description: The description of this GroupDetail.
        :param id: The id of this GroupDetail.
        :param lfs_enabled: The lfs_enabled of this GroupDetail.
        :param name: The name of this GroupDetail.
        :param path: The path of this GroupDetail.
        :param projects: The projects of this GroupDetail.
        :param request_access_enabled: The request_access_enabled of this GroupDetail.
        :param shared_projects: The shared_projects of this GroupDetail.
        :param statistics: The statistics of this GroupDetail.
        :param visibility_level: The visibility_level of this GroupDetail.
        :param web_url: The web_url of this GroupDetail.
        """
        self.openapi_types = {
            'avatar_url': str,
            'description': str,
            'id': str,
            'lfs_enabled': str,
            'name': str,
            'path': str,
            'projects': Project,
            'request_access_enabled': str,
            'shared_projects': Project,
            'statistics': str,
            'visibility_level': str,
            'web_url': str
        }

        self.attribute_map = {
            'avatar_url': 'avatar_url',
            'description': 'description',
            'id': 'id',
            'lfs_enabled': 'lfs_enabled',
            'name': 'name',
            'path': 'path',
            'projects': 'projects',
            'request_access_enabled': 'request_access_enabled',
            'shared_projects': 'shared_projects',
            'statistics': 'statistics',
            'visibility_level': 'visibility_level',
            'web_url': 'web_url'
        }

        self._avatar_url = avatar_url
        self._description = description
        self._id = id
        self._lfs_enabled = lfs_enabled
        self._name = name
        self._path = path
        self._projects = projects
        self._request_access_enabled = request_access_enabled
        self._shared_projects = shared_projects
        self._statistics = statistics
        self._visibility_level = visibility_level
        self._web_url = web_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupDetail of this GroupDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_url(self):
        """Gets the avatar_url of this GroupDetail.


        :return: The avatar_url of this GroupDetail.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this GroupDetail.


        :param avatar_url: The avatar_url of this GroupDetail.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def description(self):
        """Gets the description of this GroupDetail.


        :return: The description of this GroupDetail.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GroupDetail.


        :param description: The description of this GroupDetail.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this GroupDetail.


        :return: The id of this GroupDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupDetail.


        :param id: The id of this GroupDetail.
        :type id: str
        """

        self._id = id

    @property
    def lfs_enabled(self):
        """Gets the lfs_enabled of this GroupDetail.


        :return: The lfs_enabled of this GroupDetail.
        :rtype: str
        """
        return self._lfs_enabled

    @lfs_enabled.setter
    def lfs_enabled(self, lfs_enabled):
        """Sets the lfs_enabled of this GroupDetail.


        :param lfs_enabled: The lfs_enabled of this GroupDetail.
        :type lfs_enabled: str
        """

        self._lfs_enabled = lfs_enabled

    @property
    def name(self):
        """Gets the name of this GroupDetail.


        :return: The name of this GroupDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupDetail.


        :param name: The name of this GroupDetail.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this GroupDetail.


        :return: The path of this GroupDetail.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this GroupDetail.


        :param path: The path of this GroupDetail.
        :type path: str
        """

        self._path = path

    @property
    def projects(self):
        """Gets the projects of this GroupDetail.


        :return: The projects of this GroupDetail.
        :rtype: Project
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this GroupDetail.


        :param projects: The projects of this GroupDetail.
        :type projects: Project
        """

        self._projects = projects

    @property
    def request_access_enabled(self):
        """Gets the request_access_enabled of this GroupDetail.


        :return: The request_access_enabled of this GroupDetail.
        :rtype: str
        """
        return self._request_access_enabled

    @request_access_enabled.setter
    def request_access_enabled(self, request_access_enabled):
        """Sets the request_access_enabled of this GroupDetail.


        :param request_access_enabled: The request_access_enabled of this GroupDetail.
        :type request_access_enabled: str
        """

        self._request_access_enabled = request_access_enabled

    @property
    def shared_projects(self):
        """Gets the shared_projects of this GroupDetail.


        :return: The shared_projects of this GroupDetail.
        :rtype: Project
        """
        return self._shared_projects

    @shared_projects.setter
    def shared_projects(self, shared_projects):
        """Sets the shared_projects of this GroupDetail.


        :param shared_projects: The shared_projects of this GroupDetail.
        :type shared_projects: Project
        """

        self._shared_projects = shared_projects

    @property
    def statistics(self):
        """Gets the statistics of this GroupDetail.


        :return: The statistics of this GroupDetail.
        :rtype: str
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this GroupDetail.


        :param statistics: The statistics of this GroupDetail.
        :type statistics: str
        """

        self._statistics = statistics

    @property
    def visibility_level(self):
        """Gets the visibility_level of this GroupDetail.


        :return: The visibility_level of this GroupDetail.
        :rtype: str
        """
        return self._visibility_level

    @visibility_level.setter
    def visibility_level(self, visibility_level):
        """Sets the visibility_level of this GroupDetail.


        :param visibility_level: The visibility_level of this GroupDetail.
        :type visibility_level: str
        """

        self._visibility_level = visibility_level

    @property
    def web_url(self):
        """Gets the web_url of this GroupDetail.


        :return: The web_url of this GroupDetail.
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """Sets the web_url of this GroupDetail.


        :param web_url: The web_url of this GroupDetail.
        :type web_url: str
        """

        self._web_url = web_url
