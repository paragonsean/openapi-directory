# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ProjectsIdRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, default_branch: str=None, path: str=None, description: str=None, issues_enabled: bool=None, merge_requests_enabled: bool=None, wiki_enabled: bool=None, builds_enabled: bool=None, snippets_enabled: bool=None, shared_runners_enabled: bool=None, container_registry_enabled: bool=None, lfs_enabled: bool=None, public: bool=None, visibility_level: int=None, public_builds: bool=None, request_access_enabled: bool=None, only_allow_merge_if_build_succeeds: bool=None, only_allow_merge_if_all_discussions_are_resolved: bool=None):
        """PutV3ProjectsIdRequest - a model defined in OpenAPI

        :param name: The name of this PutV3ProjectsIdRequest.
        :param default_branch: The default_branch of this PutV3ProjectsIdRequest.
        :param path: The path of this PutV3ProjectsIdRequest.
        :param description: The description of this PutV3ProjectsIdRequest.
        :param issues_enabled: The issues_enabled of this PutV3ProjectsIdRequest.
        :param merge_requests_enabled: The merge_requests_enabled of this PutV3ProjectsIdRequest.
        :param wiki_enabled: The wiki_enabled of this PutV3ProjectsIdRequest.
        :param builds_enabled: The builds_enabled of this PutV3ProjectsIdRequest.
        :param snippets_enabled: The snippets_enabled of this PutV3ProjectsIdRequest.
        :param shared_runners_enabled: The shared_runners_enabled of this PutV3ProjectsIdRequest.
        :param container_registry_enabled: The container_registry_enabled of this PutV3ProjectsIdRequest.
        :param lfs_enabled: The lfs_enabled of this PutV3ProjectsIdRequest.
        :param public: The public of this PutV3ProjectsIdRequest.
        :param visibility_level: The visibility_level of this PutV3ProjectsIdRequest.
        :param public_builds: The public_builds of this PutV3ProjectsIdRequest.
        :param request_access_enabled: The request_access_enabled of this PutV3ProjectsIdRequest.
        :param only_allow_merge_if_build_succeeds: The only_allow_merge_if_build_succeeds of this PutV3ProjectsIdRequest.
        :param only_allow_merge_if_all_discussions_are_resolved: The only_allow_merge_if_all_discussions_are_resolved of this PutV3ProjectsIdRequest.
        """
        self.openapi_types = {
            'name': str,
            'default_branch': str,
            'path': str,
            'description': str,
            'issues_enabled': bool,
            'merge_requests_enabled': bool,
            'wiki_enabled': bool,
            'builds_enabled': bool,
            'snippets_enabled': bool,
            'shared_runners_enabled': bool,
            'container_registry_enabled': bool,
            'lfs_enabled': bool,
            'public': bool,
            'visibility_level': int,
            'public_builds': bool,
            'request_access_enabled': bool,
            'only_allow_merge_if_build_succeeds': bool,
            'only_allow_merge_if_all_discussions_are_resolved': bool
        }

        self.attribute_map = {
            'name': 'name',
            'default_branch': 'default_branch',
            'path': 'path',
            'description': 'description',
            'issues_enabled': 'issues_enabled',
            'merge_requests_enabled': 'merge_requests_enabled',
            'wiki_enabled': 'wiki_enabled',
            'builds_enabled': 'builds_enabled',
            'snippets_enabled': 'snippets_enabled',
            'shared_runners_enabled': 'shared_runners_enabled',
            'container_registry_enabled': 'container_registry_enabled',
            'lfs_enabled': 'lfs_enabled',
            'public': 'public',
            'visibility_level': 'visibility_level',
            'public_builds': 'public_builds',
            'request_access_enabled': 'request_access_enabled',
            'only_allow_merge_if_build_succeeds': 'only_allow_merge_if_build_succeeds',
            'only_allow_merge_if_all_discussions_are_resolved': 'only_allow_merge_if_all_discussions_are_resolved'
        }

        self._name = name
        self._default_branch = default_branch
        self._path = path
        self._description = description
        self._issues_enabled = issues_enabled
        self._merge_requests_enabled = merge_requests_enabled
        self._wiki_enabled = wiki_enabled
        self._builds_enabled = builds_enabled
        self._snippets_enabled = snippets_enabled
        self._shared_runners_enabled = shared_runners_enabled
        self._container_registry_enabled = container_registry_enabled
        self._lfs_enabled = lfs_enabled
        self._public = public
        self._visibility_level = visibility_level
        self._public_builds = public_builds
        self._request_access_enabled = request_access_enabled
        self._only_allow_merge_if_build_succeeds = only_allow_merge_if_build_succeeds
        self._only_allow_merge_if_all_discussions_are_resolved = only_allow_merge_if_all_discussions_are_resolved

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ProjectsIdRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ProjectsId_request of this PutV3ProjectsIdRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PutV3ProjectsIdRequest.

        The name of the project

        :return: The name of this PutV3ProjectsIdRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutV3ProjectsIdRequest.

        The name of the project

        :param name: The name of this PutV3ProjectsIdRequest.
        :type name: str
        """

        self._name = name

    @property
    def default_branch(self):
        """Gets the default_branch of this PutV3ProjectsIdRequest.

        The default branch of the project

        :return: The default_branch of this PutV3ProjectsIdRequest.
        :rtype: str
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this PutV3ProjectsIdRequest.

        The default branch of the project

        :param default_branch: The default_branch of this PutV3ProjectsIdRequest.
        :type default_branch: str
        """

        self._default_branch = default_branch

    @property
    def path(self):
        """Gets the path of this PutV3ProjectsIdRequest.

        The path of the repository

        :return: The path of this PutV3ProjectsIdRequest.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PutV3ProjectsIdRequest.

        The path of the repository

        :param path: The path of this PutV3ProjectsIdRequest.
        :type path: str
        """

        self._path = path

    @property
    def description(self):
        """Gets the description of this PutV3ProjectsIdRequest.

        The description of the project

        :return: The description of this PutV3ProjectsIdRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutV3ProjectsIdRequest.

        The description of the project

        :param description: The description of this PutV3ProjectsIdRequest.
        :type description: str
        """

        self._description = description

    @property
    def issues_enabled(self):
        """Gets the issues_enabled of this PutV3ProjectsIdRequest.

        Flag indication if the issue tracker is enabled

        :return: The issues_enabled of this PutV3ProjectsIdRequest.
        :rtype: bool
        """
        return self._issues_enabled

    @issues_enabled.setter
    def issues_enabled(self, issues_enabled):
        """Sets the issues_enabled of this PutV3ProjectsIdRequest.

        Flag indication if the issue tracker is enabled

        :param issues_enabled: The issues_enabled of this PutV3ProjectsIdRequest.
        :type issues_enabled: bool
        """

        self._issues_enabled = issues_enabled

    @property
    def merge_requests_enabled(self):
        """Gets the merge_requests_enabled of this PutV3ProjectsIdRequest.

        Flag indication if merge requests are enabled

        :return: The merge_requests_enabled of this PutV3ProjectsIdRequest.
        :rtype: bool
        """
        return self._merge_requests_enabled

    @merge_requests_enabled.setter
    def merge_requests_enabled(self, merge_requests_enabled):
        """Sets the merge_requests_enabled of this PutV3ProjectsIdRequest.

        Flag indication if merge requests are enabled

        :param merge_requests_enabled: The merge_requests_enabled of this PutV3ProjectsIdRequest.
        :type merge_requests_enabled: bool
        """

        self._merge_requests_enabled = merge_requests_enabled

    @property
    def wiki_enabled(self):
        """Gets the wiki_enabled of this PutV3ProjectsIdRequest.

        Flag indication if the wiki is enabled

        :return: The wiki_enabled of this PutV3ProjectsIdRequest.
        :rtype: bool
        """
        return self._wiki_enabled

    @wiki_enabled.setter
    def wiki_enabled(self, wiki_enabled):
        """Sets the wiki_enabled of this PutV3ProjectsIdRequest.

        Flag indication if the wiki is enabled

        :param wiki_enabled: The wiki_enabled of this PutV3ProjectsIdRequest.
        :type wiki_enabled: bool
        """

        self._wiki_enabled = wiki_enabled

    @property
    def builds_enabled(self):
        """Gets the builds_enabled of this PutV3ProjectsIdRequest.

        Flag indication if builds are enabled

        :return: The builds_enabled of this PutV3ProjectsIdRequest.
        :rtype: bool
        """
        return self._builds_enabled

    @builds_enabled.setter
    def builds_enabled(self, builds_enabled):
        """Sets the builds_enabled of this PutV3ProjectsIdRequest.

        Flag indication if builds are enabled

        :param builds_enabled: The builds_enabled of this PutV3ProjectsIdRequest.
        :type builds_enabled: bool
        """

        self._builds_enabled = builds_enabled

    @property
    def snippets_enabled(self):
        """Gets the snippets_enabled of this PutV3ProjectsIdRequest.

        Flag indication if snippets are enabled

        :return: The snippets_enabled of this PutV3ProjectsIdRequest.
        :rtype: bool
        """
        return self._snippets_enabled

    @snippets_enabled.setter
    def snippets_enabled(self, snippets_enabled):
        """Sets the snippets_enabled of this PutV3ProjectsIdRequest.

        Flag indication if snippets are enabled

        :param snippets_enabled: The snippets_enabled of this PutV3ProjectsIdRequest.
        :type snippets_enabled: bool
        """

        self._snippets_enabled = snippets_enabled

    @property
    def shared_runners_enabled(self):
        """Gets the shared_runners_enabled of this PutV3ProjectsIdRequest.

        Flag indication if shared runners are enabled for that project

        :return: The shared_runners_enabled of this PutV3ProjectsIdRequest.
        :rtype: bool
        """
        return self._shared_runners_enabled

    @shared_runners_enabled.setter
    def shared_runners_enabled(self, shared_runners_enabled):
        """Sets the shared_runners_enabled of this PutV3ProjectsIdRequest.

        Flag indication if shared runners are enabled for that project

        :param shared_runners_enabled: The shared_runners_enabled of this PutV3ProjectsIdRequest.
        :type shared_runners_enabled: bool
        """

        self._shared_runners_enabled = shared_runners_enabled

    @property
    def container_registry_enabled(self):
        """Gets the container_registry_enabled of this PutV3ProjectsIdRequest.

        Flag indication if the container registry is enabled for that project

        :return: The container_registry_enabled of this PutV3ProjectsIdRequest.
        :rtype: bool
        """
        return self._container_registry_enabled

    @container_registry_enabled.setter
    def container_registry_enabled(self, container_registry_enabled):
        """Sets the container_registry_enabled of this PutV3ProjectsIdRequest.

        Flag indication if the container registry is enabled for that project

        :param container_registry_enabled: The container_registry_enabled of this PutV3ProjectsIdRequest.
        :type container_registry_enabled: bool
        """

        self._container_registry_enabled = container_registry_enabled

    @property
    def lfs_enabled(self):
        """Gets the lfs_enabled of this PutV3ProjectsIdRequest.

        Flag indication if Git LFS is enabled for that project

        :return: The lfs_enabled of this PutV3ProjectsIdRequest.
        :rtype: bool
        """
        return self._lfs_enabled

    @lfs_enabled.setter
    def lfs_enabled(self, lfs_enabled):
        """Sets the lfs_enabled of this PutV3ProjectsIdRequest.

        Flag indication if Git LFS is enabled for that project

        :param lfs_enabled: The lfs_enabled of this PutV3ProjectsIdRequest.
        :type lfs_enabled: bool
        """

        self._lfs_enabled = lfs_enabled

    @property
    def public(self):
        """Gets the public of this PutV3ProjectsIdRequest.

        Create a public project. The same as visibility_level = 20.

        :return: The public of this PutV3ProjectsIdRequest.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this PutV3ProjectsIdRequest.

        Create a public project. The same as visibility_level = 20.

        :param public: The public of this PutV3ProjectsIdRequest.
        :type public: bool
        """

        self._public = public

    @property
    def visibility_level(self):
        """Gets the visibility_level of this PutV3ProjectsIdRequest.

        Create a public project. The same as visibility_level = 20.

        :return: The visibility_level of this PutV3ProjectsIdRequest.
        :rtype: int
        """
        return self._visibility_level

    @visibility_level.setter
    def visibility_level(self, visibility_level):
        """Sets the visibility_level of this PutV3ProjectsIdRequest.

        Create a public project. The same as visibility_level = 20.

        :param visibility_level: The visibility_level of this PutV3ProjectsIdRequest.
        :type visibility_level: int
        """
        allowed_values = [0, 10, 20]  # noqa: E501
        if visibility_level not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility_level` ({0}), must be one of {1}"
                .format(visibility_level, allowed_values)
            )

        self._visibility_level = visibility_level

    @property
    def public_builds(self):
        """Gets the public_builds of this PutV3ProjectsIdRequest.

        Perform public builds

        :return: The public_builds of this PutV3ProjectsIdRequest.
        :rtype: bool
        """
        return self._public_builds

    @public_builds.setter
    def public_builds(self, public_builds):
        """Sets the public_builds of this PutV3ProjectsIdRequest.

        Perform public builds

        :param public_builds: The public_builds of this PutV3ProjectsIdRequest.
        :type public_builds: bool
        """

        self._public_builds = public_builds

    @property
    def request_access_enabled(self):
        """Gets the request_access_enabled of this PutV3ProjectsIdRequest.

        Allow users to request member access

        :return: The request_access_enabled of this PutV3ProjectsIdRequest.
        :rtype: bool
        """
        return self._request_access_enabled

    @request_access_enabled.setter
    def request_access_enabled(self, request_access_enabled):
        """Sets the request_access_enabled of this PutV3ProjectsIdRequest.

        Allow users to request member access

        :param request_access_enabled: The request_access_enabled of this PutV3ProjectsIdRequest.
        :type request_access_enabled: bool
        """

        self._request_access_enabled = request_access_enabled

    @property
    def only_allow_merge_if_build_succeeds(self):
        """Gets the only_allow_merge_if_build_succeeds of this PutV3ProjectsIdRequest.

        Only allow to merge if builds succeed

        :return: The only_allow_merge_if_build_succeeds of this PutV3ProjectsIdRequest.
        :rtype: bool
        """
        return self._only_allow_merge_if_build_succeeds

    @only_allow_merge_if_build_succeeds.setter
    def only_allow_merge_if_build_succeeds(self, only_allow_merge_if_build_succeeds):
        """Sets the only_allow_merge_if_build_succeeds of this PutV3ProjectsIdRequest.

        Only allow to merge if builds succeed

        :param only_allow_merge_if_build_succeeds: The only_allow_merge_if_build_succeeds of this PutV3ProjectsIdRequest.
        :type only_allow_merge_if_build_succeeds: bool
        """

        self._only_allow_merge_if_build_succeeds = only_allow_merge_if_build_succeeds

    @property
    def only_allow_merge_if_all_discussions_are_resolved(self):
        """Gets the only_allow_merge_if_all_discussions_are_resolved of this PutV3ProjectsIdRequest.

        Only allow to merge if all discussions are resolved

        :return: The only_allow_merge_if_all_discussions_are_resolved of this PutV3ProjectsIdRequest.
        :rtype: bool
        """
        return self._only_allow_merge_if_all_discussions_are_resolved

    @only_allow_merge_if_all_discussions_are_resolved.setter
    def only_allow_merge_if_all_discussions_are_resolved(self, only_allow_merge_if_all_discussions_are_resolved):
        """Sets the only_allow_merge_if_all_discussions_are_resolved of this PutV3ProjectsIdRequest.

        Only allow to merge if all discussions are resolved

        :param only_allow_merge_if_all_discussions_are_resolved: The only_allow_merge_if_all_discussions_are_resolved of this PutV3ProjectsIdRequest.
        :type only_allow_merge_if_all_discussions_are_resolved: bool
        """

        self._only_allow_merge_if_all_discussions_are_resolved = only_allow_merge_if_all_discussions_are_resolved
