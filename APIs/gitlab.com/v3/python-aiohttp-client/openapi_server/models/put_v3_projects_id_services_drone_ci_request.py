# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ProjectsIdServicesDroneCiRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token: str=None, drone_url: str=None, enable_ssl_verification: bool=None, push_events: str=None, merge_request_events: str=None, tag_push_events: str=None):
        """PutV3ProjectsIdServicesDroneCiRequest - a model defined in OpenAPI

        :param token: The token of this PutV3ProjectsIdServicesDroneCiRequest.
        :param drone_url: The drone_url of this PutV3ProjectsIdServicesDroneCiRequest.
        :param enable_ssl_verification: The enable_ssl_verification of this PutV3ProjectsIdServicesDroneCiRequest.
        :param push_events: The push_events of this PutV3ProjectsIdServicesDroneCiRequest.
        :param merge_request_events: The merge_request_events of this PutV3ProjectsIdServicesDroneCiRequest.
        :param tag_push_events: The tag_push_events of this PutV3ProjectsIdServicesDroneCiRequest.
        """
        self.openapi_types = {
            'token': str,
            'drone_url': str,
            'enable_ssl_verification': bool,
            'push_events': str,
            'merge_request_events': str,
            'tag_push_events': str
        }

        self.attribute_map = {
            'token': 'token',
            'drone_url': 'drone_url',
            'enable_ssl_verification': 'enable_ssl_verification',
            'push_events': 'push_events',
            'merge_request_events': 'merge_request_events',
            'tag_push_events': 'tag_push_events'
        }

        self._token = token
        self._drone_url = drone_url
        self._enable_ssl_verification = enable_ssl_verification
        self._push_events = push_events
        self._merge_request_events = merge_request_events
        self._tag_push_events = tag_push_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ProjectsIdServicesDroneCiRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ProjectsIdServicesDroneCi_request of this PutV3ProjectsIdServicesDroneCiRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token(self):
        """Gets the token of this PutV3ProjectsIdServicesDroneCiRequest.

        Drone CI token

        :return: The token of this PutV3ProjectsIdServicesDroneCiRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PutV3ProjectsIdServicesDroneCiRequest.

        Drone CI token

        :param token: The token of this PutV3ProjectsIdServicesDroneCiRequest.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def drone_url(self):
        """Gets the drone_url of this PutV3ProjectsIdServicesDroneCiRequest.

        Drone CI URL

        :return: The drone_url of this PutV3ProjectsIdServicesDroneCiRequest.
        :rtype: str
        """
        return self._drone_url

    @drone_url.setter
    def drone_url(self, drone_url):
        """Sets the drone_url of this PutV3ProjectsIdServicesDroneCiRequest.

        Drone CI URL

        :param drone_url: The drone_url of this PutV3ProjectsIdServicesDroneCiRequest.
        :type drone_url: str
        """
        if drone_url is None:
            raise ValueError("Invalid value for `drone_url`, must not be `None`")

        self._drone_url = drone_url

    @property
    def enable_ssl_verification(self):
        """Gets the enable_ssl_verification of this PutV3ProjectsIdServicesDroneCiRequest.

        Enable SSL verification for communication

        :return: The enable_ssl_verification of this PutV3ProjectsIdServicesDroneCiRequest.
        :rtype: bool
        """
        return self._enable_ssl_verification

    @enable_ssl_verification.setter
    def enable_ssl_verification(self, enable_ssl_verification):
        """Sets the enable_ssl_verification of this PutV3ProjectsIdServicesDroneCiRequest.

        Enable SSL verification for communication

        :param enable_ssl_verification: The enable_ssl_verification of this PutV3ProjectsIdServicesDroneCiRequest.
        :type enable_ssl_verification: bool
        """

        self._enable_ssl_verification = enable_ssl_verification

    @property
    def push_events(self):
        """Gets the push_events of this PutV3ProjectsIdServicesDroneCiRequest.

        Event will be triggered by a push to the repository

        :return: The push_events of this PutV3ProjectsIdServicesDroneCiRequest.
        :rtype: str
        """
        return self._push_events

    @push_events.setter
    def push_events(self, push_events):
        """Sets the push_events of this PutV3ProjectsIdServicesDroneCiRequest.

        Event will be triggered by a push to the repository

        :param push_events: The push_events of this PutV3ProjectsIdServicesDroneCiRequest.
        :type push_events: str
        """

        self._push_events = push_events

    @property
    def merge_request_events(self):
        """Gets the merge_request_events of this PutV3ProjectsIdServicesDroneCiRequest.

        Event will be triggered when a merge request is created/updated/merged

        :return: The merge_request_events of this PutV3ProjectsIdServicesDroneCiRequest.
        :rtype: str
        """
        return self._merge_request_events

    @merge_request_events.setter
    def merge_request_events(self, merge_request_events):
        """Sets the merge_request_events of this PutV3ProjectsIdServicesDroneCiRequest.

        Event will be triggered when a merge request is created/updated/merged

        :param merge_request_events: The merge_request_events of this PutV3ProjectsIdServicesDroneCiRequest.
        :type merge_request_events: str
        """

        self._merge_request_events = merge_request_events

    @property
    def tag_push_events(self):
        """Gets the tag_push_events of this PutV3ProjectsIdServicesDroneCiRequest.

        Event will be triggered when a new tag is pushed to the repository

        :return: The tag_push_events of this PutV3ProjectsIdServicesDroneCiRequest.
        :rtype: str
        """
        return self._tag_push_events

    @tag_push_events.setter
    def tag_push_events(self, tag_push_events):
        """Sets the tag_push_events of this PutV3ProjectsIdServicesDroneCiRequest.

        Event will be triggered when a new tag is pushed to the repository

        :param tag_push_events: The tag_push_events of this PutV3ProjectsIdServicesDroneCiRequest.
        :type tag_push_events: str
        """

        self._tag_push_events = tag_push_events
