# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostV3ProjectsIdRepositoryCommitsShaCommentsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, note: str=None, path: str=None, line: int=None, line_type: str='new'):
        """PostV3ProjectsIdRepositoryCommitsShaCommentsRequest - a model defined in OpenAPI

        :param note: The note of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.
        :param path: The path of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.
        :param line: The line of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.
        :param line_type: The line_type of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.
        """
        self.openapi_types = {
            'note': str,
            'path': str,
            'line': int,
            'line_type': str
        }

        self.attribute_map = {
            'note': 'note',
            'path': 'path',
            'line': 'line',
            'line_type': 'line_type'
        }

        self._note = note
        self._path = path
        self._line = line
        self._line_type = line_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostV3ProjectsIdRepositoryCommitsShaCommentsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postV3ProjectsIdRepositoryCommitsShaComments_request of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def note(self):
        """Gets the note of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.

        The text of the comment

        :return: The note of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.

        The text of the comment

        :param note: The note of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def path(self):
        """Gets the path of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.

        The file path

        :return: The path of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.

        The file path

        :param path: The path of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.
        :type path: str
        """

        self._path = path

    @property
    def line(self):
        """Gets the line of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.

        The line number

        :return: The line of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.

        The line number

        :param line: The line of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.
        :type line: int
        """
        if line is None:
            raise ValueError("Invalid value for `line`, must not be `None`")

        self._line = line

    @property
    def line_type(self):
        """Gets the line_type of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.

        The type of the line

        :return: The line_type of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.
        :rtype: str
        """
        return self._line_type

    @line_type.setter
    def line_type(self, line_type):
        """Sets the line_type of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.

        The type of the line

        :param line_type: The line_type of this PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.
        :type line_type: str
        """
        allowed_values = ["new", "old"]  # noqa: E501
        if line_type not in allowed_values:
            raise ValueError(
                "Invalid value for `line_type` ({0}), must be one of {1}"
                .format(line_type, allowed_values)
            )

        self._line_type = line_type
