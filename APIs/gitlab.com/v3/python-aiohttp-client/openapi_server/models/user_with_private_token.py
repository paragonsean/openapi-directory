# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.identity import Identity
from openapi_server import util


class UserWithPrivateToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_url: str=None, bio: str=None, can_create_group: str=None, can_create_project: str=None, color_scheme_id: str=None, confirmed_at: str=None, created_at: str=None, current_sign_in_at: str=None, email: str=None, external: str=None, id: str=None, identities: Identity=None, is_admin: str=None, last_sign_in_at: str=None, linkedin: str=None, location: str=None, name: str=None, organization: str=None, private_token: str=None, projects_limit: str=None, skype: str=None, state: str=None, theme_id: str=None, twitter: str=None, two_factor_enabled: str=None, username: str=None, web_url: str=None, website_url: str=None):
        """UserWithPrivateToken - a model defined in OpenAPI

        :param avatar_url: The avatar_url of this UserWithPrivateToken.
        :param bio: The bio of this UserWithPrivateToken.
        :param can_create_group: The can_create_group of this UserWithPrivateToken.
        :param can_create_project: The can_create_project of this UserWithPrivateToken.
        :param color_scheme_id: The color_scheme_id of this UserWithPrivateToken.
        :param confirmed_at: The confirmed_at of this UserWithPrivateToken.
        :param created_at: The created_at of this UserWithPrivateToken.
        :param current_sign_in_at: The current_sign_in_at of this UserWithPrivateToken.
        :param email: The email of this UserWithPrivateToken.
        :param external: The external of this UserWithPrivateToken.
        :param id: The id of this UserWithPrivateToken.
        :param identities: The identities of this UserWithPrivateToken.
        :param is_admin: The is_admin of this UserWithPrivateToken.
        :param last_sign_in_at: The last_sign_in_at of this UserWithPrivateToken.
        :param linkedin: The linkedin of this UserWithPrivateToken.
        :param location: The location of this UserWithPrivateToken.
        :param name: The name of this UserWithPrivateToken.
        :param organization: The organization of this UserWithPrivateToken.
        :param private_token: The private_token of this UserWithPrivateToken.
        :param projects_limit: The projects_limit of this UserWithPrivateToken.
        :param skype: The skype of this UserWithPrivateToken.
        :param state: The state of this UserWithPrivateToken.
        :param theme_id: The theme_id of this UserWithPrivateToken.
        :param twitter: The twitter of this UserWithPrivateToken.
        :param two_factor_enabled: The two_factor_enabled of this UserWithPrivateToken.
        :param username: The username of this UserWithPrivateToken.
        :param web_url: The web_url of this UserWithPrivateToken.
        :param website_url: The website_url of this UserWithPrivateToken.
        """
        self.openapi_types = {
            'avatar_url': str,
            'bio': str,
            'can_create_group': str,
            'can_create_project': str,
            'color_scheme_id': str,
            'confirmed_at': str,
            'created_at': str,
            'current_sign_in_at': str,
            'email': str,
            'external': str,
            'id': str,
            'identities': Identity,
            'is_admin': str,
            'last_sign_in_at': str,
            'linkedin': str,
            'location': str,
            'name': str,
            'organization': str,
            'private_token': str,
            'projects_limit': str,
            'skype': str,
            'state': str,
            'theme_id': str,
            'twitter': str,
            'two_factor_enabled': str,
            'username': str,
            'web_url': str,
            'website_url': str
        }

        self.attribute_map = {
            'avatar_url': 'avatar_url',
            'bio': 'bio',
            'can_create_group': 'can_create_group',
            'can_create_project': 'can_create_project',
            'color_scheme_id': 'color_scheme_id',
            'confirmed_at': 'confirmed_at',
            'created_at': 'created_at',
            'current_sign_in_at': 'current_sign_in_at',
            'email': 'email',
            'external': 'external',
            'id': 'id',
            'identities': 'identities',
            'is_admin': 'is_admin',
            'last_sign_in_at': 'last_sign_in_at',
            'linkedin': 'linkedin',
            'location': 'location',
            'name': 'name',
            'organization': 'organization',
            'private_token': 'private_token',
            'projects_limit': 'projects_limit',
            'skype': 'skype',
            'state': 'state',
            'theme_id': 'theme_id',
            'twitter': 'twitter',
            'two_factor_enabled': 'two_factor_enabled',
            'username': 'username',
            'web_url': 'web_url',
            'website_url': 'website_url'
        }

        self._avatar_url = avatar_url
        self._bio = bio
        self._can_create_group = can_create_group
        self._can_create_project = can_create_project
        self._color_scheme_id = color_scheme_id
        self._confirmed_at = confirmed_at
        self._created_at = created_at
        self._current_sign_in_at = current_sign_in_at
        self._email = email
        self._external = external
        self._id = id
        self._identities = identities
        self._is_admin = is_admin
        self._last_sign_in_at = last_sign_in_at
        self._linkedin = linkedin
        self._location = location
        self._name = name
        self._organization = organization
        self._private_token = private_token
        self._projects_limit = projects_limit
        self._skype = skype
        self._state = state
        self._theme_id = theme_id
        self._twitter = twitter
        self._two_factor_enabled = two_factor_enabled
        self._username = username
        self._web_url = web_url
        self._website_url = website_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserWithPrivateToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserWithPrivateToken of this UserWithPrivateToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_url(self):
        """Gets the avatar_url of this UserWithPrivateToken.


        :return: The avatar_url of this UserWithPrivateToken.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this UserWithPrivateToken.


        :param avatar_url: The avatar_url of this UserWithPrivateToken.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def bio(self):
        """Gets the bio of this UserWithPrivateToken.


        :return: The bio of this UserWithPrivateToken.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this UserWithPrivateToken.


        :param bio: The bio of this UserWithPrivateToken.
        :type bio: str
        """

        self._bio = bio

    @property
    def can_create_group(self):
        """Gets the can_create_group of this UserWithPrivateToken.


        :return: The can_create_group of this UserWithPrivateToken.
        :rtype: str
        """
        return self._can_create_group

    @can_create_group.setter
    def can_create_group(self, can_create_group):
        """Sets the can_create_group of this UserWithPrivateToken.


        :param can_create_group: The can_create_group of this UserWithPrivateToken.
        :type can_create_group: str
        """

        self._can_create_group = can_create_group

    @property
    def can_create_project(self):
        """Gets the can_create_project of this UserWithPrivateToken.


        :return: The can_create_project of this UserWithPrivateToken.
        :rtype: str
        """
        return self._can_create_project

    @can_create_project.setter
    def can_create_project(self, can_create_project):
        """Sets the can_create_project of this UserWithPrivateToken.


        :param can_create_project: The can_create_project of this UserWithPrivateToken.
        :type can_create_project: str
        """

        self._can_create_project = can_create_project

    @property
    def color_scheme_id(self):
        """Gets the color_scheme_id of this UserWithPrivateToken.


        :return: The color_scheme_id of this UserWithPrivateToken.
        :rtype: str
        """
        return self._color_scheme_id

    @color_scheme_id.setter
    def color_scheme_id(self, color_scheme_id):
        """Sets the color_scheme_id of this UserWithPrivateToken.


        :param color_scheme_id: The color_scheme_id of this UserWithPrivateToken.
        :type color_scheme_id: str
        """

        self._color_scheme_id = color_scheme_id

    @property
    def confirmed_at(self):
        """Gets the confirmed_at of this UserWithPrivateToken.


        :return: The confirmed_at of this UserWithPrivateToken.
        :rtype: str
        """
        return self._confirmed_at

    @confirmed_at.setter
    def confirmed_at(self, confirmed_at):
        """Sets the confirmed_at of this UserWithPrivateToken.


        :param confirmed_at: The confirmed_at of this UserWithPrivateToken.
        :type confirmed_at: str
        """

        self._confirmed_at = confirmed_at

    @property
    def created_at(self):
        """Gets the created_at of this UserWithPrivateToken.


        :return: The created_at of this UserWithPrivateToken.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserWithPrivateToken.


        :param created_at: The created_at of this UserWithPrivateToken.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def current_sign_in_at(self):
        """Gets the current_sign_in_at of this UserWithPrivateToken.


        :return: The current_sign_in_at of this UserWithPrivateToken.
        :rtype: str
        """
        return self._current_sign_in_at

    @current_sign_in_at.setter
    def current_sign_in_at(self, current_sign_in_at):
        """Sets the current_sign_in_at of this UserWithPrivateToken.


        :param current_sign_in_at: The current_sign_in_at of this UserWithPrivateToken.
        :type current_sign_in_at: str
        """

        self._current_sign_in_at = current_sign_in_at

    @property
    def email(self):
        """Gets the email of this UserWithPrivateToken.


        :return: The email of this UserWithPrivateToken.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserWithPrivateToken.


        :param email: The email of this UserWithPrivateToken.
        :type email: str
        """

        self._email = email

    @property
    def external(self):
        """Gets the external of this UserWithPrivateToken.


        :return: The external of this UserWithPrivateToken.
        :rtype: str
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this UserWithPrivateToken.


        :param external: The external of this UserWithPrivateToken.
        :type external: str
        """

        self._external = external

    @property
    def id(self):
        """Gets the id of this UserWithPrivateToken.


        :return: The id of this UserWithPrivateToken.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserWithPrivateToken.


        :param id: The id of this UserWithPrivateToken.
        :type id: str
        """

        self._id = id

    @property
    def identities(self):
        """Gets the identities of this UserWithPrivateToken.


        :return: The identities of this UserWithPrivateToken.
        :rtype: Identity
        """
        return self._identities

    @identities.setter
    def identities(self, identities):
        """Sets the identities of this UserWithPrivateToken.


        :param identities: The identities of this UserWithPrivateToken.
        :type identities: Identity
        """

        self._identities = identities

    @property
    def is_admin(self):
        """Gets the is_admin of this UserWithPrivateToken.


        :return: The is_admin of this UserWithPrivateToken.
        :rtype: str
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this UserWithPrivateToken.


        :param is_admin: The is_admin of this UserWithPrivateToken.
        :type is_admin: str
        """

        self._is_admin = is_admin

    @property
    def last_sign_in_at(self):
        """Gets the last_sign_in_at of this UserWithPrivateToken.


        :return: The last_sign_in_at of this UserWithPrivateToken.
        :rtype: str
        """
        return self._last_sign_in_at

    @last_sign_in_at.setter
    def last_sign_in_at(self, last_sign_in_at):
        """Sets the last_sign_in_at of this UserWithPrivateToken.


        :param last_sign_in_at: The last_sign_in_at of this UserWithPrivateToken.
        :type last_sign_in_at: str
        """

        self._last_sign_in_at = last_sign_in_at

    @property
    def linkedin(self):
        """Gets the linkedin of this UserWithPrivateToken.


        :return: The linkedin of this UserWithPrivateToken.
        :rtype: str
        """
        return self._linkedin

    @linkedin.setter
    def linkedin(self, linkedin):
        """Sets the linkedin of this UserWithPrivateToken.


        :param linkedin: The linkedin of this UserWithPrivateToken.
        :type linkedin: str
        """

        self._linkedin = linkedin

    @property
    def location(self):
        """Gets the location of this UserWithPrivateToken.


        :return: The location of this UserWithPrivateToken.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this UserWithPrivateToken.


        :param location: The location of this UserWithPrivateToken.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this UserWithPrivateToken.


        :return: The name of this UserWithPrivateToken.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserWithPrivateToken.


        :param name: The name of this UserWithPrivateToken.
        :type name: str
        """

        self._name = name

    @property
    def organization(self):
        """Gets the organization of this UserWithPrivateToken.


        :return: The organization of this UserWithPrivateToken.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this UserWithPrivateToken.


        :param organization: The organization of this UserWithPrivateToken.
        :type organization: str
        """

        self._organization = organization

    @property
    def private_token(self):
        """Gets the private_token of this UserWithPrivateToken.


        :return: The private_token of this UserWithPrivateToken.
        :rtype: str
        """
        return self._private_token

    @private_token.setter
    def private_token(self, private_token):
        """Sets the private_token of this UserWithPrivateToken.


        :param private_token: The private_token of this UserWithPrivateToken.
        :type private_token: str
        """

        self._private_token = private_token

    @property
    def projects_limit(self):
        """Gets the projects_limit of this UserWithPrivateToken.


        :return: The projects_limit of this UserWithPrivateToken.
        :rtype: str
        """
        return self._projects_limit

    @projects_limit.setter
    def projects_limit(self, projects_limit):
        """Sets the projects_limit of this UserWithPrivateToken.


        :param projects_limit: The projects_limit of this UserWithPrivateToken.
        :type projects_limit: str
        """

        self._projects_limit = projects_limit

    @property
    def skype(self):
        """Gets the skype of this UserWithPrivateToken.


        :return: The skype of this UserWithPrivateToken.
        :rtype: str
        """
        return self._skype

    @skype.setter
    def skype(self, skype):
        """Sets the skype of this UserWithPrivateToken.


        :param skype: The skype of this UserWithPrivateToken.
        :type skype: str
        """

        self._skype = skype

    @property
    def state(self):
        """Gets the state of this UserWithPrivateToken.


        :return: The state of this UserWithPrivateToken.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UserWithPrivateToken.


        :param state: The state of this UserWithPrivateToken.
        :type state: str
        """

        self._state = state

    @property
    def theme_id(self):
        """Gets the theme_id of this UserWithPrivateToken.


        :return: The theme_id of this UserWithPrivateToken.
        :rtype: str
        """
        return self._theme_id

    @theme_id.setter
    def theme_id(self, theme_id):
        """Sets the theme_id of this UserWithPrivateToken.


        :param theme_id: The theme_id of this UserWithPrivateToken.
        :type theme_id: str
        """

        self._theme_id = theme_id

    @property
    def twitter(self):
        """Gets the twitter of this UserWithPrivateToken.


        :return: The twitter of this UserWithPrivateToken.
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this UserWithPrivateToken.


        :param twitter: The twitter of this UserWithPrivateToken.
        :type twitter: str
        """

        self._twitter = twitter

    @property
    def two_factor_enabled(self):
        """Gets the two_factor_enabled of this UserWithPrivateToken.


        :return: The two_factor_enabled of this UserWithPrivateToken.
        :rtype: str
        """
        return self._two_factor_enabled

    @two_factor_enabled.setter
    def two_factor_enabled(self, two_factor_enabled):
        """Sets the two_factor_enabled of this UserWithPrivateToken.


        :param two_factor_enabled: The two_factor_enabled of this UserWithPrivateToken.
        :type two_factor_enabled: str
        """

        self._two_factor_enabled = two_factor_enabled

    @property
    def username(self):
        """Gets the username of this UserWithPrivateToken.


        :return: The username of this UserWithPrivateToken.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserWithPrivateToken.


        :param username: The username of this UserWithPrivateToken.
        :type username: str
        """

        self._username = username

    @property
    def web_url(self):
        """Gets the web_url of this UserWithPrivateToken.


        :return: The web_url of this UserWithPrivateToken.
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """Sets the web_url of this UserWithPrivateToken.


        :param web_url: The web_url of this UserWithPrivateToken.
        :type web_url: str
        """

        self._web_url = web_url

    @property
    def website_url(self):
        """Gets the website_url of this UserWithPrivateToken.


        :return: The website_url of this UserWithPrivateToken.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this UserWithPrivateToken.


        :param website_url: The website_url of this UserWithPrivateToken.
        :type website_url: str
        """

        self._website_url = website_url
