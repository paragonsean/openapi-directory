# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostV3ProjectsIdShareRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id: int=None, group_access: int=None, expires_at: date=None):
        """PostV3ProjectsIdShareRequest - a model defined in OpenAPI

        :param group_id: The group_id of this PostV3ProjectsIdShareRequest.
        :param group_access: The group_access of this PostV3ProjectsIdShareRequest.
        :param expires_at: The expires_at of this PostV3ProjectsIdShareRequest.
        """
        self.openapi_types = {
            'group_id': int,
            'group_access': int,
            'expires_at': date
        }

        self.attribute_map = {
            'group_id': 'group_id',
            'group_access': 'group_access',
            'expires_at': 'expires_at'
        }

        self._group_id = group_id
        self._group_access = group_access
        self._expires_at = expires_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostV3ProjectsIdShareRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postV3ProjectsIdShare_request of this PostV3ProjectsIdShareRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this PostV3ProjectsIdShareRequest.

        The ID of a group

        :return: The group_id of this PostV3ProjectsIdShareRequest.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this PostV3ProjectsIdShareRequest.

        The ID of a group

        :param group_id: The group_id of this PostV3ProjectsIdShareRequest.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def group_access(self):
        """Gets the group_access of this PostV3ProjectsIdShareRequest.

        The group access level

        :return: The group_access of this PostV3ProjectsIdShareRequest.
        :rtype: int
        """
        return self._group_access

    @group_access.setter
    def group_access(self, group_access):
        """Sets the group_access of this PostV3ProjectsIdShareRequest.

        The group access level

        :param group_access: The group_access of this PostV3ProjectsIdShareRequest.
        :type group_access: int
        """
        allowed_values = [10, 20, 30, 40]  # noqa: E501
        if group_access not in allowed_values:
            raise ValueError(
                "Invalid value for `group_access` ({0}), must be one of {1}"
                .format(group_access, allowed_values)
            )

        self._group_access = group_access

    @property
    def expires_at(self):
        """Gets the expires_at of this PostV3ProjectsIdShareRequest.

        Share expiration date

        :return: The expires_at of this PostV3ProjectsIdShareRequest.
        :rtype: date
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this PostV3ProjectsIdShareRequest.

        Share expiration date

        :param expires_at: The expires_at of this PostV3ProjectsIdShareRequest.
        :type expires_at: date
        """

        self._expires_at = expires_at
