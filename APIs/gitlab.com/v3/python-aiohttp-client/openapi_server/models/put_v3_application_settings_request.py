# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ApplicationSettingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_branch_protection: int=None, default_project_visibility: int=None, default_snippet_visibility: int=None, default_group_visibility: int=None, restricted_visibility_levels: List[str]=None, import_sources: List[str]=None, disabled_oauth_sign_in_sources: List[str]=None, enabled_git_access_protocol: str=None, gravatar_enabled: bool=None, default_projects_limit: int=None, max_attachment_size: int=None, session_expire_delay: int=None, user_oauth_applications: bool=None, user_default_external: bool=None, signup_enabled: bool=None, send_user_confirmation_email: bool=None, domain_whitelist: str=None, domain_blacklist_enabled: bool=None, domain_blacklist: str=None, after_sign_up_text: str=None, signin_enabled: bool=None, require_two_factor_authentication: bool=None, two_factor_grace_period: int=None, home_page_url: str=None, after_sign_out_path: str=None, sign_in_text: str=None, help_page_text: str=None, shared_runners_enabled: bool=None, shared_runners_text: str=None, max_artifacts_size: int=None, container_registry_token_expire_delay: int=None, metrics_enabled: bool=None, metrics_host: str=None, metrics_port: int=None, metrics_pool_size: int=None, metrics_timeout: int=None, metrics_method_call_threshold: int=None, metrics_sample_interval: int=None, metrics_packet_size: int=None, sidekiq_throttling_enabled: bool=None, sidekiq_throttling_queus: List[str]=None, sidekiq_throttling_factor: float=None, recaptcha_enabled: bool=None, recaptcha_site_key: str=None, recaptcha_private_key: str=None, akismet_enabled: bool=None, akismet_api_key: str=None, admin_notification_email: str=None, sentry_enabled: bool=None, sentry_dsn: str=None, repository_storage: str=None, repository_checks_enabled: bool=None, koding_enabled: bool=None, koding_url: str=None, plantuml_enabled: bool=None, plantuml_url: str=None, version_check_enabled: bool=None, email_author_in_body: bool=None, html_emails_enabled: bool=None, housekeeping_enabled: bool=None, housekeeping_bitmaps_enabled: bool=None, housekeeping_incremental_repack_period: int=None, housekeeping_full_repack_period: int=None, housekeeping_gc_period: int=None):
        """PutV3ApplicationSettingsRequest - a model defined in OpenAPI

        :param default_branch_protection: The default_branch_protection of this PutV3ApplicationSettingsRequest.
        :param default_project_visibility: The default_project_visibility of this PutV3ApplicationSettingsRequest.
        :param default_snippet_visibility: The default_snippet_visibility of this PutV3ApplicationSettingsRequest.
        :param default_group_visibility: The default_group_visibility of this PutV3ApplicationSettingsRequest.
        :param restricted_visibility_levels: The restricted_visibility_levels of this PutV3ApplicationSettingsRequest.
        :param import_sources: The import_sources of this PutV3ApplicationSettingsRequest.
        :param disabled_oauth_sign_in_sources: The disabled_oauth_sign_in_sources of this PutV3ApplicationSettingsRequest.
        :param enabled_git_access_protocol: The enabled_git_access_protocol of this PutV3ApplicationSettingsRequest.
        :param gravatar_enabled: The gravatar_enabled of this PutV3ApplicationSettingsRequest.
        :param default_projects_limit: The default_projects_limit of this PutV3ApplicationSettingsRequest.
        :param max_attachment_size: The max_attachment_size of this PutV3ApplicationSettingsRequest.
        :param session_expire_delay: The session_expire_delay of this PutV3ApplicationSettingsRequest.
        :param user_oauth_applications: The user_oauth_applications of this PutV3ApplicationSettingsRequest.
        :param user_default_external: The user_default_external of this PutV3ApplicationSettingsRequest.
        :param signup_enabled: The signup_enabled of this PutV3ApplicationSettingsRequest.
        :param send_user_confirmation_email: The send_user_confirmation_email of this PutV3ApplicationSettingsRequest.
        :param domain_whitelist: The domain_whitelist of this PutV3ApplicationSettingsRequest.
        :param domain_blacklist_enabled: The domain_blacklist_enabled of this PutV3ApplicationSettingsRequest.
        :param domain_blacklist: The domain_blacklist of this PutV3ApplicationSettingsRequest.
        :param after_sign_up_text: The after_sign_up_text of this PutV3ApplicationSettingsRequest.
        :param signin_enabled: The signin_enabled of this PutV3ApplicationSettingsRequest.
        :param require_two_factor_authentication: The require_two_factor_authentication of this PutV3ApplicationSettingsRequest.
        :param two_factor_grace_period: The two_factor_grace_period of this PutV3ApplicationSettingsRequest.
        :param home_page_url: The home_page_url of this PutV3ApplicationSettingsRequest.
        :param after_sign_out_path: The after_sign_out_path of this PutV3ApplicationSettingsRequest.
        :param sign_in_text: The sign_in_text of this PutV3ApplicationSettingsRequest.
        :param help_page_text: The help_page_text of this PutV3ApplicationSettingsRequest.
        :param shared_runners_enabled: The shared_runners_enabled of this PutV3ApplicationSettingsRequest.
        :param shared_runners_text: The shared_runners_text of this PutV3ApplicationSettingsRequest.
        :param max_artifacts_size: The max_artifacts_size of this PutV3ApplicationSettingsRequest.
        :param container_registry_token_expire_delay: The container_registry_token_expire_delay of this PutV3ApplicationSettingsRequest.
        :param metrics_enabled: The metrics_enabled of this PutV3ApplicationSettingsRequest.
        :param metrics_host: The metrics_host of this PutV3ApplicationSettingsRequest.
        :param metrics_port: The metrics_port of this PutV3ApplicationSettingsRequest.
        :param metrics_pool_size: The metrics_pool_size of this PutV3ApplicationSettingsRequest.
        :param metrics_timeout: The metrics_timeout of this PutV3ApplicationSettingsRequest.
        :param metrics_method_call_threshold: The metrics_method_call_threshold of this PutV3ApplicationSettingsRequest.
        :param metrics_sample_interval: The metrics_sample_interval of this PutV3ApplicationSettingsRequest.
        :param metrics_packet_size: The metrics_packet_size of this PutV3ApplicationSettingsRequest.
        :param sidekiq_throttling_enabled: The sidekiq_throttling_enabled of this PutV3ApplicationSettingsRequest.
        :param sidekiq_throttling_queus: The sidekiq_throttling_queus of this PutV3ApplicationSettingsRequest.
        :param sidekiq_throttling_factor: The sidekiq_throttling_factor of this PutV3ApplicationSettingsRequest.
        :param recaptcha_enabled: The recaptcha_enabled of this PutV3ApplicationSettingsRequest.
        :param recaptcha_site_key: The recaptcha_site_key of this PutV3ApplicationSettingsRequest.
        :param recaptcha_private_key: The recaptcha_private_key of this PutV3ApplicationSettingsRequest.
        :param akismet_enabled: The akismet_enabled of this PutV3ApplicationSettingsRequest.
        :param akismet_api_key: The akismet_api_key of this PutV3ApplicationSettingsRequest.
        :param admin_notification_email: The admin_notification_email of this PutV3ApplicationSettingsRequest.
        :param sentry_enabled: The sentry_enabled of this PutV3ApplicationSettingsRequest.
        :param sentry_dsn: The sentry_dsn of this PutV3ApplicationSettingsRequest.
        :param repository_storage: The repository_storage of this PutV3ApplicationSettingsRequest.
        :param repository_checks_enabled: The repository_checks_enabled of this PutV3ApplicationSettingsRequest.
        :param koding_enabled: The koding_enabled of this PutV3ApplicationSettingsRequest.
        :param koding_url: The koding_url of this PutV3ApplicationSettingsRequest.
        :param plantuml_enabled: The plantuml_enabled of this PutV3ApplicationSettingsRequest.
        :param plantuml_url: The plantuml_url of this PutV3ApplicationSettingsRequest.
        :param version_check_enabled: The version_check_enabled of this PutV3ApplicationSettingsRequest.
        :param email_author_in_body: The email_author_in_body of this PutV3ApplicationSettingsRequest.
        :param html_emails_enabled: The html_emails_enabled of this PutV3ApplicationSettingsRequest.
        :param housekeeping_enabled: The housekeeping_enabled of this PutV3ApplicationSettingsRequest.
        :param housekeeping_bitmaps_enabled: The housekeeping_bitmaps_enabled of this PutV3ApplicationSettingsRequest.
        :param housekeeping_incremental_repack_period: The housekeeping_incremental_repack_period of this PutV3ApplicationSettingsRequest.
        :param housekeeping_full_repack_period: The housekeeping_full_repack_period of this PutV3ApplicationSettingsRequest.
        :param housekeeping_gc_period: The housekeeping_gc_period of this PutV3ApplicationSettingsRequest.
        """
        self.openapi_types = {
            'default_branch_protection': int,
            'default_project_visibility': int,
            'default_snippet_visibility': int,
            'default_group_visibility': int,
            'restricted_visibility_levels': List[str],
            'import_sources': List[str],
            'disabled_oauth_sign_in_sources': List[str],
            'enabled_git_access_protocol': str,
            'gravatar_enabled': bool,
            'default_projects_limit': int,
            'max_attachment_size': int,
            'session_expire_delay': int,
            'user_oauth_applications': bool,
            'user_default_external': bool,
            'signup_enabled': bool,
            'send_user_confirmation_email': bool,
            'domain_whitelist': str,
            'domain_blacklist_enabled': bool,
            'domain_blacklist': str,
            'after_sign_up_text': str,
            'signin_enabled': bool,
            'require_two_factor_authentication': bool,
            'two_factor_grace_period': int,
            'home_page_url': str,
            'after_sign_out_path': str,
            'sign_in_text': str,
            'help_page_text': str,
            'shared_runners_enabled': bool,
            'shared_runners_text': str,
            'max_artifacts_size': int,
            'container_registry_token_expire_delay': int,
            'metrics_enabled': bool,
            'metrics_host': str,
            'metrics_port': int,
            'metrics_pool_size': int,
            'metrics_timeout': int,
            'metrics_method_call_threshold': int,
            'metrics_sample_interval': int,
            'metrics_packet_size': int,
            'sidekiq_throttling_enabled': bool,
            'sidekiq_throttling_queus': List[str],
            'sidekiq_throttling_factor': float,
            'recaptcha_enabled': bool,
            'recaptcha_site_key': str,
            'recaptcha_private_key': str,
            'akismet_enabled': bool,
            'akismet_api_key': str,
            'admin_notification_email': str,
            'sentry_enabled': bool,
            'sentry_dsn': str,
            'repository_storage': str,
            'repository_checks_enabled': bool,
            'koding_enabled': bool,
            'koding_url': str,
            'plantuml_enabled': bool,
            'plantuml_url': str,
            'version_check_enabled': bool,
            'email_author_in_body': bool,
            'html_emails_enabled': bool,
            'housekeeping_enabled': bool,
            'housekeeping_bitmaps_enabled': bool,
            'housekeeping_incremental_repack_period': int,
            'housekeeping_full_repack_period': int,
            'housekeeping_gc_period': int
        }

        self.attribute_map = {
            'default_branch_protection': 'default_branch_protection',
            'default_project_visibility': 'default_project_visibility',
            'default_snippet_visibility': 'default_snippet_visibility',
            'default_group_visibility': 'default_group_visibility',
            'restricted_visibility_levels': 'restricted_visibility_levels',
            'import_sources': 'import_sources',
            'disabled_oauth_sign_in_sources': 'disabled_oauth_sign_in_sources',
            'enabled_git_access_protocol': 'enabled_git_access_protocol',
            'gravatar_enabled': 'gravatar_enabled',
            'default_projects_limit': 'default_projects_limit',
            'max_attachment_size': 'max_attachment_size',
            'session_expire_delay': 'session_expire_delay',
            'user_oauth_applications': 'user_oauth_applications',
            'user_default_external': 'user_default_external',
            'signup_enabled': 'signup_enabled',
            'send_user_confirmation_email': 'send_user_confirmation_email',
            'domain_whitelist': 'domain_whitelist',
            'domain_blacklist_enabled': 'domain_blacklist_enabled',
            'domain_blacklist': 'domain_blacklist',
            'after_sign_up_text': 'after_sign_up_text',
            'signin_enabled': 'signin_enabled',
            'require_two_factor_authentication': 'require_two_factor_authentication',
            'two_factor_grace_period': 'two_factor_grace_period',
            'home_page_url': 'home_page_url',
            'after_sign_out_path': 'after_sign_out_path',
            'sign_in_text': 'sign_in_text',
            'help_page_text': 'help_page_text',
            'shared_runners_enabled': 'shared_runners_enabled',
            'shared_runners_text': 'shared_runners_text',
            'max_artifacts_size': 'max_artifacts_size',
            'container_registry_token_expire_delay': 'container_registry_token_expire_delay',
            'metrics_enabled': 'metrics_enabled',
            'metrics_host': 'metrics_host',
            'metrics_port': 'metrics_port',
            'metrics_pool_size': 'metrics_pool_size',
            'metrics_timeout': 'metrics_timeout',
            'metrics_method_call_threshold': 'metrics_method_call_threshold',
            'metrics_sample_interval': 'metrics_sample_interval',
            'metrics_packet_size': 'metrics_packet_size',
            'sidekiq_throttling_enabled': 'sidekiq_throttling_enabled',
            'sidekiq_throttling_queus': 'sidekiq_throttling_queus',
            'sidekiq_throttling_factor': 'sidekiq_throttling_factor',
            'recaptcha_enabled': 'recaptcha_enabled',
            'recaptcha_site_key': 'recaptcha_site_key',
            'recaptcha_private_key': 'recaptcha_private_key',
            'akismet_enabled': 'akismet_enabled',
            'akismet_api_key': 'akismet_api_key',
            'admin_notification_email': 'admin_notification_email',
            'sentry_enabled': 'sentry_enabled',
            'sentry_dsn': 'sentry_dsn',
            'repository_storage': 'repository_storage',
            'repository_checks_enabled': 'repository_checks_enabled',
            'koding_enabled': 'koding_enabled',
            'koding_url': 'koding_url',
            'plantuml_enabled': 'plantuml_enabled',
            'plantuml_url': 'plantuml_url',
            'version_check_enabled': 'version_check_enabled',
            'email_author_in_body': 'email_author_in_body',
            'html_emails_enabled': 'html_emails_enabled',
            'housekeeping_enabled': 'housekeeping_enabled',
            'housekeeping_bitmaps_enabled': 'housekeeping_bitmaps_enabled',
            'housekeeping_incremental_repack_period': 'housekeeping_incremental_repack_period',
            'housekeeping_full_repack_period': 'housekeeping_full_repack_period',
            'housekeeping_gc_period': 'housekeeping_gc_period'
        }

        self._default_branch_protection = default_branch_protection
        self._default_project_visibility = default_project_visibility
        self._default_snippet_visibility = default_snippet_visibility
        self._default_group_visibility = default_group_visibility
        self._restricted_visibility_levels = restricted_visibility_levels
        self._import_sources = import_sources
        self._disabled_oauth_sign_in_sources = disabled_oauth_sign_in_sources
        self._enabled_git_access_protocol = enabled_git_access_protocol
        self._gravatar_enabled = gravatar_enabled
        self._default_projects_limit = default_projects_limit
        self._max_attachment_size = max_attachment_size
        self._session_expire_delay = session_expire_delay
        self._user_oauth_applications = user_oauth_applications
        self._user_default_external = user_default_external
        self._signup_enabled = signup_enabled
        self._send_user_confirmation_email = send_user_confirmation_email
        self._domain_whitelist = domain_whitelist
        self._domain_blacklist_enabled = domain_blacklist_enabled
        self._domain_blacklist = domain_blacklist
        self._after_sign_up_text = after_sign_up_text
        self._signin_enabled = signin_enabled
        self._require_two_factor_authentication = require_two_factor_authentication
        self._two_factor_grace_period = two_factor_grace_period
        self._home_page_url = home_page_url
        self._after_sign_out_path = after_sign_out_path
        self._sign_in_text = sign_in_text
        self._help_page_text = help_page_text
        self._shared_runners_enabled = shared_runners_enabled
        self._shared_runners_text = shared_runners_text
        self._max_artifacts_size = max_artifacts_size
        self._container_registry_token_expire_delay = container_registry_token_expire_delay
        self._metrics_enabled = metrics_enabled
        self._metrics_host = metrics_host
        self._metrics_port = metrics_port
        self._metrics_pool_size = metrics_pool_size
        self._metrics_timeout = metrics_timeout
        self._metrics_method_call_threshold = metrics_method_call_threshold
        self._metrics_sample_interval = metrics_sample_interval
        self._metrics_packet_size = metrics_packet_size
        self._sidekiq_throttling_enabled = sidekiq_throttling_enabled
        self._sidekiq_throttling_queus = sidekiq_throttling_queus
        self._sidekiq_throttling_factor = sidekiq_throttling_factor
        self._recaptcha_enabled = recaptcha_enabled
        self._recaptcha_site_key = recaptcha_site_key
        self._recaptcha_private_key = recaptcha_private_key
        self._akismet_enabled = akismet_enabled
        self._akismet_api_key = akismet_api_key
        self._admin_notification_email = admin_notification_email
        self._sentry_enabled = sentry_enabled
        self._sentry_dsn = sentry_dsn
        self._repository_storage = repository_storage
        self._repository_checks_enabled = repository_checks_enabled
        self._koding_enabled = koding_enabled
        self._koding_url = koding_url
        self._plantuml_enabled = plantuml_enabled
        self._plantuml_url = plantuml_url
        self._version_check_enabled = version_check_enabled
        self._email_author_in_body = email_author_in_body
        self._html_emails_enabled = html_emails_enabled
        self._housekeeping_enabled = housekeeping_enabled
        self._housekeeping_bitmaps_enabled = housekeeping_bitmaps_enabled
        self._housekeeping_incremental_repack_period = housekeeping_incremental_repack_period
        self._housekeeping_full_repack_period = housekeeping_full_repack_period
        self._housekeeping_gc_period = housekeeping_gc_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ApplicationSettingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ApplicationSettings_request of this PutV3ApplicationSettingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_branch_protection(self):
        """Gets the default_branch_protection of this PutV3ApplicationSettingsRequest.

        Determine if developers can push to master

        :return: The default_branch_protection of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._default_branch_protection

    @default_branch_protection.setter
    def default_branch_protection(self, default_branch_protection):
        """Sets the default_branch_protection of this PutV3ApplicationSettingsRequest.

        Determine if developers can push to master

        :param default_branch_protection: The default_branch_protection of this PutV3ApplicationSettingsRequest.
        :type default_branch_protection: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if default_branch_protection not in allowed_values:
            raise ValueError(
                "Invalid value for `default_branch_protection` ({0}), must be one of {1}"
                .format(default_branch_protection, allowed_values)
            )

        self._default_branch_protection = default_branch_protection

    @property
    def default_project_visibility(self):
        """Gets the default_project_visibility of this PutV3ApplicationSettingsRequest.

        The default project visibility

        :return: The default_project_visibility of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._default_project_visibility

    @default_project_visibility.setter
    def default_project_visibility(self, default_project_visibility):
        """Sets the default_project_visibility of this PutV3ApplicationSettingsRequest.

        The default project visibility

        :param default_project_visibility: The default_project_visibility of this PutV3ApplicationSettingsRequest.
        :type default_project_visibility: int
        """
        allowed_values = [0, 10, 20]  # noqa: E501
        if default_project_visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `default_project_visibility` ({0}), must be one of {1}"
                .format(default_project_visibility, allowed_values)
            )

        self._default_project_visibility = default_project_visibility

    @property
    def default_snippet_visibility(self):
        """Gets the default_snippet_visibility of this PutV3ApplicationSettingsRequest.

        The default snippet visibility

        :return: The default_snippet_visibility of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._default_snippet_visibility

    @default_snippet_visibility.setter
    def default_snippet_visibility(self, default_snippet_visibility):
        """Sets the default_snippet_visibility of this PutV3ApplicationSettingsRequest.

        The default snippet visibility

        :param default_snippet_visibility: The default_snippet_visibility of this PutV3ApplicationSettingsRequest.
        :type default_snippet_visibility: int
        """
        allowed_values = [0, 10, 20]  # noqa: E501
        if default_snippet_visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `default_snippet_visibility` ({0}), must be one of {1}"
                .format(default_snippet_visibility, allowed_values)
            )

        self._default_snippet_visibility = default_snippet_visibility

    @property
    def default_group_visibility(self):
        """Gets the default_group_visibility of this PutV3ApplicationSettingsRequest.

        The default group visibility

        :return: The default_group_visibility of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._default_group_visibility

    @default_group_visibility.setter
    def default_group_visibility(self, default_group_visibility):
        """Sets the default_group_visibility of this PutV3ApplicationSettingsRequest.

        The default group visibility

        :param default_group_visibility: The default_group_visibility of this PutV3ApplicationSettingsRequest.
        :type default_group_visibility: int
        """
        allowed_values = [0, 10, 20]  # noqa: E501
        if default_group_visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `default_group_visibility` ({0}), must be one of {1}"
                .format(default_group_visibility, allowed_values)
            )

        self._default_group_visibility = default_group_visibility

    @property
    def restricted_visibility_levels(self):
        """Gets the restricted_visibility_levels of this PutV3ApplicationSettingsRequest.

        Selected levels cannot be used by non-admin users for projects or snippets. If the public level is restricted, user profiles are only visible to logged in users.

        :return: The restricted_visibility_levels of this PutV3ApplicationSettingsRequest.
        :rtype: List[str]
        """
        return self._restricted_visibility_levels

    @restricted_visibility_levels.setter
    def restricted_visibility_levels(self, restricted_visibility_levels):
        """Sets the restricted_visibility_levels of this PutV3ApplicationSettingsRequest.

        Selected levels cannot be used by non-admin users for projects or snippets. If the public level is restricted, user profiles are only visible to logged in users.

        :param restricted_visibility_levels: The restricted_visibility_levels of this PutV3ApplicationSettingsRequest.
        :type restricted_visibility_levels: List[str]
        """

        self._restricted_visibility_levels = restricted_visibility_levels

    @property
    def import_sources(self):
        """Gets the import_sources of this PutV3ApplicationSettingsRequest.

        Enabled sources for code import during project creation. OmniAuth must be configured for GitHub, Bitbucket, and GitLab.com

        :return: The import_sources of this PutV3ApplicationSettingsRequest.
        :rtype: List[str]
        """
        return self._import_sources

    @import_sources.setter
    def import_sources(self, import_sources):
        """Sets the import_sources of this PutV3ApplicationSettingsRequest.

        Enabled sources for code import during project creation. OmniAuth must be configured for GitHub, Bitbucket, and GitLab.com

        :param import_sources: The import_sources of this PutV3ApplicationSettingsRequest.
        :type import_sources: List[str]
        """
        allowed_values = ["github", "bitbucket", "gitlab", "google_code", "fogbugz", "git", "gitlab_project"]  # noqa: E501
        if not set(import_sources).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `import_sources` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(import_sources) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._import_sources = import_sources

    @property
    def disabled_oauth_sign_in_sources(self):
        """Gets the disabled_oauth_sign_in_sources of this PutV3ApplicationSettingsRequest.

        Disable certain OAuth sign-in sources

        :return: The disabled_oauth_sign_in_sources of this PutV3ApplicationSettingsRequest.
        :rtype: List[str]
        """
        return self._disabled_oauth_sign_in_sources

    @disabled_oauth_sign_in_sources.setter
    def disabled_oauth_sign_in_sources(self, disabled_oauth_sign_in_sources):
        """Sets the disabled_oauth_sign_in_sources of this PutV3ApplicationSettingsRequest.

        Disable certain OAuth sign-in sources

        :param disabled_oauth_sign_in_sources: The disabled_oauth_sign_in_sources of this PutV3ApplicationSettingsRequest.
        :type disabled_oauth_sign_in_sources: List[str]
        """

        self._disabled_oauth_sign_in_sources = disabled_oauth_sign_in_sources

    @property
    def enabled_git_access_protocol(self):
        """Gets the enabled_git_access_protocol of this PutV3ApplicationSettingsRequest.

        Allow only the selected protocols to be used for Git access.

        :return: The enabled_git_access_protocol of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._enabled_git_access_protocol

    @enabled_git_access_protocol.setter
    def enabled_git_access_protocol(self, enabled_git_access_protocol):
        """Sets the enabled_git_access_protocol of this PutV3ApplicationSettingsRequest.

        Allow only the selected protocols to be used for Git access.

        :param enabled_git_access_protocol: The enabled_git_access_protocol of this PutV3ApplicationSettingsRequest.
        :type enabled_git_access_protocol: str
        """
        allowed_values = ["ssh", "http", "nil"]  # noqa: E501
        if enabled_git_access_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `enabled_git_access_protocol` ({0}), must be one of {1}"
                .format(enabled_git_access_protocol, allowed_values)
            )

        self._enabled_git_access_protocol = enabled_git_access_protocol

    @property
    def gravatar_enabled(self):
        """Gets the gravatar_enabled of this PutV3ApplicationSettingsRequest.

        Flag indicating if the Gravatar service is enabled

        :return: The gravatar_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._gravatar_enabled

    @gravatar_enabled.setter
    def gravatar_enabled(self, gravatar_enabled):
        """Sets the gravatar_enabled of this PutV3ApplicationSettingsRequest.

        Flag indicating if the Gravatar service is enabled

        :param gravatar_enabled: The gravatar_enabled of this PutV3ApplicationSettingsRequest.
        :type gravatar_enabled: bool
        """

        self._gravatar_enabled = gravatar_enabled

    @property
    def default_projects_limit(self):
        """Gets the default_projects_limit of this PutV3ApplicationSettingsRequest.

        The maximum number of personal projects

        :return: The default_projects_limit of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._default_projects_limit

    @default_projects_limit.setter
    def default_projects_limit(self, default_projects_limit):
        """Sets the default_projects_limit of this PutV3ApplicationSettingsRequest.

        The maximum number of personal projects

        :param default_projects_limit: The default_projects_limit of this PutV3ApplicationSettingsRequest.
        :type default_projects_limit: int
        """

        self._default_projects_limit = default_projects_limit

    @property
    def max_attachment_size(self):
        """Gets the max_attachment_size of this PutV3ApplicationSettingsRequest.

        Maximum attachment size in MB

        :return: The max_attachment_size of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._max_attachment_size

    @max_attachment_size.setter
    def max_attachment_size(self, max_attachment_size):
        """Sets the max_attachment_size of this PutV3ApplicationSettingsRequest.

        Maximum attachment size in MB

        :param max_attachment_size: The max_attachment_size of this PutV3ApplicationSettingsRequest.
        :type max_attachment_size: int
        """

        self._max_attachment_size = max_attachment_size

    @property
    def session_expire_delay(self):
        """Gets the session_expire_delay of this PutV3ApplicationSettingsRequest.

        Session duration in minutes. GitLab restart is required to apply changes.

        :return: The session_expire_delay of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._session_expire_delay

    @session_expire_delay.setter
    def session_expire_delay(self, session_expire_delay):
        """Sets the session_expire_delay of this PutV3ApplicationSettingsRequest.

        Session duration in minutes. GitLab restart is required to apply changes.

        :param session_expire_delay: The session_expire_delay of this PutV3ApplicationSettingsRequest.
        :type session_expire_delay: int
        """

        self._session_expire_delay = session_expire_delay

    @property
    def user_oauth_applications(self):
        """Gets the user_oauth_applications of this PutV3ApplicationSettingsRequest.

        Allow users to register any application to use GitLab as an OAuth provider

        :return: The user_oauth_applications of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._user_oauth_applications

    @user_oauth_applications.setter
    def user_oauth_applications(self, user_oauth_applications):
        """Sets the user_oauth_applications of this PutV3ApplicationSettingsRequest.

        Allow users to register any application to use GitLab as an OAuth provider

        :param user_oauth_applications: The user_oauth_applications of this PutV3ApplicationSettingsRequest.
        :type user_oauth_applications: bool
        """

        self._user_oauth_applications = user_oauth_applications

    @property
    def user_default_external(self):
        """Gets the user_default_external of this PutV3ApplicationSettingsRequest.

        Newly registered users will by default be external

        :return: The user_default_external of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._user_default_external

    @user_default_external.setter
    def user_default_external(self, user_default_external):
        """Sets the user_default_external of this PutV3ApplicationSettingsRequest.

        Newly registered users will by default be external

        :param user_default_external: The user_default_external of this PutV3ApplicationSettingsRequest.
        :type user_default_external: bool
        """

        self._user_default_external = user_default_external

    @property
    def signup_enabled(self):
        """Gets the signup_enabled of this PutV3ApplicationSettingsRequest.

        Flag indicating if sign up is enabled

        :return: The signup_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._signup_enabled

    @signup_enabled.setter
    def signup_enabled(self, signup_enabled):
        """Sets the signup_enabled of this PutV3ApplicationSettingsRequest.

        Flag indicating if sign up is enabled

        :param signup_enabled: The signup_enabled of this PutV3ApplicationSettingsRequest.
        :type signup_enabled: bool
        """

        self._signup_enabled = signup_enabled

    @property
    def send_user_confirmation_email(self):
        """Gets the send_user_confirmation_email of this PutV3ApplicationSettingsRequest.

        Send confirmation email on sign-up

        :return: The send_user_confirmation_email of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._send_user_confirmation_email

    @send_user_confirmation_email.setter
    def send_user_confirmation_email(self, send_user_confirmation_email):
        """Sets the send_user_confirmation_email of this PutV3ApplicationSettingsRequest.

        Send confirmation email on sign-up

        :param send_user_confirmation_email: The send_user_confirmation_email of this PutV3ApplicationSettingsRequest.
        :type send_user_confirmation_email: bool
        """

        self._send_user_confirmation_email = send_user_confirmation_email

    @property
    def domain_whitelist(self):
        """Gets the domain_whitelist of this PutV3ApplicationSettingsRequest.

        ONLY users with e-mail addresses that match these domain(s) will be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com

        :return: The domain_whitelist of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._domain_whitelist

    @domain_whitelist.setter
    def domain_whitelist(self, domain_whitelist):
        """Sets the domain_whitelist of this PutV3ApplicationSettingsRequest.

        ONLY users with e-mail addresses that match these domain(s) will be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com

        :param domain_whitelist: The domain_whitelist of this PutV3ApplicationSettingsRequest.
        :type domain_whitelist: str
        """

        self._domain_whitelist = domain_whitelist

    @property
    def domain_blacklist_enabled(self):
        """Gets the domain_blacklist_enabled of this PutV3ApplicationSettingsRequest.

        Enable domain blacklist for sign ups

        :return: The domain_blacklist_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._domain_blacklist_enabled

    @domain_blacklist_enabled.setter
    def domain_blacklist_enabled(self, domain_blacklist_enabled):
        """Sets the domain_blacklist_enabled of this PutV3ApplicationSettingsRequest.

        Enable domain blacklist for sign ups

        :param domain_blacklist_enabled: The domain_blacklist_enabled of this PutV3ApplicationSettingsRequest.
        :type domain_blacklist_enabled: bool
        """

        self._domain_blacklist_enabled = domain_blacklist_enabled

    @property
    def domain_blacklist(self):
        """Gets the domain_blacklist of this PutV3ApplicationSettingsRequest.

        Users with e-mail addresses that match these domain(s) will NOT be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com

        :return: The domain_blacklist of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._domain_blacklist

    @domain_blacklist.setter
    def domain_blacklist(self, domain_blacklist):
        """Sets the domain_blacklist of this PutV3ApplicationSettingsRequest.

        Users with e-mail addresses that match these domain(s) will NOT be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com

        :param domain_blacklist: The domain_blacklist of this PutV3ApplicationSettingsRequest.
        :type domain_blacklist: str
        """
        if domain_blacklist is None:
            raise ValueError("Invalid value for `domain_blacklist`, must not be `None`")

        self._domain_blacklist = domain_blacklist

    @property
    def after_sign_up_text(self):
        """Gets the after_sign_up_text of this PutV3ApplicationSettingsRequest.

        Text shown after sign up

        :return: The after_sign_up_text of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._after_sign_up_text

    @after_sign_up_text.setter
    def after_sign_up_text(self, after_sign_up_text):
        """Sets the after_sign_up_text of this PutV3ApplicationSettingsRequest.

        Text shown after sign up

        :param after_sign_up_text: The after_sign_up_text of this PutV3ApplicationSettingsRequest.
        :type after_sign_up_text: str
        """

        self._after_sign_up_text = after_sign_up_text

    @property
    def signin_enabled(self):
        """Gets the signin_enabled of this PutV3ApplicationSettingsRequest.

        Flag indicating if sign in is enabled

        :return: The signin_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._signin_enabled

    @signin_enabled.setter
    def signin_enabled(self, signin_enabled):
        """Sets the signin_enabled of this PutV3ApplicationSettingsRequest.

        Flag indicating if sign in is enabled

        :param signin_enabled: The signin_enabled of this PutV3ApplicationSettingsRequest.
        :type signin_enabled: bool
        """

        self._signin_enabled = signin_enabled

    @property
    def require_two_factor_authentication(self):
        """Gets the require_two_factor_authentication of this PutV3ApplicationSettingsRequest.

        Require all users to setup Two-factor authentication

        :return: The require_two_factor_authentication of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._require_two_factor_authentication

    @require_two_factor_authentication.setter
    def require_two_factor_authentication(self, require_two_factor_authentication):
        """Sets the require_two_factor_authentication of this PutV3ApplicationSettingsRequest.

        Require all users to setup Two-factor authentication

        :param require_two_factor_authentication: The require_two_factor_authentication of this PutV3ApplicationSettingsRequest.
        :type require_two_factor_authentication: bool
        """

        self._require_two_factor_authentication = require_two_factor_authentication

    @property
    def two_factor_grace_period(self):
        """Gets the two_factor_grace_period of this PutV3ApplicationSettingsRequest.

        Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication

        :return: The two_factor_grace_period of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._two_factor_grace_period

    @two_factor_grace_period.setter
    def two_factor_grace_period(self, two_factor_grace_period):
        """Sets the two_factor_grace_period of this PutV3ApplicationSettingsRequest.

        Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication

        :param two_factor_grace_period: The two_factor_grace_period of this PutV3ApplicationSettingsRequest.
        :type two_factor_grace_period: int
        """
        if two_factor_grace_period is None:
            raise ValueError("Invalid value for `two_factor_grace_period`, must not be `None`")

        self._two_factor_grace_period = two_factor_grace_period

    @property
    def home_page_url(self):
        """Gets the home_page_url of this PutV3ApplicationSettingsRequest.

        We will redirect non-logged in users to this page

        :return: The home_page_url of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._home_page_url

    @home_page_url.setter
    def home_page_url(self, home_page_url):
        """Sets the home_page_url of this PutV3ApplicationSettingsRequest.

        We will redirect non-logged in users to this page

        :param home_page_url: The home_page_url of this PutV3ApplicationSettingsRequest.
        :type home_page_url: str
        """

        self._home_page_url = home_page_url

    @property
    def after_sign_out_path(self):
        """Gets the after_sign_out_path of this PutV3ApplicationSettingsRequest.

        We will redirect users to this page after they sign out

        :return: The after_sign_out_path of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._after_sign_out_path

    @after_sign_out_path.setter
    def after_sign_out_path(self, after_sign_out_path):
        """Sets the after_sign_out_path of this PutV3ApplicationSettingsRequest.

        We will redirect users to this page after they sign out

        :param after_sign_out_path: The after_sign_out_path of this PutV3ApplicationSettingsRequest.
        :type after_sign_out_path: str
        """

        self._after_sign_out_path = after_sign_out_path

    @property
    def sign_in_text(self):
        """Gets the sign_in_text of this PutV3ApplicationSettingsRequest.

        The sign in text of the GitLab application

        :return: The sign_in_text of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._sign_in_text

    @sign_in_text.setter
    def sign_in_text(self, sign_in_text):
        """Sets the sign_in_text of this PutV3ApplicationSettingsRequest.

        The sign in text of the GitLab application

        :param sign_in_text: The sign_in_text of this PutV3ApplicationSettingsRequest.
        :type sign_in_text: str
        """

        self._sign_in_text = sign_in_text

    @property
    def help_page_text(self):
        """Gets the help_page_text of this PutV3ApplicationSettingsRequest.

        Custom text displayed on the help page

        :return: The help_page_text of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._help_page_text

    @help_page_text.setter
    def help_page_text(self, help_page_text):
        """Sets the help_page_text of this PutV3ApplicationSettingsRequest.

        Custom text displayed on the help page

        :param help_page_text: The help_page_text of this PutV3ApplicationSettingsRequest.
        :type help_page_text: str
        """

        self._help_page_text = help_page_text

    @property
    def shared_runners_enabled(self):
        """Gets the shared_runners_enabled of this PutV3ApplicationSettingsRequest.

        Enable shared runners for new projects

        :return: The shared_runners_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._shared_runners_enabled

    @shared_runners_enabled.setter
    def shared_runners_enabled(self, shared_runners_enabled):
        """Sets the shared_runners_enabled of this PutV3ApplicationSettingsRequest.

        Enable shared runners for new projects

        :param shared_runners_enabled: The shared_runners_enabled of this PutV3ApplicationSettingsRequest.
        :type shared_runners_enabled: bool
        """

        self._shared_runners_enabled = shared_runners_enabled

    @property
    def shared_runners_text(self):
        """Gets the shared_runners_text of this PutV3ApplicationSettingsRequest.

        Shared runners text 

        :return: The shared_runners_text of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._shared_runners_text

    @shared_runners_text.setter
    def shared_runners_text(self, shared_runners_text):
        """Sets the shared_runners_text of this PutV3ApplicationSettingsRequest.

        Shared runners text 

        :param shared_runners_text: The shared_runners_text of this PutV3ApplicationSettingsRequest.
        :type shared_runners_text: str
        """
        if shared_runners_text is None:
            raise ValueError("Invalid value for `shared_runners_text`, must not be `None`")

        self._shared_runners_text = shared_runners_text

    @property
    def max_artifacts_size(self):
        """Gets the max_artifacts_size of this PutV3ApplicationSettingsRequest.

        Set the maximum file size each build's artifacts can have

        :return: The max_artifacts_size of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._max_artifacts_size

    @max_artifacts_size.setter
    def max_artifacts_size(self, max_artifacts_size):
        """Sets the max_artifacts_size of this PutV3ApplicationSettingsRequest.

        Set the maximum file size each build's artifacts can have

        :param max_artifacts_size: The max_artifacts_size of this PutV3ApplicationSettingsRequest.
        :type max_artifacts_size: int
        """

        self._max_artifacts_size = max_artifacts_size

    @property
    def container_registry_token_expire_delay(self):
        """Gets the container_registry_token_expire_delay of this PutV3ApplicationSettingsRequest.

        Authorization token duration (minutes)

        :return: The container_registry_token_expire_delay of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._container_registry_token_expire_delay

    @container_registry_token_expire_delay.setter
    def container_registry_token_expire_delay(self, container_registry_token_expire_delay):
        """Sets the container_registry_token_expire_delay of this PutV3ApplicationSettingsRequest.

        Authorization token duration (minutes)

        :param container_registry_token_expire_delay: The container_registry_token_expire_delay of this PutV3ApplicationSettingsRequest.
        :type container_registry_token_expire_delay: int
        """

        self._container_registry_token_expire_delay = container_registry_token_expire_delay

    @property
    def metrics_enabled(self):
        """Gets the metrics_enabled of this PutV3ApplicationSettingsRequest.

        Enable the InfluxDB metrics

        :return: The metrics_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._metrics_enabled

    @metrics_enabled.setter
    def metrics_enabled(self, metrics_enabled):
        """Sets the metrics_enabled of this PutV3ApplicationSettingsRequest.

        Enable the InfluxDB metrics

        :param metrics_enabled: The metrics_enabled of this PutV3ApplicationSettingsRequest.
        :type metrics_enabled: bool
        """

        self._metrics_enabled = metrics_enabled

    @property
    def metrics_host(self):
        """Gets the metrics_host of this PutV3ApplicationSettingsRequest.

        The InfluxDB host

        :return: The metrics_host of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._metrics_host

    @metrics_host.setter
    def metrics_host(self, metrics_host):
        """Sets the metrics_host of this PutV3ApplicationSettingsRequest.

        The InfluxDB host

        :param metrics_host: The metrics_host of this PutV3ApplicationSettingsRequest.
        :type metrics_host: str
        """
        if metrics_host is None:
            raise ValueError("Invalid value for `metrics_host`, must not be `None`")

        self._metrics_host = metrics_host

    @property
    def metrics_port(self):
        """Gets the metrics_port of this PutV3ApplicationSettingsRequest.

        The UDP port to use for connecting to InfluxDB

        :return: The metrics_port of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._metrics_port

    @metrics_port.setter
    def metrics_port(self, metrics_port):
        """Sets the metrics_port of this PutV3ApplicationSettingsRequest.

        The UDP port to use for connecting to InfluxDB

        :param metrics_port: The metrics_port of this PutV3ApplicationSettingsRequest.
        :type metrics_port: int
        """
        if metrics_port is None:
            raise ValueError("Invalid value for `metrics_port`, must not be `None`")

        self._metrics_port = metrics_port

    @property
    def metrics_pool_size(self):
        """Gets the metrics_pool_size of this PutV3ApplicationSettingsRequest.

        The amount of InfluxDB connections to open

        :return: The metrics_pool_size of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._metrics_pool_size

    @metrics_pool_size.setter
    def metrics_pool_size(self, metrics_pool_size):
        """Sets the metrics_pool_size of this PutV3ApplicationSettingsRequest.

        The amount of InfluxDB connections to open

        :param metrics_pool_size: The metrics_pool_size of this PutV3ApplicationSettingsRequest.
        :type metrics_pool_size: int
        """
        if metrics_pool_size is None:
            raise ValueError("Invalid value for `metrics_pool_size`, must not be `None`")

        self._metrics_pool_size = metrics_pool_size

    @property
    def metrics_timeout(self):
        """Gets the metrics_timeout of this PutV3ApplicationSettingsRequest.

        The amount of seconds after which an InfluxDB connection will time out

        :return: The metrics_timeout of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._metrics_timeout

    @metrics_timeout.setter
    def metrics_timeout(self, metrics_timeout):
        """Sets the metrics_timeout of this PutV3ApplicationSettingsRequest.

        The amount of seconds after which an InfluxDB connection will time out

        :param metrics_timeout: The metrics_timeout of this PutV3ApplicationSettingsRequest.
        :type metrics_timeout: int
        """
        if metrics_timeout is None:
            raise ValueError("Invalid value for `metrics_timeout`, must not be `None`")

        self._metrics_timeout = metrics_timeout

    @property
    def metrics_method_call_threshold(self):
        """Gets the metrics_method_call_threshold of this PutV3ApplicationSettingsRequest.

        A method call is only tracked when it takes longer to complete than the given amount of milliseconds.

        :return: The metrics_method_call_threshold of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._metrics_method_call_threshold

    @metrics_method_call_threshold.setter
    def metrics_method_call_threshold(self, metrics_method_call_threshold):
        """Sets the metrics_method_call_threshold of this PutV3ApplicationSettingsRequest.

        A method call is only tracked when it takes longer to complete than the given amount of milliseconds.

        :param metrics_method_call_threshold: The metrics_method_call_threshold of this PutV3ApplicationSettingsRequest.
        :type metrics_method_call_threshold: int
        """
        if metrics_method_call_threshold is None:
            raise ValueError("Invalid value for `metrics_method_call_threshold`, must not be `None`")

        self._metrics_method_call_threshold = metrics_method_call_threshold

    @property
    def metrics_sample_interval(self):
        """Gets the metrics_sample_interval of this PutV3ApplicationSettingsRequest.

        The sampling interval in seconds

        :return: The metrics_sample_interval of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._metrics_sample_interval

    @metrics_sample_interval.setter
    def metrics_sample_interval(self, metrics_sample_interval):
        """Sets the metrics_sample_interval of this PutV3ApplicationSettingsRequest.

        The sampling interval in seconds

        :param metrics_sample_interval: The metrics_sample_interval of this PutV3ApplicationSettingsRequest.
        :type metrics_sample_interval: int
        """
        if metrics_sample_interval is None:
            raise ValueError("Invalid value for `metrics_sample_interval`, must not be `None`")

        self._metrics_sample_interval = metrics_sample_interval

    @property
    def metrics_packet_size(self):
        """Gets the metrics_packet_size of this PutV3ApplicationSettingsRequest.

        The amount of points to store in a single UDP packet

        :return: The metrics_packet_size of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._metrics_packet_size

    @metrics_packet_size.setter
    def metrics_packet_size(self, metrics_packet_size):
        """Sets the metrics_packet_size of this PutV3ApplicationSettingsRequest.

        The amount of points to store in a single UDP packet

        :param metrics_packet_size: The metrics_packet_size of this PutV3ApplicationSettingsRequest.
        :type metrics_packet_size: int
        """
        if metrics_packet_size is None:
            raise ValueError("Invalid value for `metrics_packet_size`, must not be `None`")

        self._metrics_packet_size = metrics_packet_size

    @property
    def sidekiq_throttling_enabled(self):
        """Gets the sidekiq_throttling_enabled of this PutV3ApplicationSettingsRequest.

        Enable Sidekiq Job Throttling

        :return: The sidekiq_throttling_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._sidekiq_throttling_enabled

    @sidekiq_throttling_enabled.setter
    def sidekiq_throttling_enabled(self, sidekiq_throttling_enabled):
        """Sets the sidekiq_throttling_enabled of this PutV3ApplicationSettingsRequest.

        Enable Sidekiq Job Throttling

        :param sidekiq_throttling_enabled: The sidekiq_throttling_enabled of this PutV3ApplicationSettingsRequest.
        :type sidekiq_throttling_enabled: bool
        """

        self._sidekiq_throttling_enabled = sidekiq_throttling_enabled

    @property
    def sidekiq_throttling_queus(self):
        """Gets the sidekiq_throttling_queus of this PutV3ApplicationSettingsRequest.

        Choose which queues you wish to throttle

        :return: The sidekiq_throttling_queus of this PutV3ApplicationSettingsRequest.
        :rtype: List[str]
        """
        return self._sidekiq_throttling_queus

    @sidekiq_throttling_queus.setter
    def sidekiq_throttling_queus(self, sidekiq_throttling_queus):
        """Sets the sidekiq_throttling_queus of this PutV3ApplicationSettingsRequest.

        Choose which queues you wish to throttle

        :param sidekiq_throttling_queus: The sidekiq_throttling_queus of this PutV3ApplicationSettingsRequest.
        :type sidekiq_throttling_queus: List[str]
        """
        if sidekiq_throttling_queus is None:
            raise ValueError("Invalid value for `sidekiq_throttling_queus`, must not be `None`")

        self._sidekiq_throttling_queus = sidekiq_throttling_queus

    @property
    def sidekiq_throttling_factor(self):
        """Gets the sidekiq_throttling_factor of this PutV3ApplicationSettingsRequest.

        The factor by which the queues should be throttled. A value between 0.0 and 1.0, exclusive.

        :return: The sidekiq_throttling_factor of this PutV3ApplicationSettingsRequest.
        :rtype: float
        """
        return self._sidekiq_throttling_factor

    @sidekiq_throttling_factor.setter
    def sidekiq_throttling_factor(self, sidekiq_throttling_factor):
        """Sets the sidekiq_throttling_factor of this PutV3ApplicationSettingsRequest.

        The factor by which the queues should be throttled. A value between 0.0 and 1.0, exclusive.

        :param sidekiq_throttling_factor: The sidekiq_throttling_factor of this PutV3ApplicationSettingsRequest.
        :type sidekiq_throttling_factor: float
        """
        if sidekiq_throttling_factor is None:
            raise ValueError("Invalid value for `sidekiq_throttling_factor`, must not be `None`")

        self._sidekiq_throttling_factor = sidekiq_throttling_factor

    @property
    def recaptcha_enabled(self):
        """Gets the recaptcha_enabled of this PutV3ApplicationSettingsRequest.

        Helps prevent bots from creating accounts

        :return: The recaptcha_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._recaptcha_enabled

    @recaptcha_enabled.setter
    def recaptcha_enabled(self, recaptcha_enabled):
        """Sets the recaptcha_enabled of this PutV3ApplicationSettingsRequest.

        Helps prevent bots from creating accounts

        :param recaptcha_enabled: The recaptcha_enabled of this PutV3ApplicationSettingsRequest.
        :type recaptcha_enabled: bool
        """

        self._recaptcha_enabled = recaptcha_enabled

    @property
    def recaptcha_site_key(self):
        """Gets the recaptcha_site_key of this PutV3ApplicationSettingsRequest.

        Generate site key at http://www.google.com/recaptcha

        :return: The recaptcha_site_key of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._recaptcha_site_key

    @recaptcha_site_key.setter
    def recaptcha_site_key(self, recaptcha_site_key):
        """Sets the recaptcha_site_key of this PutV3ApplicationSettingsRequest.

        Generate site key at http://www.google.com/recaptcha

        :param recaptcha_site_key: The recaptcha_site_key of this PutV3ApplicationSettingsRequest.
        :type recaptcha_site_key: str
        """
        if recaptcha_site_key is None:
            raise ValueError("Invalid value for `recaptcha_site_key`, must not be `None`")

        self._recaptcha_site_key = recaptcha_site_key

    @property
    def recaptcha_private_key(self):
        """Gets the recaptcha_private_key of this PutV3ApplicationSettingsRequest.

        Generate private key at http://www.google.com/recaptcha

        :return: The recaptcha_private_key of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._recaptcha_private_key

    @recaptcha_private_key.setter
    def recaptcha_private_key(self, recaptcha_private_key):
        """Sets the recaptcha_private_key of this PutV3ApplicationSettingsRequest.

        Generate private key at http://www.google.com/recaptcha

        :param recaptcha_private_key: The recaptcha_private_key of this PutV3ApplicationSettingsRequest.
        :type recaptcha_private_key: str
        """
        if recaptcha_private_key is None:
            raise ValueError("Invalid value for `recaptcha_private_key`, must not be `None`")

        self._recaptcha_private_key = recaptcha_private_key

    @property
    def akismet_enabled(self):
        """Gets the akismet_enabled of this PutV3ApplicationSettingsRequest.

        Helps prevent bots from creating issues

        :return: The akismet_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._akismet_enabled

    @akismet_enabled.setter
    def akismet_enabled(self, akismet_enabled):
        """Sets the akismet_enabled of this PutV3ApplicationSettingsRequest.

        Helps prevent bots from creating issues

        :param akismet_enabled: The akismet_enabled of this PutV3ApplicationSettingsRequest.
        :type akismet_enabled: bool
        """

        self._akismet_enabled = akismet_enabled

    @property
    def akismet_api_key(self):
        """Gets the akismet_api_key of this PutV3ApplicationSettingsRequest.

        Generate API key at http://www.akismet.com

        :return: The akismet_api_key of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._akismet_api_key

    @akismet_api_key.setter
    def akismet_api_key(self, akismet_api_key):
        """Sets the akismet_api_key of this PutV3ApplicationSettingsRequest.

        Generate API key at http://www.akismet.com

        :param akismet_api_key: The akismet_api_key of this PutV3ApplicationSettingsRequest.
        :type akismet_api_key: str
        """
        if akismet_api_key is None:
            raise ValueError("Invalid value for `akismet_api_key`, must not be `None`")

        self._akismet_api_key = akismet_api_key

    @property
    def admin_notification_email(self):
        """Gets the admin_notification_email of this PutV3ApplicationSettingsRequest.

        Abuse reports will be sent to this address if it is set. Abuse reports are always available in the admin area.

        :return: The admin_notification_email of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._admin_notification_email

    @admin_notification_email.setter
    def admin_notification_email(self, admin_notification_email):
        """Sets the admin_notification_email of this PutV3ApplicationSettingsRequest.

        Abuse reports will be sent to this address if it is set. Abuse reports are always available in the admin area.

        :param admin_notification_email: The admin_notification_email of this PutV3ApplicationSettingsRequest.
        :type admin_notification_email: str
        """

        self._admin_notification_email = admin_notification_email

    @property
    def sentry_enabled(self):
        """Gets the sentry_enabled of this PutV3ApplicationSettingsRequest.

        Sentry is an error reporting and logging tool which is currently not shipped with GitLab, get it here: https://getsentry.com

        :return: The sentry_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._sentry_enabled

    @sentry_enabled.setter
    def sentry_enabled(self, sentry_enabled):
        """Sets the sentry_enabled of this PutV3ApplicationSettingsRequest.

        Sentry is an error reporting and logging tool which is currently not shipped with GitLab, get it here: https://getsentry.com

        :param sentry_enabled: The sentry_enabled of this PutV3ApplicationSettingsRequest.
        :type sentry_enabled: bool
        """

        self._sentry_enabled = sentry_enabled

    @property
    def sentry_dsn(self):
        """Gets the sentry_dsn of this PutV3ApplicationSettingsRequest.

        Sentry Data Source Name

        :return: The sentry_dsn of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._sentry_dsn

    @sentry_dsn.setter
    def sentry_dsn(self, sentry_dsn):
        """Sets the sentry_dsn of this PutV3ApplicationSettingsRequest.

        Sentry Data Source Name

        :param sentry_dsn: The sentry_dsn of this PutV3ApplicationSettingsRequest.
        :type sentry_dsn: str
        """
        if sentry_dsn is None:
            raise ValueError("Invalid value for `sentry_dsn`, must not be `None`")

        self._sentry_dsn = sentry_dsn

    @property
    def repository_storage(self):
        """Gets the repository_storage of this PutV3ApplicationSettingsRequest.

        Storage paths for new projects

        :return: The repository_storage of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._repository_storage

    @repository_storage.setter
    def repository_storage(self, repository_storage):
        """Sets the repository_storage of this PutV3ApplicationSettingsRequest.

        Storage paths for new projects

        :param repository_storage: The repository_storage of this PutV3ApplicationSettingsRequest.
        :type repository_storage: str
        """

        self._repository_storage = repository_storage

    @property
    def repository_checks_enabled(self):
        """Gets the repository_checks_enabled of this PutV3ApplicationSettingsRequest.

        GitLab will periodically run 'git fsck' in all project and wiki repositories to look for silent disk corruption issues.

        :return: The repository_checks_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._repository_checks_enabled

    @repository_checks_enabled.setter
    def repository_checks_enabled(self, repository_checks_enabled):
        """Sets the repository_checks_enabled of this PutV3ApplicationSettingsRequest.

        GitLab will periodically run 'git fsck' in all project and wiki repositories to look for silent disk corruption issues.

        :param repository_checks_enabled: The repository_checks_enabled of this PutV3ApplicationSettingsRequest.
        :type repository_checks_enabled: bool
        """

        self._repository_checks_enabled = repository_checks_enabled

    @property
    def koding_enabled(self):
        """Gets the koding_enabled of this PutV3ApplicationSettingsRequest.

        Enable Koding

        :return: The koding_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._koding_enabled

    @koding_enabled.setter
    def koding_enabled(self, koding_enabled):
        """Sets the koding_enabled of this PutV3ApplicationSettingsRequest.

        Enable Koding

        :param koding_enabled: The koding_enabled of this PutV3ApplicationSettingsRequest.
        :type koding_enabled: bool
        """

        self._koding_enabled = koding_enabled

    @property
    def koding_url(self):
        """Gets the koding_url of this PutV3ApplicationSettingsRequest.

        The Koding team URL

        :return: The koding_url of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._koding_url

    @koding_url.setter
    def koding_url(self, koding_url):
        """Sets the koding_url of this PutV3ApplicationSettingsRequest.

        The Koding team URL

        :param koding_url: The koding_url of this PutV3ApplicationSettingsRequest.
        :type koding_url: str
        """
        if koding_url is None:
            raise ValueError("Invalid value for `koding_url`, must not be `None`")

        self._koding_url = koding_url

    @property
    def plantuml_enabled(self):
        """Gets the plantuml_enabled of this PutV3ApplicationSettingsRequest.

        Enable PlantUML

        :return: The plantuml_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._plantuml_enabled

    @plantuml_enabled.setter
    def plantuml_enabled(self, plantuml_enabled):
        """Sets the plantuml_enabled of this PutV3ApplicationSettingsRequest.

        Enable PlantUML

        :param plantuml_enabled: The plantuml_enabled of this PutV3ApplicationSettingsRequest.
        :type plantuml_enabled: bool
        """

        self._plantuml_enabled = plantuml_enabled

    @property
    def plantuml_url(self):
        """Gets the plantuml_url of this PutV3ApplicationSettingsRequest.

        The PlantUML server URL

        :return: The plantuml_url of this PutV3ApplicationSettingsRequest.
        :rtype: str
        """
        return self._plantuml_url

    @plantuml_url.setter
    def plantuml_url(self, plantuml_url):
        """Sets the plantuml_url of this PutV3ApplicationSettingsRequest.

        The PlantUML server URL

        :param plantuml_url: The plantuml_url of this PutV3ApplicationSettingsRequest.
        :type plantuml_url: str
        """
        if plantuml_url is None:
            raise ValueError("Invalid value for `plantuml_url`, must not be `None`")

        self._plantuml_url = plantuml_url

    @property
    def version_check_enabled(self):
        """Gets the version_check_enabled of this PutV3ApplicationSettingsRequest.

        Let GitLab inform you when an update is available.

        :return: The version_check_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._version_check_enabled

    @version_check_enabled.setter
    def version_check_enabled(self, version_check_enabled):
        """Sets the version_check_enabled of this PutV3ApplicationSettingsRequest.

        Let GitLab inform you when an update is available.

        :param version_check_enabled: The version_check_enabled of this PutV3ApplicationSettingsRequest.
        :type version_check_enabled: bool
        """

        self._version_check_enabled = version_check_enabled

    @property
    def email_author_in_body(self):
        """Gets the email_author_in_body of this PutV3ApplicationSettingsRequest.

        Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.

        :return: The email_author_in_body of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._email_author_in_body

    @email_author_in_body.setter
    def email_author_in_body(self, email_author_in_body):
        """Sets the email_author_in_body of this PutV3ApplicationSettingsRequest.

        Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.

        :param email_author_in_body: The email_author_in_body of this PutV3ApplicationSettingsRequest.
        :type email_author_in_body: bool
        """

        self._email_author_in_body = email_author_in_body

    @property
    def html_emails_enabled(self):
        """Gets the html_emails_enabled of this PutV3ApplicationSettingsRequest.

        By default GitLab sends emails in HTML and plain text formats so mail clients can choose what format to use. Disable this option if you only want to send emails in plain text format.

        :return: The html_emails_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._html_emails_enabled

    @html_emails_enabled.setter
    def html_emails_enabled(self, html_emails_enabled):
        """Sets the html_emails_enabled of this PutV3ApplicationSettingsRequest.

        By default GitLab sends emails in HTML and plain text formats so mail clients can choose what format to use. Disable this option if you only want to send emails in plain text format.

        :param html_emails_enabled: The html_emails_enabled of this PutV3ApplicationSettingsRequest.
        :type html_emails_enabled: bool
        """

        self._html_emails_enabled = html_emails_enabled

    @property
    def housekeeping_enabled(self):
        """Gets the housekeeping_enabled of this PutV3ApplicationSettingsRequest.

        Enable automatic repository housekeeping (git repack, git gc)

        :return: The housekeeping_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._housekeeping_enabled

    @housekeeping_enabled.setter
    def housekeeping_enabled(self, housekeeping_enabled):
        """Sets the housekeeping_enabled of this PutV3ApplicationSettingsRequest.

        Enable automatic repository housekeeping (git repack, git gc)

        :param housekeeping_enabled: The housekeeping_enabled of this PutV3ApplicationSettingsRequest.
        :type housekeeping_enabled: bool
        """

        self._housekeeping_enabled = housekeeping_enabled

    @property
    def housekeeping_bitmaps_enabled(self):
        """Gets the housekeeping_bitmaps_enabled of this PutV3ApplicationSettingsRequest.

        Creating pack file bitmaps makes housekeeping take a little longer but bitmaps should accelerate 'git clone' performance.

        :return: The housekeeping_bitmaps_enabled of this PutV3ApplicationSettingsRequest.
        :rtype: bool
        """
        return self._housekeeping_bitmaps_enabled

    @housekeeping_bitmaps_enabled.setter
    def housekeeping_bitmaps_enabled(self, housekeeping_bitmaps_enabled):
        """Sets the housekeeping_bitmaps_enabled of this PutV3ApplicationSettingsRequest.

        Creating pack file bitmaps makes housekeeping take a little longer but bitmaps should accelerate 'git clone' performance.

        :param housekeeping_bitmaps_enabled: The housekeeping_bitmaps_enabled of this PutV3ApplicationSettingsRequest.
        :type housekeeping_bitmaps_enabled: bool
        """
        if housekeeping_bitmaps_enabled is None:
            raise ValueError("Invalid value for `housekeeping_bitmaps_enabled`, must not be `None`")

        self._housekeeping_bitmaps_enabled = housekeeping_bitmaps_enabled

    @property
    def housekeeping_incremental_repack_period(self):
        """Gets the housekeeping_incremental_repack_period of this PutV3ApplicationSettingsRequest.

        Number of Git pushes after which an incremental 'git repack' is run.

        :return: The housekeeping_incremental_repack_period of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._housekeeping_incremental_repack_period

    @housekeeping_incremental_repack_period.setter
    def housekeeping_incremental_repack_period(self, housekeeping_incremental_repack_period):
        """Sets the housekeeping_incremental_repack_period of this PutV3ApplicationSettingsRequest.

        Number of Git pushes after which an incremental 'git repack' is run.

        :param housekeeping_incremental_repack_period: The housekeeping_incremental_repack_period of this PutV3ApplicationSettingsRequest.
        :type housekeeping_incremental_repack_period: int
        """
        if housekeeping_incremental_repack_period is None:
            raise ValueError("Invalid value for `housekeeping_incremental_repack_period`, must not be `None`")

        self._housekeeping_incremental_repack_period = housekeeping_incremental_repack_period

    @property
    def housekeeping_full_repack_period(self):
        """Gets the housekeeping_full_repack_period of this PutV3ApplicationSettingsRequest.

        Number of Git pushes after which a full 'git repack' is run.

        :return: The housekeeping_full_repack_period of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._housekeeping_full_repack_period

    @housekeeping_full_repack_period.setter
    def housekeeping_full_repack_period(self, housekeeping_full_repack_period):
        """Sets the housekeeping_full_repack_period of this PutV3ApplicationSettingsRequest.

        Number of Git pushes after which a full 'git repack' is run.

        :param housekeeping_full_repack_period: The housekeeping_full_repack_period of this PutV3ApplicationSettingsRequest.
        :type housekeeping_full_repack_period: int
        """
        if housekeeping_full_repack_period is None:
            raise ValueError("Invalid value for `housekeeping_full_repack_period`, must not be `None`")

        self._housekeeping_full_repack_period = housekeeping_full_repack_period

    @property
    def housekeeping_gc_period(self):
        """Gets the housekeeping_gc_period of this PutV3ApplicationSettingsRequest.

        Number of Git pushes after which 'git gc' is run.

        :return: The housekeeping_gc_period of this PutV3ApplicationSettingsRequest.
        :rtype: int
        """
        return self._housekeeping_gc_period

    @housekeeping_gc_period.setter
    def housekeeping_gc_period(self, housekeeping_gc_period):
        """Sets the housekeeping_gc_period of this PutV3ApplicationSettingsRequest.

        Number of Git pushes after which 'git gc' is run.

        :param housekeeping_gc_period: The housekeeping_gc_period of this PutV3ApplicationSettingsRequest.
        :type housekeeping_gc_period: int
        """
        if housekeeping_gc_period is None:
            raise ValueError("Invalid value for `housekeeping_gc_period`, must not be `None`")

        self._housekeeping_gc_period = housekeeping_gc_period
