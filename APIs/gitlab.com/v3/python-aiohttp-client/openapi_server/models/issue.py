# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.milestone import Milestone
from openapi_server.models.user_basic import UserBasic
from openapi_server import util


class Issue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignee: UserBasic=None, author: UserBasic=None, confidential: str=None, created_at: str=None, description: str=None, downvotes: str=None, due_date: str=None, id: str=None, iid: str=None, labels: str=None, milestone: Milestone=None, project_id: str=None, state: str=None, subscribed: str=None, title: str=None, updated_at: str=None, upvotes: str=None, user_notes_count: str=None, web_url: str=None):
        """Issue - a model defined in OpenAPI

        :param assignee: The assignee of this Issue.
        :param author: The author of this Issue.
        :param confidential: The confidential of this Issue.
        :param created_at: The created_at of this Issue.
        :param description: The description of this Issue.
        :param downvotes: The downvotes of this Issue.
        :param due_date: The due_date of this Issue.
        :param id: The id of this Issue.
        :param iid: The iid of this Issue.
        :param labels: The labels of this Issue.
        :param milestone: The milestone of this Issue.
        :param project_id: The project_id of this Issue.
        :param state: The state of this Issue.
        :param subscribed: The subscribed of this Issue.
        :param title: The title of this Issue.
        :param updated_at: The updated_at of this Issue.
        :param upvotes: The upvotes of this Issue.
        :param user_notes_count: The user_notes_count of this Issue.
        :param web_url: The web_url of this Issue.
        """
        self.openapi_types = {
            'assignee': UserBasic,
            'author': UserBasic,
            'confidential': str,
            'created_at': str,
            'description': str,
            'downvotes': str,
            'due_date': str,
            'id': str,
            'iid': str,
            'labels': str,
            'milestone': Milestone,
            'project_id': str,
            'state': str,
            'subscribed': str,
            'title': str,
            'updated_at': str,
            'upvotes': str,
            'user_notes_count': str,
            'web_url': str
        }

        self.attribute_map = {
            'assignee': 'assignee',
            'author': 'author',
            'confidential': 'confidential',
            'created_at': 'created_at',
            'description': 'description',
            'downvotes': 'downvotes',
            'due_date': 'due_date',
            'id': 'id',
            'iid': 'iid',
            'labels': 'labels',
            'milestone': 'milestone',
            'project_id': 'project_id',
            'state': 'state',
            'subscribed': 'subscribed',
            'title': 'title',
            'updated_at': 'updated_at',
            'upvotes': 'upvotes',
            'user_notes_count': 'user_notes_count',
            'web_url': 'web_url'
        }

        self._assignee = assignee
        self._author = author
        self._confidential = confidential
        self._created_at = created_at
        self._description = description
        self._downvotes = downvotes
        self._due_date = due_date
        self._id = id
        self._iid = iid
        self._labels = labels
        self._milestone = milestone
        self._project_id = project_id
        self._state = state
        self._subscribed = subscribed
        self._title = title
        self._updated_at = updated_at
        self._upvotes = upvotes
        self._user_notes_count = user_notes_count
        self._web_url = web_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Issue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Issue of this Issue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignee(self):
        """Gets the assignee of this Issue.


        :return: The assignee of this Issue.
        :rtype: UserBasic
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this Issue.


        :param assignee: The assignee of this Issue.
        :type assignee: UserBasic
        """

        self._assignee = assignee

    @property
    def author(self):
        """Gets the author of this Issue.


        :return: The author of this Issue.
        :rtype: UserBasic
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Issue.


        :param author: The author of this Issue.
        :type author: UserBasic
        """

        self._author = author

    @property
    def confidential(self):
        """Gets the confidential of this Issue.


        :return: The confidential of this Issue.
        :rtype: str
        """
        return self._confidential

    @confidential.setter
    def confidential(self, confidential):
        """Sets the confidential of this Issue.


        :param confidential: The confidential of this Issue.
        :type confidential: str
        """

        self._confidential = confidential

    @property
    def created_at(self):
        """Gets the created_at of this Issue.


        :return: The created_at of this Issue.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Issue.


        :param created_at: The created_at of this Issue.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Issue.


        :return: The description of this Issue.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Issue.


        :param description: The description of this Issue.
        :type description: str
        """

        self._description = description

    @property
    def downvotes(self):
        """Gets the downvotes of this Issue.


        :return: The downvotes of this Issue.
        :rtype: str
        """
        return self._downvotes

    @downvotes.setter
    def downvotes(self, downvotes):
        """Sets the downvotes of this Issue.


        :param downvotes: The downvotes of this Issue.
        :type downvotes: str
        """

        self._downvotes = downvotes

    @property
    def due_date(self):
        """Gets the due_date of this Issue.


        :return: The due_date of this Issue.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Issue.


        :param due_date: The due_date of this Issue.
        :type due_date: str
        """

        self._due_date = due_date

    @property
    def id(self):
        """Gets the id of this Issue.


        :return: The id of this Issue.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Issue.


        :param id: The id of this Issue.
        :type id: str
        """

        self._id = id

    @property
    def iid(self):
        """Gets the iid of this Issue.


        :return: The iid of this Issue.
        :rtype: str
        """
        return self._iid

    @iid.setter
    def iid(self, iid):
        """Sets the iid of this Issue.


        :param iid: The iid of this Issue.
        :type iid: str
        """

        self._iid = iid

    @property
    def labels(self):
        """Gets the labels of this Issue.


        :return: The labels of this Issue.
        :rtype: str
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Issue.


        :param labels: The labels of this Issue.
        :type labels: str
        """

        self._labels = labels

    @property
    def milestone(self):
        """Gets the milestone of this Issue.


        :return: The milestone of this Issue.
        :rtype: Milestone
        """
        return self._milestone

    @milestone.setter
    def milestone(self, milestone):
        """Sets the milestone of this Issue.


        :param milestone: The milestone of this Issue.
        :type milestone: Milestone
        """

        self._milestone = milestone

    @property
    def project_id(self):
        """Gets the project_id of this Issue.


        :return: The project_id of this Issue.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Issue.


        :param project_id: The project_id of this Issue.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def state(self):
        """Gets the state of this Issue.


        :return: The state of this Issue.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Issue.


        :param state: The state of this Issue.
        :type state: str
        """

        self._state = state

    @property
    def subscribed(self):
        """Gets the subscribed of this Issue.


        :return: The subscribed of this Issue.
        :rtype: str
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this Issue.


        :param subscribed: The subscribed of this Issue.
        :type subscribed: str
        """

        self._subscribed = subscribed

    @property
    def title(self):
        """Gets the title of this Issue.


        :return: The title of this Issue.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Issue.


        :param title: The title of this Issue.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Issue.


        :return: The updated_at of this Issue.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Issue.


        :param updated_at: The updated_at of this Issue.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def upvotes(self):
        """Gets the upvotes of this Issue.


        :return: The upvotes of this Issue.
        :rtype: str
        """
        return self._upvotes

    @upvotes.setter
    def upvotes(self, upvotes):
        """Sets the upvotes of this Issue.


        :param upvotes: The upvotes of this Issue.
        :type upvotes: str
        """

        self._upvotes = upvotes

    @property
    def user_notes_count(self):
        """Gets the user_notes_count of this Issue.


        :return: The user_notes_count of this Issue.
        :rtype: str
        """
        return self._user_notes_count

    @user_notes_count.setter
    def user_notes_count(self, user_notes_count):
        """Sets the user_notes_count of this Issue.


        :param user_notes_count: The user_notes_count of this Issue.
        :type user_notes_count: str
        """

        self._user_notes_count = user_notes_count

    @property
    def web_url(self):
        """Gets the web_url of this Issue.


        :return: The web_url of this Issue.
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """Sets the web_url of this Issue.


        :param web_url: The web_url of this Issue.
        :type web_url: str
        """

        self._web_url = web_url
