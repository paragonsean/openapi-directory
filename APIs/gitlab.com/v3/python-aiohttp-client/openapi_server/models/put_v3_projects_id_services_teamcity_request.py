# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ProjectsIdServicesTeamcityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, teamcity_url: str=None, build_type: str=None, username: str=None, password: str=None, push_events: str=None):
        """PutV3ProjectsIdServicesTeamcityRequest - a model defined in OpenAPI

        :param teamcity_url: The teamcity_url of this PutV3ProjectsIdServicesTeamcityRequest.
        :param build_type: The build_type of this PutV3ProjectsIdServicesTeamcityRequest.
        :param username: The username of this PutV3ProjectsIdServicesTeamcityRequest.
        :param password: The password of this PutV3ProjectsIdServicesTeamcityRequest.
        :param push_events: The push_events of this PutV3ProjectsIdServicesTeamcityRequest.
        """
        self.openapi_types = {
            'teamcity_url': str,
            'build_type': str,
            'username': str,
            'password': str,
            'push_events': str
        }

        self.attribute_map = {
            'teamcity_url': 'teamcity_url',
            'build_type': 'build_type',
            'username': 'username',
            'password': 'password',
            'push_events': 'push_events'
        }

        self._teamcity_url = teamcity_url
        self._build_type = build_type
        self._username = username
        self._password = password
        self._push_events = push_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ProjectsIdServicesTeamcityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ProjectsIdServicesTeamcity_request of this PutV3ProjectsIdServicesTeamcityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def teamcity_url(self):
        """Gets the teamcity_url of this PutV3ProjectsIdServicesTeamcityRequest.

        TeamCity root URL like https://teamcity.example.com

        :return: The teamcity_url of this PutV3ProjectsIdServicesTeamcityRequest.
        :rtype: str
        """
        return self._teamcity_url

    @teamcity_url.setter
    def teamcity_url(self, teamcity_url):
        """Sets the teamcity_url of this PutV3ProjectsIdServicesTeamcityRequest.

        TeamCity root URL like https://teamcity.example.com

        :param teamcity_url: The teamcity_url of this PutV3ProjectsIdServicesTeamcityRequest.
        :type teamcity_url: str
        """
        if teamcity_url is None:
            raise ValueError("Invalid value for `teamcity_url`, must not be `None`")

        self._teamcity_url = teamcity_url

    @property
    def build_type(self):
        """Gets the build_type of this PutV3ProjectsIdServicesTeamcityRequest.

        Build configuration ID

        :return: The build_type of this PutV3ProjectsIdServicesTeamcityRequest.
        :rtype: str
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this PutV3ProjectsIdServicesTeamcityRequest.

        Build configuration ID

        :param build_type: The build_type of this PutV3ProjectsIdServicesTeamcityRequest.
        :type build_type: str
        """
        if build_type is None:
            raise ValueError("Invalid value for `build_type`, must not be `None`")

        self._build_type = build_type

    @property
    def username(self):
        """Gets the username of this PutV3ProjectsIdServicesTeamcityRequest.

        A user with permissions to trigger a manual build

        :return: The username of this PutV3ProjectsIdServicesTeamcityRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PutV3ProjectsIdServicesTeamcityRequest.

        A user with permissions to trigger a manual build

        :param username: The username of this PutV3ProjectsIdServicesTeamcityRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def password(self):
        """Gets the password of this PutV3ProjectsIdServicesTeamcityRequest.

        The password of the user

        :return: The password of this PutV3ProjectsIdServicesTeamcityRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PutV3ProjectsIdServicesTeamcityRequest.

        The password of the user

        :param password: The password of this PutV3ProjectsIdServicesTeamcityRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def push_events(self):
        """Gets the push_events of this PutV3ProjectsIdServicesTeamcityRequest.

        Event will be triggered by a push to the repository

        :return: The push_events of this PutV3ProjectsIdServicesTeamcityRequest.
        :rtype: str
        """
        return self._push_events

    @push_events.setter
    def push_events(self, push_events):
        """Sets the push_events of this PutV3ProjectsIdServicesTeamcityRequest.

        Event will be triggered by a push to the repository

        :param push_events: The push_events of this PutV3ProjectsIdServicesTeamcityRequest.
        :type push_events: str
        """

        self._push_events = push_events
