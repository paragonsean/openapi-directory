# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutV3ProjectsIdServicesPivotaltrackerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token: str=None, restrict_to_branch: str=None, push_events: str=None):
        """PutV3ProjectsIdServicesPivotaltrackerRequest - a model defined in OpenAPI

        :param token: The token of this PutV3ProjectsIdServicesPivotaltrackerRequest.
        :param restrict_to_branch: The restrict_to_branch of this PutV3ProjectsIdServicesPivotaltrackerRequest.
        :param push_events: The push_events of this PutV3ProjectsIdServicesPivotaltrackerRequest.
        """
        self.openapi_types = {
            'token': str,
            'restrict_to_branch': str,
            'push_events': str
        }

        self.attribute_map = {
            'token': 'token',
            'restrict_to_branch': 'restrict_to_branch',
            'push_events': 'push_events'
        }

        self._token = token
        self._restrict_to_branch = restrict_to_branch
        self._push_events = push_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutV3ProjectsIdServicesPivotaltrackerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putV3ProjectsIdServicesPivotaltracker_request of this PutV3ProjectsIdServicesPivotaltrackerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token(self):
        """Gets the token of this PutV3ProjectsIdServicesPivotaltrackerRequest.

        The Pivotaltracker token

        :return: The token of this PutV3ProjectsIdServicesPivotaltrackerRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PutV3ProjectsIdServicesPivotaltrackerRequest.

        The Pivotaltracker token

        :param token: The token of this PutV3ProjectsIdServicesPivotaltrackerRequest.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def restrict_to_branch(self):
        """Gets the restrict_to_branch of this PutV3ProjectsIdServicesPivotaltrackerRequest.

        Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches.

        :return: The restrict_to_branch of this PutV3ProjectsIdServicesPivotaltrackerRequest.
        :rtype: str
        """
        return self._restrict_to_branch

    @restrict_to_branch.setter
    def restrict_to_branch(self, restrict_to_branch):
        """Sets the restrict_to_branch of this PutV3ProjectsIdServicesPivotaltrackerRequest.

        Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches.

        :param restrict_to_branch: The restrict_to_branch of this PutV3ProjectsIdServicesPivotaltrackerRequest.
        :type restrict_to_branch: str
        """

        self._restrict_to_branch = restrict_to_branch

    @property
    def push_events(self):
        """Gets the push_events of this PutV3ProjectsIdServicesPivotaltrackerRequest.

        Event will be triggered by a push to the repository

        :return: The push_events of this PutV3ProjectsIdServicesPivotaltrackerRequest.
        :rtype: str
        """
        return self._push_events

    @push_events.setter
    def push_events(self, push_events):
        """Sets the push_events of this PutV3ProjectsIdServicesPivotaltrackerRequest.

        Event will be triggered by a push to the repository

        :param push_events: The push_events of this PutV3ProjectsIdServicesPivotaltrackerRequest.
        :type push_events: str
        """

        self._push_events = push_events
