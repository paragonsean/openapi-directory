# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RepoCommit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author_email: str=None, author_name: str=None, committer_email: str=None, committer_name: str=None, created_at: str=None, id: str=None, message: str=None, short_id: str=None, title: str=None):
        """RepoCommit - a model defined in OpenAPI

        :param author_email: The author_email of this RepoCommit.
        :param author_name: The author_name of this RepoCommit.
        :param committer_email: The committer_email of this RepoCommit.
        :param committer_name: The committer_name of this RepoCommit.
        :param created_at: The created_at of this RepoCommit.
        :param id: The id of this RepoCommit.
        :param message: The message of this RepoCommit.
        :param short_id: The short_id of this RepoCommit.
        :param title: The title of this RepoCommit.
        """
        self.openapi_types = {
            'author_email': str,
            'author_name': str,
            'committer_email': str,
            'committer_name': str,
            'created_at': str,
            'id': str,
            'message': str,
            'short_id': str,
            'title': str
        }

        self.attribute_map = {
            'author_email': 'author_email',
            'author_name': 'author_name',
            'committer_email': 'committer_email',
            'committer_name': 'committer_name',
            'created_at': 'created_at',
            'id': 'id',
            'message': 'message',
            'short_id': 'short_id',
            'title': 'title'
        }

        self._author_email = author_email
        self._author_name = author_name
        self._committer_email = committer_email
        self._committer_name = committer_name
        self._created_at = created_at
        self._id = id
        self._message = message
        self._short_id = short_id
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepoCommit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepoCommit of this RepoCommit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author_email(self):
        """Gets the author_email of this RepoCommit.


        :return: The author_email of this RepoCommit.
        :rtype: str
        """
        return self._author_email

    @author_email.setter
    def author_email(self, author_email):
        """Sets the author_email of this RepoCommit.


        :param author_email: The author_email of this RepoCommit.
        :type author_email: str
        """

        self._author_email = author_email

    @property
    def author_name(self):
        """Gets the author_name of this RepoCommit.


        :return: The author_name of this RepoCommit.
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this RepoCommit.


        :param author_name: The author_name of this RepoCommit.
        :type author_name: str
        """

        self._author_name = author_name

    @property
    def committer_email(self):
        """Gets the committer_email of this RepoCommit.


        :return: The committer_email of this RepoCommit.
        :rtype: str
        """
        return self._committer_email

    @committer_email.setter
    def committer_email(self, committer_email):
        """Sets the committer_email of this RepoCommit.


        :param committer_email: The committer_email of this RepoCommit.
        :type committer_email: str
        """

        self._committer_email = committer_email

    @property
    def committer_name(self):
        """Gets the committer_name of this RepoCommit.


        :return: The committer_name of this RepoCommit.
        :rtype: str
        """
        return self._committer_name

    @committer_name.setter
    def committer_name(self, committer_name):
        """Sets the committer_name of this RepoCommit.


        :param committer_name: The committer_name of this RepoCommit.
        :type committer_name: str
        """

        self._committer_name = committer_name

    @property
    def created_at(self):
        """Gets the created_at of this RepoCommit.


        :return: The created_at of this RepoCommit.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RepoCommit.


        :param created_at: The created_at of this RepoCommit.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this RepoCommit.


        :return: The id of this RepoCommit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepoCommit.


        :param id: The id of this RepoCommit.
        :type id: str
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this RepoCommit.


        :return: The message of this RepoCommit.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this RepoCommit.


        :param message: The message of this RepoCommit.
        :type message: str
        """

        self._message = message

    @property
    def short_id(self):
        """Gets the short_id of this RepoCommit.


        :return: The short_id of this RepoCommit.
        :rtype: str
        """
        return self._short_id

    @short_id.setter
    def short_id(self, short_id):
        """Sets the short_id of this RepoCommit.


        :param short_id: The short_id of this RepoCommit.
        :type short_id: str
        """

        self._short_id = short_id

    @property
    def title(self):
        """Gets the title of this RepoCommit.


        :return: The title of this RepoCommit.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RepoCommit.


        :param title: The title of this RepoCommit.
        :type title: str
        """

        self._title = title
