/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompare.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompare::OAICompare(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompare::OAICompare() {
    this->initializeModel();
}

OAICompare::~OAICompare() {}

void OAICompare::initializeModel() {

    m_commit_isSet = false;
    m_commit_isValid = false;

    m_commits_isSet = false;
    m_commits_isValid = false;

    m_compare_same_ref_isSet = false;
    m_compare_same_ref_isValid = false;

    m_compare_timeout_isSet = false;
    m_compare_timeout_isValid = false;

    m_diffs_isSet = false;
    m_diffs_isValid = false;
}

void OAICompare::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompare::fromJsonObject(QJsonObject json) {

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;

    m_commits_isValid = ::OpenAPI::fromJsonValue(m_commits, json[QString("commits")]);
    m_commits_isSet = !json[QString("commits")].isNull() && m_commits_isValid;

    m_compare_same_ref_isValid = ::OpenAPI::fromJsonValue(m_compare_same_ref, json[QString("compare_same_ref")]);
    m_compare_same_ref_isSet = !json[QString("compare_same_ref")].isNull() && m_compare_same_ref_isValid;

    m_compare_timeout_isValid = ::OpenAPI::fromJsonValue(m_compare_timeout, json[QString("compare_timeout")]);
    m_compare_timeout_isSet = !json[QString("compare_timeout")].isNull() && m_compare_timeout_isValid;

    m_diffs_isValid = ::OpenAPI::fromJsonValue(m_diffs, json[QString("diffs")]);
    m_diffs_isSet = !json[QString("diffs")].isNull() && m_diffs_isValid;
}

QString OAICompare::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompare::asJsonObject() const {
    QJsonObject obj;
    if (m_commit.isSet()) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    if (m_commits.isSet()) {
        obj.insert(QString("commits"), ::OpenAPI::toJsonValue(m_commits));
    }
    if (m_compare_same_ref_isSet) {
        obj.insert(QString("compare_same_ref"), ::OpenAPI::toJsonValue(m_compare_same_ref));
    }
    if (m_compare_timeout_isSet) {
        obj.insert(QString("compare_timeout"), ::OpenAPI::toJsonValue(m_compare_timeout));
    }
    if (m_diffs.isSet()) {
        obj.insert(QString("diffs"), ::OpenAPI::toJsonValue(m_diffs));
    }
    return obj;
}

OAIRepoCommit OAICompare::getCommit() const {
    return m_commit;
}
void OAICompare::setCommit(const OAIRepoCommit &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAICompare::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAICompare::is_commit_Valid() const{
    return m_commit_isValid;
}

OAIRepoCommit OAICompare::getCommits() const {
    return m_commits;
}
void OAICompare::setCommits(const OAIRepoCommit &commits) {
    m_commits = commits;
    m_commits_isSet = true;
}

bool OAICompare::is_commits_Set() const{
    return m_commits_isSet;
}

bool OAICompare::is_commits_Valid() const{
    return m_commits_isValid;
}

QString OAICompare::getCompareSameRef() const {
    return m_compare_same_ref;
}
void OAICompare::setCompareSameRef(const QString &compare_same_ref) {
    m_compare_same_ref = compare_same_ref;
    m_compare_same_ref_isSet = true;
}

bool OAICompare::is_compare_same_ref_Set() const{
    return m_compare_same_ref_isSet;
}

bool OAICompare::is_compare_same_ref_Valid() const{
    return m_compare_same_ref_isValid;
}

QString OAICompare::getCompareTimeout() const {
    return m_compare_timeout;
}
void OAICompare::setCompareTimeout(const QString &compare_timeout) {
    m_compare_timeout = compare_timeout;
    m_compare_timeout_isSet = true;
}

bool OAICompare::is_compare_timeout_Set() const{
    return m_compare_timeout_isSet;
}

bool OAICompare::is_compare_timeout_Valid() const{
    return m_compare_timeout_isValid;
}

OAIRepoDiff OAICompare::getDiffs() const {
    return m_diffs;
}
void OAICompare::setDiffs(const OAIRepoDiff &diffs) {
    m_diffs = diffs;
    m_diffs_isSet = true;
}

bool OAICompare::is_diffs_Set() const{
    return m_diffs_isSet;
}

bool OAICompare::is_diffs_Valid() const{
    return m_diffs_isValid;
}

bool OAICompare::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_same_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diffs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompare::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
