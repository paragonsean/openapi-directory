/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepoDiff.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepoDiff::OAIRepoDiff(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepoDiff::OAIRepoDiff() {
    this->initializeModel();
}

OAIRepoDiff::~OAIRepoDiff() {}

void OAIRepoDiff::initializeModel() {

    m_a_mode_isSet = false;
    m_a_mode_isValid = false;

    m_b_mode_isSet = false;
    m_b_mode_isValid = false;

    m_deleted_file_isSet = false;
    m_deleted_file_isValid = false;

    m_diff_isSet = false;
    m_diff_isValid = false;

    m_new_file_isSet = false;
    m_new_file_isValid = false;

    m_new_path_isSet = false;
    m_new_path_isValid = false;

    m_old_path_isSet = false;
    m_old_path_isValid = false;

    m_renamed_file_isSet = false;
    m_renamed_file_isValid = false;
}

void OAIRepoDiff::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepoDiff::fromJsonObject(QJsonObject json) {

    m_a_mode_isValid = ::OpenAPI::fromJsonValue(m_a_mode, json[QString("a_mode")]);
    m_a_mode_isSet = !json[QString("a_mode")].isNull() && m_a_mode_isValid;

    m_b_mode_isValid = ::OpenAPI::fromJsonValue(m_b_mode, json[QString("b_mode")]);
    m_b_mode_isSet = !json[QString("b_mode")].isNull() && m_b_mode_isValid;

    m_deleted_file_isValid = ::OpenAPI::fromJsonValue(m_deleted_file, json[QString("deleted_file")]);
    m_deleted_file_isSet = !json[QString("deleted_file")].isNull() && m_deleted_file_isValid;

    m_diff_isValid = ::OpenAPI::fromJsonValue(m_diff, json[QString("diff")]);
    m_diff_isSet = !json[QString("diff")].isNull() && m_diff_isValid;

    m_new_file_isValid = ::OpenAPI::fromJsonValue(m_new_file, json[QString("new_file")]);
    m_new_file_isSet = !json[QString("new_file")].isNull() && m_new_file_isValid;

    m_new_path_isValid = ::OpenAPI::fromJsonValue(m_new_path, json[QString("new_path")]);
    m_new_path_isSet = !json[QString("new_path")].isNull() && m_new_path_isValid;

    m_old_path_isValid = ::OpenAPI::fromJsonValue(m_old_path, json[QString("old_path")]);
    m_old_path_isSet = !json[QString("old_path")].isNull() && m_old_path_isValid;

    m_renamed_file_isValid = ::OpenAPI::fromJsonValue(m_renamed_file, json[QString("renamed_file")]);
    m_renamed_file_isSet = !json[QString("renamed_file")].isNull() && m_renamed_file_isValid;
}

QString OAIRepoDiff::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepoDiff::asJsonObject() const {
    QJsonObject obj;
    if (m_a_mode_isSet) {
        obj.insert(QString("a_mode"), ::OpenAPI::toJsonValue(m_a_mode));
    }
    if (m_b_mode_isSet) {
        obj.insert(QString("b_mode"), ::OpenAPI::toJsonValue(m_b_mode));
    }
    if (m_deleted_file_isSet) {
        obj.insert(QString("deleted_file"), ::OpenAPI::toJsonValue(m_deleted_file));
    }
    if (m_diff_isSet) {
        obj.insert(QString("diff"), ::OpenAPI::toJsonValue(m_diff));
    }
    if (m_new_file_isSet) {
        obj.insert(QString("new_file"), ::OpenAPI::toJsonValue(m_new_file));
    }
    if (m_new_path_isSet) {
        obj.insert(QString("new_path"), ::OpenAPI::toJsonValue(m_new_path));
    }
    if (m_old_path_isSet) {
        obj.insert(QString("old_path"), ::OpenAPI::toJsonValue(m_old_path));
    }
    if (m_renamed_file_isSet) {
        obj.insert(QString("renamed_file"), ::OpenAPI::toJsonValue(m_renamed_file));
    }
    return obj;
}

QString OAIRepoDiff::getAMode() const {
    return m_a_mode;
}
void OAIRepoDiff::setAMode(const QString &a_mode) {
    m_a_mode = a_mode;
    m_a_mode_isSet = true;
}

bool OAIRepoDiff::is_a_mode_Set() const{
    return m_a_mode_isSet;
}

bool OAIRepoDiff::is_a_mode_Valid() const{
    return m_a_mode_isValid;
}

QString OAIRepoDiff::getBMode() const {
    return m_b_mode;
}
void OAIRepoDiff::setBMode(const QString &b_mode) {
    m_b_mode = b_mode;
    m_b_mode_isSet = true;
}

bool OAIRepoDiff::is_b_mode_Set() const{
    return m_b_mode_isSet;
}

bool OAIRepoDiff::is_b_mode_Valid() const{
    return m_b_mode_isValid;
}

QString OAIRepoDiff::getDeletedFile() const {
    return m_deleted_file;
}
void OAIRepoDiff::setDeletedFile(const QString &deleted_file) {
    m_deleted_file = deleted_file;
    m_deleted_file_isSet = true;
}

bool OAIRepoDiff::is_deleted_file_Set() const{
    return m_deleted_file_isSet;
}

bool OAIRepoDiff::is_deleted_file_Valid() const{
    return m_deleted_file_isValid;
}

QString OAIRepoDiff::getDiff() const {
    return m_diff;
}
void OAIRepoDiff::setDiff(const QString &diff) {
    m_diff = diff;
    m_diff_isSet = true;
}

bool OAIRepoDiff::is_diff_Set() const{
    return m_diff_isSet;
}

bool OAIRepoDiff::is_diff_Valid() const{
    return m_diff_isValid;
}

QString OAIRepoDiff::getNewFile() const {
    return m_new_file;
}
void OAIRepoDiff::setNewFile(const QString &new_file) {
    m_new_file = new_file;
    m_new_file_isSet = true;
}

bool OAIRepoDiff::is_new_file_Set() const{
    return m_new_file_isSet;
}

bool OAIRepoDiff::is_new_file_Valid() const{
    return m_new_file_isValid;
}

QString OAIRepoDiff::getNewPath() const {
    return m_new_path;
}
void OAIRepoDiff::setNewPath(const QString &new_path) {
    m_new_path = new_path;
    m_new_path_isSet = true;
}

bool OAIRepoDiff::is_new_path_Set() const{
    return m_new_path_isSet;
}

bool OAIRepoDiff::is_new_path_Valid() const{
    return m_new_path_isValid;
}

QString OAIRepoDiff::getOldPath() const {
    return m_old_path;
}
void OAIRepoDiff::setOldPath(const QString &old_path) {
    m_old_path = old_path;
    m_old_path_isSet = true;
}

bool OAIRepoDiff::is_old_path_Set() const{
    return m_old_path_isSet;
}

bool OAIRepoDiff::is_old_path_Valid() const{
    return m_old_path_isValid;
}

QString OAIRepoDiff::getRenamedFile() const {
    return m_renamed_file;
}
void OAIRepoDiff::setRenamedFile(const QString &renamed_file) {
    m_renamed_file = renamed_file;
    m_renamed_file_isSet = true;
}

bool OAIRepoDiff::is_renamed_file_Set() const{
    return m_renamed_file_isSet;
}

bool OAIRepoDiff::is_renamed_file_Valid() const{
    return m_renamed_file_isValid;
}

bool OAIRepoDiff::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_a_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renamed_file_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepoDiff::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
