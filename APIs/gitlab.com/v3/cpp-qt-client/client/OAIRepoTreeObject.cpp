/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepoTreeObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepoTreeObject::OAIRepoTreeObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepoTreeObject::OAIRepoTreeObject() {
    this->initializeModel();
}

OAIRepoTreeObject::~OAIRepoTreeObject() {}

void OAIRepoTreeObject::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRepoTreeObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepoTreeObject::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRepoTreeObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepoTreeObject::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIRepoTreeObject::getId() const {
    return m_id;
}
void OAIRepoTreeObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRepoTreeObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRepoTreeObject::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRepoTreeObject::getMode() const {
    return m_mode;
}
void OAIRepoTreeObject::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIRepoTreeObject::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIRepoTreeObject::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIRepoTreeObject::getName() const {
    return m_name;
}
void OAIRepoTreeObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRepoTreeObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRepoTreeObject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRepoTreeObject::getPath() const {
    return m_path;
}
void OAIRepoTreeObject::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIRepoTreeObject::is_path_Set() const{
    return m_path_isSet;
}

bool OAIRepoTreeObject::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIRepoTreeObject::getType() const {
    return m_type;
}
void OAIRepoTreeObject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRepoTreeObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRepoTreeObject::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRepoTreeObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepoTreeObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
