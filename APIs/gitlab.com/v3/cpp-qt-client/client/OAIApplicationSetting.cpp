/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationSetting::OAIApplicationSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationSetting::OAIApplicationSetting() {
    this->initializeModel();
}

OAIApplicationSetting::~OAIApplicationSetting() {}

void OAIApplicationSetting::initializeModel() {

    m_after_sign_out_path_isSet = false;
    m_after_sign_out_path_isValid = false;

    m_after_sign_up_text_isSet = false;
    m_after_sign_up_text_isValid = false;

    m_container_registry_token_expire_delay_isSet = false;
    m_container_registry_token_expire_delay_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_default_branch_protection_isSet = false;
    m_default_branch_protection_isValid = false;

    m_default_group_visibility_isSet = false;
    m_default_group_visibility_isValid = false;

    m_default_project_visibility_isSet = false;
    m_default_project_visibility_isValid = false;

    m_default_projects_limit_isSet = false;
    m_default_projects_limit_isValid = false;

    m_default_snippet_visibility_isSet = false;
    m_default_snippet_visibility_isValid = false;

    m_domain_blacklist_isSet = false;
    m_domain_blacklist_isValid = false;

    m_domain_blacklist_enabled_isSet = false;
    m_domain_blacklist_enabled_isValid = false;

    m_domain_whitelist_isSet = false;
    m_domain_whitelist_isValid = false;

    m_gravatar_enabled_isSet = false;
    m_gravatar_enabled_isValid = false;

    m_home_page_url_isSet = false;
    m_home_page_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_koding_enabled_isSet = false;
    m_koding_enabled_isValid = false;

    m_koding_url_isSet = false;
    m_koding_url_isValid = false;

    m_max_attachment_size_isSet = false;
    m_max_attachment_size_isValid = false;

    m_plantuml_enabled_isSet = false;
    m_plantuml_enabled_isValid = false;

    m_plantuml_url_isSet = false;
    m_plantuml_url_isValid = false;

    m_repository_storage_isSet = false;
    m_repository_storage_isValid = false;

    m_repository_storages_isSet = false;
    m_repository_storages_isValid = false;

    m_restricted_visibility_levels_isSet = false;
    m_restricted_visibility_levels_isValid = false;

    m_session_expire_delay_isSet = false;
    m_session_expire_delay_isValid = false;

    m_sign_in_text_isSet = false;
    m_sign_in_text_isValid = false;

    m_signin_enabled_isSet = false;
    m_signin_enabled_isValid = false;

    m_signup_enabled_isSet = false;
    m_signup_enabled_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_oauth_applications_isSet = false;
    m_user_oauth_applications_isValid = false;
}

void OAIApplicationSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationSetting::fromJsonObject(QJsonObject json) {

    m_after_sign_out_path_isValid = ::OpenAPI::fromJsonValue(m_after_sign_out_path, json[QString("after_sign_out_path")]);
    m_after_sign_out_path_isSet = !json[QString("after_sign_out_path")].isNull() && m_after_sign_out_path_isValid;

    m_after_sign_up_text_isValid = ::OpenAPI::fromJsonValue(m_after_sign_up_text, json[QString("after_sign_up_text")]);
    m_after_sign_up_text_isSet = !json[QString("after_sign_up_text")].isNull() && m_after_sign_up_text_isValid;

    m_container_registry_token_expire_delay_isValid = ::OpenAPI::fromJsonValue(m_container_registry_token_expire_delay, json[QString("container_registry_token_expire_delay")]);
    m_container_registry_token_expire_delay_isSet = !json[QString("container_registry_token_expire_delay")].isNull() && m_container_registry_token_expire_delay_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_default_branch_protection_isValid = ::OpenAPI::fromJsonValue(m_default_branch_protection, json[QString("default_branch_protection")]);
    m_default_branch_protection_isSet = !json[QString("default_branch_protection")].isNull() && m_default_branch_protection_isValid;

    m_default_group_visibility_isValid = ::OpenAPI::fromJsonValue(m_default_group_visibility, json[QString("default_group_visibility")]);
    m_default_group_visibility_isSet = !json[QString("default_group_visibility")].isNull() && m_default_group_visibility_isValid;

    m_default_project_visibility_isValid = ::OpenAPI::fromJsonValue(m_default_project_visibility, json[QString("default_project_visibility")]);
    m_default_project_visibility_isSet = !json[QString("default_project_visibility")].isNull() && m_default_project_visibility_isValid;

    m_default_projects_limit_isValid = ::OpenAPI::fromJsonValue(m_default_projects_limit, json[QString("default_projects_limit")]);
    m_default_projects_limit_isSet = !json[QString("default_projects_limit")].isNull() && m_default_projects_limit_isValid;

    m_default_snippet_visibility_isValid = ::OpenAPI::fromJsonValue(m_default_snippet_visibility, json[QString("default_snippet_visibility")]);
    m_default_snippet_visibility_isSet = !json[QString("default_snippet_visibility")].isNull() && m_default_snippet_visibility_isValid;

    m_domain_blacklist_isValid = ::OpenAPI::fromJsonValue(m_domain_blacklist, json[QString("domain_blacklist")]);
    m_domain_blacklist_isSet = !json[QString("domain_blacklist")].isNull() && m_domain_blacklist_isValid;

    m_domain_blacklist_enabled_isValid = ::OpenAPI::fromJsonValue(m_domain_blacklist_enabled, json[QString("domain_blacklist_enabled")]);
    m_domain_blacklist_enabled_isSet = !json[QString("domain_blacklist_enabled")].isNull() && m_domain_blacklist_enabled_isValid;

    m_domain_whitelist_isValid = ::OpenAPI::fromJsonValue(m_domain_whitelist, json[QString("domain_whitelist")]);
    m_domain_whitelist_isSet = !json[QString("domain_whitelist")].isNull() && m_domain_whitelist_isValid;

    m_gravatar_enabled_isValid = ::OpenAPI::fromJsonValue(m_gravatar_enabled, json[QString("gravatar_enabled")]);
    m_gravatar_enabled_isSet = !json[QString("gravatar_enabled")].isNull() && m_gravatar_enabled_isValid;

    m_home_page_url_isValid = ::OpenAPI::fromJsonValue(m_home_page_url, json[QString("home_page_url")]);
    m_home_page_url_isSet = !json[QString("home_page_url")].isNull() && m_home_page_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_koding_enabled_isValid = ::OpenAPI::fromJsonValue(m_koding_enabled, json[QString("koding_enabled")]);
    m_koding_enabled_isSet = !json[QString("koding_enabled")].isNull() && m_koding_enabled_isValid;

    m_koding_url_isValid = ::OpenAPI::fromJsonValue(m_koding_url, json[QString("koding_url")]);
    m_koding_url_isSet = !json[QString("koding_url")].isNull() && m_koding_url_isValid;

    m_max_attachment_size_isValid = ::OpenAPI::fromJsonValue(m_max_attachment_size, json[QString("max_attachment_size")]);
    m_max_attachment_size_isSet = !json[QString("max_attachment_size")].isNull() && m_max_attachment_size_isValid;

    m_plantuml_enabled_isValid = ::OpenAPI::fromJsonValue(m_plantuml_enabled, json[QString("plantuml_enabled")]);
    m_plantuml_enabled_isSet = !json[QString("plantuml_enabled")].isNull() && m_plantuml_enabled_isValid;

    m_plantuml_url_isValid = ::OpenAPI::fromJsonValue(m_plantuml_url, json[QString("plantuml_url")]);
    m_plantuml_url_isSet = !json[QString("plantuml_url")].isNull() && m_plantuml_url_isValid;

    m_repository_storage_isValid = ::OpenAPI::fromJsonValue(m_repository_storage, json[QString("repository_storage")]);
    m_repository_storage_isSet = !json[QString("repository_storage")].isNull() && m_repository_storage_isValid;

    m_repository_storages_isValid = ::OpenAPI::fromJsonValue(m_repository_storages, json[QString("repository_storages")]);
    m_repository_storages_isSet = !json[QString("repository_storages")].isNull() && m_repository_storages_isValid;

    m_restricted_visibility_levels_isValid = ::OpenAPI::fromJsonValue(m_restricted_visibility_levels, json[QString("restricted_visibility_levels")]);
    m_restricted_visibility_levels_isSet = !json[QString("restricted_visibility_levels")].isNull() && m_restricted_visibility_levels_isValid;

    m_session_expire_delay_isValid = ::OpenAPI::fromJsonValue(m_session_expire_delay, json[QString("session_expire_delay")]);
    m_session_expire_delay_isSet = !json[QString("session_expire_delay")].isNull() && m_session_expire_delay_isValid;

    m_sign_in_text_isValid = ::OpenAPI::fromJsonValue(m_sign_in_text, json[QString("sign_in_text")]);
    m_sign_in_text_isSet = !json[QString("sign_in_text")].isNull() && m_sign_in_text_isValid;

    m_signin_enabled_isValid = ::OpenAPI::fromJsonValue(m_signin_enabled, json[QString("signin_enabled")]);
    m_signin_enabled_isSet = !json[QString("signin_enabled")].isNull() && m_signin_enabled_isValid;

    m_signup_enabled_isValid = ::OpenAPI::fromJsonValue(m_signup_enabled, json[QString("signup_enabled")]);
    m_signup_enabled_isSet = !json[QString("signup_enabled")].isNull() && m_signup_enabled_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_oauth_applications_isValid = ::OpenAPI::fromJsonValue(m_user_oauth_applications, json[QString("user_oauth_applications")]);
    m_user_oauth_applications_isSet = !json[QString("user_oauth_applications")].isNull() && m_user_oauth_applications_isValid;
}

QString OAIApplicationSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_after_sign_out_path_isSet) {
        obj.insert(QString("after_sign_out_path"), ::OpenAPI::toJsonValue(m_after_sign_out_path));
    }
    if (m_after_sign_up_text_isSet) {
        obj.insert(QString("after_sign_up_text"), ::OpenAPI::toJsonValue(m_after_sign_up_text));
    }
    if (m_container_registry_token_expire_delay_isSet) {
        obj.insert(QString("container_registry_token_expire_delay"), ::OpenAPI::toJsonValue(m_container_registry_token_expire_delay));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_default_branch_protection_isSet) {
        obj.insert(QString("default_branch_protection"), ::OpenAPI::toJsonValue(m_default_branch_protection));
    }
    if (m_default_group_visibility_isSet) {
        obj.insert(QString("default_group_visibility"), ::OpenAPI::toJsonValue(m_default_group_visibility));
    }
    if (m_default_project_visibility_isSet) {
        obj.insert(QString("default_project_visibility"), ::OpenAPI::toJsonValue(m_default_project_visibility));
    }
    if (m_default_projects_limit_isSet) {
        obj.insert(QString("default_projects_limit"), ::OpenAPI::toJsonValue(m_default_projects_limit));
    }
    if (m_default_snippet_visibility_isSet) {
        obj.insert(QString("default_snippet_visibility"), ::OpenAPI::toJsonValue(m_default_snippet_visibility));
    }
    if (m_domain_blacklist_isSet) {
        obj.insert(QString("domain_blacklist"), ::OpenAPI::toJsonValue(m_domain_blacklist));
    }
    if (m_domain_blacklist_enabled_isSet) {
        obj.insert(QString("domain_blacklist_enabled"), ::OpenAPI::toJsonValue(m_domain_blacklist_enabled));
    }
    if (m_domain_whitelist_isSet) {
        obj.insert(QString("domain_whitelist"), ::OpenAPI::toJsonValue(m_domain_whitelist));
    }
    if (m_gravatar_enabled_isSet) {
        obj.insert(QString("gravatar_enabled"), ::OpenAPI::toJsonValue(m_gravatar_enabled));
    }
    if (m_home_page_url_isSet) {
        obj.insert(QString("home_page_url"), ::OpenAPI::toJsonValue(m_home_page_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_koding_enabled_isSet) {
        obj.insert(QString("koding_enabled"), ::OpenAPI::toJsonValue(m_koding_enabled));
    }
    if (m_koding_url_isSet) {
        obj.insert(QString("koding_url"), ::OpenAPI::toJsonValue(m_koding_url));
    }
    if (m_max_attachment_size_isSet) {
        obj.insert(QString("max_attachment_size"), ::OpenAPI::toJsonValue(m_max_attachment_size));
    }
    if (m_plantuml_enabled_isSet) {
        obj.insert(QString("plantuml_enabled"), ::OpenAPI::toJsonValue(m_plantuml_enabled));
    }
    if (m_plantuml_url_isSet) {
        obj.insert(QString("plantuml_url"), ::OpenAPI::toJsonValue(m_plantuml_url));
    }
    if (m_repository_storage_isSet) {
        obj.insert(QString("repository_storage"), ::OpenAPI::toJsonValue(m_repository_storage));
    }
    if (m_repository_storages_isSet) {
        obj.insert(QString("repository_storages"), ::OpenAPI::toJsonValue(m_repository_storages));
    }
    if (m_restricted_visibility_levels_isSet) {
        obj.insert(QString("restricted_visibility_levels"), ::OpenAPI::toJsonValue(m_restricted_visibility_levels));
    }
    if (m_session_expire_delay_isSet) {
        obj.insert(QString("session_expire_delay"), ::OpenAPI::toJsonValue(m_session_expire_delay));
    }
    if (m_sign_in_text_isSet) {
        obj.insert(QString("sign_in_text"), ::OpenAPI::toJsonValue(m_sign_in_text));
    }
    if (m_signin_enabled_isSet) {
        obj.insert(QString("signin_enabled"), ::OpenAPI::toJsonValue(m_signin_enabled));
    }
    if (m_signup_enabled_isSet) {
        obj.insert(QString("signup_enabled"), ::OpenAPI::toJsonValue(m_signup_enabled));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_oauth_applications_isSet) {
        obj.insert(QString("user_oauth_applications"), ::OpenAPI::toJsonValue(m_user_oauth_applications));
    }
    return obj;
}

QString OAIApplicationSetting::getAfterSignOutPath() const {
    return m_after_sign_out_path;
}
void OAIApplicationSetting::setAfterSignOutPath(const QString &after_sign_out_path) {
    m_after_sign_out_path = after_sign_out_path;
    m_after_sign_out_path_isSet = true;
}

bool OAIApplicationSetting::is_after_sign_out_path_Set() const{
    return m_after_sign_out_path_isSet;
}

bool OAIApplicationSetting::is_after_sign_out_path_Valid() const{
    return m_after_sign_out_path_isValid;
}

QString OAIApplicationSetting::getAfterSignUpText() const {
    return m_after_sign_up_text;
}
void OAIApplicationSetting::setAfterSignUpText(const QString &after_sign_up_text) {
    m_after_sign_up_text = after_sign_up_text;
    m_after_sign_up_text_isSet = true;
}

bool OAIApplicationSetting::is_after_sign_up_text_Set() const{
    return m_after_sign_up_text_isSet;
}

bool OAIApplicationSetting::is_after_sign_up_text_Valid() const{
    return m_after_sign_up_text_isValid;
}

QString OAIApplicationSetting::getContainerRegistryTokenExpireDelay() const {
    return m_container_registry_token_expire_delay;
}
void OAIApplicationSetting::setContainerRegistryTokenExpireDelay(const QString &container_registry_token_expire_delay) {
    m_container_registry_token_expire_delay = container_registry_token_expire_delay;
    m_container_registry_token_expire_delay_isSet = true;
}

bool OAIApplicationSetting::is_container_registry_token_expire_delay_Set() const{
    return m_container_registry_token_expire_delay_isSet;
}

bool OAIApplicationSetting::is_container_registry_token_expire_delay_Valid() const{
    return m_container_registry_token_expire_delay_isValid;
}

QString OAIApplicationSetting::getCreatedAt() const {
    return m_created_at;
}
void OAIApplicationSetting::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIApplicationSetting::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIApplicationSetting::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIApplicationSetting::getDefaultBranchProtection() const {
    return m_default_branch_protection;
}
void OAIApplicationSetting::setDefaultBranchProtection(const QString &default_branch_protection) {
    m_default_branch_protection = default_branch_protection;
    m_default_branch_protection_isSet = true;
}

bool OAIApplicationSetting::is_default_branch_protection_Set() const{
    return m_default_branch_protection_isSet;
}

bool OAIApplicationSetting::is_default_branch_protection_Valid() const{
    return m_default_branch_protection_isValid;
}

QString OAIApplicationSetting::getDefaultGroupVisibility() const {
    return m_default_group_visibility;
}
void OAIApplicationSetting::setDefaultGroupVisibility(const QString &default_group_visibility) {
    m_default_group_visibility = default_group_visibility;
    m_default_group_visibility_isSet = true;
}

bool OAIApplicationSetting::is_default_group_visibility_Set() const{
    return m_default_group_visibility_isSet;
}

bool OAIApplicationSetting::is_default_group_visibility_Valid() const{
    return m_default_group_visibility_isValid;
}

QString OAIApplicationSetting::getDefaultProjectVisibility() const {
    return m_default_project_visibility;
}
void OAIApplicationSetting::setDefaultProjectVisibility(const QString &default_project_visibility) {
    m_default_project_visibility = default_project_visibility;
    m_default_project_visibility_isSet = true;
}

bool OAIApplicationSetting::is_default_project_visibility_Set() const{
    return m_default_project_visibility_isSet;
}

bool OAIApplicationSetting::is_default_project_visibility_Valid() const{
    return m_default_project_visibility_isValid;
}

QString OAIApplicationSetting::getDefaultProjectsLimit() const {
    return m_default_projects_limit;
}
void OAIApplicationSetting::setDefaultProjectsLimit(const QString &default_projects_limit) {
    m_default_projects_limit = default_projects_limit;
    m_default_projects_limit_isSet = true;
}

bool OAIApplicationSetting::is_default_projects_limit_Set() const{
    return m_default_projects_limit_isSet;
}

bool OAIApplicationSetting::is_default_projects_limit_Valid() const{
    return m_default_projects_limit_isValid;
}

QString OAIApplicationSetting::getDefaultSnippetVisibility() const {
    return m_default_snippet_visibility;
}
void OAIApplicationSetting::setDefaultSnippetVisibility(const QString &default_snippet_visibility) {
    m_default_snippet_visibility = default_snippet_visibility;
    m_default_snippet_visibility_isSet = true;
}

bool OAIApplicationSetting::is_default_snippet_visibility_Set() const{
    return m_default_snippet_visibility_isSet;
}

bool OAIApplicationSetting::is_default_snippet_visibility_Valid() const{
    return m_default_snippet_visibility_isValid;
}

QString OAIApplicationSetting::getDomainBlacklist() const {
    return m_domain_blacklist;
}
void OAIApplicationSetting::setDomainBlacklist(const QString &domain_blacklist) {
    m_domain_blacklist = domain_blacklist;
    m_domain_blacklist_isSet = true;
}

bool OAIApplicationSetting::is_domain_blacklist_Set() const{
    return m_domain_blacklist_isSet;
}

bool OAIApplicationSetting::is_domain_blacklist_Valid() const{
    return m_domain_blacklist_isValid;
}

QString OAIApplicationSetting::getDomainBlacklistEnabled() const {
    return m_domain_blacklist_enabled;
}
void OAIApplicationSetting::setDomainBlacklistEnabled(const QString &domain_blacklist_enabled) {
    m_domain_blacklist_enabled = domain_blacklist_enabled;
    m_domain_blacklist_enabled_isSet = true;
}

bool OAIApplicationSetting::is_domain_blacklist_enabled_Set() const{
    return m_domain_blacklist_enabled_isSet;
}

bool OAIApplicationSetting::is_domain_blacklist_enabled_Valid() const{
    return m_domain_blacklist_enabled_isValid;
}

QString OAIApplicationSetting::getDomainWhitelist() const {
    return m_domain_whitelist;
}
void OAIApplicationSetting::setDomainWhitelist(const QString &domain_whitelist) {
    m_domain_whitelist = domain_whitelist;
    m_domain_whitelist_isSet = true;
}

bool OAIApplicationSetting::is_domain_whitelist_Set() const{
    return m_domain_whitelist_isSet;
}

bool OAIApplicationSetting::is_domain_whitelist_Valid() const{
    return m_domain_whitelist_isValid;
}

QString OAIApplicationSetting::getGravatarEnabled() const {
    return m_gravatar_enabled;
}
void OAIApplicationSetting::setGravatarEnabled(const QString &gravatar_enabled) {
    m_gravatar_enabled = gravatar_enabled;
    m_gravatar_enabled_isSet = true;
}

bool OAIApplicationSetting::is_gravatar_enabled_Set() const{
    return m_gravatar_enabled_isSet;
}

bool OAIApplicationSetting::is_gravatar_enabled_Valid() const{
    return m_gravatar_enabled_isValid;
}

QString OAIApplicationSetting::getHomePageUrl() const {
    return m_home_page_url;
}
void OAIApplicationSetting::setHomePageUrl(const QString &home_page_url) {
    m_home_page_url = home_page_url;
    m_home_page_url_isSet = true;
}

bool OAIApplicationSetting::is_home_page_url_Set() const{
    return m_home_page_url_isSet;
}

bool OAIApplicationSetting::is_home_page_url_Valid() const{
    return m_home_page_url_isValid;
}

QString OAIApplicationSetting::getId() const {
    return m_id;
}
void OAIApplicationSetting::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApplicationSetting::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApplicationSetting::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApplicationSetting::getKodingEnabled() const {
    return m_koding_enabled;
}
void OAIApplicationSetting::setKodingEnabled(const QString &koding_enabled) {
    m_koding_enabled = koding_enabled;
    m_koding_enabled_isSet = true;
}

bool OAIApplicationSetting::is_koding_enabled_Set() const{
    return m_koding_enabled_isSet;
}

bool OAIApplicationSetting::is_koding_enabled_Valid() const{
    return m_koding_enabled_isValid;
}

QString OAIApplicationSetting::getKodingUrl() const {
    return m_koding_url;
}
void OAIApplicationSetting::setKodingUrl(const QString &koding_url) {
    m_koding_url = koding_url;
    m_koding_url_isSet = true;
}

bool OAIApplicationSetting::is_koding_url_Set() const{
    return m_koding_url_isSet;
}

bool OAIApplicationSetting::is_koding_url_Valid() const{
    return m_koding_url_isValid;
}

QString OAIApplicationSetting::getMaxAttachmentSize() const {
    return m_max_attachment_size;
}
void OAIApplicationSetting::setMaxAttachmentSize(const QString &max_attachment_size) {
    m_max_attachment_size = max_attachment_size;
    m_max_attachment_size_isSet = true;
}

bool OAIApplicationSetting::is_max_attachment_size_Set() const{
    return m_max_attachment_size_isSet;
}

bool OAIApplicationSetting::is_max_attachment_size_Valid() const{
    return m_max_attachment_size_isValid;
}

QString OAIApplicationSetting::getPlantumlEnabled() const {
    return m_plantuml_enabled;
}
void OAIApplicationSetting::setPlantumlEnabled(const QString &plantuml_enabled) {
    m_plantuml_enabled = plantuml_enabled;
    m_plantuml_enabled_isSet = true;
}

bool OAIApplicationSetting::is_plantuml_enabled_Set() const{
    return m_plantuml_enabled_isSet;
}

bool OAIApplicationSetting::is_plantuml_enabled_Valid() const{
    return m_plantuml_enabled_isValid;
}

QString OAIApplicationSetting::getPlantumlUrl() const {
    return m_plantuml_url;
}
void OAIApplicationSetting::setPlantumlUrl(const QString &plantuml_url) {
    m_plantuml_url = plantuml_url;
    m_plantuml_url_isSet = true;
}

bool OAIApplicationSetting::is_plantuml_url_Set() const{
    return m_plantuml_url_isSet;
}

bool OAIApplicationSetting::is_plantuml_url_Valid() const{
    return m_plantuml_url_isValid;
}

QString OAIApplicationSetting::getRepositoryStorage() const {
    return m_repository_storage;
}
void OAIApplicationSetting::setRepositoryStorage(const QString &repository_storage) {
    m_repository_storage = repository_storage;
    m_repository_storage_isSet = true;
}

bool OAIApplicationSetting::is_repository_storage_Set() const{
    return m_repository_storage_isSet;
}

bool OAIApplicationSetting::is_repository_storage_Valid() const{
    return m_repository_storage_isValid;
}

QString OAIApplicationSetting::getRepositoryStorages() const {
    return m_repository_storages;
}
void OAIApplicationSetting::setRepositoryStorages(const QString &repository_storages) {
    m_repository_storages = repository_storages;
    m_repository_storages_isSet = true;
}

bool OAIApplicationSetting::is_repository_storages_Set() const{
    return m_repository_storages_isSet;
}

bool OAIApplicationSetting::is_repository_storages_Valid() const{
    return m_repository_storages_isValid;
}

QString OAIApplicationSetting::getRestrictedVisibilityLevels() const {
    return m_restricted_visibility_levels;
}
void OAIApplicationSetting::setRestrictedVisibilityLevels(const QString &restricted_visibility_levels) {
    m_restricted_visibility_levels = restricted_visibility_levels;
    m_restricted_visibility_levels_isSet = true;
}

bool OAIApplicationSetting::is_restricted_visibility_levels_Set() const{
    return m_restricted_visibility_levels_isSet;
}

bool OAIApplicationSetting::is_restricted_visibility_levels_Valid() const{
    return m_restricted_visibility_levels_isValid;
}

QString OAIApplicationSetting::getSessionExpireDelay() const {
    return m_session_expire_delay;
}
void OAIApplicationSetting::setSessionExpireDelay(const QString &session_expire_delay) {
    m_session_expire_delay = session_expire_delay;
    m_session_expire_delay_isSet = true;
}

bool OAIApplicationSetting::is_session_expire_delay_Set() const{
    return m_session_expire_delay_isSet;
}

bool OAIApplicationSetting::is_session_expire_delay_Valid() const{
    return m_session_expire_delay_isValid;
}

QString OAIApplicationSetting::getSignInText() const {
    return m_sign_in_text;
}
void OAIApplicationSetting::setSignInText(const QString &sign_in_text) {
    m_sign_in_text = sign_in_text;
    m_sign_in_text_isSet = true;
}

bool OAIApplicationSetting::is_sign_in_text_Set() const{
    return m_sign_in_text_isSet;
}

bool OAIApplicationSetting::is_sign_in_text_Valid() const{
    return m_sign_in_text_isValid;
}

QString OAIApplicationSetting::getSigninEnabled() const {
    return m_signin_enabled;
}
void OAIApplicationSetting::setSigninEnabled(const QString &signin_enabled) {
    m_signin_enabled = signin_enabled;
    m_signin_enabled_isSet = true;
}

bool OAIApplicationSetting::is_signin_enabled_Set() const{
    return m_signin_enabled_isSet;
}

bool OAIApplicationSetting::is_signin_enabled_Valid() const{
    return m_signin_enabled_isValid;
}

QString OAIApplicationSetting::getSignupEnabled() const {
    return m_signup_enabled;
}
void OAIApplicationSetting::setSignupEnabled(const QString &signup_enabled) {
    m_signup_enabled = signup_enabled;
    m_signup_enabled_isSet = true;
}

bool OAIApplicationSetting::is_signup_enabled_Set() const{
    return m_signup_enabled_isSet;
}

bool OAIApplicationSetting::is_signup_enabled_Valid() const{
    return m_signup_enabled_isValid;
}

QString OAIApplicationSetting::getUpdatedAt() const {
    return m_updated_at;
}
void OAIApplicationSetting::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIApplicationSetting::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIApplicationSetting::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIApplicationSetting::getUserOauthApplications() const {
    return m_user_oauth_applications;
}
void OAIApplicationSetting::setUserOauthApplications(const QString &user_oauth_applications) {
    m_user_oauth_applications = user_oauth_applications;
    m_user_oauth_applications_isSet = true;
}

bool OAIApplicationSetting::is_user_oauth_applications_Set() const{
    return m_user_oauth_applications_isSet;
}

bool OAIApplicationSetting::is_user_oauth_applications_Valid() const{
    return m_user_oauth_applications_isValid;
}

bool OAIApplicationSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_after_sign_out_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_after_sign_up_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_registry_token_expire_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_branch_protection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_group_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_project_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_projects_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_snippet_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_blacklist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_blacklist_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_whitelist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gravatar_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_koding_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_koding_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_attachment_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plantuml_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plantuml_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_storages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_visibility_levels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_expire_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_in_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signin_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signup_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_oauth_applications_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
