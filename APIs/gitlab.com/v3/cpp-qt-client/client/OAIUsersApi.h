/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEmail.h"
#include "OAIEvent.h"
#include "OAIPostV3UserKeys_request.h"
#include "OAIPostV3UsersIdEmails_request.h"
#include "OAIPostV3Users_request.h"
#include "OAIPutV3UsersId_request.h"
#include "OAISSHKey.h"
#include "OAIUserBasic.h"
#include "OAIUserPublic.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteV3UsersId(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  email_id qint32 [required]
    */
    virtual void deleteV3UsersIdEmailsEmailId(const qint32 &id, const qint32 &email_id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  key_id qint32 [required]
    */
    virtual void deleteV3UsersIdKeysKeyId(const qint32 &id, const qint32 &key_id);

    /**
    * @param[in]  username QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  active bool [optional]
    * @param[in]  external bool [optional]
    * @param[in]  blocked bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3Users(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &external = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &blocked = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getV3UsersId(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getV3UsersIdEmails(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3UsersIdEvents(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getV3UsersIdKeys(const qint32 &id);

    /**
    * @param[in]  oai_post_v3_users_request OAIPostV3Users_request [required]
    */
    virtual void postV3Users(const OAIPostV3Users_request &oai_post_v3_users_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_post_v3_users_id_emails_request OAIPostV3UsersIdEmails_request [required]
    */
    virtual void postV3UsersIdEmails(const qint32 &id, const OAIPostV3UsersIdEmails_request &oai_post_v3_users_id_emails_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_post_v3_user_keys_request OAIPostV3UserKeys_request [required]
    */
    virtual void postV3UsersIdKeys(const qint32 &id, const OAIPostV3UserKeys_request &oai_post_v3_user_keys_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_users_id_request OAIPutV3UsersId_request [optional]
    */
    virtual void putV3UsersId(const qint32 &id, const ::OpenAPI::OptionalParam<OAIPutV3UsersId_request> &oai_put_v3_users_id_request = ::OpenAPI::OptionalParam<OAIPutV3UsersId_request>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void putV3UsersIdBlock(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void putV3UsersIdUnblock(const qint32 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteV3UsersIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3UsersIdEmailsEmailIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3UsersIdKeysKeyIdCallback(OAIHttpRequestWorker *worker);
    void getV3UsersCallback(OAIHttpRequestWorker *worker);
    void getV3UsersIdCallback(OAIHttpRequestWorker *worker);
    void getV3UsersIdEmailsCallback(OAIHttpRequestWorker *worker);
    void getV3UsersIdEventsCallback(OAIHttpRequestWorker *worker);
    void getV3UsersIdKeysCallback(OAIHttpRequestWorker *worker);
    void postV3UsersCallback(OAIHttpRequestWorker *worker);
    void postV3UsersIdEmailsCallback(OAIHttpRequestWorker *worker);
    void postV3UsersIdKeysCallback(OAIHttpRequestWorker *worker);
    void putV3UsersIdCallback(OAIHttpRequestWorker *worker);
    void putV3UsersIdBlockCallback(OAIHttpRequestWorker *worker);
    void putV3UsersIdUnblockCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteV3UsersIdSignal(OAIEmail summary);
    void deleteV3UsersIdEmailsEmailIdSignal(OAIEmail summary);
    void deleteV3UsersIdKeysKeyIdSignal(OAISSHKey summary);
    void getV3UsersSignal(OAIUserBasic summary);
    void getV3UsersIdSignal(OAIUserBasic summary);
    void getV3UsersIdEmailsSignal(OAIEmail summary);
    void getV3UsersIdEventsSignal(OAIEvent summary);
    void getV3UsersIdKeysSignal(OAISSHKey summary);
    void postV3UsersSignal(OAIUserPublic summary);
    void postV3UsersIdEmailsSignal(OAIEmail summary);
    void postV3UsersIdKeysSignal(OAISSHKey summary);
    void putV3UsersIdSignal(OAIUserPublic summary);
    void putV3UsersIdBlockSignal();
    void putV3UsersIdUnblockSignal();


    void deleteV3UsersIdSignalFull(OAIHttpRequestWorker *worker, OAIEmail summary);
    void deleteV3UsersIdEmailsEmailIdSignalFull(OAIHttpRequestWorker *worker, OAIEmail summary);
    void deleteV3UsersIdKeysKeyIdSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void getV3UsersSignalFull(OAIHttpRequestWorker *worker, OAIUserBasic summary);
    void getV3UsersIdSignalFull(OAIHttpRequestWorker *worker, OAIUserBasic summary);
    void getV3UsersIdEmailsSignalFull(OAIHttpRequestWorker *worker, OAIEmail summary);
    void getV3UsersIdEventsSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void getV3UsersIdKeysSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void postV3UsersSignalFull(OAIHttpRequestWorker *worker, OAIUserPublic summary);
    void postV3UsersIdEmailsSignalFull(OAIHttpRequestWorker *worker, OAIEmail summary);
    void postV3UsersIdKeysSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void putV3UsersIdSignalFull(OAIHttpRequestWorker *worker, OAIUserPublic summary);
    void putV3UsersIdBlockSignalFull(OAIHttpRequestWorker *worker);
    void putV3UsersIdUnblockSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteV3UsersIdSignalError() instead")
    void deleteV3UsersIdSignalE(OAIEmail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3UsersIdSignalError(OAIEmail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3UsersIdEmailsEmailIdSignalError() instead")
    void deleteV3UsersIdEmailsEmailIdSignalE(OAIEmail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3UsersIdEmailsEmailIdSignalError(OAIEmail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3UsersIdKeysKeyIdSignalError() instead")
    void deleteV3UsersIdKeysKeyIdSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3UsersIdKeysKeyIdSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UsersSignalError() instead")
    void getV3UsersSignalE(OAIUserBasic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UsersSignalError(OAIUserBasic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UsersIdSignalError() instead")
    void getV3UsersIdSignalE(OAIUserBasic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UsersIdSignalError(OAIUserBasic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UsersIdEmailsSignalError() instead")
    void getV3UsersIdEmailsSignalE(OAIEmail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UsersIdEmailsSignalError(OAIEmail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UsersIdEventsSignalError() instead")
    void getV3UsersIdEventsSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UsersIdEventsSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UsersIdKeysSignalError() instead")
    void getV3UsersIdKeysSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UsersIdKeysSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3UsersSignalError() instead")
    void postV3UsersSignalE(OAIUserPublic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3UsersSignalError(OAIUserPublic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3UsersIdEmailsSignalError() instead")
    void postV3UsersIdEmailsSignalE(OAIEmail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3UsersIdEmailsSignalError(OAIEmail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3UsersIdKeysSignalError() instead")
    void postV3UsersIdKeysSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3UsersIdKeysSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3UsersIdSignalError() instead")
    void putV3UsersIdSignalE(OAIUserPublic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3UsersIdSignalError(OAIUserPublic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3UsersIdBlockSignalError() instead")
    void putV3UsersIdBlockSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3UsersIdBlockSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3UsersIdUnblockSignalError() instead")
    void putV3UsersIdUnblockSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3UsersIdUnblockSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteV3UsersIdSignalErrorFull() instead")
    void deleteV3UsersIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3UsersIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3UsersIdEmailsEmailIdSignalErrorFull() instead")
    void deleteV3UsersIdEmailsEmailIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3UsersIdEmailsEmailIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3UsersIdKeysKeyIdSignalErrorFull() instead")
    void deleteV3UsersIdKeysKeyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3UsersIdKeysKeyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UsersSignalErrorFull() instead")
    void getV3UsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UsersIdSignalErrorFull() instead")
    void getV3UsersIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UsersIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UsersIdEmailsSignalErrorFull() instead")
    void getV3UsersIdEmailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UsersIdEmailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UsersIdEventsSignalErrorFull() instead")
    void getV3UsersIdEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UsersIdEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UsersIdKeysSignalErrorFull() instead")
    void getV3UsersIdKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UsersIdKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3UsersSignalErrorFull() instead")
    void postV3UsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3UsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3UsersIdEmailsSignalErrorFull() instead")
    void postV3UsersIdEmailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3UsersIdEmailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3UsersIdKeysSignalErrorFull() instead")
    void postV3UsersIdKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3UsersIdKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3UsersIdSignalErrorFull() instead")
    void putV3UsersIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3UsersIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3UsersIdBlockSignalErrorFull() instead")
    void putV3UsersIdBlockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3UsersIdBlockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3UsersIdUnblockSignalErrorFull() instead")
    void putV3UsersIdUnblockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3UsersIdUnblockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
