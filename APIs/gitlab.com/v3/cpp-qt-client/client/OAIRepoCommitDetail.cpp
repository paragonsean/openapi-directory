/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepoCommitDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepoCommitDetail::OAIRepoCommitDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepoCommitDetail::OAIRepoCommitDetail() {
    this->initializeModel();
}

OAIRepoCommitDetail::~OAIRepoCommitDetail() {}

void OAIRepoCommitDetail::initializeModel() {

    m_author_email_isSet = false;
    m_author_email_isValid = false;

    m_author_name_isSet = false;
    m_author_name_isValid = false;

    m_authored_date_isSet = false;
    m_authored_date_isValid = false;

    m_committed_date_isSet = false;
    m_committed_date_isValid = false;

    m_committer_email_isSet = false;
    m_committer_email_isValid = false;

    m_committer_name_isSet = false;
    m_committer_name_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_parent_ids_isSet = false;
    m_parent_ids_isValid = false;

    m_short_id_isSet = false;
    m_short_id_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIRepoCommitDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepoCommitDetail::fromJsonObject(QJsonObject json) {

    m_author_email_isValid = ::OpenAPI::fromJsonValue(m_author_email, json[QString("author_email")]);
    m_author_email_isSet = !json[QString("author_email")].isNull() && m_author_email_isValid;

    m_author_name_isValid = ::OpenAPI::fromJsonValue(m_author_name, json[QString("author_name")]);
    m_author_name_isSet = !json[QString("author_name")].isNull() && m_author_name_isValid;

    m_authored_date_isValid = ::OpenAPI::fromJsonValue(m_authored_date, json[QString("authored_date")]);
    m_authored_date_isSet = !json[QString("authored_date")].isNull() && m_authored_date_isValid;

    m_committed_date_isValid = ::OpenAPI::fromJsonValue(m_committed_date, json[QString("committed_date")]);
    m_committed_date_isSet = !json[QString("committed_date")].isNull() && m_committed_date_isValid;

    m_committer_email_isValid = ::OpenAPI::fromJsonValue(m_committer_email, json[QString("committer_email")]);
    m_committer_email_isSet = !json[QString("committer_email")].isNull() && m_committer_email_isValid;

    m_committer_name_isValid = ::OpenAPI::fromJsonValue(m_committer_name, json[QString("committer_name")]);
    m_committer_name_isSet = !json[QString("committer_name")].isNull() && m_committer_name_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_parent_ids_isValid = ::OpenAPI::fromJsonValue(m_parent_ids, json[QString("parent_ids")]);
    m_parent_ids_isSet = !json[QString("parent_ids")].isNull() && m_parent_ids_isValid;

    m_short_id_isValid = ::OpenAPI::fromJsonValue(m_short_id, json[QString("short_id")]);
    m_short_id_isSet = !json[QString("short_id")].isNull() && m_short_id_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIRepoCommitDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepoCommitDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_author_email_isSet) {
        obj.insert(QString("author_email"), ::OpenAPI::toJsonValue(m_author_email));
    }
    if (m_author_name_isSet) {
        obj.insert(QString("author_name"), ::OpenAPI::toJsonValue(m_author_name));
    }
    if (m_authored_date_isSet) {
        obj.insert(QString("authored_date"), ::OpenAPI::toJsonValue(m_authored_date));
    }
    if (m_committed_date_isSet) {
        obj.insert(QString("committed_date"), ::OpenAPI::toJsonValue(m_committed_date));
    }
    if (m_committer_email_isSet) {
        obj.insert(QString("committer_email"), ::OpenAPI::toJsonValue(m_committer_email));
    }
    if (m_committer_name_isSet) {
        obj.insert(QString("committer_name"), ::OpenAPI::toJsonValue(m_committer_name));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_parent_ids_isSet) {
        obj.insert(QString("parent_ids"), ::OpenAPI::toJsonValue(m_parent_ids));
    }
    if (m_short_id_isSet) {
        obj.insert(QString("short_id"), ::OpenAPI::toJsonValue(m_short_id));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIRepoCommitDetail::getAuthorEmail() const {
    return m_author_email;
}
void OAIRepoCommitDetail::setAuthorEmail(const QString &author_email) {
    m_author_email = author_email;
    m_author_email_isSet = true;
}

bool OAIRepoCommitDetail::is_author_email_Set() const{
    return m_author_email_isSet;
}

bool OAIRepoCommitDetail::is_author_email_Valid() const{
    return m_author_email_isValid;
}

QString OAIRepoCommitDetail::getAuthorName() const {
    return m_author_name;
}
void OAIRepoCommitDetail::setAuthorName(const QString &author_name) {
    m_author_name = author_name;
    m_author_name_isSet = true;
}

bool OAIRepoCommitDetail::is_author_name_Set() const{
    return m_author_name_isSet;
}

bool OAIRepoCommitDetail::is_author_name_Valid() const{
    return m_author_name_isValid;
}

QString OAIRepoCommitDetail::getAuthoredDate() const {
    return m_authored_date;
}
void OAIRepoCommitDetail::setAuthoredDate(const QString &authored_date) {
    m_authored_date = authored_date;
    m_authored_date_isSet = true;
}

bool OAIRepoCommitDetail::is_authored_date_Set() const{
    return m_authored_date_isSet;
}

bool OAIRepoCommitDetail::is_authored_date_Valid() const{
    return m_authored_date_isValid;
}

QString OAIRepoCommitDetail::getCommittedDate() const {
    return m_committed_date;
}
void OAIRepoCommitDetail::setCommittedDate(const QString &committed_date) {
    m_committed_date = committed_date;
    m_committed_date_isSet = true;
}

bool OAIRepoCommitDetail::is_committed_date_Set() const{
    return m_committed_date_isSet;
}

bool OAIRepoCommitDetail::is_committed_date_Valid() const{
    return m_committed_date_isValid;
}

QString OAIRepoCommitDetail::getCommitterEmail() const {
    return m_committer_email;
}
void OAIRepoCommitDetail::setCommitterEmail(const QString &committer_email) {
    m_committer_email = committer_email;
    m_committer_email_isSet = true;
}

bool OAIRepoCommitDetail::is_committer_email_Set() const{
    return m_committer_email_isSet;
}

bool OAIRepoCommitDetail::is_committer_email_Valid() const{
    return m_committer_email_isValid;
}

QString OAIRepoCommitDetail::getCommitterName() const {
    return m_committer_name;
}
void OAIRepoCommitDetail::setCommitterName(const QString &committer_name) {
    m_committer_name = committer_name;
    m_committer_name_isSet = true;
}

bool OAIRepoCommitDetail::is_committer_name_Set() const{
    return m_committer_name_isSet;
}

bool OAIRepoCommitDetail::is_committer_name_Valid() const{
    return m_committer_name_isValid;
}

QString OAIRepoCommitDetail::getCreatedAt() const {
    return m_created_at;
}
void OAIRepoCommitDetail::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRepoCommitDetail::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRepoCommitDetail::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIRepoCommitDetail::getId() const {
    return m_id;
}
void OAIRepoCommitDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRepoCommitDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRepoCommitDetail::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRepoCommitDetail::getMessage() const {
    return m_message;
}
void OAIRepoCommitDetail::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIRepoCommitDetail::is_message_Set() const{
    return m_message_isSet;
}

bool OAIRepoCommitDetail::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIRepoCommitDetail::getParentIds() const {
    return m_parent_ids;
}
void OAIRepoCommitDetail::setParentIds(const QString &parent_ids) {
    m_parent_ids = parent_ids;
    m_parent_ids_isSet = true;
}

bool OAIRepoCommitDetail::is_parent_ids_Set() const{
    return m_parent_ids_isSet;
}

bool OAIRepoCommitDetail::is_parent_ids_Valid() const{
    return m_parent_ids_isValid;
}

QString OAIRepoCommitDetail::getShortId() const {
    return m_short_id;
}
void OAIRepoCommitDetail::setShortId(const QString &short_id) {
    m_short_id = short_id;
    m_short_id_isSet = true;
}

bool OAIRepoCommitDetail::is_short_id_Set() const{
    return m_short_id_isSet;
}

bool OAIRepoCommitDetail::is_short_id_Valid() const{
    return m_short_id_isValid;
}

OAIRepoCommitStats OAIRepoCommitDetail::getStats() const {
    return m_stats;
}
void OAIRepoCommitDetail::setStats(const OAIRepoCommitStats &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIRepoCommitDetail::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIRepoCommitDetail::is_stats_Valid() const{
    return m_stats_isValid;
}

QString OAIRepoCommitDetail::getStatus() const {
    return m_status;
}
void OAIRepoCommitDetail::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRepoCommitDetail::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRepoCommitDetail::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRepoCommitDetail::getTitle() const {
    return m_title;
}
void OAIRepoCommitDetail::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIRepoCommitDetail::is_title_Set() const{
    return m_title_isSet;
}

bool OAIRepoCommitDetail::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIRepoCommitDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authored_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepoCommitDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
