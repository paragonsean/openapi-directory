/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutV3ProjectsIdServicesSlack_request.h
 *
 * 
 */

#ifndef OAIPutV3ProjectsIdServicesSlack_request_H
#define OAIPutV3ProjectsIdServicesSlack_request_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPutV3ProjectsIdServicesSlack_request : public OAIObject {
public:
    OAIPutV3ProjectsIdServicesSlack_request();
    OAIPutV3ProjectsIdServicesSlack_request(QString json);
    ~OAIPutV3ProjectsIdServicesSlack_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getWebhook() const;
    void setWebhook(const QString &webhook);
    bool is_webhook_Set() const;
    bool is_webhook_Valid() const;

    QString getNewIssueUrl() const;
    void setNewIssueUrl(const QString &new_issue_url);
    bool is_new_issue_url_Set() const;
    bool is_new_issue_url_Valid() const;

    QString getChannel() const;
    void setChannel(const QString &channel);
    bool is_channel_Set() const;
    bool is_channel_Valid() const;

    QString getPushEvents() const;
    void setPushEvents(const QString &push_events);
    bool is_push_events_Set() const;
    bool is_push_events_Valid() const;

    QString getIssueEvents() const;
    void setIssueEvents(const QString &issue_events);
    bool is_issue_events_Set() const;
    bool is_issue_events_Valid() const;

    QString getConfidentialIssueEvents() const;
    void setConfidentialIssueEvents(const QString &confidential_issue_events);
    bool is_confidential_issue_events_Set() const;
    bool is_confidential_issue_events_Valid() const;

    QString getMergeRequestEvents() const;
    void setMergeRequestEvents(const QString &merge_request_events);
    bool is_merge_request_events_Set() const;
    bool is_merge_request_events_Valid() const;

    QString getNoteEvents() const;
    void setNoteEvents(const QString &note_events);
    bool is_note_events_Set() const;
    bool is_note_events_Valid() const;

    QString getTagPushEvents() const;
    void setTagPushEvents(const QString &tag_push_events);
    bool is_tag_push_events_Set() const;
    bool is_tag_push_events_Valid() const;

    QString getBuildEvents() const;
    void setBuildEvents(const QString &build_events);
    bool is_build_events_Set() const;
    bool is_build_events_Valid() const;

    QString getPipelineEvents() const;
    void setPipelineEvents(const QString &pipeline_events);
    bool is_pipeline_events_Set() const;
    bool is_pipeline_events_Valid() const;

    QString getWikiPageEvents() const;
    void setWikiPageEvents(const QString &wiki_page_events);
    bool is_wiki_page_events_Set() const;
    bool is_wiki_page_events_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_webhook;
    bool m_webhook_isSet;
    bool m_webhook_isValid;

    QString m_new_issue_url;
    bool m_new_issue_url_isSet;
    bool m_new_issue_url_isValid;

    QString m_channel;
    bool m_channel_isSet;
    bool m_channel_isValid;

    QString m_push_events;
    bool m_push_events_isSet;
    bool m_push_events_isValid;

    QString m_issue_events;
    bool m_issue_events_isSet;
    bool m_issue_events_isValid;

    QString m_confidential_issue_events;
    bool m_confidential_issue_events_isSet;
    bool m_confidential_issue_events_isValid;

    QString m_merge_request_events;
    bool m_merge_request_events_isSet;
    bool m_merge_request_events_isValid;

    QString m_note_events;
    bool m_note_events_isSet;
    bool m_note_events_isValid;

    QString m_tag_push_events;
    bool m_tag_push_events_isSet;
    bool m_tag_push_events_isValid;

    QString m_build_events;
    bool m_build_events_isSet;
    bool m_build_events_isValid;

    QString m_pipeline_events;
    bool m_pipeline_events_isSet;
    bool m_pipeline_events_isValid;

    QString m_wiki_page_events;
    bool m_wiki_page_events_isSet;
    bool m_wiki_page_events_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutV3ProjectsIdServicesSlack_request)

#endif // OAIPutV3ProjectsIdServicesSlack_request_H
