/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuild.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuild::OAIBuild(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuild::OAIBuild() {
    this->initializeModel();
}

OAIBuild::~OAIBuild() {}

void OAIBuild::initializeModel() {

    m_artifacts_file_isSet = false;
    m_artifacts_file_isValid = false;

    m_commit_isSet = false;
    m_commit_isValid = false;

    m_coverage_isSet = false;
    m_coverage_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_finished_at_isSet = false;
    m_finished_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pipeline_isSet = false;
    m_pipeline_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_runner_isSet = false;
    m_runner_isValid = false;

    m_stage_isSet = false;
    m_stage_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIBuild::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuild::fromJsonObject(QJsonObject json) {

    m_artifacts_file_isValid = ::OpenAPI::fromJsonValue(m_artifacts_file, json[QString("artifacts_file")]);
    m_artifacts_file_isSet = !json[QString("artifacts_file")].isNull() && m_artifacts_file_isValid;

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;

    m_coverage_isValid = ::OpenAPI::fromJsonValue(m_coverage, json[QString("coverage")]);
    m_coverage_isSet = !json[QString("coverage")].isNull() && m_coverage_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_finished_at_isValid = ::OpenAPI::fromJsonValue(m_finished_at, json[QString("finished_at")]);
    m_finished_at_isSet = !json[QString("finished_at")].isNull() && m_finished_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pipeline_isValid = ::OpenAPI::fromJsonValue(m_pipeline, json[QString("pipeline")]);
    m_pipeline_isSet = !json[QString("pipeline")].isNull() && m_pipeline_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_runner_isValid = ::OpenAPI::fromJsonValue(m_runner, json[QString("runner")]);
    m_runner_isSet = !json[QString("runner")].isNull() && m_runner_isValid;

    m_stage_isValid = ::OpenAPI::fromJsonValue(m_stage, json[QString("stage")]);
    m_stage_isSet = !json[QString("stage")].isNull() && m_stage_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("started_at")]);
    m_started_at_isSet = !json[QString("started_at")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIBuild::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuild::asJsonObject() const {
    QJsonObject obj;
    if (m_artifacts_file.isSet()) {
        obj.insert(QString("artifacts_file"), ::OpenAPI::toJsonValue(m_artifacts_file));
    }
    if (m_commit.isSet()) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    if (m_coverage_isSet) {
        obj.insert(QString("coverage"), ::OpenAPI::toJsonValue(m_coverage));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_finished_at_isSet) {
        obj.insert(QString("finished_at"), ::OpenAPI::toJsonValue(m_finished_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pipeline.isSet()) {
        obj.insert(QString("pipeline"), ::OpenAPI::toJsonValue(m_pipeline));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_runner.isSet()) {
        obj.insert(QString("runner"), ::OpenAPI::toJsonValue(m_runner));
    }
    if (m_stage_isSet) {
        obj.insert(QString("stage"), ::OpenAPI::toJsonValue(m_stage));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("started_at"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIBuildArtifactFile OAIBuild::getArtifactsFile() const {
    return m_artifacts_file;
}
void OAIBuild::setArtifactsFile(const OAIBuildArtifactFile &artifacts_file) {
    m_artifacts_file = artifacts_file;
    m_artifacts_file_isSet = true;
}

bool OAIBuild::is_artifacts_file_Set() const{
    return m_artifacts_file_isSet;
}

bool OAIBuild::is_artifacts_file_Valid() const{
    return m_artifacts_file_isValid;
}

OAIRepoCommit OAIBuild::getCommit() const {
    return m_commit;
}
void OAIBuild::setCommit(const OAIRepoCommit &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAIBuild::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAIBuild::is_commit_Valid() const{
    return m_commit_isValid;
}

QString OAIBuild::getCoverage() const {
    return m_coverage;
}
void OAIBuild::setCoverage(const QString &coverage) {
    m_coverage = coverage;
    m_coverage_isSet = true;
}

bool OAIBuild::is_coverage_Set() const{
    return m_coverage_isSet;
}

bool OAIBuild::is_coverage_Valid() const{
    return m_coverage_isValid;
}

QString OAIBuild::getCreatedAt() const {
    return m_created_at;
}
void OAIBuild::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIBuild::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIBuild::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIBuild::getFinishedAt() const {
    return m_finished_at;
}
void OAIBuild::setFinishedAt(const QString &finished_at) {
    m_finished_at = finished_at;
    m_finished_at_isSet = true;
}

bool OAIBuild::is_finished_at_Set() const{
    return m_finished_at_isSet;
}

bool OAIBuild::is_finished_at_Valid() const{
    return m_finished_at_isValid;
}

QString OAIBuild::getId() const {
    return m_id;
}
void OAIBuild::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBuild::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBuild::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBuild::getName() const {
    return m_name;
}
void OAIBuild::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBuild::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBuild::is_name_Valid() const{
    return m_name_isValid;
}

OAIPipelineBasic OAIBuild::getPipeline() const {
    return m_pipeline;
}
void OAIBuild::setPipeline(const OAIPipelineBasic &pipeline) {
    m_pipeline = pipeline;
    m_pipeline_isSet = true;
}

bool OAIBuild::is_pipeline_Set() const{
    return m_pipeline_isSet;
}

bool OAIBuild::is_pipeline_Valid() const{
    return m_pipeline_isValid;
}

QString OAIBuild::getRef() const {
    return m_ref;
}
void OAIBuild::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAIBuild::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAIBuild::is_ref_Valid() const{
    return m_ref_isValid;
}

OAIRunner OAIBuild::getRunner() const {
    return m_runner;
}
void OAIBuild::setRunner(const OAIRunner &runner) {
    m_runner = runner;
    m_runner_isSet = true;
}

bool OAIBuild::is_runner_Set() const{
    return m_runner_isSet;
}

bool OAIBuild::is_runner_Valid() const{
    return m_runner_isValid;
}

QString OAIBuild::getStage() const {
    return m_stage;
}
void OAIBuild::setStage(const QString &stage) {
    m_stage = stage;
    m_stage_isSet = true;
}

bool OAIBuild::is_stage_Set() const{
    return m_stage_isSet;
}

bool OAIBuild::is_stage_Valid() const{
    return m_stage_isValid;
}

QString OAIBuild::getStartedAt() const {
    return m_started_at;
}
void OAIBuild::setStartedAt(const QString &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIBuild::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIBuild::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAIBuild::getStatus() const {
    return m_status;
}
void OAIBuild::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBuild::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBuild::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBuild::getTag() const {
    return m_tag;
}
void OAIBuild::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIBuild::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIBuild::is_tag_Valid() const{
    return m_tag_isValid;
}

OAIUser OAIBuild::getUser() const {
    return m_user;
}
void OAIBuild::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIBuild::is_user_Set() const{
    return m_user_isSet;
}

bool OAIBuild::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIBuild::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifacts_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuild::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
