/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3GroupsId_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3GroupsId_request::OAIPutV3GroupsId_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3GroupsId_request::OAIPutV3GroupsId_request() {
    this->initializeModel();
}

OAIPutV3GroupsId_request::~OAIPutV3GroupsId_request() {}

void OAIPutV3GroupsId_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_visibility_level_isSet = false;
    m_visibility_level_isValid = false;

    m_lfs_enabled_isSet = false;
    m_lfs_enabled_isValid = false;

    m_request_access_enabled_isSet = false;
    m_request_access_enabled_isValid = false;
}

void OAIPutV3GroupsId_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3GroupsId_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_visibility_level_isValid = ::OpenAPI::fromJsonValue(m_visibility_level, json[QString("visibility_level")]);
    m_visibility_level_isSet = !json[QString("visibility_level")].isNull() && m_visibility_level_isValid;

    m_lfs_enabled_isValid = ::OpenAPI::fromJsonValue(m_lfs_enabled, json[QString("lfs_enabled")]);
    m_lfs_enabled_isSet = !json[QString("lfs_enabled")].isNull() && m_lfs_enabled_isValid;

    m_request_access_enabled_isValid = ::OpenAPI::fromJsonValue(m_request_access_enabled, json[QString("request_access_enabled")]);
    m_request_access_enabled_isSet = !json[QString("request_access_enabled")].isNull() && m_request_access_enabled_isValid;
}

QString OAIPutV3GroupsId_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3GroupsId_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_visibility_level_isSet) {
        obj.insert(QString("visibility_level"), ::OpenAPI::toJsonValue(m_visibility_level));
    }
    if (m_lfs_enabled_isSet) {
        obj.insert(QString("lfs_enabled"), ::OpenAPI::toJsonValue(m_lfs_enabled));
    }
    if (m_request_access_enabled_isSet) {
        obj.insert(QString("request_access_enabled"), ::OpenAPI::toJsonValue(m_request_access_enabled));
    }
    return obj;
}

QString OAIPutV3GroupsId_request::getName() const {
    return m_name;
}
void OAIPutV3GroupsId_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPutV3GroupsId_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPutV3GroupsId_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPutV3GroupsId_request::getPath() const {
    return m_path;
}
void OAIPutV3GroupsId_request::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIPutV3GroupsId_request::is_path_Set() const{
    return m_path_isSet;
}

bool OAIPutV3GroupsId_request::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIPutV3GroupsId_request::getDescription() const {
    return m_description;
}
void OAIPutV3GroupsId_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPutV3GroupsId_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPutV3GroupsId_request::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIPutV3GroupsId_request::getVisibilityLevel() const {
    return m_visibility_level;
}
void OAIPutV3GroupsId_request::setVisibilityLevel(const qint32 &visibility_level) {
    m_visibility_level = visibility_level;
    m_visibility_level_isSet = true;
}

bool OAIPutV3GroupsId_request::is_visibility_level_Set() const{
    return m_visibility_level_isSet;
}

bool OAIPutV3GroupsId_request::is_visibility_level_Valid() const{
    return m_visibility_level_isValid;
}

bool OAIPutV3GroupsId_request::isLfsEnabled() const {
    return m_lfs_enabled;
}
void OAIPutV3GroupsId_request::setLfsEnabled(const bool &lfs_enabled) {
    m_lfs_enabled = lfs_enabled;
    m_lfs_enabled_isSet = true;
}

bool OAIPutV3GroupsId_request::is_lfs_enabled_Set() const{
    return m_lfs_enabled_isSet;
}

bool OAIPutV3GroupsId_request::is_lfs_enabled_Valid() const{
    return m_lfs_enabled_isValid;
}

bool OAIPutV3GroupsId_request::isRequestAccessEnabled() const {
    return m_request_access_enabled;
}
void OAIPutV3GroupsId_request::setRequestAccessEnabled(const bool &request_access_enabled) {
    m_request_access_enabled = request_access_enabled;
    m_request_access_enabled_isSet = true;
}

bool OAIPutV3GroupsId_request::is_request_access_enabled_Set() const{
    return m_request_access_enabled_isSet;
}

bool OAIPutV3GroupsId_request::is_request_access_enabled_Valid() const{
    return m_request_access_enabled_isValid;
}

bool OAIPutV3GroupsId_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lfs_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_access_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3GroupsId_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
