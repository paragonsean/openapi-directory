/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3ApplicationSettings_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3ApplicationSettings_request::OAIPutV3ApplicationSettings_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3ApplicationSettings_request::OAIPutV3ApplicationSettings_request() {
    this->initializeModel();
}

OAIPutV3ApplicationSettings_request::~OAIPutV3ApplicationSettings_request() {}

void OAIPutV3ApplicationSettings_request::initializeModel() {

    m_default_branch_protection_isSet = false;
    m_default_branch_protection_isValid = false;

    m_default_project_visibility_isSet = false;
    m_default_project_visibility_isValid = false;

    m_default_snippet_visibility_isSet = false;
    m_default_snippet_visibility_isValid = false;

    m_default_group_visibility_isSet = false;
    m_default_group_visibility_isValid = false;

    m_restricted_visibility_levels_isSet = false;
    m_restricted_visibility_levels_isValid = false;

    m_import_sources_isSet = false;
    m_import_sources_isValid = false;

    m_disabled_oauth_sign_in_sources_isSet = false;
    m_disabled_oauth_sign_in_sources_isValid = false;

    m_enabled_git_access_protocol_isSet = false;
    m_enabled_git_access_protocol_isValid = false;

    m_gravatar_enabled_isSet = false;
    m_gravatar_enabled_isValid = false;

    m_default_projects_limit_isSet = false;
    m_default_projects_limit_isValid = false;

    m_max_attachment_size_isSet = false;
    m_max_attachment_size_isValid = false;

    m_session_expire_delay_isSet = false;
    m_session_expire_delay_isValid = false;

    m_user_oauth_applications_isSet = false;
    m_user_oauth_applications_isValid = false;

    m_user_default_external_isSet = false;
    m_user_default_external_isValid = false;

    m_signup_enabled_isSet = false;
    m_signup_enabled_isValid = false;

    m_send_user_confirmation_email_isSet = false;
    m_send_user_confirmation_email_isValid = false;

    m_domain_whitelist_isSet = false;
    m_domain_whitelist_isValid = false;

    m_domain_blacklist_enabled_isSet = false;
    m_domain_blacklist_enabled_isValid = false;

    m_domain_blacklist_isSet = false;
    m_domain_blacklist_isValid = false;

    m_after_sign_up_text_isSet = false;
    m_after_sign_up_text_isValid = false;

    m_signin_enabled_isSet = false;
    m_signin_enabled_isValid = false;

    m_require_two_factor_authentication_isSet = false;
    m_require_two_factor_authentication_isValid = false;

    m_two_factor_grace_period_isSet = false;
    m_two_factor_grace_period_isValid = false;

    m_home_page_url_isSet = false;
    m_home_page_url_isValid = false;

    m_after_sign_out_path_isSet = false;
    m_after_sign_out_path_isValid = false;

    m_sign_in_text_isSet = false;
    m_sign_in_text_isValid = false;

    m_help_page_text_isSet = false;
    m_help_page_text_isValid = false;

    m_shared_runners_enabled_isSet = false;
    m_shared_runners_enabled_isValid = false;

    m_shared_runners_text_isSet = false;
    m_shared_runners_text_isValid = false;

    m_max_artifacts_size_isSet = false;
    m_max_artifacts_size_isValid = false;

    m_container_registry_token_expire_delay_isSet = false;
    m_container_registry_token_expire_delay_isValid = false;

    m_metrics_enabled_isSet = false;
    m_metrics_enabled_isValid = false;

    m_metrics_host_isSet = false;
    m_metrics_host_isValid = false;

    m_metrics_port_isSet = false;
    m_metrics_port_isValid = false;

    m_metrics_pool_size_isSet = false;
    m_metrics_pool_size_isValid = false;

    m_metrics_timeout_isSet = false;
    m_metrics_timeout_isValid = false;

    m_metrics_method_call_threshold_isSet = false;
    m_metrics_method_call_threshold_isValid = false;

    m_metrics_sample_interval_isSet = false;
    m_metrics_sample_interval_isValid = false;

    m_metrics_packet_size_isSet = false;
    m_metrics_packet_size_isValid = false;

    m_sidekiq_throttling_enabled_isSet = false;
    m_sidekiq_throttling_enabled_isValid = false;

    m_sidekiq_throttling_queus_isSet = false;
    m_sidekiq_throttling_queus_isValid = false;

    m_sidekiq_throttling_factor_isSet = false;
    m_sidekiq_throttling_factor_isValid = false;

    m_recaptcha_enabled_isSet = false;
    m_recaptcha_enabled_isValid = false;

    m_recaptcha_site_key_isSet = false;
    m_recaptcha_site_key_isValid = false;

    m_recaptcha_private_key_isSet = false;
    m_recaptcha_private_key_isValid = false;

    m_akismet_enabled_isSet = false;
    m_akismet_enabled_isValid = false;

    m_akismet_api_key_isSet = false;
    m_akismet_api_key_isValid = false;

    m_admin_notification_email_isSet = false;
    m_admin_notification_email_isValid = false;

    m_sentry_enabled_isSet = false;
    m_sentry_enabled_isValid = false;

    m_sentry_dsn_isSet = false;
    m_sentry_dsn_isValid = false;

    m_repository_storage_isSet = false;
    m_repository_storage_isValid = false;

    m_repository_checks_enabled_isSet = false;
    m_repository_checks_enabled_isValid = false;

    m_koding_enabled_isSet = false;
    m_koding_enabled_isValid = false;

    m_koding_url_isSet = false;
    m_koding_url_isValid = false;

    m_plantuml_enabled_isSet = false;
    m_plantuml_enabled_isValid = false;

    m_plantuml_url_isSet = false;
    m_plantuml_url_isValid = false;

    m_version_check_enabled_isSet = false;
    m_version_check_enabled_isValid = false;

    m_email_author_in_body_isSet = false;
    m_email_author_in_body_isValid = false;

    m_html_emails_enabled_isSet = false;
    m_html_emails_enabled_isValid = false;

    m_housekeeping_enabled_isSet = false;
    m_housekeeping_enabled_isValid = false;

    m_housekeeping_bitmaps_enabled_isSet = false;
    m_housekeeping_bitmaps_enabled_isValid = false;

    m_housekeeping_incremental_repack_period_isSet = false;
    m_housekeeping_incremental_repack_period_isValid = false;

    m_housekeeping_full_repack_period_isSet = false;
    m_housekeeping_full_repack_period_isValid = false;

    m_housekeeping_gc_period_isSet = false;
    m_housekeeping_gc_period_isValid = false;
}

void OAIPutV3ApplicationSettings_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3ApplicationSettings_request::fromJsonObject(QJsonObject json) {

    m_default_branch_protection_isValid = ::OpenAPI::fromJsonValue(m_default_branch_protection, json[QString("default_branch_protection")]);
    m_default_branch_protection_isSet = !json[QString("default_branch_protection")].isNull() && m_default_branch_protection_isValid;

    m_default_project_visibility_isValid = ::OpenAPI::fromJsonValue(m_default_project_visibility, json[QString("default_project_visibility")]);
    m_default_project_visibility_isSet = !json[QString("default_project_visibility")].isNull() && m_default_project_visibility_isValid;

    m_default_snippet_visibility_isValid = ::OpenAPI::fromJsonValue(m_default_snippet_visibility, json[QString("default_snippet_visibility")]);
    m_default_snippet_visibility_isSet = !json[QString("default_snippet_visibility")].isNull() && m_default_snippet_visibility_isValid;

    m_default_group_visibility_isValid = ::OpenAPI::fromJsonValue(m_default_group_visibility, json[QString("default_group_visibility")]);
    m_default_group_visibility_isSet = !json[QString("default_group_visibility")].isNull() && m_default_group_visibility_isValid;

    m_restricted_visibility_levels_isValid = ::OpenAPI::fromJsonValue(m_restricted_visibility_levels, json[QString("restricted_visibility_levels")]);
    m_restricted_visibility_levels_isSet = !json[QString("restricted_visibility_levels")].isNull() && m_restricted_visibility_levels_isValid;

    m_import_sources_isValid = ::OpenAPI::fromJsonValue(m_import_sources, json[QString("import_sources")]);
    m_import_sources_isSet = !json[QString("import_sources")].isNull() && m_import_sources_isValid;

    m_disabled_oauth_sign_in_sources_isValid = ::OpenAPI::fromJsonValue(m_disabled_oauth_sign_in_sources, json[QString("disabled_oauth_sign_in_sources")]);
    m_disabled_oauth_sign_in_sources_isSet = !json[QString("disabled_oauth_sign_in_sources")].isNull() && m_disabled_oauth_sign_in_sources_isValid;

    m_enabled_git_access_protocol_isValid = ::OpenAPI::fromJsonValue(m_enabled_git_access_protocol, json[QString("enabled_git_access_protocol")]);
    m_enabled_git_access_protocol_isSet = !json[QString("enabled_git_access_protocol")].isNull() && m_enabled_git_access_protocol_isValid;

    m_gravatar_enabled_isValid = ::OpenAPI::fromJsonValue(m_gravatar_enabled, json[QString("gravatar_enabled")]);
    m_gravatar_enabled_isSet = !json[QString("gravatar_enabled")].isNull() && m_gravatar_enabled_isValid;

    m_default_projects_limit_isValid = ::OpenAPI::fromJsonValue(m_default_projects_limit, json[QString("default_projects_limit")]);
    m_default_projects_limit_isSet = !json[QString("default_projects_limit")].isNull() && m_default_projects_limit_isValid;

    m_max_attachment_size_isValid = ::OpenAPI::fromJsonValue(m_max_attachment_size, json[QString("max_attachment_size")]);
    m_max_attachment_size_isSet = !json[QString("max_attachment_size")].isNull() && m_max_attachment_size_isValid;

    m_session_expire_delay_isValid = ::OpenAPI::fromJsonValue(m_session_expire_delay, json[QString("session_expire_delay")]);
    m_session_expire_delay_isSet = !json[QString("session_expire_delay")].isNull() && m_session_expire_delay_isValid;

    m_user_oauth_applications_isValid = ::OpenAPI::fromJsonValue(m_user_oauth_applications, json[QString("user_oauth_applications")]);
    m_user_oauth_applications_isSet = !json[QString("user_oauth_applications")].isNull() && m_user_oauth_applications_isValid;

    m_user_default_external_isValid = ::OpenAPI::fromJsonValue(m_user_default_external, json[QString("user_default_external")]);
    m_user_default_external_isSet = !json[QString("user_default_external")].isNull() && m_user_default_external_isValid;

    m_signup_enabled_isValid = ::OpenAPI::fromJsonValue(m_signup_enabled, json[QString("signup_enabled")]);
    m_signup_enabled_isSet = !json[QString("signup_enabled")].isNull() && m_signup_enabled_isValid;

    m_send_user_confirmation_email_isValid = ::OpenAPI::fromJsonValue(m_send_user_confirmation_email, json[QString("send_user_confirmation_email")]);
    m_send_user_confirmation_email_isSet = !json[QString("send_user_confirmation_email")].isNull() && m_send_user_confirmation_email_isValid;

    m_domain_whitelist_isValid = ::OpenAPI::fromJsonValue(m_domain_whitelist, json[QString("domain_whitelist")]);
    m_domain_whitelist_isSet = !json[QString("domain_whitelist")].isNull() && m_domain_whitelist_isValid;

    m_domain_blacklist_enabled_isValid = ::OpenAPI::fromJsonValue(m_domain_blacklist_enabled, json[QString("domain_blacklist_enabled")]);
    m_domain_blacklist_enabled_isSet = !json[QString("domain_blacklist_enabled")].isNull() && m_domain_blacklist_enabled_isValid;

    m_domain_blacklist_isValid = ::OpenAPI::fromJsonValue(m_domain_blacklist, json[QString("domain_blacklist")]);
    m_domain_blacklist_isSet = !json[QString("domain_blacklist")].isNull() && m_domain_blacklist_isValid;

    m_after_sign_up_text_isValid = ::OpenAPI::fromJsonValue(m_after_sign_up_text, json[QString("after_sign_up_text")]);
    m_after_sign_up_text_isSet = !json[QString("after_sign_up_text")].isNull() && m_after_sign_up_text_isValid;

    m_signin_enabled_isValid = ::OpenAPI::fromJsonValue(m_signin_enabled, json[QString("signin_enabled")]);
    m_signin_enabled_isSet = !json[QString("signin_enabled")].isNull() && m_signin_enabled_isValid;

    m_require_two_factor_authentication_isValid = ::OpenAPI::fromJsonValue(m_require_two_factor_authentication, json[QString("require_two_factor_authentication")]);
    m_require_two_factor_authentication_isSet = !json[QString("require_two_factor_authentication")].isNull() && m_require_two_factor_authentication_isValid;

    m_two_factor_grace_period_isValid = ::OpenAPI::fromJsonValue(m_two_factor_grace_period, json[QString("two_factor_grace_period")]);
    m_two_factor_grace_period_isSet = !json[QString("two_factor_grace_period")].isNull() && m_two_factor_grace_period_isValid;

    m_home_page_url_isValid = ::OpenAPI::fromJsonValue(m_home_page_url, json[QString("home_page_url")]);
    m_home_page_url_isSet = !json[QString("home_page_url")].isNull() && m_home_page_url_isValid;

    m_after_sign_out_path_isValid = ::OpenAPI::fromJsonValue(m_after_sign_out_path, json[QString("after_sign_out_path")]);
    m_after_sign_out_path_isSet = !json[QString("after_sign_out_path")].isNull() && m_after_sign_out_path_isValid;

    m_sign_in_text_isValid = ::OpenAPI::fromJsonValue(m_sign_in_text, json[QString("sign_in_text")]);
    m_sign_in_text_isSet = !json[QString("sign_in_text")].isNull() && m_sign_in_text_isValid;

    m_help_page_text_isValid = ::OpenAPI::fromJsonValue(m_help_page_text, json[QString("help_page_text")]);
    m_help_page_text_isSet = !json[QString("help_page_text")].isNull() && m_help_page_text_isValid;

    m_shared_runners_enabled_isValid = ::OpenAPI::fromJsonValue(m_shared_runners_enabled, json[QString("shared_runners_enabled")]);
    m_shared_runners_enabled_isSet = !json[QString("shared_runners_enabled")].isNull() && m_shared_runners_enabled_isValid;

    m_shared_runners_text_isValid = ::OpenAPI::fromJsonValue(m_shared_runners_text, json[QString("shared_runners_text")]);
    m_shared_runners_text_isSet = !json[QString("shared_runners_text")].isNull() && m_shared_runners_text_isValid;

    m_max_artifacts_size_isValid = ::OpenAPI::fromJsonValue(m_max_artifacts_size, json[QString("max_artifacts_size")]);
    m_max_artifacts_size_isSet = !json[QString("max_artifacts_size")].isNull() && m_max_artifacts_size_isValid;

    m_container_registry_token_expire_delay_isValid = ::OpenAPI::fromJsonValue(m_container_registry_token_expire_delay, json[QString("container_registry_token_expire_delay")]);
    m_container_registry_token_expire_delay_isSet = !json[QString("container_registry_token_expire_delay")].isNull() && m_container_registry_token_expire_delay_isValid;

    m_metrics_enabled_isValid = ::OpenAPI::fromJsonValue(m_metrics_enabled, json[QString("metrics_enabled")]);
    m_metrics_enabled_isSet = !json[QString("metrics_enabled")].isNull() && m_metrics_enabled_isValid;

    m_metrics_host_isValid = ::OpenAPI::fromJsonValue(m_metrics_host, json[QString("metrics_host")]);
    m_metrics_host_isSet = !json[QString("metrics_host")].isNull() && m_metrics_host_isValid;

    m_metrics_port_isValid = ::OpenAPI::fromJsonValue(m_metrics_port, json[QString("metrics_port")]);
    m_metrics_port_isSet = !json[QString("metrics_port")].isNull() && m_metrics_port_isValid;

    m_metrics_pool_size_isValid = ::OpenAPI::fromJsonValue(m_metrics_pool_size, json[QString("metrics_pool_size")]);
    m_metrics_pool_size_isSet = !json[QString("metrics_pool_size")].isNull() && m_metrics_pool_size_isValid;

    m_metrics_timeout_isValid = ::OpenAPI::fromJsonValue(m_metrics_timeout, json[QString("metrics_timeout")]);
    m_metrics_timeout_isSet = !json[QString("metrics_timeout")].isNull() && m_metrics_timeout_isValid;

    m_metrics_method_call_threshold_isValid = ::OpenAPI::fromJsonValue(m_metrics_method_call_threshold, json[QString("metrics_method_call_threshold")]);
    m_metrics_method_call_threshold_isSet = !json[QString("metrics_method_call_threshold")].isNull() && m_metrics_method_call_threshold_isValid;

    m_metrics_sample_interval_isValid = ::OpenAPI::fromJsonValue(m_metrics_sample_interval, json[QString("metrics_sample_interval")]);
    m_metrics_sample_interval_isSet = !json[QString("metrics_sample_interval")].isNull() && m_metrics_sample_interval_isValid;

    m_metrics_packet_size_isValid = ::OpenAPI::fromJsonValue(m_metrics_packet_size, json[QString("metrics_packet_size")]);
    m_metrics_packet_size_isSet = !json[QString("metrics_packet_size")].isNull() && m_metrics_packet_size_isValid;

    m_sidekiq_throttling_enabled_isValid = ::OpenAPI::fromJsonValue(m_sidekiq_throttling_enabled, json[QString("sidekiq_throttling_enabled")]);
    m_sidekiq_throttling_enabled_isSet = !json[QString("sidekiq_throttling_enabled")].isNull() && m_sidekiq_throttling_enabled_isValid;

    m_sidekiq_throttling_queus_isValid = ::OpenAPI::fromJsonValue(m_sidekiq_throttling_queus, json[QString("sidekiq_throttling_queus")]);
    m_sidekiq_throttling_queus_isSet = !json[QString("sidekiq_throttling_queus")].isNull() && m_sidekiq_throttling_queus_isValid;

    m_sidekiq_throttling_factor_isValid = ::OpenAPI::fromJsonValue(m_sidekiq_throttling_factor, json[QString("sidekiq_throttling_factor")]);
    m_sidekiq_throttling_factor_isSet = !json[QString("sidekiq_throttling_factor")].isNull() && m_sidekiq_throttling_factor_isValid;

    m_recaptcha_enabled_isValid = ::OpenAPI::fromJsonValue(m_recaptcha_enabled, json[QString("recaptcha_enabled")]);
    m_recaptcha_enabled_isSet = !json[QString("recaptcha_enabled")].isNull() && m_recaptcha_enabled_isValid;

    m_recaptcha_site_key_isValid = ::OpenAPI::fromJsonValue(m_recaptcha_site_key, json[QString("recaptcha_site_key")]);
    m_recaptcha_site_key_isSet = !json[QString("recaptcha_site_key")].isNull() && m_recaptcha_site_key_isValid;

    m_recaptcha_private_key_isValid = ::OpenAPI::fromJsonValue(m_recaptcha_private_key, json[QString("recaptcha_private_key")]);
    m_recaptcha_private_key_isSet = !json[QString("recaptcha_private_key")].isNull() && m_recaptcha_private_key_isValid;

    m_akismet_enabled_isValid = ::OpenAPI::fromJsonValue(m_akismet_enabled, json[QString("akismet_enabled")]);
    m_akismet_enabled_isSet = !json[QString("akismet_enabled")].isNull() && m_akismet_enabled_isValid;

    m_akismet_api_key_isValid = ::OpenAPI::fromJsonValue(m_akismet_api_key, json[QString("akismet_api_key")]);
    m_akismet_api_key_isSet = !json[QString("akismet_api_key")].isNull() && m_akismet_api_key_isValid;

    m_admin_notification_email_isValid = ::OpenAPI::fromJsonValue(m_admin_notification_email, json[QString("admin_notification_email")]);
    m_admin_notification_email_isSet = !json[QString("admin_notification_email")].isNull() && m_admin_notification_email_isValid;

    m_sentry_enabled_isValid = ::OpenAPI::fromJsonValue(m_sentry_enabled, json[QString("sentry_enabled")]);
    m_sentry_enabled_isSet = !json[QString("sentry_enabled")].isNull() && m_sentry_enabled_isValid;

    m_sentry_dsn_isValid = ::OpenAPI::fromJsonValue(m_sentry_dsn, json[QString("sentry_dsn")]);
    m_sentry_dsn_isSet = !json[QString("sentry_dsn")].isNull() && m_sentry_dsn_isValid;

    m_repository_storage_isValid = ::OpenAPI::fromJsonValue(m_repository_storage, json[QString("repository_storage")]);
    m_repository_storage_isSet = !json[QString("repository_storage")].isNull() && m_repository_storage_isValid;

    m_repository_checks_enabled_isValid = ::OpenAPI::fromJsonValue(m_repository_checks_enabled, json[QString("repository_checks_enabled")]);
    m_repository_checks_enabled_isSet = !json[QString("repository_checks_enabled")].isNull() && m_repository_checks_enabled_isValid;

    m_koding_enabled_isValid = ::OpenAPI::fromJsonValue(m_koding_enabled, json[QString("koding_enabled")]);
    m_koding_enabled_isSet = !json[QString("koding_enabled")].isNull() && m_koding_enabled_isValid;

    m_koding_url_isValid = ::OpenAPI::fromJsonValue(m_koding_url, json[QString("koding_url")]);
    m_koding_url_isSet = !json[QString("koding_url")].isNull() && m_koding_url_isValid;

    m_plantuml_enabled_isValid = ::OpenAPI::fromJsonValue(m_plantuml_enabled, json[QString("plantuml_enabled")]);
    m_plantuml_enabled_isSet = !json[QString("plantuml_enabled")].isNull() && m_plantuml_enabled_isValid;

    m_plantuml_url_isValid = ::OpenAPI::fromJsonValue(m_plantuml_url, json[QString("plantuml_url")]);
    m_plantuml_url_isSet = !json[QString("plantuml_url")].isNull() && m_plantuml_url_isValid;

    m_version_check_enabled_isValid = ::OpenAPI::fromJsonValue(m_version_check_enabled, json[QString("version_check_enabled")]);
    m_version_check_enabled_isSet = !json[QString("version_check_enabled")].isNull() && m_version_check_enabled_isValid;

    m_email_author_in_body_isValid = ::OpenAPI::fromJsonValue(m_email_author_in_body, json[QString("email_author_in_body")]);
    m_email_author_in_body_isSet = !json[QString("email_author_in_body")].isNull() && m_email_author_in_body_isValid;

    m_html_emails_enabled_isValid = ::OpenAPI::fromJsonValue(m_html_emails_enabled, json[QString("html_emails_enabled")]);
    m_html_emails_enabled_isSet = !json[QString("html_emails_enabled")].isNull() && m_html_emails_enabled_isValid;

    m_housekeeping_enabled_isValid = ::OpenAPI::fromJsonValue(m_housekeeping_enabled, json[QString("housekeeping_enabled")]);
    m_housekeeping_enabled_isSet = !json[QString("housekeeping_enabled")].isNull() && m_housekeeping_enabled_isValid;

    m_housekeeping_bitmaps_enabled_isValid = ::OpenAPI::fromJsonValue(m_housekeeping_bitmaps_enabled, json[QString("housekeeping_bitmaps_enabled")]);
    m_housekeeping_bitmaps_enabled_isSet = !json[QString("housekeeping_bitmaps_enabled")].isNull() && m_housekeeping_bitmaps_enabled_isValid;

    m_housekeeping_incremental_repack_period_isValid = ::OpenAPI::fromJsonValue(m_housekeeping_incremental_repack_period, json[QString("housekeeping_incremental_repack_period")]);
    m_housekeeping_incremental_repack_period_isSet = !json[QString("housekeeping_incremental_repack_period")].isNull() && m_housekeeping_incremental_repack_period_isValid;

    m_housekeeping_full_repack_period_isValid = ::OpenAPI::fromJsonValue(m_housekeeping_full_repack_period, json[QString("housekeeping_full_repack_period")]);
    m_housekeeping_full_repack_period_isSet = !json[QString("housekeeping_full_repack_period")].isNull() && m_housekeeping_full_repack_period_isValid;

    m_housekeeping_gc_period_isValid = ::OpenAPI::fromJsonValue(m_housekeeping_gc_period, json[QString("housekeeping_gc_period")]);
    m_housekeeping_gc_period_isSet = !json[QString("housekeeping_gc_period")].isNull() && m_housekeeping_gc_period_isValid;
}

QString OAIPutV3ApplicationSettings_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3ApplicationSettings_request::asJsonObject() const {
    QJsonObject obj;
    if (m_default_branch_protection_isSet) {
        obj.insert(QString("default_branch_protection"), ::OpenAPI::toJsonValue(m_default_branch_protection));
    }
    if (m_default_project_visibility_isSet) {
        obj.insert(QString("default_project_visibility"), ::OpenAPI::toJsonValue(m_default_project_visibility));
    }
    if (m_default_snippet_visibility_isSet) {
        obj.insert(QString("default_snippet_visibility"), ::OpenAPI::toJsonValue(m_default_snippet_visibility));
    }
    if (m_default_group_visibility_isSet) {
        obj.insert(QString("default_group_visibility"), ::OpenAPI::toJsonValue(m_default_group_visibility));
    }
    if (m_restricted_visibility_levels.size() > 0) {
        obj.insert(QString("restricted_visibility_levels"), ::OpenAPI::toJsonValue(m_restricted_visibility_levels));
    }
    if (m_import_sources.size() > 0) {
        obj.insert(QString("import_sources"), ::OpenAPI::toJsonValue(m_import_sources));
    }
    if (m_disabled_oauth_sign_in_sources.size() > 0) {
        obj.insert(QString("disabled_oauth_sign_in_sources"), ::OpenAPI::toJsonValue(m_disabled_oauth_sign_in_sources));
    }
    if (m_enabled_git_access_protocol_isSet) {
        obj.insert(QString("enabled_git_access_protocol"), ::OpenAPI::toJsonValue(m_enabled_git_access_protocol));
    }
    if (m_gravatar_enabled_isSet) {
        obj.insert(QString("gravatar_enabled"), ::OpenAPI::toJsonValue(m_gravatar_enabled));
    }
    if (m_default_projects_limit_isSet) {
        obj.insert(QString("default_projects_limit"), ::OpenAPI::toJsonValue(m_default_projects_limit));
    }
    if (m_max_attachment_size_isSet) {
        obj.insert(QString("max_attachment_size"), ::OpenAPI::toJsonValue(m_max_attachment_size));
    }
    if (m_session_expire_delay_isSet) {
        obj.insert(QString("session_expire_delay"), ::OpenAPI::toJsonValue(m_session_expire_delay));
    }
    if (m_user_oauth_applications_isSet) {
        obj.insert(QString("user_oauth_applications"), ::OpenAPI::toJsonValue(m_user_oauth_applications));
    }
    if (m_user_default_external_isSet) {
        obj.insert(QString("user_default_external"), ::OpenAPI::toJsonValue(m_user_default_external));
    }
    if (m_signup_enabled_isSet) {
        obj.insert(QString("signup_enabled"), ::OpenAPI::toJsonValue(m_signup_enabled));
    }
    if (m_send_user_confirmation_email_isSet) {
        obj.insert(QString("send_user_confirmation_email"), ::OpenAPI::toJsonValue(m_send_user_confirmation_email));
    }
    if (m_domain_whitelist_isSet) {
        obj.insert(QString("domain_whitelist"), ::OpenAPI::toJsonValue(m_domain_whitelist));
    }
    if (m_domain_blacklist_enabled_isSet) {
        obj.insert(QString("domain_blacklist_enabled"), ::OpenAPI::toJsonValue(m_domain_blacklist_enabled));
    }
    if (m_domain_blacklist_isSet) {
        obj.insert(QString("domain_blacklist"), ::OpenAPI::toJsonValue(m_domain_blacklist));
    }
    if (m_after_sign_up_text_isSet) {
        obj.insert(QString("after_sign_up_text"), ::OpenAPI::toJsonValue(m_after_sign_up_text));
    }
    if (m_signin_enabled_isSet) {
        obj.insert(QString("signin_enabled"), ::OpenAPI::toJsonValue(m_signin_enabled));
    }
    if (m_require_two_factor_authentication_isSet) {
        obj.insert(QString("require_two_factor_authentication"), ::OpenAPI::toJsonValue(m_require_two_factor_authentication));
    }
    if (m_two_factor_grace_period_isSet) {
        obj.insert(QString("two_factor_grace_period"), ::OpenAPI::toJsonValue(m_two_factor_grace_period));
    }
    if (m_home_page_url_isSet) {
        obj.insert(QString("home_page_url"), ::OpenAPI::toJsonValue(m_home_page_url));
    }
    if (m_after_sign_out_path_isSet) {
        obj.insert(QString("after_sign_out_path"), ::OpenAPI::toJsonValue(m_after_sign_out_path));
    }
    if (m_sign_in_text_isSet) {
        obj.insert(QString("sign_in_text"), ::OpenAPI::toJsonValue(m_sign_in_text));
    }
    if (m_help_page_text_isSet) {
        obj.insert(QString("help_page_text"), ::OpenAPI::toJsonValue(m_help_page_text));
    }
    if (m_shared_runners_enabled_isSet) {
        obj.insert(QString("shared_runners_enabled"), ::OpenAPI::toJsonValue(m_shared_runners_enabled));
    }
    if (m_shared_runners_text_isSet) {
        obj.insert(QString("shared_runners_text"), ::OpenAPI::toJsonValue(m_shared_runners_text));
    }
    if (m_max_artifacts_size_isSet) {
        obj.insert(QString("max_artifacts_size"), ::OpenAPI::toJsonValue(m_max_artifacts_size));
    }
    if (m_container_registry_token_expire_delay_isSet) {
        obj.insert(QString("container_registry_token_expire_delay"), ::OpenAPI::toJsonValue(m_container_registry_token_expire_delay));
    }
    if (m_metrics_enabled_isSet) {
        obj.insert(QString("metrics_enabled"), ::OpenAPI::toJsonValue(m_metrics_enabled));
    }
    if (m_metrics_host_isSet) {
        obj.insert(QString("metrics_host"), ::OpenAPI::toJsonValue(m_metrics_host));
    }
    if (m_metrics_port_isSet) {
        obj.insert(QString("metrics_port"), ::OpenAPI::toJsonValue(m_metrics_port));
    }
    if (m_metrics_pool_size_isSet) {
        obj.insert(QString("metrics_pool_size"), ::OpenAPI::toJsonValue(m_metrics_pool_size));
    }
    if (m_metrics_timeout_isSet) {
        obj.insert(QString("metrics_timeout"), ::OpenAPI::toJsonValue(m_metrics_timeout));
    }
    if (m_metrics_method_call_threshold_isSet) {
        obj.insert(QString("metrics_method_call_threshold"), ::OpenAPI::toJsonValue(m_metrics_method_call_threshold));
    }
    if (m_metrics_sample_interval_isSet) {
        obj.insert(QString("metrics_sample_interval"), ::OpenAPI::toJsonValue(m_metrics_sample_interval));
    }
    if (m_metrics_packet_size_isSet) {
        obj.insert(QString("metrics_packet_size"), ::OpenAPI::toJsonValue(m_metrics_packet_size));
    }
    if (m_sidekiq_throttling_enabled_isSet) {
        obj.insert(QString("sidekiq_throttling_enabled"), ::OpenAPI::toJsonValue(m_sidekiq_throttling_enabled));
    }
    if (m_sidekiq_throttling_queus.size() > 0) {
        obj.insert(QString("sidekiq_throttling_queus"), ::OpenAPI::toJsonValue(m_sidekiq_throttling_queus));
    }
    if (m_sidekiq_throttling_factor_isSet) {
        obj.insert(QString("sidekiq_throttling_factor"), ::OpenAPI::toJsonValue(m_sidekiq_throttling_factor));
    }
    if (m_recaptcha_enabled_isSet) {
        obj.insert(QString("recaptcha_enabled"), ::OpenAPI::toJsonValue(m_recaptcha_enabled));
    }
    if (m_recaptcha_site_key_isSet) {
        obj.insert(QString("recaptcha_site_key"), ::OpenAPI::toJsonValue(m_recaptcha_site_key));
    }
    if (m_recaptcha_private_key_isSet) {
        obj.insert(QString("recaptcha_private_key"), ::OpenAPI::toJsonValue(m_recaptcha_private_key));
    }
    if (m_akismet_enabled_isSet) {
        obj.insert(QString("akismet_enabled"), ::OpenAPI::toJsonValue(m_akismet_enabled));
    }
    if (m_akismet_api_key_isSet) {
        obj.insert(QString("akismet_api_key"), ::OpenAPI::toJsonValue(m_akismet_api_key));
    }
    if (m_admin_notification_email_isSet) {
        obj.insert(QString("admin_notification_email"), ::OpenAPI::toJsonValue(m_admin_notification_email));
    }
    if (m_sentry_enabled_isSet) {
        obj.insert(QString("sentry_enabled"), ::OpenAPI::toJsonValue(m_sentry_enabled));
    }
    if (m_sentry_dsn_isSet) {
        obj.insert(QString("sentry_dsn"), ::OpenAPI::toJsonValue(m_sentry_dsn));
    }
    if (m_repository_storage_isSet) {
        obj.insert(QString("repository_storage"), ::OpenAPI::toJsonValue(m_repository_storage));
    }
    if (m_repository_checks_enabled_isSet) {
        obj.insert(QString("repository_checks_enabled"), ::OpenAPI::toJsonValue(m_repository_checks_enabled));
    }
    if (m_koding_enabled_isSet) {
        obj.insert(QString("koding_enabled"), ::OpenAPI::toJsonValue(m_koding_enabled));
    }
    if (m_koding_url_isSet) {
        obj.insert(QString("koding_url"), ::OpenAPI::toJsonValue(m_koding_url));
    }
    if (m_plantuml_enabled_isSet) {
        obj.insert(QString("plantuml_enabled"), ::OpenAPI::toJsonValue(m_plantuml_enabled));
    }
    if (m_plantuml_url_isSet) {
        obj.insert(QString("plantuml_url"), ::OpenAPI::toJsonValue(m_plantuml_url));
    }
    if (m_version_check_enabled_isSet) {
        obj.insert(QString("version_check_enabled"), ::OpenAPI::toJsonValue(m_version_check_enabled));
    }
    if (m_email_author_in_body_isSet) {
        obj.insert(QString("email_author_in_body"), ::OpenAPI::toJsonValue(m_email_author_in_body));
    }
    if (m_html_emails_enabled_isSet) {
        obj.insert(QString("html_emails_enabled"), ::OpenAPI::toJsonValue(m_html_emails_enabled));
    }
    if (m_housekeeping_enabled_isSet) {
        obj.insert(QString("housekeeping_enabled"), ::OpenAPI::toJsonValue(m_housekeeping_enabled));
    }
    if (m_housekeeping_bitmaps_enabled_isSet) {
        obj.insert(QString("housekeeping_bitmaps_enabled"), ::OpenAPI::toJsonValue(m_housekeeping_bitmaps_enabled));
    }
    if (m_housekeeping_incremental_repack_period_isSet) {
        obj.insert(QString("housekeeping_incremental_repack_period"), ::OpenAPI::toJsonValue(m_housekeeping_incremental_repack_period));
    }
    if (m_housekeeping_full_repack_period_isSet) {
        obj.insert(QString("housekeeping_full_repack_period"), ::OpenAPI::toJsonValue(m_housekeeping_full_repack_period));
    }
    if (m_housekeeping_gc_period_isSet) {
        obj.insert(QString("housekeeping_gc_period"), ::OpenAPI::toJsonValue(m_housekeeping_gc_period));
    }
    return obj;
}

qint32 OAIPutV3ApplicationSettings_request::getDefaultBranchProtection() const {
    return m_default_branch_protection;
}
void OAIPutV3ApplicationSettings_request::setDefaultBranchProtection(const qint32 &default_branch_protection) {
    m_default_branch_protection = default_branch_protection;
    m_default_branch_protection_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_default_branch_protection_Set() const{
    return m_default_branch_protection_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_default_branch_protection_Valid() const{
    return m_default_branch_protection_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getDefaultProjectVisibility() const {
    return m_default_project_visibility;
}
void OAIPutV3ApplicationSettings_request::setDefaultProjectVisibility(const qint32 &default_project_visibility) {
    m_default_project_visibility = default_project_visibility;
    m_default_project_visibility_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_default_project_visibility_Set() const{
    return m_default_project_visibility_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_default_project_visibility_Valid() const{
    return m_default_project_visibility_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getDefaultSnippetVisibility() const {
    return m_default_snippet_visibility;
}
void OAIPutV3ApplicationSettings_request::setDefaultSnippetVisibility(const qint32 &default_snippet_visibility) {
    m_default_snippet_visibility = default_snippet_visibility;
    m_default_snippet_visibility_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_default_snippet_visibility_Set() const{
    return m_default_snippet_visibility_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_default_snippet_visibility_Valid() const{
    return m_default_snippet_visibility_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getDefaultGroupVisibility() const {
    return m_default_group_visibility;
}
void OAIPutV3ApplicationSettings_request::setDefaultGroupVisibility(const qint32 &default_group_visibility) {
    m_default_group_visibility = default_group_visibility;
    m_default_group_visibility_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_default_group_visibility_Set() const{
    return m_default_group_visibility_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_default_group_visibility_Valid() const{
    return m_default_group_visibility_isValid;
}

QList<QString> OAIPutV3ApplicationSettings_request::getRestrictedVisibilityLevels() const {
    return m_restricted_visibility_levels;
}
void OAIPutV3ApplicationSettings_request::setRestrictedVisibilityLevels(const QList<QString> &restricted_visibility_levels) {
    m_restricted_visibility_levels = restricted_visibility_levels;
    m_restricted_visibility_levels_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_restricted_visibility_levels_Set() const{
    return m_restricted_visibility_levels_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_restricted_visibility_levels_Valid() const{
    return m_restricted_visibility_levels_isValid;
}

QList<QString> OAIPutV3ApplicationSettings_request::getImportSources() const {
    return m_import_sources;
}
void OAIPutV3ApplicationSettings_request::setImportSources(const QList<QString> &import_sources) {
    m_import_sources = import_sources;
    m_import_sources_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_import_sources_Set() const{
    return m_import_sources_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_import_sources_Valid() const{
    return m_import_sources_isValid;
}

QList<QString> OAIPutV3ApplicationSettings_request::getDisabledOauthSignInSources() const {
    return m_disabled_oauth_sign_in_sources;
}
void OAIPutV3ApplicationSettings_request::setDisabledOauthSignInSources(const QList<QString> &disabled_oauth_sign_in_sources) {
    m_disabled_oauth_sign_in_sources = disabled_oauth_sign_in_sources;
    m_disabled_oauth_sign_in_sources_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_disabled_oauth_sign_in_sources_Set() const{
    return m_disabled_oauth_sign_in_sources_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_disabled_oauth_sign_in_sources_Valid() const{
    return m_disabled_oauth_sign_in_sources_isValid;
}

QString OAIPutV3ApplicationSettings_request::getEnabledGitAccessProtocol() const {
    return m_enabled_git_access_protocol;
}
void OAIPutV3ApplicationSettings_request::setEnabledGitAccessProtocol(const QString &enabled_git_access_protocol) {
    m_enabled_git_access_protocol = enabled_git_access_protocol;
    m_enabled_git_access_protocol_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_enabled_git_access_protocol_Set() const{
    return m_enabled_git_access_protocol_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_enabled_git_access_protocol_Valid() const{
    return m_enabled_git_access_protocol_isValid;
}

bool OAIPutV3ApplicationSettings_request::isGravatarEnabled() const {
    return m_gravatar_enabled;
}
void OAIPutV3ApplicationSettings_request::setGravatarEnabled(const bool &gravatar_enabled) {
    m_gravatar_enabled = gravatar_enabled;
    m_gravatar_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_gravatar_enabled_Set() const{
    return m_gravatar_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_gravatar_enabled_Valid() const{
    return m_gravatar_enabled_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getDefaultProjectsLimit() const {
    return m_default_projects_limit;
}
void OAIPutV3ApplicationSettings_request::setDefaultProjectsLimit(const qint32 &default_projects_limit) {
    m_default_projects_limit = default_projects_limit;
    m_default_projects_limit_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_default_projects_limit_Set() const{
    return m_default_projects_limit_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_default_projects_limit_Valid() const{
    return m_default_projects_limit_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getMaxAttachmentSize() const {
    return m_max_attachment_size;
}
void OAIPutV3ApplicationSettings_request::setMaxAttachmentSize(const qint32 &max_attachment_size) {
    m_max_attachment_size = max_attachment_size;
    m_max_attachment_size_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_max_attachment_size_Set() const{
    return m_max_attachment_size_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_max_attachment_size_Valid() const{
    return m_max_attachment_size_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getSessionExpireDelay() const {
    return m_session_expire_delay;
}
void OAIPutV3ApplicationSettings_request::setSessionExpireDelay(const qint32 &session_expire_delay) {
    m_session_expire_delay = session_expire_delay;
    m_session_expire_delay_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_session_expire_delay_Set() const{
    return m_session_expire_delay_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_session_expire_delay_Valid() const{
    return m_session_expire_delay_isValid;
}

bool OAIPutV3ApplicationSettings_request::isUserOauthApplications() const {
    return m_user_oauth_applications;
}
void OAIPutV3ApplicationSettings_request::setUserOauthApplications(const bool &user_oauth_applications) {
    m_user_oauth_applications = user_oauth_applications;
    m_user_oauth_applications_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_user_oauth_applications_Set() const{
    return m_user_oauth_applications_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_user_oauth_applications_Valid() const{
    return m_user_oauth_applications_isValid;
}

bool OAIPutV3ApplicationSettings_request::isUserDefaultExternal() const {
    return m_user_default_external;
}
void OAIPutV3ApplicationSettings_request::setUserDefaultExternal(const bool &user_default_external) {
    m_user_default_external = user_default_external;
    m_user_default_external_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_user_default_external_Set() const{
    return m_user_default_external_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_user_default_external_Valid() const{
    return m_user_default_external_isValid;
}

bool OAIPutV3ApplicationSettings_request::isSignupEnabled() const {
    return m_signup_enabled;
}
void OAIPutV3ApplicationSettings_request::setSignupEnabled(const bool &signup_enabled) {
    m_signup_enabled = signup_enabled;
    m_signup_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_signup_enabled_Set() const{
    return m_signup_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_signup_enabled_Valid() const{
    return m_signup_enabled_isValid;
}

bool OAIPutV3ApplicationSettings_request::isSendUserConfirmationEmail() const {
    return m_send_user_confirmation_email;
}
void OAIPutV3ApplicationSettings_request::setSendUserConfirmationEmail(const bool &send_user_confirmation_email) {
    m_send_user_confirmation_email = send_user_confirmation_email;
    m_send_user_confirmation_email_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_send_user_confirmation_email_Set() const{
    return m_send_user_confirmation_email_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_send_user_confirmation_email_Valid() const{
    return m_send_user_confirmation_email_isValid;
}

QString OAIPutV3ApplicationSettings_request::getDomainWhitelist() const {
    return m_domain_whitelist;
}
void OAIPutV3ApplicationSettings_request::setDomainWhitelist(const QString &domain_whitelist) {
    m_domain_whitelist = domain_whitelist;
    m_domain_whitelist_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_domain_whitelist_Set() const{
    return m_domain_whitelist_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_domain_whitelist_Valid() const{
    return m_domain_whitelist_isValid;
}

bool OAIPutV3ApplicationSettings_request::isDomainBlacklistEnabled() const {
    return m_domain_blacklist_enabled;
}
void OAIPutV3ApplicationSettings_request::setDomainBlacklistEnabled(const bool &domain_blacklist_enabled) {
    m_domain_blacklist_enabled = domain_blacklist_enabled;
    m_domain_blacklist_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_domain_blacklist_enabled_Set() const{
    return m_domain_blacklist_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_domain_blacklist_enabled_Valid() const{
    return m_domain_blacklist_enabled_isValid;
}

QString OAIPutV3ApplicationSettings_request::getDomainBlacklist() const {
    return m_domain_blacklist;
}
void OAIPutV3ApplicationSettings_request::setDomainBlacklist(const QString &domain_blacklist) {
    m_domain_blacklist = domain_blacklist;
    m_domain_blacklist_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_domain_blacklist_Set() const{
    return m_domain_blacklist_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_domain_blacklist_Valid() const{
    return m_domain_blacklist_isValid;
}

QString OAIPutV3ApplicationSettings_request::getAfterSignUpText() const {
    return m_after_sign_up_text;
}
void OAIPutV3ApplicationSettings_request::setAfterSignUpText(const QString &after_sign_up_text) {
    m_after_sign_up_text = after_sign_up_text;
    m_after_sign_up_text_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_after_sign_up_text_Set() const{
    return m_after_sign_up_text_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_after_sign_up_text_Valid() const{
    return m_after_sign_up_text_isValid;
}

bool OAIPutV3ApplicationSettings_request::isSigninEnabled() const {
    return m_signin_enabled;
}
void OAIPutV3ApplicationSettings_request::setSigninEnabled(const bool &signin_enabled) {
    m_signin_enabled = signin_enabled;
    m_signin_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_signin_enabled_Set() const{
    return m_signin_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_signin_enabled_Valid() const{
    return m_signin_enabled_isValid;
}

bool OAIPutV3ApplicationSettings_request::isRequireTwoFactorAuthentication() const {
    return m_require_two_factor_authentication;
}
void OAIPutV3ApplicationSettings_request::setRequireTwoFactorAuthentication(const bool &require_two_factor_authentication) {
    m_require_two_factor_authentication = require_two_factor_authentication;
    m_require_two_factor_authentication_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_require_two_factor_authentication_Set() const{
    return m_require_two_factor_authentication_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_require_two_factor_authentication_Valid() const{
    return m_require_two_factor_authentication_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getTwoFactorGracePeriod() const {
    return m_two_factor_grace_period;
}
void OAIPutV3ApplicationSettings_request::setTwoFactorGracePeriod(const qint32 &two_factor_grace_period) {
    m_two_factor_grace_period = two_factor_grace_period;
    m_two_factor_grace_period_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_two_factor_grace_period_Set() const{
    return m_two_factor_grace_period_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_two_factor_grace_period_Valid() const{
    return m_two_factor_grace_period_isValid;
}

QString OAIPutV3ApplicationSettings_request::getHomePageUrl() const {
    return m_home_page_url;
}
void OAIPutV3ApplicationSettings_request::setHomePageUrl(const QString &home_page_url) {
    m_home_page_url = home_page_url;
    m_home_page_url_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_home_page_url_Set() const{
    return m_home_page_url_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_home_page_url_Valid() const{
    return m_home_page_url_isValid;
}

QString OAIPutV3ApplicationSettings_request::getAfterSignOutPath() const {
    return m_after_sign_out_path;
}
void OAIPutV3ApplicationSettings_request::setAfterSignOutPath(const QString &after_sign_out_path) {
    m_after_sign_out_path = after_sign_out_path;
    m_after_sign_out_path_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_after_sign_out_path_Set() const{
    return m_after_sign_out_path_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_after_sign_out_path_Valid() const{
    return m_after_sign_out_path_isValid;
}

QString OAIPutV3ApplicationSettings_request::getSignInText() const {
    return m_sign_in_text;
}
void OAIPutV3ApplicationSettings_request::setSignInText(const QString &sign_in_text) {
    m_sign_in_text = sign_in_text;
    m_sign_in_text_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_sign_in_text_Set() const{
    return m_sign_in_text_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_sign_in_text_Valid() const{
    return m_sign_in_text_isValid;
}

QString OAIPutV3ApplicationSettings_request::getHelpPageText() const {
    return m_help_page_text;
}
void OAIPutV3ApplicationSettings_request::setHelpPageText(const QString &help_page_text) {
    m_help_page_text = help_page_text;
    m_help_page_text_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_help_page_text_Set() const{
    return m_help_page_text_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_help_page_text_Valid() const{
    return m_help_page_text_isValid;
}

bool OAIPutV3ApplicationSettings_request::isSharedRunnersEnabled() const {
    return m_shared_runners_enabled;
}
void OAIPutV3ApplicationSettings_request::setSharedRunnersEnabled(const bool &shared_runners_enabled) {
    m_shared_runners_enabled = shared_runners_enabled;
    m_shared_runners_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_shared_runners_enabled_Set() const{
    return m_shared_runners_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_shared_runners_enabled_Valid() const{
    return m_shared_runners_enabled_isValid;
}

QString OAIPutV3ApplicationSettings_request::getSharedRunnersText() const {
    return m_shared_runners_text;
}
void OAIPutV3ApplicationSettings_request::setSharedRunnersText(const QString &shared_runners_text) {
    m_shared_runners_text = shared_runners_text;
    m_shared_runners_text_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_shared_runners_text_Set() const{
    return m_shared_runners_text_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_shared_runners_text_Valid() const{
    return m_shared_runners_text_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getMaxArtifactsSize() const {
    return m_max_artifacts_size;
}
void OAIPutV3ApplicationSettings_request::setMaxArtifactsSize(const qint32 &max_artifacts_size) {
    m_max_artifacts_size = max_artifacts_size;
    m_max_artifacts_size_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_max_artifacts_size_Set() const{
    return m_max_artifacts_size_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_max_artifacts_size_Valid() const{
    return m_max_artifacts_size_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getContainerRegistryTokenExpireDelay() const {
    return m_container_registry_token_expire_delay;
}
void OAIPutV3ApplicationSettings_request::setContainerRegistryTokenExpireDelay(const qint32 &container_registry_token_expire_delay) {
    m_container_registry_token_expire_delay = container_registry_token_expire_delay;
    m_container_registry_token_expire_delay_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_container_registry_token_expire_delay_Set() const{
    return m_container_registry_token_expire_delay_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_container_registry_token_expire_delay_Valid() const{
    return m_container_registry_token_expire_delay_isValid;
}

bool OAIPutV3ApplicationSettings_request::isMetricsEnabled() const {
    return m_metrics_enabled;
}
void OAIPutV3ApplicationSettings_request::setMetricsEnabled(const bool &metrics_enabled) {
    m_metrics_enabled = metrics_enabled;
    m_metrics_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_metrics_enabled_Set() const{
    return m_metrics_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_metrics_enabled_Valid() const{
    return m_metrics_enabled_isValid;
}

QString OAIPutV3ApplicationSettings_request::getMetricsHost() const {
    return m_metrics_host;
}
void OAIPutV3ApplicationSettings_request::setMetricsHost(const QString &metrics_host) {
    m_metrics_host = metrics_host;
    m_metrics_host_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_metrics_host_Set() const{
    return m_metrics_host_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_metrics_host_Valid() const{
    return m_metrics_host_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getMetricsPort() const {
    return m_metrics_port;
}
void OAIPutV3ApplicationSettings_request::setMetricsPort(const qint32 &metrics_port) {
    m_metrics_port = metrics_port;
    m_metrics_port_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_metrics_port_Set() const{
    return m_metrics_port_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_metrics_port_Valid() const{
    return m_metrics_port_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getMetricsPoolSize() const {
    return m_metrics_pool_size;
}
void OAIPutV3ApplicationSettings_request::setMetricsPoolSize(const qint32 &metrics_pool_size) {
    m_metrics_pool_size = metrics_pool_size;
    m_metrics_pool_size_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_metrics_pool_size_Set() const{
    return m_metrics_pool_size_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_metrics_pool_size_Valid() const{
    return m_metrics_pool_size_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getMetricsTimeout() const {
    return m_metrics_timeout;
}
void OAIPutV3ApplicationSettings_request::setMetricsTimeout(const qint32 &metrics_timeout) {
    m_metrics_timeout = metrics_timeout;
    m_metrics_timeout_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_metrics_timeout_Set() const{
    return m_metrics_timeout_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_metrics_timeout_Valid() const{
    return m_metrics_timeout_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getMetricsMethodCallThreshold() const {
    return m_metrics_method_call_threshold;
}
void OAIPutV3ApplicationSettings_request::setMetricsMethodCallThreshold(const qint32 &metrics_method_call_threshold) {
    m_metrics_method_call_threshold = metrics_method_call_threshold;
    m_metrics_method_call_threshold_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_metrics_method_call_threshold_Set() const{
    return m_metrics_method_call_threshold_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_metrics_method_call_threshold_Valid() const{
    return m_metrics_method_call_threshold_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getMetricsSampleInterval() const {
    return m_metrics_sample_interval;
}
void OAIPutV3ApplicationSettings_request::setMetricsSampleInterval(const qint32 &metrics_sample_interval) {
    m_metrics_sample_interval = metrics_sample_interval;
    m_metrics_sample_interval_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_metrics_sample_interval_Set() const{
    return m_metrics_sample_interval_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_metrics_sample_interval_Valid() const{
    return m_metrics_sample_interval_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getMetricsPacketSize() const {
    return m_metrics_packet_size;
}
void OAIPutV3ApplicationSettings_request::setMetricsPacketSize(const qint32 &metrics_packet_size) {
    m_metrics_packet_size = metrics_packet_size;
    m_metrics_packet_size_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_metrics_packet_size_Set() const{
    return m_metrics_packet_size_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_metrics_packet_size_Valid() const{
    return m_metrics_packet_size_isValid;
}

bool OAIPutV3ApplicationSettings_request::isSidekiqThrottlingEnabled() const {
    return m_sidekiq_throttling_enabled;
}
void OAIPutV3ApplicationSettings_request::setSidekiqThrottlingEnabled(const bool &sidekiq_throttling_enabled) {
    m_sidekiq_throttling_enabled = sidekiq_throttling_enabled;
    m_sidekiq_throttling_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_sidekiq_throttling_enabled_Set() const{
    return m_sidekiq_throttling_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_sidekiq_throttling_enabled_Valid() const{
    return m_sidekiq_throttling_enabled_isValid;
}

QList<QString> OAIPutV3ApplicationSettings_request::getSidekiqThrottlingQueus() const {
    return m_sidekiq_throttling_queus;
}
void OAIPutV3ApplicationSettings_request::setSidekiqThrottlingQueus(const QList<QString> &sidekiq_throttling_queus) {
    m_sidekiq_throttling_queus = sidekiq_throttling_queus;
    m_sidekiq_throttling_queus_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_sidekiq_throttling_queus_Set() const{
    return m_sidekiq_throttling_queus_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_sidekiq_throttling_queus_Valid() const{
    return m_sidekiq_throttling_queus_isValid;
}

float OAIPutV3ApplicationSettings_request::getSidekiqThrottlingFactor() const {
    return m_sidekiq_throttling_factor;
}
void OAIPutV3ApplicationSettings_request::setSidekiqThrottlingFactor(const float &sidekiq_throttling_factor) {
    m_sidekiq_throttling_factor = sidekiq_throttling_factor;
    m_sidekiq_throttling_factor_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_sidekiq_throttling_factor_Set() const{
    return m_sidekiq_throttling_factor_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_sidekiq_throttling_factor_Valid() const{
    return m_sidekiq_throttling_factor_isValid;
}

bool OAIPutV3ApplicationSettings_request::isRecaptchaEnabled() const {
    return m_recaptcha_enabled;
}
void OAIPutV3ApplicationSettings_request::setRecaptchaEnabled(const bool &recaptcha_enabled) {
    m_recaptcha_enabled = recaptcha_enabled;
    m_recaptcha_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_recaptcha_enabled_Set() const{
    return m_recaptcha_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_recaptcha_enabled_Valid() const{
    return m_recaptcha_enabled_isValid;
}

QString OAIPutV3ApplicationSettings_request::getRecaptchaSiteKey() const {
    return m_recaptcha_site_key;
}
void OAIPutV3ApplicationSettings_request::setRecaptchaSiteKey(const QString &recaptcha_site_key) {
    m_recaptcha_site_key = recaptcha_site_key;
    m_recaptcha_site_key_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_recaptcha_site_key_Set() const{
    return m_recaptcha_site_key_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_recaptcha_site_key_Valid() const{
    return m_recaptcha_site_key_isValid;
}

QString OAIPutV3ApplicationSettings_request::getRecaptchaPrivateKey() const {
    return m_recaptcha_private_key;
}
void OAIPutV3ApplicationSettings_request::setRecaptchaPrivateKey(const QString &recaptcha_private_key) {
    m_recaptcha_private_key = recaptcha_private_key;
    m_recaptcha_private_key_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_recaptcha_private_key_Set() const{
    return m_recaptcha_private_key_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_recaptcha_private_key_Valid() const{
    return m_recaptcha_private_key_isValid;
}

bool OAIPutV3ApplicationSettings_request::isAkismetEnabled() const {
    return m_akismet_enabled;
}
void OAIPutV3ApplicationSettings_request::setAkismetEnabled(const bool &akismet_enabled) {
    m_akismet_enabled = akismet_enabled;
    m_akismet_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_akismet_enabled_Set() const{
    return m_akismet_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_akismet_enabled_Valid() const{
    return m_akismet_enabled_isValid;
}

QString OAIPutV3ApplicationSettings_request::getAkismetApiKey() const {
    return m_akismet_api_key;
}
void OAIPutV3ApplicationSettings_request::setAkismetApiKey(const QString &akismet_api_key) {
    m_akismet_api_key = akismet_api_key;
    m_akismet_api_key_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_akismet_api_key_Set() const{
    return m_akismet_api_key_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_akismet_api_key_Valid() const{
    return m_akismet_api_key_isValid;
}

QString OAIPutV3ApplicationSettings_request::getAdminNotificationEmail() const {
    return m_admin_notification_email;
}
void OAIPutV3ApplicationSettings_request::setAdminNotificationEmail(const QString &admin_notification_email) {
    m_admin_notification_email = admin_notification_email;
    m_admin_notification_email_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_admin_notification_email_Set() const{
    return m_admin_notification_email_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_admin_notification_email_Valid() const{
    return m_admin_notification_email_isValid;
}

bool OAIPutV3ApplicationSettings_request::isSentryEnabled() const {
    return m_sentry_enabled;
}
void OAIPutV3ApplicationSettings_request::setSentryEnabled(const bool &sentry_enabled) {
    m_sentry_enabled = sentry_enabled;
    m_sentry_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_sentry_enabled_Set() const{
    return m_sentry_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_sentry_enabled_Valid() const{
    return m_sentry_enabled_isValid;
}

QString OAIPutV3ApplicationSettings_request::getSentryDsn() const {
    return m_sentry_dsn;
}
void OAIPutV3ApplicationSettings_request::setSentryDsn(const QString &sentry_dsn) {
    m_sentry_dsn = sentry_dsn;
    m_sentry_dsn_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_sentry_dsn_Set() const{
    return m_sentry_dsn_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_sentry_dsn_Valid() const{
    return m_sentry_dsn_isValid;
}

QString OAIPutV3ApplicationSettings_request::getRepositoryStorage() const {
    return m_repository_storage;
}
void OAIPutV3ApplicationSettings_request::setRepositoryStorage(const QString &repository_storage) {
    m_repository_storage = repository_storage;
    m_repository_storage_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_repository_storage_Set() const{
    return m_repository_storage_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_repository_storage_Valid() const{
    return m_repository_storage_isValid;
}

bool OAIPutV3ApplicationSettings_request::isRepositoryChecksEnabled() const {
    return m_repository_checks_enabled;
}
void OAIPutV3ApplicationSettings_request::setRepositoryChecksEnabled(const bool &repository_checks_enabled) {
    m_repository_checks_enabled = repository_checks_enabled;
    m_repository_checks_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_repository_checks_enabled_Set() const{
    return m_repository_checks_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_repository_checks_enabled_Valid() const{
    return m_repository_checks_enabled_isValid;
}

bool OAIPutV3ApplicationSettings_request::isKodingEnabled() const {
    return m_koding_enabled;
}
void OAIPutV3ApplicationSettings_request::setKodingEnabled(const bool &koding_enabled) {
    m_koding_enabled = koding_enabled;
    m_koding_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_koding_enabled_Set() const{
    return m_koding_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_koding_enabled_Valid() const{
    return m_koding_enabled_isValid;
}

QString OAIPutV3ApplicationSettings_request::getKodingUrl() const {
    return m_koding_url;
}
void OAIPutV3ApplicationSettings_request::setKodingUrl(const QString &koding_url) {
    m_koding_url = koding_url;
    m_koding_url_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_koding_url_Set() const{
    return m_koding_url_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_koding_url_Valid() const{
    return m_koding_url_isValid;
}

bool OAIPutV3ApplicationSettings_request::isPlantumlEnabled() const {
    return m_plantuml_enabled;
}
void OAIPutV3ApplicationSettings_request::setPlantumlEnabled(const bool &plantuml_enabled) {
    m_plantuml_enabled = plantuml_enabled;
    m_plantuml_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_plantuml_enabled_Set() const{
    return m_plantuml_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_plantuml_enabled_Valid() const{
    return m_plantuml_enabled_isValid;
}

QString OAIPutV3ApplicationSettings_request::getPlantumlUrl() const {
    return m_plantuml_url;
}
void OAIPutV3ApplicationSettings_request::setPlantumlUrl(const QString &plantuml_url) {
    m_plantuml_url = plantuml_url;
    m_plantuml_url_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_plantuml_url_Set() const{
    return m_plantuml_url_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_plantuml_url_Valid() const{
    return m_plantuml_url_isValid;
}

bool OAIPutV3ApplicationSettings_request::isVersionCheckEnabled() const {
    return m_version_check_enabled;
}
void OAIPutV3ApplicationSettings_request::setVersionCheckEnabled(const bool &version_check_enabled) {
    m_version_check_enabled = version_check_enabled;
    m_version_check_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_version_check_enabled_Set() const{
    return m_version_check_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_version_check_enabled_Valid() const{
    return m_version_check_enabled_isValid;
}

bool OAIPutV3ApplicationSettings_request::isEmailAuthorInBody() const {
    return m_email_author_in_body;
}
void OAIPutV3ApplicationSettings_request::setEmailAuthorInBody(const bool &email_author_in_body) {
    m_email_author_in_body = email_author_in_body;
    m_email_author_in_body_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_email_author_in_body_Set() const{
    return m_email_author_in_body_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_email_author_in_body_Valid() const{
    return m_email_author_in_body_isValid;
}

bool OAIPutV3ApplicationSettings_request::isHtmlEmailsEnabled() const {
    return m_html_emails_enabled;
}
void OAIPutV3ApplicationSettings_request::setHtmlEmailsEnabled(const bool &html_emails_enabled) {
    m_html_emails_enabled = html_emails_enabled;
    m_html_emails_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_html_emails_enabled_Set() const{
    return m_html_emails_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_html_emails_enabled_Valid() const{
    return m_html_emails_enabled_isValid;
}

bool OAIPutV3ApplicationSettings_request::isHousekeepingEnabled() const {
    return m_housekeeping_enabled;
}
void OAIPutV3ApplicationSettings_request::setHousekeepingEnabled(const bool &housekeeping_enabled) {
    m_housekeeping_enabled = housekeeping_enabled;
    m_housekeeping_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_housekeeping_enabled_Set() const{
    return m_housekeeping_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_housekeeping_enabled_Valid() const{
    return m_housekeeping_enabled_isValid;
}

bool OAIPutV3ApplicationSettings_request::isHousekeepingBitmapsEnabled() const {
    return m_housekeeping_bitmaps_enabled;
}
void OAIPutV3ApplicationSettings_request::setHousekeepingBitmapsEnabled(const bool &housekeeping_bitmaps_enabled) {
    m_housekeeping_bitmaps_enabled = housekeeping_bitmaps_enabled;
    m_housekeeping_bitmaps_enabled_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_housekeeping_bitmaps_enabled_Set() const{
    return m_housekeeping_bitmaps_enabled_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_housekeeping_bitmaps_enabled_Valid() const{
    return m_housekeeping_bitmaps_enabled_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getHousekeepingIncrementalRepackPeriod() const {
    return m_housekeeping_incremental_repack_period;
}
void OAIPutV3ApplicationSettings_request::setHousekeepingIncrementalRepackPeriod(const qint32 &housekeeping_incremental_repack_period) {
    m_housekeeping_incremental_repack_period = housekeeping_incremental_repack_period;
    m_housekeeping_incremental_repack_period_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_housekeeping_incremental_repack_period_Set() const{
    return m_housekeeping_incremental_repack_period_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_housekeeping_incremental_repack_period_Valid() const{
    return m_housekeeping_incremental_repack_period_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getHousekeepingFullRepackPeriod() const {
    return m_housekeeping_full_repack_period;
}
void OAIPutV3ApplicationSettings_request::setHousekeepingFullRepackPeriod(const qint32 &housekeeping_full_repack_period) {
    m_housekeeping_full_repack_period = housekeeping_full_repack_period;
    m_housekeeping_full_repack_period_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_housekeeping_full_repack_period_Set() const{
    return m_housekeeping_full_repack_period_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_housekeeping_full_repack_period_Valid() const{
    return m_housekeeping_full_repack_period_isValid;
}

qint32 OAIPutV3ApplicationSettings_request::getHousekeepingGcPeriod() const {
    return m_housekeeping_gc_period;
}
void OAIPutV3ApplicationSettings_request::setHousekeepingGcPeriod(const qint32 &housekeeping_gc_period) {
    m_housekeeping_gc_period = housekeeping_gc_period;
    m_housekeeping_gc_period_isSet = true;
}

bool OAIPutV3ApplicationSettings_request::is_housekeeping_gc_period_Set() const{
    return m_housekeeping_gc_period_isSet;
}

bool OAIPutV3ApplicationSettings_request::is_housekeeping_gc_period_Valid() const{
    return m_housekeeping_gc_period_isValid;
}

bool OAIPutV3ApplicationSettings_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_branch_protection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_project_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_snippet_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_group_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_visibility_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_oauth_sign_in_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_git_access_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gravatar_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_projects_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_attachment_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_expire_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_oauth_applications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_default_external_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signup_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_user_confirmation_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_whitelist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_blacklist_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_blacklist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_after_sign_up_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signin_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_two_factor_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_factor_grace_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_after_sign_out_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_in_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_page_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_runners_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_runners_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_artifacts_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_registry_token_expire_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_pool_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_method_call_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_sample_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_packet_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sidekiq_throttling_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sidekiq_throttling_queus.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sidekiq_throttling_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recaptcha_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recaptcha_site_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recaptcha_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_akismet_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_akismet_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_notification_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentry_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentry_dsn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_checks_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_koding_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_koding_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plantuml_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plantuml_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_check_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_author_in_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_emails_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_housekeeping_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_housekeeping_bitmaps_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_housekeeping_incremental_repack_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_housekeeping_full_repack_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_housekeeping_gc_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3ApplicationSettings_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_blacklist_isValid && m_two_factor_grace_period_isValid && m_shared_runners_text_isValid && m_metrics_host_isValid && m_metrics_port_isValid && m_metrics_pool_size_isValid && m_metrics_timeout_isValid && m_metrics_method_call_threshold_isValid && m_metrics_sample_interval_isValid && m_metrics_packet_size_isValid && m_sidekiq_throttling_queus_isValid && m_sidekiq_throttling_factor_isValid && m_recaptcha_site_key_isValid && m_recaptcha_private_key_isValid && m_akismet_api_key_isValid && m_sentry_dsn_isValid && m_koding_url_isValid && m_plantuml_url_isValid && m_housekeeping_bitmaps_enabled_isValid && m_housekeeping_incremental_repack_period_isValid && m_housekeeping_full_repack_period_isValid && m_housekeeping_gc_period_isValid && true;
}

} // namespace OpenAPI
