/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3ProjectsIdServicesHipchat_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3ProjectsIdServicesHipchat_request::OAIPutV3ProjectsIdServicesHipchat_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3ProjectsIdServicesHipchat_request::OAIPutV3ProjectsIdServicesHipchat_request() {
    this->initializeModel();
}

OAIPutV3ProjectsIdServicesHipchat_request::~OAIPutV3ProjectsIdServicesHipchat_request() {}

void OAIPutV3ProjectsIdServicesHipchat_request::initializeModel() {

    m_token_isSet = false;
    m_token_isValid = false;

    m_room_isSet = false;
    m_room_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_notify_isSet = false;
    m_notify_isValid = false;

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;

    m_push_events_isSet = false;
    m_push_events_isValid = false;

    m_issue_events_isSet = false;
    m_issue_events_isValid = false;

    m_confidential_issue_events_isSet = false;
    m_confidential_issue_events_isValid = false;

    m_merge_request_events_isSet = false;
    m_merge_request_events_isValid = false;

    m_note_events_isSet = false;
    m_note_events_isValid = false;

    m_tag_push_events_isSet = false;
    m_tag_push_events_isValid = false;

    m_build_events_isSet = false;
    m_build_events_isValid = false;
}

void OAIPutV3ProjectsIdServicesHipchat_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3ProjectsIdServicesHipchat_request::fromJsonObject(QJsonObject json) {

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_room_isValid = ::OpenAPI::fromJsonValue(m_room, json[QString("room")]);
    m_room_isSet = !json[QString("room")].isNull() && m_room_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_notify_isValid = ::OpenAPI::fromJsonValue(m_notify, json[QString("notify")]);
    m_notify_isSet = !json[QString("notify")].isNull() && m_notify_isValid;

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("api_version")]);
    m_api_version_isSet = !json[QString("api_version")].isNull() && m_api_version_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_push_events_isValid = ::OpenAPI::fromJsonValue(m_push_events, json[QString("push_events")]);
    m_push_events_isSet = !json[QString("push_events")].isNull() && m_push_events_isValid;

    m_issue_events_isValid = ::OpenAPI::fromJsonValue(m_issue_events, json[QString("issue_events")]);
    m_issue_events_isSet = !json[QString("issue_events")].isNull() && m_issue_events_isValid;

    m_confidential_issue_events_isValid = ::OpenAPI::fromJsonValue(m_confidential_issue_events, json[QString("confidential_issue_events")]);
    m_confidential_issue_events_isSet = !json[QString("confidential_issue_events")].isNull() && m_confidential_issue_events_isValid;

    m_merge_request_events_isValid = ::OpenAPI::fromJsonValue(m_merge_request_events, json[QString("merge_request_events")]);
    m_merge_request_events_isSet = !json[QString("merge_request_events")].isNull() && m_merge_request_events_isValid;

    m_note_events_isValid = ::OpenAPI::fromJsonValue(m_note_events, json[QString("note_events")]);
    m_note_events_isSet = !json[QString("note_events")].isNull() && m_note_events_isValid;

    m_tag_push_events_isValid = ::OpenAPI::fromJsonValue(m_tag_push_events, json[QString("tag_push_events")]);
    m_tag_push_events_isSet = !json[QString("tag_push_events")].isNull() && m_tag_push_events_isValid;

    m_build_events_isValid = ::OpenAPI::fromJsonValue(m_build_events, json[QString("build_events")]);
    m_build_events_isSet = !json[QString("build_events")].isNull() && m_build_events_isValid;
}

QString OAIPutV3ProjectsIdServicesHipchat_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3ProjectsIdServicesHipchat_request::asJsonObject() const {
    QJsonObject obj;
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_room_isSet) {
        obj.insert(QString("room"), ::OpenAPI::toJsonValue(m_room));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_notify_isSet) {
        obj.insert(QString("notify"), ::OpenAPI::toJsonValue(m_notify));
    }
    if (m_api_version_isSet) {
        obj.insert(QString("api_version"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_push_events_isSet) {
        obj.insert(QString("push_events"), ::OpenAPI::toJsonValue(m_push_events));
    }
    if (m_issue_events_isSet) {
        obj.insert(QString("issue_events"), ::OpenAPI::toJsonValue(m_issue_events));
    }
    if (m_confidential_issue_events_isSet) {
        obj.insert(QString("confidential_issue_events"), ::OpenAPI::toJsonValue(m_confidential_issue_events));
    }
    if (m_merge_request_events_isSet) {
        obj.insert(QString("merge_request_events"), ::OpenAPI::toJsonValue(m_merge_request_events));
    }
    if (m_note_events_isSet) {
        obj.insert(QString("note_events"), ::OpenAPI::toJsonValue(m_note_events));
    }
    if (m_tag_push_events_isSet) {
        obj.insert(QString("tag_push_events"), ::OpenAPI::toJsonValue(m_tag_push_events));
    }
    if (m_build_events_isSet) {
        obj.insert(QString("build_events"), ::OpenAPI::toJsonValue(m_build_events));
    }
    return obj;
}

QString OAIPutV3ProjectsIdServicesHipchat_request::getToken() const {
    return m_token;
}
void OAIPutV3ProjectsIdServicesHipchat_request::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_token_Set() const{
    return m_token_isSet;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIPutV3ProjectsIdServicesHipchat_request::getRoom() const {
    return m_room;
}
void OAIPutV3ProjectsIdServicesHipchat_request::setRoom(const QString &room) {
    m_room = room;
    m_room_isSet = true;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_room_Set() const{
    return m_room_isSet;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_room_Valid() const{
    return m_room_isValid;
}

QString OAIPutV3ProjectsIdServicesHipchat_request::getColor() const {
    return m_color;
}
void OAIPutV3ProjectsIdServicesHipchat_request::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_color_Set() const{
    return m_color_isSet;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_color_Valid() const{
    return m_color_isValid;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::isNotify() const {
    return m_notify;
}
void OAIPutV3ProjectsIdServicesHipchat_request::setNotify(const bool &notify) {
    m_notify = notify;
    m_notify_isSet = true;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_notify_Set() const{
    return m_notify_isSet;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_notify_Valid() const{
    return m_notify_isValid;
}

QString OAIPutV3ProjectsIdServicesHipchat_request::getApiVersion() const {
    return m_api_version;
}
void OAIPutV3ProjectsIdServicesHipchat_request::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIPutV3ProjectsIdServicesHipchat_request::getServer() const {
    return m_server;
}
void OAIPutV3ProjectsIdServicesHipchat_request::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_server_Set() const{
    return m_server_isSet;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_server_Valid() const{
    return m_server_isValid;
}

QString OAIPutV3ProjectsIdServicesHipchat_request::getPushEvents() const {
    return m_push_events;
}
void OAIPutV3ProjectsIdServicesHipchat_request::setPushEvents(const QString &push_events) {
    m_push_events = push_events;
    m_push_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_push_events_Set() const{
    return m_push_events_isSet;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_push_events_Valid() const{
    return m_push_events_isValid;
}

QString OAIPutV3ProjectsIdServicesHipchat_request::getIssueEvents() const {
    return m_issue_events;
}
void OAIPutV3ProjectsIdServicesHipchat_request::setIssueEvents(const QString &issue_events) {
    m_issue_events = issue_events;
    m_issue_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_issue_events_Set() const{
    return m_issue_events_isSet;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_issue_events_Valid() const{
    return m_issue_events_isValid;
}

QString OAIPutV3ProjectsIdServicesHipchat_request::getConfidentialIssueEvents() const {
    return m_confidential_issue_events;
}
void OAIPutV3ProjectsIdServicesHipchat_request::setConfidentialIssueEvents(const QString &confidential_issue_events) {
    m_confidential_issue_events = confidential_issue_events;
    m_confidential_issue_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_confidential_issue_events_Set() const{
    return m_confidential_issue_events_isSet;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_confidential_issue_events_Valid() const{
    return m_confidential_issue_events_isValid;
}

QString OAIPutV3ProjectsIdServicesHipchat_request::getMergeRequestEvents() const {
    return m_merge_request_events;
}
void OAIPutV3ProjectsIdServicesHipchat_request::setMergeRequestEvents(const QString &merge_request_events) {
    m_merge_request_events = merge_request_events;
    m_merge_request_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_merge_request_events_Set() const{
    return m_merge_request_events_isSet;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_merge_request_events_Valid() const{
    return m_merge_request_events_isValid;
}

QString OAIPutV3ProjectsIdServicesHipchat_request::getNoteEvents() const {
    return m_note_events;
}
void OAIPutV3ProjectsIdServicesHipchat_request::setNoteEvents(const QString &note_events) {
    m_note_events = note_events;
    m_note_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_note_events_Set() const{
    return m_note_events_isSet;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_note_events_Valid() const{
    return m_note_events_isValid;
}

QString OAIPutV3ProjectsIdServicesHipchat_request::getTagPushEvents() const {
    return m_tag_push_events;
}
void OAIPutV3ProjectsIdServicesHipchat_request::setTagPushEvents(const QString &tag_push_events) {
    m_tag_push_events = tag_push_events;
    m_tag_push_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_tag_push_events_Set() const{
    return m_tag_push_events_isSet;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_tag_push_events_Valid() const{
    return m_tag_push_events_isValid;
}

QString OAIPutV3ProjectsIdServicesHipchat_request::getBuildEvents() const {
    return m_build_events;
}
void OAIPutV3ProjectsIdServicesHipchat_request::setBuildEvents(const QString &build_events) {
    m_build_events = build_events;
    m_build_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_build_events_Set() const{
    return m_build_events_isSet;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::is_build_events_Valid() const{
    return m_build_events_isValid;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidential_issue_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_request_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_push_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_events_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3ProjectsIdServicesHipchat_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_isValid && true;
}

} // namespace OpenAPI
