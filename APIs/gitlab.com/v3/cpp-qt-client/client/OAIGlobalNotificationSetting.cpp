/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalNotificationSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalNotificationSetting::OAIGlobalNotificationSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalNotificationSetting::OAIGlobalNotificationSetting() {
    this->initializeModel();
}

OAIGlobalNotificationSetting::~OAIGlobalNotificationSetting() {}

void OAIGlobalNotificationSetting::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_notification_email_isSet = false;
    m_notification_email_isValid = false;
}

void OAIGlobalNotificationSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalNotificationSetting::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_notification_email_isValid = ::OpenAPI::fromJsonValue(m_notification_email, json[QString("notification_email")]);
    m_notification_email_isSet = !json[QString("notification_email")].isNull() && m_notification_email_isValid;
}

QString OAIGlobalNotificationSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalNotificationSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_events_isSet) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_notification_email_isSet) {
        obj.insert(QString("notification_email"), ::OpenAPI::toJsonValue(m_notification_email));
    }
    return obj;
}

QString OAIGlobalNotificationSetting::getEvents() const {
    return m_events;
}
void OAIGlobalNotificationSetting::setEvents(const QString &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIGlobalNotificationSetting::is_events_Set() const{
    return m_events_isSet;
}

bool OAIGlobalNotificationSetting::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIGlobalNotificationSetting::getLevel() const {
    return m_level;
}
void OAIGlobalNotificationSetting::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIGlobalNotificationSetting::is_level_Set() const{
    return m_level_isSet;
}

bool OAIGlobalNotificationSetting::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIGlobalNotificationSetting::getNotificationEmail() const {
    return m_notification_email;
}
void OAIGlobalNotificationSetting::setNotificationEmail(const QString &notification_email) {
    m_notification_email = notification_email;
    m_notification_email_isSet = true;
}

bool OAIGlobalNotificationSetting::is_notification_email_Set() const{
    return m_notification_email_isSet;
}

bool OAIGlobalNotificationSetting::is_notification_email_Valid() const{
    return m_notification_email_isValid;
}

bool OAIGlobalNotificationSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalNotificationSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
