/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPostV3ProjectsUserUserId_request.h
 *
 * 
 */

#ifndef OAIPostV3ProjectsUserUserId_request_H
#define OAIPostV3ProjectsUserUserId_request_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPostV3ProjectsUserUserId_request : public OAIObject {
public:
    OAIPostV3ProjectsUserUserId_request();
    OAIPostV3ProjectsUserUserId_request(QString json);
    ~OAIPostV3ProjectsUserUserId_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDefaultBranch() const;
    void setDefaultBranch(const QString &default_branch);
    bool is_default_branch_Set() const;
    bool is_default_branch_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isIssuesEnabled() const;
    void setIssuesEnabled(const bool &issues_enabled);
    bool is_issues_enabled_Set() const;
    bool is_issues_enabled_Valid() const;

    bool isMergeRequestsEnabled() const;
    void setMergeRequestsEnabled(const bool &merge_requests_enabled);
    bool is_merge_requests_enabled_Set() const;
    bool is_merge_requests_enabled_Valid() const;

    bool isWikiEnabled() const;
    void setWikiEnabled(const bool &wiki_enabled);
    bool is_wiki_enabled_Set() const;
    bool is_wiki_enabled_Valid() const;

    bool isBuildsEnabled() const;
    void setBuildsEnabled(const bool &builds_enabled);
    bool is_builds_enabled_Set() const;
    bool is_builds_enabled_Valid() const;

    bool isSnippetsEnabled() const;
    void setSnippetsEnabled(const bool &snippets_enabled);
    bool is_snippets_enabled_Set() const;
    bool is_snippets_enabled_Valid() const;

    bool isSharedRunnersEnabled() const;
    void setSharedRunnersEnabled(const bool &shared_runners_enabled);
    bool is_shared_runners_enabled_Set() const;
    bool is_shared_runners_enabled_Valid() const;

    bool isContainerRegistryEnabled() const;
    void setContainerRegistryEnabled(const bool &container_registry_enabled);
    bool is_container_registry_enabled_Set() const;
    bool is_container_registry_enabled_Valid() const;

    bool isLfsEnabled() const;
    void setLfsEnabled(const bool &lfs_enabled);
    bool is_lfs_enabled_Set() const;
    bool is_lfs_enabled_Valid() const;

    bool isRPublic() const;
    void setRPublic(const bool &r_public);
    bool is_r_public_Set() const;
    bool is_r_public_Valid() const;

    qint32 getVisibilityLevel() const;
    void setVisibilityLevel(const qint32 &visibility_level);
    bool is_visibility_level_Set() const;
    bool is_visibility_level_Valid() const;

    bool isPublicBuilds() const;
    void setPublicBuilds(const bool &public_builds);
    bool is_public_builds_Set() const;
    bool is_public_builds_Valid() const;

    bool isRequestAccessEnabled() const;
    void setRequestAccessEnabled(const bool &request_access_enabled);
    bool is_request_access_enabled_Set() const;
    bool is_request_access_enabled_Valid() const;

    bool isOnlyAllowMergeIfBuildSucceeds() const;
    void setOnlyAllowMergeIfBuildSucceeds(const bool &only_allow_merge_if_build_succeeds);
    bool is_only_allow_merge_if_build_succeeds_Set() const;
    bool is_only_allow_merge_if_build_succeeds_Valid() const;

    bool isOnlyAllowMergeIfAllDiscussionsAreResolved() const;
    void setOnlyAllowMergeIfAllDiscussionsAreResolved(const bool &only_allow_merge_if_all_discussions_are_resolved);
    bool is_only_allow_merge_if_all_discussions_are_resolved_Set() const;
    bool is_only_allow_merge_if_all_discussions_are_resolved_Valid() const;

    qint32 getNamespaceId() const;
    void setNamespaceId(const qint32 &namespace_id);
    bool is_namespace_id_Set() const;
    bool is_namespace_id_Valid() const;

    QString getImportUrl() const;
    void setImportUrl(const QString &import_url);
    bool is_import_url_Set() const;
    bool is_import_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_default_branch;
    bool m_default_branch_isSet;
    bool m_default_branch_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_issues_enabled;
    bool m_issues_enabled_isSet;
    bool m_issues_enabled_isValid;

    bool m_merge_requests_enabled;
    bool m_merge_requests_enabled_isSet;
    bool m_merge_requests_enabled_isValid;

    bool m_wiki_enabled;
    bool m_wiki_enabled_isSet;
    bool m_wiki_enabled_isValid;

    bool m_builds_enabled;
    bool m_builds_enabled_isSet;
    bool m_builds_enabled_isValid;

    bool m_snippets_enabled;
    bool m_snippets_enabled_isSet;
    bool m_snippets_enabled_isValid;

    bool m_shared_runners_enabled;
    bool m_shared_runners_enabled_isSet;
    bool m_shared_runners_enabled_isValid;

    bool m_container_registry_enabled;
    bool m_container_registry_enabled_isSet;
    bool m_container_registry_enabled_isValid;

    bool m_lfs_enabled;
    bool m_lfs_enabled_isSet;
    bool m_lfs_enabled_isValid;

    bool m_r_public;
    bool m_r_public_isSet;
    bool m_r_public_isValid;

    qint32 m_visibility_level;
    bool m_visibility_level_isSet;
    bool m_visibility_level_isValid;

    bool m_public_builds;
    bool m_public_builds_isSet;
    bool m_public_builds_isValid;

    bool m_request_access_enabled;
    bool m_request_access_enabled_isSet;
    bool m_request_access_enabled_isValid;

    bool m_only_allow_merge_if_build_succeeds;
    bool m_only_allow_merge_if_build_succeeds_isSet;
    bool m_only_allow_merge_if_build_succeeds_isValid;

    bool m_only_allow_merge_if_all_discussions_are_resolved;
    bool m_only_allow_merge_if_all_discussions_are_resolved_isSet;
    bool m_only_allow_merge_if_all_discussions_are_resolved_isValid;

    qint32 m_namespace_id;
    bool m_namespace_id_isSet;
    bool m_namespace_id_isValid;

    QString m_import_url;
    bool m_import_url_isSet;
    bool m_import_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPostV3ProjectsUserUserId_request)

#endif // OAIPostV3ProjectsUserUserId_request_H
