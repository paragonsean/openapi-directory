/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitStatus::OAICommitStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitStatus::OAICommitStatus() {
    this->initializeModel();
}

OAICommitStatus::~OAICommitStatus() {}

void OAICommitStatus::initializeModel() {

    m_allow_failure_isSet = false;
    m_allow_failure_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_finished_at_isSet = false;
    m_finished_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_url_isSet = false;
    m_target_url_isValid = false;
}

void OAICommitStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitStatus::fromJsonObject(QJsonObject json) {

    m_allow_failure_isValid = ::OpenAPI::fromJsonValue(m_allow_failure, json[QString("allow_failure")]);
    m_allow_failure_isSet = !json[QString("allow_failure")].isNull() && m_allow_failure_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_finished_at_isValid = ::OpenAPI::fromJsonValue(m_finished_at, json[QString("finished_at")]);
    m_finished_at_isSet = !json[QString("finished_at")].isNull() && m_finished_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("started_at")]);
    m_started_at_isSet = !json[QString("started_at")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_url_isValid = ::OpenAPI::fromJsonValue(m_target_url, json[QString("target_url")]);
    m_target_url_isSet = !json[QString("target_url")].isNull() && m_target_url_isValid;
}

QString OAICommitStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_failure_isSet) {
        obj.insert(QString("allow_failure"), ::OpenAPI::toJsonValue(m_allow_failure));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_finished_at_isSet) {
        obj.insert(QString("finished_at"), ::OpenAPI::toJsonValue(m_finished_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("started_at"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_url_isSet) {
        obj.insert(QString("target_url"), ::OpenAPI::toJsonValue(m_target_url));
    }
    return obj;
}

QString OAICommitStatus::getAllowFailure() const {
    return m_allow_failure;
}
void OAICommitStatus::setAllowFailure(const QString &allow_failure) {
    m_allow_failure = allow_failure;
    m_allow_failure_isSet = true;
}

bool OAICommitStatus::is_allow_failure_Set() const{
    return m_allow_failure_isSet;
}

bool OAICommitStatus::is_allow_failure_Valid() const{
    return m_allow_failure_isValid;
}

OAIUserBasic OAICommitStatus::getAuthor() const {
    return m_author;
}
void OAICommitStatus::setAuthor(const OAIUserBasic &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAICommitStatus::is_author_Set() const{
    return m_author_isSet;
}

bool OAICommitStatus::is_author_Valid() const{
    return m_author_isValid;
}

QString OAICommitStatus::getCreatedAt() const {
    return m_created_at;
}
void OAICommitStatus::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICommitStatus::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICommitStatus::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICommitStatus::getDescription() const {
    return m_description;
}
void OAICommitStatus::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICommitStatus::is_description_Set() const{
    return m_description_isSet;
}

bool OAICommitStatus::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICommitStatus::getFinishedAt() const {
    return m_finished_at;
}
void OAICommitStatus::setFinishedAt(const QString &finished_at) {
    m_finished_at = finished_at;
    m_finished_at_isSet = true;
}

bool OAICommitStatus::is_finished_at_Set() const{
    return m_finished_at_isSet;
}

bool OAICommitStatus::is_finished_at_Valid() const{
    return m_finished_at_isValid;
}

QString OAICommitStatus::getId() const {
    return m_id;
}
void OAICommitStatus::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICommitStatus::is_id_Set() const{
    return m_id_isSet;
}

bool OAICommitStatus::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICommitStatus::getName() const {
    return m_name;
}
void OAICommitStatus::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICommitStatus::is_name_Set() const{
    return m_name_isSet;
}

bool OAICommitStatus::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICommitStatus::getRef() const {
    return m_ref;
}
void OAICommitStatus::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAICommitStatus::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAICommitStatus::is_ref_Valid() const{
    return m_ref_isValid;
}

QString OAICommitStatus::getSha() const {
    return m_sha;
}
void OAICommitStatus::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAICommitStatus::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAICommitStatus::is_sha_Valid() const{
    return m_sha_isValid;
}

QString OAICommitStatus::getStartedAt() const {
    return m_started_at;
}
void OAICommitStatus::setStartedAt(const QString &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAICommitStatus::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAICommitStatus::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAICommitStatus::getStatus() const {
    return m_status;
}
void OAICommitStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICommitStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAICommitStatus::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICommitStatus::getTargetUrl() const {
    return m_target_url;
}
void OAICommitStatus::setTargetUrl(const QString &target_url) {
    m_target_url = target_url;
    m_target_url_isSet = true;
}

bool OAICommitStatus::is_target_url_Set() const{
    return m_target_url_isSet;
}

bool OAICommitStatus::is_target_url_Valid() const{
    return m_target_url_isValid;
}

bool OAICommitStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
