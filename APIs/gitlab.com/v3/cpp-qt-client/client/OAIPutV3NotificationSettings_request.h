/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutV3NotificationSettings_request.h
 *
 * 
 */

#ifndef OAIPutV3NotificationSettings_request_H
#define OAIPutV3NotificationSettings_request_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPutV3NotificationSettings_request : public OAIObject {
public:
    OAIPutV3NotificationSettings_request();
    OAIPutV3NotificationSettings_request(QString json);
    ~OAIPutV3NotificationSettings_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLevel() const;
    void setLevel(const QString &level);
    bool is_level_Set() const;
    bool is_level_Valid() const;

    QString getNotificationEmail() const;
    void setNotificationEmail(const QString &notification_email);
    bool is_notification_email_Set() const;
    bool is_notification_email_Valid() const;

    bool isNewNote() const;
    void setNewNote(const bool &new_note);
    bool is_new_note_Set() const;
    bool is_new_note_Valid() const;

    bool isNewIssue() const;
    void setNewIssue(const bool &new_issue);
    bool is_new_issue_Set() const;
    bool is_new_issue_Valid() const;

    bool isReopenIssue() const;
    void setReopenIssue(const bool &reopen_issue);
    bool is_reopen_issue_Set() const;
    bool is_reopen_issue_Valid() const;

    bool isCloseIssue() const;
    void setCloseIssue(const bool &close_issue);
    bool is_close_issue_Set() const;
    bool is_close_issue_Valid() const;

    bool isReassignIssue() const;
    void setReassignIssue(const bool &reassign_issue);
    bool is_reassign_issue_Set() const;
    bool is_reassign_issue_Valid() const;

    bool isNewMergeRequest() const;
    void setNewMergeRequest(const bool &new_merge_request);
    bool is_new_merge_request_Set() const;
    bool is_new_merge_request_Valid() const;

    bool isReopenMergeRequest() const;
    void setReopenMergeRequest(const bool &reopen_merge_request);
    bool is_reopen_merge_request_Set() const;
    bool is_reopen_merge_request_Valid() const;

    bool isCloseMergeRequest() const;
    void setCloseMergeRequest(const bool &close_merge_request);
    bool is_close_merge_request_Set() const;
    bool is_close_merge_request_Valid() const;

    bool isReassignMergeRequest() const;
    void setReassignMergeRequest(const bool &reassign_merge_request);
    bool is_reassign_merge_request_Set() const;
    bool is_reassign_merge_request_Valid() const;

    bool isMergeMergeRequest() const;
    void setMergeMergeRequest(const bool &merge_merge_request);
    bool is_merge_merge_request_Set() const;
    bool is_merge_merge_request_Valid() const;

    bool isFailedPipeline() const;
    void setFailedPipeline(const bool &failed_pipeline);
    bool is_failed_pipeline_Set() const;
    bool is_failed_pipeline_Valid() const;

    bool isSuccessPipeline() const;
    void setSuccessPipeline(const bool &success_pipeline);
    bool is_success_pipeline_Set() const;
    bool is_success_pipeline_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_level;
    bool m_level_isSet;
    bool m_level_isValid;

    QString m_notification_email;
    bool m_notification_email_isSet;
    bool m_notification_email_isValid;

    bool m_new_note;
    bool m_new_note_isSet;
    bool m_new_note_isValid;

    bool m_new_issue;
    bool m_new_issue_isSet;
    bool m_new_issue_isValid;

    bool m_reopen_issue;
    bool m_reopen_issue_isSet;
    bool m_reopen_issue_isValid;

    bool m_close_issue;
    bool m_close_issue_isSet;
    bool m_close_issue_isValid;

    bool m_reassign_issue;
    bool m_reassign_issue_isSet;
    bool m_reassign_issue_isValid;

    bool m_new_merge_request;
    bool m_new_merge_request_isSet;
    bool m_new_merge_request_isValid;

    bool m_reopen_merge_request;
    bool m_reopen_merge_request_isSet;
    bool m_reopen_merge_request_isValid;

    bool m_close_merge_request;
    bool m_close_merge_request_isSet;
    bool m_close_merge_request_isValid;

    bool m_reassign_merge_request;
    bool m_reassign_merge_request_isSet;
    bool m_reassign_merge_request_isValid;

    bool m_merge_merge_request;
    bool m_merge_merge_request_isSet;
    bool m_merge_merge_request_isValid;

    bool m_failed_pipeline;
    bool m_failed_pipeline_isSet;
    bool m_failed_pipeline_isValid;

    bool m_success_pipeline;
    bool m_success_pipeline_isSet;
    bool m_success_pipeline_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutV3NotificationSettings_request)

#endif // OAIPutV3NotificationSettings_request_H
