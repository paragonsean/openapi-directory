/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentity::OAIIdentity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentity::OAIIdentity() {
    this->initializeModel();
}

OAIIdentity::~OAIIdentity() {}

void OAIIdentity::initializeModel() {

    m_extern_uid_isSet = false;
    m_extern_uid_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;
}

void OAIIdentity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentity::fromJsonObject(QJsonObject json) {

    m_extern_uid_isValid = ::OpenAPI::fromJsonValue(m_extern_uid, json[QString("extern_uid")]);
    m_extern_uid_isSet = !json[QString("extern_uid")].isNull() && m_extern_uid_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;
}

QString OAIIdentity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentity::asJsonObject() const {
    QJsonObject obj;
    if (m_extern_uid_isSet) {
        obj.insert(QString("extern_uid"), ::OpenAPI::toJsonValue(m_extern_uid));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    return obj;
}

QString OAIIdentity::getExternUid() const {
    return m_extern_uid;
}
void OAIIdentity::setExternUid(const QString &extern_uid) {
    m_extern_uid = extern_uid;
    m_extern_uid_isSet = true;
}

bool OAIIdentity::is_extern_uid_Set() const{
    return m_extern_uid_isSet;
}

bool OAIIdentity::is_extern_uid_Valid() const{
    return m_extern_uid_isValid;
}

QString OAIIdentity::getProvider() const {
    return m_provider;
}
void OAIIdentity::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIIdentity::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIIdentity::is_provider_Valid() const{
    return m_provider_isValid;
}

bool OAIIdentity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extern_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
