/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3ProjectsIdNotificationSettings_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3ProjectsIdNotificationSettings_request::OAIPutV3ProjectsIdNotificationSettings_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3ProjectsIdNotificationSettings_request::OAIPutV3ProjectsIdNotificationSettings_request() {
    this->initializeModel();
}

OAIPutV3ProjectsIdNotificationSettings_request::~OAIPutV3ProjectsIdNotificationSettings_request() {}

void OAIPutV3ProjectsIdNotificationSettings_request::initializeModel() {

    m_level_isSet = false;
    m_level_isValid = false;

    m_new_note_isSet = false;
    m_new_note_isValid = false;

    m_new_issue_isSet = false;
    m_new_issue_isValid = false;

    m_reopen_issue_isSet = false;
    m_reopen_issue_isValid = false;

    m_close_issue_isSet = false;
    m_close_issue_isValid = false;

    m_reassign_issue_isSet = false;
    m_reassign_issue_isValid = false;

    m_new_merge_request_isSet = false;
    m_new_merge_request_isValid = false;

    m_reopen_merge_request_isSet = false;
    m_reopen_merge_request_isValid = false;

    m_close_merge_request_isSet = false;
    m_close_merge_request_isValid = false;

    m_reassign_merge_request_isSet = false;
    m_reassign_merge_request_isValid = false;

    m_merge_merge_request_isSet = false;
    m_merge_merge_request_isValid = false;

    m_failed_pipeline_isSet = false;
    m_failed_pipeline_isValid = false;

    m_success_pipeline_isSet = false;
    m_success_pipeline_isValid = false;
}

void OAIPutV3ProjectsIdNotificationSettings_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3ProjectsIdNotificationSettings_request::fromJsonObject(QJsonObject json) {

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_new_note_isValid = ::OpenAPI::fromJsonValue(m_new_note, json[QString("new_note")]);
    m_new_note_isSet = !json[QString("new_note")].isNull() && m_new_note_isValid;

    m_new_issue_isValid = ::OpenAPI::fromJsonValue(m_new_issue, json[QString("new_issue")]);
    m_new_issue_isSet = !json[QString("new_issue")].isNull() && m_new_issue_isValid;

    m_reopen_issue_isValid = ::OpenAPI::fromJsonValue(m_reopen_issue, json[QString("reopen_issue")]);
    m_reopen_issue_isSet = !json[QString("reopen_issue")].isNull() && m_reopen_issue_isValid;

    m_close_issue_isValid = ::OpenAPI::fromJsonValue(m_close_issue, json[QString("close_issue")]);
    m_close_issue_isSet = !json[QString("close_issue")].isNull() && m_close_issue_isValid;

    m_reassign_issue_isValid = ::OpenAPI::fromJsonValue(m_reassign_issue, json[QString("reassign_issue")]);
    m_reassign_issue_isSet = !json[QString("reassign_issue")].isNull() && m_reassign_issue_isValid;

    m_new_merge_request_isValid = ::OpenAPI::fromJsonValue(m_new_merge_request, json[QString("new_merge_request")]);
    m_new_merge_request_isSet = !json[QString("new_merge_request")].isNull() && m_new_merge_request_isValid;

    m_reopen_merge_request_isValid = ::OpenAPI::fromJsonValue(m_reopen_merge_request, json[QString("reopen_merge_request")]);
    m_reopen_merge_request_isSet = !json[QString("reopen_merge_request")].isNull() && m_reopen_merge_request_isValid;

    m_close_merge_request_isValid = ::OpenAPI::fromJsonValue(m_close_merge_request, json[QString("close_merge_request")]);
    m_close_merge_request_isSet = !json[QString("close_merge_request")].isNull() && m_close_merge_request_isValid;

    m_reassign_merge_request_isValid = ::OpenAPI::fromJsonValue(m_reassign_merge_request, json[QString("reassign_merge_request")]);
    m_reassign_merge_request_isSet = !json[QString("reassign_merge_request")].isNull() && m_reassign_merge_request_isValid;

    m_merge_merge_request_isValid = ::OpenAPI::fromJsonValue(m_merge_merge_request, json[QString("merge_merge_request")]);
    m_merge_merge_request_isSet = !json[QString("merge_merge_request")].isNull() && m_merge_merge_request_isValid;

    m_failed_pipeline_isValid = ::OpenAPI::fromJsonValue(m_failed_pipeline, json[QString("failed_pipeline")]);
    m_failed_pipeline_isSet = !json[QString("failed_pipeline")].isNull() && m_failed_pipeline_isValid;

    m_success_pipeline_isValid = ::OpenAPI::fromJsonValue(m_success_pipeline, json[QString("success_pipeline")]);
    m_success_pipeline_isSet = !json[QString("success_pipeline")].isNull() && m_success_pipeline_isValid;
}

QString OAIPutV3ProjectsIdNotificationSettings_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3ProjectsIdNotificationSettings_request::asJsonObject() const {
    QJsonObject obj;
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_new_note_isSet) {
        obj.insert(QString("new_note"), ::OpenAPI::toJsonValue(m_new_note));
    }
    if (m_new_issue_isSet) {
        obj.insert(QString("new_issue"), ::OpenAPI::toJsonValue(m_new_issue));
    }
    if (m_reopen_issue_isSet) {
        obj.insert(QString("reopen_issue"), ::OpenAPI::toJsonValue(m_reopen_issue));
    }
    if (m_close_issue_isSet) {
        obj.insert(QString("close_issue"), ::OpenAPI::toJsonValue(m_close_issue));
    }
    if (m_reassign_issue_isSet) {
        obj.insert(QString("reassign_issue"), ::OpenAPI::toJsonValue(m_reassign_issue));
    }
    if (m_new_merge_request_isSet) {
        obj.insert(QString("new_merge_request"), ::OpenAPI::toJsonValue(m_new_merge_request));
    }
    if (m_reopen_merge_request_isSet) {
        obj.insert(QString("reopen_merge_request"), ::OpenAPI::toJsonValue(m_reopen_merge_request));
    }
    if (m_close_merge_request_isSet) {
        obj.insert(QString("close_merge_request"), ::OpenAPI::toJsonValue(m_close_merge_request));
    }
    if (m_reassign_merge_request_isSet) {
        obj.insert(QString("reassign_merge_request"), ::OpenAPI::toJsonValue(m_reassign_merge_request));
    }
    if (m_merge_merge_request_isSet) {
        obj.insert(QString("merge_merge_request"), ::OpenAPI::toJsonValue(m_merge_merge_request));
    }
    if (m_failed_pipeline_isSet) {
        obj.insert(QString("failed_pipeline"), ::OpenAPI::toJsonValue(m_failed_pipeline));
    }
    if (m_success_pipeline_isSet) {
        obj.insert(QString("success_pipeline"), ::OpenAPI::toJsonValue(m_success_pipeline));
    }
    return obj;
}

QString OAIPutV3ProjectsIdNotificationSettings_request::getLevel() const {
    return m_level;
}
void OAIPutV3ProjectsIdNotificationSettings_request::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_level_Set() const{
    return m_level_isSet;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_level_Valid() const{
    return m_level_isValid;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::isNewNote() const {
    return m_new_note;
}
void OAIPutV3ProjectsIdNotificationSettings_request::setNewNote(const bool &new_note) {
    m_new_note = new_note;
    m_new_note_isSet = true;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_new_note_Set() const{
    return m_new_note_isSet;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_new_note_Valid() const{
    return m_new_note_isValid;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::isNewIssue() const {
    return m_new_issue;
}
void OAIPutV3ProjectsIdNotificationSettings_request::setNewIssue(const bool &new_issue) {
    m_new_issue = new_issue;
    m_new_issue_isSet = true;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_new_issue_Set() const{
    return m_new_issue_isSet;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_new_issue_Valid() const{
    return m_new_issue_isValid;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::isReopenIssue() const {
    return m_reopen_issue;
}
void OAIPutV3ProjectsIdNotificationSettings_request::setReopenIssue(const bool &reopen_issue) {
    m_reopen_issue = reopen_issue;
    m_reopen_issue_isSet = true;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_reopen_issue_Set() const{
    return m_reopen_issue_isSet;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_reopen_issue_Valid() const{
    return m_reopen_issue_isValid;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::isCloseIssue() const {
    return m_close_issue;
}
void OAIPutV3ProjectsIdNotificationSettings_request::setCloseIssue(const bool &close_issue) {
    m_close_issue = close_issue;
    m_close_issue_isSet = true;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_close_issue_Set() const{
    return m_close_issue_isSet;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_close_issue_Valid() const{
    return m_close_issue_isValid;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::isReassignIssue() const {
    return m_reassign_issue;
}
void OAIPutV3ProjectsIdNotificationSettings_request::setReassignIssue(const bool &reassign_issue) {
    m_reassign_issue = reassign_issue;
    m_reassign_issue_isSet = true;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_reassign_issue_Set() const{
    return m_reassign_issue_isSet;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_reassign_issue_Valid() const{
    return m_reassign_issue_isValid;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::isNewMergeRequest() const {
    return m_new_merge_request;
}
void OAIPutV3ProjectsIdNotificationSettings_request::setNewMergeRequest(const bool &new_merge_request) {
    m_new_merge_request = new_merge_request;
    m_new_merge_request_isSet = true;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_new_merge_request_Set() const{
    return m_new_merge_request_isSet;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_new_merge_request_Valid() const{
    return m_new_merge_request_isValid;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::isReopenMergeRequest() const {
    return m_reopen_merge_request;
}
void OAIPutV3ProjectsIdNotificationSettings_request::setReopenMergeRequest(const bool &reopen_merge_request) {
    m_reopen_merge_request = reopen_merge_request;
    m_reopen_merge_request_isSet = true;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_reopen_merge_request_Set() const{
    return m_reopen_merge_request_isSet;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_reopen_merge_request_Valid() const{
    return m_reopen_merge_request_isValid;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::isCloseMergeRequest() const {
    return m_close_merge_request;
}
void OAIPutV3ProjectsIdNotificationSettings_request::setCloseMergeRequest(const bool &close_merge_request) {
    m_close_merge_request = close_merge_request;
    m_close_merge_request_isSet = true;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_close_merge_request_Set() const{
    return m_close_merge_request_isSet;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_close_merge_request_Valid() const{
    return m_close_merge_request_isValid;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::isReassignMergeRequest() const {
    return m_reassign_merge_request;
}
void OAIPutV3ProjectsIdNotificationSettings_request::setReassignMergeRequest(const bool &reassign_merge_request) {
    m_reassign_merge_request = reassign_merge_request;
    m_reassign_merge_request_isSet = true;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_reassign_merge_request_Set() const{
    return m_reassign_merge_request_isSet;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_reassign_merge_request_Valid() const{
    return m_reassign_merge_request_isValid;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::isMergeMergeRequest() const {
    return m_merge_merge_request;
}
void OAIPutV3ProjectsIdNotificationSettings_request::setMergeMergeRequest(const bool &merge_merge_request) {
    m_merge_merge_request = merge_merge_request;
    m_merge_merge_request_isSet = true;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_merge_merge_request_Set() const{
    return m_merge_merge_request_isSet;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_merge_merge_request_Valid() const{
    return m_merge_merge_request_isValid;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::isFailedPipeline() const {
    return m_failed_pipeline;
}
void OAIPutV3ProjectsIdNotificationSettings_request::setFailedPipeline(const bool &failed_pipeline) {
    m_failed_pipeline = failed_pipeline;
    m_failed_pipeline_isSet = true;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_failed_pipeline_Set() const{
    return m_failed_pipeline_isSet;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_failed_pipeline_Valid() const{
    return m_failed_pipeline_isValid;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::isSuccessPipeline() const {
    return m_success_pipeline;
}
void OAIPutV3ProjectsIdNotificationSettings_request::setSuccessPipeline(const bool &success_pipeline) {
    m_success_pipeline = success_pipeline;
    m_success_pipeline_isSet = true;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_success_pipeline_Set() const{
    return m_success_pipeline_isSet;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::is_success_pipeline_Valid() const{
    return m_success_pipeline_isValid;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_issue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reopen_issue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_close_issue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reassign_issue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_merge_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reopen_merge_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_close_merge_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reassign_merge_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_merge_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_pipeline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_pipeline_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3ProjectsIdNotificationSettings_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
