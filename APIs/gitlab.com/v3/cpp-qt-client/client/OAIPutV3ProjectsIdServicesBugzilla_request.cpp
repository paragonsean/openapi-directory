/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3ProjectsIdServicesBugzilla_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3ProjectsIdServicesBugzilla_request::OAIPutV3ProjectsIdServicesBugzilla_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3ProjectsIdServicesBugzilla_request::OAIPutV3ProjectsIdServicesBugzilla_request() {
    this->initializeModel();
}

OAIPutV3ProjectsIdServicesBugzilla_request::~OAIPutV3ProjectsIdServicesBugzilla_request() {}

void OAIPutV3ProjectsIdServicesBugzilla_request::initializeModel() {

    m_new_issue_url_isSet = false;
    m_new_issue_url_isValid = false;

    m_issues_url_isSet = false;
    m_issues_url_isValid = false;

    m_project_url_isSet = false;
    m_project_url_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_push_events_isSet = false;
    m_push_events_isValid = false;
}

void OAIPutV3ProjectsIdServicesBugzilla_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3ProjectsIdServicesBugzilla_request::fromJsonObject(QJsonObject json) {

    m_new_issue_url_isValid = ::OpenAPI::fromJsonValue(m_new_issue_url, json[QString("new_issue_url")]);
    m_new_issue_url_isSet = !json[QString("new_issue_url")].isNull() && m_new_issue_url_isValid;

    m_issues_url_isValid = ::OpenAPI::fromJsonValue(m_issues_url, json[QString("issues_url")]);
    m_issues_url_isSet = !json[QString("issues_url")].isNull() && m_issues_url_isValid;

    m_project_url_isValid = ::OpenAPI::fromJsonValue(m_project_url, json[QString("project_url")]);
    m_project_url_isSet = !json[QString("project_url")].isNull() && m_project_url_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_push_events_isValid = ::OpenAPI::fromJsonValue(m_push_events, json[QString("push_events")]);
    m_push_events_isSet = !json[QString("push_events")].isNull() && m_push_events_isValid;
}

QString OAIPutV3ProjectsIdServicesBugzilla_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3ProjectsIdServicesBugzilla_request::asJsonObject() const {
    QJsonObject obj;
    if (m_new_issue_url_isSet) {
        obj.insert(QString("new_issue_url"), ::OpenAPI::toJsonValue(m_new_issue_url));
    }
    if (m_issues_url_isSet) {
        obj.insert(QString("issues_url"), ::OpenAPI::toJsonValue(m_issues_url));
    }
    if (m_project_url_isSet) {
        obj.insert(QString("project_url"), ::OpenAPI::toJsonValue(m_project_url));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_push_events_isSet) {
        obj.insert(QString("push_events"), ::OpenAPI::toJsonValue(m_push_events));
    }
    return obj;
}

QString OAIPutV3ProjectsIdServicesBugzilla_request::getNewIssueUrl() const {
    return m_new_issue_url;
}
void OAIPutV3ProjectsIdServicesBugzilla_request::setNewIssueUrl(const QString &new_issue_url) {
    m_new_issue_url = new_issue_url;
    m_new_issue_url_isSet = true;
}

bool OAIPutV3ProjectsIdServicesBugzilla_request::is_new_issue_url_Set() const{
    return m_new_issue_url_isSet;
}

bool OAIPutV3ProjectsIdServicesBugzilla_request::is_new_issue_url_Valid() const{
    return m_new_issue_url_isValid;
}

QString OAIPutV3ProjectsIdServicesBugzilla_request::getIssuesUrl() const {
    return m_issues_url;
}
void OAIPutV3ProjectsIdServicesBugzilla_request::setIssuesUrl(const QString &issues_url) {
    m_issues_url = issues_url;
    m_issues_url_isSet = true;
}

bool OAIPutV3ProjectsIdServicesBugzilla_request::is_issues_url_Set() const{
    return m_issues_url_isSet;
}

bool OAIPutV3ProjectsIdServicesBugzilla_request::is_issues_url_Valid() const{
    return m_issues_url_isValid;
}

QString OAIPutV3ProjectsIdServicesBugzilla_request::getProjectUrl() const {
    return m_project_url;
}
void OAIPutV3ProjectsIdServicesBugzilla_request::setProjectUrl(const QString &project_url) {
    m_project_url = project_url;
    m_project_url_isSet = true;
}

bool OAIPutV3ProjectsIdServicesBugzilla_request::is_project_url_Set() const{
    return m_project_url_isSet;
}

bool OAIPutV3ProjectsIdServicesBugzilla_request::is_project_url_Valid() const{
    return m_project_url_isValid;
}

QString OAIPutV3ProjectsIdServicesBugzilla_request::getDescription() const {
    return m_description;
}
void OAIPutV3ProjectsIdServicesBugzilla_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPutV3ProjectsIdServicesBugzilla_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPutV3ProjectsIdServicesBugzilla_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPutV3ProjectsIdServicesBugzilla_request::getTitle() const {
    return m_title;
}
void OAIPutV3ProjectsIdServicesBugzilla_request::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPutV3ProjectsIdServicesBugzilla_request::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPutV3ProjectsIdServicesBugzilla_request::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPutV3ProjectsIdServicesBugzilla_request::getPushEvents() const {
    return m_push_events;
}
void OAIPutV3ProjectsIdServicesBugzilla_request::setPushEvents(const QString &push_events) {
    m_push_events = push_events;
    m_push_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesBugzilla_request::is_push_events_Set() const{
    return m_push_events_isSet;
}

bool OAIPutV3ProjectsIdServicesBugzilla_request::is_push_events_Valid() const{
    return m_push_events_isValid;
}

bool OAIPutV3ProjectsIdServicesBugzilla_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_issue_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_events_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3ProjectsIdServicesBugzilla_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_new_issue_url_isValid && m_issues_url_isValid && m_project_url_isValid && true;
}

} // namespace OpenAPI
