/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject::OAIProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject::OAIProject() {
    this->initializeModel();
}

OAIProject::~OAIProject() {}

void OAIProject::initializeModel() {

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_builds_enabled_isSet = false;
    m_builds_enabled_isValid = false;

    m_container_registry_enabled_isSet = false;
    m_container_registry_enabled_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creator_id_isSet = false;
    m_creator_id_isValid = false;

    m_default_branch_isSet = false;
    m_default_branch_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_forked_from_project_isSet = false;
    m_forked_from_project_isValid = false;

    m_forks_count_isSet = false;
    m_forks_count_isValid = false;

    m_http_url_to_repo_isSet = false;
    m_http_url_to_repo_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issues_enabled_isSet = false;
    m_issues_enabled_isValid = false;

    m_last_activity_at_isSet = false;
    m_last_activity_at_isValid = false;

    m_lfs_enabled_isSet = false;
    m_lfs_enabled_isValid = false;

    m_merge_requests_enabled_isSet = false;
    m_merge_requests_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_with_namespace_isSet = false;
    m_name_with_namespace_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_only_allow_merge_if_all_discussions_are_resolved_isSet = false;
    m_only_allow_merge_if_all_discussions_are_resolved_isValid = false;

    m_only_allow_merge_if_build_succeeds_isSet = false;
    m_only_allow_merge_if_build_succeeds_isValid = false;

    m_open_issues_count_isSet = false;
    m_open_issues_count_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_path_with_namespace_isSet = false;
    m_path_with_namespace_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_public_builds_isSet = false;
    m_public_builds_isValid = false;

    m_request_access_enabled_isSet = false;
    m_request_access_enabled_isValid = false;

    m_runners_token_isSet = false;
    m_runners_token_isValid = false;

    m_shared_runners_enabled_isSet = false;
    m_shared_runners_enabled_isValid = false;

    m_shared_with_groups_isSet = false;
    m_shared_with_groups_isValid = false;

    m_snippets_enabled_isSet = false;
    m_snippets_enabled_isValid = false;

    m_ssh_url_to_repo_isSet = false;
    m_ssh_url_to_repo_isValid = false;

    m_star_count_isSet = false;
    m_star_count_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;

    m_tag_list_isSet = false;
    m_tag_list_isValid = false;

    m_visibility_level_isSet = false;
    m_visibility_level_isValid = false;

    m_web_url_isSet = false;
    m_web_url_isValid = false;

    m_wiki_enabled_isSet = false;
    m_wiki_enabled_isValid = false;
}

void OAIProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject::fromJsonObject(QJsonObject json) {

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_builds_enabled_isValid = ::OpenAPI::fromJsonValue(m_builds_enabled, json[QString("builds_enabled")]);
    m_builds_enabled_isSet = !json[QString("builds_enabled")].isNull() && m_builds_enabled_isValid;

    m_container_registry_enabled_isValid = ::OpenAPI::fromJsonValue(m_container_registry_enabled, json[QString("container_registry_enabled")]);
    m_container_registry_enabled_isSet = !json[QString("container_registry_enabled")].isNull() && m_container_registry_enabled_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_creator_id_isValid = ::OpenAPI::fromJsonValue(m_creator_id, json[QString("creator_id")]);
    m_creator_id_isSet = !json[QString("creator_id")].isNull() && m_creator_id_isValid;

    m_default_branch_isValid = ::OpenAPI::fromJsonValue(m_default_branch, json[QString("default_branch")]);
    m_default_branch_isSet = !json[QString("default_branch")].isNull() && m_default_branch_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_forked_from_project_isValid = ::OpenAPI::fromJsonValue(m_forked_from_project, json[QString("forked_from_project")]);
    m_forked_from_project_isSet = !json[QString("forked_from_project")].isNull() && m_forked_from_project_isValid;

    m_forks_count_isValid = ::OpenAPI::fromJsonValue(m_forks_count, json[QString("forks_count")]);
    m_forks_count_isSet = !json[QString("forks_count")].isNull() && m_forks_count_isValid;

    m_http_url_to_repo_isValid = ::OpenAPI::fromJsonValue(m_http_url_to_repo, json[QString("http_url_to_repo")]);
    m_http_url_to_repo_isSet = !json[QString("http_url_to_repo")].isNull() && m_http_url_to_repo_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issues_enabled_isValid = ::OpenAPI::fromJsonValue(m_issues_enabled, json[QString("issues_enabled")]);
    m_issues_enabled_isSet = !json[QString("issues_enabled")].isNull() && m_issues_enabled_isValid;

    m_last_activity_at_isValid = ::OpenAPI::fromJsonValue(m_last_activity_at, json[QString("last_activity_at")]);
    m_last_activity_at_isSet = !json[QString("last_activity_at")].isNull() && m_last_activity_at_isValid;

    m_lfs_enabled_isValid = ::OpenAPI::fromJsonValue(m_lfs_enabled, json[QString("lfs_enabled")]);
    m_lfs_enabled_isSet = !json[QString("lfs_enabled")].isNull() && m_lfs_enabled_isValid;

    m_merge_requests_enabled_isValid = ::OpenAPI::fromJsonValue(m_merge_requests_enabled, json[QString("merge_requests_enabled")]);
    m_merge_requests_enabled_isSet = !json[QString("merge_requests_enabled")].isNull() && m_merge_requests_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_with_namespace_isValid = ::OpenAPI::fromJsonValue(m_name_with_namespace, json[QString("name_with_namespace")]);
    m_name_with_namespace_isSet = !json[QString("name_with_namespace")].isNull() && m_name_with_namespace_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_only_allow_merge_if_all_discussions_are_resolved_isValid = ::OpenAPI::fromJsonValue(m_only_allow_merge_if_all_discussions_are_resolved, json[QString("only_allow_merge_if_all_discussions_are_resolved")]);
    m_only_allow_merge_if_all_discussions_are_resolved_isSet = !json[QString("only_allow_merge_if_all_discussions_are_resolved")].isNull() && m_only_allow_merge_if_all_discussions_are_resolved_isValid;

    m_only_allow_merge_if_build_succeeds_isValid = ::OpenAPI::fromJsonValue(m_only_allow_merge_if_build_succeeds, json[QString("only_allow_merge_if_build_succeeds")]);
    m_only_allow_merge_if_build_succeeds_isSet = !json[QString("only_allow_merge_if_build_succeeds")].isNull() && m_only_allow_merge_if_build_succeeds_isValid;

    m_open_issues_count_isValid = ::OpenAPI::fromJsonValue(m_open_issues_count, json[QString("open_issues_count")]);
    m_open_issues_count_isSet = !json[QString("open_issues_count")].isNull() && m_open_issues_count_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_path_with_namespace_isValid = ::OpenAPI::fromJsonValue(m_path_with_namespace, json[QString("path_with_namespace")]);
    m_path_with_namespace_isSet = !json[QString("path_with_namespace")].isNull() && m_path_with_namespace_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_public_builds_isValid = ::OpenAPI::fromJsonValue(m_public_builds, json[QString("public_builds")]);
    m_public_builds_isSet = !json[QString("public_builds")].isNull() && m_public_builds_isValid;

    m_request_access_enabled_isValid = ::OpenAPI::fromJsonValue(m_request_access_enabled, json[QString("request_access_enabled")]);
    m_request_access_enabled_isSet = !json[QString("request_access_enabled")].isNull() && m_request_access_enabled_isValid;

    m_runners_token_isValid = ::OpenAPI::fromJsonValue(m_runners_token, json[QString("runners_token")]);
    m_runners_token_isSet = !json[QString("runners_token")].isNull() && m_runners_token_isValid;

    m_shared_runners_enabled_isValid = ::OpenAPI::fromJsonValue(m_shared_runners_enabled, json[QString("shared_runners_enabled")]);
    m_shared_runners_enabled_isSet = !json[QString("shared_runners_enabled")].isNull() && m_shared_runners_enabled_isValid;

    m_shared_with_groups_isValid = ::OpenAPI::fromJsonValue(m_shared_with_groups, json[QString("shared_with_groups")]);
    m_shared_with_groups_isSet = !json[QString("shared_with_groups")].isNull() && m_shared_with_groups_isValid;

    m_snippets_enabled_isValid = ::OpenAPI::fromJsonValue(m_snippets_enabled, json[QString("snippets_enabled")]);
    m_snippets_enabled_isSet = !json[QString("snippets_enabled")].isNull() && m_snippets_enabled_isValid;

    m_ssh_url_to_repo_isValid = ::OpenAPI::fromJsonValue(m_ssh_url_to_repo, json[QString("ssh_url_to_repo")]);
    m_ssh_url_to_repo_isSet = !json[QString("ssh_url_to_repo")].isNull() && m_ssh_url_to_repo_isValid;

    m_star_count_isValid = ::OpenAPI::fromJsonValue(m_star_count, json[QString("star_count")]);
    m_star_count_isSet = !json[QString("star_count")].isNull() && m_star_count_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;

    m_tag_list_isValid = ::OpenAPI::fromJsonValue(m_tag_list, json[QString("tag_list")]);
    m_tag_list_isSet = !json[QString("tag_list")].isNull() && m_tag_list_isValid;

    m_visibility_level_isValid = ::OpenAPI::fromJsonValue(m_visibility_level, json[QString("visibility_level")]);
    m_visibility_level_isSet = !json[QString("visibility_level")].isNull() && m_visibility_level_isValid;

    m_web_url_isValid = ::OpenAPI::fromJsonValue(m_web_url, json[QString("web_url")]);
    m_web_url_isSet = !json[QString("web_url")].isNull() && m_web_url_isValid;

    m_wiki_enabled_isValid = ::OpenAPI::fromJsonValue(m_wiki_enabled, json[QString("wiki_enabled")]);
    m_wiki_enabled_isSet = !json[QString("wiki_enabled")].isNull() && m_wiki_enabled_isValid;
}

QString OAIProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_builds_enabled_isSet) {
        obj.insert(QString("builds_enabled"), ::OpenAPI::toJsonValue(m_builds_enabled));
    }
    if (m_container_registry_enabled_isSet) {
        obj.insert(QString("container_registry_enabled"), ::OpenAPI::toJsonValue(m_container_registry_enabled));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creator_id_isSet) {
        obj.insert(QString("creator_id"), ::OpenAPI::toJsonValue(m_creator_id));
    }
    if (m_default_branch_isSet) {
        obj.insert(QString("default_branch"), ::OpenAPI::toJsonValue(m_default_branch));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_forked_from_project.isSet()) {
        obj.insert(QString("forked_from_project"), ::OpenAPI::toJsonValue(m_forked_from_project));
    }
    if (m_forks_count_isSet) {
        obj.insert(QString("forks_count"), ::OpenAPI::toJsonValue(m_forks_count));
    }
    if (m_http_url_to_repo_isSet) {
        obj.insert(QString("http_url_to_repo"), ::OpenAPI::toJsonValue(m_http_url_to_repo));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issues_enabled_isSet) {
        obj.insert(QString("issues_enabled"), ::OpenAPI::toJsonValue(m_issues_enabled));
    }
    if (m_last_activity_at_isSet) {
        obj.insert(QString("last_activity_at"), ::OpenAPI::toJsonValue(m_last_activity_at));
    }
    if (m_lfs_enabled_isSet) {
        obj.insert(QString("lfs_enabled"), ::OpenAPI::toJsonValue(m_lfs_enabled));
    }
    if (m_merge_requests_enabled_isSet) {
        obj.insert(QString("merge_requests_enabled"), ::OpenAPI::toJsonValue(m_merge_requests_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_with_namespace_isSet) {
        obj.insert(QString("name_with_namespace"), ::OpenAPI::toJsonValue(m_name_with_namespace));
    }
    if (m_r_namespace.isSet()) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_only_allow_merge_if_all_discussions_are_resolved_isSet) {
        obj.insert(QString("only_allow_merge_if_all_discussions_are_resolved"), ::OpenAPI::toJsonValue(m_only_allow_merge_if_all_discussions_are_resolved));
    }
    if (m_only_allow_merge_if_build_succeeds_isSet) {
        obj.insert(QString("only_allow_merge_if_build_succeeds"), ::OpenAPI::toJsonValue(m_only_allow_merge_if_build_succeeds));
    }
    if (m_open_issues_count_isSet) {
        obj.insert(QString("open_issues_count"), ::OpenAPI::toJsonValue(m_open_issues_count));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_path_with_namespace_isSet) {
        obj.insert(QString("path_with_namespace"), ::OpenAPI::toJsonValue(m_path_with_namespace));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_public_builds_isSet) {
        obj.insert(QString("public_builds"), ::OpenAPI::toJsonValue(m_public_builds));
    }
    if (m_request_access_enabled_isSet) {
        obj.insert(QString("request_access_enabled"), ::OpenAPI::toJsonValue(m_request_access_enabled));
    }
    if (m_runners_token_isSet) {
        obj.insert(QString("runners_token"), ::OpenAPI::toJsonValue(m_runners_token));
    }
    if (m_shared_runners_enabled_isSet) {
        obj.insert(QString("shared_runners_enabled"), ::OpenAPI::toJsonValue(m_shared_runners_enabled));
    }
    if (m_shared_with_groups_isSet) {
        obj.insert(QString("shared_with_groups"), ::OpenAPI::toJsonValue(m_shared_with_groups));
    }
    if (m_snippets_enabled_isSet) {
        obj.insert(QString("snippets_enabled"), ::OpenAPI::toJsonValue(m_snippets_enabled));
    }
    if (m_ssh_url_to_repo_isSet) {
        obj.insert(QString("ssh_url_to_repo"), ::OpenAPI::toJsonValue(m_ssh_url_to_repo));
    }
    if (m_star_count_isSet) {
        obj.insert(QString("star_count"), ::OpenAPI::toJsonValue(m_star_count));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    if (m_tag_list_isSet) {
        obj.insert(QString("tag_list"), ::OpenAPI::toJsonValue(m_tag_list));
    }
    if (m_visibility_level_isSet) {
        obj.insert(QString("visibility_level"), ::OpenAPI::toJsonValue(m_visibility_level));
    }
    if (m_web_url_isSet) {
        obj.insert(QString("web_url"), ::OpenAPI::toJsonValue(m_web_url));
    }
    if (m_wiki_enabled_isSet) {
        obj.insert(QString("wiki_enabled"), ::OpenAPI::toJsonValue(m_wiki_enabled));
    }
    return obj;
}

QString OAIProject::getArchived() const {
    return m_archived;
}
void OAIProject::setArchived(const QString &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIProject::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIProject::is_archived_Valid() const{
    return m_archived_isValid;
}

QString OAIProject::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIProject::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIProject::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIProject::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAIProject::getBuildsEnabled() const {
    return m_builds_enabled;
}
void OAIProject::setBuildsEnabled(const QString &builds_enabled) {
    m_builds_enabled = builds_enabled;
    m_builds_enabled_isSet = true;
}

bool OAIProject::is_builds_enabled_Set() const{
    return m_builds_enabled_isSet;
}

bool OAIProject::is_builds_enabled_Valid() const{
    return m_builds_enabled_isValid;
}

QString OAIProject::getContainerRegistryEnabled() const {
    return m_container_registry_enabled;
}
void OAIProject::setContainerRegistryEnabled(const QString &container_registry_enabled) {
    m_container_registry_enabled = container_registry_enabled;
    m_container_registry_enabled_isSet = true;
}

bool OAIProject::is_container_registry_enabled_Set() const{
    return m_container_registry_enabled_isSet;
}

bool OAIProject::is_container_registry_enabled_Valid() const{
    return m_container_registry_enabled_isValid;
}

QString OAIProject::getCreatedAt() const {
    return m_created_at;
}
void OAIProject::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIProject::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIProject::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIProject::getCreatorId() const {
    return m_creator_id;
}
void OAIProject::setCreatorId(const QString &creator_id) {
    m_creator_id = creator_id;
    m_creator_id_isSet = true;
}

bool OAIProject::is_creator_id_Set() const{
    return m_creator_id_isSet;
}

bool OAIProject::is_creator_id_Valid() const{
    return m_creator_id_isValid;
}

QString OAIProject::getDefaultBranch() const {
    return m_default_branch;
}
void OAIProject::setDefaultBranch(const QString &default_branch) {
    m_default_branch = default_branch;
    m_default_branch_isSet = true;
}

bool OAIProject::is_default_branch_Set() const{
    return m_default_branch_isSet;
}

bool OAIProject::is_default_branch_Valid() const{
    return m_default_branch_isValid;
}

QString OAIProject::getDescription() const {
    return m_description;
}
void OAIProject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProject::is_description_Valid() const{
    return m_description_isValid;
}

OAIBasicProjectDetails OAIProject::getForkedFromProject() const {
    return m_forked_from_project;
}
void OAIProject::setForkedFromProject(const OAIBasicProjectDetails &forked_from_project) {
    m_forked_from_project = forked_from_project;
    m_forked_from_project_isSet = true;
}

bool OAIProject::is_forked_from_project_Set() const{
    return m_forked_from_project_isSet;
}

bool OAIProject::is_forked_from_project_Valid() const{
    return m_forked_from_project_isValid;
}

QString OAIProject::getForksCount() const {
    return m_forks_count;
}
void OAIProject::setForksCount(const QString &forks_count) {
    m_forks_count = forks_count;
    m_forks_count_isSet = true;
}

bool OAIProject::is_forks_count_Set() const{
    return m_forks_count_isSet;
}

bool OAIProject::is_forks_count_Valid() const{
    return m_forks_count_isValid;
}

QString OAIProject::getHttpUrlToRepo() const {
    return m_http_url_to_repo;
}
void OAIProject::setHttpUrlToRepo(const QString &http_url_to_repo) {
    m_http_url_to_repo = http_url_to_repo;
    m_http_url_to_repo_isSet = true;
}

bool OAIProject::is_http_url_to_repo_Set() const{
    return m_http_url_to_repo_isSet;
}

bool OAIProject::is_http_url_to_repo_Valid() const{
    return m_http_url_to_repo_isValid;
}

QString OAIProject::getId() const {
    return m_id;
}
void OAIProject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProject::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProject::getIssuesEnabled() const {
    return m_issues_enabled;
}
void OAIProject::setIssuesEnabled(const QString &issues_enabled) {
    m_issues_enabled = issues_enabled;
    m_issues_enabled_isSet = true;
}

bool OAIProject::is_issues_enabled_Set() const{
    return m_issues_enabled_isSet;
}

bool OAIProject::is_issues_enabled_Valid() const{
    return m_issues_enabled_isValid;
}

QString OAIProject::getLastActivityAt() const {
    return m_last_activity_at;
}
void OAIProject::setLastActivityAt(const QString &last_activity_at) {
    m_last_activity_at = last_activity_at;
    m_last_activity_at_isSet = true;
}

bool OAIProject::is_last_activity_at_Set() const{
    return m_last_activity_at_isSet;
}

bool OAIProject::is_last_activity_at_Valid() const{
    return m_last_activity_at_isValid;
}

QString OAIProject::getLfsEnabled() const {
    return m_lfs_enabled;
}
void OAIProject::setLfsEnabled(const QString &lfs_enabled) {
    m_lfs_enabled = lfs_enabled;
    m_lfs_enabled_isSet = true;
}

bool OAIProject::is_lfs_enabled_Set() const{
    return m_lfs_enabled_isSet;
}

bool OAIProject::is_lfs_enabled_Valid() const{
    return m_lfs_enabled_isValid;
}

QString OAIProject::getMergeRequestsEnabled() const {
    return m_merge_requests_enabled;
}
void OAIProject::setMergeRequestsEnabled(const QString &merge_requests_enabled) {
    m_merge_requests_enabled = merge_requests_enabled;
    m_merge_requests_enabled_isSet = true;
}

bool OAIProject::is_merge_requests_enabled_Set() const{
    return m_merge_requests_enabled_isSet;
}

bool OAIProject::is_merge_requests_enabled_Valid() const{
    return m_merge_requests_enabled_isValid;
}

QString OAIProject::getName() const {
    return m_name;
}
void OAIProject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProject::getNameWithNamespace() const {
    return m_name_with_namespace;
}
void OAIProject::setNameWithNamespace(const QString &name_with_namespace) {
    m_name_with_namespace = name_with_namespace;
    m_name_with_namespace_isSet = true;
}

bool OAIProject::is_name_with_namespace_Set() const{
    return m_name_with_namespace_isSet;
}

bool OAIProject::is_name_with_namespace_Valid() const{
    return m_name_with_namespace_isValid;
}

OAINamespace OAIProject::getRNamespace() const {
    return m_r_namespace;
}
void OAIProject::setRNamespace(const OAINamespace &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIProject::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIProject::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIProject::getOnlyAllowMergeIfAllDiscussionsAreResolved() const {
    return m_only_allow_merge_if_all_discussions_are_resolved;
}
void OAIProject::setOnlyAllowMergeIfAllDiscussionsAreResolved(const QString &only_allow_merge_if_all_discussions_are_resolved) {
    m_only_allow_merge_if_all_discussions_are_resolved = only_allow_merge_if_all_discussions_are_resolved;
    m_only_allow_merge_if_all_discussions_are_resolved_isSet = true;
}

bool OAIProject::is_only_allow_merge_if_all_discussions_are_resolved_Set() const{
    return m_only_allow_merge_if_all_discussions_are_resolved_isSet;
}

bool OAIProject::is_only_allow_merge_if_all_discussions_are_resolved_Valid() const{
    return m_only_allow_merge_if_all_discussions_are_resolved_isValid;
}

QString OAIProject::getOnlyAllowMergeIfBuildSucceeds() const {
    return m_only_allow_merge_if_build_succeeds;
}
void OAIProject::setOnlyAllowMergeIfBuildSucceeds(const QString &only_allow_merge_if_build_succeeds) {
    m_only_allow_merge_if_build_succeeds = only_allow_merge_if_build_succeeds;
    m_only_allow_merge_if_build_succeeds_isSet = true;
}

bool OAIProject::is_only_allow_merge_if_build_succeeds_Set() const{
    return m_only_allow_merge_if_build_succeeds_isSet;
}

bool OAIProject::is_only_allow_merge_if_build_succeeds_Valid() const{
    return m_only_allow_merge_if_build_succeeds_isValid;
}

QString OAIProject::getOpenIssuesCount() const {
    return m_open_issues_count;
}
void OAIProject::setOpenIssuesCount(const QString &open_issues_count) {
    m_open_issues_count = open_issues_count;
    m_open_issues_count_isSet = true;
}

bool OAIProject::is_open_issues_count_Set() const{
    return m_open_issues_count_isSet;
}

bool OAIProject::is_open_issues_count_Valid() const{
    return m_open_issues_count_isValid;
}

OAIUserBasic OAIProject::getOwner() const {
    return m_owner;
}
void OAIProject::setOwner(const OAIUserBasic &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIProject::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIProject::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIProject::getPath() const {
    return m_path;
}
void OAIProject::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIProject::is_path_Set() const{
    return m_path_isSet;
}

bool OAIProject::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIProject::getPathWithNamespace() const {
    return m_path_with_namespace;
}
void OAIProject::setPathWithNamespace(const QString &path_with_namespace) {
    m_path_with_namespace = path_with_namespace;
    m_path_with_namespace_isSet = true;
}

bool OAIProject::is_path_with_namespace_Set() const{
    return m_path_with_namespace_isSet;
}

bool OAIProject::is_path_with_namespace_Valid() const{
    return m_path_with_namespace_isValid;
}

QString OAIProject::getRPublic() const {
    return m_r_public;
}
void OAIProject::setRPublic(const QString &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIProject::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIProject::is_r_public_Valid() const{
    return m_r_public_isValid;
}

QString OAIProject::getPublicBuilds() const {
    return m_public_builds;
}
void OAIProject::setPublicBuilds(const QString &public_builds) {
    m_public_builds = public_builds;
    m_public_builds_isSet = true;
}

bool OAIProject::is_public_builds_Set() const{
    return m_public_builds_isSet;
}

bool OAIProject::is_public_builds_Valid() const{
    return m_public_builds_isValid;
}

QString OAIProject::getRequestAccessEnabled() const {
    return m_request_access_enabled;
}
void OAIProject::setRequestAccessEnabled(const QString &request_access_enabled) {
    m_request_access_enabled = request_access_enabled;
    m_request_access_enabled_isSet = true;
}

bool OAIProject::is_request_access_enabled_Set() const{
    return m_request_access_enabled_isSet;
}

bool OAIProject::is_request_access_enabled_Valid() const{
    return m_request_access_enabled_isValid;
}

QString OAIProject::getRunnersToken() const {
    return m_runners_token;
}
void OAIProject::setRunnersToken(const QString &runners_token) {
    m_runners_token = runners_token;
    m_runners_token_isSet = true;
}

bool OAIProject::is_runners_token_Set() const{
    return m_runners_token_isSet;
}

bool OAIProject::is_runners_token_Valid() const{
    return m_runners_token_isValid;
}

QString OAIProject::getSharedRunnersEnabled() const {
    return m_shared_runners_enabled;
}
void OAIProject::setSharedRunnersEnabled(const QString &shared_runners_enabled) {
    m_shared_runners_enabled = shared_runners_enabled;
    m_shared_runners_enabled_isSet = true;
}

bool OAIProject::is_shared_runners_enabled_Set() const{
    return m_shared_runners_enabled_isSet;
}

bool OAIProject::is_shared_runners_enabled_Valid() const{
    return m_shared_runners_enabled_isValid;
}

QString OAIProject::getSharedWithGroups() const {
    return m_shared_with_groups;
}
void OAIProject::setSharedWithGroups(const QString &shared_with_groups) {
    m_shared_with_groups = shared_with_groups;
    m_shared_with_groups_isSet = true;
}

bool OAIProject::is_shared_with_groups_Set() const{
    return m_shared_with_groups_isSet;
}

bool OAIProject::is_shared_with_groups_Valid() const{
    return m_shared_with_groups_isValid;
}

QString OAIProject::getSnippetsEnabled() const {
    return m_snippets_enabled;
}
void OAIProject::setSnippetsEnabled(const QString &snippets_enabled) {
    m_snippets_enabled = snippets_enabled;
    m_snippets_enabled_isSet = true;
}

bool OAIProject::is_snippets_enabled_Set() const{
    return m_snippets_enabled_isSet;
}

bool OAIProject::is_snippets_enabled_Valid() const{
    return m_snippets_enabled_isValid;
}

QString OAIProject::getSshUrlToRepo() const {
    return m_ssh_url_to_repo;
}
void OAIProject::setSshUrlToRepo(const QString &ssh_url_to_repo) {
    m_ssh_url_to_repo = ssh_url_to_repo;
    m_ssh_url_to_repo_isSet = true;
}

bool OAIProject::is_ssh_url_to_repo_Set() const{
    return m_ssh_url_to_repo_isSet;
}

bool OAIProject::is_ssh_url_to_repo_Valid() const{
    return m_ssh_url_to_repo_isValid;
}

QString OAIProject::getStarCount() const {
    return m_star_count;
}
void OAIProject::setStarCount(const QString &star_count) {
    m_star_count = star_count;
    m_star_count_isSet = true;
}

bool OAIProject::is_star_count_Set() const{
    return m_star_count_isSet;
}

bool OAIProject::is_star_count_Valid() const{
    return m_star_count_isValid;
}

OAIProjectStatistics OAIProject::getStatistics() const {
    return m_statistics;
}
void OAIProject::setStatistics(const OAIProjectStatistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIProject::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIProject::is_statistics_Valid() const{
    return m_statistics_isValid;
}

QString OAIProject::getTagList() const {
    return m_tag_list;
}
void OAIProject::setTagList(const QString &tag_list) {
    m_tag_list = tag_list;
    m_tag_list_isSet = true;
}

bool OAIProject::is_tag_list_Set() const{
    return m_tag_list_isSet;
}

bool OAIProject::is_tag_list_Valid() const{
    return m_tag_list_isValid;
}

QString OAIProject::getVisibilityLevel() const {
    return m_visibility_level;
}
void OAIProject::setVisibilityLevel(const QString &visibility_level) {
    m_visibility_level = visibility_level;
    m_visibility_level_isSet = true;
}

bool OAIProject::is_visibility_level_Set() const{
    return m_visibility_level_isSet;
}

bool OAIProject::is_visibility_level_Valid() const{
    return m_visibility_level_isValid;
}

QString OAIProject::getWebUrl() const {
    return m_web_url;
}
void OAIProject::setWebUrl(const QString &web_url) {
    m_web_url = web_url;
    m_web_url_isSet = true;
}

bool OAIProject::is_web_url_Set() const{
    return m_web_url_isSet;
}

bool OAIProject::is_web_url_Valid() const{
    return m_web_url_isValid;
}

QString OAIProject::getWikiEnabled() const {
    return m_wiki_enabled;
}
void OAIProject::setWikiEnabled(const QString &wiki_enabled) {
    m_wiki_enabled = wiki_enabled;
    m_wiki_enabled_isSet = true;
}

bool OAIProject::is_wiki_enabled_Set() const{
    return m_wiki_enabled_isSet;
}

bool OAIProject::is_wiki_enabled_Valid() const{
    return m_wiki_enabled_isValid;
}

bool OAIProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_builds_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_registry_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forked_from_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forks_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_url_to_repo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lfs_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_requests_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_with_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_only_allow_merge_if_all_discussions_are_resolved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_only_allow_merge_if_build_succeeds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_issues_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_with_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_builds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_access_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runners_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_runners_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_with_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippets_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_url_to_repo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_star_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wiki_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
