/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBasicProjectDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBasicProjectDetails::OAIBasicProjectDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBasicProjectDetails::OAIBasicProjectDetails() {
    this->initializeModel();
}

OAIBasicProjectDetails::~OAIBasicProjectDetails() {}

void OAIBasicProjectDetails::initializeModel() {

    m_http_url_to_repo_isSet = false;
    m_http_url_to_repo_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_with_namespace_isSet = false;
    m_name_with_namespace_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_path_with_namespace_isSet = false;
    m_path_with_namespace_isValid = false;

    m_web_url_isSet = false;
    m_web_url_isValid = false;
}

void OAIBasicProjectDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBasicProjectDetails::fromJsonObject(QJsonObject json) {

    m_http_url_to_repo_isValid = ::OpenAPI::fromJsonValue(m_http_url_to_repo, json[QString("http_url_to_repo")]);
    m_http_url_to_repo_isSet = !json[QString("http_url_to_repo")].isNull() && m_http_url_to_repo_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_with_namespace_isValid = ::OpenAPI::fromJsonValue(m_name_with_namespace, json[QString("name_with_namespace")]);
    m_name_with_namespace_isSet = !json[QString("name_with_namespace")].isNull() && m_name_with_namespace_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_path_with_namespace_isValid = ::OpenAPI::fromJsonValue(m_path_with_namespace, json[QString("path_with_namespace")]);
    m_path_with_namespace_isSet = !json[QString("path_with_namespace")].isNull() && m_path_with_namespace_isValid;

    m_web_url_isValid = ::OpenAPI::fromJsonValue(m_web_url, json[QString("web_url")]);
    m_web_url_isSet = !json[QString("web_url")].isNull() && m_web_url_isValid;
}

QString OAIBasicProjectDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBasicProjectDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_http_url_to_repo_isSet) {
        obj.insert(QString("http_url_to_repo"), ::OpenAPI::toJsonValue(m_http_url_to_repo));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_with_namespace_isSet) {
        obj.insert(QString("name_with_namespace"), ::OpenAPI::toJsonValue(m_name_with_namespace));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_path_with_namespace_isSet) {
        obj.insert(QString("path_with_namespace"), ::OpenAPI::toJsonValue(m_path_with_namespace));
    }
    if (m_web_url_isSet) {
        obj.insert(QString("web_url"), ::OpenAPI::toJsonValue(m_web_url));
    }
    return obj;
}

QString OAIBasicProjectDetails::getHttpUrlToRepo() const {
    return m_http_url_to_repo;
}
void OAIBasicProjectDetails::setHttpUrlToRepo(const QString &http_url_to_repo) {
    m_http_url_to_repo = http_url_to_repo;
    m_http_url_to_repo_isSet = true;
}

bool OAIBasicProjectDetails::is_http_url_to_repo_Set() const{
    return m_http_url_to_repo_isSet;
}

bool OAIBasicProjectDetails::is_http_url_to_repo_Valid() const{
    return m_http_url_to_repo_isValid;
}

QString OAIBasicProjectDetails::getId() const {
    return m_id;
}
void OAIBasicProjectDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBasicProjectDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBasicProjectDetails::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBasicProjectDetails::getName() const {
    return m_name;
}
void OAIBasicProjectDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBasicProjectDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBasicProjectDetails::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBasicProjectDetails::getNameWithNamespace() const {
    return m_name_with_namespace;
}
void OAIBasicProjectDetails::setNameWithNamespace(const QString &name_with_namespace) {
    m_name_with_namespace = name_with_namespace;
    m_name_with_namespace_isSet = true;
}

bool OAIBasicProjectDetails::is_name_with_namespace_Set() const{
    return m_name_with_namespace_isSet;
}

bool OAIBasicProjectDetails::is_name_with_namespace_Valid() const{
    return m_name_with_namespace_isValid;
}

QString OAIBasicProjectDetails::getPath() const {
    return m_path;
}
void OAIBasicProjectDetails::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIBasicProjectDetails::is_path_Set() const{
    return m_path_isSet;
}

bool OAIBasicProjectDetails::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIBasicProjectDetails::getPathWithNamespace() const {
    return m_path_with_namespace;
}
void OAIBasicProjectDetails::setPathWithNamespace(const QString &path_with_namespace) {
    m_path_with_namespace = path_with_namespace;
    m_path_with_namespace_isSet = true;
}

bool OAIBasicProjectDetails::is_path_with_namespace_Set() const{
    return m_path_with_namespace_isSet;
}

bool OAIBasicProjectDetails::is_path_with_namespace_Valid() const{
    return m_path_with_namespace_isValid;
}

QString OAIBasicProjectDetails::getWebUrl() const {
    return m_web_url;
}
void OAIBasicProjectDetails::setWebUrl(const QString &web_url) {
    m_web_url = web_url;
    m_web_url_isSet = true;
}

bool OAIBasicProjectDetails::is_web_url_Set() const{
    return m_web_url_isSet;
}

bool OAIBasicProjectDetails::is_web_url_Valid() const{
    return m_web_url_isValid;
}

bool OAIBasicProjectDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_url_to_repo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_with_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_with_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBasicProjectDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
