/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMergeRequestDiffFull.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMergeRequestDiffFull::OAIMergeRequestDiffFull(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMergeRequestDiffFull::OAIMergeRequestDiffFull() {
    this->initializeModel();
}

OAIMergeRequestDiffFull::~OAIMergeRequestDiffFull() {}

void OAIMergeRequestDiffFull::initializeModel() {

    m_base_commit_sha_isSet = false;
    m_base_commit_sha_isValid = false;

    m_commits_isSet = false;
    m_commits_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_diffs_isSet = false;
    m_diffs_isValid = false;

    m_head_commit_sha_isSet = false;
    m_head_commit_sha_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_merge_request_id_isSet = false;
    m_merge_request_id_isValid = false;

    m_real_size_isSet = false;
    m_real_size_isValid = false;

    m_start_commit_sha_isSet = false;
    m_start_commit_sha_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIMergeRequestDiffFull::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMergeRequestDiffFull::fromJsonObject(QJsonObject json) {

    m_base_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_base_commit_sha, json[QString("base_commit_sha")]);
    m_base_commit_sha_isSet = !json[QString("base_commit_sha")].isNull() && m_base_commit_sha_isValid;

    m_commits_isValid = ::OpenAPI::fromJsonValue(m_commits, json[QString("commits")]);
    m_commits_isSet = !json[QString("commits")].isNull() && m_commits_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_diffs_isValid = ::OpenAPI::fromJsonValue(m_diffs, json[QString("diffs")]);
    m_diffs_isSet = !json[QString("diffs")].isNull() && m_diffs_isValid;

    m_head_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_head_commit_sha, json[QString("head_commit_sha")]);
    m_head_commit_sha_isSet = !json[QString("head_commit_sha")].isNull() && m_head_commit_sha_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_merge_request_id_isValid = ::OpenAPI::fromJsonValue(m_merge_request_id, json[QString("merge_request_id")]);
    m_merge_request_id_isSet = !json[QString("merge_request_id")].isNull() && m_merge_request_id_isValid;

    m_real_size_isValid = ::OpenAPI::fromJsonValue(m_real_size, json[QString("real_size")]);
    m_real_size_isSet = !json[QString("real_size")].isNull() && m_real_size_isValid;

    m_start_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_start_commit_sha, json[QString("start_commit_sha")]);
    m_start_commit_sha_isSet = !json[QString("start_commit_sha")].isNull() && m_start_commit_sha_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIMergeRequestDiffFull::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMergeRequestDiffFull::asJsonObject() const {
    QJsonObject obj;
    if (m_base_commit_sha_isSet) {
        obj.insert(QString("base_commit_sha"), ::OpenAPI::toJsonValue(m_base_commit_sha));
    }
    if (m_commits.isSet()) {
        obj.insert(QString("commits"), ::OpenAPI::toJsonValue(m_commits));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_diffs.isSet()) {
        obj.insert(QString("diffs"), ::OpenAPI::toJsonValue(m_diffs));
    }
    if (m_head_commit_sha_isSet) {
        obj.insert(QString("head_commit_sha"), ::OpenAPI::toJsonValue(m_head_commit_sha));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_merge_request_id_isSet) {
        obj.insert(QString("merge_request_id"), ::OpenAPI::toJsonValue(m_merge_request_id));
    }
    if (m_real_size_isSet) {
        obj.insert(QString("real_size"), ::OpenAPI::toJsonValue(m_real_size));
    }
    if (m_start_commit_sha_isSet) {
        obj.insert(QString("start_commit_sha"), ::OpenAPI::toJsonValue(m_start_commit_sha));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIMergeRequestDiffFull::getBaseCommitSha() const {
    return m_base_commit_sha;
}
void OAIMergeRequestDiffFull::setBaseCommitSha(const QString &base_commit_sha) {
    m_base_commit_sha = base_commit_sha;
    m_base_commit_sha_isSet = true;
}

bool OAIMergeRequestDiffFull::is_base_commit_sha_Set() const{
    return m_base_commit_sha_isSet;
}

bool OAIMergeRequestDiffFull::is_base_commit_sha_Valid() const{
    return m_base_commit_sha_isValid;
}

OAIRepoCommit OAIMergeRequestDiffFull::getCommits() const {
    return m_commits;
}
void OAIMergeRequestDiffFull::setCommits(const OAIRepoCommit &commits) {
    m_commits = commits;
    m_commits_isSet = true;
}

bool OAIMergeRequestDiffFull::is_commits_Set() const{
    return m_commits_isSet;
}

bool OAIMergeRequestDiffFull::is_commits_Valid() const{
    return m_commits_isValid;
}

QString OAIMergeRequestDiffFull::getCreatedAt() const {
    return m_created_at;
}
void OAIMergeRequestDiffFull::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMergeRequestDiffFull::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMergeRequestDiffFull::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIRepoDiff OAIMergeRequestDiffFull::getDiffs() const {
    return m_diffs;
}
void OAIMergeRequestDiffFull::setDiffs(const OAIRepoDiff &diffs) {
    m_diffs = diffs;
    m_diffs_isSet = true;
}

bool OAIMergeRequestDiffFull::is_diffs_Set() const{
    return m_diffs_isSet;
}

bool OAIMergeRequestDiffFull::is_diffs_Valid() const{
    return m_diffs_isValid;
}

QString OAIMergeRequestDiffFull::getHeadCommitSha() const {
    return m_head_commit_sha;
}
void OAIMergeRequestDiffFull::setHeadCommitSha(const QString &head_commit_sha) {
    m_head_commit_sha = head_commit_sha;
    m_head_commit_sha_isSet = true;
}

bool OAIMergeRequestDiffFull::is_head_commit_sha_Set() const{
    return m_head_commit_sha_isSet;
}

bool OAIMergeRequestDiffFull::is_head_commit_sha_Valid() const{
    return m_head_commit_sha_isValid;
}

QString OAIMergeRequestDiffFull::getId() const {
    return m_id;
}
void OAIMergeRequestDiffFull::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMergeRequestDiffFull::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMergeRequestDiffFull::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMergeRequestDiffFull::getMergeRequestId() const {
    return m_merge_request_id;
}
void OAIMergeRequestDiffFull::setMergeRequestId(const QString &merge_request_id) {
    m_merge_request_id = merge_request_id;
    m_merge_request_id_isSet = true;
}

bool OAIMergeRequestDiffFull::is_merge_request_id_Set() const{
    return m_merge_request_id_isSet;
}

bool OAIMergeRequestDiffFull::is_merge_request_id_Valid() const{
    return m_merge_request_id_isValid;
}

QString OAIMergeRequestDiffFull::getRealSize() const {
    return m_real_size;
}
void OAIMergeRequestDiffFull::setRealSize(const QString &real_size) {
    m_real_size = real_size;
    m_real_size_isSet = true;
}

bool OAIMergeRequestDiffFull::is_real_size_Set() const{
    return m_real_size_isSet;
}

bool OAIMergeRequestDiffFull::is_real_size_Valid() const{
    return m_real_size_isValid;
}

QString OAIMergeRequestDiffFull::getStartCommitSha() const {
    return m_start_commit_sha;
}
void OAIMergeRequestDiffFull::setStartCommitSha(const QString &start_commit_sha) {
    m_start_commit_sha = start_commit_sha;
    m_start_commit_sha_isSet = true;
}

bool OAIMergeRequestDiffFull::is_start_commit_sha_Set() const{
    return m_start_commit_sha_isSet;
}

bool OAIMergeRequestDiffFull::is_start_commit_sha_Valid() const{
    return m_start_commit_sha_isValid;
}

QString OAIMergeRequestDiffFull::getState() const {
    return m_state;
}
void OAIMergeRequestDiffFull::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMergeRequestDiffFull::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMergeRequestDiffFull::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIMergeRequestDiffFull::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diffs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_real_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMergeRequestDiffFull::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
