/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostV3ProjectsIdMergeRequests_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostV3ProjectsIdMergeRequests_request::OAIPostV3ProjectsIdMergeRequests_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostV3ProjectsIdMergeRequests_request::OAIPostV3ProjectsIdMergeRequests_request() {
    this->initializeModel();
}

OAIPostV3ProjectsIdMergeRequests_request::~OAIPostV3ProjectsIdMergeRequests_request() {}

void OAIPostV3ProjectsIdMergeRequests_request::initializeModel() {

    m_title_isSet = false;
    m_title_isValid = false;

    m_source_branch_isSet = false;
    m_source_branch_isValid = false;

    m_target_branch_isSet = false;
    m_target_branch_isValid = false;

    m_target_project_id_isSet = false;
    m_target_project_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_assignee_id_isSet = false;
    m_assignee_id_isValid = false;

    m_milestone_id_isSet = false;
    m_milestone_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_remove_source_branch_isSet = false;
    m_remove_source_branch_isValid = false;
}

void OAIPostV3ProjectsIdMergeRequests_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostV3ProjectsIdMergeRequests_request::fromJsonObject(QJsonObject json) {

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_source_branch_isValid = ::OpenAPI::fromJsonValue(m_source_branch, json[QString("source_branch")]);
    m_source_branch_isSet = !json[QString("source_branch")].isNull() && m_source_branch_isValid;

    m_target_branch_isValid = ::OpenAPI::fromJsonValue(m_target_branch, json[QString("target_branch")]);
    m_target_branch_isSet = !json[QString("target_branch")].isNull() && m_target_branch_isValid;

    m_target_project_id_isValid = ::OpenAPI::fromJsonValue(m_target_project_id, json[QString("target_project_id")]);
    m_target_project_id_isSet = !json[QString("target_project_id")].isNull() && m_target_project_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_assignee_id_isValid = ::OpenAPI::fromJsonValue(m_assignee_id, json[QString("assignee_id")]);
    m_assignee_id_isSet = !json[QString("assignee_id")].isNull() && m_assignee_id_isValid;

    m_milestone_id_isValid = ::OpenAPI::fromJsonValue(m_milestone_id, json[QString("milestone_id")]);
    m_milestone_id_isSet = !json[QString("milestone_id")].isNull() && m_milestone_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_remove_source_branch_isValid = ::OpenAPI::fromJsonValue(m_remove_source_branch, json[QString("remove_source_branch")]);
    m_remove_source_branch_isSet = !json[QString("remove_source_branch")].isNull() && m_remove_source_branch_isValid;
}

QString OAIPostV3ProjectsIdMergeRequests_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostV3ProjectsIdMergeRequests_request::asJsonObject() const {
    QJsonObject obj;
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_source_branch_isSet) {
        obj.insert(QString("source_branch"), ::OpenAPI::toJsonValue(m_source_branch));
    }
    if (m_target_branch_isSet) {
        obj.insert(QString("target_branch"), ::OpenAPI::toJsonValue(m_target_branch));
    }
    if (m_target_project_id_isSet) {
        obj.insert(QString("target_project_id"), ::OpenAPI::toJsonValue(m_target_project_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_assignee_id_isSet) {
        obj.insert(QString("assignee_id"), ::OpenAPI::toJsonValue(m_assignee_id));
    }
    if (m_milestone_id_isSet) {
        obj.insert(QString("milestone_id"), ::OpenAPI::toJsonValue(m_milestone_id));
    }
    if (m_labels_isSet) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_remove_source_branch_isSet) {
        obj.insert(QString("remove_source_branch"), ::OpenAPI::toJsonValue(m_remove_source_branch));
    }
    return obj;
}

QString OAIPostV3ProjectsIdMergeRequests_request::getTitle() const {
    return m_title;
}
void OAIPostV3ProjectsIdMergeRequests_request::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPostV3ProjectsIdMergeRequests_request::getSourceBranch() const {
    return m_source_branch;
}
void OAIPostV3ProjectsIdMergeRequests_request::setSourceBranch(const QString &source_branch) {
    m_source_branch = source_branch;
    m_source_branch_isSet = true;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_source_branch_Set() const{
    return m_source_branch_isSet;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_source_branch_Valid() const{
    return m_source_branch_isValid;
}

QString OAIPostV3ProjectsIdMergeRequests_request::getTargetBranch() const {
    return m_target_branch;
}
void OAIPostV3ProjectsIdMergeRequests_request::setTargetBranch(const QString &target_branch) {
    m_target_branch = target_branch;
    m_target_branch_isSet = true;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_target_branch_Set() const{
    return m_target_branch_isSet;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_target_branch_Valid() const{
    return m_target_branch_isValid;
}

qint32 OAIPostV3ProjectsIdMergeRequests_request::getTargetProjectId() const {
    return m_target_project_id;
}
void OAIPostV3ProjectsIdMergeRequests_request::setTargetProjectId(const qint32 &target_project_id) {
    m_target_project_id = target_project_id;
    m_target_project_id_isSet = true;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_target_project_id_Set() const{
    return m_target_project_id_isSet;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_target_project_id_Valid() const{
    return m_target_project_id_isValid;
}

QString OAIPostV3ProjectsIdMergeRequests_request::getDescription() const {
    return m_description;
}
void OAIPostV3ProjectsIdMergeRequests_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIPostV3ProjectsIdMergeRequests_request::getAssigneeId() const {
    return m_assignee_id;
}
void OAIPostV3ProjectsIdMergeRequests_request::setAssigneeId(const qint32 &assignee_id) {
    m_assignee_id = assignee_id;
    m_assignee_id_isSet = true;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_assignee_id_Set() const{
    return m_assignee_id_isSet;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_assignee_id_Valid() const{
    return m_assignee_id_isValid;
}

qint32 OAIPostV3ProjectsIdMergeRequests_request::getMilestoneId() const {
    return m_milestone_id;
}
void OAIPostV3ProjectsIdMergeRequests_request::setMilestoneId(const qint32 &milestone_id) {
    m_milestone_id = milestone_id;
    m_milestone_id_isSet = true;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_milestone_id_Set() const{
    return m_milestone_id_isSet;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_milestone_id_Valid() const{
    return m_milestone_id_isValid;
}

QString OAIPostV3ProjectsIdMergeRequests_request::getLabels() const {
    return m_labels;
}
void OAIPostV3ProjectsIdMergeRequests_request::setLabels(const QString &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_labels_Valid() const{
    return m_labels_isValid;
}

bool OAIPostV3ProjectsIdMergeRequests_request::isRemoveSourceBranch() const {
    return m_remove_source_branch;
}
void OAIPostV3ProjectsIdMergeRequests_request::setRemoveSourceBranch(const bool &remove_source_branch) {
    m_remove_source_branch = remove_source_branch;
    m_remove_source_branch_isSet = true;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_remove_source_branch_Set() const{
    return m_remove_source_branch_isSet;
}

bool OAIPostV3ProjectsIdMergeRequests_request::is_remove_source_branch_Valid() const{
    return m_remove_source_branch_isValid;
}

bool OAIPostV3ProjectsIdMergeRequests_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_source_branch_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostV3ProjectsIdMergeRequests_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_title_isValid && m_source_branch_isValid && m_target_branch_isValid && true;
}

} // namespace OpenAPI
