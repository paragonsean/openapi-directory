/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3ProjectsIdRepositoryFiles_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3ProjectsIdRepositoryFiles_request::OAIPutV3ProjectsIdRepositoryFiles_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3ProjectsIdRepositoryFiles_request::OAIPutV3ProjectsIdRepositoryFiles_request() {
    this->initializeModel();
}

OAIPutV3ProjectsIdRepositoryFiles_request::~OAIPutV3ProjectsIdRepositoryFiles_request() {}

void OAIPutV3ProjectsIdRepositoryFiles_request::initializeModel() {

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_branch_name_isSet = false;
    m_branch_name_isValid = false;

    m_commit_message_isSet = false;
    m_commit_message_isValid = false;

    m_author_email_isSet = false;
    m_author_email_isValid = false;

    m_author_name_isSet = false;
    m_author_name_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;
}

void OAIPutV3ProjectsIdRepositoryFiles_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3ProjectsIdRepositoryFiles_request::fromJsonObject(QJsonObject json) {

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("file_path")]);
    m_file_path_isSet = !json[QString("file_path")].isNull() && m_file_path_isValid;

    m_branch_name_isValid = ::OpenAPI::fromJsonValue(m_branch_name, json[QString("branch_name")]);
    m_branch_name_isSet = !json[QString("branch_name")].isNull() && m_branch_name_isValid;

    m_commit_message_isValid = ::OpenAPI::fromJsonValue(m_commit_message, json[QString("commit_message")]);
    m_commit_message_isSet = !json[QString("commit_message")].isNull() && m_commit_message_isValid;

    m_author_email_isValid = ::OpenAPI::fromJsonValue(m_author_email, json[QString("author_email")]);
    m_author_email_isSet = !json[QString("author_email")].isNull() && m_author_email_isValid;

    m_author_name_isValid = ::OpenAPI::fromJsonValue(m_author_name, json[QString("author_name")]);
    m_author_name_isSet = !json[QString("author_name")].isNull() && m_author_name_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;
}

QString OAIPutV3ProjectsIdRepositoryFiles_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3ProjectsIdRepositoryFiles_request::asJsonObject() const {
    QJsonObject obj;
    if (m_file_path_isSet) {
        obj.insert(QString("file_path"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_branch_name_isSet) {
        obj.insert(QString("branch_name"), ::OpenAPI::toJsonValue(m_branch_name));
    }
    if (m_commit_message_isSet) {
        obj.insert(QString("commit_message"), ::OpenAPI::toJsonValue(m_commit_message));
    }
    if (m_author_email_isSet) {
        obj.insert(QString("author_email"), ::OpenAPI::toJsonValue(m_author_email));
    }
    if (m_author_name_isSet) {
        obj.insert(QString("author_name"), ::OpenAPI::toJsonValue(m_author_name));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    return obj;
}

QString OAIPutV3ProjectsIdRepositoryFiles_request::getFilePath() const {
    return m_file_path;
}
void OAIPutV3ProjectsIdRepositoryFiles_request::setFilePath(const QString &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAIPutV3ProjectsIdRepositoryFiles_request::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAIPutV3ProjectsIdRepositoryFiles_request::is_file_path_Valid() const{
    return m_file_path_isValid;
}

QString OAIPutV3ProjectsIdRepositoryFiles_request::getBranchName() const {
    return m_branch_name;
}
void OAIPutV3ProjectsIdRepositoryFiles_request::setBranchName(const QString &branch_name) {
    m_branch_name = branch_name;
    m_branch_name_isSet = true;
}

bool OAIPutV3ProjectsIdRepositoryFiles_request::is_branch_name_Set() const{
    return m_branch_name_isSet;
}

bool OAIPutV3ProjectsIdRepositoryFiles_request::is_branch_name_Valid() const{
    return m_branch_name_isValid;
}

QString OAIPutV3ProjectsIdRepositoryFiles_request::getCommitMessage() const {
    return m_commit_message;
}
void OAIPutV3ProjectsIdRepositoryFiles_request::setCommitMessage(const QString &commit_message) {
    m_commit_message = commit_message;
    m_commit_message_isSet = true;
}

bool OAIPutV3ProjectsIdRepositoryFiles_request::is_commit_message_Set() const{
    return m_commit_message_isSet;
}

bool OAIPutV3ProjectsIdRepositoryFiles_request::is_commit_message_Valid() const{
    return m_commit_message_isValid;
}

QString OAIPutV3ProjectsIdRepositoryFiles_request::getAuthorEmail() const {
    return m_author_email;
}
void OAIPutV3ProjectsIdRepositoryFiles_request::setAuthorEmail(const QString &author_email) {
    m_author_email = author_email;
    m_author_email_isSet = true;
}

bool OAIPutV3ProjectsIdRepositoryFiles_request::is_author_email_Set() const{
    return m_author_email_isSet;
}

bool OAIPutV3ProjectsIdRepositoryFiles_request::is_author_email_Valid() const{
    return m_author_email_isValid;
}

QString OAIPutV3ProjectsIdRepositoryFiles_request::getAuthorName() const {
    return m_author_name;
}
void OAIPutV3ProjectsIdRepositoryFiles_request::setAuthorName(const QString &author_name) {
    m_author_name = author_name;
    m_author_name_isSet = true;
}

bool OAIPutV3ProjectsIdRepositoryFiles_request::is_author_name_Set() const{
    return m_author_name_isSet;
}

bool OAIPutV3ProjectsIdRepositoryFiles_request::is_author_name_Valid() const{
    return m_author_name_isValid;
}

QString OAIPutV3ProjectsIdRepositoryFiles_request::getContent() const {
    return m_content;
}
void OAIPutV3ProjectsIdRepositoryFiles_request::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIPutV3ProjectsIdRepositoryFiles_request::is_content_Set() const{
    return m_content_isSet;
}

bool OAIPutV3ProjectsIdRepositoryFiles_request::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIPutV3ProjectsIdRepositoryFiles_request::getEncoding() const {
    return m_encoding;
}
void OAIPutV3ProjectsIdRepositoryFiles_request::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIPutV3ProjectsIdRepositoryFiles_request::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIPutV3ProjectsIdRepositoryFiles_request::is_encoding_Valid() const{
    return m_encoding_isValid;
}

bool OAIPutV3ProjectsIdRepositoryFiles_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3ProjectsIdRepositoryFiles_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_path_isValid && m_branch_name_isValid && m_commit_message_isValid && m_content_isValid && true;
}

} // namespace OpenAPI
