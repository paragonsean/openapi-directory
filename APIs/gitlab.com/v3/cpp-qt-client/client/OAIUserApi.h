/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserApi_H
#define OAI_OAIUserApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEmail.h"
#include "OAIPostV3UserEmails_request.h"
#include "OAIPostV3UserKeys_request.h"
#include "OAISSHKey.h"
#include "OAIUserPublic.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserApi : public QObject {
    Q_OBJECT

public:
    OAIUserApi(const int timeOut = 0);
    ~OAIUserApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  email_id qint32 [required]
    */
    virtual void deleteV3UserEmailsEmailId(const qint32 &email_id);

    /**
    * @param[in]  key_id qint32 [required]
    */
    virtual void deleteV3UserKeysKeyId(const qint32 &key_id);


    virtual void getV3User();


    virtual void getV3UserEmails();

    /**
    * @param[in]  email_id qint32 [required]
    */
    virtual void getV3UserEmailsEmailId(const qint32 &email_id);


    virtual void getV3UserKeys();

    /**
    * @param[in]  key_id qint32 [required]
    */
    virtual void getV3UserKeysKeyId(const qint32 &key_id);

    /**
    * @param[in]  oai_post_v3_user_emails_request OAIPostV3UserEmails_request [required]
    */
    virtual void postV3UserEmails(const OAIPostV3UserEmails_request &oai_post_v3_user_emails_request);

    /**
    * @param[in]  oai_post_v3_user_keys_request OAIPostV3UserKeys_request [required]
    */
    virtual void postV3UserKeys(const OAIPostV3UserKeys_request &oai_post_v3_user_keys_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteV3UserEmailsEmailIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3UserKeysKeyIdCallback(OAIHttpRequestWorker *worker);
    void getV3UserCallback(OAIHttpRequestWorker *worker);
    void getV3UserEmailsCallback(OAIHttpRequestWorker *worker);
    void getV3UserEmailsEmailIdCallback(OAIHttpRequestWorker *worker);
    void getV3UserKeysCallback(OAIHttpRequestWorker *worker);
    void getV3UserKeysKeyIdCallback(OAIHttpRequestWorker *worker);
    void postV3UserEmailsCallback(OAIHttpRequestWorker *worker);
    void postV3UserKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteV3UserEmailsEmailIdSignal();
    void deleteV3UserKeysKeyIdSignal(OAISSHKey summary);
    void getV3UserSignal(OAIUserPublic summary);
    void getV3UserEmailsSignal(OAIEmail summary);
    void getV3UserEmailsEmailIdSignal(OAIEmail summary);
    void getV3UserKeysSignal(OAISSHKey summary);
    void getV3UserKeysKeyIdSignal(OAISSHKey summary);
    void postV3UserEmailsSignal(OAIEmail summary);
    void postV3UserKeysSignal(OAISSHKey summary);


    void deleteV3UserEmailsEmailIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteV3UserKeysKeyIdSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void getV3UserSignalFull(OAIHttpRequestWorker *worker, OAIUserPublic summary);
    void getV3UserEmailsSignalFull(OAIHttpRequestWorker *worker, OAIEmail summary);
    void getV3UserEmailsEmailIdSignalFull(OAIHttpRequestWorker *worker, OAIEmail summary);
    void getV3UserKeysSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void getV3UserKeysKeyIdSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void postV3UserEmailsSignalFull(OAIHttpRequestWorker *worker, OAIEmail summary);
    void postV3UserKeysSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);

    Q_DECL_DEPRECATED_X("Use deleteV3UserEmailsEmailIdSignalError() instead")
    void deleteV3UserEmailsEmailIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3UserEmailsEmailIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3UserKeysKeyIdSignalError() instead")
    void deleteV3UserKeysKeyIdSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3UserKeysKeyIdSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UserSignalError() instead")
    void getV3UserSignalE(OAIUserPublic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UserSignalError(OAIUserPublic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UserEmailsSignalError() instead")
    void getV3UserEmailsSignalE(OAIEmail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UserEmailsSignalError(OAIEmail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UserEmailsEmailIdSignalError() instead")
    void getV3UserEmailsEmailIdSignalE(OAIEmail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UserEmailsEmailIdSignalError(OAIEmail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UserKeysSignalError() instead")
    void getV3UserKeysSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UserKeysSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UserKeysKeyIdSignalError() instead")
    void getV3UserKeysKeyIdSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UserKeysKeyIdSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3UserEmailsSignalError() instead")
    void postV3UserEmailsSignalE(OAIEmail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3UserEmailsSignalError(OAIEmail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3UserKeysSignalError() instead")
    void postV3UserKeysSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3UserKeysSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteV3UserEmailsEmailIdSignalErrorFull() instead")
    void deleteV3UserEmailsEmailIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3UserEmailsEmailIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3UserKeysKeyIdSignalErrorFull() instead")
    void deleteV3UserKeysKeyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3UserKeysKeyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UserSignalErrorFull() instead")
    void getV3UserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UserEmailsSignalErrorFull() instead")
    void getV3UserEmailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UserEmailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UserEmailsEmailIdSignalErrorFull() instead")
    void getV3UserEmailsEmailIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UserEmailsEmailIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UserKeysSignalErrorFull() instead")
    void getV3UserKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UserKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3UserKeysKeyIdSignalErrorFull() instead")
    void getV3UserKeysKeyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3UserKeysKeyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3UserEmailsSignalErrorFull() instead")
    void postV3UserEmailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3UserEmailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3UserKeysSignalErrorFull() instead")
    void postV3UserKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3UserKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
