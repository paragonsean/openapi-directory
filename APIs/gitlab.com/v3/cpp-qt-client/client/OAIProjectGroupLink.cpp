/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectGroupLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectGroupLink::OAIProjectGroupLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectGroupLink::OAIProjectGroupLink() {
    this->initializeModel();
}

OAIProjectGroupLink::~OAIProjectGroupLink() {}

void OAIProjectGroupLink::initializeModel() {

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_group_access_isSet = false;
    m_group_access_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;
}

void OAIProjectGroupLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectGroupLink::fromJsonObject(QJsonObject json) {

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_group_access_isValid = ::OpenAPI::fromJsonValue(m_group_access, json[QString("group_access")]);
    m_group_access_isSet = !json[QString("group_access")].isNull() && m_group_access_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;
}

QString OAIProjectGroupLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectGroupLink::asJsonObject() const {
    QJsonObject obj;
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_group_access_isSet) {
        obj.insert(QString("group_access"), ::OpenAPI::toJsonValue(m_group_access));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(m_project_id));
    }
    return obj;
}

QString OAIProjectGroupLink::getExpiresAt() const {
    return m_expires_at;
}
void OAIProjectGroupLink::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIProjectGroupLink::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIProjectGroupLink::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAIProjectGroupLink::getGroupAccess() const {
    return m_group_access;
}
void OAIProjectGroupLink::setGroupAccess(const QString &group_access) {
    m_group_access = group_access;
    m_group_access_isSet = true;
}

bool OAIProjectGroupLink::is_group_access_Set() const{
    return m_group_access_isSet;
}

bool OAIProjectGroupLink::is_group_access_Valid() const{
    return m_group_access_isValid;
}

QString OAIProjectGroupLink::getGroupId() const {
    return m_group_id;
}
void OAIProjectGroupLink::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIProjectGroupLink::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIProjectGroupLink::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIProjectGroupLink::getId() const {
    return m_id;
}
void OAIProjectGroupLink::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProjectGroupLink::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProjectGroupLink::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProjectGroupLink::getProjectId() const {
    return m_project_id;
}
void OAIProjectGroupLink::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIProjectGroupLink::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIProjectGroupLink::is_project_id_Valid() const{
    return m_project_id_isValid;
}

bool OAIProjectGroupLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectGroupLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
