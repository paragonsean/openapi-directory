/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITemplatesApi_H
#define OAI_OAITemplatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRepoLicense.h"
#include "OAITemplate.h"
#include "OAITemplatesList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITemplatesApi : public QObject {
    Q_OBJECT

public:
    OAITemplatesApi(const int timeOut = 0);
    ~OAITemplatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getV3TemplatesDockerfiles();

    /**
    * @param[in]  name QString [required]
    */
    virtual void getV3TemplatesDockerfilesName(const QString &name);


    virtual void getV3TemplatesGitignores();

    /**
    * @param[in]  name QString [required]
    */
    virtual void getV3TemplatesGitignoresName(const QString &name);


    virtual void getV3TemplatesGitlabCiYmls();

    /**
    * @param[in]  name QString [required]
    */
    virtual void getV3TemplatesGitlabCiYmlsName(const QString &name);

    /**
    * @param[in]  popular bool [optional]
    */
    virtual void getV3TemplatesLicenses(const ::OpenAPI::OptionalParam<bool> &popular = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [required]
    */
    virtual void getV3TemplatesLicensesName(const QString &name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getV3TemplatesDockerfilesCallback(OAIHttpRequestWorker *worker);
    void getV3TemplatesDockerfilesNameCallback(OAIHttpRequestWorker *worker);
    void getV3TemplatesGitignoresCallback(OAIHttpRequestWorker *worker);
    void getV3TemplatesGitignoresNameCallback(OAIHttpRequestWorker *worker);
    void getV3TemplatesGitlabCiYmlsCallback(OAIHttpRequestWorker *worker);
    void getV3TemplatesGitlabCiYmlsNameCallback(OAIHttpRequestWorker *worker);
    void getV3TemplatesLicensesCallback(OAIHttpRequestWorker *worker);
    void getV3TemplatesLicensesNameCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getV3TemplatesDockerfilesSignal(OAITemplatesList summary);
    void getV3TemplatesDockerfilesNameSignal(OAITemplate summary);
    void getV3TemplatesGitignoresSignal(OAITemplatesList summary);
    void getV3TemplatesGitignoresNameSignal(OAITemplate summary);
    void getV3TemplatesGitlabCiYmlsSignal(OAITemplatesList summary);
    void getV3TemplatesGitlabCiYmlsNameSignal(OAITemplate summary);
    void getV3TemplatesLicensesSignal(OAIRepoLicense summary);
    void getV3TemplatesLicensesNameSignal(OAIRepoLicense summary);


    void getV3TemplatesDockerfilesSignalFull(OAIHttpRequestWorker *worker, OAITemplatesList summary);
    void getV3TemplatesDockerfilesNameSignalFull(OAIHttpRequestWorker *worker, OAITemplate summary);
    void getV3TemplatesGitignoresSignalFull(OAIHttpRequestWorker *worker, OAITemplatesList summary);
    void getV3TemplatesGitignoresNameSignalFull(OAIHttpRequestWorker *worker, OAITemplate summary);
    void getV3TemplatesGitlabCiYmlsSignalFull(OAIHttpRequestWorker *worker, OAITemplatesList summary);
    void getV3TemplatesGitlabCiYmlsNameSignalFull(OAIHttpRequestWorker *worker, OAITemplate summary);
    void getV3TemplatesLicensesSignalFull(OAIHttpRequestWorker *worker, OAIRepoLicense summary);
    void getV3TemplatesLicensesNameSignalFull(OAIHttpRequestWorker *worker, OAIRepoLicense summary);

    Q_DECL_DEPRECATED_X("Use getV3TemplatesDockerfilesSignalError() instead")
    void getV3TemplatesDockerfilesSignalE(OAITemplatesList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3TemplatesDockerfilesSignalError(OAITemplatesList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3TemplatesDockerfilesNameSignalError() instead")
    void getV3TemplatesDockerfilesNameSignalE(OAITemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3TemplatesDockerfilesNameSignalError(OAITemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3TemplatesGitignoresSignalError() instead")
    void getV3TemplatesGitignoresSignalE(OAITemplatesList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3TemplatesGitignoresSignalError(OAITemplatesList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3TemplatesGitignoresNameSignalError() instead")
    void getV3TemplatesGitignoresNameSignalE(OAITemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3TemplatesGitignoresNameSignalError(OAITemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3TemplatesGitlabCiYmlsSignalError() instead")
    void getV3TemplatesGitlabCiYmlsSignalE(OAITemplatesList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3TemplatesGitlabCiYmlsSignalError(OAITemplatesList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3TemplatesGitlabCiYmlsNameSignalError() instead")
    void getV3TemplatesGitlabCiYmlsNameSignalE(OAITemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3TemplatesGitlabCiYmlsNameSignalError(OAITemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3TemplatesLicensesSignalError() instead")
    void getV3TemplatesLicensesSignalE(OAIRepoLicense summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3TemplatesLicensesSignalError(OAIRepoLicense summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3TemplatesLicensesNameSignalError() instead")
    void getV3TemplatesLicensesNameSignalE(OAIRepoLicense summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3TemplatesLicensesNameSignalError(OAIRepoLicense summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getV3TemplatesDockerfilesSignalErrorFull() instead")
    void getV3TemplatesDockerfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3TemplatesDockerfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3TemplatesDockerfilesNameSignalErrorFull() instead")
    void getV3TemplatesDockerfilesNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3TemplatesDockerfilesNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3TemplatesGitignoresSignalErrorFull() instead")
    void getV3TemplatesGitignoresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3TemplatesGitignoresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3TemplatesGitignoresNameSignalErrorFull() instead")
    void getV3TemplatesGitignoresNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3TemplatesGitignoresNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3TemplatesGitlabCiYmlsSignalErrorFull() instead")
    void getV3TemplatesGitlabCiYmlsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3TemplatesGitlabCiYmlsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3TemplatesGitlabCiYmlsNameSignalErrorFull() instead")
    void getV3TemplatesGitlabCiYmlsNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3TemplatesGitlabCiYmlsNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3TemplatesLicensesSignalErrorFull() instead")
    void getV3TemplatesLicensesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3TemplatesLicensesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3TemplatesLicensesNameSignalErrorFull() instead")
    void getV3TemplatesLicensesNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3TemplatesLicensesNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
