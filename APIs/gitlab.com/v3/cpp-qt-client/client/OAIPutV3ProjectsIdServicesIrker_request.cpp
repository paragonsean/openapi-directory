/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3ProjectsIdServicesIrker_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3ProjectsIdServicesIrker_request::OAIPutV3ProjectsIdServicesIrker_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3ProjectsIdServicesIrker_request::OAIPutV3ProjectsIdServicesIrker_request() {
    this->initializeModel();
}

OAIPutV3ProjectsIdServicesIrker_request::~OAIPutV3ProjectsIdServicesIrker_request() {}

void OAIPutV3ProjectsIdServicesIrker_request::initializeModel() {

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_default_irc_uri_isSet = false;
    m_default_irc_uri_isValid = false;

    m_server_host_isSet = false;
    m_server_host_isValid = false;

    m_server_port_isSet = false;
    m_server_port_isValid = false;

    m_colorize_messages_isSet = false;
    m_colorize_messages_isValid = false;

    m_push_events_isSet = false;
    m_push_events_isValid = false;
}

void OAIPutV3ProjectsIdServicesIrker_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3ProjectsIdServicesIrker_request::fromJsonObject(QJsonObject json) {

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_default_irc_uri_isValid = ::OpenAPI::fromJsonValue(m_default_irc_uri, json[QString("default_irc_uri")]);
    m_default_irc_uri_isSet = !json[QString("default_irc_uri")].isNull() && m_default_irc_uri_isValid;

    m_server_host_isValid = ::OpenAPI::fromJsonValue(m_server_host, json[QString("server_host")]);
    m_server_host_isSet = !json[QString("server_host")].isNull() && m_server_host_isValid;

    m_server_port_isValid = ::OpenAPI::fromJsonValue(m_server_port, json[QString("server_port")]);
    m_server_port_isSet = !json[QString("server_port")].isNull() && m_server_port_isValid;

    m_colorize_messages_isValid = ::OpenAPI::fromJsonValue(m_colorize_messages, json[QString("colorize_messages")]);
    m_colorize_messages_isSet = !json[QString("colorize_messages")].isNull() && m_colorize_messages_isValid;

    m_push_events_isValid = ::OpenAPI::fromJsonValue(m_push_events, json[QString("push_events")]);
    m_push_events_isSet = !json[QString("push_events")].isNull() && m_push_events_isValid;
}

QString OAIPutV3ProjectsIdServicesIrker_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3ProjectsIdServicesIrker_request::asJsonObject() const {
    QJsonObject obj;
    if (m_recipients_isSet) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_default_irc_uri_isSet) {
        obj.insert(QString("default_irc_uri"), ::OpenAPI::toJsonValue(m_default_irc_uri));
    }
    if (m_server_host_isSet) {
        obj.insert(QString("server_host"), ::OpenAPI::toJsonValue(m_server_host));
    }
    if (m_server_port_isSet) {
        obj.insert(QString("server_port"), ::OpenAPI::toJsonValue(m_server_port));
    }
    if (m_colorize_messages_isSet) {
        obj.insert(QString("colorize_messages"), ::OpenAPI::toJsonValue(m_colorize_messages));
    }
    if (m_push_events_isSet) {
        obj.insert(QString("push_events"), ::OpenAPI::toJsonValue(m_push_events));
    }
    return obj;
}

QString OAIPutV3ProjectsIdServicesIrker_request::getRecipients() const {
    return m_recipients;
}
void OAIPutV3ProjectsIdServicesIrker_request::setRecipients(const QString &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAIPutV3ProjectsIdServicesIrker_request::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAIPutV3ProjectsIdServicesIrker_request::is_recipients_Valid() const{
    return m_recipients_isValid;
}

QString OAIPutV3ProjectsIdServicesIrker_request::getDefaultIrcUri() const {
    return m_default_irc_uri;
}
void OAIPutV3ProjectsIdServicesIrker_request::setDefaultIrcUri(const QString &default_irc_uri) {
    m_default_irc_uri = default_irc_uri;
    m_default_irc_uri_isSet = true;
}

bool OAIPutV3ProjectsIdServicesIrker_request::is_default_irc_uri_Set() const{
    return m_default_irc_uri_isSet;
}

bool OAIPutV3ProjectsIdServicesIrker_request::is_default_irc_uri_Valid() const{
    return m_default_irc_uri_isValid;
}

QString OAIPutV3ProjectsIdServicesIrker_request::getServerHost() const {
    return m_server_host;
}
void OAIPutV3ProjectsIdServicesIrker_request::setServerHost(const QString &server_host) {
    m_server_host = server_host;
    m_server_host_isSet = true;
}

bool OAIPutV3ProjectsIdServicesIrker_request::is_server_host_Set() const{
    return m_server_host_isSet;
}

bool OAIPutV3ProjectsIdServicesIrker_request::is_server_host_Valid() const{
    return m_server_host_isValid;
}

qint32 OAIPutV3ProjectsIdServicesIrker_request::getServerPort() const {
    return m_server_port;
}
void OAIPutV3ProjectsIdServicesIrker_request::setServerPort(const qint32 &server_port) {
    m_server_port = server_port;
    m_server_port_isSet = true;
}

bool OAIPutV3ProjectsIdServicesIrker_request::is_server_port_Set() const{
    return m_server_port_isSet;
}

bool OAIPutV3ProjectsIdServicesIrker_request::is_server_port_Valid() const{
    return m_server_port_isValid;
}

bool OAIPutV3ProjectsIdServicesIrker_request::isColorizeMessages() const {
    return m_colorize_messages;
}
void OAIPutV3ProjectsIdServicesIrker_request::setColorizeMessages(const bool &colorize_messages) {
    m_colorize_messages = colorize_messages;
    m_colorize_messages_isSet = true;
}

bool OAIPutV3ProjectsIdServicesIrker_request::is_colorize_messages_Set() const{
    return m_colorize_messages_isSet;
}

bool OAIPutV3ProjectsIdServicesIrker_request::is_colorize_messages_Valid() const{
    return m_colorize_messages_isValid;
}

QString OAIPutV3ProjectsIdServicesIrker_request::getPushEvents() const {
    return m_push_events;
}
void OAIPutV3ProjectsIdServicesIrker_request::setPushEvents(const QString &push_events) {
    m_push_events = push_events;
    m_push_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesIrker_request::is_push_events_Set() const{
    return m_push_events_isSet;
}

bool OAIPutV3ProjectsIdServicesIrker_request::is_push_events_Valid() const{
    return m_push_events_isValid;
}

bool OAIPutV3ProjectsIdServicesIrker_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recipients_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_irc_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colorize_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_events_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3ProjectsIdServicesIrker_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_recipients_isValid && true;
}

} // namespace OpenAPI
