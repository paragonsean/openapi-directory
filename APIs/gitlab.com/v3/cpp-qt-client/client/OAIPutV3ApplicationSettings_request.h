/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutV3ApplicationSettings_request.h
 *
 * 
 */

#ifndef OAIPutV3ApplicationSettings_request_H
#define OAIPutV3ApplicationSettings_request_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPutV3ApplicationSettings_request : public OAIObject {
public:
    OAIPutV3ApplicationSettings_request();
    OAIPutV3ApplicationSettings_request(QString json);
    ~OAIPutV3ApplicationSettings_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDefaultBranchProtection() const;
    void setDefaultBranchProtection(const qint32 &default_branch_protection);
    bool is_default_branch_protection_Set() const;
    bool is_default_branch_protection_Valid() const;

    qint32 getDefaultProjectVisibility() const;
    void setDefaultProjectVisibility(const qint32 &default_project_visibility);
    bool is_default_project_visibility_Set() const;
    bool is_default_project_visibility_Valid() const;

    qint32 getDefaultSnippetVisibility() const;
    void setDefaultSnippetVisibility(const qint32 &default_snippet_visibility);
    bool is_default_snippet_visibility_Set() const;
    bool is_default_snippet_visibility_Valid() const;

    qint32 getDefaultGroupVisibility() const;
    void setDefaultGroupVisibility(const qint32 &default_group_visibility);
    bool is_default_group_visibility_Set() const;
    bool is_default_group_visibility_Valid() const;

    QList<QString> getRestrictedVisibilityLevels() const;
    void setRestrictedVisibilityLevels(const QList<QString> &restricted_visibility_levels);
    bool is_restricted_visibility_levels_Set() const;
    bool is_restricted_visibility_levels_Valid() const;

    QList<QString> getImportSources() const;
    void setImportSources(const QList<QString> &import_sources);
    bool is_import_sources_Set() const;
    bool is_import_sources_Valid() const;

    QList<QString> getDisabledOauthSignInSources() const;
    void setDisabledOauthSignInSources(const QList<QString> &disabled_oauth_sign_in_sources);
    bool is_disabled_oauth_sign_in_sources_Set() const;
    bool is_disabled_oauth_sign_in_sources_Valid() const;

    QString getEnabledGitAccessProtocol() const;
    void setEnabledGitAccessProtocol(const QString &enabled_git_access_protocol);
    bool is_enabled_git_access_protocol_Set() const;
    bool is_enabled_git_access_protocol_Valid() const;

    bool isGravatarEnabled() const;
    void setGravatarEnabled(const bool &gravatar_enabled);
    bool is_gravatar_enabled_Set() const;
    bool is_gravatar_enabled_Valid() const;

    qint32 getDefaultProjectsLimit() const;
    void setDefaultProjectsLimit(const qint32 &default_projects_limit);
    bool is_default_projects_limit_Set() const;
    bool is_default_projects_limit_Valid() const;

    qint32 getMaxAttachmentSize() const;
    void setMaxAttachmentSize(const qint32 &max_attachment_size);
    bool is_max_attachment_size_Set() const;
    bool is_max_attachment_size_Valid() const;

    qint32 getSessionExpireDelay() const;
    void setSessionExpireDelay(const qint32 &session_expire_delay);
    bool is_session_expire_delay_Set() const;
    bool is_session_expire_delay_Valid() const;

    bool isUserOauthApplications() const;
    void setUserOauthApplications(const bool &user_oauth_applications);
    bool is_user_oauth_applications_Set() const;
    bool is_user_oauth_applications_Valid() const;

    bool isUserDefaultExternal() const;
    void setUserDefaultExternal(const bool &user_default_external);
    bool is_user_default_external_Set() const;
    bool is_user_default_external_Valid() const;

    bool isSignupEnabled() const;
    void setSignupEnabled(const bool &signup_enabled);
    bool is_signup_enabled_Set() const;
    bool is_signup_enabled_Valid() const;

    bool isSendUserConfirmationEmail() const;
    void setSendUserConfirmationEmail(const bool &send_user_confirmation_email);
    bool is_send_user_confirmation_email_Set() const;
    bool is_send_user_confirmation_email_Valid() const;

    QString getDomainWhitelist() const;
    void setDomainWhitelist(const QString &domain_whitelist);
    bool is_domain_whitelist_Set() const;
    bool is_domain_whitelist_Valid() const;

    bool isDomainBlacklistEnabled() const;
    void setDomainBlacklistEnabled(const bool &domain_blacklist_enabled);
    bool is_domain_blacklist_enabled_Set() const;
    bool is_domain_blacklist_enabled_Valid() const;

    QString getDomainBlacklist() const;
    void setDomainBlacklist(const QString &domain_blacklist);
    bool is_domain_blacklist_Set() const;
    bool is_domain_blacklist_Valid() const;

    QString getAfterSignUpText() const;
    void setAfterSignUpText(const QString &after_sign_up_text);
    bool is_after_sign_up_text_Set() const;
    bool is_after_sign_up_text_Valid() const;

    bool isSigninEnabled() const;
    void setSigninEnabled(const bool &signin_enabled);
    bool is_signin_enabled_Set() const;
    bool is_signin_enabled_Valid() const;

    bool isRequireTwoFactorAuthentication() const;
    void setRequireTwoFactorAuthentication(const bool &require_two_factor_authentication);
    bool is_require_two_factor_authentication_Set() const;
    bool is_require_two_factor_authentication_Valid() const;

    qint32 getTwoFactorGracePeriod() const;
    void setTwoFactorGracePeriod(const qint32 &two_factor_grace_period);
    bool is_two_factor_grace_period_Set() const;
    bool is_two_factor_grace_period_Valid() const;

    QString getHomePageUrl() const;
    void setHomePageUrl(const QString &home_page_url);
    bool is_home_page_url_Set() const;
    bool is_home_page_url_Valid() const;

    QString getAfterSignOutPath() const;
    void setAfterSignOutPath(const QString &after_sign_out_path);
    bool is_after_sign_out_path_Set() const;
    bool is_after_sign_out_path_Valid() const;

    QString getSignInText() const;
    void setSignInText(const QString &sign_in_text);
    bool is_sign_in_text_Set() const;
    bool is_sign_in_text_Valid() const;

    QString getHelpPageText() const;
    void setHelpPageText(const QString &help_page_text);
    bool is_help_page_text_Set() const;
    bool is_help_page_text_Valid() const;

    bool isSharedRunnersEnabled() const;
    void setSharedRunnersEnabled(const bool &shared_runners_enabled);
    bool is_shared_runners_enabled_Set() const;
    bool is_shared_runners_enabled_Valid() const;

    QString getSharedRunnersText() const;
    void setSharedRunnersText(const QString &shared_runners_text);
    bool is_shared_runners_text_Set() const;
    bool is_shared_runners_text_Valid() const;

    qint32 getMaxArtifactsSize() const;
    void setMaxArtifactsSize(const qint32 &max_artifacts_size);
    bool is_max_artifacts_size_Set() const;
    bool is_max_artifacts_size_Valid() const;

    qint32 getContainerRegistryTokenExpireDelay() const;
    void setContainerRegistryTokenExpireDelay(const qint32 &container_registry_token_expire_delay);
    bool is_container_registry_token_expire_delay_Set() const;
    bool is_container_registry_token_expire_delay_Valid() const;

    bool isMetricsEnabled() const;
    void setMetricsEnabled(const bool &metrics_enabled);
    bool is_metrics_enabled_Set() const;
    bool is_metrics_enabled_Valid() const;

    QString getMetricsHost() const;
    void setMetricsHost(const QString &metrics_host);
    bool is_metrics_host_Set() const;
    bool is_metrics_host_Valid() const;

    qint32 getMetricsPort() const;
    void setMetricsPort(const qint32 &metrics_port);
    bool is_metrics_port_Set() const;
    bool is_metrics_port_Valid() const;

    qint32 getMetricsPoolSize() const;
    void setMetricsPoolSize(const qint32 &metrics_pool_size);
    bool is_metrics_pool_size_Set() const;
    bool is_metrics_pool_size_Valid() const;

    qint32 getMetricsTimeout() const;
    void setMetricsTimeout(const qint32 &metrics_timeout);
    bool is_metrics_timeout_Set() const;
    bool is_metrics_timeout_Valid() const;

    qint32 getMetricsMethodCallThreshold() const;
    void setMetricsMethodCallThreshold(const qint32 &metrics_method_call_threshold);
    bool is_metrics_method_call_threshold_Set() const;
    bool is_metrics_method_call_threshold_Valid() const;

    qint32 getMetricsSampleInterval() const;
    void setMetricsSampleInterval(const qint32 &metrics_sample_interval);
    bool is_metrics_sample_interval_Set() const;
    bool is_metrics_sample_interval_Valid() const;

    qint32 getMetricsPacketSize() const;
    void setMetricsPacketSize(const qint32 &metrics_packet_size);
    bool is_metrics_packet_size_Set() const;
    bool is_metrics_packet_size_Valid() const;

    bool isSidekiqThrottlingEnabled() const;
    void setSidekiqThrottlingEnabled(const bool &sidekiq_throttling_enabled);
    bool is_sidekiq_throttling_enabled_Set() const;
    bool is_sidekiq_throttling_enabled_Valid() const;

    QList<QString> getSidekiqThrottlingQueus() const;
    void setSidekiqThrottlingQueus(const QList<QString> &sidekiq_throttling_queus);
    bool is_sidekiq_throttling_queus_Set() const;
    bool is_sidekiq_throttling_queus_Valid() const;

    float getSidekiqThrottlingFactor() const;
    void setSidekiqThrottlingFactor(const float &sidekiq_throttling_factor);
    bool is_sidekiq_throttling_factor_Set() const;
    bool is_sidekiq_throttling_factor_Valid() const;

    bool isRecaptchaEnabled() const;
    void setRecaptchaEnabled(const bool &recaptcha_enabled);
    bool is_recaptcha_enabled_Set() const;
    bool is_recaptcha_enabled_Valid() const;

    QString getRecaptchaSiteKey() const;
    void setRecaptchaSiteKey(const QString &recaptcha_site_key);
    bool is_recaptcha_site_key_Set() const;
    bool is_recaptcha_site_key_Valid() const;

    QString getRecaptchaPrivateKey() const;
    void setRecaptchaPrivateKey(const QString &recaptcha_private_key);
    bool is_recaptcha_private_key_Set() const;
    bool is_recaptcha_private_key_Valid() const;

    bool isAkismetEnabled() const;
    void setAkismetEnabled(const bool &akismet_enabled);
    bool is_akismet_enabled_Set() const;
    bool is_akismet_enabled_Valid() const;

    QString getAkismetApiKey() const;
    void setAkismetApiKey(const QString &akismet_api_key);
    bool is_akismet_api_key_Set() const;
    bool is_akismet_api_key_Valid() const;

    QString getAdminNotificationEmail() const;
    void setAdminNotificationEmail(const QString &admin_notification_email);
    bool is_admin_notification_email_Set() const;
    bool is_admin_notification_email_Valid() const;

    bool isSentryEnabled() const;
    void setSentryEnabled(const bool &sentry_enabled);
    bool is_sentry_enabled_Set() const;
    bool is_sentry_enabled_Valid() const;

    QString getSentryDsn() const;
    void setSentryDsn(const QString &sentry_dsn);
    bool is_sentry_dsn_Set() const;
    bool is_sentry_dsn_Valid() const;

    QString getRepositoryStorage() const;
    void setRepositoryStorage(const QString &repository_storage);
    bool is_repository_storage_Set() const;
    bool is_repository_storage_Valid() const;

    bool isRepositoryChecksEnabled() const;
    void setRepositoryChecksEnabled(const bool &repository_checks_enabled);
    bool is_repository_checks_enabled_Set() const;
    bool is_repository_checks_enabled_Valid() const;

    bool isKodingEnabled() const;
    void setKodingEnabled(const bool &koding_enabled);
    bool is_koding_enabled_Set() const;
    bool is_koding_enabled_Valid() const;

    QString getKodingUrl() const;
    void setKodingUrl(const QString &koding_url);
    bool is_koding_url_Set() const;
    bool is_koding_url_Valid() const;

    bool isPlantumlEnabled() const;
    void setPlantumlEnabled(const bool &plantuml_enabled);
    bool is_plantuml_enabled_Set() const;
    bool is_plantuml_enabled_Valid() const;

    QString getPlantumlUrl() const;
    void setPlantumlUrl(const QString &plantuml_url);
    bool is_plantuml_url_Set() const;
    bool is_plantuml_url_Valid() const;

    bool isVersionCheckEnabled() const;
    void setVersionCheckEnabled(const bool &version_check_enabled);
    bool is_version_check_enabled_Set() const;
    bool is_version_check_enabled_Valid() const;

    bool isEmailAuthorInBody() const;
    void setEmailAuthorInBody(const bool &email_author_in_body);
    bool is_email_author_in_body_Set() const;
    bool is_email_author_in_body_Valid() const;

    bool isHtmlEmailsEnabled() const;
    void setHtmlEmailsEnabled(const bool &html_emails_enabled);
    bool is_html_emails_enabled_Set() const;
    bool is_html_emails_enabled_Valid() const;

    bool isHousekeepingEnabled() const;
    void setHousekeepingEnabled(const bool &housekeeping_enabled);
    bool is_housekeeping_enabled_Set() const;
    bool is_housekeeping_enabled_Valid() const;

    bool isHousekeepingBitmapsEnabled() const;
    void setHousekeepingBitmapsEnabled(const bool &housekeeping_bitmaps_enabled);
    bool is_housekeeping_bitmaps_enabled_Set() const;
    bool is_housekeeping_bitmaps_enabled_Valid() const;

    qint32 getHousekeepingIncrementalRepackPeriod() const;
    void setHousekeepingIncrementalRepackPeriod(const qint32 &housekeeping_incremental_repack_period);
    bool is_housekeeping_incremental_repack_period_Set() const;
    bool is_housekeeping_incremental_repack_period_Valid() const;

    qint32 getHousekeepingFullRepackPeriod() const;
    void setHousekeepingFullRepackPeriod(const qint32 &housekeeping_full_repack_period);
    bool is_housekeeping_full_repack_period_Set() const;
    bool is_housekeeping_full_repack_period_Valid() const;

    qint32 getHousekeepingGcPeriod() const;
    void setHousekeepingGcPeriod(const qint32 &housekeeping_gc_period);
    bool is_housekeeping_gc_period_Set() const;
    bool is_housekeeping_gc_period_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_default_branch_protection;
    bool m_default_branch_protection_isSet;
    bool m_default_branch_protection_isValid;

    qint32 m_default_project_visibility;
    bool m_default_project_visibility_isSet;
    bool m_default_project_visibility_isValid;

    qint32 m_default_snippet_visibility;
    bool m_default_snippet_visibility_isSet;
    bool m_default_snippet_visibility_isValid;

    qint32 m_default_group_visibility;
    bool m_default_group_visibility_isSet;
    bool m_default_group_visibility_isValid;

    QList<QString> m_restricted_visibility_levels;
    bool m_restricted_visibility_levels_isSet;
    bool m_restricted_visibility_levels_isValid;

    QList<QString> m_import_sources;
    bool m_import_sources_isSet;
    bool m_import_sources_isValid;

    QList<QString> m_disabled_oauth_sign_in_sources;
    bool m_disabled_oauth_sign_in_sources_isSet;
    bool m_disabled_oauth_sign_in_sources_isValid;

    QString m_enabled_git_access_protocol;
    bool m_enabled_git_access_protocol_isSet;
    bool m_enabled_git_access_protocol_isValid;

    bool m_gravatar_enabled;
    bool m_gravatar_enabled_isSet;
    bool m_gravatar_enabled_isValid;

    qint32 m_default_projects_limit;
    bool m_default_projects_limit_isSet;
    bool m_default_projects_limit_isValid;

    qint32 m_max_attachment_size;
    bool m_max_attachment_size_isSet;
    bool m_max_attachment_size_isValid;

    qint32 m_session_expire_delay;
    bool m_session_expire_delay_isSet;
    bool m_session_expire_delay_isValid;

    bool m_user_oauth_applications;
    bool m_user_oauth_applications_isSet;
    bool m_user_oauth_applications_isValid;

    bool m_user_default_external;
    bool m_user_default_external_isSet;
    bool m_user_default_external_isValid;

    bool m_signup_enabled;
    bool m_signup_enabled_isSet;
    bool m_signup_enabled_isValid;

    bool m_send_user_confirmation_email;
    bool m_send_user_confirmation_email_isSet;
    bool m_send_user_confirmation_email_isValid;

    QString m_domain_whitelist;
    bool m_domain_whitelist_isSet;
    bool m_domain_whitelist_isValid;

    bool m_domain_blacklist_enabled;
    bool m_domain_blacklist_enabled_isSet;
    bool m_domain_blacklist_enabled_isValid;

    QString m_domain_blacklist;
    bool m_domain_blacklist_isSet;
    bool m_domain_blacklist_isValid;

    QString m_after_sign_up_text;
    bool m_after_sign_up_text_isSet;
    bool m_after_sign_up_text_isValid;

    bool m_signin_enabled;
    bool m_signin_enabled_isSet;
    bool m_signin_enabled_isValid;

    bool m_require_two_factor_authentication;
    bool m_require_two_factor_authentication_isSet;
    bool m_require_two_factor_authentication_isValid;

    qint32 m_two_factor_grace_period;
    bool m_two_factor_grace_period_isSet;
    bool m_two_factor_grace_period_isValid;

    QString m_home_page_url;
    bool m_home_page_url_isSet;
    bool m_home_page_url_isValid;

    QString m_after_sign_out_path;
    bool m_after_sign_out_path_isSet;
    bool m_after_sign_out_path_isValid;

    QString m_sign_in_text;
    bool m_sign_in_text_isSet;
    bool m_sign_in_text_isValid;

    QString m_help_page_text;
    bool m_help_page_text_isSet;
    bool m_help_page_text_isValid;

    bool m_shared_runners_enabled;
    bool m_shared_runners_enabled_isSet;
    bool m_shared_runners_enabled_isValid;

    QString m_shared_runners_text;
    bool m_shared_runners_text_isSet;
    bool m_shared_runners_text_isValid;

    qint32 m_max_artifacts_size;
    bool m_max_artifacts_size_isSet;
    bool m_max_artifacts_size_isValid;

    qint32 m_container_registry_token_expire_delay;
    bool m_container_registry_token_expire_delay_isSet;
    bool m_container_registry_token_expire_delay_isValid;

    bool m_metrics_enabled;
    bool m_metrics_enabled_isSet;
    bool m_metrics_enabled_isValid;

    QString m_metrics_host;
    bool m_metrics_host_isSet;
    bool m_metrics_host_isValid;

    qint32 m_metrics_port;
    bool m_metrics_port_isSet;
    bool m_metrics_port_isValid;

    qint32 m_metrics_pool_size;
    bool m_metrics_pool_size_isSet;
    bool m_metrics_pool_size_isValid;

    qint32 m_metrics_timeout;
    bool m_metrics_timeout_isSet;
    bool m_metrics_timeout_isValid;

    qint32 m_metrics_method_call_threshold;
    bool m_metrics_method_call_threshold_isSet;
    bool m_metrics_method_call_threshold_isValid;

    qint32 m_metrics_sample_interval;
    bool m_metrics_sample_interval_isSet;
    bool m_metrics_sample_interval_isValid;

    qint32 m_metrics_packet_size;
    bool m_metrics_packet_size_isSet;
    bool m_metrics_packet_size_isValid;

    bool m_sidekiq_throttling_enabled;
    bool m_sidekiq_throttling_enabled_isSet;
    bool m_sidekiq_throttling_enabled_isValid;

    QList<QString> m_sidekiq_throttling_queus;
    bool m_sidekiq_throttling_queus_isSet;
    bool m_sidekiq_throttling_queus_isValid;

    float m_sidekiq_throttling_factor;
    bool m_sidekiq_throttling_factor_isSet;
    bool m_sidekiq_throttling_factor_isValid;

    bool m_recaptcha_enabled;
    bool m_recaptcha_enabled_isSet;
    bool m_recaptcha_enabled_isValid;

    QString m_recaptcha_site_key;
    bool m_recaptcha_site_key_isSet;
    bool m_recaptcha_site_key_isValid;

    QString m_recaptcha_private_key;
    bool m_recaptcha_private_key_isSet;
    bool m_recaptcha_private_key_isValid;

    bool m_akismet_enabled;
    bool m_akismet_enabled_isSet;
    bool m_akismet_enabled_isValid;

    QString m_akismet_api_key;
    bool m_akismet_api_key_isSet;
    bool m_akismet_api_key_isValid;

    QString m_admin_notification_email;
    bool m_admin_notification_email_isSet;
    bool m_admin_notification_email_isValid;

    bool m_sentry_enabled;
    bool m_sentry_enabled_isSet;
    bool m_sentry_enabled_isValid;

    QString m_sentry_dsn;
    bool m_sentry_dsn_isSet;
    bool m_sentry_dsn_isValid;

    QString m_repository_storage;
    bool m_repository_storage_isSet;
    bool m_repository_storage_isValid;

    bool m_repository_checks_enabled;
    bool m_repository_checks_enabled_isSet;
    bool m_repository_checks_enabled_isValid;

    bool m_koding_enabled;
    bool m_koding_enabled_isSet;
    bool m_koding_enabled_isValid;

    QString m_koding_url;
    bool m_koding_url_isSet;
    bool m_koding_url_isValid;

    bool m_plantuml_enabled;
    bool m_plantuml_enabled_isSet;
    bool m_plantuml_enabled_isValid;

    QString m_plantuml_url;
    bool m_plantuml_url_isSet;
    bool m_plantuml_url_isValid;

    bool m_version_check_enabled;
    bool m_version_check_enabled_isSet;
    bool m_version_check_enabled_isValid;

    bool m_email_author_in_body;
    bool m_email_author_in_body_isSet;
    bool m_email_author_in_body_isValid;

    bool m_html_emails_enabled;
    bool m_html_emails_enabled_isSet;
    bool m_html_emails_enabled_isValid;

    bool m_housekeeping_enabled;
    bool m_housekeeping_enabled_isSet;
    bool m_housekeeping_enabled_isValid;

    bool m_housekeeping_bitmaps_enabled;
    bool m_housekeeping_bitmaps_enabled_isSet;
    bool m_housekeeping_bitmaps_enabled_isValid;

    qint32 m_housekeeping_incremental_repack_period;
    bool m_housekeeping_incremental_repack_period_isSet;
    bool m_housekeeping_incremental_repack_period_isValid;

    qint32 m_housekeeping_full_repack_period;
    bool m_housekeeping_full_repack_period_isSet;
    bool m_housekeeping_full_repack_period_isValid;

    qint32 m_housekeeping_gc_period;
    bool m_housekeeping_gc_period_isSet;
    bool m_housekeeping_gc_period_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutV3ApplicationSettings_request)

#endif // OAIPutV3ApplicationSettings_request_H
