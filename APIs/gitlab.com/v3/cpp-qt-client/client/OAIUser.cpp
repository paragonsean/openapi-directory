/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_bio_isSet = false;
    m_bio_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_admin_isSet = false;
    m_is_admin_isValid = false;

    m_linkedin_isSet = false;
    m_linkedin_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_skype_isSet = false;
    m_skype_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_twitter_isSet = false;
    m_twitter_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_web_url_isSet = false;
    m_web_url_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_bio_isValid = ::OpenAPI::fromJsonValue(m_bio, json[QString("bio")]);
    m_bio_isSet = !json[QString("bio")].isNull() && m_bio_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_admin_isValid = ::OpenAPI::fromJsonValue(m_is_admin, json[QString("is_admin")]);
    m_is_admin_isSet = !json[QString("is_admin")].isNull() && m_is_admin_isValid;

    m_linkedin_isValid = ::OpenAPI::fromJsonValue(m_linkedin, json[QString("linkedin")]);
    m_linkedin_isSet = !json[QString("linkedin")].isNull() && m_linkedin_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_skype_isValid = ::OpenAPI::fromJsonValue(m_skype, json[QString("skype")]);
    m_skype_isSet = !json[QString("skype")].isNull() && m_skype_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_twitter_isValid = ::OpenAPI::fromJsonValue(m_twitter, json[QString("twitter")]);
    m_twitter_isSet = !json[QString("twitter")].isNull() && m_twitter_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_web_url_isValid = ::OpenAPI::fromJsonValue(m_web_url, json[QString("web_url")]);
    m_web_url_isSet = !json[QString("web_url")].isNull() && m_web_url_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("website_url")]);
    m_website_url_isSet = !json[QString("website_url")].isNull() && m_website_url_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_bio_isSet) {
        obj.insert(QString("bio"), ::OpenAPI::toJsonValue(m_bio));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_admin_isSet) {
        obj.insert(QString("is_admin"), ::OpenAPI::toJsonValue(m_is_admin));
    }
    if (m_linkedin_isSet) {
        obj.insert(QString("linkedin"), ::OpenAPI::toJsonValue(m_linkedin));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_skype_isSet) {
        obj.insert(QString("skype"), ::OpenAPI::toJsonValue(m_skype));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_twitter_isSet) {
        obj.insert(QString("twitter"), ::OpenAPI::toJsonValue(m_twitter));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_web_url_isSet) {
        obj.insert(QString("web_url"), ::OpenAPI::toJsonValue(m_web_url));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("website_url"), ::OpenAPI::toJsonValue(m_website_url));
    }
    return obj;
}

QString OAIUser::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIUser::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIUser::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIUser::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAIUser::getBio() const {
    return m_bio;
}
void OAIUser::setBio(const QString &bio) {
    m_bio = bio;
    m_bio_isSet = true;
}

bool OAIUser::is_bio_Set() const{
    return m_bio_isSet;
}

bool OAIUser::is_bio_Valid() const{
    return m_bio_isValid;
}

QString OAIUser::getCreatedAt() const {
    return m_created_at;
}
void OAIUser::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUser::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUser::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser::getIsAdmin() const {
    return m_is_admin;
}
void OAIUser::setIsAdmin(const QString &is_admin) {
    m_is_admin = is_admin;
    m_is_admin_isSet = true;
}

bool OAIUser::is_is_admin_Set() const{
    return m_is_admin_isSet;
}

bool OAIUser::is_is_admin_Valid() const{
    return m_is_admin_isValid;
}

QString OAIUser::getLinkedin() const {
    return m_linkedin;
}
void OAIUser::setLinkedin(const QString &linkedin) {
    m_linkedin = linkedin;
    m_linkedin_isSet = true;
}

bool OAIUser::is_linkedin_Set() const{
    return m_linkedin_isSet;
}

bool OAIUser::is_linkedin_Valid() const{
    return m_linkedin_isValid;
}

QString OAIUser::getLocation() const {
    return m_location;
}
void OAIUser::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIUser::is_location_Set() const{
    return m_location_isSet;
}

bool OAIUser::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUser::getOrganization() const {
    return m_organization;
}
void OAIUser::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIUser::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIUser::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIUser::getSkype() const {
    return m_skype;
}
void OAIUser::setSkype(const QString &skype) {
    m_skype = skype;
    m_skype_isSet = true;
}

bool OAIUser::is_skype_Set() const{
    return m_skype_isSet;
}

bool OAIUser::is_skype_Valid() const{
    return m_skype_isValid;
}

QString OAIUser::getState() const {
    return m_state;
}
void OAIUser::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUser::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUser::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIUser::getTwitter() const {
    return m_twitter;
}
void OAIUser::setTwitter(const QString &twitter) {
    m_twitter = twitter;
    m_twitter_isSet = true;
}

bool OAIUser::is_twitter_Set() const{
    return m_twitter_isSet;
}

bool OAIUser::is_twitter_Valid() const{
    return m_twitter_isValid;
}

QString OAIUser::getUsername() const {
    return m_username;
}
void OAIUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIUser::getWebUrl() const {
    return m_web_url;
}
void OAIUser::setWebUrl(const QString &web_url) {
    m_web_url = web_url;
    m_web_url_isSet = true;
}

bool OAIUser::is_web_url_Set() const{
    return m_web_url_isSet;
}

bool OAIUser::is_web_url_Valid() const{
    return m_web_url_isValid;
}

QString OAIUser::getWebsiteUrl() const {
    return m_website_url;
}
void OAIUser::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAIUser::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAIUser::is_website_url_Valid() const{
    return m_website_url_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linkedin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
