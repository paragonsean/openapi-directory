/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationSetting::OAINotificationSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationSetting::OAINotificationSetting() {
    this->initializeModel();
}

OAINotificationSetting::~OAINotificationSetting() {}

void OAINotificationSetting::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;
}

void OAINotificationSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationSetting::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;
}

QString OAINotificationSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_events_isSet) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    return obj;
}

QString OAINotificationSetting::getEvents() const {
    return m_events;
}
void OAINotificationSetting::setEvents(const QString &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAINotificationSetting::is_events_Set() const{
    return m_events_isSet;
}

bool OAINotificationSetting::is_events_Valid() const{
    return m_events_isValid;
}

QString OAINotificationSetting::getLevel() const {
    return m_level;
}
void OAINotificationSetting::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAINotificationSetting::is_level_Set() const{
    return m_level_isSet;
}

bool OAINotificationSetting::is_level_Valid() const{
    return m_level_isValid;
}

bool OAINotificationSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
