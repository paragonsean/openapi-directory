/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunnerDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunnerDetails::OAIRunnerDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunnerDetails::OAIRunnerDetails() {
    this->initializeModel();
}

OAIRunnerDetails::~OAIRunnerDetails() {}

void OAIRunnerDetails::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_contacted_at_isSet = false;
    m_contacted_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_shared_isSet = false;
    m_is_shared_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_projects_isSet = false;
    m_projects_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_run_untagged_isSet = false;
    m_run_untagged_isValid = false;

    m_tag_list_isSet = false;
    m_tag_list_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIRunnerDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunnerDetails::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_contacted_at_isValid = ::OpenAPI::fromJsonValue(m_contacted_at, json[QString("contacted_at")]);
    m_contacted_at_isSet = !json[QString("contacted_at")].isNull() && m_contacted_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_shared_isValid = ::OpenAPI::fromJsonValue(m_is_shared, json[QString("is_shared")]);
    m_is_shared_isSet = !json[QString("is_shared")].isNull() && m_is_shared_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_projects_isValid = ::OpenAPI::fromJsonValue(m_projects, json[QString("projects")]);
    m_projects_isSet = !json[QString("projects")].isNull() && m_projects_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_run_untagged_isValid = ::OpenAPI::fromJsonValue(m_run_untagged, json[QString("run_untagged")]);
    m_run_untagged_isSet = !json[QString("run_untagged")].isNull() && m_run_untagged_isValid;

    m_tag_list_isValid = ::OpenAPI::fromJsonValue(m_tag_list, json[QString("tag_list")]);
    m_tag_list_isSet = !json[QString("tag_list")].isNull() && m_tag_list_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIRunnerDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunnerDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_contacted_at_isSet) {
        obj.insert(QString("contacted_at"), ::OpenAPI::toJsonValue(m_contacted_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_shared_isSet) {
        obj.insert(QString("is_shared"), ::OpenAPI::toJsonValue(m_is_shared));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_projects.isSet()) {
        obj.insert(QString("projects"), ::OpenAPI::toJsonValue(m_projects));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_run_untagged_isSet) {
        obj.insert(QString("run_untagged"), ::OpenAPI::toJsonValue(m_run_untagged));
    }
    if (m_tag_list_isSet) {
        obj.insert(QString("tag_list"), ::OpenAPI::toJsonValue(m_tag_list));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIRunnerDetails::getActive() const {
    return m_active;
}
void OAIRunnerDetails::setActive(const QString &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIRunnerDetails::is_active_Set() const{
    return m_active_isSet;
}

bool OAIRunnerDetails::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIRunnerDetails::getArchitecture() const {
    return m_architecture;
}
void OAIRunnerDetails::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIRunnerDetails::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIRunnerDetails::is_architecture_Valid() const{
    return m_architecture_isValid;
}

QString OAIRunnerDetails::getContactedAt() const {
    return m_contacted_at;
}
void OAIRunnerDetails::setContactedAt(const QString &contacted_at) {
    m_contacted_at = contacted_at;
    m_contacted_at_isSet = true;
}

bool OAIRunnerDetails::is_contacted_at_Set() const{
    return m_contacted_at_isSet;
}

bool OAIRunnerDetails::is_contacted_at_Valid() const{
    return m_contacted_at_isValid;
}

QString OAIRunnerDetails::getDescription() const {
    return m_description;
}
void OAIRunnerDetails::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRunnerDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRunnerDetails::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRunnerDetails::getId() const {
    return m_id;
}
void OAIRunnerDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRunnerDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRunnerDetails::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRunnerDetails::getIsShared() const {
    return m_is_shared;
}
void OAIRunnerDetails::setIsShared(const QString &is_shared) {
    m_is_shared = is_shared;
    m_is_shared_isSet = true;
}

bool OAIRunnerDetails::is_is_shared_Set() const{
    return m_is_shared_isSet;
}

bool OAIRunnerDetails::is_is_shared_Valid() const{
    return m_is_shared_isValid;
}

QString OAIRunnerDetails::getLocked() const {
    return m_locked;
}
void OAIRunnerDetails::setLocked(const QString &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIRunnerDetails::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIRunnerDetails::is_locked_Valid() const{
    return m_locked_isValid;
}

QString OAIRunnerDetails::getName() const {
    return m_name;
}
void OAIRunnerDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRunnerDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRunnerDetails::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRunnerDetails::getPlatform() const {
    return m_platform;
}
void OAIRunnerDetails::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIRunnerDetails::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIRunnerDetails::is_platform_Valid() const{
    return m_platform_isValid;
}

OAIBasicProjectDetails OAIRunnerDetails::getProjects() const {
    return m_projects;
}
void OAIRunnerDetails::setProjects(const OAIBasicProjectDetails &projects) {
    m_projects = projects;
    m_projects_isSet = true;
}

bool OAIRunnerDetails::is_projects_Set() const{
    return m_projects_isSet;
}

bool OAIRunnerDetails::is_projects_Valid() const{
    return m_projects_isValid;
}

QString OAIRunnerDetails::getRevision() const {
    return m_revision;
}
void OAIRunnerDetails::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIRunnerDetails::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIRunnerDetails::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIRunnerDetails::getRunUntagged() const {
    return m_run_untagged;
}
void OAIRunnerDetails::setRunUntagged(const QString &run_untagged) {
    m_run_untagged = run_untagged;
    m_run_untagged_isSet = true;
}

bool OAIRunnerDetails::is_run_untagged_Set() const{
    return m_run_untagged_isSet;
}

bool OAIRunnerDetails::is_run_untagged_Valid() const{
    return m_run_untagged_isValid;
}

QString OAIRunnerDetails::getTagList() const {
    return m_tag_list;
}
void OAIRunnerDetails::setTagList(const QString &tag_list) {
    m_tag_list = tag_list;
    m_tag_list_isSet = true;
}

bool OAIRunnerDetails::is_tag_list_Set() const{
    return m_tag_list_isSet;
}

bool OAIRunnerDetails::is_tag_list_Valid() const{
    return m_tag_list_isValid;
}

QString OAIRunnerDetails::getToken() const {
    return m_token;
}
void OAIRunnerDetails::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIRunnerDetails::is_token_Set() const{
    return m_token_isSet;
}

bool OAIRunnerDetails::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIRunnerDetails::getVersion() const {
    return m_version;
}
void OAIRunnerDetails::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIRunnerDetails::is_version_Set() const{
    return m_version_isSet;
}

bool OAIRunnerDetails::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIRunnerDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contacted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_untagged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunnerDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
