/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectStatistics::OAIProjectStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectStatistics::OAIProjectStatistics() {
    this->initializeModel();
}

OAIProjectStatistics::~OAIProjectStatistics() {}

void OAIProjectStatistics::initializeModel() {

    m_build_artifacts_size_isSet = false;
    m_build_artifacts_size_isValid = false;

    m_commit_count_isSet = false;
    m_commit_count_isValid = false;

    m_lfs_objects_size_isSet = false;
    m_lfs_objects_size_isValid = false;

    m_repository_size_isSet = false;
    m_repository_size_isValid = false;

    m_storage_size_isSet = false;
    m_storage_size_isValid = false;
}

void OAIProjectStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectStatistics::fromJsonObject(QJsonObject json) {

    m_build_artifacts_size_isValid = ::OpenAPI::fromJsonValue(m_build_artifacts_size, json[QString("build_artifacts_size")]);
    m_build_artifacts_size_isSet = !json[QString("build_artifacts_size")].isNull() && m_build_artifacts_size_isValid;

    m_commit_count_isValid = ::OpenAPI::fromJsonValue(m_commit_count, json[QString("commit_count")]);
    m_commit_count_isSet = !json[QString("commit_count")].isNull() && m_commit_count_isValid;

    m_lfs_objects_size_isValid = ::OpenAPI::fromJsonValue(m_lfs_objects_size, json[QString("lfs_objects_size")]);
    m_lfs_objects_size_isSet = !json[QString("lfs_objects_size")].isNull() && m_lfs_objects_size_isValid;

    m_repository_size_isValid = ::OpenAPI::fromJsonValue(m_repository_size, json[QString("repository_size")]);
    m_repository_size_isSet = !json[QString("repository_size")].isNull() && m_repository_size_isValid;

    m_storage_size_isValid = ::OpenAPI::fromJsonValue(m_storage_size, json[QString("storage_size")]);
    m_storage_size_isSet = !json[QString("storage_size")].isNull() && m_storage_size_isValid;
}

QString OAIProjectStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_build_artifacts_size_isSet) {
        obj.insert(QString("build_artifacts_size"), ::OpenAPI::toJsonValue(m_build_artifacts_size));
    }
    if (m_commit_count_isSet) {
        obj.insert(QString("commit_count"), ::OpenAPI::toJsonValue(m_commit_count));
    }
    if (m_lfs_objects_size_isSet) {
        obj.insert(QString("lfs_objects_size"), ::OpenAPI::toJsonValue(m_lfs_objects_size));
    }
    if (m_repository_size_isSet) {
        obj.insert(QString("repository_size"), ::OpenAPI::toJsonValue(m_repository_size));
    }
    if (m_storage_size_isSet) {
        obj.insert(QString("storage_size"), ::OpenAPI::toJsonValue(m_storage_size));
    }
    return obj;
}

QString OAIProjectStatistics::getBuildArtifactsSize() const {
    return m_build_artifacts_size;
}
void OAIProjectStatistics::setBuildArtifactsSize(const QString &build_artifacts_size) {
    m_build_artifacts_size = build_artifacts_size;
    m_build_artifacts_size_isSet = true;
}

bool OAIProjectStatistics::is_build_artifacts_size_Set() const{
    return m_build_artifacts_size_isSet;
}

bool OAIProjectStatistics::is_build_artifacts_size_Valid() const{
    return m_build_artifacts_size_isValid;
}

QString OAIProjectStatistics::getCommitCount() const {
    return m_commit_count;
}
void OAIProjectStatistics::setCommitCount(const QString &commit_count) {
    m_commit_count = commit_count;
    m_commit_count_isSet = true;
}

bool OAIProjectStatistics::is_commit_count_Set() const{
    return m_commit_count_isSet;
}

bool OAIProjectStatistics::is_commit_count_Valid() const{
    return m_commit_count_isValid;
}

QString OAIProjectStatistics::getLfsObjectsSize() const {
    return m_lfs_objects_size;
}
void OAIProjectStatistics::setLfsObjectsSize(const QString &lfs_objects_size) {
    m_lfs_objects_size = lfs_objects_size;
    m_lfs_objects_size_isSet = true;
}

bool OAIProjectStatistics::is_lfs_objects_size_Set() const{
    return m_lfs_objects_size_isSet;
}

bool OAIProjectStatistics::is_lfs_objects_size_Valid() const{
    return m_lfs_objects_size_isValid;
}

QString OAIProjectStatistics::getRepositorySize() const {
    return m_repository_size;
}
void OAIProjectStatistics::setRepositorySize(const QString &repository_size) {
    m_repository_size = repository_size;
    m_repository_size_isSet = true;
}

bool OAIProjectStatistics::is_repository_size_Set() const{
    return m_repository_size_isSet;
}

bool OAIProjectStatistics::is_repository_size_Valid() const{
    return m_repository_size_isValid;
}

QString OAIProjectStatistics::getStorageSize() const {
    return m_storage_size;
}
void OAIProjectStatistics::setStorageSize(const QString &storage_size) {
    m_storage_size = storage_size;
    m_storage_size_isSet = true;
}

bool OAIProjectStatistics::is_storage_size_Set() const{
    return m_storage_size_isSet;
}

bool OAIProjectStatistics::is_storage_size_Valid() const{
    return m_storage_size_isValid;
}

bool OAIProjectStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_artifacts_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lfs_objects_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
