/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupsApi_H
#define OAI_OAIGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessRequester.h"
#include "OAIGroup.h"
#include "OAIGroupDetail.h"
#include "OAIIssue.h"
#include "OAIMember.h"
#include "OAINotificationSetting.h"
#include "OAIPostV3GroupsIdMembers_request.h"
#include "OAIPostV3Groups_request.h"
#include "OAIProject.h"
#include "OAIPutV3GroupsIdAccessRequestsUserIdApprove_request.h"
#include "OAIPutV3GroupsIdMembersUserId_request.h"
#include "OAIPutV3GroupsIdNotificationSettings_request.h"
#include "OAIPutV3GroupsId_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIGroupsApi(const int timeOut = 0);
    ~OAIGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteV3GroupsId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id qint32 [required]
    */
    virtual void deleteV3GroupsIdAccessRequestsUserId(const QString &id, const qint32 &user_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id qint32 [required]
    */
    virtual void deleteV3GroupsIdMembersUserId(const QString &id, const qint32 &user_id);

    /**
    * @param[in]  statistics bool [optional]
    * @param[in]  all_available bool [optional]
    * @param[in]  search QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  skip_groups QList<qint32> [optional]
    */
    virtual void getV3Groups(const ::OpenAPI::OptionalParam<bool> &statistics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &all_available = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &skip_groups = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getV3GroupsId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3GroupsIdAccessRequests(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  state QString [optional]
    * @param[in]  labels QString [optional]
    * @param[in]  milestone QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3GroupsIdIssues(const QString &id, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &milestone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  query QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3GroupsIdMembers(const QString &id, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id qint32 [required]
    */
    virtual void getV3GroupsIdMembersUserId(const QString &id, const qint32 &user_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getV3GroupsIdNotificationSettings(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  archived bool [optional]
    * @param[in]  visibility QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  simple bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3GroupsIdProjects(const QString &id, const ::OpenAPI::OptionalParam<bool> &archived = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &visibility = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &simple = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  statistics bool [optional]
    */
    virtual void getV3GroupsOwned(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &statistics = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_post_v3_groups_request OAIPostV3Groups_request [required]
    */
    virtual void postV3Groups(const OAIPostV3Groups_request &oai_post_v3_groups_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void postV3GroupsIdAccessRequests(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_groups_id_members_request OAIPostV3GroupsIdMembers_request [required]
    */
    virtual void postV3GroupsIdMembers(const QString &id, const OAIPostV3GroupsIdMembers_request &oai_post_v3_groups_id_members_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  project_id QString [required]
    */
    virtual void postV3GroupsIdProjectsProjectId(const QString &id, const QString &project_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_put_v3_groups_id_request OAIPutV3GroupsId_request [optional]
    */
    virtual void putV3GroupsId(const QString &id, const ::OpenAPI::OptionalParam<OAIPutV3GroupsId_request> &oai_put_v3_groups_id_request = ::OpenAPI::OptionalParam<OAIPutV3GroupsId_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id qint32 [required]
    * @param[in]  oai_put_v3_groups_id_access_requests_user_id_approve_request OAIPutV3GroupsIdAccessRequestsUserIdApprove_request [optional]
    */
    virtual void putV3GroupsIdAccessRequestsUserIdApprove(const QString &id, const qint32 &user_id, const ::OpenAPI::OptionalParam<OAIPutV3GroupsIdAccessRequestsUserIdApprove_request> &oai_put_v3_groups_id_access_requests_user_id_approve_request = ::OpenAPI::OptionalParam<OAIPutV3GroupsIdAccessRequestsUserIdApprove_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id qint32 [required]
    * @param[in]  oai_put_v3_groups_id_members_user_id_request OAIPutV3GroupsIdMembersUserId_request [required]
    */
    virtual void putV3GroupsIdMembersUserId(const QString &id, const qint32 &user_id, const OAIPutV3GroupsIdMembersUserId_request &oai_put_v3_groups_id_members_user_id_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_put_v3_groups_id_notification_settings_request OAIPutV3GroupsIdNotificationSettings_request [optional]
    */
    virtual void putV3GroupsIdNotificationSettings(const QString &id, const ::OpenAPI::OptionalParam<OAIPutV3GroupsIdNotificationSettings_request> &oai_put_v3_groups_id_notification_settings_request = ::OpenAPI::OptionalParam<OAIPutV3GroupsIdNotificationSettings_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteV3GroupsIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3GroupsIdAccessRequestsUserIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3GroupsIdMembersUserIdCallback(OAIHttpRequestWorker *worker);
    void getV3GroupsCallback(OAIHttpRequestWorker *worker);
    void getV3GroupsIdCallback(OAIHttpRequestWorker *worker);
    void getV3GroupsIdAccessRequestsCallback(OAIHttpRequestWorker *worker);
    void getV3GroupsIdIssuesCallback(OAIHttpRequestWorker *worker);
    void getV3GroupsIdMembersCallback(OAIHttpRequestWorker *worker);
    void getV3GroupsIdMembersUserIdCallback(OAIHttpRequestWorker *worker);
    void getV3GroupsIdNotificationSettingsCallback(OAIHttpRequestWorker *worker);
    void getV3GroupsIdProjectsCallback(OAIHttpRequestWorker *worker);
    void getV3GroupsOwnedCallback(OAIHttpRequestWorker *worker);
    void postV3GroupsCallback(OAIHttpRequestWorker *worker);
    void postV3GroupsIdAccessRequestsCallback(OAIHttpRequestWorker *worker);
    void postV3GroupsIdMembersCallback(OAIHttpRequestWorker *worker);
    void postV3GroupsIdProjectsProjectIdCallback(OAIHttpRequestWorker *worker);
    void putV3GroupsIdCallback(OAIHttpRequestWorker *worker);
    void putV3GroupsIdAccessRequestsUserIdApproveCallback(OAIHttpRequestWorker *worker);
    void putV3GroupsIdMembersUserIdCallback(OAIHttpRequestWorker *worker);
    void putV3GroupsIdNotificationSettingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteV3GroupsIdSignal();
    void deleteV3GroupsIdAccessRequestsUserIdSignal();
    void deleteV3GroupsIdMembersUserIdSignal();
    void getV3GroupsSignal(OAIGroup summary);
    void getV3GroupsIdSignal(OAIGroupDetail summary);
    void getV3GroupsIdAccessRequestsSignal(OAIAccessRequester summary);
    void getV3GroupsIdIssuesSignal(OAIIssue summary);
    void getV3GroupsIdMembersSignal(OAIMember summary);
    void getV3GroupsIdMembersUserIdSignal(OAIMember summary);
    void getV3GroupsIdNotificationSettingsSignal(OAINotificationSetting summary);
    void getV3GroupsIdProjectsSignal(OAIProject summary);
    void getV3GroupsOwnedSignal(OAIGroup summary);
    void postV3GroupsSignal(OAIGroup summary);
    void postV3GroupsIdAccessRequestsSignal(OAIAccessRequester summary);
    void postV3GroupsIdMembersSignal(OAIMember summary);
    void postV3GroupsIdProjectsProjectIdSignal(OAIGroupDetail summary);
    void putV3GroupsIdSignal(OAIGroup summary);
    void putV3GroupsIdAccessRequestsUserIdApproveSignal(OAIMember summary);
    void putV3GroupsIdMembersUserIdSignal(OAIMember summary);
    void putV3GroupsIdNotificationSettingsSignal(OAINotificationSetting summary);


    void deleteV3GroupsIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteV3GroupsIdAccessRequestsUserIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteV3GroupsIdMembersUserIdSignalFull(OAIHttpRequestWorker *worker);
    void getV3GroupsSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void getV3GroupsIdSignalFull(OAIHttpRequestWorker *worker, OAIGroupDetail summary);
    void getV3GroupsIdAccessRequestsSignalFull(OAIHttpRequestWorker *worker, OAIAccessRequester summary);
    void getV3GroupsIdIssuesSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void getV3GroupsIdMembersSignalFull(OAIHttpRequestWorker *worker, OAIMember summary);
    void getV3GroupsIdMembersUserIdSignalFull(OAIHttpRequestWorker *worker, OAIMember summary);
    void getV3GroupsIdNotificationSettingsSignalFull(OAIHttpRequestWorker *worker, OAINotificationSetting summary);
    void getV3GroupsIdProjectsSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void getV3GroupsOwnedSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void postV3GroupsSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void postV3GroupsIdAccessRequestsSignalFull(OAIHttpRequestWorker *worker, OAIAccessRequester summary);
    void postV3GroupsIdMembersSignalFull(OAIHttpRequestWorker *worker, OAIMember summary);
    void postV3GroupsIdProjectsProjectIdSignalFull(OAIHttpRequestWorker *worker, OAIGroupDetail summary);
    void putV3GroupsIdSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void putV3GroupsIdAccessRequestsUserIdApproveSignalFull(OAIHttpRequestWorker *worker, OAIMember summary);
    void putV3GroupsIdMembersUserIdSignalFull(OAIHttpRequestWorker *worker, OAIMember summary);
    void putV3GroupsIdNotificationSettingsSignalFull(OAIHttpRequestWorker *worker, OAINotificationSetting summary);

    Q_DECL_DEPRECATED_X("Use deleteV3GroupsIdSignalError() instead")
    void deleteV3GroupsIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3GroupsIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3GroupsIdAccessRequestsUserIdSignalError() instead")
    void deleteV3GroupsIdAccessRequestsUserIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3GroupsIdAccessRequestsUserIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3GroupsIdMembersUserIdSignalError() instead")
    void deleteV3GroupsIdMembersUserIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3GroupsIdMembersUserIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsSignalError() instead")
    void getV3GroupsSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsIdSignalError() instead")
    void getV3GroupsIdSignalE(OAIGroupDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsIdSignalError(OAIGroupDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsIdAccessRequestsSignalError() instead")
    void getV3GroupsIdAccessRequestsSignalE(OAIAccessRequester summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsIdAccessRequestsSignalError(OAIAccessRequester summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsIdIssuesSignalError() instead")
    void getV3GroupsIdIssuesSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsIdIssuesSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsIdMembersSignalError() instead")
    void getV3GroupsIdMembersSignalE(OAIMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsIdMembersSignalError(OAIMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsIdMembersUserIdSignalError() instead")
    void getV3GroupsIdMembersUserIdSignalE(OAIMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsIdMembersUserIdSignalError(OAIMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsIdNotificationSettingsSignalError() instead")
    void getV3GroupsIdNotificationSettingsSignalE(OAINotificationSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsIdNotificationSettingsSignalError(OAINotificationSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsIdProjectsSignalError() instead")
    void getV3GroupsIdProjectsSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsIdProjectsSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsOwnedSignalError() instead")
    void getV3GroupsOwnedSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsOwnedSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3GroupsSignalError() instead")
    void postV3GroupsSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3GroupsSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3GroupsIdAccessRequestsSignalError() instead")
    void postV3GroupsIdAccessRequestsSignalE(OAIAccessRequester summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3GroupsIdAccessRequestsSignalError(OAIAccessRequester summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3GroupsIdMembersSignalError() instead")
    void postV3GroupsIdMembersSignalE(OAIMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3GroupsIdMembersSignalError(OAIMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3GroupsIdProjectsProjectIdSignalError() instead")
    void postV3GroupsIdProjectsProjectIdSignalE(OAIGroupDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3GroupsIdProjectsProjectIdSignalError(OAIGroupDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3GroupsIdSignalError() instead")
    void putV3GroupsIdSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3GroupsIdSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3GroupsIdAccessRequestsUserIdApproveSignalError() instead")
    void putV3GroupsIdAccessRequestsUserIdApproveSignalE(OAIMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3GroupsIdAccessRequestsUserIdApproveSignalError(OAIMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3GroupsIdMembersUserIdSignalError() instead")
    void putV3GroupsIdMembersUserIdSignalE(OAIMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3GroupsIdMembersUserIdSignalError(OAIMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3GroupsIdNotificationSettingsSignalError() instead")
    void putV3GroupsIdNotificationSettingsSignalE(OAINotificationSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3GroupsIdNotificationSettingsSignalError(OAINotificationSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteV3GroupsIdSignalErrorFull() instead")
    void deleteV3GroupsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3GroupsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3GroupsIdAccessRequestsUserIdSignalErrorFull() instead")
    void deleteV3GroupsIdAccessRequestsUserIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3GroupsIdAccessRequestsUserIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3GroupsIdMembersUserIdSignalErrorFull() instead")
    void deleteV3GroupsIdMembersUserIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3GroupsIdMembersUserIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsSignalErrorFull() instead")
    void getV3GroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsIdSignalErrorFull() instead")
    void getV3GroupsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsIdAccessRequestsSignalErrorFull() instead")
    void getV3GroupsIdAccessRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsIdAccessRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsIdIssuesSignalErrorFull() instead")
    void getV3GroupsIdIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsIdIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsIdMembersSignalErrorFull() instead")
    void getV3GroupsIdMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsIdMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsIdMembersUserIdSignalErrorFull() instead")
    void getV3GroupsIdMembersUserIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsIdMembersUserIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsIdNotificationSettingsSignalErrorFull() instead")
    void getV3GroupsIdNotificationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsIdNotificationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsIdProjectsSignalErrorFull() instead")
    void getV3GroupsIdProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsIdProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3GroupsOwnedSignalErrorFull() instead")
    void getV3GroupsOwnedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3GroupsOwnedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3GroupsSignalErrorFull() instead")
    void postV3GroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3GroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3GroupsIdAccessRequestsSignalErrorFull() instead")
    void postV3GroupsIdAccessRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3GroupsIdAccessRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3GroupsIdMembersSignalErrorFull() instead")
    void postV3GroupsIdMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3GroupsIdMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3GroupsIdProjectsProjectIdSignalErrorFull() instead")
    void postV3GroupsIdProjectsProjectIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3GroupsIdProjectsProjectIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3GroupsIdSignalErrorFull() instead")
    void putV3GroupsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3GroupsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3GroupsIdAccessRequestsUserIdApproveSignalErrorFull() instead")
    void putV3GroupsIdAccessRequestsUserIdApproveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3GroupsIdAccessRequestsUserIdApproveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3GroupsIdMembersUserIdSignalErrorFull() instead")
    void putV3GroupsIdMembersUserIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3GroupsIdMembersUserIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3GroupsIdNotificationSettingsSignalErrorFull() instead")
    void putV3GroupsIdNotificationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3GroupsIdNotificationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
