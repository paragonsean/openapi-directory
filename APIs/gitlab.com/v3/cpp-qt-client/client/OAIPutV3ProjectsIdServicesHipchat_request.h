/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutV3ProjectsIdServicesHipchat_request.h
 *
 * 
 */

#ifndef OAIPutV3ProjectsIdServicesHipchat_request_H
#define OAIPutV3ProjectsIdServicesHipchat_request_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPutV3ProjectsIdServicesHipchat_request : public OAIObject {
public:
    OAIPutV3ProjectsIdServicesHipchat_request();
    OAIPutV3ProjectsIdServicesHipchat_request(QString json);
    ~OAIPutV3ProjectsIdServicesHipchat_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getToken() const;
    void setToken(const QString &token);
    bool is_token_Set() const;
    bool is_token_Valid() const;

    QString getRoom() const;
    void setRoom(const QString &room);
    bool is_room_Set() const;
    bool is_room_Valid() const;

    QString getColor() const;
    void setColor(const QString &color);
    bool is_color_Set() const;
    bool is_color_Valid() const;

    bool isNotify() const;
    void setNotify(const bool &notify);
    bool is_notify_Set() const;
    bool is_notify_Valid() const;

    QString getApiVersion() const;
    void setApiVersion(const QString &api_version);
    bool is_api_version_Set() const;
    bool is_api_version_Valid() const;

    QString getServer() const;
    void setServer(const QString &server);
    bool is_server_Set() const;
    bool is_server_Valid() const;

    QString getPushEvents() const;
    void setPushEvents(const QString &push_events);
    bool is_push_events_Set() const;
    bool is_push_events_Valid() const;

    QString getIssueEvents() const;
    void setIssueEvents(const QString &issue_events);
    bool is_issue_events_Set() const;
    bool is_issue_events_Valid() const;

    QString getConfidentialIssueEvents() const;
    void setConfidentialIssueEvents(const QString &confidential_issue_events);
    bool is_confidential_issue_events_Set() const;
    bool is_confidential_issue_events_Valid() const;

    QString getMergeRequestEvents() const;
    void setMergeRequestEvents(const QString &merge_request_events);
    bool is_merge_request_events_Set() const;
    bool is_merge_request_events_Valid() const;

    QString getNoteEvents() const;
    void setNoteEvents(const QString &note_events);
    bool is_note_events_Set() const;
    bool is_note_events_Valid() const;

    QString getTagPushEvents() const;
    void setTagPushEvents(const QString &tag_push_events);
    bool is_tag_push_events_Set() const;
    bool is_tag_push_events_Valid() const;

    QString getBuildEvents() const;
    void setBuildEvents(const QString &build_events);
    bool is_build_events_Set() const;
    bool is_build_events_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_token;
    bool m_token_isSet;
    bool m_token_isValid;

    QString m_room;
    bool m_room_isSet;
    bool m_room_isValid;

    QString m_color;
    bool m_color_isSet;
    bool m_color_isValid;

    bool m_notify;
    bool m_notify_isSet;
    bool m_notify_isValid;

    QString m_api_version;
    bool m_api_version_isSet;
    bool m_api_version_isValid;

    QString m_server;
    bool m_server_isSet;
    bool m_server_isValid;

    QString m_push_events;
    bool m_push_events_isSet;
    bool m_push_events_isValid;

    QString m_issue_events;
    bool m_issue_events_isSet;
    bool m_issue_events_isValid;

    QString m_confidential_issue_events;
    bool m_confidential_issue_events_isSet;
    bool m_confidential_issue_events_isValid;

    QString m_merge_request_events;
    bool m_merge_request_events_isSet;
    bool m_merge_request_events_isValid;

    QString m_note_events;
    bool m_note_events_isSet;
    bool m_note_events_isValid;

    QString m_tag_push_events;
    bool m_tag_push_events_isSet;
    bool m_tag_push_events_isValid;

    QString m_build_events;
    bool m_build_events_isSet;
    bool m_build_events_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutV3ProjectsIdServicesHipchat_request)

#endif // OAIPutV3ProjectsIdServicesHipchat_request_H
