/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3ProjectsIdServicesJira_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3ProjectsIdServicesJira_request::OAIPutV3ProjectsIdServicesJira_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3ProjectsIdServicesJira_request::OAIPutV3ProjectsIdServicesJira_request() {
    this->initializeModel();
}

OAIPutV3ProjectsIdServicesJira_request::~OAIPutV3ProjectsIdServicesJira_request() {}

void OAIPutV3ProjectsIdServicesJira_request::initializeModel() {

    m_url_isSet = false;
    m_url_isValid = false;

    m_project_key_isSet = false;
    m_project_key_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_jira_issue_transition_id_isSet = false;
    m_jira_issue_transition_id_isValid = false;

    m_commit_events_isSet = false;
    m_commit_events_isValid = false;

    m_merge_request_events_isSet = false;
    m_merge_request_events_isValid = false;
}

void OAIPutV3ProjectsIdServicesJira_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3ProjectsIdServicesJira_request::fromJsonObject(QJsonObject json) {

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_project_key_isValid = ::OpenAPI::fromJsonValue(m_project_key, json[QString("project_key")]);
    m_project_key_isSet = !json[QString("project_key")].isNull() && m_project_key_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_jira_issue_transition_id_isValid = ::OpenAPI::fromJsonValue(m_jira_issue_transition_id, json[QString("jira_issue_transition_id")]);
    m_jira_issue_transition_id_isSet = !json[QString("jira_issue_transition_id")].isNull() && m_jira_issue_transition_id_isValid;

    m_commit_events_isValid = ::OpenAPI::fromJsonValue(m_commit_events, json[QString("commit_events")]);
    m_commit_events_isSet = !json[QString("commit_events")].isNull() && m_commit_events_isValid;

    m_merge_request_events_isValid = ::OpenAPI::fromJsonValue(m_merge_request_events, json[QString("merge_request_events")]);
    m_merge_request_events_isSet = !json[QString("merge_request_events")].isNull() && m_merge_request_events_isValid;
}

QString OAIPutV3ProjectsIdServicesJira_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3ProjectsIdServicesJira_request::asJsonObject() const {
    QJsonObject obj;
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_project_key_isSet) {
        obj.insert(QString("project_key"), ::OpenAPI::toJsonValue(m_project_key));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_jira_issue_transition_id_isSet) {
        obj.insert(QString("jira_issue_transition_id"), ::OpenAPI::toJsonValue(m_jira_issue_transition_id));
    }
    if (m_commit_events_isSet) {
        obj.insert(QString("commit_events"), ::OpenAPI::toJsonValue(m_commit_events));
    }
    if (m_merge_request_events_isSet) {
        obj.insert(QString("merge_request_events"), ::OpenAPI::toJsonValue(m_merge_request_events));
    }
    return obj;
}

QString OAIPutV3ProjectsIdServicesJira_request::getUrl() const {
    return m_url;
}
void OAIPutV3ProjectsIdServicesJira_request::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPutV3ProjectsIdServicesJira_request::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPutV3ProjectsIdServicesJira_request::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIPutV3ProjectsIdServicesJira_request::getProjectKey() const {
    return m_project_key;
}
void OAIPutV3ProjectsIdServicesJira_request::setProjectKey(const QString &project_key) {
    m_project_key = project_key;
    m_project_key_isSet = true;
}

bool OAIPutV3ProjectsIdServicesJira_request::is_project_key_Set() const{
    return m_project_key_isSet;
}

bool OAIPutV3ProjectsIdServicesJira_request::is_project_key_Valid() const{
    return m_project_key_isValid;
}

QString OAIPutV3ProjectsIdServicesJira_request::getUsername() const {
    return m_username;
}
void OAIPutV3ProjectsIdServicesJira_request::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIPutV3ProjectsIdServicesJira_request::is_username_Set() const{
    return m_username_isSet;
}

bool OAIPutV3ProjectsIdServicesJira_request::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIPutV3ProjectsIdServicesJira_request::getPassword() const {
    return m_password;
}
void OAIPutV3ProjectsIdServicesJira_request::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIPutV3ProjectsIdServicesJira_request::is_password_Set() const{
    return m_password_isSet;
}

bool OAIPutV3ProjectsIdServicesJira_request::is_password_Valid() const{
    return m_password_isValid;
}

qint32 OAIPutV3ProjectsIdServicesJira_request::getJiraIssueTransitionId() const {
    return m_jira_issue_transition_id;
}
void OAIPutV3ProjectsIdServicesJira_request::setJiraIssueTransitionId(const qint32 &jira_issue_transition_id) {
    m_jira_issue_transition_id = jira_issue_transition_id;
    m_jira_issue_transition_id_isSet = true;
}

bool OAIPutV3ProjectsIdServicesJira_request::is_jira_issue_transition_id_Set() const{
    return m_jira_issue_transition_id_isSet;
}

bool OAIPutV3ProjectsIdServicesJira_request::is_jira_issue_transition_id_Valid() const{
    return m_jira_issue_transition_id_isValid;
}

QString OAIPutV3ProjectsIdServicesJira_request::getCommitEvents() const {
    return m_commit_events;
}
void OAIPutV3ProjectsIdServicesJira_request::setCommitEvents(const QString &commit_events) {
    m_commit_events = commit_events;
    m_commit_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesJira_request::is_commit_events_Set() const{
    return m_commit_events_isSet;
}

bool OAIPutV3ProjectsIdServicesJira_request::is_commit_events_Valid() const{
    return m_commit_events_isValid;
}

QString OAIPutV3ProjectsIdServicesJira_request::getMergeRequestEvents() const {
    return m_merge_request_events;
}
void OAIPutV3ProjectsIdServicesJira_request::setMergeRequestEvents(const QString &merge_request_events) {
    m_merge_request_events = merge_request_events;
    m_merge_request_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesJira_request::is_merge_request_events_Set() const{
    return m_merge_request_events_isSet;
}

bool OAIPutV3ProjectsIdServicesJira_request::is_merge_request_events_Valid() const{
    return m_merge_request_events_isValid;
}

bool OAIPutV3ProjectsIdServicesJira_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jira_issue_transition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_request_events_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3ProjectsIdServicesJira_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && m_project_key_isValid && true;
}

} // namespace OpenAPI
