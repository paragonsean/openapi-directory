/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepoLicense.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepoLicense::OAIRepoLicense(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepoLicense::OAIRepoLicense() {
    this->initializeModel();
}

OAIRepoLicense::~OAIRepoLicense() {}

void OAIRepoLicense::initializeModel() {

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_limitations_isSet = false;
    m_limitations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_popular_isSet = false;
    m_popular_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;
}

void OAIRepoLicense::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepoLicense::fromJsonObject(QJsonObject json) {

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_limitations_isValid = ::OpenAPI::fromJsonValue(m_limitations, json[QString("limitations")]);
    m_limitations_isSet = !json[QString("limitations")].isNull() && m_limitations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_popular_isValid = ::OpenAPI::fromJsonValue(m_popular, json[QString("popular")]);
    m_popular_isSet = !json[QString("popular")].isNull() && m_popular_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("source_url")]);
    m_source_url_isSet = !json[QString("source_url")].isNull() && m_source_url_isValid;
}

QString OAIRepoLicense::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepoLicense::asJsonObject() const {
    QJsonObject obj;
    if (m_conditions_isSet) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_limitations_isSet) {
        obj.insert(QString("limitations"), ::OpenAPI::toJsonValue(m_limitations));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_permissions_isSet) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_popular_isSet) {
        obj.insert(QString("popular"), ::OpenAPI::toJsonValue(m_popular));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("source_url"), ::OpenAPI::toJsonValue(m_source_url));
    }
    return obj;
}

QString OAIRepoLicense::getConditions() const {
    return m_conditions;
}
void OAIRepoLicense::setConditions(const QString &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIRepoLicense::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIRepoLicense::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAIRepoLicense::getContent() const {
    return m_content;
}
void OAIRepoLicense::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIRepoLicense::is_content_Set() const{
    return m_content_isSet;
}

bool OAIRepoLicense::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIRepoLicense::getDescription() const {
    return m_description;
}
void OAIRepoLicense::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRepoLicense::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRepoLicense::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRepoLicense::getHtmlUrl() const {
    return m_html_url;
}
void OAIRepoLicense::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIRepoLicense::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIRepoLicense::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QString OAIRepoLicense::getKey() const {
    return m_key;
}
void OAIRepoLicense::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIRepoLicense::is_key_Set() const{
    return m_key_isSet;
}

bool OAIRepoLicense::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIRepoLicense::getLimitations() const {
    return m_limitations;
}
void OAIRepoLicense::setLimitations(const QString &limitations) {
    m_limitations = limitations;
    m_limitations_isSet = true;
}

bool OAIRepoLicense::is_limitations_Set() const{
    return m_limitations_isSet;
}

bool OAIRepoLicense::is_limitations_Valid() const{
    return m_limitations_isValid;
}

QString OAIRepoLicense::getName() const {
    return m_name;
}
void OAIRepoLicense::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRepoLicense::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRepoLicense::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRepoLicense::getNickname() const {
    return m_nickname;
}
void OAIRepoLicense::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAIRepoLicense::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAIRepoLicense::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QString OAIRepoLicense::getPermissions() const {
    return m_permissions;
}
void OAIRepoLicense::setPermissions(const QString &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIRepoLicense::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIRepoLicense::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIRepoLicense::getPopular() const {
    return m_popular;
}
void OAIRepoLicense::setPopular(const QString &popular) {
    m_popular = popular;
    m_popular_isSet = true;
}

bool OAIRepoLicense::is_popular_Set() const{
    return m_popular_isSet;
}

bool OAIRepoLicense::is_popular_Valid() const{
    return m_popular_isValid;
}

QString OAIRepoLicense::getSourceUrl() const {
    return m_source_url;
}
void OAIRepoLicense::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIRepoLicense::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIRepoLicense::is_source_url_Valid() const{
    return m_source_url_isValid;
}

bool OAIRepoLicense::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conditions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limitations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_popular_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepoLicense::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
