/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepoBranch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepoBranch::OAIRepoBranch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepoBranch::OAIRepoBranch() {
    this->initializeModel();
}

OAIRepoBranch::~OAIRepoBranch() {}

void OAIRepoBranch::initializeModel() {

    m_commit_isSet = false;
    m_commit_isValid = false;

    m_developers_can_merge_isSet = false;
    m_developers_can_merge_isValid = false;

    m_developers_can_push_isSet = false;
    m_developers_can_push_isValid = false;

    m_merged_isSet = false;
    m_merged_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_protected_isSet = false;
    m_r_protected_isValid = false;
}

void OAIRepoBranch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepoBranch::fromJsonObject(QJsonObject json) {

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;

    m_developers_can_merge_isValid = ::OpenAPI::fromJsonValue(m_developers_can_merge, json[QString("developers_can_merge")]);
    m_developers_can_merge_isSet = !json[QString("developers_can_merge")].isNull() && m_developers_can_merge_isValid;

    m_developers_can_push_isValid = ::OpenAPI::fromJsonValue(m_developers_can_push, json[QString("developers_can_push")]);
    m_developers_can_push_isSet = !json[QString("developers_can_push")].isNull() && m_developers_can_push_isValid;

    m_merged_isValid = ::OpenAPI::fromJsonValue(m_merged, json[QString("merged")]);
    m_merged_isSet = !json[QString("merged")].isNull() && m_merged_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_protected_isValid = ::OpenAPI::fromJsonValue(m_r_protected, json[QString("protected")]);
    m_r_protected_isSet = !json[QString("protected")].isNull() && m_r_protected_isValid;
}

QString OAIRepoBranch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepoBranch::asJsonObject() const {
    QJsonObject obj;
    if (m_commit_isSet) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    if (m_developers_can_merge_isSet) {
        obj.insert(QString("developers_can_merge"), ::OpenAPI::toJsonValue(m_developers_can_merge));
    }
    if (m_developers_can_push_isSet) {
        obj.insert(QString("developers_can_push"), ::OpenAPI::toJsonValue(m_developers_can_push));
    }
    if (m_merged_isSet) {
        obj.insert(QString("merged"), ::OpenAPI::toJsonValue(m_merged));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_protected_isSet) {
        obj.insert(QString("protected"), ::OpenAPI::toJsonValue(m_r_protected));
    }
    return obj;
}

QString OAIRepoBranch::getCommit() const {
    return m_commit;
}
void OAIRepoBranch::setCommit(const QString &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAIRepoBranch::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAIRepoBranch::is_commit_Valid() const{
    return m_commit_isValid;
}

QString OAIRepoBranch::getDevelopersCanMerge() const {
    return m_developers_can_merge;
}
void OAIRepoBranch::setDevelopersCanMerge(const QString &developers_can_merge) {
    m_developers_can_merge = developers_can_merge;
    m_developers_can_merge_isSet = true;
}

bool OAIRepoBranch::is_developers_can_merge_Set() const{
    return m_developers_can_merge_isSet;
}

bool OAIRepoBranch::is_developers_can_merge_Valid() const{
    return m_developers_can_merge_isValid;
}

QString OAIRepoBranch::getDevelopersCanPush() const {
    return m_developers_can_push;
}
void OAIRepoBranch::setDevelopersCanPush(const QString &developers_can_push) {
    m_developers_can_push = developers_can_push;
    m_developers_can_push_isSet = true;
}

bool OAIRepoBranch::is_developers_can_push_Set() const{
    return m_developers_can_push_isSet;
}

bool OAIRepoBranch::is_developers_can_push_Valid() const{
    return m_developers_can_push_isValid;
}

QString OAIRepoBranch::getMerged() const {
    return m_merged;
}
void OAIRepoBranch::setMerged(const QString &merged) {
    m_merged = merged;
    m_merged_isSet = true;
}

bool OAIRepoBranch::is_merged_Set() const{
    return m_merged_isSet;
}

bool OAIRepoBranch::is_merged_Valid() const{
    return m_merged_isValid;
}

QString OAIRepoBranch::getName() const {
    return m_name;
}
void OAIRepoBranch::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRepoBranch::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRepoBranch::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRepoBranch::getRProtected() const {
    return m_r_protected;
}
void OAIRepoBranch::setRProtected(const QString &r_protected) {
    m_r_protected = r_protected;
    m_r_protected_isSet = true;
}

bool OAIRepoBranch::is_r_protected_Set() const{
    return m_r_protected_isSet;
}

bool OAIRepoBranch::is_r_protected_Valid() const{
    return m_r_protected_isValid;
}

bool OAIRepoBranch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developers_can_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developers_can_push_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_protected_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepoBranch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
