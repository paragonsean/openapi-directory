/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINote::OAINote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINote::OAINote() {
    this->initializeModel();
}

OAINote::~OAINote() {}

void OAINote::initializeModel() {

    m_attachment_isSet = false;
    m_attachment_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_downvote_isSet = false;
    m_downvote_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_noteable_id_isSet = false;
    m_noteable_id_isValid = false;

    m_noteable_type_isSet = false;
    m_noteable_type_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_upvote_isSet = false;
    m_upvote_isValid = false;
}

void OAINote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINote::fromJsonObject(QJsonObject json) {

    m_attachment_isValid = ::OpenAPI::fromJsonValue(m_attachment, json[QString("attachment")]);
    m_attachment_isSet = !json[QString("attachment")].isNull() && m_attachment_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_downvote_isValid = ::OpenAPI::fromJsonValue(m_downvote, json[QString("downvote?")]);
    m_downvote_isSet = !json[QString("downvote?")].isNull() && m_downvote_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_noteable_id_isValid = ::OpenAPI::fromJsonValue(m_noteable_id, json[QString("noteable_id")]);
    m_noteable_id_isSet = !json[QString("noteable_id")].isNull() && m_noteable_id_isValid;

    m_noteable_type_isValid = ::OpenAPI::fromJsonValue(m_noteable_type, json[QString("noteable_type")]);
    m_noteable_type_isSet = !json[QString("noteable_type")].isNull() && m_noteable_type_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("system")]);
    m_system_isSet = !json[QString("system")].isNull() && m_system_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_upvote_isValid = ::OpenAPI::fromJsonValue(m_upvote, json[QString("upvote?")]);
    m_upvote_isSet = !json[QString("upvote?")].isNull() && m_upvote_isValid;
}

QString OAINote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINote::asJsonObject() const {
    QJsonObject obj;
    if (m_attachment_isSet) {
        obj.insert(QString("attachment"), ::OpenAPI::toJsonValue(m_attachment));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_downvote_isSet) {
        obj.insert(QString("downvote?"), ::OpenAPI::toJsonValue(m_downvote));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_noteable_id_isSet) {
        obj.insert(QString("noteable_id"), ::OpenAPI::toJsonValue(m_noteable_id));
    }
    if (m_noteable_type_isSet) {
        obj.insert(QString("noteable_type"), ::OpenAPI::toJsonValue(m_noteable_type));
    }
    if (m_system_isSet) {
        obj.insert(QString("system"), ::OpenAPI::toJsonValue(m_system));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_upvote_isSet) {
        obj.insert(QString("upvote?"), ::OpenAPI::toJsonValue(m_upvote));
    }
    return obj;
}

QString OAINote::getAttachment() const {
    return m_attachment;
}
void OAINote::setAttachment(const QString &attachment) {
    m_attachment = attachment;
    m_attachment_isSet = true;
}

bool OAINote::is_attachment_Set() const{
    return m_attachment_isSet;
}

bool OAINote::is_attachment_Valid() const{
    return m_attachment_isValid;
}

OAIUserBasic OAINote::getAuthor() const {
    return m_author;
}
void OAINote::setAuthor(const OAIUserBasic &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAINote::is_author_Set() const{
    return m_author_isSet;
}

bool OAINote::is_author_Valid() const{
    return m_author_isValid;
}

QString OAINote::getBody() const {
    return m_body;
}
void OAINote::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAINote::is_body_Set() const{
    return m_body_isSet;
}

bool OAINote::is_body_Valid() const{
    return m_body_isValid;
}

QString OAINote::getCreatedAt() const {
    return m_created_at;
}
void OAINote::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAINote::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAINote::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAINote::getDownvote() const {
    return m_downvote;
}
void OAINote::setDownvote(const QString &downvote) {
    m_downvote = downvote;
    m_downvote_isSet = true;
}

bool OAINote::is_downvote_Set() const{
    return m_downvote_isSet;
}

bool OAINote::is_downvote_Valid() const{
    return m_downvote_isValid;
}

QString OAINote::getId() const {
    return m_id;
}
void OAINote::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINote::is_id_Set() const{
    return m_id_isSet;
}

bool OAINote::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINote::getNoteableId() const {
    return m_noteable_id;
}
void OAINote::setNoteableId(const QString &noteable_id) {
    m_noteable_id = noteable_id;
    m_noteable_id_isSet = true;
}

bool OAINote::is_noteable_id_Set() const{
    return m_noteable_id_isSet;
}

bool OAINote::is_noteable_id_Valid() const{
    return m_noteable_id_isValid;
}

QString OAINote::getNoteableType() const {
    return m_noteable_type;
}
void OAINote::setNoteableType(const QString &noteable_type) {
    m_noteable_type = noteable_type;
    m_noteable_type_isSet = true;
}

bool OAINote::is_noteable_type_Set() const{
    return m_noteable_type_isSet;
}

bool OAINote::is_noteable_type_Valid() const{
    return m_noteable_type_isValid;
}

QString OAINote::getSystem() const {
    return m_system;
}
void OAINote::setSystem(const QString &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAINote::is_system_Set() const{
    return m_system_isSet;
}

bool OAINote::is_system_Valid() const{
    return m_system_isValid;
}

QString OAINote::getUpdatedAt() const {
    return m_updated_at;
}
void OAINote::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAINote::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAINote::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAINote::getUpvote() const {
    return m_upvote;
}
void OAINote::setUpvote(const QString &upvote) {
    m_upvote = upvote;
    m_upvote_isSet = true;
}

bool OAINote::is_upvote_Set() const{
    return m_upvote_isSet;
}

bool OAINote::is_upvote_Valid() const{
    return m_upvote_isValid;
}

bool OAINote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downvote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_noteable_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_noteable_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upvote_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
