/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostV3Hooks_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostV3Hooks_request::OAIPostV3Hooks_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostV3Hooks_request::OAIPostV3Hooks_request() {
    this->initializeModel();
}

OAIPostV3Hooks_request::~OAIPostV3Hooks_request() {}

void OAIPostV3Hooks_request::initializeModel() {

    m_url_isSet = false;
    m_url_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_push_events_isSet = false;
    m_push_events_isValid = false;

    m_tag_push_events_isSet = false;
    m_tag_push_events_isValid = false;

    m_enable_ssl_verification_isSet = false;
    m_enable_ssl_verification_isValid = false;
}

void OAIPostV3Hooks_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostV3Hooks_request::fromJsonObject(QJsonObject json) {

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_push_events_isValid = ::OpenAPI::fromJsonValue(m_push_events, json[QString("push_events")]);
    m_push_events_isSet = !json[QString("push_events")].isNull() && m_push_events_isValid;

    m_tag_push_events_isValid = ::OpenAPI::fromJsonValue(m_tag_push_events, json[QString("tag_push_events")]);
    m_tag_push_events_isSet = !json[QString("tag_push_events")].isNull() && m_tag_push_events_isValid;

    m_enable_ssl_verification_isValid = ::OpenAPI::fromJsonValue(m_enable_ssl_verification, json[QString("enable_ssl_verification")]);
    m_enable_ssl_verification_isSet = !json[QString("enable_ssl_verification")].isNull() && m_enable_ssl_verification_isValid;
}

QString OAIPostV3Hooks_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostV3Hooks_request::asJsonObject() const {
    QJsonObject obj;
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_push_events_isSet) {
        obj.insert(QString("push_events"), ::OpenAPI::toJsonValue(m_push_events));
    }
    if (m_tag_push_events_isSet) {
        obj.insert(QString("tag_push_events"), ::OpenAPI::toJsonValue(m_tag_push_events));
    }
    if (m_enable_ssl_verification_isSet) {
        obj.insert(QString("enable_ssl_verification"), ::OpenAPI::toJsonValue(m_enable_ssl_verification));
    }
    return obj;
}

QString OAIPostV3Hooks_request::getUrl() const {
    return m_url;
}
void OAIPostV3Hooks_request::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPostV3Hooks_request::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPostV3Hooks_request::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIPostV3Hooks_request::getToken() const {
    return m_token;
}
void OAIPostV3Hooks_request::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIPostV3Hooks_request::is_token_Set() const{
    return m_token_isSet;
}

bool OAIPostV3Hooks_request::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIPostV3Hooks_request::isPushEvents() const {
    return m_push_events;
}
void OAIPostV3Hooks_request::setPushEvents(const bool &push_events) {
    m_push_events = push_events;
    m_push_events_isSet = true;
}

bool OAIPostV3Hooks_request::is_push_events_Set() const{
    return m_push_events_isSet;
}

bool OAIPostV3Hooks_request::is_push_events_Valid() const{
    return m_push_events_isValid;
}

bool OAIPostV3Hooks_request::isTagPushEvents() const {
    return m_tag_push_events;
}
void OAIPostV3Hooks_request::setTagPushEvents(const bool &tag_push_events) {
    m_tag_push_events = tag_push_events;
    m_tag_push_events_isSet = true;
}

bool OAIPostV3Hooks_request::is_tag_push_events_Set() const{
    return m_tag_push_events_isSet;
}

bool OAIPostV3Hooks_request::is_tag_push_events_Valid() const{
    return m_tag_push_events_isValid;
}

bool OAIPostV3Hooks_request::isEnableSslVerification() const {
    return m_enable_ssl_verification;
}
void OAIPostV3Hooks_request::setEnableSslVerification(const bool &enable_ssl_verification) {
    m_enable_ssl_verification = enable_ssl_verification;
    m_enable_ssl_verification_isSet = true;
}

bool OAIPostV3Hooks_request::is_enable_ssl_verification_Set() const{
    return m_enable_ssl_verification_isSet;
}

bool OAIPostV3Hooks_request::is_enable_ssl_verification_Valid() const{
    return m_enable_ssl_verification_isValid;
}

bool OAIPostV3Hooks_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_push_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_ssl_verification_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostV3Hooks_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && true;
}

} // namespace OpenAPI
