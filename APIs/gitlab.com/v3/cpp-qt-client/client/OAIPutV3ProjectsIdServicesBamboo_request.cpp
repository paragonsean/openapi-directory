/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3ProjectsIdServicesBamboo_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3ProjectsIdServicesBamboo_request::OAIPutV3ProjectsIdServicesBamboo_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3ProjectsIdServicesBamboo_request::OAIPutV3ProjectsIdServicesBamboo_request() {
    this->initializeModel();
}

OAIPutV3ProjectsIdServicesBamboo_request::~OAIPutV3ProjectsIdServicesBamboo_request() {}

void OAIPutV3ProjectsIdServicesBamboo_request::initializeModel() {

    m_bamboo_url_isSet = false;
    m_bamboo_url_isValid = false;

    m_build_key_isSet = false;
    m_build_key_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_push_events_isSet = false;
    m_push_events_isValid = false;
}

void OAIPutV3ProjectsIdServicesBamboo_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3ProjectsIdServicesBamboo_request::fromJsonObject(QJsonObject json) {

    m_bamboo_url_isValid = ::OpenAPI::fromJsonValue(m_bamboo_url, json[QString("bamboo_url")]);
    m_bamboo_url_isSet = !json[QString("bamboo_url")].isNull() && m_bamboo_url_isValid;

    m_build_key_isValid = ::OpenAPI::fromJsonValue(m_build_key, json[QString("build_key")]);
    m_build_key_isSet = !json[QString("build_key")].isNull() && m_build_key_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_push_events_isValid = ::OpenAPI::fromJsonValue(m_push_events, json[QString("push_events")]);
    m_push_events_isSet = !json[QString("push_events")].isNull() && m_push_events_isValid;
}

QString OAIPutV3ProjectsIdServicesBamboo_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3ProjectsIdServicesBamboo_request::asJsonObject() const {
    QJsonObject obj;
    if (m_bamboo_url_isSet) {
        obj.insert(QString("bamboo_url"), ::OpenAPI::toJsonValue(m_bamboo_url));
    }
    if (m_build_key_isSet) {
        obj.insert(QString("build_key"), ::OpenAPI::toJsonValue(m_build_key));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_push_events_isSet) {
        obj.insert(QString("push_events"), ::OpenAPI::toJsonValue(m_push_events));
    }
    return obj;
}

QString OAIPutV3ProjectsIdServicesBamboo_request::getBambooUrl() const {
    return m_bamboo_url;
}
void OAIPutV3ProjectsIdServicesBamboo_request::setBambooUrl(const QString &bamboo_url) {
    m_bamboo_url = bamboo_url;
    m_bamboo_url_isSet = true;
}

bool OAIPutV3ProjectsIdServicesBamboo_request::is_bamboo_url_Set() const{
    return m_bamboo_url_isSet;
}

bool OAIPutV3ProjectsIdServicesBamboo_request::is_bamboo_url_Valid() const{
    return m_bamboo_url_isValid;
}

QString OAIPutV3ProjectsIdServicesBamboo_request::getBuildKey() const {
    return m_build_key;
}
void OAIPutV3ProjectsIdServicesBamboo_request::setBuildKey(const QString &build_key) {
    m_build_key = build_key;
    m_build_key_isSet = true;
}

bool OAIPutV3ProjectsIdServicesBamboo_request::is_build_key_Set() const{
    return m_build_key_isSet;
}

bool OAIPutV3ProjectsIdServicesBamboo_request::is_build_key_Valid() const{
    return m_build_key_isValid;
}

QString OAIPutV3ProjectsIdServicesBamboo_request::getUsername() const {
    return m_username;
}
void OAIPutV3ProjectsIdServicesBamboo_request::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIPutV3ProjectsIdServicesBamboo_request::is_username_Set() const{
    return m_username_isSet;
}

bool OAIPutV3ProjectsIdServicesBamboo_request::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIPutV3ProjectsIdServicesBamboo_request::getPassword() const {
    return m_password;
}
void OAIPutV3ProjectsIdServicesBamboo_request::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIPutV3ProjectsIdServicesBamboo_request::is_password_Set() const{
    return m_password_isSet;
}

bool OAIPutV3ProjectsIdServicesBamboo_request::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIPutV3ProjectsIdServicesBamboo_request::getPushEvents() const {
    return m_push_events;
}
void OAIPutV3ProjectsIdServicesBamboo_request::setPushEvents(const QString &push_events) {
    m_push_events = push_events;
    m_push_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesBamboo_request::is_push_events_Set() const{
    return m_push_events_isSet;
}

bool OAIPutV3ProjectsIdServicesBamboo_request::is_push_events_Valid() const{
    return m_push_events_isValid;
}

bool OAIPutV3ProjectsIdServicesBamboo_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bamboo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_events_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3ProjectsIdServicesBamboo_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bamboo_url_isValid && m_build_key_isValid && m_username_isValid && m_password_isValid && true;
}

} // namespace OpenAPI
