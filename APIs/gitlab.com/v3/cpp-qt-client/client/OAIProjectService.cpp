/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectService::OAIProjectService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectService::OAIProjectService() {
    this->initializeModel();
}

OAIProjectService::~OAIProjectService() {}

void OAIProjectService::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_build_events_isSet = false;
    m_build_events_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issues_events_isSet = false;
    m_issues_events_isValid = false;

    m_merge_requests_events_isSet = false;
    m_merge_requests_events_isValid = false;

    m_note_events_isSet = false;
    m_note_events_isValid = false;

    m_pipeline_events_isSet = false;
    m_pipeline_events_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_push_events_isSet = false;
    m_push_events_isValid = false;

    m_tag_push_events_isSet = false;
    m_tag_push_events_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIProjectService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectService::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_build_events_isValid = ::OpenAPI::fromJsonValue(m_build_events, json[QString("build_events")]);
    m_build_events_isSet = !json[QString("build_events")].isNull() && m_build_events_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issues_events_isValid = ::OpenAPI::fromJsonValue(m_issues_events, json[QString("issues_events")]);
    m_issues_events_isSet = !json[QString("issues_events")].isNull() && m_issues_events_isValid;

    m_merge_requests_events_isValid = ::OpenAPI::fromJsonValue(m_merge_requests_events, json[QString("merge_requests_events")]);
    m_merge_requests_events_isSet = !json[QString("merge_requests_events")].isNull() && m_merge_requests_events_isValid;

    m_note_events_isValid = ::OpenAPI::fromJsonValue(m_note_events, json[QString("note_events")]);
    m_note_events_isSet = !json[QString("note_events")].isNull() && m_note_events_isValid;

    m_pipeline_events_isValid = ::OpenAPI::fromJsonValue(m_pipeline_events, json[QString("pipeline_events")]);
    m_pipeline_events_isSet = !json[QString("pipeline_events")].isNull() && m_pipeline_events_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_push_events_isValid = ::OpenAPI::fromJsonValue(m_push_events, json[QString("push_events")]);
    m_push_events_isSet = !json[QString("push_events")].isNull() && m_push_events_isValid;

    m_tag_push_events_isValid = ::OpenAPI::fromJsonValue(m_tag_push_events, json[QString("tag_push_events")]);
    m_tag_push_events_isSet = !json[QString("tag_push_events")].isNull() && m_tag_push_events_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIProjectService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectService::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_build_events_isSet) {
        obj.insert(QString("build_events"), ::OpenAPI::toJsonValue(m_build_events));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issues_events_isSet) {
        obj.insert(QString("issues_events"), ::OpenAPI::toJsonValue(m_issues_events));
    }
    if (m_merge_requests_events_isSet) {
        obj.insert(QString("merge_requests_events"), ::OpenAPI::toJsonValue(m_merge_requests_events));
    }
    if (m_note_events_isSet) {
        obj.insert(QString("note_events"), ::OpenAPI::toJsonValue(m_note_events));
    }
    if (m_pipeline_events_isSet) {
        obj.insert(QString("pipeline_events"), ::OpenAPI::toJsonValue(m_pipeline_events));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_push_events_isSet) {
        obj.insert(QString("push_events"), ::OpenAPI::toJsonValue(m_push_events));
    }
    if (m_tag_push_events_isSet) {
        obj.insert(QString("tag_push_events"), ::OpenAPI::toJsonValue(m_tag_push_events));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIProjectService::getActive() const {
    return m_active;
}
void OAIProjectService::setActive(const QString &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIProjectService::is_active_Set() const{
    return m_active_isSet;
}

bool OAIProjectService::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIProjectService::getBuildEvents() const {
    return m_build_events;
}
void OAIProjectService::setBuildEvents(const QString &build_events) {
    m_build_events = build_events;
    m_build_events_isSet = true;
}

bool OAIProjectService::is_build_events_Set() const{
    return m_build_events_isSet;
}

bool OAIProjectService::is_build_events_Valid() const{
    return m_build_events_isValid;
}

QString OAIProjectService::getCreatedAt() const {
    return m_created_at;
}
void OAIProjectService::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIProjectService::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIProjectService::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIProjectService::getId() const {
    return m_id;
}
void OAIProjectService::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProjectService::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProjectService::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProjectService::getIssuesEvents() const {
    return m_issues_events;
}
void OAIProjectService::setIssuesEvents(const QString &issues_events) {
    m_issues_events = issues_events;
    m_issues_events_isSet = true;
}

bool OAIProjectService::is_issues_events_Set() const{
    return m_issues_events_isSet;
}

bool OAIProjectService::is_issues_events_Valid() const{
    return m_issues_events_isValid;
}

QString OAIProjectService::getMergeRequestsEvents() const {
    return m_merge_requests_events;
}
void OAIProjectService::setMergeRequestsEvents(const QString &merge_requests_events) {
    m_merge_requests_events = merge_requests_events;
    m_merge_requests_events_isSet = true;
}

bool OAIProjectService::is_merge_requests_events_Set() const{
    return m_merge_requests_events_isSet;
}

bool OAIProjectService::is_merge_requests_events_Valid() const{
    return m_merge_requests_events_isValid;
}

QString OAIProjectService::getNoteEvents() const {
    return m_note_events;
}
void OAIProjectService::setNoteEvents(const QString &note_events) {
    m_note_events = note_events;
    m_note_events_isSet = true;
}

bool OAIProjectService::is_note_events_Set() const{
    return m_note_events_isSet;
}

bool OAIProjectService::is_note_events_Valid() const{
    return m_note_events_isValid;
}

QString OAIProjectService::getPipelineEvents() const {
    return m_pipeline_events;
}
void OAIProjectService::setPipelineEvents(const QString &pipeline_events) {
    m_pipeline_events = pipeline_events;
    m_pipeline_events_isSet = true;
}

bool OAIProjectService::is_pipeline_events_Set() const{
    return m_pipeline_events_isSet;
}

bool OAIProjectService::is_pipeline_events_Valid() const{
    return m_pipeline_events_isValid;
}

QString OAIProjectService::getProperties() const {
    return m_properties;
}
void OAIProjectService::setProperties(const QString &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIProjectService::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIProjectService::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIProjectService::getPushEvents() const {
    return m_push_events;
}
void OAIProjectService::setPushEvents(const QString &push_events) {
    m_push_events = push_events;
    m_push_events_isSet = true;
}

bool OAIProjectService::is_push_events_Set() const{
    return m_push_events_isSet;
}

bool OAIProjectService::is_push_events_Valid() const{
    return m_push_events_isValid;
}

QString OAIProjectService::getTagPushEvents() const {
    return m_tag_push_events;
}
void OAIProjectService::setTagPushEvents(const QString &tag_push_events) {
    m_tag_push_events = tag_push_events;
    m_tag_push_events_isSet = true;
}

bool OAIProjectService::is_tag_push_events_Set() const{
    return m_tag_push_events_isSet;
}

bool OAIProjectService::is_tag_push_events_Valid() const{
    return m_tag_push_events_isValid;
}

QString OAIProjectService::getTitle() const {
    return m_title;
}
void OAIProjectService::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProjectService::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProjectService::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIProjectService::getUpdatedAt() const {
    return m_updated_at;
}
void OAIProjectService::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIProjectService::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIProjectService::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIProjectService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_requests_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_push_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
