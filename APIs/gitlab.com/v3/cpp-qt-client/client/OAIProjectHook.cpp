/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectHook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectHook::OAIProjectHook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectHook::OAIProjectHook() {
    this->initializeModel();
}

OAIProjectHook::~OAIProjectHook() {}

void OAIProjectHook::initializeModel() {

    m_build_events_isSet = false;
    m_build_events_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_enable_ssl_verification_isSet = false;
    m_enable_ssl_verification_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issues_events_isSet = false;
    m_issues_events_isValid = false;

    m_merge_requests_events_isSet = false;
    m_merge_requests_events_isValid = false;

    m_note_events_isSet = false;
    m_note_events_isValid = false;

    m_pipeline_events_isSet = false;
    m_pipeline_events_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_push_events_isSet = false;
    m_push_events_isValid = false;

    m_tag_push_events_isSet = false;
    m_tag_push_events_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_wiki_page_events_isSet = false;
    m_wiki_page_events_isValid = false;
}

void OAIProjectHook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectHook::fromJsonObject(QJsonObject json) {

    m_build_events_isValid = ::OpenAPI::fromJsonValue(m_build_events, json[QString("build_events")]);
    m_build_events_isSet = !json[QString("build_events")].isNull() && m_build_events_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_enable_ssl_verification_isValid = ::OpenAPI::fromJsonValue(m_enable_ssl_verification, json[QString("enable_ssl_verification")]);
    m_enable_ssl_verification_isSet = !json[QString("enable_ssl_verification")].isNull() && m_enable_ssl_verification_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issues_events_isValid = ::OpenAPI::fromJsonValue(m_issues_events, json[QString("issues_events")]);
    m_issues_events_isSet = !json[QString("issues_events")].isNull() && m_issues_events_isValid;

    m_merge_requests_events_isValid = ::OpenAPI::fromJsonValue(m_merge_requests_events, json[QString("merge_requests_events")]);
    m_merge_requests_events_isSet = !json[QString("merge_requests_events")].isNull() && m_merge_requests_events_isValid;

    m_note_events_isValid = ::OpenAPI::fromJsonValue(m_note_events, json[QString("note_events")]);
    m_note_events_isSet = !json[QString("note_events")].isNull() && m_note_events_isValid;

    m_pipeline_events_isValid = ::OpenAPI::fromJsonValue(m_pipeline_events, json[QString("pipeline_events")]);
    m_pipeline_events_isSet = !json[QString("pipeline_events")].isNull() && m_pipeline_events_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_push_events_isValid = ::OpenAPI::fromJsonValue(m_push_events, json[QString("push_events")]);
    m_push_events_isSet = !json[QString("push_events")].isNull() && m_push_events_isValid;

    m_tag_push_events_isValid = ::OpenAPI::fromJsonValue(m_tag_push_events, json[QString("tag_push_events")]);
    m_tag_push_events_isSet = !json[QString("tag_push_events")].isNull() && m_tag_push_events_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_wiki_page_events_isValid = ::OpenAPI::fromJsonValue(m_wiki_page_events, json[QString("wiki_page_events")]);
    m_wiki_page_events_isSet = !json[QString("wiki_page_events")].isNull() && m_wiki_page_events_isValid;
}

QString OAIProjectHook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectHook::asJsonObject() const {
    QJsonObject obj;
    if (m_build_events_isSet) {
        obj.insert(QString("build_events"), ::OpenAPI::toJsonValue(m_build_events));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_enable_ssl_verification_isSet) {
        obj.insert(QString("enable_ssl_verification"), ::OpenAPI::toJsonValue(m_enable_ssl_verification));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issues_events_isSet) {
        obj.insert(QString("issues_events"), ::OpenAPI::toJsonValue(m_issues_events));
    }
    if (m_merge_requests_events_isSet) {
        obj.insert(QString("merge_requests_events"), ::OpenAPI::toJsonValue(m_merge_requests_events));
    }
    if (m_note_events_isSet) {
        obj.insert(QString("note_events"), ::OpenAPI::toJsonValue(m_note_events));
    }
    if (m_pipeline_events_isSet) {
        obj.insert(QString("pipeline_events"), ::OpenAPI::toJsonValue(m_pipeline_events));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_push_events_isSet) {
        obj.insert(QString("push_events"), ::OpenAPI::toJsonValue(m_push_events));
    }
    if (m_tag_push_events_isSet) {
        obj.insert(QString("tag_push_events"), ::OpenAPI::toJsonValue(m_tag_push_events));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_wiki_page_events_isSet) {
        obj.insert(QString("wiki_page_events"), ::OpenAPI::toJsonValue(m_wiki_page_events));
    }
    return obj;
}

QString OAIProjectHook::getBuildEvents() const {
    return m_build_events;
}
void OAIProjectHook::setBuildEvents(const QString &build_events) {
    m_build_events = build_events;
    m_build_events_isSet = true;
}

bool OAIProjectHook::is_build_events_Set() const{
    return m_build_events_isSet;
}

bool OAIProjectHook::is_build_events_Valid() const{
    return m_build_events_isValid;
}

QString OAIProjectHook::getCreatedAt() const {
    return m_created_at;
}
void OAIProjectHook::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIProjectHook::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIProjectHook::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIProjectHook::getEnableSslVerification() const {
    return m_enable_ssl_verification;
}
void OAIProjectHook::setEnableSslVerification(const QString &enable_ssl_verification) {
    m_enable_ssl_verification = enable_ssl_verification;
    m_enable_ssl_verification_isSet = true;
}

bool OAIProjectHook::is_enable_ssl_verification_Set() const{
    return m_enable_ssl_verification_isSet;
}

bool OAIProjectHook::is_enable_ssl_verification_Valid() const{
    return m_enable_ssl_verification_isValid;
}

QString OAIProjectHook::getId() const {
    return m_id;
}
void OAIProjectHook::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProjectHook::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProjectHook::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProjectHook::getIssuesEvents() const {
    return m_issues_events;
}
void OAIProjectHook::setIssuesEvents(const QString &issues_events) {
    m_issues_events = issues_events;
    m_issues_events_isSet = true;
}

bool OAIProjectHook::is_issues_events_Set() const{
    return m_issues_events_isSet;
}

bool OAIProjectHook::is_issues_events_Valid() const{
    return m_issues_events_isValid;
}

QString OAIProjectHook::getMergeRequestsEvents() const {
    return m_merge_requests_events;
}
void OAIProjectHook::setMergeRequestsEvents(const QString &merge_requests_events) {
    m_merge_requests_events = merge_requests_events;
    m_merge_requests_events_isSet = true;
}

bool OAIProjectHook::is_merge_requests_events_Set() const{
    return m_merge_requests_events_isSet;
}

bool OAIProjectHook::is_merge_requests_events_Valid() const{
    return m_merge_requests_events_isValid;
}

QString OAIProjectHook::getNoteEvents() const {
    return m_note_events;
}
void OAIProjectHook::setNoteEvents(const QString &note_events) {
    m_note_events = note_events;
    m_note_events_isSet = true;
}

bool OAIProjectHook::is_note_events_Set() const{
    return m_note_events_isSet;
}

bool OAIProjectHook::is_note_events_Valid() const{
    return m_note_events_isValid;
}

QString OAIProjectHook::getPipelineEvents() const {
    return m_pipeline_events;
}
void OAIProjectHook::setPipelineEvents(const QString &pipeline_events) {
    m_pipeline_events = pipeline_events;
    m_pipeline_events_isSet = true;
}

bool OAIProjectHook::is_pipeline_events_Set() const{
    return m_pipeline_events_isSet;
}

bool OAIProjectHook::is_pipeline_events_Valid() const{
    return m_pipeline_events_isValid;
}

QString OAIProjectHook::getProjectId() const {
    return m_project_id;
}
void OAIProjectHook::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIProjectHook::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIProjectHook::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIProjectHook::getPushEvents() const {
    return m_push_events;
}
void OAIProjectHook::setPushEvents(const QString &push_events) {
    m_push_events = push_events;
    m_push_events_isSet = true;
}

bool OAIProjectHook::is_push_events_Set() const{
    return m_push_events_isSet;
}

bool OAIProjectHook::is_push_events_Valid() const{
    return m_push_events_isValid;
}

QString OAIProjectHook::getTagPushEvents() const {
    return m_tag_push_events;
}
void OAIProjectHook::setTagPushEvents(const QString &tag_push_events) {
    m_tag_push_events = tag_push_events;
    m_tag_push_events_isSet = true;
}

bool OAIProjectHook::is_tag_push_events_Set() const{
    return m_tag_push_events_isSet;
}

bool OAIProjectHook::is_tag_push_events_Valid() const{
    return m_tag_push_events_isValid;
}

QString OAIProjectHook::getUrl() const {
    return m_url;
}
void OAIProjectHook::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProjectHook::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProjectHook::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIProjectHook::getWikiPageEvents() const {
    return m_wiki_page_events;
}
void OAIProjectHook::setWikiPageEvents(const QString &wiki_page_events) {
    m_wiki_page_events = wiki_page_events;
    m_wiki_page_events_isSet = true;
}

bool OAIProjectHook::is_wiki_page_events_Set() const{
    return m_wiki_page_events_isSet;
}

bool OAIProjectHook::is_wiki_page_events_Valid() const{
    return m_wiki_page_events_isValid;
}

bool OAIProjectHook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_ssl_verification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_requests_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_push_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wiki_page_events_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectHook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
