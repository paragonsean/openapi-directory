/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3ProjectsIdServicesPushover_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3ProjectsIdServicesPushover_request::OAIPutV3ProjectsIdServicesPushover_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3ProjectsIdServicesPushover_request::OAIPutV3ProjectsIdServicesPushover_request() {
    this->initializeModel();
}

OAIPutV3ProjectsIdServicesPushover_request::~OAIPutV3ProjectsIdServicesPushover_request() {}

void OAIPutV3ProjectsIdServicesPushover_request::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_user_key_isSet = false;
    m_user_key_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_sound_isSet = false;
    m_sound_isValid = false;

    m_push_events_isSet = false;
    m_push_events_isValid = false;
}

void OAIPutV3ProjectsIdServicesPushover_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3ProjectsIdServicesPushover_request::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("api_key")]);
    m_api_key_isSet = !json[QString("api_key")].isNull() && m_api_key_isValid;

    m_user_key_isValid = ::OpenAPI::fromJsonValue(m_user_key, json[QString("user_key")]);
    m_user_key_isSet = !json[QString("user_key")].isNull() && m_user_key_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_sound_isValid = ::OpenAPI::fromJsonValue(m_sound, json[QString("sound")]);
    m_sound_isSet = !json[QString("sound")].isNull() && m_sound_isValid;

    m_push_events_isValid = ::OpenAPI::fromJsonValue(m_push_events, json[QString("push_events")]);
    m_push_events_isSet = !json[QString("push_events")].isNull() && m_push_events_isValid;
}

QString OAIPutV3ProjectsIdServicesPushover_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3ProjectsIdServicesPushover_request::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("api_key"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_user_key_isSet) {
        obj.insert(QString("user_key"), ::OpenAPI::toJsonValue(m_user_key));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_device_isSet) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_sound_isSet) {
        obj.insert(QString("sound"), ::OpenAPI::toJsonValue(m_sound));
    }
    if (m_push_events_isSet) {
        obj.insert(QString("push_events"), ::OpenAPI::toJsonValue(m_push_events));
    }
    return obj;
}

QString OAIPutV3ProjectsIdServicesPushover_request::getApiKey() const {
    return m_api_key;
}
void OAIPutV3ProjectsIdServicesPushover_request::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIPutV3ProjectsIdServicesPushover_request::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIPutV3ProjectsIdServicesPushover_request::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIPutV3ProjectsIdServicesPushover_request::getUserKey() const {
    return m_user_key;
}
void OAIPutV3ProjectsIdServicesPushover_request::setUserKey(const QString &user_key) {
    m_user_key = user_key;
    m_user_key_isSet = true;
}

bool OAIPutV3ProjectsIdServicesPushover_request::is_user_key_Set() const{
    return m_user_key_isSet;
}

bool OAIPutV3ProjectsIdServicesPushover_request::is_user_key_Valid() const{
    return m_user_key_isValid;
}

QString OAIPutV3ProjectsIdServicesPushover_request::getPriority() const {
    return m_priority;
}
void OAIPutV3ProjectsIdServicesPushover_request::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIPutV3ProjectsIdServicesPushover_request::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIPutV3ProjectsIdServicesPushover_request::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIPutV3ProjectsIdServicesPushover_request::getDevice() const {
    return m_device;
}
void OAIPutV3ProjectsIdServicesPushover_request::setDevice(const QString &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIPutV3ProjectsIdServicesPushover_request::is_device_Set() const{
    return m_device_isSet;
}

bool OAIPutV3ProjectsIdServicesPushover_request::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIPutV3ProjectsIdServicesPushover_request::getSound() const {
    return m_sound;
}
void OAIPutV3ProjectsIdServicesPushover_request::setSound(const QString &sound) {
    m_sound = sound;
    m_sound_isSet = true;
}

bool OAIPutV3ProjectsIdServicesPushover_request::is_sound_Set() const{
    return m_sound_isSet;
}

bool OAIPutV3ProjectsIdServicesPushover_request::is_sound_Valid() const{
    return m_sound_isValid;
}

QString OAIPutV3ProjectsIdServicesPushover_request::getPushEvents() const {
    return m_push_events;
}
void OAIPutV3ProjectsIdServicesPushover_request::setPushEvents(const QString &push_events) {
    m_push_events = push_events;
    m_push_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesPushover_request::is_push_events_Set() const{
    return m_push_events_isSet;
}

bool OAIPutV3ProjectsIdServicesPushover_request::is_push_events_Valid() const{
    return m_push_events_isValid;
}

bool OAIPutV3ProjectsIdServicesPushover_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_events_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3ProjectsIdServicesPushover_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_api_key_isValid && m_user_key_isValid && m_priority_isValid && m_device_isValid && m_sound_isValid && true;
}

} // namespace OpenAPI
