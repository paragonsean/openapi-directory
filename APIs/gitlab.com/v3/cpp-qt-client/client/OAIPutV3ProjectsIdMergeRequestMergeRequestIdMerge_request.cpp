/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request() {
    this->initializeModel();
}

OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::~OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request() {}

void OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::initializeModel() {

    m_merge_commit_message_isSet = false;
    m_merge_commit_message_isValid = false;

    m_should_remove_source_branch_isSet = false;
    m_should_remove_source_branch_isValid = false;

    m_merge_when_build_succeeds_isSet = false;
    m_merge_when_build_succeeds_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;
}

void OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::fromJsonObject(QJsonObject json) {

    m_merge_commit_message_isValid = ::OpenAPI::fromJsonValue(m_merge_commit_message, json[QString("merge_commit_message")]);
    m_merge_commit_message_isSet = !json[QString("merge_commit_message")].isNull() && m_merge_commit_message_isValid;

    m_should_remove_source_branch_isValid = ::OpenAPI::fromJsonValue(m_should_remove_source_branch, json[QString("should_remove_source_branch")]);
    m_should_remove_source_branch_isSet = !json[QString("should_remove_source_branch")].isNull() && m_should_remove_source_branch_isValid;

    m_merge_when_build_succeeds_isValid = ::OpenAPI::fromJsonValue(m_merge_when_build_succeeds, json[QString("merge_when_build_succeeds")]);
    m_merge_when_build_succeeds_isSet = !json[QString("merge_when_build_succeeds")].isNull() && m_merge_when_build_succeeds_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;
}

QString OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::asJsonObject() const {
    QJsonObject obj;
    if (m_merge_commit_message_isSet) {
        obj.insert(QString("merge_commit_message"), ::OpenAPI::toJsonValue(m_merge_commit_message));
    }
    if (m_should_remove_source_branch_isSet) {
        obj.insert(QString("should_remove_source_branch"), ::OpenAPI::toJsonValue(m_should_remove_source_branch));
    }
    if (m_merge_when_build_succeeds_isSet) {
        obj.insert(QString("merge_when_build_succeeds"), ::OpenAPI::toJsonValue(m_merge_when_build_succeeds));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    return obj;
}

QString OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::getMergeCommitMessage() const {
    return m_merge_commit_message;
}
void OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::setMergeCommitMessage(const QString &merge_commit_message) {
    m_merge_commit_message = merge_commit_message;
    m_merge_commit_message_isSet = true;
}

bool OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::is_merge_commit_message_Set() const{
    return m_merge_commit_message_isSet;
}

bool OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::is_merge_commit_message_Valid() const{
    return m_merge_commit_message_isValid;
}

bool OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::isShouldRemoveSourceBranch() const {
    return m_should_remove_source_branch;
}
void OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::setShouldRemoveSourceBranch(const bool &should_remove_source_branch) {
    m_should_remove_source_branch = should_remove_source_branch;
    m_should_remove_source_branch_isSet = true;
}

bool OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::is_should_remove_source_branch_Set() const{
    return m_should_remove_source_branch_isSet;
}

bool OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::is_should_remove_source_branch_Valid() const{
    return m_should_remove_source_branch_isValid;
}

bool OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::isMergeWhenBuildSucceeds() const {
    return m_merge_when_build_succeeds;
}
void OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::setMergeWhenBuildSucceeds(const bool &merge_when_build_succeeds) {
    m_merge_when_build_succeeds = merge_when_build_succeeds;
    m_merge_when_build_succeeds_isSet = true;
}

bool OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::is_merge_when_build_succeeds_Set() const{
    return m_merge_when_build_succeeds_isSet;
}

bool OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::is_merge_when_build_succeeds_Valid() const{
    return m_merge_when_build_succeeds_isValid;
}

QString OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::getSha() const {
    return m_sha;
}
void OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::is_sha_Valid() const{
    return m_sha_isValid;
}

bool OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_merge_commit_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_should_remove_source_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_when_build_succeeds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
