/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3UsersId_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3UsersId_request::OAIPutV3UsersId_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3UsersId_request::OAIPutV3UsersId_request() {
    this->initializeModel();
}

OAIPutV3UsersId_request::~OAIPutV3UsersId_request() {}

void OAIPutV3UsersId_request::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_skype_isSet = false;
    m_skype_isValid = false;

    m_linkedin_isSet = false;
    m_linkedin_isValid = false;

    m_twitter_isSet = false;
    m_twitter_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_projects_limit_isSet = false;
    m_projects_limit_isValid = false;

    m_extern_uid_isSet = false;
    m_extern_uid_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_bio_isSet = false;
    m_bio_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_can_create_group_isSet = false;
    m_can_create_group_isValid = false;

    m_confirm_isSet = false;
    m_confirm_isValid = false;

    m_external_isSet = false;
    m_external_isValid = false;
}

void OAIPutV3UsersId_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3UsersId_request::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_skype_isValid = ::OpenAPI::fromJsonValue(m_skype, json[QString("skype")]);
    m_skype_isSet = !json[QString("skype")].isNull() && m_skype_isValid;

    m_linkedin_isValid = ::OpenAPI::fromJsonValue(m_linkedin, json[QString("linkedin")]);
    m_linkedin_isSet = !json[QString("linkedin")].isNull() && m_linkedin_isValid;

    m_twitter_isValid = ::OpenAPI::fromJsonValue(m_twitter, json[QString("twitter")]);
    m_twitter_isSet = !json[QString("twitter")].isNull() && m_twitter_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("website_url")]);
    m_website_url_isSet = !json[QString("website_url")].isNull() && m_website_url_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_projects_limit_isValid = ::OpenAPI::fromJsonValue(m_projects_limit, json[QString("projects_limit")]);
    m_projects_limit_isSet = !json[QString("projects_limit")].isNull() && m_projects_limit_isValid;

    m_extern_uid_isValid = ::OpenAPI::fromJsonValue(m_extern_uid, json[QString("extern_uid")]);
    m_extern_uid_isSet = !json[QString("extern_uid")].isNull() && m_extern_uid_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_bio_isValid = ::OpenAPI::fromJsonValue(m_bio, json[QString("bio")]);
    m_bio_isSet = !json[QString("bio")].isNull() && m_bio_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_can_create_group_isValid = ::OpenAPI::fromJsonValue(m_can_create_group, json[QString("can_create_group")]);
    m_can_create_group_isSet = !json[QString("can_create_group")].isNull() && m_can_create_group_isValid;

    m_confirm_isValid = ::OpenAPI::fromJsonValue(m_confirm, json[QString("confirm")]);
    m_confirm_isSet = !json[QString("confirm")].isNull() && m_confirm_isValid;

    m_external_isValid = ::OpenAPI::fromJsonValue(m_external, json[QString("external")]);
    m_external_isSet = !json[QString("external")].isNull() && m_external_isValid;
}

QString OAIPutV3UsersId_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3UsersId_request::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_skype_isSet) {
        obj.insert(QString("skype"), ::OpenAPI::toJsonValue(m_skype));
    }
    if (m_linkedin_isSet) {
        obj.insert(QString("linkedin"), ::OpenAPI::toJsonValue(m_linkedin));
    }
    if (m_twitter_isSet) {
        obj.insert(QString("twitter"), ::OpenAPI::toJsonValue(m_twitter));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("website_url"), ::OpenAPI::toJsonValue(m_website_url));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_projects_limit_isSet) {
        obj.insert(QString("projects_limit"), ::OpenAPI::toJsonValue(m_projects_limit));
    }
    if (m_extern_uid_isSet) {
        obj.insert(QString("extern_uid"), ::OpenAPI::toJsonValue(m_extern_uid));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_bio_isSet) {
        obj.insert(QString("bio"), ::OpenAPI::toJsonValue(m_bio));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_can_create_group_isSet) {
        obj.insert(QString("can_create_group"), ::OpenAPI::toJsonValue(m_can_create_group));
    }
    if (m_confirm_isSet) {
        obj.insert(QString("confirm"), ::OpenAPI::toJsonValue(m_confirm));
    }
    if (m_external_isSet) {
        obj.insert(QString("external"), ::OpenAPI::toJsonValue(m_external));
    }
    return obj;
}

QString OAIPutV3UsersId_request::getEmail() const {
    return m_email;
}
void OAIPutV3UsersId_request::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIPutV3UsersId_request::is_email_Set() const{
    return m_email_isSet;
}

bool OAIPutV3UsersId_request::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIPutV3UsersId_request::getPassword() const {
    return m_password;
}
void OAIPutV3UsersId_request::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIPutV3UsersId_request::is_password_Set() const{
    return m_password_isSet;
}

bool OAIPutV3UsersId_request::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIPutV3UsersId_request::getName() const {
    return m_name;
}
void OAIPutV3UsersId_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPutV3UsersId_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPutV3UsersId_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPutV3UsersId_request::getUsername() const {
    return m_username;
}
void OAIPutV3UsersId_request::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIPutV3UsersId_request::is_username_Set() const{
    return m_username_isSet;
}

bool OAIPutV3UsersId_request::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIPutV3UsersId_request::getSkype() const {
    return m_skype;
}
void OAIPutV3UsersId_request::setSkype(const QString &skype) {
    m_skype = skype;
    m_skype_isSet = true;
}

bool OAIPutV3UsersId_request::is_skype_Set() const{
    return m_skype_isSet;
}

bool OAIPutV3UsersId_request::is_skype_Valid() const{
    return m_skype_isValid;
}

QString OAIPutV3UsersId_request::getLinkedin() const {
    return m_linkedin;
}
void OAIPutV3UsersId_request::setLinkedin(const QString &linkedin) {
    m_linkedin = linkedin;
    m_linkedin_isSet = true;
}

bool OAIPutV3UsersId_request::is_linkedin_Set() const{
    return m_linkedin_isSet;
}

bool OAIPutV3UsersId_request::is_linkedin_Valid() const{
    return m_linkedin_isValid;
}

QString OAIPutV3UsersId_request::getTwitter() const {
    return m_twitter;
}
void OAIPutV3UsersId_request::setTwitter(const QString &twitter) {
    m_twitter = twitter;
    m_twitter_isSet = true;
}

bool OAIPutV3UsersId_request::is_twitter_Set() const{
    return m_twitter_isSet;
}

bool OAIPutV3UsersId_request::is_twitter_Valid() const{
    return m_twitter_isValid;
}

QString OAIPutV3UsersId_request::getWebsiteUrl() const {
    return m_website_url;
}
void OAIPutV3UsersId_request::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAIPutV3UsersId_request::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAIPutV3UsersId_request::is_website_url_Valid() const{
    return m_website_url_isValid;
}

QString OAIPutV3UsersId_request::getOrganization() const {
    return m_organization;
}
void OAIPutV3UsersId_request::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIPutV3UsersId_request::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIPutV3UsersId_request::is_organization_Valid() const{
    return m_organization_isValid;
}

qint32 OAIPutV3UsersId_request::getProjectsLimit() const {
    return m_projects_limit;
}
void OAIPutV3UsersId_request::setProjectsLimit(const qint32 &projects_limit) {
    m_projects_limit = projects_limit;
    m_projects_limit_isSet = true;
}

bool OAIPutV3UsersId_request::is_projects_limit_Set() const{
    return m_projects_limit_isSet;
}

bool OAIPutV3UsersId_request::is_projects_limit_Valid() const{
    return m_projects_limit_isValid;
}

QString OAIPutV3UsersId_request::getExternUid() const {
    return m_extern_uid;
}
void OAIPutV3UsersId_request::setExternUid(const QString &extern_uid) {
    m_extern_uid = extern_uid;
    m_extern_uid_isSet = true;
}

bool OAIPutV3UsersId_request::is_extern_uid_Set() const{
    return m_extern_uid_isSet;
}

bool OAIPutV3UsersId_request::is_extern_uid_Valid() const{
    return m_extern_uid_isValid;
}

QString OAIPutV3UsersId_request::getProvider() const {
    return m_provider;
}
void OAIPutV3UsersId_request::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIPutV3UsersId_request::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIPutV3UsersId_request::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIPutV3UsersId_request::getBio() const {
    return m_bio;
}
void OAIPutV3UsersId_request::setBio(const QString &bio) {
    m_bio = bio;
    m_bio_isSet = true;
}

bool OAIPutV3UsersId_request::is_bio_Set() const{
    return m_bio_isSet;
}

bool OAIPutV3UsersId_request::is_bio_Valid() const{
    return m_bio_isValid;
}

QString OAIPutV3UsersId_request::getLocation() const {
    return m_location;
}
void OAIPutV3UsersId_request::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPutV3UsersId_request::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPutV3UsersId_request::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIPutV3UsersId_request::isAdmin() const {
    return m_admin;
}
void OAIPutV3UsersId_request::setAdmin(const bool &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAIPutV3UsersId_request::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAIPutV3UsersId_request::is_admin_Valid() const{
    return m_admin_isValid;
}

bool OAIPutV3UsersId_request::isCanCreateGroup() const {
    return m_can_create_group;
}
void OAIPutV3UsersId_request::setCanCreateGroup(const bool &can_create_group) {
    m_can_create_group = can_create_group;
    m_can_create_group_isSet = true;
}

bool OAIPutV3UsersId_request::is_can_create_group_Set() const{
    return m_can_create_group_isSet;
}

bool OAIPutV3UsersId_request::is_can_create_group_Valid() const{
    return m_can_create_group_isValid;
}

bool OAIPutV3UsersId_request::isConfirm() const {
    return m_confirm;
}
void OAIPutV3UsersId_request::setConfirm(const bool &confirm) {
    m_confirm = confirm;
    m_confirm_isSet = true;
}

bool OAIPutV3UsersId_request::is_confirm_Set() const{
    return m_confirm_isSet;
}

bool OAIPutV3UsersId_request::is_confirm_Valid() const{
    return m_confirm_isValid;
}

bool OAIPutV3UsersId_request::isExternal() const {
    return m_external;
}
void OAIPutV3UsersId_request::setExternal(const bool &external) {
    m_external = external;
    m_external_isSet = true;
}

bool OAIPutV3UsersId_request::is_external_Set() const{
    return m_external_isSet;
}

bool OAIPutV3UsersId_request::is_external_Valid() const{
    return m_external_isValid;
}

bool OAIPutV3UsersId_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linkedin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extern_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_create_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3UsersId_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
