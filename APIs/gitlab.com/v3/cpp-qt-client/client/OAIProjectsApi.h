/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessRequester.h"
#include "OAIAwardEmoji.h"
#include "OAIBasicProjectDetails.h"
#include "OAIBoard.h"
#include "OAIBuild.h"
#include "OAICommitNote.h"
#include "OAICommitStatus.h"
#include "OAICompare.h"
#include "OAIContributor.h"
#include "OAIDeployment.h"
#include "OAIEnvironment.h"
#include "OAIEvent.h"
#include "OAIIssue.h"
#include "OAILabel.h"
#include "OAIList.h"
#include "OAIMRNote.h"
#include "OAIMember.h"
#include "OAIMergeRequest.h"
#include "OAIMergeRequestChanges.h"
#include "OAIMergeRequestDiff.h"
#include "OAIMergeRequestDiffFull.h"
#include "OAIMilestone.h"
#include "OAINote.h"
#include "OAINotificationSetting.h"
#include "OAIPipeline.h"
#include "OAIPostV3GroupsIdMembers_request.h"
#include "OAIPostV3ProjectsForkId_request.h"
#include "OAIPostV3ProjectsIdBoardsBoardIdLists_request.h"
#include "OAIPostV3ProjectsIdDeployKeys_request.h"
#include "OAIPostV3ProjectsIdEnvironments_request.h"
#include "OAIPostV3ProjectsIdHooks_request.h"
#include "OAIPostV3ProjectsIdIssuesIssueIdAddSpentTime_request.h"
#include "OAIPostV3ProjectsIdIssuesIssueIdAwardEmoji_request.h"
#include "OAIPostV3ProjectsIdIssuesIssueIdMove_request.h"
#include "OAIPostV3ProjectsIdIssuesNoteableIdNotes_request.h"
#include "OAIPostV3ProjectsIdIssues_request.h"
#include "OAIPostV3ProjectsIdLabels_request.h"
#include "OAIPostV3ProjectsIdMergeRequestMergeRequestIdComments_request.h"
#include "OAIPostV3ProjectsIdMergeRequests_request.h"
#include "OAIPostV3ProjectsIdMilestones_request.h"
#include "OAIPostV3ProjectsIdPipeline_request.h"
#include "OAIPostV3ProjectsIdRepositoryBranches_request.h"
#include "OAIPostV3ProjectsIdRepositoryCommitsShaCherryPick_request.h"
#include "OAIPostV3ProjectsIdRepositoryCommitsShaComments_request.h"
#include "OAIPostV3ProjectsIdRepositoryCommits_request.h"
#include "OAIPostV3ProjectsIdRepositoryTags_request.h"
#include "OAIPostV3ProjectsIdRunners_request.h"
#include "OAIPostV3ProjectsIdShare_request.h"
#include "OAIPostV3ProjectsIdSnippets_request.h"
#include "OAIPostV3ProjectsIdStatusesSha_request.h"
#include "OAIPostV3ProjectsIdUploads_request.h"
#include "OAIPostV3ProjectsIdVariables_request.h"
#include "OAIPostV3ProjectsId_refRef_triggerBuilds_request.h"
#include "OAIPostV3ProjectsUserUserId_request.h"
#include "OAIPostV3Projects_request.h"
#include "OAIProject.h"
#include "OAIProjectGroupLink.h"
#include "OAIProjectHook.h"
#include "OAIProjectService.h"
#include "OAIProjectSnippet.h"
#include "OAIProjectWithAccess.h"
#include "OAIPutV3GroupsIdAccessRequestsUserIdApprove_request.h"
#include "OAIPutV3GroupsIdMembersUserId_request.h"
#include "OAIPutV3ProjectsIdBoardsBoardIdListsListId_request.h"
#include "OAIPutV3ProjectsIdEnvironmentsEnvironmentId_request.h"
#include "OAIPutV3ProjectsIdIssuesIssueId_request.h"
#include "OAIPutV3ProjectsIdIssuesNoteableIdNotesNoteId_request.h"
#include "OAIPutV3ProjectsIdLabels_request.h"
#include "OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request.h"
#include "OAIPutV3ProjectsIdMergeRequestMergeRequestId_request.h"
#include "OAIPutV3ProjectsIdMilestonesMilestoneId_request.h"
#include "OAIPutV3ProjectsIdNotificationSettings_request.h"
#include "OAIPutV3ProjectsIdRepositoryBranchesBranchProtect_request.h"
#include "OAIPutV3ProjectsIdRepositoryFiles_request.h"
#include "OAIPutV3ProjectsIdRepositoryTagsTagNameRelease_request.h"
#include "OAIPutV3ProjectsIdServicesAsana_request.h"
#include "OAIPutV3ProjectsIdServicesAssembla_request.h"
#include "OAIPutV3ProjectsIdServicesBamboo_request.h"
#include "OAIPutV3ProjectsIdServicesBugzilla_request.h"
#include "OAIPutV3ProjectsIdServicesBuildkite_request.h"
#include "OAIPutV3ProjectsIdServicesBuildsEmail_request.h"
#include "OAIPutV3ProjectsIdServicesCampfire_request.h"
#include "OAIPutV3ProjectsIdServicesDroneCi_request.h"
#include "OAIPutV3ProjectsIdServicesEmailsOnPush_request.h"
#include "OAIPutV3ProjectsIdServicesExternalWiki_request.h"
#include "OAIPutV3ProjectsIdServicesFlowdock_request.h"
#include "OAIPutV3ProjectsIdServicesGemnasium_request.h"
#include "OAIPutV3ProjectsIdServicesHipchat_request.h"
#include "OAIPutV3ProjectsIdServicesIrker_request.h"
#include "OAIPutV3ProjectsIdServicesJira_request.h"
#include "OAIPutV3ProjectsIdServicesKubernetes_request.h"
#include "OAIPutV3ProjectsIdServicesMattermostSlashCommands_request.h"
#include "OAIPutV3ProjectsIdServicesMattermost_request.h"
#include "OAIPutV3ProjectsIdServicesPipelinesEmail_request.h"
#include "OAIPutV3ProjectsIdServicesPivotaltracker_request.h"
#include "OAIPutV3ProjectsIdServicesPushover_request.h"
#include "OAIPutV3ProjectsIdServicesRedmine_request.h"
#include "OAIPutV3ProjectsIdServicesSlackSlashCommands_request.h"
#include "OAIPutV3ProjectsIdServicesSlack_request.h"
#include "OAIPutV3ProjectsIdServicesTeamcity_request.h"
#include "OAIPutV3ProjectsIdSnippetsSnippetId_request.h"
#include "OAIPutV3ProjectsIdVariablesKey_request.h"
#include "OAIPutV3ProjectsId_request.h"
#include "OAIRelease.h"
#include "OAIRepoBranch.h"
#include "OAIRepoCommit.h"
#include "OAIRepoCommitDetail.h"
#include "OAIRepoTag.h"
#include "OAIRepoTreeObject.h"
#include "OAIRunner.h"
#include "OAISSHKey.h"
#include "OAITodo.h"
#include "OAITrigger.h"
#include "OAITriggerRequest.h"
#include "OAIUserBasic.h"
#include "OAIVariable.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteV3ProjectsId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdAccessRequestsUserId(const QString &id, const qint32 &user_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  board_id qint32 [required]
    * @param[in]  list_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdBoardsBoardIdListsListId(const QString &id, const qint32 &board_id, const qint32 &list_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdDeployKeysKeyId(const QString &id, const qint32 &key_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdDeployKeysKeyIdDisable(const QString &id, const qint32 &key_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  environment_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdEnvironmentsEnvironmentId(const QString &id, const qint32 &environment_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteV3ProjectsIdFork(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  hook_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdHooksHookId(const QString &id, const qint32 &hook_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  issue_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdIssuesIssueId(const QString &id, const qint32 &issue_id);

    /**
    * @param[in]  award_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  issue_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId(const qint32 &award_id, const qint32 &id, const qint32 &issue_id);

    /**
    * @param[in]  award_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  issue_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(const qint32 &award_id, const qint32 &id, const qint32 &issue_id, const qint32 &note_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  noteable_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdIssuesNoteableIdNotesNoteId(const QString &id, const qint32 &noteable_id, const qint32 &note_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  subscribable_id QString [required]
    */
    virtual void deleteV3ProjectsIdIssuesSubscribableIdSubscription(const QString &id, const QString &subscribable_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdKeysKeyId(const QString &id, const qint32 &key_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdKeysKeyIdDisable(const QString &id, const qint32 &key_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  name QString [required]
    */
    virtual void deleteV3ProjectsIdLabels(const QString &id, const QString &name);

    /**
    * @param[in]  id QString [required]
    * @param[in]  subscribable_id QString [required]
    */
    virtual void deleteV3ProjectsIdLabelsSubscribableIdSubscription(const QString &id, const QString &subscribable_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdMembersUserId(const QString &id, const qint32 &user_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  subscribable_id QString [required]
    */
    virtual void deleteV3ProjectsIdMergeRequestSubscribableIdSubscription(const QString &id, const QString &subscribable_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdMergeRequestsMergeRequestId(const QString &id, const qint32 &merge_request_id);

    /**
    * @param[in]  award_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  merge_request_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(const qint32 &award_id, const qint32 &id, const qint32 &merge_request_id);

    /**
    * @param[in]  award_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(const qint32 &award_id, const qint32 &id, const qint32 &merge_request_id, const qint32 &note_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  noteable_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(const QString &id, const qint32 &noteable_id, const qint32 &note_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  subscribable_id QString [required]
    */
    virtual void deleteV3ProjectsIdMergeRequestsSubscribableIdSubscription(const QString &id, const QString &subscribable_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void deleteV3ProjectsIdRepositoryBranchesBranch(const QString &id, const QString &branch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  file_path QString [required]
    * @param[in]  branch_name QString [required]
    * @param[in]  commit_message QString [required]
    * @param[in]  author_email QString [optional]
    * @param[in]  author_name QString [optional]
    */
    virtual void deleteV3ProjectsIdRepositoryFiles(const QString &id, const QString &file_path, const QString &branch_name, const QString &commit_message, const ::OpenAPI::OptionalParam<QString> &author_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteV3ProjectsIdRepositoryMergedBranches(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tag_name QString [required]
    */
    virtual void deleteV3ProjectsIdRepositoryTagsTagName(const QString &id, const QString &tag_name);

    /**
    * @param[in]  id QString [required]
    * @param[in]  runner_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdRunnersRunnerId(const QString &id, const qint32 &runner_id);

    /**
    * @param[in]  service_slug QString [required]
    * @param[in]  id qint32 [required]
    */
    virtual void deleteV3ProjectsIdServicesServiceSlug(const QString &service_slug, const qint32 &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  group_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdShareGroupId(const QString &id, const qint32 &group_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  noteable_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId(const QString &id, const qint32 &noteable_id, const qint32 &note_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  snippet_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdSnippetsSnippetId(const QString &id, const qint32 &snippet_id);

    /**
    * @param[in]  award_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  snippet_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(const qint32 &award_id, const qint32 &id, const qint32 &snippet_id);

    /**
    * @param[in]  award_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  snippet_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    */
    virtual void deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(const qint32 &award_id, const qint32 &id, const qint32 &snippet_id, const qint32 &note_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteV3ProjectsIdStar(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  token QString [required]
    */
    virtual void deleteV3ProjectsIdTriggersToken(const QString &id, const QString &token);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key QString [required]
    */
    virtual void deleteV3ProjectsIdVariablesKey(const QString &id, const QString &key);

    /**
    * @param[in]  order_by QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  archived bool [optional]
    * @param[in]  visibility QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  simple bool [optional]
    */
    virtual void getV3Projects(const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &archived = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &visibility = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &simple = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  order_by QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  archived bool [optional]
    * @param[in]  visibility QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  simple bool [optional]
    * @param[in]  statistics bool [optional]
    */
    virtual void getV3ProjectsAll(const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &archived = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &visibility = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &simple = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &statistics = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getV3ProjectsId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdAccessRequests(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getV3ProjectsIdBoards(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  board_id qint32 [required]
    */
    virtual void getV3ProjectsIdBoardsBoardIdLists(const QString &id, const qint32 &board_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  board_id qint32 [required]
    * @param[in]  list_id qint32 [required]
    */
    virtual void getV3ProjectsIdBoardsBoardIdListsListId(const QString &id, const qint32 &board_id, const qint32 &list_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  scope QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdBuilds(const QString &id, const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  ref_name QString [required]
    * @param[in]  job QString [required]
    */
    virtual void getV3ProjectsIdBuildsArtifactsRefNameDownload(const QString &id, const QString &ref_name, const QString &job);

    /**
    * @param[in]  id QString [required]
    * @param[in]  build_id qint32 [required]
    */
    virtual void getV3ProjectsIdBuildsBuildId(const QString &id, const qint32 &build_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  build_id qint32 [required]
    */
    virtual void getV3ProjectsIdBuildsBuildIdArtifacts(const QString &id, const qint32 &build_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  build_id qint32 [required]
    */
    virtual void getV3ProjectsIdBuildsBuildIdTrace(const QString &id, const qint32 &build_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getV3ProjectsIdDeployKeys(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key_id qint32 [required]
    */
    virtual void getV3ProjectsIdDeployKeysKeyId(const QString &id, const qint32 &key_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdDeployments(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  deployment_id qint32 [required]
    */
    virtual void getV3ProjectsIdDeploymentsDeploymentId(const QString &id, const qint32 &deployment_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdEnvironments(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdEvents(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdHooks(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  hook_id qint32 [required]
    */
    virtual void getV3ProjectsIdHooksHookId(const QString &id, const qint32 &hook_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  state QString [optional]
    * @param[in]  iid qint32 [optional]
    * @param[in]  labels QString [optional]
    * @param[in]  milestone QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdIssues(const QString &id, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &iid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &milestone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  issue_id qint32 [required]
    */
    virtual void getV3ProjectsIdIssuesIssueId(const QString &id, const qint32 &issue_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  issue_id qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdIssuesIssueIdAwardEmoji(const QString &id, const qint32 &issue_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  award_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  issue_id qint32 [required]
    */
    virtual void getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId(const qint32 &award_id, const qint32 &id, const qint32 &issue_id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  issue_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(const qint32 &id, const qint32 &issue_id, const qint32 &note_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  award_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  issue_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    */
    virtual void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(const qint32 &award_id, const qint32 &id, const qint32 &issue_id, const qint32 &note_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  issue_id qint32 [required]
    */
    virtual void getV3ProjectsIdIssuesIssueIdTimeStats(const QString &id, const qint32 &issue_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  noteable_id qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdIssuesNoteableIdNotes(const QString &id, const qint32 &noteable_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  note_id qint32 [required]
    * @param[in]  noteable_id qint32 [required]
    */
    virtual void getV3ProjectsIdIssuesNoteableIdNotesNoteId(const QString &id, const qint32 &note_id, const qint32 &noteable_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getV3ProjectsIdKeys(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key_id qint32 [required]
    */
    virtual void getV3ProjectsIdKeysKeyId(const QString &id, const qint32 &key_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getV3ProjectsIdLabels(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  query QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdMembers(const QString &id, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id qint32 [required]
    */
    virtual void getV3ProjectsIdMembersUserId(const QString &id, const qint32 &user_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    */
    virtual void getV3ProjectsIdMergeRequestMergeRequestId(const QString &id, const qint32 &merge_request_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    */
    virtual void getV3ProjectsIdMergeRequestMergeRequestIdChanges(const QString &id, const qint32 &merge_request_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdMergeRequestMergeRequestIdClosesIssues(const QString &id, const qint32 &merge_request_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdMergeRequestMergeRequestIdComments(const QString &id, const qint32 &merge_request_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    */
    virtual void getV3ProjectsIdMergeRequestMergeRequestIdCommits(const QString &id, const qint32 &merge_request_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  state QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  iid QList<qint32> [optional]
    */
    virtual void getV3ProjectsIdMergeRequests(const QString &id, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &iid = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    */
    virtual void getV3ProjectsIdMergeRequestsMergeRequestId(const QString &id, const qint32 &merge_request_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji(const QString &id, const qint32 &merge_request_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  award_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  merge_request_id qint32 [required]
    */
    virtual void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(const qint32 &award_id, const qint32 &id, const qint32 &merge_request_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    */
    virtual void getV3ProjectsIdMergeRequestsMergeRequestIdChanges(const QString &id, const qint32 &merge_request_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues(const QString &id, const qint32 &merge_request_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdMergeRequestsMergeRequestIdComments(const QString &id, const qint32 &merge_request_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    */
    virtual void getV3ProjectsIdMergeRequestsMergeRequestIdCommits(const QString &id, const qint32 &merge_request_id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(const qint32 &id, const qint32 &merge_request_id, const qint32 &note_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  award_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    */
    virtual void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(const qint32 &award_id, const qint32 &id, const qint32 &merge_request_id, const qint32 &note_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    */
    virtual void getV3ProjectsIdMergeRequestsMergeRequestIdTimeStats(const QString &id, const qint32 &merge_request_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    */
    virtual void getV3ProjectsIdMergeRequestsMergeRequestIdVersions(const QString &id, const qint32 &merge_request_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  version_id qint32 [required]
    */
    virtual void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId(const QString &id, const qint32 &merge_request_id, const qint32 &version_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  noteable_id qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdMergeRequestsNoteableIdNotes(const QString &id, const qint32 &noteable_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  note_id qint32 [required]
    * @param[in]  noteable_id qint32 [required]
    */
    virtual void getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(const QString &id, const qint32 &note_id, const qint32 &noteable_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  state QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  iid QList<qint32> [optional]
    */
    virtual void getV3ProjectsIdMilestones(const QString &id, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &iid = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  milestone_id qint32 [required]
    */
    virtual void getV3ProjectsIdMilestonesMilestoneId(const QString &id, const qint32 &milestone_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  milestone_id qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdMilestonesMilestoneIdIssues(const QString &id, const qint32 &milestone_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getV3ProjectsIdNotificationSettings(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  scope QString [optional]
    */
    virtual void getV3ProjectsIdPipelines(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  pipeline_id qint32 [required]
    */
    virtual void getV3ProjectsIdPipelinesPipelineId(const QString &id, const qint32 &pipeline_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  sha QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void getV3ProjectsIdRepositoryArchive(const QString &id, const ::OpenAPI::OptionalParam<QString> &sha = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  sha QString [required]
    * @param[in]  filepath QString [required]
    */
    virtual void getV3ProjectsIdRepositoryBlobsSha(const QString &id, const QString &sha, const QString &filepath);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getV3ProjectsIdRepositoryBranches(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void getV3ProjectsIdRepositoryBranchesBranch(const QString &id, const QString &branch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  ref_name QString [optional]
    * @param[in]  since QString [optional]
    * @param[in]  until QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  path QString [optional]
    */
    virtual void getV3ProjectsIdRepositoryCommits(const QString &id, const ::OpenAPI::OptionalParam<QString> &ref_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &until = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  sha QString [required]
    */
    virtual void getV3ProjectsIdRepositoryCommitsSha(const QString &id, const QString &sha);

    /**
    * @param[in]  id QString [required]
    * @param[in]  sha QString [required]
    * @param[in]  filepath QString [required]
    */
    virtual void getV3ProjectsIdRepositoryCommitsShaBlob(const QString &id, const QString &sha, const QString &filepath);

    /**
    * @param[in]  id QString [required]
    * @param[in]  sha QString [required]
    * @param[in]  scope QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdRepositoryCommitsShaBuilds(const QString &id, const QString &sha, const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  sha QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdRepositoryCommitsShaComments(const QString &id, const QString &sha, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  sha QString [required]
    */
    virtual void getV3ProjectsIdRepositoryCommitsShaDiff(const QString &id, const QString &sha);

    /**
    * @param[in]  id QString [required]
    * @param[in]  sha QString [required]
    * @param[in]  ref QString [optional]
    * @param[in]  stage QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  all QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdRepositoryCommitsShaStatuses(const QString &id, const QString &sha, const ::OpenAPI::OptionalParam<QString> &ref = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &all = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  from QString [required]
    * @param[in]  to QString [required]
    */
    virtual void getV3ProjectsIdRepositoryCompare(const QString &id, const QString &from, const QString &to);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getV3ProjectsIdRepositoryContributors(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  file_path QString [required]
    * @param[in]  ref QString [required]
    */
    virtual void getV3ProjectsIdRepositoryFiles(const QString &id, const QString &file_path, const QString &ref);

    /**
    * @param[in]  id QString [required]
    * @param[in]  sha QString [required]
    */
    virtual void getV3ProjectsIdRepositoryRawBlobsSha(const QString &id, const QString &sha);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getV3ProjectsIdRepositoryTags(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tag_name QString [required]
    */
    virtual void getV3ProjectsIdRepositoryTagsTagName(const QString &id, const QString &tag_name);

    /**
    * @param[in]  id QString [required]
    * @param[in]  ref_name QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  recursive bool [optional]
    */
    virtual void getV3ProjectsIdRepositoryTree(const QString &id, const ::OpenAPI::OptionalParam<QString> &ref_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &recursive = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  scope QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdRunners(const QString &id, const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_slug QString [required]
    * @param[in]  id qint32 [required]
    */
    virtual void getV3ProjectsIdServicesServiceSlug(const QString &service_slug, const qint32 &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdSnippets(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  noteable_id qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdSnippetsNoteableIdNotes(const QString &id, const qint32 &noteable_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  note_id qint32 [required]
    * @param[in]  noteable_id qint32 [required]
    */
    virtual void getV3ProjectsIdSnippetsNoteableIdNotesNoteId(const QString &id, const qint32 &note_id, const qint32 &noteable_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  snippet_id qint32 [required]
    */
    virtual void getV3ProjectsIdSnippetsSnippetId(const QString &id, const qint32 &snippet_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  snippet_id qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdSnippetsSnippetIdAwardEmoji(const QString &id, const qint32 &snippet_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  award_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  snippet_id qint32 [required]
    */
    virtual void getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(const qint32 &award_id, const qint32 &id, const qint32 &snippet_id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  snippet_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(const qint32 &id, const qint32 &snippet_id, const qint32 &note_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  award_id qint32 [required]
    * @param[in]  id qint32 [required]
    * @param[in]  snippet_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    */
    virtual void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(const qint32 &award_id, const qint32 &id, const qint32 &snippet_id, const qint32 &note_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  snippet_id qint32 [required]
    */
    virtual void getV3ProjectsIdSnippetsSnippetIdRaw(const QString &id, const qint32 &snippet_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdTriggers(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getV3ProjectsIdTriggersToken(const QString &id, const QString &token);

    /**
    * @param[in]  id QString [required]
    * @param[in]  search QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdUsers(const QString &id, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsIdVariables(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  key QString [required]
    */
    virtual void getV3ProjectsIdVariablesKey(const QString &id, const QString &key);

    /**
    * @param[in]  order_by QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  archived bool [optional]
    * @param[in]  visibility QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  simple bool [optional]
    * @param[in]  statistics bool [optional]
    */
    virtual void getV3ProjectsOwned(const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &archived = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &visibility = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &simple = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &statistics = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  order_by QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3ProjectsSearchQuery(const QString &query, const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  order_by QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  archived bool [optional]
    * @param[in]  visibility QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  simple bool [optional]
    */
    virtual void getV3ProjectsStarred(const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &archived = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &visibility = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &simple = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  order_by QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  archived bool [optional]
    * @param[in]  visibility QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  simple bool [optional]
    */
    virtual void getV3ProjectsVisible(const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &archived = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &visibility = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &simple = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_post_v3_projects_request OAIPostV3Projects_request [required]
    */
    virtual void postV3Projects(const OAIPostV3Projects_request &oai_post_v3_projects_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_fork_id_request OAIPostV3ProjectsForkId_request [optional]
    */
    virtual void postV3ProjectsForkId(const QString &id, const ::OpenAPI::OptionalParam<OAIPostV3ProjectsForkId_request> &oai_post_v3_projects_fork_id_request = ::OpenAPI::OptionalParam<OAIPostV3ProjectsForkId_request>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void postV3ProjectsIdAccessRequests(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void postV3ProjectsIdArchive(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  board_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_boards_board_id_lists_request OAIPostV3ProjectsIdBoardsBoardIdLists_request [required]
    */
    virtual void postV3ProjectsIdBoardsBoardIdLists(const QString &id, const qint32 &board_id, const OAIPostV3ProjectsIdBoardsBoardIdLists_request &oai_post_v3_projects_id_boards_board_id_lists_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  build_id qint32 [required]
    */
    virtual void postV3ProjectsIdBuildsBuildIdArtifactsKeep(const QString &id, const qint32 &build_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  build_id qint32 [required]
    */
    virtual void postV3ProjectsIdBuildsBuildIdCancel(const QString &id, const qint32 &build_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  build_id qint32 [required]
    */
    virtual void postV3ProjectsIdBuildsBuildIdErase(const QString &id, const qint32 &build_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  build_id qint32 [required]
    */
    virtual void postV3ProjectsIdBuildsBuildIdPlay(const QString &id, const qint32 &build_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  build_id qint32 [required]
    */
    virtual void postV3ProjectsIdBuildsBuildIdRetry(const QString &id, const qint32 &build_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_deploy_keys_request OAIPostV3ProjectsIdDeployKeys_request [required]
    */
    virtual void postV3ProjectsIdDeployKeys(const QString &id, const OAIPostV3ProjectsIdDeployKeys_request &oai_post_v3_projects_id_deploy_keys_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key_id qint32 [required]
    */
    virtual void postV3ProjectsIdDeployKeysKeyIdEnable(const QString &id, const qint32 &key_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_environments_request OAIPostV3ProjectsIdEnvironments_request [required]
    */
    virtual void postV3ProjectsIdEnvironments(const QString &id, const OAIPostV3ProjectsIdEnvironments_request &oai_post_v3_projects_id_environments_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  forked_from_id QString [required]
    */
    virtual void postV3ProjectsIdForkForkedFromId(const QString &id, const QString &forked_from_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_hooks_request OAIPostV3ProjectsIdHooks_request [required]
    */
    virtual void postV3ProjectsIdHooks(const QString &id, const OAIPostV3ProjectsIdHooks_request &oai_post_v3_projects_id_hooks_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_issues_request OAIPostV3ProjectsIdIssues_request [required]
    */
    virtual void postV3ProjectsIdIssues(const QString &id, const OAIPostV3ProjectsIdIssues_request &oai_post_v3_projects_id_issues_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  issue_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_issues_issue_id_add_spent_time_request OAIPostV3ProjectsIdIssuesIssueIdAddSpentTime_request [required]
    */
    virtual void postV3ProjectsIdIssuesIssueIdAddSpentTime(const QString &id, const qint32 &issue_id, const OAIPostV3ProjectsIdIssuesIssueIdAddSpentTime_request &oai_post_v3_projects_id_issues_issue_id_add_spent_time_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  issue_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_issues_issue_id_award_emoji_request OAIPostV3ProjectsIdIssuesIssueIdAwardEmoji_request [required]
    */
    virtual void postV3ProjectsIdIssuesIssueIdAwardEmoji(const qint32 &id, const qint32 &issue_id, const OAIPostV3ProjectsIdIssuesIssueIdAwardEmoji_request &oai_post_v3_projects_id_issues_issue_id_award_emoji_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  issue_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_issues_issue_id_move_request OAIPostV3ProjectsIdIssuesIssueIdMove_request [required]
    */
    virtual void postV3ProjectsIdIssuesIssueIdMove(const QString &id, const qint32 &issue_id, const OAIPostV3ProjectsIdIssuesIssueIdMove_request &oai_post_v3_projects_id_issues_issue_id_move_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  issue_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_issues_issue_id_award_emoji_request OAIPostV3ProjectsIdIssuesIssueIdAwardEmoji_request [required]
    */
    virtual void postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(const qint32 &id, const qint32 &issue_id, const qint32 &note_id, const OAIPostV3ProjectsIdIssuesIssueIdAwardEmoji_request &oai_post_v3_projects_id_issues_issue_id_award_emoji_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  issue_id qint32 [required]
    */
    virtual void postV3ProjectsIdIssuesIssueIdResetSpentTime(const QString &id, const qint32 &issue_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  issue_id qint32 [required]
    */
    virtual void postV3ProjectsIdIssuesIssueIdResetTimeEstimate(const QString &id, const qint32 &issue_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  issue_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_issues_issue_id_add_spent_time_request OAIPostV3ProjectsIdIssuesIssueIdAddSpentTime_request [required]
    */
    virtual void postV3ProjectsIdIssuesIssueIdTimeEstimate(const QString &id, const qint32 &issue_id, const OAIPostV3ProjectsIdIssuesIssueIdAddSpentTime_request &oai_post_v3_projects_id_issues_issue_id_add_spent_time_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  issue_id qint32 [required]
    */
    virtual void postV3ProjectsIdIssuesIssueIdTodo(const QString &id, const qint32 &issue_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  noteable_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_issues_noteable_id_notes_request OAIPostV3ProjectsIdIssuesNoteableIdNotes_request [required]
    */
    virtual void postV3ProjectsIdIssuesNoteableIdNotes(const QString &id, const qint32 &noteable_id, const OAIPostV3ProjectsIdIssuesNoteableIdNotes_request &oai_post_v3_projects_id_issues_noteable_id_notes_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  subscribable_id QString [required]
    */
    virtual void postV3ProjectsIdIssuesSubscribableIdSubscription(const QString &id, const QString &subscribable_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_deploy_keys_request OAIPostV3ProjectsIdDeployKeys_request [required]
    */
    virtual void postV3ProjectsIdKeys(const QString &id, const OAIPostV3ProjectsIdDeployKeys_request &oai_post_v3_projects_id_deploy_keys_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key_id qint32 [required]
    */
    virtual void postV3ProjectsIdKeysKeyIdEnable(const QString &id, const qint32 &key_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_labels_request OAIPostV3ProjectsIdLabels_request [required]
    */
    virtual void postV3ProjectsIdLabels(const QString &id, const OAIPostV3ProjectsIdLabels_request &oai_post_v3_projects_id_labels_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  subscribable_id QString [required]
    */
    virtual void postV3ProjectsIdLabelsSubscribableIdSubscription(const QString &id, const QString &subscribable_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_groups_id_members_request OAIPostV3GroupsIdMembers_request [required]
    */
    virtual void postV3ProjectsIdMembers(const QString &id, const OAIPostV3GroupsIdMembers_request &oai_post_v3_groups_id_members_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    */
    virtual void postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds(const QString &id, const qint32 &merge_request_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_merge_request_merge_request_id_comments_request OAIPostV3ProjectsIdMergeRequestMergeRequestIdComments_request [required]
    */
    virtual void postV3ProjectsIdMergeRequestMergeRequestIdComments(const QString &id, const qint32 &merge_request_id, const OAIPostV3ProjectsIdMergeRequestMergeRequestIdComments_request &oai_post_v3_projects_id_merge_request_merge_request_id_comments_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  subscribable_id QString [required]
    */
    virtual void postV3ProjectsIdMergeRequestSubscribableIdSubscription(const QString &id, const QString &subscribable_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_merge_requests_request OAIPostV3ProjectsIdMergeRequests_request [required]
    */
    virtual void postV3ProjectsIdMergeRequests(const QString &id, const OAIPostV3ProjectsIdMergeRequests_request &oai_post_v3_projects_id_merge_requests_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_issues_issue_id_add_spent_time_request OAIPostV3ProjectsIdIssuesIssueIdAddSpentTime_request [required]
    */
    virtual void postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime(const QString &id, const qint32 &merge_request_id, const OAIPostV3ProjectsIdIssuesIssueIdAddSpentTime_request &oai_post_v3_projects_id_issues_issue_id_add_spent_time_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_issues_issue_id_award_emoji_request OAIPostV3ProjectsIdIssuesIssueIdAwardEmoji_request [required]
    */
    virtual void postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji(const qint32 &id, const qint32 &merge_request_id, const OAIPostV3ProjectsIdIssuesIssueIdAwardEmoji_request &oai_post_v3_projects_id_issues_issue_id_award_emoji_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    */
    virtual void postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds(const QString &id, const qint32 &merge_request_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_merge_request_merge_request_id_comments_request OAIPostV3ProjectsIdMergeRequestMergeRequestIdComments_request [required]
    */
    virtual void postV3ProjectsIdMergeRequestsMergeRequestIdComments(const QString &id, const qint32 &merge_request_id, const OAIPostV3ProjectsIdMergeRequestMergeRequestIdComments_request &oai_post_v3_projects_id_merge_request_merge_request_id_comments_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_issues_issue_id_award_emoji_request OAIPostV3ProjectsIdIssuesIssueIdAwardEmoji_request [required]
    */
    virtual void postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(const qint32 &id, const qint32 &merge_request_id, const qint32 &note_id, const OAIPostV3ProjectsIdIssuesIssueIdAwardEmoji_request &oai_post_v3_projects_id_issues_issue_id_award_emoji_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    */
    virtual void postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime(const QString &id, const qint32 &merge_request_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    */
    virtual void postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate(const QString &id, const qint32 &merge_request_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_issues_issue_id_add_spent_time_request OAIPostV3ProjectsIdIssuesIssueIdAddSpentTime_request [required]
    */
    virtual void postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate(const QString &id, const qint32 &merge_request_id, const OAIPostV3ProjectsIdIssuesIssueIdAddSpentTime_request &oai_post_v3_projects_id_issues_issue_id_add_spent_time_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    */
    virtual void postV3ProjectsIdMergeRequestsMergeRequestIdTodo(const QString &id, const qint32 &merge_request_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  noteable_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_issues_noteable_id_notes_request OAIPostV3ProjectsIdIssuesNoteableIdNotes_request [required]
    */
    virtual void postV3ProjectsIdMergeRequestsNoteableIdNotes(const QString &id, const qint32 &noteable_id, const OAIPostV3ProjectsIdIssuesNoteableIdNotes_request &oai_post_v3_projects_id_issues_noteable_id_notes_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  subscribable_id QString [required]
    */
    virtual void postV3ProjectsIdMergeRequestsSubscribableIdSubscription(const QString &id, const QString &subscribable_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_milestones_request OAIPostV3ProjectsIdMilestones_request [required]
    */
    virtual void postV3ProjectsIdMilestones(const QString &id, const OAIPostV3ProjectsIdMilestones_request &oai_post_v3_projects_id_milestones_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_pipeline_request OAIPostV3ProjectsIdPipeline_request [required]
    */
    virtual void postV3ProjectsIdPipeline(const QString &id, const OAIPostV3ProjectsIdPipeline_request &oai_post_v3_projects_id_pipeline_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  pipeline_id qint32 [required]
    */
    virtual void postV3ProjectsIdPipelinesPipelineIdCancel(const QString &id, const qint32 &pipeline_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  pipeline_id qint32 [required]
    */
    virtual void postV3ProjectsIdPipelinesPipelineIdRetry(const QString &id, const qint32 &pipeline_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_repository_branches_request OAIPostV3ProjectsIdRepositoryBranches_request [required]
    */
    virtual void postV3ProjectsIdRepositoryBranches(const QString &id, const OAIPostV3ProjectsIdRepositoryBranches_request &oai_post_v3_projects_id_repository_branches_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_repository_commits_request OAIPostV3ProjectsIdRepositoryCommits_request [required]
    */
    virtual void postV3ProjectsIdRepositoryCommits(const QString &id, const OAIPostV3ProjectsIdRepositoryCommits_request &oai_post_v3_projects_id_repository_commits_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  sha QString [required]
    * @param[in]  oai_post_v3_projects_id_repository_commits_sha_cherry_pick_request OAIPostV3ProjectsIdRepositoryCommitsShaCherryPick_request [required]
    */
    virtual void postV3ProjectsIdRepositoryCommitsShaCherryPick(const QString &id, const QString &sha, const OAIPostV3ProjectsIdRepositoryCommitsShaCherryPick_request &oai_post_v3_projects_id_repository_commits_sha_cherry_pick_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  sha QString [required]
    * @param[in]  oai_post_v3_projects_id_repository_commits_sha_comments_request OAIPostV3ProjectsIdRepositoryCommitsShaComments_request [required]
    */
    virtual void postV3ProjectsIdRepositoryCommitsShaComments(const QString &id, const QString &sha, const OAIPostV3ProjectsIdRepositoryCommitsShaComments_request &oai_post_v3_projects_id_repository_commits_sha_comments_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_put_v3_projects_id_repository_files_request OAIPutV3ProjectsIdRepositoryFiles_request [required]
    */
    virtual void postV3ProjectsIdRepositoryFiles(const QString &id, const OAIPutV3ProjectsIdRepositoryFiles_request &oai_put_v3_projects_id_repository_files_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_repository_tags_request OAIPostV3ProjectsIdRepositoryTags_request [required]
    */
    virtual void postV3ProjectsIdRepositoryTags(const QString &id, const OAIPostV3ProjectsIdRepositoryTags_request &oai_post_v3_projects_id_repository_tags_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tag_name QString [required]
    * @param[in]  oai_put_v3_projects_id_repository_tags_tag_name_release_request OAIPutV3ProjectsIdRepositoryTagsTagNameRelease_request [required]
    */
    virtual void postV3ProjectsIdRepositoryTagsTagNameRelease(const QString &id, const QString &tag_name, const OAIPutV3ProjectsIdRepositoryTagsTagNameRelease_request &oai_put_v3_projects_id_repository_tags_tag_name_release_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_runners_request OAIPostV3ProjectsIdRunners_request [required]
    */
    virtual void postV3ProjectsIdRunners(const QString &id, const OAIPostV3ProjectsIdRunners_request &oai_post_v3_projects_id_runners_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_put_v3_projects_id_services_mattermost_slash_commands_request OAIPutV3ProjectsIdServicesMattermostSlashCommands_request [required]
    */
    virtual void postV3ProjectsIdServicesMattermostSlashCommandsTrigger(const QString &id, const OAIPutV3ProjectsIdServicesMattermostSlashCommands_request &oai_put_v3_projects_id_services_mattermost_slash_commands_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_put_v3_projects_id_services_slack_slash_commands_request OAIPutV3ProjectsIdServicesSlackSlashCommands_request [required]
    */
    virtual void postV3ProjectsIdServicesSlackSlashCommandsTrigger(const QString &id, const OAIPutV3ProjectsIdServicesSlackSlashCommands_request &oai_put_v3_projects_id_services_slack_slash_commands_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_share_request OAIPostV3ProjectsIdShare_request [required]
    */
    virtual void postV3ProjectsIdShare(const QString &id, const OAIPostV3ProjectsIdShare_request &oai_post_v3_projects_id_share_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_snippets_request OAIPostV3ProjectsIdSnippets_request [required]
    */
    virtual void postV3ProjectsIdSnippets(const QString &id, const OAIPostV3ProjectsIdSnippets_request &oai_post_v3_projects_id_snippets_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  noteable_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_issues_noteable_id_notes_request OAIPostV3ProjectsIdIssuesNoteableIdNotes_request [required]
    */
    virtual void postV3ProjectsIdSnippetsNoteableIdNotes(const QString &id, const qint32 &noteable_id, const OAIPostV3ProjectsIdIssuesNoteableIdNotes_request &oai_post_v3_projects_id_issues_noteable_id_notes_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  snippet_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_issues_issue_id_award_emoji_request OAIPostV3ProjectsIdIssuesIssueIdAwardEmoji_request [required]
    */
    virtual void postV3ProjectsIdSnippetsSnippetIdAwardEmoji(const qint32 &id, const qint32 &snippet_id, const OAIPostV3ProjectsIdIssuesIssueIdAwardEmoji_request &oai_post_v3_projects_id_issues_issue_id_award_emoji_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  snippet_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_issues_issue_id_award_emoji_request OAIPostV3ProjectsIdIssuesIssueIdAwardEmoji_request [required]
    */
    virtual void postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(const qint32 &id, const qint32 &snippet_id, const qint32 &note_id, const OAIPostV3ProjectsIdIssuesIssueIdAwardEmoji_request &oai_post_v3_projects_id_issues_issue_id_award_emoji_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void postV3ProjectsIdStar(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  sha QString [required]
    * @param[in]  oai_post_v3_projects_id_statuses_sha_request OAIPostV3ProjectsIdStatusesSha_request [required]
    */
    virtual void postV3ProjectsIdStatusesSha(const QString &id, const QString &sha, const OAIPostV3ProjectsIdStatusesSha_request &oai_post_v3_projects_id_statuses_sha_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void postV3ProjectsIdTriggers(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void postV3ProjectsIdUnarchive(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_uploads_request OAIPostV3ProjectsIdUploads_request [required]
    */
    virtual void postV3ProjectsIdUploads(const QString &id, const OAIPostV3ProjectsIdUploads_request &oai_post_v3_projects_id_uploads_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_post_v3_projects_id_variables_request OAIPostV3ProjectsIdVariables_request [required]
    */
    virtual void postV3ProjectsIdVariables(const QString &id, const OAIPostV3ProjectsIdVariables_request &oai_post_v3_projects_id_variables_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  ref QString [required]
    * @param[in]  oai_post_v3_projects_id_ref_ref_trigger_builds_request OAIPostV3ProjectsId_refRef_triggerBuilds_request [required]
    */
    virtual void postV3ProjectsId_refReftriggerBuilds(const QString &id, const QString &ref, const OAIPostV3ProjectsId_refRef_triggerBuilds_request &oai_post_v3_projects_id_ref_ref_trigger_builds_request);

    /**
    * @param[in]  user_id qint32 [required]
    * @param[in]  oai_post_v3_projects_user_user_id_request OAIPostV3ProjectsUserUserId_request [required]
    */
    virtual void postV3ProjectsUserUserId(const qint32 &user_id, const OAIPostV3ProjectsUserUserId_request &oai_post_v3_projects_user_user_id_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_put_v3_projects_id_request OAIPutV3ProjectsId_request [optional]
    */
    virtual void putV3ProjectsId(const QString &id, const ::OpenAPI::OptionalParam<OAIPutV3ProjectsId_request> &oai_put_v3_projects_id_request = ::OpenAPI::OptionalParam<OAIPutV3ProjectsId_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id qint32 [required]
    * @param[in]  oai_put_v3_groups_id_access_requests_user_id_approve_request OAIPutV3GroupsIdAccessRequestsUserIdApprove_request [optional]
    */
    virtual void putV3ProjectsIdAccessRequestsUserIdApprove(const QString &id, const qint32 &user_id, const ::OpenAPI::OptionalParam<OAIPutV3GroupsIdAccessRequestsUserIdApprove_request> &oai_put_v3_groups_id_access_requests_user_id_approve_request = ::OpenAPI::OptionalParam<OAIPutV3GroupsIdAccessRequestsUserIdApprove_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  board_id qint32 [required]
    * @param[in]  list_id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_boards_board_id_lists_list_id_request OAIPutV3ProjectsIdBoardsBoardIdListsListId_request [required]
    */
    virtual void putV3ProjectsIdBoardsBoardIdListsListId(const QString &id, const qint32 &board_id, const qint32 &list_id, const OAIPutV3ProjectsIdBoardsBoardIdListsListId_request &oai_put_v3_projects_id_boards_board_id_lists_list_id_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  environment_id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_environments_environment_id_request OAIPutV3ProjectsIdEnvironmentsEnvironmentId_request [optional]
    */
    virtual void putV3ProjectsIdEnvironmentsEnvironmentId(const QString &id, const qint32 &environment_id, const ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdEnvironmentsEnvironmentId_request> &oai_put_v3_projects_id_environments_environment_id_request = ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdEnvironmentsEnvironmentId_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  hook_id qint32 [required]
    * @param[in]  oai_post_v3_projects_id_hooks_request OAIPostV3ProjectsIdHooks_request [required]
    */
    virtual void putV3ProjectsIdHooksHookId(const QString &id, const qint32 &hook_id, const OAIPostV3ProjectsIdHooks_request &oai_post_v3_projects_id_hooks_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  issue_id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_issues_issue_id_request OAIPutV3ProjectsIdIssuesIssueId_request [optional]
    */
    virtual void putV3ProjectsIdIssuesIssueId(const QString &id, const qint32 &issue_id, const ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdIssuesIssueId_request> &oai_put_v3_projects_id_issues_issue_id_request = ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdIssuesIssueId_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  noteable_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_issues_noteable_id_notes_note_id_request OAIPutV3ProjectsIdIssuesNoteableIdNotesNoteId_request [required]
    */
    virtual void putV3ProjectsIdIssuesNoteableIdNotesNoteId(const QString &id, const qint32 &noteable_id, const qint32 &note_id, const OAIPutV3ProjectsIdIssuesNoteableIdNotesNoteId_request &oai_put_v3_projects_id_issues_noteable_id_notes_note_id_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_put_v3_projects_id_labels_request OAIPutV3ProjectsIdLabels_request [required]
    */
    virtual void putV3ProjectsIdLabels(const QString &id, const OAIPutV3ProjectsIdLabels_request &oai_put_v3_projects_id_labels_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id qint32 [required]
    * @param[in]  oai_put_v3_groups_id_members_user_id_request OAIPutV3GroupsIdMembersUserId_request [required]
    */
    virtual void putV3ProjectsIdMembersUserId(const QString &id, const qint32 &user_id, const OAIPutV3GroupsIdMembersUserId_request &oai_put_v3_groups_id_members_user_id_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_merge_request_merge_request_id_request OAIPutV3ProjectsIdMergeRequestMergeRequestId_request [optional]
    */
    virtual void putV3ProjectsIdMergeRequestMergeRequestId(const QString &id, const qint32 &merge_request_id, const ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdMergeRequestMergeRequestId_request> &oai_put_v3_projects_id_merge_request_merge_request_id_request = ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdMergeRequestMergeRequestId_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_merge_request_merge_request_id_merge_request OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request [optional]
    */
    virtual void putV3ProjectsIdMergeRequestMergeRequestIdMerge(const QString &id, const qint32 &merge_request_id, const ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request> &oai_put_v3_projects_id_merge_request_merge_request_id_merge_request = ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_merge_request_merge_request_id_request OAIPutV3ProjectsIdMergeRequestMergeRequestId_request [optional]
    */
    virtual void putV3ProjectsIdMergeRequestsMergeRequestId(const QString &id, const qint32 &merge_request_id, const ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdMergeRequestMergeRequestId_request> &oai_put_v3_projects_id_merge_request_merge_request_id_request = ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdMergeRequestMergeRequestId_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  merge_request_id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_merge_request_merge_request_id_merge_request OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request [optional]
    */
    virtual void putV3ProjectsIdMergeRequestsMergeRequestIdMerge(const QString &id, const qint32 &merge_request_id, const ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request> &oai_put_v3_projects_id_merge_request_merge_request_id_merge_request = ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdMergeRequestMergeRequestIdMerge_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  noteable_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_issues_noteable_id_notes_note_id_request OAIPutV3ProjectsIdIssuesNoteableIdNotesNoteId_request [required]
    */
    virtual void putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(const QString &id, const qint32 &noteable_id, const qint32 &note_id, const OAIPutV3ProjectsIdIssuesNoteableIdNotesNoteId_request &oai_put_v3_projects_id_issues_noteable_id_notes_note_id_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  milestone_id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_milestones_milestone_id_request OAIPutV3ProjectsIdMilestonesMilestoneId_request [optional]
    */
    virtual void putV3ProjectsIdMilestonesMilestoneId(const QString &id, const qint32 &milestone_id, const ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdMilestonesMilestoneId_request> &oai_put_v3_projects_id_milestones_milestone_id_request = ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdMilestonesMilestoneId_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_put_v3_projects_id_notification_settings_request OAIPutV3ProjectsIdNotificationSettings_request [optional]
    */
    virtual void putV3ProjectsIdNotificationSettings(const QString &id, const ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdNotificationSettings_request> &oai_put_v3_projects_id_notification_settings_request = ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdNotificationSettings_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_put_v3_projects_id_repository_branches_branch_protect_request OAIPutV3ProjectsIdRepositoryBranchesBranchProtect_request [optional]
    */
    virtual void putV3ProjectsIdRepositoryBranchesBranchProtect(const QString &id, const QString &branch, const ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdRepositoryBranchesBranchProtect_request> &oai_put_v3_projects_id_repository_branches_branch_protect_request = ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdRepositoryBranchesBranchProtect_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void putV3ProjectsIdRepositoryBranchesBranchUnprotect(const QString &id, const QString &branch);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_put_v3_projects_id_repository_files_request OAIPutV3ProjectsIdRepositoryFiles_request [required]
    */
    virtual void putV3ProjectsIdRepositoryFiles(const QString &id, const OAIPutV3ProjectsIdRepositoryFiles_request &oai_put_v3_projects_id_repository_files_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tag_name QString [required]
    * @param[in]  oai_put_v3_projects_id_repository_tags_tag_name_release_request OAIPutV3ProjectsIdRepositoryTagsTagNameRelease_request [required]
    */
    virtual void putV3ProjectsIdRepositoryTagsTagNameRelease(const QString &id, const QString &tag_name, const OAIPutV3ProjectsIdRepositoryTagsTagNameRelease_request &oai_put_v3_projects_id_repository_tags_tag_name_release_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_asana_request OAIPutV3ProjectsIdServicesAsana_request [required]
    */
    virtual void putV3ProjectsIdServicesAsana(const qint32 &id, const OAIPutV3ProjectsIdServicesAsana_request &oai_put_v3_projects_id_services_asana_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_assembla_request OAIPutV3ProjectsIdServicesAssembla_request [required]
    */
    virtual void putV3ProjectsIdServicesAssembla(const qint32 &id, const OAIPutV3ProjectsIdServicesAssembla_request &oai_put_v3_projects_id_services_assembla_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_bamboo_request OAIPutV3ProjectsIdServicesBamboo_request [required]
    */
    virtual void putV3ProjectsIdServicesBamboo(const qint32 &id, const OAIPutV3ProjectsIdServicesBamboo_request &oai_put_v3_projects_id_services_bamboo_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_bugzilla_request OAIPutV3ProjectsIdServicesBugzilla_request [required]
    */
    virtual void putV3ProjectsIdServicesBugzilla(const qint32 &id, const OAIPutV3ProjectsIdServicesBugzilla_request &oai_put_v3_projects_id_services_bugzilla_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_buildkite_request OAIPutV3ProjectsIdServicesBuildkite_request [required]
    */
    virtual void putV3ProjectsIdServicesBuildkite(const qint32 &id, const OAIPutV3ProjectsIdServicesBuildkite_request &oai_put_v3_projects_id_services_buildkite_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_builds_email_request OAIPutV3ProjectsIdServicesBuildsEmail_request [required]
    */
    virtual void putV3ProjectsIdServicesBuildsEmail(const qint32 &id, const OAIPutV3ProjectsIdServicesBuildsEmail_request &oai_put_v3_projects_id_services_builds_email_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_campfire_request OAIPutV3ProjectsIdServicesCampfire_request [required]
    */
    virtual void putV3ProjectsIdServicesCampfire(const qint32 &id, const OAIPutV3ProjectsIdServicesCampfire_request &oai_put_v3_projects_id_services_campfire_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_bugzilla_request OAIPutV3ProjectsIdServicesBugzilla_request [required]
    */
    virtual void putV3ProjectsIdServicesCustomIssueTracker(const qint32 &id, const OAIPutV3ProjectsIdServicesBugzilla_request &oai_put_v3_projects_id_services_bugzilla_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_drone_ci_request OAIPutV3ProjectsIdServicesDroneCi_request [required]
    */
    virtual void putV3ProjectsIdServicesDroneCi(const qint32 &id, const OAIPutV3ProjectsIdServicesDroneCi_request &oai_put_v3_projects_id_services_drone_ci_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_emails_on_push_request OAIPutV3ProjectsIdServicesEmailsOnPush_request [required]
    */
    virtual void putV3ProjectsIdServicesEmailsOnPush(const qint32 &id, const OAIPutV3ProjectsIdServicesEmailsOnPush_request &oai_put_v3_projects_id_services_emails_on_push_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_external_wiki_request OAIPutV3ProjectsIdServicesExternalWiki_request [required]
    */
    virtual void putV3ProjectsIdServicesExternalWiki(const qint32 &id, const OAIPutV3ProjectsIdServicesExternalWiki_request &oai_put_v3_projects_id_services_external_wiki_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_flowdock_request OAIPutV3ProjectsIdServicesFlowdock_request [required]
    */
    virtual void putV3ProjectsIdServicesFlowdock(const qint32 &id, const OAIPutV3ProjectsIdServicesFlowdock_request &oai_put_v3_projects_id_services_flowdock_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_gemnasium_request OAIPutV3ProjectsIdServicesGemnasium_request [required]
    */
    virtual void putV3ProjectsIdServicesGemnasium(const qint32 &id, const OAIPutV3ProjectsIdServicesGemnasium_request &oai_put_v3_projects_id_services_gemnasium_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_hipchat_request OAIPutV3ProjectsIdServicesHipchat_request [required]
    */
    virtual void putV3ProjectsIdServicesHipchat(const qint32 &id, const OAIPutV3ProjectsIdServicesHipchat_request &oai_put_v3_projects_id_services_hipchat_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_irker_request OAIPutV3ProjectsIdServicesIrker_request [required]
    */
    virtual void putV3ProjectsIdServicesIrker(const qint32 &id, const OAIPutV3ProjectsIdServicesIrker_request &oai_put_v3_projects_id_services_irker_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_jira_request OAIPutV3ProjectsIdServicesJira_request [required]
    */
    virtual void putV3ProjectsIdServicesJira(const qint32 &id, const OAIPutV3ProjectsIdServicesJira_request &oai_put_v3_projects_id_services_jira_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_kubernetes_request OAIPutV3ProjectsIdServicesKubernetes_request [required]
    */
    virtual void putV3ProjectsIdServicesKubernetes(const qint32 &id, const OAIPutV3ProjectsIdServicesKubernetes_request &oai_put_v3_projects_id_services_kubernetes_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_mattermost_request OAIPutV3ProjectsIdServicesMattermost_request [required]
    */
    virtual void putV3ProjectsIdServicesMattermost(const qint32 &id, const OAIPutV3ProjectsIdServicesMattermost_request &oai_put_v3_projects_id_services_mattermost_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_mattermost_slash_commands_request OAIPutV3ProjectsIdServicesMattermostSlashCommands_request [required]
    */
    virtual void putV3ProjectsIdServicesMattermostSlashCommands(const qint32 &id, const OAIPutV3ProjectsIdServicesMattermostSlashCommands_request &oai_put_v3_projects_id_services_mattermost_slash_commands_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_pipelines_email_request OAIPutV3ProjectsIdServicesPipelinesEmail_request [required]
    */
    virtual void putV3ProjectsIdServicesPipelinesEmail(const qint32 &id, const OAIPutV3ProjectsIdServicesPipelinesEmail_request &oai_put_v3_projects_id_services_pipelines_email_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_pivotaltracker_request OAIPutV3ProjectsIdServicesPivotaltracker_request [required]
    */
    virtual void putV3ProjectsIdServicesPivotaltracker(const qint32 &id, const OAIPutV3ProjectsIdServicesPivotaltracker_request &oai_put_v3_projects_id_services_pivotaltracker_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_pushover_request OAIPutV3ProjectsIdServicesPushover_request [required]
    */
    virtual void putV3ProjectsIdServicesPushover(const qint32 &id, const OAIPutV3ProjectsIdServicesPushover_request &oai_put_v3_projects_id_services_pushover_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_redmine_request OAIPutV3ProjectsIdServicesRedmine_request [required]
    */
    virtual void putV3ProjectsIdServicesRedmine(const qint32 &id, const OAIPutV3ProjectsIdServicesRedmine_request &oai_put_v3_projects_id_services_redmine_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_slack_request OAIPutV3ProjectsIdServicesSlack_request [required]
    */
    virtual void putV3ProjectsIdServicesSlack(const qint32 &id, const OAIPutV3ProjectsIdServicesSlack_request &oai_put_v3_projects_id_services_slack_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_slack_slash_commands_request OAIPutV3ProjectsIdServicesSlackSlashCommands_request [required]
    */
    virtual void putV3ProjectsIdServicesSlackSlashCommands(const qint32 &id, const OAIPutV3ProjectsIdServicesSlackSlashCommands_request &oai_put_v3_projects_id_services_slack_slash_commands_request);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_services_teamcity_request OAIPutV3ProjectsIdServicesTeamcity_request [required]
    */
    virtual void putV3ProjectsIdServicesTeamcity(const qint32 &id, const OAIPutV3ProjectsIdServicesTeamcity_request &oai_put_v3_projects_id_services_teamcity_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  noteable_id qint32 [required]
    * @param[in]  note_id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_issues_noteable_id_notes_note_id_request OAIPutV3ProjectsIdIssuesNoteableIdNotesNoteId_request [required]
    */
    virtual void putV3ProjectsIdSnippetsNoteableIdNotesNoteId(const QString &id, const qint32 &noteable_id, const qint32 &note_id, const OAIPutV3ProjectsIdIssuesNoteableIdNotesNoteId_request &oai_put_v3_projects_id_issues_noteable_id_notes_note_id_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  snippet_id qint32 [required]
    * @param[in]  oai_put_v3_projects_id_snippets_snippet_id_request OAIPutV3ProjectsIdSnippetsSnippetId_request [optional]
    */
    virtual void putV3ProjectsIdSnippetsSnippetId(const QString &id, const qint32 &snippet_id, const ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdSnippetsSnippetId_request> &oai_put_v3_projects_id_snippets_snippet_id_request = ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdSnippetsSnippetId_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  key QString [required]
    * @param[in]  oai_put_v3_projects_id_variables_key_request OAIPutV3ProjectsIdVariablesKey_request [optional]
    */
    virtual void putV3ProjectsIdVariablesKey(const QString &id, const QString &key, const ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdVariablesKey_request> &oai_put_v3_projects_id_variables_key_request = ::OpenAPI::OptionalParam<OAIPutV3ProjectsIdVariablesKey_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteV3ProjectsIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdAccessRequestsUserIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdBoardsBoardIdListsListIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdDeployKeysKeyIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdDeployKeysKeyIdDisableCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdEnvironmentsEnvironmentIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdForkCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdHooksHookIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdIssuesIssueIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdIssuesSubscribableIdSubscriptionCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdKeysKeyIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdKeysKeyIdDisableCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdLabelsCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdLabelsSubscribableIdSubscriptionCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdMembersUserIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdRepositoryBranchesBranchCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdRepositoryFilesCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdRepositoryMergedBranchesCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdRepositoryTagsTagNameCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdRunnersRunnerIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdServicesServiceSlugCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdShareGroupIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdSnippetsSnippetIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdStarCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdTriggersTokenCallback(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdVariablesKeyCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsAllCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdAccessRequestsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdBoardsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdBoardsBoardIdListsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdBoardsBoardIdListsListIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdBuildsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdBuildsArtifactsRefNameDownloadCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdBuildsBuildIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdBuildsBuildIdArtifactsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdBuildsBuildIdTraceCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdDeployKeysCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdDeployKeysKeyIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdDeploymentsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdDeploymentsDeploymentIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdEnvironmentsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdEventsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdHooksCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdHooksHookIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdIssuesCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdIssuesIssueIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdIssuesIssueIdAwardEmojiCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdIssuesIssueIdTimeStatsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdIssuesNoteableIdNotesCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdIssuesNoteableIdNotesNoteIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdKeysCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdKeysKeyIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdLabelsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMembersCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMembersUserIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestMergeRequestIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestMergeRequestIdChangesCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestMergeRequestIdCommentsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestMergeRequestIdCommitsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestsMergeRequestIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestsMergeRequestIdChangesCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestsMergeRequestIdCommentsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestsMergeRequestIdCommitsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestsNoteableIdNotesCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMilestonesCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMilestonesMilestoneIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMilestonesMilestoneIdIssuesCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdNotificationSettingsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdPipelinesCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdPipelinesPipelineIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryArchiveCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryBlobsShaCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryBranchesCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryBranchesBranchCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryCommitsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryCommitsShaCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryCommitsShaBlobCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryCommitsShaBuildsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryCommitsShaCommentsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryCommitsShaDiffCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryCommitsShaStatusesCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryCompareCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryContributorsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryFilesCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryRawBlobsShaCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryTagsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryTagsTagNameCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryTreeCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRunnersCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdServicesServiceSlugCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdSnippetsCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdSnippetsNoteableIdNotesCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdSnippetsNoteableIdNotesNoteIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdSnippetsSnippetIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdSnippetsSnippetIdAwardEmojiCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdSnippetsSnippetIdRawCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdTriggersCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdTriggersTokenCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdUsersCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdVariablesCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdVariablesKeyCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsOwnedCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsSearchQueryCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsStarredCallback(OAIHttpRequestWorker *worker);
    void getV3ProjectsVisibleCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsForkIdCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdAccessRequestsCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdArchiveCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdBoardsBoardIdListsCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdBuildsBuildIdArtifactsKeepCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdBuildsBuildIdCancelCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdBuildsBuildIdEraseCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdBuildsBuildIdPlayCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdBuildsBuildIdRetryCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdDeployKeysCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdDeployKeysKeyIdEnableCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdEnvironmentsCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdForkForkedFromIdCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdHooksCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdIssuesCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdIssuesIssueIdAddSpentTimeCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdIssuesIssueIdAwardEmojiCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdIssuesIssueIdMoveCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdIssuesIssueIdResetSpentTimeCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdIssuesIssueIdResetTimeEstimateCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdIssuesIssueIdTimeEstimateCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdIssuesIssueIdTodoCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdIssuesNoteableIdNotesCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdIssuesSubscribableIdSubscriptionCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdKeysCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdKeysKeyIdEnableCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdLabelsCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdLabelsSubscribableIdSubscriptionCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMembersCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestMergeRequestIdCommentsCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestSubscribableIdSubscriptionCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestsCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestsMergeRequestIdCommentsCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestsMergeRequestIdTodoCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestsNoteableIdNotesCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMilestonesCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdPipelineCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdPipelinesPipelineIdCancelCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdPipelinesPipelineIdRetryCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdRepositoryBranchesCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdRepositoryCommitsCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdRepositoryCommitsShaCherryPickCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdRepositoryCommitsShaCommentsCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdRepositoryFilesCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdRepositoryTagsCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdRepositoryTagsTagNameReleaseCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdRunnersCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdServicesMattermostSlashCommandsTriggerCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdServicesSlackSlashCommandsTriggerCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdShareCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdSnippetsCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdSnippetsNoteableIdNotesCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdSnippetsSnippetIdAwardEmojiCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdStarCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdStatusesShaCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdTriggersCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdUnarchiveCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdUploadsCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdVariablesCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsId_refReftriggerBuildsCallback(OAIHttpRequestWorker *worker);
    void postV3ProjectsUserUserIdCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdAccessRequestsUserIdApproveCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdBoardsBoardIdListsListIdCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdEnvironmentsEnvironmentIdCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdHooksHookIdCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdIssuesIssueIdCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdIssuesNoteableIdNotesNoteIdCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdLabelsCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdMembersUserIdCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdMergeRequestMergeRequestIdCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdMergeRequestMergeRequestIdMergeCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdMergeRequestsMergeRequestIdCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdMergeRequestsMergeRequestIdMergeCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdMilestonesMilestoneIdCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdNotificationSettingsCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdRepositoryBranchesBranchProtectCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdRepositoryBranchesBranchUnprotectCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdRepositoryFilesCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdRepositoryTagsTagNameReleaseCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesAsanaCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesAssemblaCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesBambooCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesBugzillaCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesBuildkiteCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesBuildsEmailCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesCampfireCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesCustomIssueTrackerCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesDroneCiCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesEmailsOnPushCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesExternalWikiCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesFlowdockCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesGemnasiumCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesHipchatCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesIrkerCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesJiraCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesKubernetesCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesMattermostCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesMattermostSlashCommandsCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesPipelinesEmailCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesPivotaltrackerCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesPushoverCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesRedmineCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesSlackCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesSlackSlashCommandsCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesTeamcityCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdSnippetsNoteableIdNotesNoteIdCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdSnippetsSnippetIdCallback(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdVariablesKeyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteV3ProjectsIdSignal();
    void deleteV3ProjectsIdAccessRequestsUserIdSignal();
    void deleteV3ProjectsIdBoardsBoardIdListsListIdSignal(OAIList summary);
    void deleteV3ProjectsIdDeployKeysKeyIdSignal(OAISSHKey summary);
    void deleteV3ProjectsIdDeployKeysKeyIdDisableSignal(OAISSHKey summary);
    void deleteV3ProjectsIdEnvironmentsEnvironmentIdSignal(OAIEnvironment summary);
    void deleteV3ProjectsIdForkSignal();
    void deleteV3ProjectsIdHooksHookIdSignal(OAIProjectHook summary);
    void deleteV3ProjectsIdIssuesIssueIdSignal();
    void deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdSignal(OAIAwardEmoji summary);
    void deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdSignal(OAIAwardEmoji summary);
    void deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdSignal(OAINote summary);
    void deleteV3ProjectsIdIssuesSubscribableIdSubscriptionSignal(OAIIssue summary);
    void deleteV3ProjectsIdKeysKeyIdSignal(OAISSHKey summary);
    void deleteV3ProjectsIdKeysKeyIdDisableSignal(OAISSHKey summary);
    void deleteV3ProjectsIdLabelsSignal(OAILabel summary);
    void deleteV3ProjectsIdLabelsSubscribableIdSubscriptionSignal(OAILabel summary);
    void deleteV3ProjectsIdMembersUserIdSignal();
    void deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionSignal(OAIMergeRequest summary);
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdSignal();
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdSignal(OAIAwardEmoji summary);
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdSignal(OAIAwardEmoji summary);
    void deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignal(OAINote summary);
    void deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionSignal(OAIMergeRequest summary);
    void deleteV3ProjectsIdRepositoryBranchesBranchSignal();
    void deleteV3ProjectsIdRepositoryFilesSignal();
    void deleteV3ProjectsIdRepositoryMergedBranchesSignal();
    void deleteV3ProjectsIdRepositoryTagsTagNameSignal();
    void deleteV3ProjectsIdRunnersRunnerIdSignal(OAIRunner summary);
    void deleteV3ProjectsIdServicesServiceSlugSignal();
    void deleteV3ProjectsIdShareGroupIdSignal();
    void deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignal(OAINote summary);
    void deleteV3ProjectsIdSnippetsSnippetIdSignal();
    void deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdSignal(OAIAwardEmoji summary);
    void deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdSignal(OAIAwardEmoji summary);
    void deleteV3ProjectsIdStarSignal(OAIProject summary);
    void deleteV3ProjectsIdTriggersTokenSignal(OAITrigger summary);
    void deleteV3ProjectsIdVariablesKeySignal(OAIVariable summary);
    void getV3ProjectsSignal(OAIBasicProjectDetails summary);
    void getV3ProjectsAllSignal(OAIBasicProjectDetails summary);
    void getV3ProjectsIdSignal(OAIProjectWithAccess summary);
    void getV3ProjectsIdAccessRequestsSignal(OAIAccessRequester summary);
    void getV3ProjectsIdBoardsSignal(OAIBoard summary);
    void getV3ProjectsIdBoardsBoardIdListsSignal(OAIList summary);
    void getV3ProjectsIdBoardsBoardIdListsListIdSignal(OAIList summary);
    void getV3ProjectsIdBuildsSignal(OAIBuild summary);
    void getV3ProjectsIdBuildsArtifactsRefNameDownloadSignal();
    void getV3ProjectsIdBuildsBuildIdSignal(OAIBuild summary);
    void getV3ProjectsIdBuildsBuildIdArtifactsSignal();
    void getV3ProjectsIdBuildsBuildIdTraceSignal();
    void getV3ProjectsIdDeployKeysSignal(OAISSHKey summary);
    void getV3ProjectsIdDeployKeysKeyIdSignal(OAISSHKey summary);
    void getV3ProjectsIdDeploymentsSignal(OAIDeployment summary);
    void getV3ProjectsIdDeploymentsDeploymentIdSignal(OAIDeployment summary);
    void getV3ProjectsIdEnvironmentsSignal(OAIEnvironment summary);
    void getV3ProjectsIdEventsSignal(OAIEvent summary);
    void getV3ProjectsIdHooksSignal(OAIProjectHook summary);
    void getV3ProjectsIdHooksHookIdSignal(OAIProjectHook summary);
    void getV3ProjectsIdIssuesSignal(OAIIssue summary);
    void getV3ProjectsIdIssuesIssueIdSignal(OAIIssue summary);
    void getV3ProjectsIdIssuesIssueIdAwardEmojiSignal(OAIAwardEmoji summary);
    void getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdSignal(OAIAwardEmoji summary);
    void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiSignal(OAIAwardEmoji summary);
    void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdSignal(OAIAwardEmoji summary);
    void getV3ProjectsIdIssuesIssueIdTimeStatsSignal();
    void getV3ProjectsIdIssuesNoteableIdNotesSignal(OAINote summary);
    void getV3ProjectsIdIssuesNoteableIdNotesNoteIdSignal(OAINote summary);
    void getV3ProjectsIdKeysSignal(OAISSHKey summary);
    void getV3ProjectsIdKeysKeyIdSignal(OAISSHKey summary);
    void getV3ProjectsIdLabelsSignal(OAILabel summary);
    void getV3ProjectsIdMembersSignal(OAIMember summary);
    void getV3ProjectsIdMembersUserIdSignal(OAIMember summary);
    void getV3ProjectsIdMergeRequestMergeRequestIdSignal(OAIMergeRequest summary);
    void getV3ProjectsIdMergeRequestMergeRequestIdChangesSignal(OAIMergeRequestChanges summary);
    void getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesSignal(OAIMRNote summary);
    void getV3ProjectsIdMergeRequestMergeRequestIdCommentsSignal(OAIMRNote summary);
    void getV3ProjectsIdMergeRequestMergeRequestIdCommitsSignal(OAIRepoCommit summary);
    void getV3ProjectsIdMergeRequestsSignal(OAIMergeRequest summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdSignal(OAIMergeRequest summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiSignal(OAIAwardEmoji summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdSignal(OAIAwardEmoji summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdChangesSignal(OAIMergeRequestChanges summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesSignal(OAIMRNote summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdCommentsSignal(OAIMRNote summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdCommitsSignal(OAIRepoCommit summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiSignal(OAIAwardEmoji summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdSignal(OAIAwardEmoji summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsSignal();
    void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsSignal(OAIMergeRequestDiff summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdSignal(OAIMergeRequestDiffFull summary);
    void getV3ProjectsIdMergeRequestsNoteableIdNotesSignal(OAINote summary);
    void getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignal(OAINote summary);
    void getV3ProjectsIdMilestonesSignal(OAIMilestone summary);
    void getV3ProjectsIdMilestonesMilestoneIdSignal(OAIMilestone summary);
    void getV3ProjectsIdMilestonesMilestoneIdIssuesSignal(OAIIssue summary);
    void getV3ProjectsIdNotificationSettingsSignal(OAINotificationSetting summary);
    void getV3ProjectsIdPipelinesSignal(OAIPipeline summary);
    void getV3ProjectsIdPipelinesPipelineIdSignal(OAIPipeline summary);
    void getV3ProjectsIdRepositoryArchiveSignal();
    void getV3ProjectsIdRepositoryBlobsShaSignal();
    void getV3ProjectsIdRepositoryBranchesSignal(OAIRepoBranch summary);
    void getV3ProjectsIdRepositoryBranchesBranchSignal(OAIRepoBranch summary);
    void getV3ProjectsIdRepositoryCommitsSignal(OAIRepoCommit summary);
    void getV3ProjectsIdRepositoryCommitsShaSignal(OAIRepoCommitDetail summary);
    void getV3ProjectsIdRepositoryCommitsShaBlobSignal();
    void getV3ProjectsIdRepositoryCommitsShaBuildsSignal(OAIBuild summary);
    void getV3ProjectsIdRepositoryCommitsShaCommentsSignal(OAICommitNote summary);
    void getV3ProjectsIdRepositoryCommitsShaDiffSignal();
    void getV3ProjectsIdRepositoryCommitsShaStatusesSignal(OAICommitStatus summary);
    void getV3ProjectsIdRepositoryCompareSignal(OAICompare summary);
    void getV3ProjectsIdRepositoryContributorsSignal(OAIContributor summary);
    void getV3ProjectsIdRepositoryFilesSignal();
    void getV3ProjectsIdRepositoryRawBlobsShaSignal();
    void getV3ProjectsIdRepositoryTagsSignal(OAIRepoTag summary);
    void getV3ProjectsIdRepositoryTagsTagNameSignal(OAIRepoTag summary);
    void getV3ProjectsIdRepositoryTreeSignal(OAIRepoTreeObject summary);
    void getV3ProjectsIdRunnersSignal(OAIRunner summary);
    void getV3ProjectsIdServicesServiceSlugSignal(OAIProjectService summary);
    void getV3ProjectsIdSnippetsSignal(OAIProjectSnippet summary);
    void getV3ProjectsIdSnippetsNoteableIdNotesSignal(OAINote summary);
    void getV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignal(OAINote summary);
    void getV3ProjectsIdSnippetsSnippetIdSignal(OAIProjectSnippet summary);
    void getV3ProjectsIdSnippetsSnippetIdAwardEmojiSignal(OAIAwardEmoji summary);
    void getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdSignal(OAIAwardEmoji summary);
    void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiSignal(OAIAwardEmoji summary);
    void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdSignal(OAIAwardEmoji summary);
    void getV3ProjectsIdSnippetsSnippetIdRawSignal();
    void getV3ProjectsIdTriggersSignal(OAITrigger summary);
    void getV3ProjectsIdTriggersTokenSignal(OAITrigger summary);
    void getV3ProjectsIdUsersSignal(OAIUserBasic summary);
    void getV3ProjectsIdVariablesSignal(OAIVariable summary);
    void getV3ProjectsIdVariablesKeySignal(OAIVariable summary);
    void getV3ProjectsOwnedSignal(OAIBasicProjectDetails summary);
    void getV3ProjectsSearchQuerySignal(OAIProject summary);
    void getV3ProjectsStarredSignal(OAIBasicProjectDetails summary);
    void getV3ProjectsVisibleSignal(OAIBasicProjectDetails summary);
    void postV3ProjectsSignal(OAIProject summary);
    void postV3ProjectsForkIdSignal(OAIProject summary);
    void postV3ProjectsIdAccessRequestsSignal(OAIAccessRequester summary);
    void postV3ProjectsIdArchiveSignal(OAIProject summary);
    void postV3ProjectsIdBoardsBoardIdListsSignal(OAIList summary);
    void postV3ProjectsIdBuildsBuildIdArtifactsKeepSignal(OAIBuild summary);
    void postV3ProjectsIdBuildsBuildIdCancelSignal(OAIBuild summary);
    void postV3ProjectsIdBuildsBuildIdEraseSignal(OAIBuild summary);
    void postV3ProjectsIdBuildsBuildIdPlaySignal(OAIBuild summary);
    void postV3ProjectsIdBuildsBuildIdRetrySignal(OAIBuild summary);
    void postV3ProjectsIdDeployKeysSignal(OAISSHKey summary);
    void postV3ProjectsIdDeployKeysKeyIdEnableSignal(OAISSHKey summary);
    void postV3ProjectsIdEnvironmentsSignal(OAIEnvironment summary);
    void postV3ProjectsIdForkForkedFromIdSignal();
    void postV3ProjectsIdHooksSignal(OAIProjectHook summary);
    void postV3ProjectsIdIssuesSignal(OAIIssue summary);
    void postV3ProjectsIdIssuesIssueIdAddSpentTimeSignal();
    void postV3ProjectsIdIssuesIssueIdAwardEmojiSignal(OAIAwardEmoji summary);
    void postV3ProjectsIdIssuesIssueIdMoveSignal(OAIIssue summary);
    void postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiSignal(OAIAwardEmoji summary);
    void postV3ProjectsIdIssuesIssueIdResetSpentTimeSignal();
    void postV3ProjectsIdIssuesIssueIdResetTimeEstimateSignal();
    void postV3ProjectsIdIssuesIssueIdTimeEstimateSignal();
    void postV3ProjectsIdIssuesIssueIdTodoSignal(OAITodo summary);
    void postV3ProjectsIdIssuesNoteableIdNotesSignal(OAINote summary);
    void postV3ProjectsIdIssuesSubscribableIdSubscriptionSignal(OAIIssue summary);
    void postV3ProjectsIdKeysSignal(OAISSHKey summary);
    void postV3ProjectsIdKeysKeyIdEnableSignal(OAISSHKey summary);
    void postV3ProjectsIdLabelsSignal(OAILabel summary);
    void postV3ProjectsIdLabelsSubscribableIdSubscriptionSignal(OAILabel summary);
    void postV3ProjectsIdMembersSignal(OAIMember summary);
    void postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsSignal(OAIMergeRequest summary);
    void postV3ProjectsIdMergeRequestMergeRequestIdCommentsSignal(OAIMRNote summary);
    void postV3ProjectsIdMergeRequestSubscribableIdSubscriptionSignal(OAIMergeRequest summary);
    void postV3ProjectsIdMergeRequestsSignal(OAIMergeRequest summary);
    void postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeSignal();
    void postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiSignal(OAIAwardEmoji summary);
    void postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsSignal(OAIMergeRequest summary);
    void postV3ProjectsIdMergeRequestsMergeRequestIdCommentsSignal(OAIMRNote summary);
    void postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiSignal(OAIAwardEmoji summary);
    void postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeSignal();
    void postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateSignal();
    void postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateSignal();
    void postV3ProjectsIdMergeRequestsMergeRequestIdTodoSignal(OAITodo summary);
    void postV3ProjectsIdMergeRequestsNoteableIdNotesSignal(OAINote summary);
    void postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionSignal(OAIMergeRequest summary);
    void postV3ProjectsIdMilestonesSignal(OAIMilestone summary);
    void postV3ProjectsIdPipelineSignal(OAIPipeline summary);
    void postV3ProjectsIdPipelinesPipelineIdCancelSignal(OAIPipeline summary);
    void postV3ProjectsIdPipelinesPipelineIdRetrySignal(OAIPipeline summary);
    void postV3ProjectsIdRepositoryBranchesSignal(OAIRepoBranch summary);
    void postV3ProjectsIdRepositoryCommitsSignal(OAIRepoCommitDetail summary);
    void postV3ProjectsIdRepositoryCommitsShaCherryPickSignal(OAIRepoCommit summary);
    void postV3ProjectsIdRepositoryCommitsShaCommentsSignal(OAICommitNote summary);
    void postV3ProjectsIdRepositoryFilesSignal();
    void postV3ProjectsIdRepositoryTagsSignal(OAIRepoTag summary);
    void postV3ProjectsIdRepositoryTagsTagNameReleaseSignal(OAIRelease summary);
    void postV3ProjectsIdRunnersSignal(OAIRunner summary);
    void postV3ProjectsIdServicesMattermostSlashCommandsTriggerSignal();
    void postV3ProjectsIdServicesSlackSlashCommandsTriggerSignal();
    void postV3ProjectsIdShareSignal(OAIProjectGroupLink summary);
    void postV3ProjectsIdSnippetsSignal(OAIProjectSnippet summary);
    void postV3ProjectsIdSnippetsNoteableIdNotesSignal(OAINote summary);
    void postV3ProjectsIdSnippetsSnippetIdAwardEmojiSignal(OAIAwardEmoji summary);
    void postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiSignal(OAIAwardEmoji summary);
    void postV3ProjectsIdStarSignal(OAIProject summary);
    void postV3ProjectsIdStatusesShaSignal(OAICommitStatus summary);
    void postV3ProjectsIdTriggersSignal(OAITrigger summary);
    void postV3ProjectsIdUnarchiveSignal(OAIProject summary);
    void postV3ProjectsIdUploadsSignal();
    void postV3ProjectsIdVariablesSignal(OAIVariable summary);
    void postV3ProjectsId_refReftriggerBuildsSignal(OAITriggerRequest summary);
    void postV3ProjectsUserUserIdSignal(OAIProject summary);
    void putV3ProjectsIdSignal(OAIProject summary);
    void putV3ProjectsIdAccessRequestsUserIdApproveSignal(OAIMember summary);
    void putV3ProjectsIdBoardsBoardIdListsListIdSignal(OAIList summary);
    void putV3ProjectsIdEnvironmentsEnvironmentIdSignal(OAIEnvironment summary);
    void putV3ProjectsIdHooksHookIdSignal(OAIProjectHook summary);
    void putV3ProjectsIdIssuesIssueIdSignal(OAIIssue summary);
    void putV3ProjectsIdIssuesNoteableIdNotesNoteIdSignal(OAINote summary);
    void putV3ProjectsIdLabelsSignal(OAILabel summary);
    void putV3ProjectsIdMembersUserIdSignal(OAIMember summary);
    void putV3ProjectsIdMergeRequestMergeRequestIdSignal(OAIMergeRequest summary);
    void putV3ProjectsIdMergeRequestMergeRequestIdMergeSignal(OAIMergeRequest summary);
    void putV3ProjectsIdMergeRequestsMergeRequestIdSignal(OAIMergeRequest summary);
    void putV3ProjectsIdMergeRequestsMergeRequestIdMergeSignal(OAIMergeRequest summary);
    void putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignal(OAINote summary);
    void putV3ProjectsIdMilestonesMilestoneIdSignal(OAIMilestone summary);
    void putV3ProjectsIdNotificationSettingsSignal(OAINotificationSetting summary);
    void putV3ProjectsIdRepositoryBranchesBranchProtectSignal(OAIRepoBranch summary);
    void putV3ProjectsIdRepositoryBranchesBranchUnprotectSignal(OAIRepoBranch summary);
    void putV3ProjectsIdRepositoryFilesSignal();
    void putV3ProjectsIdRepositoryTagsTagNameReleaseSignal(OAIRelease summary);
    void putV3ProjectsIdServicesAsanaSignal();
    void putV3ProjectsIdServicesAssemblaSignal();
    void putV3ProjectsIdServicesBambooSignal();
    void putV3ProjectsIdServicesBugzillaSignal();
    void putV3ProjectsIdServicesBuildkiteSignal();
    void putV3ProjectsIdServicesBuildsEmailSignal();
    void putV3ProjectsIdServicesCampfireSignal();
    void putV3ProjectsIdServicesCustomIssueTrackerSignal();
    void putV3ProjectsIdServicesDroneCiSignal();
    void putV3ProjectsIdServicesEmailsOnPushSignal();
    void putV3ProjectsIdServicesExternalWikiSignal();
    void putV3ProjectsIdServicesFlowdockSignal();
    void putV3ProjectsIdServicesGemnasiumSignal();
    void putV3ProjectsIdServicesHipchatSignal();
    void putV3ProjectsIdServicesIrkerSignal();
    void putV3ProjectsIdServicesJiraSignal();
    void putV3ProjectsIdServicesKubernetesSignal();
    void putV3ProjectsIdServicesMattermostSignal();
    void putV3ProjectsIdServicesMattermostSlashCommandsSignal();
    void putV3ProjectsIdServicesPipelinesEmailSignal();
    void putV3ProjectsIdServicesPivotaltrackerSignal();
    void putV3ProjectsIdServicesPushoverSignal();
    void putV3ProjectsIdServicesRedmineSignal();
    void putV3ProjectsIdServicesSlackSignal();
    void putV3ProjectsIdServicesSlackSlashCommandsSignal();
    void putV3ProjectsIdServicesTeamcitySignal();
    void putV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignal(OAINote summary);
    void putV3ProjectsIdSnippetsSnippetIdSignal(OAIProjectSnippet summary);
    void putV3ProjectsIdVariablesKeySignal(OAIVariable summary);


    void deleteV3ProjectsIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdAccessRequestsUserIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdBoardsBoardIdListsListIdSignalFull(OAIHttpRequestWorker *worker, OAIList summary);
    void deleteV3ProjectsIdDeployKeysKeyIdSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void deleteV3ProjectsIdDeployKeysKeyIdDisableSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void deleteV3ProjectsIdEnvironmentsEnvironmentIdSignalFull(OAIHttpRequestWorker *worker, OAIEnvironment summary);
    void deleteV3ProjectsIdForkSignalFull(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdHooksHookIdSignalFull(OAIHttpRequestWorker *worker, OAIProjectHook summary);
    void deleteV3ProjectsIdIssuesIssueIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void deleteV3ProjectsIdIssuesSubscribableIdSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void deleteV3ProjectsIdKeysKeyIdSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void deleteV3ProjectsIdKeysKeyIdDisableSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void deleteV3ProjectsIdLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void deleteV3ProjectsIdLabelsSubscribableIdSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void deleteV3ProjectsIdMembersUserIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequest summary);
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequest summary);
    void deleteV3ProjectsIdRepositoryBranchesBranchSignalFull(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdRepositoryFilesSignalFull(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdRepositoryMergedBranchesSignalFull(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdRepositoryTagsTagNameSignalFull(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdRunnersRunnerIdSignalFull(OAIHttpRequestWorker *worker, OAIRunner summary);
    void deleteV3ProjectsIdServicesServiceSlugSignalFull(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdShareGroupIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void deleteV3ProjectsIdSnippetsSnippetIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void deleteV3ProjectsIdStarSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void deleteV3ProjectsIdTriggersTokenSignalFull(OAIHttpRequestWorker *worker, OAITrigger summary);
    void deleteV3ProjectsIdVariablesKeySignalFull(OAIHttpRequestWorker *worker, OAIVariable summary);
    void getV3ProjectsSignalFull(OAIHttpRequestWorker *worker, OAIBasicProjectDetails summary);
    void getV3ProjectsAllSignalFull(OAIHttpRequestWorker *worker, OAIBasicProjectDetails summary);
    void getV3ProjectsIdSignalFull(OAIHttpRequestWorker *worker, OAIProjectWithAccess summary);
    void getV3ProjectsIdAccessRequestsSignalFull(OAIHttpRequestWorker *worker, OAIAccessRequester summary);
    void getV3ProjectsIdBoardsSignalFull(OAIHttpRequestWorker *worker, OAIBoard summary);
    void getV3ProjectsIdBoardsBoardIdListsSignalFull(OAIHttpRequestWorker *worker, OAIList summary);
    void getV3ProjectsIdBoardsBoardIdListsListIdSignalFull(OAIHttpRequestWorker *worker, OAIList summary);
    void getV3ProjectsIdBuildsSignalFull(OAIHttpRequestWorker *worker, OAIBuild summary);
    void getV3ProjectsIdBuildsArtifactsRefNameDownloadSignalFull(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdBuildsBuildIdSignalFull(OAIHttpRequestWorker *worker, OAIBuild summary);
    void getV3ProjectsIdBuildsBuildIdArtifactsSignalFull(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdBuildsBuildIdTraceSignalFull(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdDeployKeysSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void getV3ProjectsIdDeployKeysKeyIdSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void getV3ProjectsIdDeploymentsSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void getV3ProjectsIdDeploymentsDeploymentIdSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void getV3ProjectsIdEnvironmentsSignalFull(OAIHttpRequestWorker *worker, OAIEnvironment summary);
    void getV3ProjectsIdEventsSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void getV3ProjectsIdHooksSignalFull(OAIHttpRequestWorker *worker, OAIProjectHook summary);
    void getV3ProjectsIdHooksHookIdSignalFull(OAIHttpRequestWorker *worker, OAIProjectHook summary);
    void getV3ProjectsIdIssuesSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void getV3ProjectsIdIssuesIssueIdSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void getV3ProjectsIdIssuesIssueIdAwardEmojiSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void getV3ProjectsIdIssuesIssueIdTimeStatsSignalFull(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdIssuesNoteableIdNotesSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void getV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void getV3ProjectsIdKeysSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void getV3ProjectsIdKeysKeyIdSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void getV3ProjectsIdLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void getV3ProjectsIdMembersSignalFull(OAIHttpRequestWorker *worker, OAIMember summary);
    void getV3ProjectsIdMembersUserIdSignalFull(OAIHttpRequestWorker *worker, OAIMember summary);
    void getV3ProjectsIdMergeRequestMergeRequestIdSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequest summary);
    void getV3ProjectsIdMergeRequestMergeRequestIdChangesSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequestChanges summary);
    void getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesSignalFull(OAIHttpRequestWorker *worker, OAIMRNote summary);
    void getV3ProjectsIdMergeRequestMergeRequestIdCommentsSignalFull(OAIHttpRequestWorker *worker, OAIMRNote summary);
    void getV3ProjectsIdMergeRequestMergeRequestIdCommitsSignalFull(OAIHttpRequestWorker *worker, OAIRepoCommit summary);
    void getV3ProjectsIdMergeRequestsSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequest summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequest summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdChangesSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequestChanges summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesSignalFull(OAIHttpRequestWorker *worker, OAIMRNote summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdCommentsSignalFull(OAIHttpRequestWorker *worker, OAIMRNote summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdCommitsSignalFull(OAIHttpRequestWorker *worker, OAIRepoCommit summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsSignalFull(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequestDiff summary);
    void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequestDiffFull summary);
    void getV3ProjectsIdMergeRequestsNoteableIdNotesSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void getV3ProjectsIdMilestonesSignalFull(OAIHttpRequestWorker *worker, OAIMilestone summary);
    void getV3ProjectsIdMilestonesMilestoneIdSignalFull(OAIHttpRequestWorker *worker, OAIMilestone summary);
    void getV3ProjectsIdMilestonesMilestoneIdIssuesSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void getV3ProjectsIdNotificationSettingsSignalFull(OAIHttpRequestWorker *worker, OAINotificationSetting summary);
    void getV3ProjectsIdPipelinesSignalFull(OAIHttpRequestWorker *worker, OAIPipeline summary);
    void getV3ProjectsIdPipelinesPipelineIdSignalFull(OAIHttpRequestWorker *worker, OAIPipeline summary);
    void getV3ProjectsIdRepositoryArchiveSignalFull(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryBlobsShaSignalFull(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryBranchesSignalFull(OAIHttpRequestWorker *worker, OAIRepoBranch summary);
    void getV3ProjectsIdRepositoryBranchesBranchSignalFull(OAIHttpRequestWorker *worker, OAIRepoBranch summary);
    void getV3ProjectsIdRepositoryCommitsSignalFull(OAIHttpRequestWorker *worker, OAIRepoCommit summary);
    void getV3ProjectsIdRepositoryCommitsShaSignalFull(OAIHttpRequestWorker *worker, OAIRepoCommitDetail summary);
    void getV3ProjectsIdRepositoryCommitsShaBlobSignalFull(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryCommitsShaBuildsSignalFull(OAIHttpRequestWorker *worker, OAIBuild summary);
    void getV3ProjectsIdRepositoryCommitsShaCommentsSignalFull(OAIHttpRequestWorker *worker, OAICommitNote summary);
    void getV3ProjectsIdRepositoryCommitsShaDiffSignalFull(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryCommitsShaStatusesSignalFull(OAIHttpRequestWorker *worker, OAICommitStatus summary);
    void getV3ProjectsIdRepositoryCompareSignalFull(OAIHttpRequestWorker *worker, OAICompare summary);
    void getV3ProjectsIdRepositoryContributorsSignalFull(OAIHttpRequestWorker *worker, OAIContributor summary);
    void getV3ProjectsIdRepositoryFilesSignalFull(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryRawBlobsShaSignalFull(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdRepositoryTagsSignalFull(OAIHttpRequestWorker *worker, OAIRepoTag summary);
    void getV3ProjectsIdRepositoryTagsTagNameSignalFull(OAIHttpRequestWorker *worker, OAIRepoTag summary);
    void getV3ProjectsIdRepositoryTreeSignalFull(OAIHttpRequestWorker *worker, OAIRepoTreeObject summary);
    void getV3ProjectsIdRunnersSignalFull(OAIHttpRequestWorker *worker, OAIRunner summary);
    void getV3ProjectsIdServicesServiceSlugSignalFull(OAIHttpRequestWorker *worker, OAIProjectService summary);
    void getV3ProjectsIdSnippetsSignalFull(OAIHttpRequestWorker *worker, OAIProjectSnippet summary);
    void getV3ProjectsIdSnippetsNoteableIdNotesSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void getV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void getV3ProjectsIdSnippetsSnippetIdSignalFull(OAIHttpRequestWorker *worker, OAIProjectSnippet summary);
    void getV3ProjectsIdSnippetsSnippetIdAwardEmojiSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void getV3ProjectsIdSnippetsSnippetIdRawSignalFull(OAIHttpRequestWorker *worker);
    void getV3ProjectsIdTriggersSignalFull(OAIHttpRequestWorker *worker, OAITrigger summary);
    void getV3ProjectsIdTriggersTokenSignalFull(OAIHttpRequestWorker *worker, OAITrigger summary);
    void getV3ProjectsIdUsersSignalFull(OAIHttpRequestWorker *worker, OAIUserBasic summary);
    void getV3ProjectsIdVariablesSignalFull(OAIHttpRequestWorker *worker, OAIVariable summary);
    void getV3ProjectsIdVariablesKeySignalFull(OAIHttpRequestWorker *worker, OAIVariable summary);
    void getV3ProjectsOwnedSignalFull(OAIHttpRequestWorker *worker, OAIBasicProjectDetails summary);
    void getV3ProjectsSearchQuerySignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void getV3ProjectsStarredSignalFull(OAIHttpRequestWorker *worker, OAIBasicProjectDetails summary);
    void getV3ProjectsVisibleSignalFull(OAIHttpRequestWorker *worker, OAIBasicProjectDetails summary);
    void postV3ProjectsSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void postV3ProjectsForkIdSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void postV3ProjectsIdAccessRequestsSignalFull(OAIHttpRequestWorker *worker, OAIAccessRequester summary);
    void postV3ProjectsIdArchiveSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void postV3ProjectsIdBoardsBoardIdListsSignalFull(OAIHttpRequestWorker *worker, OAIList summary);
    void postV3ProjectsIdBuildsBuildIdArtifactsKeepSignalFull(OAIHttpRequestWorker *worker, OAIBuild summary);
    void postV3ProjectsIdBuildsBuildIdCancelSignalFull(OAIHttpRequestWorker *worker, OAIBuild summary);
    void postV3ProjectsIdBuildsBuildIdEraseSignalFull(OAIHttpRequestWorker *worker, OAIBuild summary);
    void postV3ProjectsIdBuildsBuildIdPlaySignalFull(OAIHttpRequestWorker *worker, OAIBuild summary);
    void postV3ProjectsIdBuildsBuildIdRetrySignalFull(OAIHttpRequestWorker *worker, OAIBuild summary);
    void postV3ProjectsIdDeployKeysSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void postV3ProjectsIdDeployKeysKeyIdEnableSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void postV3ProjectsIdEnvironmentsSignalFull(OAIHttpRequestWorker *worker, OAIEnvironment summary);
    void postV3ProjectsIdForkForkedFromIdSignalFull(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdHooksSignalFull(OAIHttpRequestWorker *worker, OAIProjectHook summary);
    void postV3ProjectsIdIssuesSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void postV3ProjectsIdIssuesIssueIdAddSpentTimeSignalFull(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdIssuesIssueIdAwardEmojiSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void postV3ProjectsIdIssuesIssueIdMoveSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void postV3ProjectsIdIssuesIssueIdResetSpentTimeSignalFull(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdIssuesIssueIdResetTimeEstimateSignalFull(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdIssuesIssueIdTimeEstimateSignalFull(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdIssuesIssueIdTodoSignalFull(OAIHttpRequestWorker *worker, OAITodo summary);
    void postV3ProjectsIdIssuesNoteableIdNotesSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void postV3ProjectsIdIssuesSubscribableIdSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void postV3ProjectsIdKeysSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void postV3ProjectsIdKeysKeyIdEnableSignalFull(OAIHttpRequestWorker *worker, OAISSHKey summary);
    void postV3ProjectsIdLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void postV3ProjectsIdLabelsSubscribableIdSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void postV3ProjectsIdMembersSignalFull(OAIHttpRequestWorker *worker, OAIMember summary);
    void postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequest summary);
    void postV3ProjectsIdMergeRequestMergeRequestIdCommentsSignalFull(OAIHttpRequestWorker *worker, OAIMRNote summary);
    void postV3ProjectsIdMergeRequestSubscribableIdSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequest summary);
    void postV3ProjectsIdMergeRequestsSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequest summary);
    void postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeSignalFull(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequest summary);
    void postV3ProjectsIdMergeRequestsMergeRequestIdCommentsSignalFull(OAIHttpRequestWorker *worker, OAIMRNote summary);
    void postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeSignalFull(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateSignalFull(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateSignalFull(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdMergeRequestsMergeRequestIdTodoSignalFull(OAIHttpRequestWorker *worker, OAITodo summary);
    void postV3ProjectsIdMergeRequestsNoteableIdNotesSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequest summary);
    void postV3ProjectsIdMilestonesSignalFull(OAIHttpRequestWorker *worker, OAIMilestone summary);
    void postV3ProjectsIdPipelineSignalFull(OAIHttpRequestWorker *worker, OAIPipeline summary);
    void postV3ProjectsIdPipelinesPipelineIdCancelSignalFull(OAIHttpRequestWorker *worker, OAIPipeline summary);
    void postV3ProjectsIdPipelinesPipelineIdRetrySignalFull(OAIHttpRequestWorker *worker, OAIPipeline summary);
    void postV3ProjectsIdRepositoryBranchesSignalFull(OAIHttpRequestWorker *worker, OAIRepoBranch summary);
    void postV3ProjectsIdRepositoryCommitsSignalFull(OAIHttpRequestWorker *worker, OAIRepoCommitDetail summary);
    void postV3ProjectsIdRepositoryCommitsShaCherryPickSignalFull(OAIHttpRequestWorker *worker, OAIRepoCommit summary);
    void postV3ProjectsIdRepositoryCommitsShaCommentsSignalFull(OAIHttpRequestWorker *worker, OAICommitNote summary);
    void postV3ProjectsIdRepositoryFilesSignalFull(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdRepositoryTagsSignalFull(OAIHttpRequestWorker *worker, OAIRepoTag summary);
    void postV3ProjectsIdRepositoryTagsTagNameReleaseSignalFull(OAIHttpRequestWorker *worker, OAIRelease summary);
    void postV3ProjectsIdRunnersSignalFull(OAIHttpRequestWorker *worker, OAIRunner summary);
    void postV3ProjectsIdServicesMattermostSlashCommandsTriggerSignalFull(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdServicesSlackSlashCommandsTriggerSignalFull(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdShareSignalFull(OAIHttpRequestWorker *worker, OAIProjectGroupLink summary);
    void postV3ProjectsIdSnippetsSignalFull(OAIHttpRequestWorker *worker, OAIProjectSnippet summary);
    void postV3ProjectsIdSnippetsNoteableIdNotesSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void postV3ProjectsIdSnippetsSnippetIdAwardEmojiSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiSignalFull(OAIHttpRequestWorker *worker, OAIAwardEmoji summary);
    void postV3ProjectsIdStarSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void postV3ProjectsIdStatusesShaSignalFull(OAIHttpRequestWorker *worker, OAICommitStatus summary);
    void postV3ProjectsIdTriggersSignalFull(OAIHttpRequestWorker *worker, OAITrigger summary);
    void postV3ProjectsIdUnarchiveSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void postV3ProjectsIdUploadsSignalFull(OAIHttpRequestWorker *worker);
    void postV3ProjectsIdVariablesSignalFull(OAIHttpRequestWorker *worker, OAIVariable summary);
    void postV3ProjectsId_refReftriggerBuildsSignalFull(OAIHttpRequestWorker *worker, OAITriggerRequest summary);
    void postV3ProjectsUserUserIdSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void putV3ProjectsIdSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void putV3ProjectsIdAccessRequestsUserIdApproveSignalFull(OAIHttpRequestWorker *worker, OAIMember summary);
    void putV3ProjectsIdBoardsBoardIdListsListIdSignalFull(OAIHttpRequestWorker *worker, OAIList summary);
    void putV3ProjectsIdEnvironmentsEnvironmentIdSignalFull(OAIHttpRequestWorker *worker, OAIEnvironment summary);
    void putV3ProjectsIdHooksHookIdSignalFull(OAIHttpRequestWorker *worker, OAIProjectHook summary);
    void putV3ProjectsIdIssuesIssueIdSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void putV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void putV3ProjectsIdLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void putV3ProjectsIdMembersUserIdSignalFull(OAIHttpRequestWorker *worker, OAIMember summary);
    void putV3ProjectsIdMergeRequestMergeRequestIdSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequest summary);
    void putV3ProjectsIdMergeRequestMergeRequestIdMergeSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequest summary);
    void putV3ProjectsIdMergeRequestsMergeRequestIdSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequest summary);
    void putV3ProjectsIdMergeRequestsMergeRequestIdMergeSignalFull(OAIHttpRequestWorker *worker, OAIMergeRequest summary);
    void putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void putV3ProjectsIdMilestonesMilestoneIdSignalFull(OAIHttpRequestWorker *worker, OAIMilestone summary);
    void putV3ProjectsIdNotificationSettingsSignalFull(OAIHttpRequestWorker *worker, OAINotificationSetting summary);
    void putV3ProjectsIdRepositoryBranchesBranchProtectSignalFull(OAIHttpRequestWorker *worker, OAIRepoBranch summary);
    void putV3ProjectsIdRepositoryBranchesBranchUnprotectSignalFull(OAIHttpRequestWorker *worker, OAIRepoBranch summary);
    void putV3ProjectsIdRepositoryFilesSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdRepositoryTagsTagNameReleaseSignalFull(OAIHttpRequestWorker *worker, OAIRelease summary);
    void putV3ProjectsIdServicesAsanaSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesAssemblaSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesBambooSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesBugzillaSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesBuildkiteSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesBuildsEmailSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesCampfireSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesCustomIssueTrackerSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesDroneCiSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesEmailsOnPushSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesExternalWikiSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesFlowdockSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesGemnasiumSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesHipchatSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesIrkerSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesJiraSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesKubernetesSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesMattermostSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesMattermostSlashCommandsSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesPipelinesEmailSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesPivotaltrackerSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesPushoverSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesRedmineSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesSlackSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesSlackSlashCommandsSignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdServicesTeamcitySignalFull(OAIHttpRequestWorker *worker);
    void putV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void putV3ProjectsIdSnippetsSnippetIdSignalFull(OAIHttpRequestWorker *worker, OAIProjectSnippet summary);
    void putV3ProjectsIdVariablesKeySignalFull(OAIHttpRequestWorker *worker, OAIVariable summary);

    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdSignalError() instead")
    void deleteV3ProjectsIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdAccessRequestsUserIdSignalError() instead")
    void deleteV3ProjectsIdAccessRequestsUserIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdAccessRequestsUserIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdBoardsBoardIdListsListIdSignalError() instead")
    void deleteV3ProjectsIdBoardsBoardIdListsListIdSignalE(OAIList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdBoardsBoardIdListsListIdSignalError(OAIList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdDeployKeysKeyIdSignalError() instead")
    void deleteV3ProjectsIdDeployKeysKeyIdSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdDeployKeysKeyIdSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdDeployKeysKeyIdDisableSignalError() instead")
    void deleteV3ProjectsIdDeployKeysKeyIdDisableSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdDeployKeysKeyIdDisableSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdEnvironmentsEnvironmentIdSignalError() instead")
    void deleteV3ProjectsIdEnvironmentsEnvironmentIdSignalE(OAIEnvironment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdEnvironmentsEnvironmentIdSignalError(OAIEnvironment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdForkSignalError() instead")
    void deleteV3ProjectsIdForkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdForkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdHooksHookIdSignalError() instead")
    void deleteV3ProjectsIdHooksHookIdSignalE(OAIProjectHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdHooksHookIdSignalError(OAIProjectHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdIssuesIssueIdSignalError() instead")
    void deleteV3ProjectsIdIssuesIssueIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdIssuesIssueIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdSignalError() instead")
    void deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdSignalError() instead")
    void deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalError() instead")
    void deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdIssuesSubscribableIdSubscriptionSignalError() instead")
    void deleteV3ProjectsIdIssuesSubscribableIdSubscriptionSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdIssuesSubscribableIdSubscriptionSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdKeysKeyIdSignalError() instead")
    void deleteV3ProjectsIdKeysKeyIdSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdKeysKeyIdSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdKeysKeyIdDisableSignalError() instead")
    void deleteV3ProjectsIdKeysKeyIdDisableSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdKeysKeyIdDisableSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdLabelsSignalError() instead")
    void deleteV3ProjectsIdLabelsSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdLabelsSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdLabelsSubscribableIdSubscriptionSignalError() instead")
    void deleteV3ProjectsIdLabelsSubscribableIdSubscriptionSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdLabelsSubscribableIdSubscriptionSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdMembersUserIdSignalError() instead")
    void deleteV3ProjectsIdMembersUserIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdMembersUserIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionSignalError() instead")
    void deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionSignalE(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionSignalError(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdMergeRequestsMergeRequestIdSignalError() instead")
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdSignalError() instead")
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdSignalError() instead")
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalError() instead")
    void deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionSignalError() instead")
    void deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionSignalE(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionSignalError(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdRepositoryBranchesBranchSignalError() instead")
    void deleteV3ProjectsIdRepositoryBranchesBranchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdRepositoryBranchesBranchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdRepositoryFilesSignalError() instead")
    void deleteV3ProjectsIdRepositoryFilesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdRepositoryFilesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdRepositoryMergedBranchesSignalError() instead")
    void deleteV3ProjectsIdRepositoryMergedBranchesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdRepositoryMergedBranchesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdRepositoryTagsTagNameSignalError() instead")
    void deleteV3ProjectsIdRepositoryTagsTagNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdRepositoryTagsTagNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdRunnersRunnerIdSignalError() instead")
    void deleteV3ProjectsIdRunnersRunnerIdSignalE(OAIRunner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdRunnersRunnerIdSignalError(OAIRunner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdServicesServiceSlugSignalError() instead")
    void deleteV3ProjectsIdServicesServiceSlugSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdServicesServiceSlugSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdShareGroupIdSignalError() instead")
    void deleteV3ProjectsIdShareGroupIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdShareGroupIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalError() instead")
    void deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdSnippetsSnippetIdSignalError() instead")
    void deleteV3ProjectsIdSnippetsSnippetIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdSnippetsSnippetIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdSignalError() instead")
    void deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdSignalError() instead")
    void deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdStarSignalError() instead")
    void deleteV3ProjectsIdStarSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdStarSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdTriggersTokenSignalError() instead")
    void deleteV3ProjectsIdTriggersTokenSignalE(OAITrigger summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdTriggersTokenSignalError(OAITrigger summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdVariablesKeySignalError() instead")
    void deleteV3ProjectsIdVariablesKeySignalE(OAIVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdVariablesKeySignalError(OAIVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsSignalError() instead")
    void getV3ProjectsSignalE(OAIBasicProjectDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsSignalError(OAIBasicProjectDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsAllSignalError() instead")
    void getV3ProjectsAllSignalE(OAIBasicProjectDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsAllSignalError(OAIBasicProjectDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSignalError() instead")
    void getV3ProjectsIdSignalE(OAIProjectWithAccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSignalError(OAIProjectWithAccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdAccessRequestsSignalError() instead")
    void getV3ProjectsIdAccessRequestsSignalE(OAIAccessRequester summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdAccessRequestsSignalError(OAIAccessRequester summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdBoardsSignalError() instead")
    void getV3ProjectsIdBoardsSignalE(OAIBoard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdBoardsSignalError(OAIBoard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdBoardsBoardIdListsSignalError() instead")
    void getV3ProjectsIdBoardsBoardIdListsSignalE(OAIList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdBoardsBoardIdListsSignalError(OAIList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdBoardsBoardIdListsListIdSignalError() instead")
    void getV3ProjectsIdBoardsBoardIdListsListIdSignalE(OAIList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdBoardsBoardIdListsListIdSignalError(OAIList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdBuildsSignalError() instead")
    void getV3ProjectsIdBuildsSignalE(OAIBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdBuildsSignalError(OAIBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdBuildsArtifactsRefNameDownloadSignalError() instead")
    void getV3ProjectsIdBuildsArtifactsRefNameDownloadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdBuildsArtifactsRefNameDownloadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdBuildsBuildIdSignalError() instead")
    void getV3ProjectsIdBuildsBuildIdSignalE(OAIBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdBuildsBuildIdSignalError(OAIBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdBuildsBuildIdArtifactsSignalError() instead")
    void getV3ProjectsIdBuildsBuildIdArtifactsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdBuildsBuildIdArtifactsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdBuildsBuildIdTraceSignalError() instead")
    void getV3ProjectsIdBuildsBuildIdTraceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdBuildsBuildIdTraceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdDeployKeysSignalError() instead")
    void getV3ProjectsIdDeployKeysSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdDeployKeysSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdDeployKeysKeyIdSignalError() instead")
    void getV3ProjectsIdDeployKeysKeyIdSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdDeployKeysKeyIdSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdDeploymentsSignalError() instead")
    void getV3ProjectsIdDeploymentsSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdDeploymentsSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdDeploymentsDeploymentIdSignalError() instead")
    void getV3ProjectsIdDeploymentsDeploymentIdSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdDeploymentsDeploymentIdSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdEnvironmentsSignalError() instead")
    void getV3ProjectsIdEnvironmentsSignalE(OAIEnvironment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdEnvironmentsSignalError(OAIEnvironment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdEventsSignalError() instead")
    void getV3ProjectsIdEventsSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdEventsSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdHooksSignalError() instead")
    void getV3ProjectsIdHooksSignalE(OAIProjectHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdHooksSignalError(OAIProjectHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdHooksHookIdSignalError() instead")
    void getV3ProjectsIdHooksHookIdSignalE(OAIProjectHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdHooksHookIdSignalError(OAIProjectHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesSignalError() instead")
    void getV3ProjectsIdIssuesSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesIssueIdSignalError() instead")
    void getV3ProjectsIdIssuesIssueIdSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesIssueIdSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesIssueIdAwardEmojiSignalError() instead")
    void getV3ProjectsIdIssuesIssueIdAwardEmojiSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesIssueIdAwardEmojiSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdSignalError() instead")
    void getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiSignalError() instead")
    void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdSignalError() instead")
    void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesIssueIdTimeStatsSignalError() instead")
    void getV3ProjectsIdIssuesIssueIdTimeStatsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesIssueIdTimeStatsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesNoteableIdNotesSignalError() instead")
    void getV3ProjectsIdIssuesNoteableIdNotesSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesNoteableIdNotesSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalError() instead")
    void getV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdKeysSignalError() instead")
    void getV3ProjectsIdKeysSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdKeysSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdKeysKeyIdSignalError() instead")
    void getV3ProjectsIdKeysKeyIdSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdKeysKeyIdSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdLabelsSignalError() instead")
    void getV3ProjectsIdLabelsSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdLabelsSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMembersSignalError() instead")
    void getV3ProjectsIdMembersSignalE(OAIMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMembersSignalError(OAIMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMembersUserIdSignalError() instead")
    void getV3ProjectsIdMembersUserIdSignalE(OAIMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMembersUserIdSignalError(OAIMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestMergeRequestIdSignalError() instead")
    void getV3ProjectsIdMergeRequestMergeRequestIdSignalE(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestMergeRequestIdSignalError(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestMergeRequestIdChangesSignalError() instead")
    void getV3ProjectsIdMergeRequestMergeRequestIdChangesSignalE(OAIMergeRequestChanges summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestMergeRequestIdChangesSignalError(OAIMergeRequestChanges summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesSignalError() instead")
    void getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesSignalE(OAIMRNote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesSignalError(OAIMRNote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestMergeRequestIdCommentsSignalError() instead")
    void getV3ProjectsIdMergeRequestMergeRequestIdCommentsSignalE(OAIMRNote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestMergeRequestIdCommentsSignalError(OAIMRNote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestMergeRequestIdCommitsSignalError() instead")
    void getV3ProjectsIdMergeRequestMergeRequestIdCommitsSignalE(OAIRepoCommit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestMergeRequestIdCommitsSignalError(OAIRepoCommit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsSignalError() instead")
    void getV3ProjectsIdMergeRequestsSignalE(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsSignalError(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdSignalError() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdSignalE(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdSignalError(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiSignalError() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdSignalError() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdChangesSignalError() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdChangesSignalE(OAIMergeRequestChanges summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdChangesSignalError(OAIMergeRequestChanges summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesSignalError() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesSignalE(OAIMRNote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesSignalError(OAIMRNote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdCommentsSignalError() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdCommentsSignalE(OAIMRNote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdCommentsSignalError(OAIMRNote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdCommitsSignalError() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdCommitsSignalE(OAIRepoCommit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdCommitsSignalError(OAIRepoCommit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiSignalError() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdSignalError() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsSignalError() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdVersionsSignalError() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsSignalE(OAIMergeRequestDiff summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsSignalError(OAIMergeRequestDiff summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdSignalError() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdSignalE(OAIMergeRequestDiffFull summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdSignalError(OAIMergeRequestDiffFull summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsNoteableIdNotesSignalError() instead")
    void getV3ProjectsIdMergeRequestsNoteableIdNotesSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsNoteableIdNotesSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalError() instead")
    void getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMilestonesSignalError() instead")
    void getV3ProjectsIdMilestonesSignalE(OAIMilestone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMilestonesSignalError(OAIMilestone summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMilestonesMilestoneIdSignalError() instead")
    void getV3ProjectsIdMilestonesMilestoneIdSignalE(OAIMilestone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMilestonesMilestoneIdSignalError(OAIMilestone summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMilestonesMilestoneIdIssuesSignalError() instead")
    void getV3ProjectsIdMilestonesMilestoneIdIssuesSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMilestonesMilestoneIdIssuesSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdNotificationSettingsSignalError() instead")
    void getV3ProjectsIdNotificationSettingsSignalE(OAINotificationSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdNotificationSettingsSignalError(OAINotificationSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdPipelinesSignalError() instead")
    void getV3ProjectsIdPipelinesSignalE(OAIPipeline summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdPipelinesSignalError(OAIPipeline summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdPipelinesPipelineIdSignalError() instead")
    void getV3ProjectsIdPipelinesPipelineIdSignalE(OAIPipeline summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdPipelinesPipelineIdSignalError(OAIPipeline summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryArchiveSignalError() instead")
    void getV3ProjectsIdRepositoryArchiveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryArchiveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryBlobsShaSignalError() instead")
    void getV3ProjectsIdRepositoryBlobsShaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryBlobsShaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryBranchesSignalError() instead")
    void getV3ProjectsIdRepositoryBranchesSignalE(OAIRepoBranch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryBranchesSignalError(OAIRepoBranch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryBranchesBranchSignalError() instead")
    void getV3ProjectsIdRepositoryBranchesBranchSignalE(OAIRepoBranch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryBranchesBranchSignalError(OAIRepoBranch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryCommitsSignalError() instead")
    void getV3ProjectsIdRepositoryCommitsSignalE(OAIRepoCommit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryCommitsSignalError(OAIRepoCommit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryCommitsShaSignalError() instead")
    void getV3ProjectsIdRepositoryCommitsShaSignalE(OAIRepoCommitDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryCommitsShaSignalError(OAIRepoCommitDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryCommitsShaBlobSignalError() instead")
    void getV3ProjectsIdRepositoryCommitsShaBlobSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryCommitsShaBlobSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryCommitsShaBuildsSignalError() instead")
    void getV3ProjectsIdRepositoryCommitsShaBuildsSignalE(OAIBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryCommitsShaBuildsSignalError(OAIBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryCommitsShaCommentsSignalError() instead")
    void getV3ProjectsIdRepositoryCommitsShaCommentsSignalE(OAICommitNote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryCommitsShaCommentsSignalError(OAICommitNote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryCommitsShaDiffSignalError() instead")
    void getV3ProjectsIdRepositoryCommitsShaDiffSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryCommitsShaDiffSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryCommitsShaStatusesSignalError() instead")
    void getV3ProjectsIdRepositoryCommitsShaStatusesSignalE(OAICommitStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryCommitsShaStatusesSignalError(OAICommitStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryCompareSignalError() instead")
    void getV3ProjectsIdRepositoryCompareSignalE(OAICompare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryCompareSignalError(OAICompare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryContributorsSignalError() instead")
    void getV3ProjectsIdRepositoryContributorsSignalE(OAIContributor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryContributorsSignalError(OAIContributor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryFilesSignalError() instead")
    void getV3ProjectsIdRepositoryFilesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryFilesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryRawBlobsShaSignalError() instead")
    void getV3ProjectsIdRepositoryRawBlobsShaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryRawBlobsShaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryTagsSignalError() instead")
    void getV3ProjectsIdRepositoryTagsSignalE(OAIRepoTag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryTagsSignalError(OAIRepoTag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryTagsTagNameSignalError() instead")
    void getV3ProjectsIdRepositoryTagsTagNameSignalE(OAIRepoTag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryTagsTagNameSignalError(OAIRepoTag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryTreeSignalError() instead")
    void getV3ProjectsIdRepositoryTreeSignalE(OAIRepoTreeObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryTreeSignalError(OAIRepoTreeObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRunnersSignalError() instead")
    void getV3ProjectsIdRunnersSignalE(OAIRunner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRunnersSignalError(OAIRunner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdServicesServiceSlugSignalError() instead")
    void getV3ProjectsIdServicesServiceSlugSignalE(OAIProjectService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdServicesServiceSlugSignalError(OAIProjectService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsSignalError() instead")
    void getV3ProjectsIdSnippetsSignalE(OAIProjectSnippet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsSignalError(OAIProjectSnippet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsNoteableIdNotesSignalError() instead")
    void getV3ProjectsIdSnippetsNoteableIdNotesSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsNoteableIdNotesSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalError() instead")
    void getV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsSnippetIdSignalError() instead")
    void getV3ProjectsIdSnippetsSnippetIdSignalE(OAIProjectSnippet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsSnippetIdSignalError(OAIProjectSnippet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsSnippetIdAwardEmojiSignalError() instead")
    void getV3ProjectsIdSnippetsSnippetIdAwardEmojiSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsSnippetIdAwardEmojiSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdSignalError() instead")
    void getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiSignalError() instead")
    void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdSignalError() instead")
    void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsSnippetIdRawSignalError() instead")
    void getV3ProjectsIdSnippetsSnippetIdRawSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsSnippetIdRawSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdTriggersSignalError() instead")
    void getV3ProjectsIdTriggersSignalE(OAITrigger summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdTriggersSignalError(OAITrigger summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdTriggersTokenSignalError() instead")
    void getV3ProjectsIdTriggersTokenSignalE(OAITrigger summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdTriggersTokenSignalError(OAITrigger summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdUsersSignalError() instead")
    void getV3ProjectsIdUsersSignalE(OAIUserBasic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdUsersSignalError(OAIUserBasic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdVariablesSignalError() instead")
    void getV3ProjectsIdVariablesSignalE(OAIVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdVariablesSignalError(OAIVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdVariablesKeySignalError() instead")
    void getV3ProjectsIdVariablesKeySignalE(OAIVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdVariablesKeySignalError(OAIVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsOwnedSignalError() instead")
    void getV3ProjectsOwnedSignalE(OAIBasicProjectDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsOwnedSignalError(OAIBasicProjectDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsSearchQuerySignalError() instead")
    void getV3ProjectsSearchQuerySignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsSearchQuerySignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsStarredSignalError() instead")
    void getV3ProjectsStarredSignalE(OAIBasicProjectDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsStarredSignalError(OAIBasicProjectDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsVisibleSignalError() instead")
    void getV3ProjectsVisibleSignalE(OAIBasicProjectDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsVisibleSignalError(OAIBasicProjectDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsSignalError() instead")
    void postV3ProjectsSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsForkIdSignalError() instead")
    void postV3ProjectsForkIdSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsForkIdSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdAccessRequestsSignalError() instead")
    void postV3ProjectsIdAccessRequestsSignalE(OAIAccessRequester summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdAccessRequestsSignalError(OAIAccessRequester summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdArchiveSignalError() instead")
    void postV3ProjectsIdArchiveSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdArchiveSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdBoardsBoardIdListsSignalError() instead")
    void postV3ProjectsIdBoardsBoardIdListsSignalE(OAIList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdBoardsBoardIdListsSignalError(OAIList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdBuildsBuildIdArtifactsKeepSignalError() instead")
    void postV3ProjectsIdBuildsBuildIdArtifactsKeepSignalE(OAIBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdBuildsBuildIdArtifactsKeepSignalError(OAIBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdBuildsBuildIdCancelSignalError() instead")
    void postV3ProjectsIdBuildsBuildIdCancelSignalE(OAIBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdBuildsBuildIdCancelSignalError(OAIBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdBuildsBuildIdEraseSignalError() instead")
    void postV3ProjectsIdBuildsBuildIdEraseSignalE(OAIBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdBuildsBuildIdEraseSignalError(OAIBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdBuildsBuildIdPlaySignalError() instead")
    void postV3ProjectsIdBuildsBuildIdPlaySignalE(OAIBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdBuildsBuildIdPlaySignalError(OAIBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdBuildsBuildIdRetrySignalError() instead")
    void postV3ProjectsIdBuildsBuildIdRetrySignalE(OAIBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdBuildsBuildIdRetrySignalError(OAIBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdDeployKeysSignalError() instead")
    void postV3ProjectsIdDeployKeysSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdDeployKeysSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdDeployKeysKeyIdEnableSignalError() instead")
    void postV3ProjectsIdDeployKeysKeyIdEnableSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdDeployKeysKeyIdEnableSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdEnvironmentsSignalError() instead")
    void postV3ProjectsIdEnvironmentsSignalE(OAIEnvironment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdEnvironmentsSignalError(OAIEnvironment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdForkForkedFromIdSignalError() instead")
    void postV3ProjectsIdForkForkedFromIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdForkForkedFromIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdHooksSignalError() instead")
    void postV3ProjectsIdHooksSignalE(OAIProjectHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdHooksSignalError(OAIProjectHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesSignalError() instead")
    void postV3ProjectsIdIssuesSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesIssueIdAddSpentTimeSignalError() instead")
    void postV3ProjectsIdIssuesIssueIdAddSpentTimeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesIssueIdAddSpentTimeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesIssueIdAwardEmojiSignalError() instead")
    void postV3ProjectsIdIssuesIssueIdAwardEmojiSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesIssueIdAwardEmojiSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesIssueIdMoveSignalError() instead")
    void postV3ProjectsIdIssuesIssueIdMoveSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesIssueIdMoveSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiSignalError() instead")
    void postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesIssueIdResetSpentTimeSignalError() instead")
    void postV3ProjectsIdIssuesIssueIdResetSpentTimeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesIssueIdResetSpentTimeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesIssueIdResetTimeEstimateSignalError() instead")
    void postV3ProjectsIdIssuesIssueIdResetTimeEstimateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesIssueIdResetTimeEstimateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesIssueIdTimeEstimateSignalError() instead")
    void postV3ProjectsIdIssuesIssueIdTimeEstimateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesIssueIdTimeEstimateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesIssueIdTodoSignalError() instead")
    void postV3ProjectsIdIssuesIssueIdTodoSignalE(OAITodo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesIssueIdTodoSignalError(OAITodo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesNoteableIdNotesSignalError() instead")
    void postV3ProjectsIdIssuesNoteableIdNotesSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesNoteableIdNotesSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesSubscribableIdSubscriptionSignalError() instead")
    void postV3ProjectsIdIssuesSubscribableIdSubscriptionSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesSubscribableIdSubscriptionSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdKeysSignalError() instead")
    void postV3ProjectsIdKeysSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdKeysSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdKeysKeyIdEnableSignalError() instead")
    void postV3ProjectsIdKeysKeyIdEnableSignalE(OAISSHKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdKeysKeyIdEnableSignalError(OAISSHKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdLabelsSignalError() instead")
    void postV3ProjectsIdLabelsSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdLabelsSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdLabelsSubscribableIdSubscriptionSignalError() instead")
    void postV3ProjectsIdLabelsSubscribableIdSubscriptionSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdLabelsSubscribableIdSubscriptionSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMembersSignalError() instead")
    void postV3ProjectsIdMembersSignalE(OAIMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMembersSignalError(OAIMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsSignalError() instead")
    void postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsSignalE(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsSignalError(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestMergeRequestIdCommentsSignalError() instead")
    void postV3ProjectsIdMergeRequestMergeRequestIdCommentsSignalE(OAIMRNote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestMergeRequestIdCommentsSignalError(OAIMRNote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestSubscribableIdSubscriptionSignalError() instead")
    void postV3ProjectsIdMergeRequestSubscribableIdSubscriptionSignalE(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestSubscribableIdSubscriptionSignalError(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsSignalError() instead")
    void postV3ProjectsIdMergeRequestsSignalE(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsSignalError(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeSignalError() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiSignalError() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsSignalError() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsSignalE(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsSignalError(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdCommentsSignalError() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdCommentsSignalE(OAIMRNote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdCommentsSignalError(OAIMRNote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiSignalError() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeSignalError() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateSignalError() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateSignalError() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdTodoSignalError() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdTodoSignalE(OAITodo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdTodoSignalError(OAITodo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsNoteableIdNotesSignalError() instead")
    void postV3ProjectsIdMergeRequestsNoteableIdNotesSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsNoteableIdNotesSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionSignalError() instead")
    void postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionSignalE(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionSignalError(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMilestonesSignalError() instead")
    void postV3ProjectsIdMilestonesSignalE(OAIMilestone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMilestonesSignalError(OAIMilestone summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdPipelineSignalError() instead")
    void postV3ProjectsIdPipelineSignalE(OAIPipeline summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdPipelineSignalError(OAIPipeline summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdPipelinesPipelineIdCancelSignalError() instead")
    void postV3ProjectsIdPipelinesPipelineIdCancelSignalE(OAIPipeline summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdPipelinesPipelineIdCancelSignalError(OAIPipeline summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdPipelinesPipelineIdRetrySignalError() instead")
    void postV3ProjectsIdPipelinesPipelineIdRetrySignalE(OAIPipeline summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdPipelinesPipelineIdRetrySignalError(OAIPipeline summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdRepositoryBranchesSignalError() instead")
    void postV3ProjectsIdRepositoryBranchesSignalE(OAIRepoBranch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdRepositoryBranchesSignalError(OAIRepoBranch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdRepositoryCommitsSignalError() instead")
    void postV3ProjectsIdRepositoryCommitsSignalE(OAIRepoCommitDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdRepositoryCommitsSignalError(OAIRepoCommitDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdRepositoryCommitsShaCherryPickSignalError() instead")
    void postV3ProjectsIdRepositoryCommitsShaCherryPickSignalE(OAIRepoCommit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdRepositoryCommitsShaCherryPickSignalError(OAIRepoCommit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdRepositoryCommitsShaCommentsSignalError() instead")
    void postV3ProjectsIdRepositoryCommitsShaCommentsSignalE(OAICommitNote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdRepositoryCommitsShaCommentsSignalError(OAICommitNote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdRepositoryFilesSignalError() instead")
    void postV3ProjectsIdRepositoryFilesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdRepositoryFilesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdRepositoryTagsSignalError() instead")
    void postV3ProjectsIdRepositoryTagsSignalE(OAIRepoTag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdRepositoryTagsSignalError(OAIRepoTag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdRepositoryTagsTagNameReleaseSignalError() instead")
    void postV3ProjectsIdRepositoryTagsTagNameReleaseSignalE(OAIRelease summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdRepositoryTagsTagNameReleaseSignalError(OAIRelease summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdRunnersSignalError() instead")
    void postV3ProjectsIdRunnersSignalE(OAIRunner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdRunnersSignalError(OAIRunner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdServicesMattermostSlashCommandsTriggerSignalError() instead")
    void postV3ProjectsIdServicesMattermostSlashCommandsTriggerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdServicesMattermostSlashCommandsTriggerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdServicesSlackSlashCommandsTriggerSignalError() instead")
    void postV3ProjectsIdServicesSlackSlashCommandsTriggerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdServicesSlackSlashCommandsTriggerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdShareSignalError() instead")
    void postV3ProjectsIdShareSignalE(OAIProjectGroupLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdShareSignalError(OAIProjectGroupLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdSnippetsSignalError() instead")
    void postV3ProjectsIdSnippetsSignalE(OAIProjectSnippet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdSnippetsSignalError(OAIProjectSnippet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdSnippetsNoteableIdNotesSignalError() instead")
    void postV3ProjectsIdSnippetsNoteableIdNotesSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdSnippetsNoteableIdNotesSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdSnippetsSnippetIdAwardEmojiSignalError() instead")
    void postV3ProjectsIdSnippetsSnippetIdAwardEmojiSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdSnippetsSnippetIdAwardEmojiSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiSignalError() instead")
    void postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiSignalE(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiSignalError(OAIAwardEmoji summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdStarSignalError() instead")
    void postV3ProjectsIdStarSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdStarSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdStatusesShaSignalError() instead")
    void postV3ProjectsIdStatusesShaSignalE(OAICommitStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdStatusesShaSignalError(OAICommitStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdTriggersSignalError() instead")
    void postV3ProjectsIdTriggersSignalE(OAITrigger summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdTriggersSignalError(OAITrigger summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdUnarchiveSignalError() instead")
    void postV3ProjectsIdUnarchiveSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdUnarchiveSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdUploadsSignalError() instead")
    void postV3ProjectsIdUploadsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdUploadsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdVariablesSignalError() instead")
    void postV3ProjectsIdVariablesSignalE(OAIVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdVariablesSignalError(OAIVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsId_refReftriggerBuildsSignalError() instead")
    void postV3ProjectsId_refReftriggerBuildsSignalE(OAITriggerRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsId_refReftriggerBuildsSignalError(OAITriggerRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsUserUserIdSignalError() instead")
    void postV3ProjectsUserUserIdSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsUserUserIdSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdSignalError() instead")
    void putV3ProjectsIdSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdAccessRequestsUserIdApproveSignalError() instead")
    void putV3ProjectsIdAccessRequestsUserIdApproveSignalE(OAIMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdAccessRequestsUserIdApproveSignalError(OAIMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdBoardsBoardIdListsListIdSignalError() instead")
    void putV3ProjectsIdBoardsBoardIdListsListIdSignalE(OAIList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdBoardsBoardIdListsListIdSignalError(OAIList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdEnvironmentsEnvironmentIdSignalError() instead")
    void putV3ProjectsIdEnvironmentsEnvironmentIdSignalE(OAIEnvironment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdEnvironmentsEnvironmentIdSignalError(OAIEnvironment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdHooksHookIdSignalError() instead")
    void putV3ProjectsIdHooksHookIdSignalE(OAIProjectHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdHooksHookIdSignalError(OAIProjectHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdIssuesIssueIdSignalError() instead")
    void putV3ProjectsIdIssuesIssueIdSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdIssuesIssueIdSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalError() instead")
    void putV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdLabelsSignalError() instead")
    void putV3ProjectsIdLabelsSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdLabelsSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdMembersUserIdSignalError() instead")
    void putV3ProjectsIdMembersUserIdSignalE(OAIMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdMembersUserIdSignalError(OAIMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdMergeRequestMergeRequestIdSignalError() instead")
    void putV3ProjectsIdMergeRequestMergeRequestIdSignalE(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdMergeRequestMergeRequestIdSignalError(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdMergeRequestMergeRequestIdMergeSignalError() instead")
    void putV3ProjectsIdMergeRequestMergeRequestIdMergeSignalE(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdMergeRequestMergeRequestIdMergeSignalError(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdMergeRequestsMergeRequestIdSignalError() instead")
    void putV3ProjectsIdMergeRequestsMergeRequestIdSignalE(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdMergeRequestsMergeRequestIdSignalError(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdMergeRequestsMergeRequestIdMergeSignalError() instead")
    void putV3ProjectsIdMergeRequestsMergeRequestIdMergeSignalE(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdMergeRequestsMergeRequestIdMergeSignalError(OAIMergeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalError() instead")
    void putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdMilestonesMilestoneIdSignalError() instead")
    void putV3ProjectsIdMilestonesMilestoneIdSignalE(OAIMilestone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdMilestonesMilestoneIdSignalError(OAIMilestone summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdNotificationSettingsSignalError() instead")
    void putV3ProjectsIdNotificationSettingsSignalE(OAINotificationSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdNotificationSettingsSignalError(OAINotificationSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdRepositoryBranchesBranchProtectSignalError() instead")
    void putV3ProjectsIdRepositoryBranchesBranchProtectSignalE(OAIRepoBranch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdRepositoryBranchesBranchProtectSignalError(OAIRepoBranch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdRepositoryBranchesBranchUnprotectSignalError() instead")
    void putV3ProjectsIdRepositoryBranchesBranchUnprotectSignalE(OAIRepoBranch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdRepositoryBranchesBranchUnprotectSignalError(OAIRepoBranch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdRepositoryFilesSignalError() instead")
    void putV3ProjectsIdRepositoryFilesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdRepositoryFilesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdRepositoryTagsTagNameReleaseSignalError() instead")
    void putV3ProjectsIdRepositoryTagsTagNameReleaseSignalE(OAIRelease summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdRepositoryTagsTagNameReleaseSignalError(OAIRelease summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesAsanaSignalError() instead")
    void putV3ProjectsIdServicesAsanaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesAsanaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesAssemblaSignalError() instead")
    void putV3ProjectsIdServicesAssemblaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesAssemblaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesBambooSignalError() instead")
    void putV3ProjectsIdServicesBambooSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesBambooSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesBugzillaSignalError() instead")
    void putV3ProjectsIdServicesBugzillaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesBugzillaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesBuildkiteSignalError() instead")
    void putV3ProjectsIdServicesBuildkiteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesBuildkiteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesBuildsEmailSignalError() instead")
    void putV3ProjectsIdServicesBuildsEmailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesBuildsEmailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesCampfireSignalError() instead")
    void putV3ProjectsIdServicesCampfireSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesCampfireSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesCustomIssueTrackerSignalError() instead")
    void putV3ProjectsIdServicesCustomIssueTrackerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesCustomIssueTrackerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesDroneCiSignalError() instead")
    void putV3ProjectsIdServicesDroneCiSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesDroneCiSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesEmailsOnPushSignalError() instead")
    void putV3ProjectsIdServicesEmailsOnPushSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesEmailsOnPushSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesExternalWikiSignalError() instead")
    void putV3ProjectsIdServicesExternalWikiSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesExternalWikiSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesFlowdockSignalError() instead")
    void putV3ProjectsIdServicesFlowdockSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesFlowdockSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesGemnasiumSignalError() instead")
    void putV3ProjectsIdServicesGemnasiumSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesGemnasiumSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesHipchatSignalError() instead")
    void putV3ProjectsIdServicesHipchatSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesHipchatSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesIrkerSignalError() instead")
    void putV3ProjectsIdServicesIrkerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesIrkerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesJiraSignalError() instead")
    void putV3ProjectsIdServicesJiraSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesJiraSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesKubernetesSignalError() instead")
    void putV3ProjectsIdServicesKubernetesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesKubernetesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesMattermostSignalError() instead")
    void putV3ProjectsIdServicesMattermostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesMattermostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesMattermostSlashCommandsSignalError() instead")
    void putV3ProjectsIdServicesMattermostSlashCommandsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesMattermostSlashCommandsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesPipelinesEmailSignalError() instead")
    void putV3ProjectsIdServicesPipelinesEmailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesPipelinesEmailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesPivotaltrackerSignalError() instead")
    void putV3ProjectsIdServicesPivotaltrackerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesPivotaltrackerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesPushoverSignalError() instead")
    void putV3ProjectsIdServicesPushoverSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesPushoverSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesRedmineSignalError() instead")
    void putV3ProjectsIdServicesRedmineSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesRedmineSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesSlackSignalError() instead")
    void putV3ProjectsIdServicesSlackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesSlackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesSlackSlashCommandsSignalError() instead")
    void putV3ProjectsIdServicesSlackSlashCommandsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesSlackSlashCommandsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesTeamcitySignalError() instead")
    void putV3ProjectsIdServicesTeamcitySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesTeamcitySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalError() instead")
    void putV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdSnippetsSnippetIdSignalError() instead")
    void putV3ProjectsIdSnippetsSnippetIdSignalE(OAIProjectSnippet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdSnippetsSnippetIdSignalError(OAIProjectSnippet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdVariablesKeySignalError() instead")
    void putV3ProjectsIdVariablesKeySignalE(OAIVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdVariablesKeySignalError(OAIVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdSignalErrorFull() instead")
    void deleteV3ProjectsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdAccessRequestsUserIdSignalErrorFull() instead")
    void deleteV3ProjectsIdAccessRequestsUserIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdAccessRequestsUserIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdBoardsBoardIdListsListIdSignalErrorFull() instead")
    void deleteV3ProjectsIdBoardsBoardIdListsListIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdBoardsBoardIdListsListIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdDeployKeysKeyIdSignalErrorFull() instead")
    void deleteV3ProjectsIdDeployKeysKeyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdDeployKeysKeyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdDeployKeysKeyIdDisableSignalErrorFull() instead")
    void deleteV3ProjectsIdDeployKeysKeyIdDisableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdDeployKeysKeyIdDisableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdEnvironmentsEnvironmentIdSignalErrorFull() instead")
    void deleteV3ProjectsIdEnvironmentsEnvironmentIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdEnvironmentsEnvironmentIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdForkSignalErrorFull() instead")
    void deleteV3ProjectsIdForkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdForkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdHooksHookIdSignalErrorFull() instead")
    void deleteV3ProjectsIdHooksHookIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdHooksHookIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdIssuesIssueIdSignalErrorFull() instead")
    void deleteV3ProjectsIdIssuesIssueIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdIssuesIssueIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdSignalErrorFull() instead")
    void deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdSignalErrorFull() instead")
    void deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalErrorFull() instead")
    void deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdIssuesSubscribableIdSubscriptionSignalErrorFull() instead")
    void deleteV3ProjectsIdIssuesSubscribableIdSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdIssuesSubscribableIdSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdKeysKeyIdSignalErrorFull() instead")
    void deleteV3ProjectsIdKeysKeyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdKeysKeyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdKeysKeyIdDisableSignalErrorFull() instead")
    void deleteV3ProjectsIdKeysKeyIdDisableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdKeysKeyIdDisableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdLabelsSignalErrorFull() instead")
    void deleteV3ProjectsIdLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdLabelsSubscribableIdSubscriptionSignalErrorFull() instead")
    void deleteV3ProjectsIdLabelsSubscribableIdSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdLabelsSubscribableIdSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdMembersUserIdSignalErrorFull() instead")
    void deleteV3ProjectsIdMembersUserIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdMembersUserIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionSignalErrorFull() instead")
    void deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdMergeRequestsMergeRequestIdSignalErrorFull() instead")
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdSignalErrorFull() instead")
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdSignalErrorFull() instead")
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalErrorFull() instead")
    void deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionSignalErrorFull() instead")
    void deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdRepositoryBranchesBranchSignalErrorFull() instead")
    void deleteV3ProjectsIdRepositoryBranchesBranchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdRepositoryBranchesBranchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdRepositoryFilesSignalErrorFull() instead")
    void deleteV3ProjectsIdRepositoryFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdRepositoryFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdRepositoryMergedBranchesSignalErrorFull() instead")
    void deleteV3ProjectsIdRepositoryMergedBranchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdRepositoryMergedBranchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdRepositoryTagsTagNameSignalErrorFull() instead")
    void deleteV3ProjectsIdRepositoryTagsTagNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdRepositoryTagsTagNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdRunnersRunnerIdSignalErrorFull() instead")
    void deleteV3ProjectsIdRunnersRunnerIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdRunnersRunnerIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdServicesServiceSlugSignalErrorFull() instead")
    void deleteV3ProjectsIdServicesServiceSlugSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdServicesServiceSlugSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdShareGroupIdSignalErrorFull() instead")
    void deleteV3ProjectsIdShareGroupIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdShareGroupIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalErrorFull() instead")
    void deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdSnippetsSnippetIdSignalErrorFull() instead")
    void deleteV3ProjectsIdSnippetsSnippetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdSnippetsSnippetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdSignalErrorFull() instead")
    void deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdSignalErrorFull() instead")
    void deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdStarSignalErrorFull() instead")
    void deleteV3ProjectsIdStarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdStarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdTriggersTokenSignalErrorFull() instead")
    void deleteV3ProjectsIdTriggersTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdTriggersTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteV3ProjectsIdVariablesKeySignalErrorFull() instead")
    void deleteV3ProjectsIdVariablesKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3ProjectsIdVariablesKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsSignalErrorFull() instead")
    void getV3ProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsAllSignalErrorFull() instead")
    void getV3ProjectsAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSignalErrorFull() instead")
    void getV3ProjectsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdAccessRequestsSignalErrorFull() instead")
    void getV3ProjectsIdAccessRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdAccessRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdBoardsSignalErrorFull() instead")
    void getV3ProjectsIdBoardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdBoardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdBoardsBoardIdListsSignalErrorFull() instead")
    void getV3ProjectsIdBoardsBoardIdListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdBoardsBoardIdListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdBoardsBoardIdListsListIdSignalErrorFull() instead")
    void getV3ProjectsIdBoardsBoardIdListsListIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdBoardsBoardIdListsListIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdBuildsSignalErrorFull() instead")
    void getV3ProjectsIdBuildsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdBuildsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdBuildsArtifactsRefNameDownloadSignalErrorFull() instead")
    void getV3ProjectsIdBuildsArtifactsRefNameDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdBuildsArtifactsRefNameDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdBuildsBuildIdSignalErrorFull() instead")
    void getV3ProjectsIdBuildsBuildIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdBuildsBuildIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdBuildsBuildIdArtifactsSignalErrorFull() instead")
    void getV3ProjectsIdBuildsBuildIdArtifactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdBuildsBuildIdArtifactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdBuildsBuildIdTraceSignalErrorFull() instead")
    void getV3ProjectsIdBuildsBuildIdTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdBuildsBuildIdTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdDeployKeysSignalErrorFull() instead")
    void getV3ProjectsIdDeployKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdDeployKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdDeployKeysKeyIdSignalErrorFull() instead")
    void getV3ProjectsIdDeployKeysKeyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdDeployKeysKeyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdDeploymentsSignalErrorFull() instead")
    void getV3ProjectsIdDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdDeploymentsDeploymentIdSignalErrorFull() instead")
    void getV3ProjectsIdDeploymentsDeploymentIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdDeploymentsDeploymentIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdEnvironmentsSignalErrorFull() instead")
    void getV3ProjectsIdEnvironmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdEnvironmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdEventsSignalErrorFull() instead")
    void getV3ProjectsIdEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdHooksSignalErrorFull() instead")
    void getV3ProjectsIdHooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdHooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdHooksHookIdSignalErrorFull() instead")
    void getV3ProjectsIdHooksHookIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdHooksHookIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesSignalErrorFull() instead")
    void getV3ProjectsIdIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesIssueIdSignalErrorFull() instead")
    void getV3ProjectsIdIssuesIssueIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesIssueIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesIssueIdAwardEmojiSignalErrorFull() instead")
    void getV3ProjectsIdIssuesIssueIdAwardEmojiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesIssueIdAwardEmojiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdSignalErrorFull() instead")
    void getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiSignalErrorFull() instead")
    void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdSignalErrorFull() instead")
    void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesIssueIdTimeStatsSignalErrorFull() instead")
    void getV3ProjectsIdIssuesIssueIdTimeStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesIssueIdTimeStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesNoteableIdNotesSignalErrorFull() instead")
    void getV3ProjectsIdIssuesNoteableIdNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesNoteableIdNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalErrorFull() instead")
    void getV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdKeysSignalErrorFull() instead")
    void getV3ProjectsIdKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdKeysKeyIdSignalErrorFull() instead")
    void getV3ProjectsIdKeysKeyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdKeysKeyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdLabelsSignalErrorFull() instead")
    void getV3ProjectsIdLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMembersSignalErrorFull() instead")
    void getV3ProjectsIdMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMembersUserIdSignalErrorFull() instead")
    void getV3ProjectsIdMembersUserIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMembersUserIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestMergeRequestIdSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestMergeRequestIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestMergeRequestIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestMergeRequestIdChangesSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestMergeRequestIdChangesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestMergeRequestIdChangesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestMergeRequestIdCommentsSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestMergeRequestIdCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestMergeRequestIdCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestMergeRequestIdCommitsSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestMergeRequestIdCommitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestMergeRequestIdCommitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdChangesSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdChangesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdChangesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdCommentsSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdCommitsSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdCommitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdCommitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdVersionsSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsNoteableIdNotesSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestsNoteableIdNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsNoteableIdNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalErrorFull() instead")
    void getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMilestonesSignalErrorFull() instead")
    void getV3ProjectsIdMilestonesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMilestonesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMilestonesMilestoneIdSignalErrorFull() instead")
    void getV3ProjectsIdMilestonesMilestoneIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMilestonesMilestoneIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdMilestonesMilestoneIdIssuesSignalErrorFull() instead")
    void getV3ProjectsIdMilestonesMilestoneIdIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdMilestonesMilestoneIdIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdNotificationSettingsSignalErrorFull() instead")
    void getV3ProjectsIdNotificationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdNotificationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdPipelinesSignalErrorFull() instead")
    void getV3ProjectsIdPipelinesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdPipelinesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdPipelinesPipelineIdSignalErrorFull() instead")
    void getV3ProjectsIdPipelinesPipelineIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdPipelinesPipelineIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryArchiveSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryBlobsShaSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryBlobsShaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryBlobsShaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryBranchesSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryBranchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryBranchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryBranchesBranchSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryBranchesBranchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryBranchesBranchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryCommitsSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryCommitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryCommitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryCommitsShaSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryCommitsShaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryCommitsShaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryCommitsShaBlobSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryCommitsShaBlobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryCommitsShaBlobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryCommitsShaBuildsSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryCommitsShaBuildsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryCommitsShaBuildsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryCommitsShaCommentsSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryCommitsShaCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryCommitsShaCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryCommitsShaDiffSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryCommitsShaDiffSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryCommitsShaDiffSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryCommitsShaStatusesSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryCommitsShaStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryCommitsShaStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryCompareSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryCompareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryCompareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryContributorsSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryContributorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryContributorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryFilesSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryRawBlobsShaSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryRawBlobsShaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryRawBlobsShaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryTagsSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryTagsTagNameSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryTagsTagNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryTagsTagNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRepositoryTreeSignalErrorFull() instead")
    void getV3ProjectsIdRepositoryTreeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRepositoryTreeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdRunnersSignalErrorFull() instead")
    void getV3ProjectsIdRunnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdRunnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdServicesServiceSlugSignalErrorFull() instead")
    void getV3ProjectsIdServicesServiceSlugSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdServicesServiceSlugSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsSignalErrorFull() instead")
    void getV3ProjectsIdSnippetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsNoteableIdNotesSignalErrorFull() instead")
    void getV3ProjectsIdSnippetsNoteableIdNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsNoteableIdNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalErrorFull() instead")
    void getV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsSnippetIdSignalErrorFull() instead")
    void getV3ProjectsIdSnippetsSnippetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsSnippetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsSnippetIdAwardEmojiSignalErrorFull() instead")
    void getV3ProjectsIdSnippetsSnippetIdAwardEmojiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsSnippetIdAwardEmojiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdSignalErrorFull() instead")
    void getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiSignalErrorFull() instead")
    void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdSignalErrorFull() instead")
    void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdSnippetsSnippetIdRawSignalErrorFull() instead")
    void getV3ProjectsIdSnippetsSnippetIdRawSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdSnippetsSnippetIdRawSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdTriggersSignalErrorFull() instead")
    void getV3ProjectsIdTriggersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdTriggersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdTriggersTokenSignalErrorFull() instead")
    void getV3ProjectsIdTriggersTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdTriggersTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdUsersSignalErrorFull() instead")
    void getV3ProjectsIdUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdVariablesSignalErrorFull() instead")
    void getV3ProjectsIdVariablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdVariablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsIdVariablesKeySignalErrorFull() instead")
    void getV3ProjectsIdVariablesKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsIdVariablesKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsOwnedSignalErrorFull() instead")
    void getV3ProjectsOwnedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsOwnedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsSearchQuerySignalErrorFull() instead")
    void getV3ProjectsSearchQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsSearchQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsStarredSignalErrorFull() instead")
    void getV3ProjectsStarredSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsStarredSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3ProjectsVisibleSignalErrorFull() instead")
    void getV3ProjectsVisibleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3ProjectsVisibleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsSignalErrorFull() instead")
    void postV3ProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsForkIdSignalErrorFull() instead")
    void postV3ProjectsForkIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsForkIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdAccessRequestsSignalErrorFull() instead")
    void postV3ProjectsIdAccessRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdAccessRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdArchiveSignalErrorFull() instead")
    void postV3ProjectsIdArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdBoardsBoardIdListsSignalErrorFull() instead")
    void postV3ProjectsIdBoardsBoardIdListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdBoardsBoardIdListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdBuildsBuildIdArtifactsKeepSignalErrorFull() instead")
    void postV3ProjectsIdBuildsBuildIdArtifactsKeepSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdBuildsBuildIdArtifactsKeepSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdBuildsBuildIdCancelSignalErrorFull() instead")
    void postV3ProjectsIdBuildsBuildIdCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdBuildsBuildIdCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdBuildsBuildIdEraseSignalErrorFull() instead")
    void postV3ProjectsIdBuildsBuildIdEraseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdBuildsBuildIdEraseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdBuildsBuildIdPlaySignalErrorFull() instead")
    void postV3ProjectsIdBuildsBuildIdPlaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdBuildsBuildIdPlaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdBuildsBuildIdRetrySignalErrorFull() instead")
    void postV3ProjectsIdBuildsBuildIdRetrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdBuildsBuildIdRetrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdDeployKeysSignalErrorFull() instead")
    void postV3ProjectsIdDeployKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdDeployKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdDeployKeysKeyIdEnableSignalErrorFull() instead")
    void postV3ProjectsIdDeployKeysKeyIdEnableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdDeployKeysKeyIdEnableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdEnvironmentsSignalErrorFull() instead")
    void postV3ProjectsIdEnvironmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdEnvironmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdForkForkedFromIdSignalErrorFull() instead")
    void postV3ProjectsIdForkForkedFromIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdForkForkedFromIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdHooksSignalErrorFull() instead")
    void postV3ProjectsIdHooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdHooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesSignalErrorFull() instead")
    void postV3ProjectsIdIssuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesIssueIdAddSpentTimeSignalErrorFull() instead")
    void postV3ProjectsIdIssuesIssueIdAddSpentTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesIssueIdAddSpentTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesIssueIdAwardEmojiSignalErrorFull() instead")
    void postV3ProjectsIdIssuesIssueIdAwardEmojiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesIssueIdAwardEmojiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesIssueIdMoveSignalErrorFull() instead")
    void postV3ProjectsIdIssuesIssueIdMoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesIssueIdMoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiSignalErrorFull() instead")
    void postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesIssueIdResetSpentTimeSignalErrorFull() instead")
    void postV3ProjectsIdIssuesIssueIdResetSpentTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesIssueIdResetSpentTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesIssueIdResetTimeEstimateSignalErrorFull() instead")
    void postV3ProjectsIdIssuesIssueIdResetTimeEstimateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesIssueIdResetTimeEstimateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesIssueIdTimeEstimateSignalErrorFull() instead")
    void postV3ProjectsIdIssuesIssueIdTimeEstimateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesIssueIdTimeEstimateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesIssueIdTodoSignalErrorFull() instead")
    void postV3ProjectsIdIssuesIssueIdTodoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesIssueIdTodoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesNoteableIdNotesSignalErrorFull() instead")
    void postV3ProjectsIdIssuesNoteableIdNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesNoteableIdNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdIssuesSubscribableIdSubscriptionSignalErrorFull() instead")
    void postV3ProjectsIdIssuesSubscribableIdSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdIssuesSubscribableIdSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdKeysSignalErrorFull() instead")
    void postV3ProjectsIdKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdKeysKeyIdEnableSignalErrorFull() instead")
    void postV3ProjectsIdKeysKeyIdEnableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdKeysKeyIdEnableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdLabelsSignalErrorFull() instead")
    void postV3ProjectsIdLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdLabelsSubscribableIdSubscriptionSignalErrorFull() instead")
    void postV3ProjectsIdLabelsSubscribableIdSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdLabelsSubscribableIdSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMembersSignalErrorFull() instead")
    void postV3ProjectsIdMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsSignalErrorFull() instead")
    void postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestMergeRequestIdCommentsSignalErrorFull() instead")
    void postV3ProjectsIdMergeRequestMergeRequestIdCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestMergeRequestIdCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestSubscribableIdSubscriptionSignalErrorFull() instead")
    void postV3ProjectsIdMergeRequestSubscribableIdSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestSubscribableIdSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsSignalErrorFull() instead")
    void postV3ProjectsIdMergeRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeSignalErrorFull() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiSignalErrorFull() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsSignalErrorFull() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdCommentsSignalErrorFull() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiSignalErrorFull() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeSignalErrorFull() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateSignalErrorFull() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateSignalErrorFull() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsMergeRequestIdTodoSignalErrorFull() instead")
    void postV3ProjectsIdMergeRequestsMergeRequestIdTodoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsMergeRequestIdTodoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsNoteableIdNotesSignalErrorFull() instead")
    void postV3ProjectsIdMergeRequestsNoteableIdNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsNoteableIdNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionSignalErrorFull() instead")
    void postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdMilestonesSignalErrorFull() instead")
    void postV3ProjectsIdMilestonesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdMilestonesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdPipelineSignalErrorFull() instead")
    void postV3ProjectsIdPipelineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdPipelineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdPipelinesPipelineIdCancelSignalErrorFull() instead")
    void postV3ProjectsIdPipelinesPipelineIdCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdPipelinesPipelineIdCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdPipelinesPipelineIdRetrySignalErrorFull() instead")
    void postV3ProjectsIdPipelinesPipelineIdRetrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdPipelinesPipelineIdRetrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdRepositoryBranchesSignalErrorFull() instead")
    void postV3ProjectsIdRepositoryBranchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdRepositoryBranchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdRepositoryCommitsSignalErrorFull() instead")
    void postV3ProjectsIdRepositoryCommitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdRepositoryCommitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdRepositoryCommitsShaCherryPickSignalErrorFull() instead")
    void postV3ProjectsIdRepositoryCommitsShaCherryPickSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdRepositoryCommitsShaCherryPickSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdRepositoryCommitsShaCommentsSignalErrorFull() instead")
    void postV3ProjectsIdRepositoryCommitsShaCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdRepositoryCommitsShaCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdRepositoryFilesSignalErrorFull() instead")
    void postV3ProjectsIdRepositoryFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdRepositoryFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdRepositoryTagsSignalErrorFull() instead")
    void postV3ProjectsIdRepositoryTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdRepositoryTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdRepositoryTagsTagNameReleaseSignalErrorFull() instead")
    void postV3ProjectsIdRepositoryTagsTagNameReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdRepositoryTagsTagNameReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdRunnersSignalErrorFull() instead")
    void postV3ProjectsIdRunnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdRunnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdServicesMattermostSlashCommandsTriggerSignalErrorFull() instead")
    void postV3ProjectsIdServicesMattermostSlashCommandsTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdServicesMattermostSlashCommandsTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdServicesSlackSlashCommandsTriggerSignalErrorFull() instead")
    void postV3ProjectsIdServicesSlackSlashCommandsTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdServicesSlackSlashCommandsTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdShareSignalErrorFull() instead")
    void postV3ProjectsIdShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdSnippetsSignalErrorFull() instead")
    void postV3ProjectsIdSnippetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdSnippetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdSnippetsNoteableIdNotesSignalErrorFull() instead")
    void postV3ProjectsIdSnippetsNoteableIdNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdSnippetsNoteableIdNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdSnippetsSnippetIdAwardEmojiSignalErrorFull() instead")
    void postV3ProjectsIdSnippetsSnippetIdAwardEmojiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdSnippetsSnippetIdAwardEmojiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiSignalErrorFull() instead")
    void postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdStarSignalErrorFull() instead")
    void postV3ProjectsIdStarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdStarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdStatusesShaSignalErrorFull() instead")
    void postV3ProjectsIdStatusesShaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdStatusesShaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdTriggersSignalErrorFull() instead")
    void postV3ProjectsIdTriggersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdTriggersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdUnarchiveSignalErrorFull() instead")
    void postV3ProjectsIdUnarchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdUnarchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdUploadsSignalErrorFull() instead")
    void postV3ProjectsIdUploadsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdUploadsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsIdVariablesSignalErrorFull() instead")
    void postV3ProjectsIdVariablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsIdVariablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsId_refReftriggerBuildsSignalErrorFull() instead")
    void postV3ProjectsId_refReftriggerBuildsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsId_refReftriggerBuildsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postV3ProjectsUserUserIdSignalErrorFull() instead")
    void postV3ProjectsUserUserIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postV3ProjectsUserUserIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdSignalErrorFull() instead")
    void putV3ProjectsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdAccessRequestsUserIdApproveSignalErrorFull() instead")
    void putV3ProjectsIdAccessRequestsUserIdApproveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdAccessRequestsUserIdApproveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdBoardsBoardIdListsListIdSignalErrorFull() instead")
    void putV3ProjectsIdBoardsBoardIdListsListIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdBoardsBoardIdListsListIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdEnvironmentsEnvironmentIdSignalErrorFull() instead")
    void putV3ProjectsIdEnvironmentsEnvironmentIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdEnvironmentsEnvironmentIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdHooksHookIdSignalErrorFull() instead")
    void putV3ProjectsIdHooksHookIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdHooksHookIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdIssuesIssueIdSignalErrorFull() instead")
    void putV3ProjectsIdIssuesIssueIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdIssuesIssueIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalErrorFull() instead")
    void putV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdIssuesNoteableIdNotesNoteIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdLabelsSignalErrorFull() instead")
    void putV3ProjectsIdLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdMembersUserIdSignalErrorFull() instead")
    void putV3ProjectsIdMembersUserIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdMembersUserIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdMergeRequestMergeRequestIdSignalErrorFull() instead")
    void putV3ProjectsIdMergeRequestMergeRequestIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdMergeRequestMergeRequestIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdMergeRequestMergeRequestIdMergeSignalErrorFull() instead")
    void putV3ProjectsIdMergeRequestMergeRequestIdMergeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdMergeRequestMergeRequestIdMergeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdMergeRequestsMergeRequestIdSignalErrorFull() instead")
    void putV3ProjectsIdMergeRequestsMergeRequestIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdMergeRequestsMergeRequestIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdMergeRequestsMergeRequestIdMergeSignalErrorFull() instead")
    void putV3ProjectsIdMergeRequestsMergeRequestIdMergeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdMergeRequestsMergeRequestIdMergeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalErrorFull() instead")
    void putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdMilestonesMilestoneIdSignalErrorFull() instead")
    void putV3ProjectsIdMilestonesMilestoneIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdMilestonesMilestoneIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdNotificationSettingsSignalErrorFull() instead")
    void putV3ProjectsIdNotificationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdNotificationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdRepositoryBranchesBranchProtectSignalErrorFull() instead")
    void putV3ProjectsIdRepositoryBranchesBranchProtectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdRepositoryBranchesBranchProtectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdRepositoryBranchesBranchUnprotectSignalErrorFull() instead")
    void putV3ProjectsIdRepositoryBranchesBranchUnprotectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdRepositoryBranchesBranchUnprotectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdRepositoryFilesSignalErrorFull() instead")
    void putV3ProjectsIdRepositoryFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdRepositoryFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdRepositoryTagsTagNameReleaseSignalErrorFull() instead")
    void putV3ProjectsIdRepositoryTagsTagNameReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdRepositoryTagsTagNameReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesAsanaSignalErrorFull() instead")
    void putV3ProjectsIdServicesAsanaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesAsanaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesAssemblaSignalErrorFull() instead")
    void putV3ProjectsIdServicesAssemblaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesAssemblaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesBambooSignalErrorFull() instead")
    void putV3ProjectsIdServicesBambooSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesBambooSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesBugzillaSignalErrorFull() instead")
    void putV3ProjectsIdServicesBugzillaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesBugzillaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesBuildkiteSignalErrorFull() instead")
    void putV3ProjectsIdServicesBuildkiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesBuildkiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesBuildsEmailSignalErrorFull() instead")
    void putV3ProjectsIdServicesBuildsEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesBuildsEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesCampfireSignalErrorFull() instead")
    void putV3ProjectsIdServicesCampfireSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesCampfireSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesCustomIssueTrackerSignalErrorFull() instead")
    void putV3ProjectsIdServicesCustomIssueTrackerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesCustomIssueTrackerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesDroneCiSignalErrorFull() instead")
    void putV3ProjectsIdServicesDroneCiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesDroneCiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesEmailsOnPushSignalErrorFull() instead")
    void putV3ProjectsIdServicesEmailsOnPushSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesEmailsOnPushSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesExternalWikiSignalErrorFull() instead")
    void putV3ProjectsIdServicesExternalWikiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesExternalWikiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesFlowdockSignalErrorFull() instead")
    void putV3ProjectsIdServicesFlowdockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesFlowdockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesGemnasiumSignalErrorFull() instead")
    void putV3ProjectsIdServicesGemnasiumSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesGemnasiumSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesHipchatSignalErrorFull() instead")
    void putV3ProjectsIdServicesHipchatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesHipchatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesIrkerSignalErrorFull() instead")
    void putV3ProjectsIdServicesIrkerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesIrkerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesJiraSignalErrorFull() instead")
    void putV3ProjectsIdServicesJiraSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesJiraSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesKubernetesSignalErrorFull() instead")
    void putV3ProjectsIdServicesKubernetesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesKubernetesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesMattermostSignalErrorFull() instead")
    void putV3ProjectsIdServicesMattermostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesMattermostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesMattermostSlashCommandsSignalErrorFull() instead")
    void putV3ProjectsIdServicesMattermostSlashCommandsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesMattermostSlashCommandsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesPipelinesEmailSignalErrorFull() instead")
    void putV3ProjectsIdServicesPipelinesEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesPipelinesEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesPivotaltrackerSignalErrorFull() instead")
    void putV3ProjectsIdServicesPivotaltrackerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesPivotaltrackerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesPushoverSignalErrorFull() instead")
    void putV3ProjectsIdServicesPushoverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesPushoverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesRedmineSignalErrorFull() instead")
    void putV3ProjectsIdServicesRedmineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesRedmineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesSlackSignalErrorFull() instead")
    void putV3ProjectsIdServicesSlackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesSlackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesSlackSlashCommandsSignalErrorFull() instead")
    void putV3ProjectsIdServicesSlackSlashCommandsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesSlackSlashCommandsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdServicesTeamcitySignalErrorFull() instead")
    void putV3ProjectsIdServicesTeamcitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdServicesTeamcitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalErrorFull() instead")
    void putV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdSnippetsNoteableIdNotesNoteIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdSnippetsSnippetIdSignalErrorFull() instead")
    void putV3ProjectsIdSnippetsSnippetIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdSnippetsSnippetIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3ProjectsIdVariablesKeySignalErrorFull() instead")
    void putV3ProjectsIdVariablesKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3ProjectsIdVariablesKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
