/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3RunnersId_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3RunnersId_request::OAIPutV3RunnersId_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3RunnersId_request::OAIPutV3RunnersId_request() {
    this->initializeModel();
}

OAIPutV3RunnersId_request::~OAIPutV3RunnersId_request() {}

void OAIPutV3RunnersId_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_tag_list_isSet = false;
    m_tag_list_isValid = false;

    m_run_untagged_isSet = false;
    m_run_untagged_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;
}

void OAIPutV3RunnersId_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3RunnersId_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_tag_list_isValid = ::OpenAPI::fromJsonValue(m_tag_list, json[QString("tag_list")]);
    m_tag_list_isSet = !json[QString("tag_list")].isNull() && m_tag_list_isValid;

    m_run_untagged_isValid = ::OpenAPI::fromJsonValue(m_run_untagged, json[QString("run_untagged")]);
    m_run_untagged_isSet = !json[QString("run_untagged")].isNull() && m_run_untagged_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;
}

QString OAIPutV3RunnersId_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3RunnersId_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_tag_list.size() > 0) {
        obj.insert(QString("tag_list"), ::OpenAPI::toJsonValue(m_tag_list));
    }
    if (m_run_untagged_isSet) {
        obj.insert(QString("run_untagged"), ::OpenAPI::toJsonValue(m_run_untagged));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    return obj;
}

QString OAIPutV3RunnersId_request::getDescription() const {
    return m_description;
}
void OAIPutV3RunnersId_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPutV3RunnersId_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPutV3RunnersId_request::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIPutV3RunnersId_request::isActive() const {
    return m_active;
}
void OAIPutV3RunnersId_request::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIPutV3RunnersId_request::is_active_Set() const{
    return m_active_isSet;
}

bool OAIPutV3RunnersId_request::is_active_Valid() const{
    return m_active_isValid;
}

QList<QString> OAIPutV3RunnersId_request::getTagList() const {
    return m_tag_list;
}
void OAIPutV3RunnersId_request::setTagList(const QList<QString> &tag_list) {
    m_tag_list = tag_list;
    m_tag_list_isSet = true;
}

bool OAIPutV3RunnersId_request::is_tag_list_Set() const{
    return m_tag_list_isSet;
}

bool OAIPutV3RunnersId_request::is_tag_list_Valid() const{
    return m_tag_list_isValid;
}

bool OAIPutV3RunnersId_request::isRunUntagged() const {
    return m_run_untagged;
}
void OAIPutV3RunnersId_request::setRunUntagged(const bool &run_untagged) {
    m_run_untagged = run_untagged;
    m_run_untagged_isSet = true;
}

bool OAIPutV3RunnersId_request::is_run_untagged_Set() const{
    return m_run_untagged_isSet;
}

bool OAIPutV3RunnersId_request::is_run_untagged_Valid() const{
    return m_run_untagged_isValid;
}

bool OAIPutV3RunnersId_request::isLocked() const {
    return m_locked;
}
void OAIPutV3RunnersId_request::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIPutV3RunnersId_request::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIPutV3RunnersId_request::is_locked_Valid() const{
    return m_locked_isValid;
}

bool OAIPutV3RunnersId_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_untagged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3RunnersId_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
