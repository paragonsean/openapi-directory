/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostV3GroupsIdMembers_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostV3GroupsIdMembers_request::OAIPostV3GroupsIdMembers_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostV3GroupsIdMembers_request::OAIPostV3GroupsIdMembers_request() {
    this->initializeModel();
}

OAIPostV3GroupsIdMembers_request::~OAIPostV3GroupsIdMembers_request() {}

void OAIPostV3GroupsIdMembers_request::initializeModel() {

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_access_level_isSet = false;
    m_access_level_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;
}

void OAIPostV3GroupsIdMembers_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostV3GroupsIdMembers_request::fromJsonObject(QJsonObject json) {

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_access_level_isValid = ::OpenAPI::fromJsonValue(m_access_level, json[QString("access_level")]);
    m_access_level_isSet = !json[QString("access_level")].isNull() && m_access_level_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;
}

QString OAIPostV3GroupsIdMembers_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostV3GroupsIdMembers_request::asJsonObject() const {
    QJsonObject obj;
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_access_level_isSet) {
        obj.insert(QString("access_level"), ::OpenAPI::toJsonValue(m_access_level));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    return obj;
}

qint32 OAIPostV3GroupsIdMembers_request::getUserId() const {
    return m_user_id;
}
void OAIPostV3GroupsIdMembers_request::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIPostV3GroupsIdMembers_request::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIPostV3GroupsIdMembers_request::is_user_id_Valid() const{
    return m_user_id_isValid;
}

qint32 OAIPostV3GroupsIdMembers_request::getAccessLevel() const {
    return m_access_level;
}
void OAIPostV3GroupsIdMembers_request::setAccessLevel(const qint32 &access_level) {
    m_access_level = access_level;
    m_access_level_isSet = true;
}

bool OAIPostV3GroupsIdMembers_request::is_access_level_Set() const{
    return m_access_level_isSet;
}

bool OAIPostV3GroupsIdMembers_request::is_access_level_Valid() const{
    return m_access_level_isValid;
}

QDateTime OAIPostV3GroupsIdMembers_request::getExpiresAt() const {
    return m_expires_at;
}
void OAIPostV3GroupsIdMembers_request::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIPostV3GroupsIdMembers_request::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIPostV3GroupsIdMembers_request::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

bool OAIPostV3GroupsIdMembers_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostV3GroupsIdMembers_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_id_isValid && m_access_level_isValid && true;
}

} // namespace OpenAPI
