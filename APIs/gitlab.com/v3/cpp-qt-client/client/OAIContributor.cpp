/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContributor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContributor::OAIContributor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContributor::OAIContributor() {
    this->initializeModel();
}

OAIContributor::~OAIContributor() {}

void OAIContributor::initializeModel() {

    m_additions_isSet = false;
    m_additions_isValid = false;

    m_commits_isSet = false;
    m_commits_isValid = false;

    m_deletions_isSet = false;
    m_deletions_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIContributor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContributor::fromJsonObject(QJsonObject json) {

    m_additions_isValid = ::OpenAPI::fromJsonValue(m_additions, json[QString("additions")]);
    m_additions_isSet = !json[QString("additions")].isNull() && m_additions_isValid;

    m_commits_isValid = ::OpenAPI::fromJsonValue(m_commits, json[QString("commits")]);
    m_commits_isSet = !json[QString("commits")].isNull() && m_commits_isValid;

    m_deletions_isValid = ::OpenAPI::fromJsonValue(m_deletions, json[QString("deletions")]);
    m_deletions_isSet = !json[QString("deletions")].isNull() && m_deletions_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIContributor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContributor::asJsonObject() const {
    QJsonObject obj;
    if (m_additions_isSet) {
        obj.insert(QString("additions"), ::OpenAPI::toJsonValue(m_additions));
    }
    if (m_commits_isSet) {
        obj.insert(QString("commits"), ::OpenAPI::toJsonValue(m_commits));
    }
    if (m_deletions_isSet) {
        obj.insert(QString("deletions"), ::OpenAPI::toJsonValue(m_deletions));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIContributor::getAdditions() const {
    return m_additions;
}
void OAIContributor::setAdditions(const QString &additions) {
    m_additions = additions;
    m_additions_isSet = true;
}

bool OAIContributor::is_additions_Set() const{
    return m_additions_isSet;
}

bool OAIContributor::is_additions_Valid() const{
    return m_additions_isValid;
}

QString OAIContributor::getCommits() const {
    return m_commits;
}
void OAIContributor::setCommits(const QString &commits) {
    m_commits = commits;
    m_commits_isSet = true;
}

bool OAIContributor::is_commits_Set() const{
    return m_commits_isSet;
}

bool OAIContributor::is_commits_Valid() const{
    return m_commits_isValid;
}

QString OAIContributor::getDeletions() const {
    return m_deletions;
}
void OAIContributor::setDeletions(const QString &deletions) {
    m_deletions = deletions;
    m_deletions_isSet = true;
}

bool OAIContributor::is_deletions_Set() const{
    return m_deletions_isSet;
}

bool OAIContributor::is_deletions_Valid() const{
    return m_deletions_isValid;
}

QString OAIContributor::getEmail() const {
    return m_email;
}
void OAIContributor::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIContributor::is_email_Set() const{
    return m_email_isSet;
}

bool OAIContributor::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIContributor::getName() const {
    return m_name;
}
void OAIContributor::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContributor::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContributor::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIContributor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContributor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
