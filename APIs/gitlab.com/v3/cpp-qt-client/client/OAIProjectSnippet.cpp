/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectSnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectSnippet::OAIProjectSnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectSnippet::OAIProjectSnippet() {
    this->initializeModel();
}

OAIProjectSnippet::~OAIProjectSnippet() {}

void OAIProjectSnippet::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_web_url_isSet = false;
    m_web_url_isValid = false;
}

void OAIProjectSnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectSnippet::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("file_name")]);
    m_file_name_isSet = !json[QString("file_name")].isNull() && m_file_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_web_url_isValid = ::OpenAPI::fromJsonValue(m_web_url, json[QString("web_url")]);
    m_web_url_isSet = !json[QString("web_url")].isNull() && m_web_url_isValid;
}

QString OAIProjectSnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectSnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("file_name"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_web_url_isSet) {
        obj.insert(QString("web_url"), ::OpenAPI::toJsonValue(m_web_url));
    }
    return obj;
}

OAIUserBasic OAIProjectSnippet::getAuthor() const {
    return m_author;
}
void OAIProjectSnippet::setAuthor(const OAIUserBasic &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIProjectSnippet::is_author_Set() const{
    return m_author_isSet;
}

bool OAIProjectSnippet::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIProjectSnippet::getCreatedAt() const {
    return m_created_at;
}
void OAIProjectSnippet::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIProjectSnippet::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIProjectSnippet::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIProjectSnippet::getExpiresAt() const {
    return m_expires_at;
}
void OAIProjectSnippet::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIProjectSnippet::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIProjectSnippet::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAIProjectSnippet::getFileName() const {
    return m_file_name;
}
void OAIProjectSnippet::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIProjectSnippet::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIProjectSnippet::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIProjectSnippet::getId() const {
    return m_id;
}
void OAIProjectSnippet::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProjectSnippet::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProjectSnippet::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProjectSnippet::getTitle() const {
    return m_title;
}
void OAIProjectSnippet::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProjectSnippet::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProjectSnippet::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIProjectSnippet::getUpdatedAt() const {
    return m_updated_at;
}
void OAIProjectSnippet::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIProjectSnippet::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIProjectSnippet::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIProjectSnippet::getWebUrl() const {
    return m_web_url;
}
void OAIProjectSnippet::setWebUrl(const QString &web_url) {
    m_web_url = web_url;
    m_web_url_isSet = true;
}

bool OAIProjectSnippet::is_web_url_Set() const{
    return m_web_url_isSet;
}

bool OAIProjectSnippet::is_web_url_Valid() const{
    return m_web_url_isValid;
}

bool OAIProjectSnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectSnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
