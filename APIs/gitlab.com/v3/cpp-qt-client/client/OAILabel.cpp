/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabel::OAILabel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabel::OAILabel() {
    this->initializeModel();
}

OAILabel::~OAILabel() {}

void OAILabel::initializeModel() {

    m_closed_issues_count_isSet = false;
    m_closed_issues_count_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_open_issues_count_isSet = false;
    m_open_issues_count_isValid = false;

    m_open_merge_requests_count_isSet = false;
    m_open_merge_requests_count_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_subscribed_isSet = false;
    m_subscribed_isValid = false;
}

void OAILabel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabel::fromJsonObject(QJsonObject json) {

    m_closed_issues_count_isValid = ::OpenAPI::fromJsonValue(m_closed_issues_count, json[QString("closed_issues_count")]);
    m_closed_issues_count_isSet = !json[QString("closed_issues_count")].isNull() && m_closed_issues_count_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_open_issues_count_isValid = ::OpenAPI::fromJsonValue(m_open_issues_count, json[QString("open_issues_count")]);
    m_open_issues_count_isSet = !json[QString("open_issues_count")].isNull() && m_open_issues_count_isValid;

    m_open_merge_requests_count_isValid = ::OpenAPI::fromJsonValue(m_open_merge_requests_count, json[QString("open_merge_requests_count")]);
    m_open_merge_requests_count_isSet = !json[QString("open_merge_requests_count")].isNull() && m_open_merge_requests_count_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_subscribed_isValid = ::OpenAPI::fromJsonValue(m_subscribed, json[QString("subscribed")]);
    m_subscribed_isSet = !json[QString("subscribed")].isNull() && m_subscribed_isValid;
}

QString OAILabel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabel::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_issues_count_isSet) {
        obj.insert(QString("closed_issues_count"), ::OpenAPI::toJsonValue(m_closed_issues_count));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_open_issues_count_isSet) {
        obj.insert(QString("open_issues_count"), ::OpenAPI::toJsonValue(m_open_issues_count));
    }
    if (m_open_merge_requests_count_isSet) {
        obj.insert(QString("open_merge_requests_count"), ::OpenAPI::toJsonValue(m_open_merge_requests_count));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_subscribed_isSet) {
        obj.insert(QString("subscribed"), ::OpenAPI::toJsonValue(m_subscribed));
    }
    return obj;
}

QString OAILabel::getClosedIssuesCount() const {
    return m_closed_issues_count;
}
void OAILabel::setClosedIssuesCount(const QString &closed_issues_count) {
    m_closed_issues_count = closed_issues_count;
    m_closed_issues_count_isSet = true;
}

bool OAILabel::is_closed_issues_count_Set() const{
    return m_closed_issues_count_isSet;
}

bool OAILabel::is_closed_issues_count_Valid() const{
    return m_closed_issues_count_isValid;
}

QString OAILabel::getColor() const {
    return m_color;
}
void OAILabel::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAILabel::is_color_Set() const{
    return m_color_isSet;
}

bool OAILabel::is_color_Valid() const{
    return m_color_isValid;
}

QString OAILabel::getDescription() const {
    return m_description;
}
void OAILabel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILabel::is_description_Set() const{
    return m_description_isSet;
}

bool OAILabel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILabel::getId() const {
    return m_id;
}
void OAILabel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILabel::is_id_Set() const{
    return m_id_isSet;
}

bool OAILabel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILabel::getName() const {
    return m_name;
}
void OAILabel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILabel::is_name_Set() const{
    return m_name_isSet;
}

bool OAILabel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILabel::getOpenIssuesCount() const {
    return m_open_issues_count;
}
void OAILabel::setOpenIssuesCount(const QString &open_issues_count) {
    m_open_issues_count = open_issues_count;
    m_open_issues_count_isSet = true;
}

bool OAILabel::is_open_issues_count_Set() const{
    return m_open_issues_count_isSet;
}

bool OAILabel::is_open_issues_count_Valid() const{
    return m_open_issues_count_isValid;
}

QString OAILabel::getOpenMergeRequestsCount() const {
    return m_open_merge_requests_count;
}
void OAILabel::setOpenMergeRequestsCount(const QString &open_merge_requests_count) {
    m_open_merge_requests_count = open_merge_requests_count;
    m_open_merge_requests_count_isSet = true;
}

bool OAILabel::is_open_merge_requests_count_Set() const{
    return m_open_merge_requests_count_isSet;
}

bool OAILabel::is_open_merge_requests_count_Valid() const{
    return m_open_merge_requests_count_isValid;
}

QString OAILabel::getPriority() const {
    return m_priority;
}
void OAILabel::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAILabel::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAILabel::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAILabel::getSubscribed() const {
    return m_subscribed;
}
void OAILabel::setSubscribed(const QString &subscribed) {
    m_subscribed = subscribed;
    m_subscribed_isSet = true;
}

bool OAILabel::is_subscribed_Set() const{
    return m_subscribed_isSet;
}

bool OAILabel::is_subscribed_Valid() const{
    return m_subscribed_isValid;
}

bool OAILabel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_issues_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_issues_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_merge_requests_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
