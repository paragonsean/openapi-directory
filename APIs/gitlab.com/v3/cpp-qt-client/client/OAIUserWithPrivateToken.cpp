/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserWithPrivateToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserWithPrivateToken::OAIUserWithPrivateToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserWithPrivateToken::OAIUserWithPrivateToken() {
    this->initializeModel();
}

OAIUserWithPrivateToken::~OAIUserWithPrivateToken() {}

void OAIUserWithPrivateToken::initializeModel() {

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_bio_isSet = false;
    m_bio_isValid = false;

    m_can_create_group_isSet = false;
    m_can_create_group_isValid = false;

    m_can_create_project_isSet = false;
    m_can_create_project_isValid = false;

    m_color_scheme_id_isSet = false;
    m_color_scheme_id_isValid = false;

    m_confirmed_at_isSet = false;
    m_confirmed_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_current_sign_in_at_isSet = false;
    m_current_sign_in_at_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_external_isSet = false;
    m_external_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identities_isSet = false;
    m_identities_isValid = false;

    m_is_admin_isSet = false;
    m_is_admin_isValid = false;

    m_last_sign_in_at_isSet = false;
    m_last_sign_in_at_isValid = false;

    m_linkedin_isSet = false;
    m_linkedin_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_private_token_isSet = false;
    m_private_token_isValid = false;

    m_projects_limit_isSet = false;
    m_projects_limit_isValid = false;

    m_skype_isSet = false;
    m_skype_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_theme_id_isSet = false;
    m_theme_id_isValid = false;

    m_twitter_isSet = false;
    m_twitter_isValid = false;

    m_two_factor_enabled_isSet = false;
    m_two_factor_enabled_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_web_url_isSet = false;
    m_web_url_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;
}

void OAIUserWithPrivateToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserWithPrivateToken::fromJsonObject(QJsonObject json) {

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_bio_isValid = ::OpenAPI::fromJsonValue(m_bio, json[QString("bio")]);
    m_bio_isSet = !json[QString("bio")].isNull() && m_bio_isValid;

    m_can_create_group_isValid = ::OpenAPI::fromJsonValue(m_can_create_group, json[QString("can_create_group")]);
    m_can_create_group_isSet = !json[QString("can_create_group")].isNull() && m_can_create_group_isValid;

    m_can_create_project_isValid = ::OpenAPI::fromJsonValue(m_can_create_project, json[QString("can_create_project")]);
    m_can_create_project_isSet = !json[QString("can_create_project")].isNull() && m_can_create_project_isValid;

    m_color_scheme_id_isValid = ::OpenAPI::fromJsonValue(m_color_scheme_id, json[QString("color_scheme_id")]);
    m_color_scheme_id_isSet = !json[QString("color_scheme_id")].isNull() && m_color_scheme_id_isValid;

    m_confirmed_at_isValid = ::OpenAPI::fromJsonValue(m_confirmed_at, json[QString("confirmed_at")]);
    m_confirmed_at_isSet = !json[QString("confirmed_at")].isNull() && m_confirmed_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_current_sign_in_at_isValid = ::OpenAPI::fromJsonValue(m_current_sign_in_at, json[QString("current_sign_in_at")]);
    m_current_sign_in_at_isSet = !json[QString("current_sign_in_at")].isNull() && m_current_sign_in_at_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_external_isValid = ::OpenAPI::fromJsonValue(m_external, json[QString("external")]);
    m_external_isSet = !json[QString("external")].isNull() && m_external_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identities_isValid = ::OpenAPI::fromJsonValue(m_identities, json[QString("identities")]);
    m_identities_isSet = !json[QString("identities")].isNull() && m_identities_isValid;

    m_is_admin_isValid = ::OpenAPI::fromJsonValue(m_is_admin, json[QString("is_admin")]);
    m_is_admin_isSet = !json[QString("is_admin")].isNull() && m_is_admin_isValid;

    m_last_sign_in_at_isValid = ::OpenAPI::fromJsonValue(m_last_sign_in_at, json[QString("last_sign_in_at")]);
    m_last_sign_in_at_isSet = !json[QString("last_sign_in_at")].isNull() && m_last_sign_in_at_isValid;

    m_linkedin_isValid = ::OpenAPI::fromJsonValue(m_linkedin, json[QString("linkedin")]);
    m_linkedin_isSet = !json[QString("linkedin")].isNull() && m_linkedin_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_private_token_isValid = ::OpenAPI::fromJsonValue(m_private_token, json[QString("private_token")]);
    m_private_token_isSet = !json[QString("private_token")].isNull() && m_private_token_isValid;

    m_projects_limit_isValid = ::OpenAPI::fromJsonValue(m_projects_limit, json[QString("projects_limit")]);
    m_projects_limit_isSet = !json[QString("projects_limit")].isNull() && m_projects_limit_isValid;

    m_skype_isValid = ::OpenAPI::fromJsonValue(m_skype, json[QString("skype")]);
    m_skype_isSet = !json[QString("skype")].isNull() && m_skype_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_theme_id_isValid = ::OpenAPI::fromJsonValue(m_theme_id, json[QString("theme_id")]);
    m_theme_id_isSet = !json[QString("theme_id")].isNull() && m_theme_id_isValid;

    m_twitter_isValid = ::OpenAPI::fromJsonValue(m_twitter, json[QString("twitter")]);
    m_twitter_isSet = !json[QString("twitter")].isNull() && m_twitter_isValid;

    m_two_factor_enabled_isValid = ::OpenAPI::fromJsonValue(m_two_factor_enabled, json[QString("two_factor_enabled")]);
    m_two_factor_enabled_isSet = !json[QString("two_factor_enabled")].isNull() && m_two_factor_enabled_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_web_url_isValid = ::OpenAPI::fromJsonValue(m_web_url, json[QString("web_url")]);
    m_web_url_isSet = !json[QString("web_url")].isNull() && m_web_url_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("website_url")]);
    m_website_url_isSet = !json[QString("website_url")].isNull() && m_website_url_isValid;
}

QString OAIUserWithPrivateToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserWithPrivateToken::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_bio_isSet) {
        obj.insert(QString("bio"), ::OpenAPI::toJsonValue(m_bio));
    }
    if (m_can_create_group_isSet) {
        obj.insert(QString("can_create_group"), ::OpenAPI::toJsonValue(m_can_create_group));
    }
    if (m_can_create_project_isSet) {
        obj.insert(QString("can_create_project"), ::OpenAPI::toJsonValue(m_can_create_project));
    }
    if (m_color_scheme_id_isSet) {
        obj.insert(QString("color_scheme_id"), ::OpenAPI::toJsonValue(m_color_scheme_id));
    }
    if (m_confirmed_at_isSet) {
        obj.insert(QString("confirmed_at"), ::OpenAPI::toJsonValue(m_confirmed_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_current_sign_in_at_isSet) {
        obj.insert(QString("current_sign_in_at"), ::OpenAPI::toJsonValue(m_current_sign_in_at));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_external_isSet) {
        obj.insert(QString("external"), ::OpenAPI::toJsonValue(m_external));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identities.isSet()) {
        obj.insert(QString("identities"), ::OpenAPI::toJsonValue(m_identities));
    }
    if (m_is_admin_isSet) {
        obj.insert(QString("is_admin"), ::OpenAPI::toJsonValue(m_is_admin));
    }
    if (m_last_sign_in_at_isSet) {
        obj.insert(QString("last_sign_in_at"), ::OpenAPI::toJsonValue(m_last_sign_in_at));
    }
    if (m_linkedin_isSet) {
        obj.insert(QString("linkedin"), ::OpenAPI::toJsonValue(m_linkedin));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_private_token_isSet) {
        obj.insert(QString("private_token"), ::OpenAPI::toJsonValue(m_private_token));
    }
    if (m_projects_limit_isSet) {
        obj.insert(QString("projects_limit"), ::OpenAPI::toJsonValue(m_projects_limit));
    }
    if (m_skype_isSet) {
        obj.insert(QString("skype"), ::OpenAPI::toJsonValue(m_skype));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_theme_id_isSet) {
        obj.insert(QString("theme_id"), ::OpenAPI::toJsonValue(m_theme_id));
    }
    if (m_twitter_isSet) {
        obj.insert(QString("twitter"), ::OpenAPI::toJsonValue(m_twitter));
    }
    if (m_two_factor_enabled_isSet) {
        obj.insert(QString("two_factor_enabled"), ::OpenAPI::toJsonValue(m_two_factor_enabled));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_web_url_isSet) {
        obj.insert(QString("web_url"), ::OpenAPI::toJsonValue(m_web_url));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("website_url"), ::OpenAPI::toJsonValue(m_website_url));
    }
    return obj;
}

QString OAIUserWithPrivateToken::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIUserWithPrivateToken::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIUserWithPrivateToken::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIUserWithPrivateToken::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAIUserWithPrivateToken::getBio() const {
    return m_bio;
}
void OAIUserWithPrivateToken::setBio(const QString &bio) {
    m_bio = bio;
    m_bio_isSet = true;
}

bool OAIUserWithPrivateToken::is_bio_Set() const{
    return m_bio_isSet;
}

bool OAIUserWithPrivateToken::is_bio_Valid() const{
    return m_bio_isValid;
}

QString OAIUserWithPrivateToken::getCanCreateGroup() const {
    return m_can_create_group;
}
void OAIUserWithPrivateToken::setCanCreateGroup(const QString &can_create_group) {
    m_can_create_group = can_create_group;
    m_can_create_group_isSet = true;
}

bool OAIUserWithPrivateToken::is_can_create_group_Set() const{
    return m_can_create_group_isSet;
}

bool OAIUserWithPrivateToken::is_can_create_group_Valid() const{
    return m_can_create_group_isValid;
}

QString OAIUserWithPrivateToken::getCanCreateProject() const {
    return m_can_create_project;
}
void OAIUserWithPrivateToken::setCanCreateProject(const QString &can_create_project) {
    m_can_create_project = can_create_project;
    m_can_create_project_isSet = true;
}

bool OAIUserWithPrivateToken::is_can_create_project_Set() const{
    return m_can_create_project_isSet;
}

bool OAIUserWithPrivateToken::is_can_create_project_Valid() const{
    return m_can_create_project_isValid;
}

QString OAIUserWithPrivateToken::getColorSchemeId() const {
    return m_color_scheme_id;
}
void OAIUserWithPrivateToken::setColorSchemeId(const QString &color_scheme_id) {
    m_color_scheme_id = color_scheme_id;
    m_color_scheme_id_isSet = true;
}

bool OAIUserWithPrivateToken::is_color_scheme_id_Set() const{
    return m_color_scheme_id_isSet;
}

bool OAIUserWithPrivateToken::is_color_scheme_id_Valid() const{
    return m_color_scheme_id_isValid;
}

QString OAIUserWithPrivateToken::getConfirmedAt() const {
    return m_confirmed_at;
}
void OAIUserWithPrivateToken::setConfirmedAt(const QString &confirmed_at) {
    m_confirmed_at = confirmed_at;
    m_confirmed_at_isSet = true;
}

bool OAIUserWithPrivateToken::is_confirmed_at_Set() const{
    return m_confirmed_at_isSet;
}

bool OAIUserWithPrivateToken::is_confirmed_at_Valid() const{
    return m_confirmed_at_isValid;
}

QString OAIUserWithPrivateToken::getCreatedAt() const {
    return m_created_at;
}
void OAIUserWithPrivateToken::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUserWithPrivateToken::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUserWithPrivateToken::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIUserWithPrivateToken::getCurrentSignInAt() const {
    return m_current_sign_in_at;
}
void OAIUserWithPrivateToken::setCurrentSignInAt(const QString &current_sign_in_at) {
    m_current_sign_in_at = current_sign_in_at;
    m_current_sign_in_at_isSet = true;
}

bool OAIUserWithPrivateToken::is_current_sign_in_at_Set() const{
    return m_current_sign_in_at_isSet;
}

bool OAIUserWithPrivateToken::is_current_sign_in_at_Valid() const{
    return m_current_sign_in_at_isValid;
}

QString OAIUserWithPrivateToken::getEmail() const {
    return m_email;
}
void OAIUserWithPrivateToken::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserWithPrivateToken::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserWithPrivateToken::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserWithPrivateToken::getExternal() const {
    return m_external;
}
void OAIUserWithPrivateToken::setExternal(const QString &external) {
    m_external = external;
    m_external_isSet = true;
}

bool OAIUserWithPrivateToken::is_external_Set() const{
    return m_external_isSet;
}

bool OAIUserWithPrivateToken::is_external_Valid() const{
    return m_external_isValid;
}

QString OAIUserWithPrivateToken::getId() const {
    return m_id;
}
void OAIUserWithPrivateToken::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserWithPrivateToken::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserWithPrivateToken::is_id_Valid() const{
    return m_id_isValid;
}

OAIIdentity OAIUserWithPrivateToken::getIdentities() const {
    return m_identities;
}
void OAIUserWithPrivateToken::setIdentities(const OAIIdentity &identities) {
    m_identities = identities;
    m_identities_isSet = true;
}

bool OAIUserWithPrivateToken::is_identities_Set() const{
    return m_identities_isSet;
}

bool OAIUserWithPrivateToken::is_identities_Valid() const{
    return m_identities_isValid;
}

QString OAIUserWithPrivateToken::getIsAdmin() const {
    return m_is_admin;
}
void OAIUserWithPrivateToken::setIsAdmin(const QString &is_admin) {
    m_is_admin = is_admin;
    m_is_admin_isSet = true;
}

bool OAIUserWithPrivateToken::is_is_admin_Set() const{
    return m_is_admin_isSet;
}

bool OAIUserWithPrivateToken::is_is_admin_Valid() const{
    return m_is_admin_isValid;
}

QString OAIUserWithPrivateToken::getLastSignInAt() const {
    return m_last_sign_in_at;
}
void OAIUserWithPrivateToken::setLastSignInAt(const QString &last_sign_in_at) {
    m_last_sign_in_at = last_sign_in_at;
    m_last_sign_in_at_isSet = true;
}

bool OAIUserWithPrivateToken::is_last_sign_in_at_Set() const{
    return m_last_sign_in_at_isSet;
}

bool OAIUserWithPrivateToken::is_last_sign_in_at_Valid() const{
    return m_last_sign_in_at_isValid;
}

QString OAIUserWithPrivateToken::getLinkedin() const {
    return m_linkedin;
}
void OAIUserWithPrivateToken::setLinkedin(const QString &linkedin) {
    m_linkedin = linkedin;
    m_linkedin_isSet = true;
}

bool OAIUserWithPrivateToken::is_linkedin_Set() const{
    return m_linkedin_isSet;
}

bool OAIUserWithPrivateToken::is_linkedin_Valid() const{
    return m_linkedin_isValid;
}

QString OAIUserWithPrivateToken::getLocation() const {
    return m_location;
}
void OAIUserWithPrivateToken::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIUserWithPrivateToken::is_location_Set() const{
    return m_location_isSet;
}

bool OAIUserWithPrivateToken::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIUserWithPrivateToken::getName() const {
    return m_name;
}
void OAIUserWithPrivateToken::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserWithPrivateToken::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserWithPrivateToken::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUserWithPrivateToken::getOrganization() const {
    return m_organization;
}
void OAIUserWithPrivateToken::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIUserWithPrivateToken::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIUserWithPrivateToken::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIUserWithPrivateToken::getPrivateToken() const {
    return m_private_token;
}
void OAIUserWithPrivateToken::setPrivateToken(const QString &private_token) {
    m_private_token = private_token;
    m_private_token_isSet = true;
}

bool OAIUserWithPrivateToken::is_private_token_Set() const{
    return m_private_token_isSet;
}

bool OAIUserWithPrivateToken::is_private_token_Valid() const{
    return m_private_token_isValid;
}

QString OAIUserWithPrivateToken::getProjectsLimit() const {
    return m_projects_limit;
}
void OAIUserWithPrivateToken::setProjectsLimit(const QString &projects_limit) {
    m_projects_limit = projects_limit;
    m_projects_limit_isSet = true;
}

bool OAIUserWithPrivateToken::is_projects_limit_Set() const{
    return m_projects_limit_isSet;
}

bool OAIUserWithPrivateToken::is_projects_limit_Valid() const{
    return m_projects_limit_isValid;
}

QString OAIUserWithPrivateToken::getSkype() const {
    return m_skype;
}
void OAIUserWithPrivateToken::setSkype(const QString &skype) {
    m_skype = skype;
    m_skype_isSet = true;
}

bool OAIUserWithPrivateToken::is_skype_Set() const{
    return m_skype_isSet;
}

bool OAIUserWithPrivateToken::is_skype_Valid() const{
    return m_skype_isValid;
}

QString OAIUserWithPrivateToken::getState() const {
    return m_state;
}
void OAIUserWithPrivateToken::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUserWithPrivateToken::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUserWithPrivateToken::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIUserWithPrivateToken::getThemeId() const {
    return m_theme_id;
}
void OAIUserWithPrivateToken::setThemeId(const QString &theme_id) {
    m_theme_id = theme_id;
    m_theme_id_isSet = true;
}

bool OAIUserWithPrivateToken::is_theme_id_Set() const{
    return m_theme_id_isSet;
}

bool OAIUserWithPrivateToken::is_theme_id_Valid() const{
    return m_theme_id_isValid;
}

QString OAIUserWithPrivateToken::getTwitter() const {
    return m_twitter;
}
void OAIUserWithPrivateToken::setTwitter(const QString &twitter) {
    m_twitter = twitter;
    m_twitter_isSet = true;
}

bool OAIUserWithPrivateToken::is_twitter_Set() const{
    return m_twitter_isSet;
}

bool OAIUserWithPrivateToken::is_twitter_Valid() const{
    return m_twitter_isValid;
}

QString OAIUserWithPrivateToken::getTwoFactorEnabled() const {
    return m_two_factor_enabled;
}
void OAIUserWithPrivateToken::setTwoFactorEnabled(const QString &two_factor_enabled) {
    m_two_factor_enabled = two_factor_enabled;
    m_two_factor_enabled_isSet = true;
}

bool OAIUserWithPrivateToken::is_two_factor_enabled_Set() const{
    return m_two_factor_enabled_isSet;
}

bool OAIUserWithPrivateToken::is_two_factor_enabled_Valid() const{
    return m_two_factor_enabled_isValid;
}

QString OAIUserWithPrivateToken::getUsername() const {
    return m_username;
}
void OAIUserWithPrivateToken::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUserWithPrivateToken::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUserWithPrivateToken::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIUserWithPrivateToken::getWebUrl() const {
    return m_web_url;
}
void OAIUserWithPrivateToken::setWebUrl(const QString &web_url) {
    m_web_url = web_url;
    m_web_url_isSet = true;
}

bool OAIUserWithPrivateToken::is_web_url_Set() const{
    return m_web_url_isSet;
}

bool OAIUserWithPrivateToken::is_web_url_Valid() const{
    return m_web_url_isValid;
}

QString OAIUserWithPrivateToken::getWebsiteUrl() const {
    return m_website_url;
}
void OAIUserWithPrivateToken::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAIUserWithPrivateToken::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAIUserWithPrivateToken::is_website_url_Valid() const{
    return m_website_url_isValid;
}

bool OAIUserWithPrivateToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_create_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_create_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_scheme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_sign_in_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sign_in_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linkedin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_factor_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserWithPrivateToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
