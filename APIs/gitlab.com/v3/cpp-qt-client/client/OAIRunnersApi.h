/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRunnersApi_H
#define OAI_OAIRunnersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPutV3RunnersId_request.h"
#include "OAIRunner.h"
#include "OAIRunnerDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRunnersApi : public QObject {
    Q_OBJECT

public:
    OAIRunnersApi(const int timeOut = 0);
    ~OAIRunnersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteV3RunnersId(const qint32 &id);

    /**
    * @param[in]  scope QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3Runners(const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  scope QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getV3RunnersAll(const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getV3RunnersId(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_put_v3_runners_id_request OAIPutV3RunnersId_request [optional]
    */
    virtual void putV3RunnersId(const qint32 &id, const ::OpenAPI::OptionalParam<OAIPutV3RunnersId_request> &oai_put_v3_runners_id_request = ::OpenAPI::OptionalParam<OAIPutV3RunnersId_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteV3RunnersIdCallback(OAIHttpRequestWorker *worker);
    void getV3RunnersCallback(OAIHttpRequestWorker *worker);
    void getV3RunnersAllCallback(OAIHttpRequestWorker *worker);
    void getV3RunnersIdCallback(OAIHttpRequestWorker *worker);
    void putV3RunnersIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteV3RunnersIdSignal(OAIRunner summary);
    void getV3RunnersSignal(OAIRunner summary);
    void getV3RunnersAllSignal(OAIRunner summary);
    void getV3RunnersIdSignal(OAIRunnerDetails summary);
    void putV3RunnersIdSignal(OAIRunnerDetails summary);


    void deleteV3RunnersIdSignalFull(OAIHttpRequestWorker *worker, OAIRunner summary);
    void getV3RunnersSignalFull(OAIHttpRequestWorker *worker, OAIRunner summary);
    void getV3RunnersAllSignalFull(OAIHttpRequestWorker *worker, OAIRunner summary);
    void getV3RunnersIdSignalFull(OAIHttpRequestWorker *worker, OAIRunnerDetails summary);
    void putV3RunnersIdSignalFull(OAIHttpRequestWorker *worker, OAIRunnerDetails summary);

    Q_DECL_DEPRECATED_X("Use deleteV3RunnersIdSignalError() instead")
    void deleteV3RunnersIdSignalE(OAIRunner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3RunnersIdSignalError(OAIRunner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3RunnersSignalError() instead")
    void getV3RunnersSignalE(OAIRunner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3RunnersSignalError(OAIRunner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3RunnersAllSignalError() instead")
    void getV3RunnersAllSignalE(OAIRunner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3RunnersAllSignalError(OAIRunner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3RunnersIdSignalError() instead")
    void getV3RunnersIdSignalE(OAIRunnerDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3RunnersIdSignalError(OAIRunnerDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3RunnersIdSignalError() instead")
    void putV3RunnersIdSignalE(OAIRunnerDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3RunnersIdSignalError(OAIRunnerDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteV3RunnersIdSignalErrorFull() instead")
    void deleteV3RunnersIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteV3RunnersIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3RunnersSignalErrorFull() instead")
    void getV3RunnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3RunnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3RunnersAllSignalErrorFull() instead")
    void getV3RunnersAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3RunnersAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getV3RunnersIdSignalErrorFull() instead")
    void getV3RunnersIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getV3RunnersIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putV3RunnersIdSignalErrorFull() instead")
    void putV3RunnersIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putV3RunnersIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
