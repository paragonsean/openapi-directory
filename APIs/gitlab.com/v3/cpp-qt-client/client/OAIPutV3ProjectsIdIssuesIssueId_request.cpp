/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3ProjectsIdIssuesIssueId_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3ProjectsIdIssuesIssueId_request::OAIPutV3ProjectsIdIssuesIssueId_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3ProjectsIdIssuesIssueId_request::OAIPutV3ProjectsIdIssuesIssueId_request() {
    this->initializeModel();
}

OAIPutV3ProjectsIdIssuesIssueId_request::~OAIPutV3ProjectsIdIssuesIssueId_request() {}

void OAIPutV3ProjectsIdIssuesIssueId_request::initializeModel() {

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_state_event_isSet = false;
    m_state_event_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_assignee_id_isSet = false;
    m_assignee_id_isValid = false;

    m_milestone_id_isSet = false;
    m_milestone_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_confidential_isSet = false;
    m_confidential_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;
}

void OAIPutV3ProjectsIdIssuesIssueId_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3ProjectsIdIssuesIssueId_request::fromJsonObject(QJsonObject json) {

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_state_event_isValid = ::OpenAPI::fromJsonValue(m_state_event, json[QString("state_event")]);
    m_state_event_isSet = !json[QString("state_event")].isNull() && m_state_event_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_assignee_id_isValid = ::OpenAPI::fromJsonValue(m_assignee_id, json[QString("assignee_id")]);
    m_assignee_id_isSet = !json[QString("assignee_id")].isNull() && m_assignee_id_isValid;

    m_milestone_id_isValid = ::OpenAPI::fromJsonValue(m_milestone_id, json[QString("milestone_id")]);
    m_milestone_id_isSet = !json[QString("milestone_id")].isNull() && m_milestone_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("due_date")]);
    m_due_date_isSet = !json[QString("due_date")].isNull() && m_due_date_isValid;

    m_confidential_isValid = ::OpenAPI::fromJsonValue(m_confidential, json[QString("confidential")]);
    m_confidential_isSet = !json[QString("confidential")].isNull() && m_confidential_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;
}

QString OAIPutV3ProjectsIdIssuesIssueId_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3ProjectsIdIssuesIssueId_request::asJsonObject() const {
    QJsonObject obj;
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_state_event_isSet) {
        obj.insert(QString("state_event"), ::OpenAPI::toJsonValue(m_state_event));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_assignee_id_isSet) {
        obj.insert(QString("assignee_id"), ::OpenAPI::toJsonValue(m_assignee_id));
    }
    if (m_milestone_id_isSet) {
        obj.insert(QString("milestone_id"), ::OpenAPI::toJsonValue(m_milestone_id));
    }
    if (m_labels_isSet) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("due_date"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_confidential_isSet) {
        obj.insert(QString("confidential"), ::OpenAPI::toJsonValue(m_confidential));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    return obj;
}

QString OAIPutV3ProjectsIdIssuesIssueId_request::getTitle() const {
    return m_title;
}
void OAIPutV3ProjectsIdIssuesIssueId_request::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIPutV3ProjectsIdIssuesIssueId_request::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPutV3ProjectsIdIssuesIssueId_request::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIPutV3ProjectsIdIssuesIssueId_request::getStateEvent() const {
    return m_state_event;
}
void OAIPutV3ProjectsIdIssuesIssueId_request::setStateEvent(const QString &state_event) {
    m_state_event = state_event;
    m_state_event_isSet = true;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_state_event_Set() const{
    return m_state_event_isSet;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_state_event_Valid() const{
    return m_state_event_isValid;
}

QString OAIPutV3ProjectsIdIssuesIssueId_request::getDescription() const {
    return m_description;
}
void OAIPutV3ProjectsIdIssuesIssueId_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIPutV3ProjectsIdIssuesIssueId_request::getAssigneeId() const {
    return m_assignee_id;
}
void OAIPutV3ProjectsIdIssuesIssueId_request::setAssigneeId(const qint32 &assignee_id) {
    m_assignee_id = assignee_id;
    m_assignee_id_isSet = true;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_assignee_id_Set() const{
    return m_assignee_id_isSet;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_assignee_id_Valid() const{
    return m_assignee_id_isValid;
}

qint32 OAIPutV3ProjectsIdIssuesIssueId_request::getMilestoneId() const {
    return m_milestone_id;
}
void OAIPutV3ProjectsIdIssuesIssueId_request::setMilestoneId(const qint32 &milestone_id) {
    m_milestone_id = milestone_id;
    m_milestone_id_isSet = true;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_milestone_id_Set() const{
    return m_milestone_id_isSet;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_milestone_id_Valid() const{
    return m_milestone_id_isValid;
}

QString OAIPutV3ProjectsIdIssuesIssueId_request::getLabels() const {
    return m_labels;
}
void OAIPutV3ProjectsIdIssuesIssueId_request::setLabels(const QString &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIPutV3ProjectsIdIssuesIssueId_request::getDueDate() const {
    return m_due_date;
}
void OAIPutV3ProjectsIdIssuesIssueId_request::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_due_date_Valid() const{
    return m_due_date_isValid;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::isConfidential() const {
    return m_confidential;
}
void OAIPutV3ProjectsIdIssuesIssueId_request::setConfidential(const bool &confidential) {
    m_confidential = confidential;
    m_confidential_isSet = true;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_confidential_Set() const{
    return m_confidential_isSet;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_confidential_Valid() const{
    return m_confidential_isValid;
}

QString OAIPutV3ProjectsIdIssuesIssueId_request::getCreatedAt() const {
    return m_created_at;
}
void OAIPutV3ProjectsIdIssuesIssueId_request::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3ProjectsIdIssuesIssueId_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
