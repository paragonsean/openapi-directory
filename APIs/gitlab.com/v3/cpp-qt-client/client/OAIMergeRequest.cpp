/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMergeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMergeRequest::OAIMergeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMergeRequest::OAIMergeRequest() {
    this->initializeModel();
}

OAIMergeRequest::~OAIMergeRequest() {}

void OAIMergeRequest::initializeModel() {

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_downvotes_isSet = false;
    m_downvotes_isValid = false;

    m_force_remove_source_branch_isSet = false;
    m_force_remove_source_branch_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_iid_isSet = false;
    m_iid_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_merge_commit_sha_isSet = false;
    m_merge_commit_sha_isValid = false;

    m_merge_status_isSet = false;
    m_merge_status_isValid = false;

    m_merge_when_build_succeeds_isSet = false;
    m_merge_when_build_succeeds_isValid = false;

    m_milestone_isSet = false;
    m_milestone_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_should_remove_source_branch_isSet = false;
    m_should_remove_source_branch_isValid = false;

    m_source_branch_isSet = false;
    m_source_branch_isValid = false;

    m_source_project_id_isSet = false;
    m_source_project_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_subscribed_isSet = false;
    m_subscribed_isValid = false;

    m_target_branch_isSet = false;
    m_target_branch_isValid = false;

    m_target_project_id_isSet = false;
    m_target_project_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_upvotes_isSet = false;
    m_upvotes_isValid = false;

    m_user_notes_count_isSet = false;
    m_user_notes_count_isValid = false;

    m_web_url_isSet = false;
    m_web_url_isValid = false;

    m_work_in_progress_isSet = false;
    m_work_in_progress_isValid = false;
}

void OAIMergeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMergeRequest::fromJsonObject(QJsonObject json) {

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_downvotes_isValid = ::OpenAPI::fromJsonValue(m_downvotes, json[QString("downvotes")]);
    m_downvotes_isSet = !json[QString("downvotes")].isNull() && m_downvotes_isValid;

    m_force_remove_source_branch_isValid = ::OpenAPI::fromJsonValue(m_force_remove_source_branch, json[QString("force_remove_source_branch")]);
    m_force_remove_source_branch_isSet = !json[QString("force_remove_source_branch")].isNull() && m_force_remove_source_branch_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_iid_isValid = ::OpenAPI::fromJsonValue(m_iid, json[QString("iid")]);
    m_iid_isSet = !json[QString("iid")].isNull() && m_iid_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_merge_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_merge_commit_sha, json[QString("merge_commit_sha")]);
    m_merge_commit_sha_isSet = !json[QString("merge_commit_sha")].isNull() && m_merge_commit_sha_isValid;

    m_merge_status_isValid = ::OpenAPI::fromJsonValue(m_merge_status, json[QString("merge_status")]);
    m_merge_status_isSet = !json[QString("merge_status")].isNull() && m_merge_status_isValid;

    m_merge_when_build_succeeds_isValid = ::OpenAPI::fromJsonValue(m_merge_when_build_succeeds, json[QString("merge_when_build_succeeds")]);
    m_merge_when_build_succeeds_isSet = !json[QString("merge_when_build_succeeds")].isNull() && m_merge_when_build_succeeds_isValid;

    m_milestone_isValid = ::OpenAPI::fromJsonValue(m_milestone, json[QString("milestone")]);
    m_milestone_isSet = !json[QString("milestone")].isNull() && m_milestone_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_should_remove_source_branch_isValid = ::OpenAPI::fromJsonValue(m_should_remove_source_branch, json[QString("should_remove_source_branch")]);
    m_should_remove_source_branch_isSet = !json[QString("should_remove_source_branch")].isNull() && m_should_remove_source_branch_isValid;

    m_source_branch_isValid = ::OpenAPI::fromJsonValue(m_source_branch, json[QString("source_branch")]);
    m_source_branch_isSet = !json[QString("source_branch")].isNull() && m_source_branch_isValid;

    m_source_project_id_isValid = ::OpenAPI::fromJsonValue(m_source_project_id, json[QString("source_project_id")]);
    m_source_project_id_isSet = !json[QString("source_project_id")].isNull() && m_source_project_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_subscribed_isValid = ::OpenAPI::fromJsonValue(m_subscribed, json[QString("subscribed")]);
    m_subscribed_isSet = !json[QString("subscribed")].isNull() && m_subscribed_isValid;

    m_target_branch_isValid = ::OpenAPI::fromJsonValue(m_target_branch, json[QString("target_branch")]);
    m_target_branch_isSet = !json[QString("target_branch")].isNull() && m_target_branch_isValid;

    m_target_project_id_isValid = ::OpenAPI::fromJsonValue(m_target_project_id, json[QString("target_project_id")]);
    m_target_project_id_isSet = !json[QString("target_project_id")].isNull() && m_target_project_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_upvotes_isValid = ::OpenAPI::fromJsonValue(m_upvotes, json[QString("upvotes")]);
    m_upvotes_isSet = !json[QString("upvotes")].isNull() && m_upvotes_isValid;

    m_user_notes_count_isValid = ::OpenAPI::fromJsonValue(m_user_notes_count, json[QString("user_notes_count")]);
    m_user_notes_count_isSet = !json[QString("user_notes_count")].isNull() && m_user_notes_count_isValid;

    m_web_url_isValid = ::OpenAPI::fromJsonValue(m_web_url, json[QString("web_url")]);
    m_web_url_isSet = !json[QString("web_url")].isNull() && m_web_url_isValid;

    m_work_in_progress_isValid = ::OpenAPI::fromJsonValue(m_work_in_progress, json[QString("work_in_progress")]);
    m_work_in_progress_isSet = !json[QString("work_in_progress")].isNull() && m_work_in_progress_isValid;
}

QString OAIMergeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMergeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_assignee.isSet()) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_downvotes_isSet) {
        obj.insert(QString("downvotes"), ::OpenAPI::toJsonValue(m_downvotes));
    }
    if (m_force_remove_source_branch_isSet) {
        obj.insert(QString("force_remove_source_branch"), ::OpenAPI::toJsonValue(m_force_remove_source_branch));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_iid_isSet) {
        obj.insert(QString("iid"), ::OpenAPI::toJsonValue(m_iid));
    }
    if (m_labels_isSet) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_merge_commit_sha_isSet) {
        obj.insert(QString("merge_commit_sha"), ::OpenAPI::toJsonValue(m_merge_commit_sha));
    }
    if (m_merge_status_isSet) {
        obj.insert(QString("merge_status"), ::OpenAPI::toJsonValue(m_merge_status));
    }
    if (m_merge_when_build_succeeds_isSet) {
        obj.insert(QString("merge_when_build_succeeds"), ::OpenAPI::toJsonValue(m_merge_when_build_succeeds));
    }
    if (m_milestone.isSet()) {
        obj.insert(QString("milestone"), ::OpenAPI::toJsonValue(m_milestone));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_should_remove_source_branch_isSet) {
        obj.insert(QString("should_remove_source_branch"), ::OpenAPI::toJsonValue(m_should_remove_source_branch));
    }
    if (m_source_branch_isSet) {
        obj.insert(QString("source_branch"), ::OpenAPI::toJsonValue(m_source_branch));
    }
    if (m_source_project_id_isSet) {
        obj.insert(QString("source_project_id"), ::OpenAPI::toJsonValue(m_source_project_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_subscribed_isSet) {
        obj.insert(QString("subscribed"), ::OpenAPI::toJsonValue(m_subscribed));
    }
    if (m_target_branch_isSet) {
        obj.insert(QString("target_branch"), ::OpenAPI::toJsonValue(m_target_branch));
    }
    if (m_target_project_id_isSet) {
        obj.insert(QString("target_project_id"), ::OpenAPI::toJsonValue(m_target_project_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_upvotes_isSet) {
        obj.insert(QString("upvotes"), ::OpenAPI::toJsonValue(m_upvotes));
    }
    if (m_user_notes_count_isSet) {
        obj.insert(QString("user_notes_count"), ::OpenAPI::toJsonValue(m_user_notes_count));
    }
    if (m_web_url_isSet) {
        obj.insert(QString("web_url"), ::OpenAPI::toJsonValue(m_web_url));
    }
    if (m_work_in_progress_isSet) {
        obj.insert(QString("work_in_progress"), ::OpenAPI::toJsonValue(m_work_in_progress));
    }
    return obj;
}

OAIUserBasic OAIMergeRequest::getAssignee() const {
    return m_assignee;
}
void OAIMergeRequest::setAssignee(const OAIUserBasic &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAIMergeRequest::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAIMergeRequest::is_assignee_Valid() const{
    return m_assignee_isValid;
}

OAIUserBasic OAIMergeRequest::getAuthor() const {
    return m_author;
}
void OAIMergeRequest::setAuthor(const OAIUserBasic &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIMergeRequest::is_author_Set() const{
    return m_author_isSet;
}

bool OAIMergeRequest::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIMergeRequest::getCreatedAt() const {
    return m_created_at;
}
void OAIMergeRequest::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMergeRequest::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMergeRequest::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIMergeRequest::getDescription() const {
    return m_description;
}
void OAIMergeRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMergeRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMergeRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIMergeRequest::getDownvotes() const {
    return m_downvotes;
}
void OAIMergeRequest::setDownvotes(const QString &downvotes) {
    m_downvotes = downvotes;
    m_downvotes_isSet = true;
}

bool OAIMergeRequest::is_downvotes_Set() const{
    return m_downvotes_isSet;
}

bool OAIMergeRequest::is_downvotes_Valid() const{
    return m_downvotes_isValid;
}

QString OAIMergeRequest::getForceRemoveSourceBranch() const {
    return m_force_remove_source_branch;
}
void OAIMergeRequest::setForceRemoveSourceBranch(const QString &force_remove_source_branch) {
    m_force_remove_source_branch = force_remove_source_branch;
    m_force_remove_source_branch_isSet = true;
}

bool OAIMergeRequest::is_force_remove_source_branch_Set() const{
    return m_force_remove_source_branch_isSet;
}

bool OAIMergeRequest::is_force_remove_source_branch_Valid() const{
    return m_force_remove_source_branch_isValid;
}

QString OAIMergeRequest::getId() const {
    return m_id;
}
void OAIMergeRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMergeRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMergeRequest::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMergeRequest::getIid() const {
    return m_iid;
}
void OAIMergeRequest::setIid(const QString &iid) {
    m_iid = iid;
    m_iid_isSet = true;
}

bool OAIMergeRequest::is_iid_Set() const{
    return m_iid_isSet;
}

bool OAIMergeRequest::is_iid_Valid() const{
    return m_iid_isValid;
}

QString OAIMergeRequest::getLabels() const {
    return m_labels;
}
void OAIMergeRequest::setLabels(const QString &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIMergeRequest::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIMergeRequest::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIMergeRequest::getMergeCommitSha() const {
    return m_merge_commit_sha;
}
void OAIMergeRequest::setMergeCommitSha(const QString &merge_commit_sha) {
    m_merge_commit_sha = merge_commit_sha;
    m_merge_commit_sha_isSet = true;
}

bool OAIMergeRequest::is_merge_commit_sha_Set() const{
    return m_merge_commit_sha_isSet;
}

bool OAIMergeRequest::is_merge_commit_sha_Valid() const{
    return m_merge_commit_sha_isValid;
}

QString OAIMergeRequest::getMergeStatus() const {
    return m_merge_status;
}
void OAIMergeRequest::setMergeStatus(const QString &merge_status) {
    m_merge_status = merge_status;
    m_merge_status_isSet = true;
}

bool OAIMergeRequest::is_merge_status_Set() const{
    return m_merge_status_isSet;
}

bool OAIMergeRequest::is_merge_status_Valid() const{
    return m_merge_status_isValid;
}

QString OAIMergeRequest::getMergeWhenBuildSucceeds() const {
    return m_merge_when_build_succeeds;
}
void OAIMergeRequest::setMergeWhenBuildSucceeds(const QString &merge_when_build_succeeds) {
    m_merge_when_build_succeeds = merge_when_build_succeeds;
    m_merge_when_build_succeeds_isSet = true;
}

bool OAIMergeRequest::is_merge_when_build_succeeds_Set() const{
    return m_merge_when_build_succeeds_isSet;
}

bool OAIMergeRequest::is_merge_when_build_succeeds_Valid() const{
    return m_merge_when_build_succeeds_isValid;
}

OAIMilestone OAIMergeRequest::getMilestone() const {
    return m_milestone;
}
void OAIMergeRequest::setMilestone(const OAIMilestone &milestone) {
    m_milestone = milestone;
    m_milestone_isSet = true;
}

bool OAIMergeRequest::is_milestone_Set() const{
    return m_milestone_isSet;
}

bool OAIMergeRequest::is_milestone_Valid() const{
    return m_milestone_isValid;
}

QString OAIMergeRequest::getProjectId() const {
    return m_project_id;
}
void OAIMergeRequest::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIMergeRequest::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIMergeRequest::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIMergeRequest::getSha() const {
    return m_sha;
}
void OAIMergeRequest::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIMergeRequest::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIMergeRequest::is_sha_Valid() const{
    return m_sha_isValid;
}

QString OAIMergeRequest::getShouldRemoveSourceBranch() const {
    return m_should_remove_source_branch;
}
void OAIMergeRequest::setShouldRemoveSourceBranch(const QString &should_remove_source_branch) {
    m_should_remove_source_branch = should_remove_source_branch;
    m_should_remove_source_branch_isSet = true;
}

bool OAIMergeRequest::is_should_remove_source_branch_Set() const{
    return m_should_remove_source_branch_isSet;
}

bool OAIMergeRequest::is_should_remove_source_branch_Valid() const{
    return m_should_remove_source_branch_isValid;
}

QString OAIMergeRequest::getSourceBranch() const {
    return m_source_branch;
}
void OAIMergeRequest::setSourceBranch(const QString &source_branch) {
    m_source_branch = source_branch;
    m_source_branch_isSet = true;
}

bool OAIMergeRequest::is_source_branch_Set() const{
    return m_source_branch_isSet;
}

bool OAIMergeRequest::is_source_branch_Valid() const{
    return m_source_branch_isValid;
}

QString OAIMergeRequest::getSourceProjectId() const {
    return m_source_project_id;
}
void OAIMergeRequest::setSourceProjectId(const QString &source_project_id) {
    m_source_project_id = source_project_id;
    m_source_project_id_isSet = true;
}

bool OAIMergeRequest::is_source_project_id_Set() const{
    return m_source_project_id_isSet;
}

bool OAIMergeRequest::is_source_project_id_Valid() const{
    return m_source_project_id_isValid;
}

QString OAIMergeRequest::getState() const {
    return m_state;
}
void OAIMergeRequest::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMergeRequest::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMergeRequest::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIMergeRequest::getSubscribed() const {
    return m_subscribed;
}
void OAIMergeRequest::setSubscribed(const QString &subscribed) {
    m_subscribed = subscribed;
    m_subscribed_isSet = true;
}

bool OAIMergeRequest::is_subscribed_Set() const{
    return m_subscribed_isSet;
}

bool OAIMergeRequest::is_subscribed_Valid() const{
    return m_subscribed_isValid;
}

QString OAIMergeRequest::getTargetBranch() const {
    return m_target_branch;
}
void OAIMergeRequest::setTargetBranch(const QString &target_branch) {
    m_target_branch = target_branch;
    m_target_branch_isSet = true;
}

bool OAIMergeRequest::is_target_branch_Set() const{
    return m_target_branch_isSet;
}

bool OAIMergeRequest::is_target_branch_Valid() const{
    return m_target_branch_isValid;
}

QString OAIMergeRequest::getTargetProjectId() const {
    return m_target_project_id;
}
void OAIMergeRequest::setTargetProjectId(const QString &target_project_id) {
    m_target_project_id = target_project_id;
    m_target_project_id_isSet = true;
}

bool OAIMergeRequest::is_target_project_id_Set() const{
    return m_target_project_id_isSet;
}

bool OAIMergeRequest::is_target_project_id_Valid() const{
    return m_target_project_id_isValid;
}

QString OAIMergeRequest::getTitle() const {
    return m_title;
}
void OAIMergeRequest::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMergeRequest::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMergeRequest::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIMergeRequest::getUpdatedAt() const {
    return m_updated_at;
}
void OAIMergeRequest::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIMergeRequest::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIMergeRequest::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIMergeRequest::getUpvotes() const {
    return m_upvotes;
}
void OAIMergeRequest::setUpvotes(const QString &upvotes) {
    m_upvotes = upvotes;
    m_upvotes_isSet = true;
}

bool OAIMergeRequest::is_upvotes_Set() const{
    return m_upvotes_isSet;
}

bool OAIMergeRequest::is_upvotes_Valid() const{
    return m_upvotes_isValid;
}

QString OAIMergeRequest::getUserNotesCount() const {
    return m_user_notes_count;
}
void OAIMergeRequest::setUserNotesCount(const QString &user_notes_count) {
    m_user_notes_count = user_notes_count;
    m_user_notes_count_isSet = true;
}

bool OAIMergeRequest::is_user_notes_count_Set() const{
    return m_user_notes_count_isSet;
}

bool OAIMergeRequest::is_user_notes_count_Valid() const{
    return m_user_notes_count_isValid;
}

QString OAIMergeRequest::getWebUrl() const {
    return m_web_url;
}
void OAIMergeRequest::setWebUrl(const QString &web_url) {
    m_web_url = web_url;
    m_web_url_isSet = true;
}

bool OAIMergeRequest::is_web_url_Set() const{
    return m_web_url_isSet;
}

bool OAIMergeRequest::is_web_url_Valid() const{
    return m_web_url_isValid;
}

QString OAIMergeRequest::getWorkInProgress() const {
    return m_work_in_progress;
}
void OAIMergeRequest::setWorkInProgress(const QString &work_in_progress) {
    m_work_in_progress = work_in_progress;
    m_work_in_progress_isSet = true;
}

bool OAIMergeRequest::is_work_in_progress_Set() const{
    return m_work_in_progress_isSet;
}

bool OAIMergeRequest::is_work_in_progress_Valid() const{
    return m_work_in_progress_isValid;
}

bool OAIMergeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downvotes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_remove_source_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_when_build_succeeds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_should_remove_source_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upvotes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_notes_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_in_progress_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMergeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
