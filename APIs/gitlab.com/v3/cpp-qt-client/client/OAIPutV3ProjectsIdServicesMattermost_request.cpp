/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3ProjectsIdServicesMattermost_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3ProjectsIdServicesMattermost_request::OAIPutV3ProjectsIdServicesMattermost_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3ProjectsIdServicesMattermost_request::OAIPutV3ProjectsIdServicesMattermost_request() {
    this->initializeModel();
}

OAIPutV3ProjectsIdServicesMattermost_request::~OAIPutV3ProjectsIdServicesMattermost_request() {}

void OAIPutV3ProjectsIdServicesMattermost_request::initializeModel() {

    m_webhook_isSet = false;
    m_webhook_isValid = false;

    m_push_events_isSet = false;
    m_push_events_isValid = false;

    m_issue_events_isSet = false;
    m_issue_events_isValid = false;

    m_confidential_issue_events_isSet = false;
    m_confidential_issue_events_isValid = false;

    m_merge_request_events_isSet = false;
    m_merge_request_events_isValid = false;

    m_note_events_isSet = false;
    m_note_events_isValid = false;

    m_tag_push_events_isSet = false;
    m_tag_push_events_isValid = false;

    m_build_events_isSet = false;
    m_build_events_isValid = false;

    m_pipeline_events_isSet = false;
    m_pipeline_events_isValid = false;

    m_wiki_page_events_isSet = false;
    m_wiki_page_events_isValid = false;
}

void OAIPutV3ProjectsIdServicesMattermost_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3ProjectsIdServicesMattermost_request::fromJsonObject(QJsonObject json) {

    m_webhook_isValid = ::OpenAPI::fromJsonValue(m_webhook, json[QString("webhook")]);
    m_webhook_isSet = !json[QString("webhook")].isNull() && m_webhook_isValid;

    m_push_events_isValid = ::OpenAPI::fromJsonValue(m_push_events, json[QString("push_events")]);
    m_push_events_isSet = !json[QString("push_events")].isNull() && m_push_events_isValid;

    m_issue_events_isValid = ::OpenAPI::fromJsonValue(m_issue_events, json[QString("issue_events")]);
    m_issue_events_isSet = !json[QString("issue_events")].isNull() && m_issue_events_isValid;

    m_confidential_issue_events_isValid = ::OpenAPI::fromJsonValue(m_confidential_issue_events, json[QString("confidential_issue_events")]);
    m_confidential_issue_events_isSet = !json[QString("confidential_issue_events")].isNull() && m_confidential_issue_events_isValid;

    m_merge_request_events_isValid = ::OpenAPI::fromJsonValue(m_merge_request_events, json[QString("merge_request_events")]);
    m_merge_request_events_isSet = !json[QString("merge_request_events")].isNull() && m_merge_request_events_isValid;

    m_note_events_isValid = ::OpenAPI::fromJsonValue(m_note_events, json[QString("note_events")]);
    m_note_events_isSet = !json[QString("note_events")].isNull() && m_note_events_isValid;

    m_tag_push_events_isValid = ::OpenAPI::fromJsonValue(m_tag_push_events, json[QString("tag_push_events")]);
    m_tag_push_events_isSet = !json[QString("tag_push_events")].isNull() && m_tag_push_events_isValid;

    m_build_events_isValid = ::OpenAPI::fromJsonValue(m_build_events, json[QString("build_events")]);
    m_build_events_isSet = !json[QString("build_events")].isNull() && m_build_events_isValid;

    m_pipeline_events_isValid = ::OpenAPI::fromJsonValue(m_pipeline_events, json[QString("pipeline_events")]);
    m_pipeline_events_isSet = !json[QString("pipeline_events")].isNull() && m_pipeline_events_isValid;

    m_wiki_page_events_isValid = ::OpenAPI::fromJsonValue(m_wiki_page_events, json[QString("wiki_page_events")]);
    m_wiki_page_events_isSet = !json[QString("wiki_page_events")].isNull() && m_wiki_page_events_isValid;
}

QString OAIPutV3ProjectsIdServicesMattermost_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3ProjectsIdServicesMattermost_request::asJsonObject() const {
    QJsonObject obj;
    if (m_webhook_isSet) {
        obj.insert(QString("webhook"), ::OpenAPI::toJsonValue(m_webhook));
    }
    if (m_push_events_isSet) {
        obj.insert(QString("push_events"), ::OpenAPI::toJsonValue(m_push_events));
    }
    if (m_issue_events_isSet) {
        obj.insert(QString("issue_events"), ::OpenAPI::toJsonValue(m_issue_events));
    }
    if (m_confidential_issue_events_isSet) {
        obj.insert(QString("confidential_issue_events"), ::OpenAPI::toJsonValue(m_confidential_issue_events));
    }
    if (m_merge_request_events_isSet) {
        obj.insert(QString("merge_request_events"), ::OpenAPI::toJsonValue(m_merge_request_events));
    }
    if (m_note_events_isSet) {
        obj.insert(QString("note_events"), ::OpenAPI::toJsonValue(m_note_events));
    }
    if (m_tag_push_events_isSet) {
        obj.insert(QString("tag_push_events"), ::OpenAPI::toJsonValue(m_tag_push_events));
    }
    if (m_build_events_isSet) {
        obj.insert(QString("build_events"), ::OpenAPI::toJsonValue(m_build_events));
    }
    if (m_pipeline_events_isSet) {
        obj.insert(QString("pipeline_events"), ::OpenAPI::toJsonValue(m_pipeline_events));
    }
    if (m_wiki_page_events_isSet) {
        obj.insert(QString("wiki_page_events"), ::OpenAPI::toJsonValue(m_wiki_page_events));
    }
    return obj;
}

QString OAIPutV3ProjectsIdServicesMattermost_request::getWebhook() const {
    return m_webhook;
}
void OAIPutV3ProjectsIdServicesMattermost_request::setWebhook(const QString &webhook) {
    m_webhook = webhook;
    m_webhook_isSet = true;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_webhook_Set() const{
    return m_webhook_isSet;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_webhook_Valid() const{
    return m_webhook_isValid;
}

QString OAIPutV3ProjectsIdServicesMattermost_request::getPushEvents() const {
    return m_push_events;
}
void OAIPutV3ProjectsIdServicesMattermost_request::setPushEvents(const QString &push_events) {
    m_push_events = push_events;
    m_push_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_push_events_Set() const{
    return m_push_events_isSet;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_push_events_Valid() const{
    return m_push_events_isValid;
}

QString OAIPutV3ProjectsIdServicesMattermost_request::getIssueEvents() const {
    return m_issue_events;
}
void OAIPutV3ProjectsIdServicesMattermost_request::setIssueEvents(const QString &issue_events) {
    m_issue_events = issue_events;
    m_issue_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_issue_events_Set() const{
    return m_issue_events_isSet;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_issue_events_Valid() const{
    return m_issue_events_isValid;
}

QString OAIPutV3ProjectsIdServicesMattermost_request::getConfidentialIssueEvents() const {
    return m_confidential_issue_events;
}
void OAIPutV3ProjectsIdServicesMattermost_request::setConfidentialIssueEvents(const QString &confidential_issue_events) {
    m_confidential_issue_events = confidential_issue_events;
    m_confidential_issue_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_confidential_issue_events_Set() const{
    return m_confidential_issue_events_isSet;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_confidential_issue_events_Valid() const{
    return m_confidential_issue_events_isValid;
}

QString OAIPutV3ProjectsIdServicesMattermost_request::getMergeRequestEvents() const {
    return m_merge_request_events;
}
void OAIPutV3ProjectsIdServicesMattermost_request::setMergeRequestEvents(const QString &merge_request_events) {
    m_merge_request_events = merge_request_events;
    m_merge_request_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_merge_request_events_Set() const{
    return m_merge_request_events_isSet;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_merge_request_events_Valid() const{
    return m_merge_request_events_isValid;
}

QString OAIPutV3ProjectsIdServicesMattermost_request::getNoteEvents() const {
    return m_note_events;
}
void OAIPutV3ProjectsIdServicesMattermost_request::setNoteEvents(const QString &note_events) {
    m_note_events = note_events;
    m_note_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_note_events_Set() const{
    return m_note_events_isSet;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_note_events_Valid() const{
    return m_note_events_isValid;
}

QString OAIPutV3ProjectsIdServicesMattermost_request::getTagPushEvents() const {
    return m_tag_push_events;
}
void OAIPutV3ProjectsIdServicesMattermost_request::setTagPushEvents(const QString &tag_push_events) {
    m_tag_push_events = tag_push_events;
    m_tag_push_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_tag_push_events_Set() const{
    return m_tag_push_events_isSet;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_tag_push_events_Valid() const{
    return m_tag_push_events_isValid;
}

QString OAIPutV3ProjectsIdServicesMattermost_request::getBuildEvents() const {
    return m_build_events;
}
void OAIPutV3ProjectsIdServicesMattermost_request::setBuildEvents(const QString &build_events) {
    m_build_events = build_events;
    m_build_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_build_events_Set() const{
    return m_build_events_isSet;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_build_events_Valid() const{
    return m_build_events_isValid;
}

QString OAIPutV3ProjectsIdServicesMattermost_request::getPipelineEvents() const {
    return m_pipeline_events;
}
void OAIPutV3ProjectsIdServicesMattermost_request::setPipelineEvents(const QString &pipeline_events) {
    m_pipeline_events = pipeline_events;
    m_pipeline_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_pipeline_events_Set() const{
    return m_pipeline_events_isSet;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_pipeline_events_Valid() const{
    return m_pipeline_events_isValid;
}

QString OAIPutV3ProjectsIdServicesMattermost_request::getWikiPageEvents() const {
    return m_wiki_page_events;
}
void OAIPutV3ProjectsIdServicesMattermost_request::setWikiPageEvents(const QString &wiki_page_events) {
    m_wiki_page_events = wiki_page_events;
    m_wiki_page_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_wiki_page_events_Set() const{
    return m_wiki_page_events_isSet;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::is_wiki_page_events_Valid() const{
    return m_wiki_page_events_isValid;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_webhook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidential_issue_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_request_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_push_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wiki_page_events_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3ProjectsIdServicesMattermost_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_webhook_isValid && true;
}

} // namespace OpenAPI
