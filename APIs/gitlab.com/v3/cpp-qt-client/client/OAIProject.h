/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProject.h
 *
 * Unstar a project
 */

#ifndef OAIProject_H
#define OAIProject_H

#include <QJsonObject>

#include "OAIBasicProjectDetails.h"
#include "OAINamespace.h"
#include "OAIProjectStatistics.h"
#include "OAIUserBasic.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBasicProjectDetails;
class OAINamespace;
class OAIUserBasic;
class OAIProjectStatistics;

class OAIProject : public OAIObject {
public:
    OAIProject();
    OAIProject(QString json);
    ~OAIProject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArchived() const;
    void setArchived(const QString &archived);
    bool is_archived_Set() const;
    bool is_archived_Valid() const;

    QString getAvatarUrl() const;
    void setAvatarUrl(const QString &avatar_url);
    bool is_avatar_url_Set() const;
    bool is_avatar_url_Valid() const;

    QString getBuildsEnabled() const;
    void setBuildsEnabled(const QString &builds_enabled);
    bool is_builds_enabled_Set() const;
    bool is_builds_enabled_Valid() const;

    QString getContainerRegistryEnabled() const;
    void setContainerRegistryEnabled(const QString &container_registry_enabled);
    bool is_container_registry_enabled_Set() const;
    bool is_container_registry_enabled_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getCreatorId() const;
    void setCreatorId(const QString &creator_id);
    bool is_creator_id_Set() const;
    bool is_creator_id_Valid() const;

    QString getDefaultBranch() const;
    void setDefaultBranch(const QString &default_branch);
    bool is_default_branch_Set() const;
    bool is_default_branch_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIBasicProjectDetails getForkedFromProject() const;
    void setForkedFromProject(const OAIBasicProjectDetails &forked_from_project);
    bool is_forked_from_project_Set() const;
    bool is_forked_from_project_Valid() const;

    QString getForksCount() const;
    void setForksCount(const QString &forks_count);
    bool is_forks_count_Set() const;
    bool is_forks_count_Valid() const;

    QString getHttpUrlToRepo() const;
    void setHttpUrlToRepo(const QString &http_url_to_repo);
    bool is_http_url_to_repo_Set() const;
    bool is_http_url_to_repo_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIssuesEnabled() const;
    void setIssuesEnabled(const QString &issues_enabled);
    bool is_issues_enabled_Set() const;
    bool is_issues_enabled_Valid() const;

    QString getLastActivityAt() const;
    void setLastActivityAt(const QString &last_activity_at);
    bool is_last_activity_at_Set() const;
    bool is_last_activity_at_Valid() const;

    QString getLfsEnabled() const;
    void setLfsEnabled(const QString &lfs_enabled);
    bool is_lfs_enabled_Set() const;
    bool is_lfs_enabled_Valid() const;

    QString getMergeRequestsEnabled() const;
    void setMergeRequestsEnabled(const QString &merge_requests_enabled);
    bool is_merge_requests_enabled_Set() const;
    bool is_merge_requests_enabled_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNameWithNamespace() const;
    void setNameWithNamespace(const QString &name_with_namespace);
    bool is_name_with_namespace_Set() const;
    bool is_name_with_namespace_Valid() const;

    OAINamespace getRNamespace() const;
    void setRNamespace(const OAINamespace &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    QString getOnlyAllowMergeIfAllDiscussionsAreResolved() const;
    void setOnlyAllowMergeIfAllDiscussionsAreResolved(const QString &only_allow_merge_if_all_discussions_are_resolved);
    bool is_only_allow_merge_if_all_discussions_are_resolved_Set() const;
    bool is_only_allow_merge_if_all_discussions_are_resolved_Valid() const;

    QString getOnlyAllowMergeIfBuildSucceeds() const;
    void setOnlyAllowMergeIfBuildSucceeds(const QString &only_allow_merge_if_build_succeeds);
    bool is_only_allow_merge_if_build_succeeds_Set() const;
    bool is_only_allow_merge_if_build_succeeds_Valid() const;

    QString getOpenIssuesCount() const;
    void setOpenIssuesCount(const QString &open_issues_count);
    bool is_open_issues_count_Set() const;
    bool is_open_issues_count_Valid() const;

    OAIUserBasic getOwner() const;
    void setOwner(const OAIUserBasic &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    QString getPathWithNamespace() const;
    void setPathWithNamespace(const QString &path_with_namespace);
    bool is_path_with_namespace_Set() const;
    bool is_path_with_namespace_Valid() const;

    QString getRPublic() const;
    void setRPublic(const QString &r_public);
    bool is_r_public_Set() const;
    bool is_r_public_Valid() const;

    QString getPublicBuilds() const;
    void setPublicBuilds(const QString &public_builds);
    bool is_public_builds_Set() const;
    bool is_public_builds_Valid() const;

    QString getRequestAccessEnabled() const;
    void setRequestAccessEnabled(const QString &request_access_enabled);
    bool is_request_access_enabled_Set() const;
    bool is_request_access_enabled_Valid() const;

    QString getRunnersToken() const;
    void setRunnersToken(const QString &runners_token);
    bool is_runners_token_Set() const;
    bool is_runners_token_Valid() const;

    QString getSharedRunnersEnabled() const;
    void setSharedRunnersEnabled(const QString &shared_runners_enabled);
    bool is_shared_runners_enabled_Set() const;
    bool is_shared_runners_enabled_Valid() const;

    QString getSharedWithGroups() const;
    void setSharedWithGroups(const QString &shared_with_groups);
    bool is_shared_with_groups_Set() const;
    bool is_shared_with_groups_Valid() const;

    QString getSnippetsEnabled() const;
    void setSnippetsEnabled(const QString &snippets_enabled);
    bool is_snippets_enabled_Set() const;
    bool is_snippets_enabled_Valid() const;

    QString getSshUrlToRepo() const;
    void setSshUrlToRepo(const QString &ssh_url_to_repo);
    bool is_ssh_url_to_repo_Set() const;
    bool is_ssh_url_to_repo_Valid() const;

    QString getStarCount() const;
    void setStarCount(const QString &star_count);
    bool is_star_count_Set() const;
    bool is_star_count_Valid() const;

    OAIProjectStatistics getStatistics() const;
    void setStatistics(const OAIProjectStatistics &statistics);
    bool is_statistics_Set() const;
    bool is_statistics_Valid() const;

    QString getTagList() const;
    void setTagList(const QString &tag_list);
    bool is_tag_list_Set() const;
    bool is_tag_list_Valid() const;

    QString getVisibilityLevel() const;
    void setVisibilityLevel(const QString &visibility_level);
    bool is_visibility_level_Set() const;
    bool is_visibility_level_Valid() const;

    QString getWebUrl() const;
    void setWebUrl(const QString &web_url);
    bool is_web_url_Set() const;
    bool is_web_url_Valid() const;

    QString getWikiEnabled() const;
    void setWikiEnabled(const QString &wiki_enabled);
    bool is_wiki_enabled_Set() const;
    bool is_wiki_enabled_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_archived;
    bool m_archived_isSet;
    bool m_archived_isValid;

    QString m_avatar_url;
    bool m_avatar_url_isSet;
    bool m_avatar_url_isValid;

    QString m_builds_enabled;
    bool m_builds_enabled_isSet;
    bool m_builds_enabled_isValid;

    QString m_container_registry_enabled;
    bool m_container_registry_enabled_isSet;
    bool m_container_registry_enabled_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_creator_id;
    bool m_creator_id_isSet;
    bool m_creator_id_isValid;

    QString m_default_branch;
    bool m_default_branch_isSet;
    bool m_default_branch_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIBasicProjectDetails m_forked_from_project;
    bool m_forked_from_project_isSet;
    bool m_forked_from_project_isValid;

    QString m_forks_count;
    bool m_forks_count_isSet;
    bool m_forks_count_isValid;

    QString m_http_url_to_repo;
    bool m_http_url_to_repo_isSet;
    bool m_http_url_to_repo_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_issues_enabled;
    bool m_issues_enabled_isSet;
    bool m_issues_enabled_isValid;

    QString m_last_activity_at;
    bool m_last_activity_at_isSet;
    bool m_last_activity_at_isValid;

    QString m_lfs_enabled;
    bool m_lfs_enabled_isSet;
    bool m_lfs_enabled_isValid;

    QString m_merge_requests_enabled;
    bool m_merge_requests_enabled_isSet;
    bool m_merge_requests_enabled_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_name_with_namespace;
    bool m_name_with_namespace_isSet;
    bool m_name_with_namespace_isValid;

    OAINamespace m_r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    QString m_only_allow_merge_if_all_discussions_are_resolved;
    bool m_only_allow_merge_if_all_discussions_are_resolved_isSet;
    bool m_only_allow_merge_if_all_discussions_are_resolved_isValid;

    QString m_only_allow_merge_if_build_succeeds;
    bool m_only_allow_merge_if_build_succeeds_isSet;
    bool m_only_allow_merge_if_build_succeeds_isValid;

    QString m_open_issues_count;
    bool m_open_issues_count_isSet;
    bool m_open_issues_count_isValid;

    OAIUserBasic m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    QString m_path_with_namespace;
    bool m_path_with_namespace_isSet;
    bool m_path_with_namespace_isValid;

    QString m_r_public;
    bool m_r_public_isSet;
    bool m_r_public_isValid;

    QString m_public_builds;
    bool m_public_builds_isSet;
    bool m_public_builds_isValid;

    QString m_request_access_enabled;
    bool m_request_access_enabled_isSet;
    bool m_request_access_enabled_isValid;

    QString m_runners_token;
    bool m_runners_token_isSet;
    bool m_runners_token_isValid;

    QString m_shared_runners_enabled;
    bool m_shared_runners_enabled_isSet;
    bool m_shared_runners_enabled_isValid;

    QString m_shared_with_groups;
    bool m_shared_with_groups_isSet;
    bool m_shared_with_groups_isValid;

    QString m_snippets_enabled;
    bool m_snippets_enabled_isSet;
    bool m_snippets_enabled_isValid;

    QString m_ssh_url_to_repo;
    bool m_ssh_url_to_repo_isSet;
    bool m_ssh_url_to_repo_isValid;

    QString m_star_count;
    bool m_star_count_isSet;
    bool m_star_count_isValid;

    OAIProjectStatistics m_statistics;
    bool m_statistics_isSet;
    bool m_statistics_isValid;

    QString m_tag_list;
    bool m_tag_list_isSet;
    bool m_tag_list_isValid;

    QString m_visibility_level;
    bool m_visibility_level_isSet;
    bool m_visibility_level_isValid;

    QString m_web_url;
    bool m_web_url_isSet;
    bool m_web_url_isValid;

    QString m_wiki_enabled;
    bool m_wiki_enabled_isSet;
    bool m_wiki_enabled_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProject)

#endif // OAIProject_H
