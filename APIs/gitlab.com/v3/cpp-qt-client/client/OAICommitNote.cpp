/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitNote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitNote::OAICommitNote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitNote::OAICommitNote() {
    this->initializeModel();
}

OAICommitNote::~OAICommitNote() {}

void OAICommitNote::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_line_type_isSet = false;
    m_line_type_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAICommitNote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitNote::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;

    m_line_type_isValid = ::OpenAPI::fromJsonValue(m_line_type, json[QString("line_type")]);
    m_line_type_isSet = !json[QString("line_type")].isNull() && m_line_type_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAICommitNote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitNote::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_line_isSet) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_line_type_isSet) {
        obj.insert(QString("line_type"), ::OpenAPI::toJsonValue(m_line_type));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

OAIUserBasic OAICommitNote::getAuthor() const {
    return m_author;
}
void OAICommitNote::setAuthor(const OAIUserBasic &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAICommitNote::is_author_Set() const{
    return m_author_isSet;
}

bool OAICommitNote::is_author_Valid() const{
    return m_author_isValid;
}

QString OAICommitNote::getCreatedAt() const {
    return m_created_at;
}
void OAICommitNote::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICommitNote::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICommitNote::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICommitNote::getLine() const {
    return m_line;
}
void OAICommitNote::setLine(const QString &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAICommitNote::is_line_Set() const{
    return m_line_isSet;
}

bool OAICommitNote::is_line_Valid() const{
    return m_line_isValid;
}

QString OAICommitNote::getLineType() const {
    return m_line_type;
}
void OAICommitNote::setLineType(const QString &line_type) {
    m_line_type = line_type;
    m_line_type_isSet = true;
}

bool OAICommitNote::is_line_type_Set() const{
    return m_line_type_isSet;
}

bool OAICommitNote::is_line_type_Valid() const{
    return m_line_type_isValid;
}

QString OAICommitNote::getNote() const {
    return m_note;
}
void OAICommitNote::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICommitNote::is_note_Set() const{
    return m_note_isSet;
}

bool OAICommitNote::is_note_Valid() const{
    return m_note_isValid;
}

QString OAICommitNote::getPath() const {
    return m_path;
}
void OAICommitNote::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAICommitNote::is_path_Set() const{
    return m_path_isSet;
}

bool OAICommitNote::is_path_Valid() const{
    return m_path_isValid;
}

bool OAICommitNote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitNote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
