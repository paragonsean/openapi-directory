/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrigger::OAITrigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrigger::OAITrigger() {
    this->initializeModel();
}

OAITrigger::~OAITrigger() {}

void OAITrigger::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_last_used_isSet = false;
    m_last_used_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAITrigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrigger::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("deleted_at")]);
    m_deleted_at_isSet = !json[QString("deleted_at")].isNull() && m_deleted_at_isValid;

    m_last_used_isValid = ::OpenAPI::fromJsonValue(m_last_used, json[QString("last_used")]);
    m_last_used_isSet = !json[QString("last_used")].isNull() && m_last_used_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAITrigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrigger::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("deleted_at"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_last_used_isSet) {
        obj.insert(QString("last_used"), ::OpenAPI::toJsonValue(m_last_used));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAITrigger::getCreatedAt() const {
    return m_created_at;
}
void OAITrigger::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITrigger::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITrigger::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITrigger::getDeletedAt() const {
    return m_deleted_at;
}
void OAITrigger::setDeletedAt(const QString &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAITrigger::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAITrigger::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

QString OAITrigger::getLastUsed() const {
    return m_last_used;
}
void OAITrigger::setLastUsed(const QString &last_used) {
    m_last_used = last_used;
    m_last_used_isSet = true;
}

bool OAITrigger::is_last_used_Set() const{
    return m_last_used_isSet;
}

bool OAITrigger::is_last_used_Valid() const{
    return m_last_used_isValid;
}

QString OAITrigger::getToken() const {
    return m_token;
}
void OAITrigger::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAITrigger::is_token_Set() const{
    return m_token_isSet;
}

bool OAITrigger::is_token_Valid() const{
    return m_token_isValid;
}

QString OAITrigger::getUpdatedAt() const {
    return m_updated_at;
}
void OAITrigger::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITrigger::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITrigger::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAITrigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
