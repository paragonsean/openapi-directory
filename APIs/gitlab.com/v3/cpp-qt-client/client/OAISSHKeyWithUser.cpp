/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISSHKeyWithUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISSHKeyWithUser::OAISSHKeyWithUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISSHKeyWithUser::OAISSHKeyWithUser() {
    this->initializeModel();
}

OAISSHKeyWithUser::~OAISSHKeyWithUser() {}

void OAISSHKeyWithUser::initializeModel() {

    m_can_push_isSet = false;
    m_can_push_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAISSHKeyWithUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISSHKeyWithUser::fromJsonObject(QJsonObject json) {

    m_can_push_isValid = ::OpenAPI::fromJsonValue(m_can_push, json[QString("can_push")]);
    m_can_push_isSet = !json[QString("can_push")].isNull() && m_can_push_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAISSHKeyWithUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISSHKeyWithUser::asJsonObject() const {
    QJsonObject obj;
    if (m_can_push_isSet) {
        obj.insert(QString("can_push"), ::OpenAPI::toJsonValue(m_can_push));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAISSHKeyWithUser::getCanPush() const {
    return m_can_push;
}
void OAISSHKeyWithUser::setCanPush(const QString &can_push) {
    m_can_push = can_push;
    m_can_push_isSet = true;
}

bool OAISSHKeyWithUser::is_can_push_Set() const{
    return m_can_push_isSet;
}

bool OAISSHKeyWithUser::is_can_push_Valid() const{
    return m_can_push_isValid;
}

QString OAISSHKeyWithUser::getCreatedAt() const {
    return m_created_at;
}
void OAISSHKeyWithUser::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISSHKeyWithUser::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISSHKeyWithUser::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISSHKeyWithUser::getId() const {
    return m_id;
}
void OAISSHKeyWithUser::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISSHKeyWithUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAISSHKeyWithUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISSHKeyWithUser::getKey() const {
    return m_key;
}
void OAISSHKeyWithUser::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAISSHKeyWithUser::is_key_Set() const{
    return m_key_isSet;
}

bool OAISSHKeyWithUser::is_key_Valid() const{
    return m_key_isValid;
}

QString OAISSHKeyWithUser::getTitle() const {
    return m_title;
}
void OAISSHKeyWithUser::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISSHKeyWithUser::is_title_Set() const{
    return m_title_isSet;
}

bool OAISSHKeyWithUser::is_title_Valid() const{
    return m_title_isValid;
}

OAIUserPublic OAISSHKeyWithUser::getUser() const {
    return m_user;
}
void OAISSHKeyWithUser::setUser(const OAIUserPublic &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAISSHKeyWithUser::is_user_Set() const{
    return m_user_isSet;
}

bool OAISSHKeyWithUser::is_user_Valid() const{
    return m_user_isValid;
}

bool OAISSHKeyWithUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_push_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISSHKeyWithUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
