/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAwardEmoji.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAwardEmoji::OAIAwardEmoji(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAwardEmoji::OAIAwardEmoji() {
    this->initializeModel();
}

OAIAwardEmoji::~OAIAwardEmoji() {}

void OAIAwardEmoji::initializeModel() {

    m_awardable_id_isSet = false;
    m_awardable_id_isValid = false;

    m_awardable_type_isSet = false;
    m_awardable_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIAwardEmoji::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAwardEmoji::fromJsonObject(QJsonObject json) {

    m_awardable_id_isValid = ::OpenAPI::fromJsonValue(m_awardable_id, json[QString("awardable_id")]);
    m_awardable_id_isSet = !json[QString("awardable_id")].isNull() && m_awardable_id_isValid;

    m_awardable_type_isValid = ::OpenAPI::fromJsonValue(m_awardable_type, json[QString("awardable_type")]);
    m_awardable_type_isSet = !json[QString("awardable_type")].isNull() && m_awardable_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIAwardEmoji::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAwardEmoji::asJsonObject() const {
    QJsonObject obj;
    if (m_awardable_id_isSet) {
        obj.insert(QString("awardable_id"), ::OpenAPI::toJsonValue(m_awardable_id));
    }
    if (m_awardable_type_isSet) {
        obj.insert(QString("awardable_type"), ::OpenAPI::toJsonValue(m_awardable_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIAwardEmoji::getAwardableId() const {
    return m_awardable_id;
}
void OAIAwardEmoji::setAwardableId(const QString &awardable_id) {
    m_awardable_id = awardable_id;
    m_awardable_id_isSet = true;
}

bool OAIAwardEmoji::is_awardable_id_Set() const{
    return m_awardable_id_isSet;
}

bool OAIAwardEmoji::is_awardable_id_Valid() const{
    return m_awardable_id_isValid;
}

QString OAIAwardEmoji::getAwardableType() const {
    return m_awardable_type;
}
void OAIAwardEmoji::setAwardableType(const QString &awardable_type) {
    m_awardable_type = awardable_type;
    m_awardable_type_isSet = true;
}

bool OAIAwardEmoji::is_awardable_type_Set() const{
    return m_awardable_type_isSet;
}

bool OAIAwardEmoji::is_awardable_type_Valid() const{
    return m_awardable_type_isValid;
}

QString OAIAwardEmoji::getCreatedAt() const {
    return m_created_at;
}
void OAIAwardEmoji::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAwardEmoji::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAwardEmoji::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAwardEmoji::getId() const {
    return m_id;
}
void OAIAwardEmoji::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAwardEmoji::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAwardEmoji::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAwardEmoji::getName() const {
    return m_name;
}
void OAIAwardEmoji::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAwardEmoji::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAwardEmoji::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAwardEmoji::getUpdatedAt() const {
    return m_updated_at;
}
void OAIAwardEmoji::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIAwardEmoji::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIAwardEmoji::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUserBasic OAIAwardEmoji::getUser() const {
    return m_user;
}
void OAIAwardEmoji::setUser(const OAIUserBasic &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAwardEmoji::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAwardEmoji::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAwardEmoji::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_awardable_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_awardable_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAwardEmoji::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
