/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessRequester.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessRequester::OAIAccessRequester(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessRequester::OAIAccessRequester() {
    this->initializeModel();
}

OAIAccessRequester::~OAIAccessRequester() {}

void OAIAccessRequester::initializeModel() {

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_requested_at_isSet = false;
    m_requested_at_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_web_url_isSet = false;
    m_web_url_isValid = false;
}

void OAIAccessRequester::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessRequester::fromJsonObject(QJsonObject json) {

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_requested_at_isValid = ::OpenAPI::fromJsonValue(m_requested_at, json[QString("requested_at")]);
    m_requested_at_isSet = !json[QString("requested_at")].isNull() && m_requested_at_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_web_url_isValid = ::OpenAPI::fromJsonValue(m_web_url, json[QString("web_url")]);
    m_web_url_isSet = !json[QString("web_url")].isNull() && m_web_url_isValid;
}

QString OAIAccessRequester::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessRequester::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_requested_at_isSet) {
        obj.insert(QString("requested_at"), ::OpenAPI::toJsonValue(m_requested_at));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_web_url_isSet) {
        obj.insert(QString("web_url"), ::OpenAPI::toJsonValue(m_web_url));
    }
    return obj;
}

QString OAIAccessRequester::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIAccessRequester::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIAccessRequester::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIAccessRequester::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAIAccessRequester::getId() const {
    return m_id;
}
void OAIAccessRequester::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccessRequester::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccessRequester::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAccessRequester::getName() const {
    return m_name;
}
void OAIAccessRequester::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccessRequester::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccessRequester::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAccessRequester::getRequestedAt() const {
    return m_requested_at;
}
void OAIAccessRequester::setRequestedAt(const QString &requested_at) {
    m_requested_at = requested_at;
    m_requested_at_isSet = true;
}

bool OAIAccessRequester::is_requested_at_Set() const{
    return m_requested_at_isSet;
}

bool OAIAccessRequester::is_requested_at_Valid() const{
    return m_requested_at_isValid;
}

QString OAIAccessRequester::getState() const {
    return m_state;
}
void OAIAccessRequester::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAccessRequester::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAccessRequester::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAccessRequester::getUsername() const {
    return m_username;
}
void OAIAccessRequester::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIAccessRequester::is_username_Set() const{
    return m_username_isSet;
}

bool OAIAccessRequester::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIAccessRequester::getWebUrl() const {
    return m_web_url;
}
void OAIAccessRequester::setWebUrl(const QString &web_url) {
    m_web_url = web_url;
    m_web_url_isSet = true;
}

bool OAIAccessRequester::is_web_url_Set() const{
    return m_web_url_isSet;
}

bool OAIAccessRequester::is_web_url_Valid() const{
    return m_web_url_isValid;
}

bool OAIAccessRequester::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessRequester::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
