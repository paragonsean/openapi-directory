/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeline::OAIPipeline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeline::OAIPipeline() {
    this->initializeModel();
}

OAIPipeline::~OAIPipeline() {}

void OAIPipeline::initializeModel() {

    m_before_sha_isSet = false;
    m_before_sha_isValid = false;

    m_committed_at_isSet = false;
    m_committed_at_isValid = false;

    m_coverage_isSet = false;
    m_coverage_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_finished_at_isSet = false;
    m_finished_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_yaml_errors_isSet = false;
    m_yaml_errors_isValid = false;
}

void OAIPipeline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeline::fromJsonObject(QJsonObject json) {

    m_before_sha_isValid = ::OpenAPI::fromJsonValue(m_before_sha, json[QString("before_sha")]);
    m_before_sha_isSet = !json[QString("before_sha")].isNull() && m_before_sha_isValid;

    m_committed_at_isValid = ::OpenAPI::fromJsonValue(m_committed_at, json[QString("committed_at")]);
    m_committed_at_isSet = !json[QString("committed_at")].isNull() && m_committed_at_isValid;

    m_coverage_isValid = ::OpenAPI::fromJsonValue(m_coverage, json[QString("coverage")]);
    m_coverage_isSet = !json[QString("coverage")].isNull() && m_coverage_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_finished_at_isValid = ::OpenAPI::fromJsonValue(m_finished_at, json[QString("finished_at")]);
    m_finished_at_isSet = !json[QString("finished_at")].isNull() && m_finished_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("started_at")]);
    m_started_at_isSet = !json[QString("started_at")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_yaml_errors_isValid = ::OpenAPI::fromJsonValue(m_yaml_errors, json[QString("yaml_errors")]);
    m_yaml_errors_isSet = !json[QString("yaml_errors")].isNull() && m_yaml_errors_isValid;
}

QString OAIPipeline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeline::asJsonObject() const {
    QJsonObject obj;
    if (m_before_sha_isSet) {
        obj.insert(QString("before_sha"), ::OpenAPI::toJsonValue(m_before_sha));
    }
    if (m_committed_at_isSet) {
        obj.insert(QString("committed_at"), ::OpenAPI::toJsonValue(m_committed_at));
    }
    if (m_coverage_isSet) {
        obj.insert(QString("coverage"), ::OpenAPI::toJsonValue(m_coverage));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_finished_at_isSet) {
        obj.insert(QString("finished_at"), ::OpenAPI::toJsonValue(m_finished_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("started_at"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_yaml_errors_isSet) {
        obj.insert(QString("yaml_errors"), ::OpenAPI::toJsonValue(m_yaml_errors));
    }
    return obj;
}

QString OAIPipeline::getBeforeSha() const {
    return m_before_sha;
}
void OAIPipeline::setBeforeSha(const QString &before_sha) {
    m_before_sha = before_sha;
    m_before_sha_isSet = true;
}

bool OAIPipeline::is_before_sha_Set() const{
    return m_before_sha_isSet;
}

bool OAIPipeline::is_before_sha_Valid() const{
    return m_before_sha_isValid;
}

QString OAIPipeline::getCommittedAt() const {
    return m_committed_at;
}
void OAIPipeline::setCommittedAt(const QString &committed_at) {
    m_committed_at = committed_at;
    m_committed_at_isSet = true;
}

bool OAIPipeline::is_committed_at_Set() const{
    return m_committed_at_isSet;
}

bool OAIPipeline::is_committed_at_Valid() const{
    return m_committed_at_isValid;
}

QString OAIPipeline::getCoverage() const {
    return m_coverage;
}
void OAIPipeline::setCoverage(const QString &coverage) {
    m_coverage = coverage;
    m_coverage_isSet = true;
}

bool OAIPipeline::is_coverage_Set() const{
    return m_coverage_isSet;
}

bool OAIPipeline::is_coverage_Valid() const{
    return m_coverage_isValid;
}

QString OAIPipeline::getCreatedAt() const {
    return m_created_at;
}
void OAIPipeline::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPipeline::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPipeline::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPipeline::getDuration() const {
    return m_duration;
}
void OAIPipeline::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIPipeline::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIPipeline::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIPipeline::getFinishedAt() const {
    return m_finished_at;
}
void OAIPipeline::setFinishedAt(const QString &finished_at) {
    m_finished_at = finished_at;
    m_finished_at_isSet = true;
}

bool OAIPipeline::is_finished_at_Set() const{
    return m_finished_at_isSet;
}

bool OAIPipeline::is_finished_at_Valid() const{
    return m_finished_at_isValid;
}

QString OAIPipeline::getId() const {
    return m_id;
}
void OAIPipeline::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPipeline::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPipeline::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPipeline::getRef() const {
    return m_ref;
}
void OAIPipeline::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAIPipeline::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAIPipeline::is_ref_Valid() const{
    return m_ref_isValid;
}

QString OAIPipeline::getSha() const {
    return m_sha;
}
void OAIPipeline::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIPipeline::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIPipeline::is_sha_Valid() const{
    return m_sha_isValid;
}

QString OAIPipeline::getStartedAt() const {
    return m_started_at;
}
void OAIPipeline::setStartedAt(const QString &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIPipeline::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIPipeline::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAIPipeline::getStatus() const {
    return m_status;
}
void OAIPipeline::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPipeline::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPipeline::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPipeline::getTag() const {
    return m_tag;
}
void OAIPipeline::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIPipeline::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIPipeline::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAIPipeline::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPipeline::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPipeline::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPipeline::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUserBasic OAIPipeline::getUser() const {
    return m_user;
}
void OAIPipeline::setUser(const OAIUserBasic &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIPipeline::is_user_Set() const{
    return m_user_isSet;
}

bool OAIPipeline::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIPipeline::getYamlErrors() const {
    return m_yaml_errors;
}
void OAIPipeline::setYamlErrors(const QString &yaml_errors) {
    m_yaml_errors = yaml_errors;
    m_yaml_errors_isSet = true;
}

bool OAIPipeline::is_yaml_errors_Set() const{
    return m_yaml_errors_isSet;
}

bool OAIPipeline::is_yaml_errors_Valid() const{
    return m_yaml_errors_isValid;
}

bool OAIPipeline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_before_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_yaml_errors_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
