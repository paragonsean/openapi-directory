/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3ProjectsId_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3ProjectsId_request::OAIPutV3ProjectsId_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3ProjectsId_request::OAIPutV3ProjectsId_request() {
    this->initializeModel();
}

OAIPutV3ProjectsId_request::~OAIPutV3ProjectsId_request() {}

void OAIPutV3ProjectsId_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_default_branch_isSet = false;
    m_default_branch_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_issues_enabled_isSet = false;
    m_issues_enabled_isValid = false;

    m_merge_requests_enabled_isSet = false;
    m_merge_requests_enabled_isValid = false;

    m_wiki_enabled_isSet = false;
    m_wiki_enabled_isValid = false;

    m_builds_enabled_isSet = false;
    m_builds_enabled_isValid = false;

    m_snippets_enabled_isSet = false;
    m_snippets_enabled_isValid = false;

    m_shared_runners_enabled_isSet = false;
    m_shared_runners_enabled_isValid = false;

    m_container_registry_enabled_isSet = false;
    m_container_registry_enabled_isValid = false;

    m_lfs_enabled_isSet = false;
    m_lfs_enabled_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_visibility_level_isSet = false;
    m_visibility_level_isValid = false;

    m_public_builds_isSet = false;
    m_public_builds_isValid = false;

    m_request_access_enabled_isSet = false;
    m_request_access_enabled_isValid = false;

    m_only_allow_merge_if_build_succeeds_isSet = false;
    m_only_allow_merge_if_build_succeeds_isValid = false;

    m_only_allow_merge_if_all_discussions_are_resolved_isSet = false;
    m_only_allow_merge_if_all_discussions_are_resolved_isValid = false;
}

void OAIPutV3ProjectsId_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3ProjectsId_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_default_branch_isValid = ::OpenAPI::fromJsonValue(m_default_branch, json[QString("default_branch")]);
    m_default_branch_isSet = !json[QString("default_branch")].isNull() && m_default_branch_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_issues_enabled_isValid = ::OpenAPI::fromJsonValue(m_issues_enabled, json[QString("issues_enabled")]);
    m_issues_enabled_isSet = !json[QString("issues_enabled")].isNull() && m_issues_enabled_isValid;

    m_merge_requests_enabled_isValid = ::OpenAPI::fromJsonValue(m_merge_requests_enabled, json[QString("merge_requests_enabled")]);
    m_merge_requests_enabled_isSet = !json[QString("merge_requests_enabled")].isNull() && m_merge_requests_enabled_isValid;

    m_wiki_enabled_isValid = ::OpenAPI::fromJsonValue(m_wiki_enabled, json[QString("wiki_enabled")]);
    m_wiki_enabled_isSet = !json[QString("wiki_enabled")].isNull() && m_wiki_enabled_isValid;

    m_builds_enabled_isValid = ::OpenAPI::fromJsonValue(m_builds_enabled, json[QString("builds_enabled")]);
    m_builds_enabled_isSet = !json[QString("builds_enabled")].isNull() && m_builds_enabled_isValid;

    m_snippets_enabled_isValid = ::OpenAPI::fromJsonValue(m_snippets_enabled, json[QString("snippets_enabled")]);
    m_snippets_enabled_isSet = !json[QString("snippets_enabled")].isNull() && m_snippets_enabled_isValid;

    m_shared_runners_enabled_isValid = ::OpenAPI::fromJsonValue(m_shared_runners_enabled, json[QString("shared_runners_enabled")]);
    m_shared_runners_enabled_isSet = !json[QString("shared_runners_enabled")].isNull() && m_shared_runners_enabled_isValid;

    m_container_registry_enabled_isValid = ::OpenAPI::fromJsonValue(m_container_registry_enabled, json[QString("container_registry_enabled")]);
    m_container_registry_enabled_isSet = !json[QString("container_registry_enabled")].isNull() && m_container_registry_enabled_isValid;

    m_lfs_enabled_isValid = ::OpenAPI::fromJsonValue(m_lfs_enabled, json[QString("lfs_enabled")]);
    m_lfs_enabled_isSet = !json[QString("lfs_enabled")].isNull() && m_lfs_enabled_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_visibility_level_isValid = ::OpenAPI::fromJsonValue(m_visibility_level, json[QString("visibility_level")]);
    m_visibility_level_isSet = !json[QString("visibility_level")].isNull() && m_visibility_level_isValid;

    m_public_builds_isValid = ::OpenAPI::fromJsonValue(m_public_builds, json[QString("public_builds")]);
    m_public_builds_isSet = !json[QString("public_builds")].isNull() && m_public_builds_isValid;

    m_request_access_enabled_isValid = ::OpenAPI::fromJsonValue(m_request_access_enabled, json[QString("request_access_enabled")]);
    m_request_access_enabled_isSet = !json[QString("request_access_enabled")].isNull() && m_request_access_enabled_isValid;

    m_only_allow_merge_if_build_succeeds_isValid = ::OpenAPI::fromJsonValue(m_only_allow_merge_if_build_succeeds, json[QString("only_allow_merge_if_build_succeeds")]);
    m_only_allow_merge_if_build_succeeds_isSet = !json[QString("only_allow_merge_if_build_succeeds")].isNull() && m_only_allow_merge_if_build_succeeds_isValid;

    m_only_allow_merge_if_all_discussions_are_resolved_isValid = ::OpenAPI::fromJsonValue(m_only_allow_merge_if_all_discussions_are_resolved, json[QString("only_allow_merge_if_all_discussions_are_resolved")]);
    m_only_allow_merge_if_all_discussions_are_resolved_isSet = !json[QString("only_allow_merge_if_all_discussions_are_resolved")].isNull() && m_only_allow_merge_if_all_discussions_are_resolved_isValid;
}

QString OAIPutV3ProjectsId_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3ProjectsId_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_default_branch_isSet) {
        obj.insert(QString("default_branch"), ::OpenAPI::toJsonValue(m_default_branch));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_issues_enabled_isSet) {
        obj.insert(QString("issues_enabled"), ::OpenAPI::toJsonValue(m_issues_enabled));
    }
    if (m_merge_requests_enabled_isSet) {
        obj.insert(QString("merge_requests_enabled"), ::OpenAPI::toJsonValue(m_merge_requests_enabled));
    }
    if (m_wiki_enabled_isSet) {
        obj.insert(QString("wiki_enabled"), ::OpenAPI::toJsonValue(m_wiki_enabled));
    }
    if (m_builds_enabled_isSet) {
        obj.insert(QString("builds_enabled"), ::OpenAPI::toJsonValue(m_builds_enabled));
    }
    if (m_snippets_enabled_isSet) {
        obj.insert(QString("snippets_enabled"), ::OpenAPI::toJsonValue(m_snippets_enabled));
    }
    if (m_shared_runners_enabled_isSet) {
        obj.insert(QString("shared_runners_enabled"), ::OpenAPI::toJsonValue(m_shared_runners_enabled));
    }
    if (m_container_registry_enabled_isSet) {
        obj.insert(QString("container_registry_enabled"), ::OpenAPI::toJsonValue(m_container_registry_enabled));
    }
    if (m_lfs_enabled_isSet) {
        obj.insert(QString("lfs_enabled"), ::OpenAPI::toJsonValue(m_lfs_enabled));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_visibility_level_isSet) {
        obj.insert(QString("visibility_level"), ::OpenAPI::toJsonValue(m_visibility_level));
    }
    if (m_public_builds_isSet) {
        obj.insert(QString("public_builds"), ::OpenAPI::toJsonValue(m_public_builds));
    }
    if (m_request_access_enabled_isSet) {
        obj.insert(QString("request_access_enabled"), ::OpenAPI::toJsonValue(m_request_access_enabled));
    }
    if (m_only_allow_merge_if_build_succeeds_isSet) {
        obj.insert(QString("only_allow_merge_if_build_succeeds"), ::OpenAPI::toJsonValue(m_only_allow_merge_if_build_succeeds));
    }
    if (m_only_allow_merge_if_all_discussions_are_resolved_isSet) {
        obj.insert(QString("only_allow_merge_if_all_discussions_are_resolved"), ::OpenAPI::toJsonValue(m_only_allow_merge_if_all_discussions_are_resolved));
    }
    return obj;
}

QString OAIPutV3ProjectsId_request::getName() const {
    return m_name;
}
void OAIPutV3ProjectsId_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPutV3ProjectsId_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPutV3ProjectsId_request::getDefaultBranch() const {
    return m_default_branch;
}
void OAIPutV3ProjectsId_request::setDefaultBranch(const QString &default_branch) {
    m_default_branch = default_branch;
    m_default_branch_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_default_branch_Set() const{
    return m_default_branch_isSet;
}

bool OAIPutV3ProjectsId_request::is_default_branch_Valid() const{
    return m_default_branch_isValid;
}

QString OAIPutV3ProjectsId_request::getPath() const {
    return m_path;
}
void OAIPutV3ProjectsId_request::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_path_Set() const{
    return m_path_isSet;
}

bool OAIPutV3ProjectsId_request::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIPutV3ProjectsId_request::getDescription() const {
    return m_description;
}
void OAIPutV3ProjectsId_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPutV3ProjectsId_request::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIPutV3ProjectsId_request::isIssuesEnabled() const {
    return m_issues_enabled;
}
void OAIPutV3ProjectsId_request::setIssuesEnabled(const bool &issues_enabled) {
    m_issues_enabled = issues_enabled;
    m_issues_enabled_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_issues_enabled_Set() const{
    return m_issues_enabled_isSet;
}

bool OAIPutV3ProjectsId_request::is_issues_enabled_Valid() const{
    return m_issues_enabled_isValid;
}

bool OAIPutV3ProjectsId_request::isMergeRequestsEnabled() const {
    return m_merge_requests_enabled;
}
void OAIPutV3ProjectsId_request::setMergeRequestsEnabled(const bool &merge_requests_enabled) {
    m_merge_requests_enabled = merge_requests_enabled;
    m_merge_requests_enabled_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_merge_requests_enabled_Set() const{
    return m_merge_requests_enabled_isSet;
}

bool OAIPutV3ProjectsId_request::is_merge_requests_enabled_Valid() const{
    return m_merge_requests_enabled_isValid;
}

bool OAIPutV3ProjectsId_request::isWikiEnabled() const {
    return m_wiki_enabled;
}
void OAIPutV3ProjectsId_request::setWikiEnabled(const bool &wiki_enabled) {
    m_wiki_enabled = wiki_enabled;
    m_wiki_enabled_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_wiki_enabled_Set() const{
    return m_wiki_enabled_isSet;
}

bool OAIPutV3ProjectsId_request::is_wiki_enabled_Valid() const{
    return m_wiki_enabled_isValid;
}

bool OAIPutV3ProjectsId_request::isBuildsEnabled() const {
    return m_builds_enabled;
}
void OAIPutV3ProjectsId_request::setBuildsEnabled(const bool &builds_enabled) {
    m_builds_enabled = builds_enabled;
    m_builds_enabled_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_builds_enabled_Set() const{
    return m_builds_enabled_isSet;
}

bool OAIPutV3ProjectsId_request::is_builds_enabled_Valid() const{
    return m_builds_enabled_isValid;
}

bool OAIPutV3ProjectsId_request::isSnippetsEnabled() const {
    return m_snippets_enabled;
}
void OAIPutV3ProjectsId_request::setSnippetsEnabled(const bool &snippets_enabled) {
    m_snippets_enabled = snippets_enabled;
    m_snippets_enabled_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_snippets_enabled_Set() const{
    return m_snippets_enabled_isSet;
}

bool OAIPutV3ProjectsId_request::is_snippets_enabled_Valid() const{
    return m_snippets_enabled_isValid;
}

bool OAIPutV3ProjectsId_request::isSharedRunnersEnabled() const {
    return m_shared_runners_enabled;
}
void OAIPutV3ProjectsId_request::setSharedRunnersEnabled(const bool &shared_runners_enabled) {
    m_shared_runners_enabled = shared_runners_enabled;
    m_shared_runners_enabled_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_shared_runners_enabled_Set() const{
    return m_shared_runners_enabled_isSet;
}

bool OAIPutV3ProjectsId_request::is_shared_runners_enabled_Valid() const{
    return m_shared_runners_enabled_isValid;
}

bool OAIPutV3ProjectsId_request::isContainerRegistryEnabled() const {
    return m_container_registry_enabled;
}
void OAIPutV3ProjectsId_request::setContainerRegistryEnabled(const bool &container_registry_enabled) {
    m_container_registry_enabled = container_registry_enabled;
    m_container_registry_enabled_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_container_registry_enabled_Set() const{
    return m_container_registry_enabled_isSet;
}

bool OAIPutV3ProjectsId_request::is_container_registry_enabled_Valid() const{
    return m_container_registry_enabled_isValid;
}

bool OAIPutV3ProjectsId_request::isLfsEnabled() const {
    return m_lfs_enabled;
}
void OAIPutV3ProjectsId_request::setLfsEnabled(const bool &lfs_enabled) {
    m_lfs_enabled = lfs_enabled;
    m_lfs_enabled_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_lfs_enabled_Set() const{
    return m_lfs_enabled_isSet;
}

bool OAIPutV3ProjectsId_request::is_lfs_enabled_Valid() const{
    return m_lfs_enabled_isValid;
}

bool OAIPutV3ProjectsId_request::isRPublic() const {
    return m_r_public;
}
void OAIPutV3ProjectsId_request::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIPutV3ProjectsId_request::is_r_public_Valid() const{
    return m_r_public_isValid;
}

qint32 OAIPutV3ProjectsId_request::getVisibilityLevel() const {
    return m_visibility_level;
}
void OAIPutV3ProjectsId_request::setVisibilityLevel(const qint32 &visibility_level) {
    m_visibility_level = visibility_level;
    m_visibility_level_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_visibility_level_Set() const{
    return m_visibility_level_isSet;
}

bool OAIPutV3ProjectsId_request::is_visibility_level_Valid() const{
    return m_visibility_level_isValid;
}

bool OAIPutV3ProjectsId_request::isPublicBuilds() const {
    return m_public_builds;
}
void OAIPutV3ProjectsId_request::setPublicBuilds(const bool &public_builds) {
    m_public_builds = public_builds;
    m_public_builds_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_public_builds_Set() const{
    return m_public_builds_isSet;
}

bool OAIPutV3ProjectsId_request::is_public_builds_Valid() const{
    return m_public_builds_isValid;
}

bool OAIPutV3ProjectsId_request::isRequestAccessEnabled() const {
    return m_request_access_enabled;
}
void OAIPutV3ProjectsId_request::setRequestAccessEnabled(const bool &request_access_enabled) {
    m_request_access_enabled = request_access_enabled;
    m_request_access_enabled_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_request_access_enabled_Set() const{
    return m_request_access_enabled_isSet;
}

bool OAIPutV3ProjectsId_request::is_request_access_enabled_Valid() const{
    return m_request_access_enabled_isValid;
}

bool OAIPutV3ProjectsId_request::isOnlyAllowMergeIfBuildSucceeds() const {
    return m_only_allow_merge_if_build_succeeds;
}
void OAIPutV3ProjectsId_request::setOnlyAllowMergeIfBuildSucceeds(const bool &only_allow_merge_if_build_succeeds) {
    m_only_allow_merge_if_build_succeeds = only_allow_merge_if_build_succeeds;
    m_only_allow_merge_if_build_succeeds_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_only_allow_merge_if_build_succeeds_Set() const{
    return m_only_allow_merge_if_build_succeeds_isSet;
}

bool OAIPutV3ProjectsId_request::is_only_allow_merge_if_build_succeeds_Valid() const{
    return m_only_allow_merge_if_build_succeeds_isValid;
}

bool OAIPutV3ProjectsId_request::isOnlyAllowMergeIfAllDiscussionsAreResolved() const {
    return m_only_allow_merge_if_all_discussions_are_resolved;
}
void OAIPutV3ProjectsId_request::setOnlyAllowMergeIfAllDiscussionsAreResolved(const bool &only_allow_merge_if_all_discussions_are_resolved) {
    m_only_allow_merge_if_all_discussions_are_resolved = only_allow_merge_if_all_discussions_are_resolved;
    m_only_allow_merge_if_all_discussions_are_resolved_isSet = true;
}

bool OAIPutV3ProjectsId_request::is_only_allow_merge_if_all_discussions_are_resolved_Set() const{
    return m_only_allow_merge_if_all_discussions_are_resolved_isSet;
}

bool OAIPutV3ProjectsId_request::is_only_allow_merge_if_all_discussions_are_resolved_Valid() const{
    return m_only_allow_merge_if_all_discussions_are_resolved_isValid;
}

bool OAIPutV3ProjectsId_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_requests_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wiki_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_builds_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippets_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_runners_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_registry_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lfs_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_builds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_access_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_only_allow_merge_if_build_succeeds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_only_allow_merge_if_all_discussions_are_resolved_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3ProjectsId_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
