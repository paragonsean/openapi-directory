/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITodo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITodo::OAITodo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITodo::OAITodo() {
    this->initializeModel();
}

OAITodo::~OAITodo() {}

void OAITodo::initializeModel() {

    m_action_name_isSet = false;
    m_action_name_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_target_type_isSet = false;
    m_target_type_isValid = false;

    m_target_url_isSet = false;
    m_target_url_isValid = false;
}

void OAITodo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITodo::fromJsonObject(QJsonObject json) {

    m_action_name_isValid = ::OpenAPI::fromJsonValue(m_action_name, json[QString("action_name")]);
    m_action_name_isSet = !json[QString("action_name")].isNull() && m_action_name_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_target_type_isValid = ::OpenAPI::fromJsonValue(m_target_type, json[QString("target_type")]);
    m_target_type_isSet = !json[QString("target_type")].isNull() && m_target_type_isValid;

    m_target_url_isValid = ::OpenAPI::fromJsonValue(m_target_url, json[QString("target_url")]);
    m_target_url_isSet = !json[QString("target_url")].isNull() && m_target_url_isValid;
}

QString OAITodo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITodo::asJsonObject() const {
    QJsonObject obj;
    if (m_action_name_isSet) {
        obj.insert(QString("action_name"), ::OpenAPI::toJsonValue(m_action_name));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_target_type_isSet) {
        obj.insert(QString("target_type"), ::OpenAPI::toJsonValue(m_target_type));
    }
    if (m_target_url_isSet) {
        obj.insert(QString("target_url"), ::OpenAPI::toJsonValue(m_target_url));
    }
    return obj;
}

QString OAITodo::getActionName() const {
    return m_action_name;
}
void OAITodo::setActionName(const QString &action_name) {
    m_action_name = action_name;
    m_action_name_isSet = true;
}

bool OAITodo::is_action_name_Set() const{
    return m_action_name_isSet;
}

bool OAITodo::is_action_name_Valid() const{
    return m_action_name_isValid;
}

OAIUserBasic OAITodo::getAuthor() const {
    return m_author;
}
void OAITodo::setAuthor(const OAIUserBasic &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAITodo::is_author_Set() const{
    return m_author_isSet;
}

bool OAITodo::is_author_Valid() const{
    return m_author_isValid;
}

QString OAITodo::getBody() const {
    return m_body;
}
void OAITodo::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAITodo::is_body_Set() const{
    return m_body_isSet;
}

bool OAITodo::is_body_Valid() const{
    return m_body_isValid;
}

QString OAITodo::getCreatedAt() const {
    return m_created_at;
}
void OAITodo::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITodo::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITodo::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITodo::getId() const {
    return m_id;
}
void OAITodo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITodo::is_id_Set() const{
    return m_id_isSet;
}

bool OAITodo::is_id_Valid() const{
    return m_id_isValid;
}

OAIBasicProjectDetails OAITodo::getProject() const {
    return m_project;
}
void OAITodo::setProject(const OAIBasicProjectDetails &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAITodo::is_project_Set() const{
    return m_project_isSet;
}

bool OAITodo::is_project_Valid() const{
    return m_project_isValid;
}

QString OAITodo::getState() const {
    return m_state;
}
void OAITodo::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITodo::is_state_Set() const{
    return m_state_isSet;
}

bool OAITodo::is_state_Valid() const{
    return m_state_isValid;
}

QString OAITodo::getTarget() const {
    return m_target;
}
void OAITodo::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAITodo::is_target_Set() const{
    return m_target_isSet;
}

bool OAITodo::is_target_Valid() const{
    return m_target_isValid;
}

QString OAITodo::getTargetType() const {
    return m_target_type;
}
void OAITodo::setTargetType(const QString &target_type) {
    m_target_type = target_type;
    m_target_type_isSet = true;
}

bool OAITodo::is_target_type_Set() const{
    return m_target_type_isSet;
}

bool OAITodo::is_target_type_Valid() const{
    return m_target_type_isValid;
}

QString OAITodo::getTargetUrl() const {
    return m_target_url;
}
void OAITodo::setTargetUrl(const QString &target_url) {
    m_target_url = target_url;
    m_target_url_isSet = true;
}

bool OAITodo::is_target_url_Set() const{
    return m_target_url_isSet;
}

bool OAITodo::is_target_url_Valid() const{
    return m_target_url_isValid;
}

bool OAITodo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITodo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
