/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutV3ProjectsIdServicesPipelinesEmail_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutV3ProjectsIdServicesPipelinesEmail_request::OAIPutV3ProjectsIdServicesPipelinesEmail_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutV3ProjectsIdServicesPipelinesEmail_request::OAIPutV3ProjectsIdServicesPipelinesEmail_request() {
    this->initializeModel();
}

OAIPutV3ProjectsIdServicesPipelinesEmail_request::~OAIPutV3ProjectsIdServicesPipelinesEmail_request() {}

void OAIPutV3ProjectsIdServicesPipelinesEmail_request::initializeModel() {

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_notify_only_broken_builds_isSet = false;
    m_notify_only_broken_builds_isValid = false;

    m_pipeline_events_isSet = false;
    m_pipeline_events_isValid = false;
}

void OAIPutV3ProjectsIdServicesPipelinesEmail_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutV3ProjectsIdServicesPipelinesEmail_request::fromJsonObject(QJsonObject json) {

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_notify_only_broken_builds_isValid = ::OpenAPI::fromJsonValue(m_notify_only_broken_builds, json[QString("notify_only_broken_builds")]);
    m_notify_only_broken_builds_isSet = !json[QString("notify_only_broken_builds")].isNull() && m_notify_only_broken_builds_isValid;

    m_pipeline_events_isValid = ::OpenAPI::fromJsonValue(m_pipeline_events, json[QString("pipeline_events")]);
    m_pipeline_events_isSet = !json[QString("pipeline_events")].isNull() && m_pipeline_events_isValid;
}

QString OAIPutV3ProjectsIdServicesPipelinesEmail_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutV3ProjectsIdServicesPipelinesEmail_request::asJsonObject() const {
    QJsonObject obj;
    if (m_recipients_isSet) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_notify_only_broken_builds_isSet) {
        obj.insert(QString("notify_only_broken_builds"), ::OpenAPI::toJsonValue(m_notify_only_broken_builds));
    }
    if (m_pipeline_events_isSet) {
        obj.insert(QString("pipeline_events"), ::OpenAPI::toJsonValue(m_pipeline_events));
    }
    return obj;
}

QString OAIPutV3ProjectsIdServicesPipelinesEmail_request::getRecipients() const {
    return m_recipients;
}
void OAIPutV3ProjectsIdServicesPipelinesEmail_request::setRecipients(const QString &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAIPutV3ProjectsIdServicesPipelinesEmail_request::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAIPutV3ProjectsIdServicesPipelinesEmail_request::is_recipients_Valid() const{
    return m_recipients_isValid;
}

bool OAIPutV3ProjectsIdServicesPipelinesEmail_request::isNotifyOnlyBrokenBuilds() const {
    return m_notify_only_broken_builds;
}
void OAIPutV3ProjectsIdServicesPipelinesEmail_request::setNotifyOnlyBrokenBuilds(const bool &notify_only_broken_builds) {
    m_notify_only_broken_builds = notify_only_broken_builds;
    m_notify_only_broken_builds_isSet = true;
}

bool OAIPutV3ProjectsIdServicesPipelinesEmail_request::is_notify_only_broken_builds_Set() const{
    return m_notify_only_broken_builds_isSet;
}

bool OAIPutV3ProjectsIdServicesPipelinesEmail_request::is_notify_only_broken_builds_Valid() const{
    return m_notify_only_broken_builds_isValid;
}

QString OAIPutV3ProjectsIdServicesPipelinesEmail_request::getPipelineEvents() const {
    return m_pipeline_events;
}
void OAIPutV3ProjectsIdServicesPipelinesEmail_request::setPipelineEvents(const QString &pipeline_events) {
    m_pipeline_events = pipeline_events;
    m_pipeline_events_isSet = true;
}

bool OAIPutV3ProjectsIdServicesPipelinesEmail_request::is_pipeline_events_Set() const{
    return m_pipeline_events_isSet;
}

bool OAIPutV3ProjectsIdServicesPipelinesEmail_request::is_pipeline_events_Valid() const{
    return m_pipeline_events_isValid;
}

bool OAIPutV3ProjectsIdServicesPipelinesEmail_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recipients_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_only_broken_builds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_events_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutV3ProjectsIdServicesPipelinesEmail_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_recipients_isValid && true;
}

} // namespace OpenAPI
