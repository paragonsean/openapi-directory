/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployment::OAIDeployment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployment::OAIDeployment() {
    this->initializeModel();
}

OAIDeployment::~OAIDeployment() {}

void OAIDeployment::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deployable_isSet = false;
    m_deployable_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_iid_isSet = false;
    m_iid_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIDeployment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployment::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_deployable_isValid = ::OpenAPI::fromJsonValue(m_deployable, json[QString("deployable")]);
    m_deployable_isSet = !json[QString("deployable")].isNull() && m_deployable_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_iid_isValid = ::OpenAPI::fromJsonValue(m_iid, json[QString("iid")]);
    m_iid_isSet = !json[QString("iid")].isNull() && m_iid_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIDeployment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployment::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deployable.isSet()) {
        obj.insert(QString("deployable"), ::OpenAPI::toJsonValue(m_deployable));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_iid_isSet) {
        obj.insert(QString("iid"), ::OpenAPI::toJsonValue(m_iid));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIDeployment::getCreatedAt() const {
    return m_created_at;
}
void OAIDeployment::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDeployment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDeployment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIBuild OAIDeployment::getDeployable() const {
    return m_deployable;
}
void OAIDeployment::setDeployable(const OAIBuild &deployable) {
    m_deployable = deployable;
    m_deployable_isSet = true;
}

bool OAIDeployment::is_deployable_Set() const{
    return m_deployable_isSet;
}

bool OAIDeployment::is_deployable_Valid() const{
    return m_deployable_isValid;
}

OAIEnvironmentBasic OAIDeployment::getEnvironment() const {
    return m_environment;
}
void OAIDeployment::setEnvironment(const OAIEnvironmentBasic &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIDeployment::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIDeployment::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAIDeployment::getId() const {
    return m_id;
}
void OAIDeployment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeployment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeployment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeployment::getIid() const {
    return m_iid;
}
void OAIDeployment::setIid(const QString &iid) {
    m_iid = iid;
    m_iid_isSet = true;
}

bool OAIDeployment::is_iid_Set() const{
    return m_iid_isSet;
}

bool OAIDeployment::is_iid_Valid() const{
    return m_iid_isValid;
}

QString OAIDeployment::getRef() const {
    return m_ref;
}
void OAIDeployment::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAIDeployment::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAIDeployment::is_ref_Valid() const{
    return m_ref_isValid;
}

QString OAIDeployment::getSha() const {
    return m_sha;
}
void OAIDeployment::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIDeployment::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIDeployment::is_sha_Valid() const{
    return m_sha_isValid;
}

OAIUserBasic OAIDeployment::getUser() const {
    return m_user;
}
void OAIDeployment::setUser(const OAIUserBasic &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIDeployment::is_user_Set() const{
    return m_user_isSet;
}

bool OAIDeployment::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIDeployment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
