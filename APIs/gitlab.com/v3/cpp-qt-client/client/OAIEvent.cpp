/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_action_name_isSet = false;
    m_action_name_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_author_id_isSet = false;
    m_author_id_isValid = false;

    m_author_username_isSet = false;
    m_author_username_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_target_title_isSet = false;
    m_target_title_isValid = false;

    m_target_type_isSet = false;
    m_target_type_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_action_name_isValid = ::OpenAPI::fromJsonValue(m_action_name, json[QString("action_name")]);
    m_action_name_isSet = !json[QString("action_name")].isNull() && m_action_name_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_author_id_isValid = ::OpenAPI::fromJsonValue(m_author_id, json[QString("author_id")]);
    m_author_id_isSet = !json[QString("author_id")].isNull() && m_author_id_isValid;

    m_author_username_isValid = ::OpenAPI::fromJsonValue(m_author_username, json[QString("author_username")]);
    m_author_username_isSet = !json[QString("author_username")].isNull() && m_author_username_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("target_id")]);
    m_target_id_isSet = !json[QString("target_id")].isNull() && m_target_id_isValid;

    m_target_title_isValid = ::OpenAPI::fromJsonValue(m_target_title, json[QString("target_title")]);
    m_target_title_isSet = !json[QString("target_title")].isNull() && m_target_title_isValid;

    m_target_type_isValid = ::OpenAPI::fromJsonValue(m_target_type, json[QString("target_type")]);
    m_target_type_isSet = !json[QString("target_type")].isNull() && m_target_type_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_action_name_isSet) {
        obj.insert(QString("action_name"), ::OpenAPI::toJsonValue(m_action_name));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_author_id_isSet) {
        obj.insert(QString("author_id"), ::OpenAPI::toJsonValue(m_author_id));
    }
    if (m_author_username_isSet) {
        obj.insert(QString("author_username"), ::OpenAPI::toJsonValue(m_author_username));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("target_id"), ::OpenAPI::toJsonValue(m_target_id));
    }
    if (m_target_title_isSet) {
        obj.insert(QString("target_title"), ::OpenAPI::toJsonValue(m_target_title));
    }
    if (m_target_type_isSet) {
        obj.insert(QString("target_type"), ::OpenAPI::toJsonValue(m_target_type));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIEvent::getActionName() const {
    return m_action_name;
}
void OAIEvent::setActionName(const QString &action_name) {
    m_action_name = action_name;
    m_action_name_isSet = true;
}

bool OAIEvent::is_action_name_Set() const{
    return m_action_name_isSet;
}

bool OAIEvent::is_action_name_Valid() const{
    return m_action_name_isValid;
}

OAIUserBasic OAIEvent::getAuthor() const {
    return m_author;
}
void OAIEvent::setAuthor(const OAIUserBasic &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIEvent::is_author_Set() const{
    return m_author_isSet;
}

bool OAIEvent::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIEvent::getAuthorId() const {
    return m_author_id;
}
void OAIEvent::setAuthorId(const QString &author_id) {
    m_author_id = author_id;
    m_author_id_isSet = true;
}

bool OAIEvent::is_author_id_Set() const{
    return m_author_id_isSet;
}

bool OAIEvent::is_author_id_Valid() const{
    return m_author_id_isValid;
}

QString OAIEvent::getAuthorUsername() const {
    return m_author_username;
}
void OAIEvent::setAuthorUsername(const QString &author_username) {
    m_author_username = author_username;
    m_author_username_isSet = true;
}

bool OAIEvent::is_author_username_Set() const{
    return m_author_username_isSet;
}

bool OAIEvent::is_author_username_Valid() const{
    return m_author_username_isValid;
}

QString OAIEvent::getCreatedAt() const {
    return m_created_at;
}
void OAIEvent::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIEvent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIEvent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIEvent::getData() const {
    return m_data;
}
void OAIEvent::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIEvent::is_data_Set() const{
    return m_data_isSet;
}

bool OAIEvent::is_data_Valid() const{
    return m_data_isValid;
}

OAINote OAIEvent::getNote() const {
    return m_note;
}
void OAIEvent::setNote(const OAINote &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIEvent::is_note_Set() const{
    return m_note_isSet;
}

bool OAIEvent::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIEvent::getProjectId() const {
    return m_project_id;
}
void OAIEvent::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIEvent::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIEvent::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIEvent::getTargetId() const {
    return m_target_id;
}
void OAIEvent::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAIEvent::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIEvent::is_target_id_Valid() const{
    return m_target_id_isValid;
}

QString OAIEvent::getTargetTitle() const {
    return m_target_title;
}
void OAIEvent::setTargetTitle(const QString &target_title) {
    m_target_title = target_title;
    m_target_title_isSet = true;
}

bool OAIEvent::is_target_title_Set() const{
    return m_target_title_isSet;
}

bool OAIEvent::is_target_title_Valid() const{
    return m_target_title_isValid;
}

QString OAIEvent::getTargetType() const {
    return m_target_type;
}
void OAIEvent::setTargetType(const QString &target_type) {
    m_target_type = target_type;
    m_target_type_isSet = true;
}

bool OAIEvent::is_target_type_Set() const{
    return m_target_type_isSet;
}

bool OAIEvent::is_target_type_Valid() const{
    return m_target_type_isValid;
}

QString OAIEvent::getTitle() const {
    return m_title;
}
void OAIEvent::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEvent::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEvent::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
