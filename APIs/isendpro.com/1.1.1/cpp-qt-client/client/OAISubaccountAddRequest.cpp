/**
 * API iSendPro
 * [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP 
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: support@isendpro.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubaccountAddRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubaccountAddRequest::OAISubaccountAddRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubaccountAddRequest::OAISubaccountAddRequest() {
    this->initializeModel();
}

OAISubaccountAddRequest::~OAISubaccountAddRequest() {}

void OAISubaccountAddRequest::initializeModel() {

    m_keyid_isSet = false;
    m_keyid_isValid = false;

    m_sub_account_edit_isSet = false;
    m_sub_account_edit_isValid = false;

    m_sub_account_login_isSet = false;
    m_sub_account_login_isValid = false;

    m_sub_account_password_isSet = false;
    m_sub_account_password_isValid = false;
}

void OAISubaccountAddRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubaccountAddRequest::fromJsonObject(QJsonObject json) {

    m_keyid_isValid = ::OpenAPI::fromJsonValue(m_keyid, json[QString("keyid")]);
    m_keyid_isSet = !json[QString("keyid")].isNull() && m_keyid_isValid;

    m_sub_account_edit_isValid = ::OpenAPI::fromJsonValue(m_sub_account_edit, json[QString("subAccountEdit")]);
    m_sub_account_edit_isSet = !json[QString("subAccountEdit")].isNull() && m_sub_account_edit_isValid;

    m_sub_account_login_isValid = ::OpenAPI::fromJsonValue(m_sub_account_login, json[QString("subAccountLogin")]);
    m_sub_account_login_isSet = !json[QString("subAccountLogin")].isNull() && m_sub_account_login_isValid;

    m_sub_account_password_isValid = ::OpenAPI::fromJsonValue(m_sub_account_password, json[QString("subAccountPassword")]);
    m_sub_account_password_isSet = !json[QString("subAccountPassword")].isNull() && m_sub_account_password_isValid;
}

QString OAISubaccountAddRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubaccountAddRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_keyid_isSet) {
        obj.insert(QString("keyid"), ::OpenAPI::toJsonValue(m_keyid));
    }
    if (m_sub_account_edit_isSet) {
        obj.insert(QString("subAccountEdit"), ::OpenAPI::toJsonValue(m_sub_account_edit));
    }
    if (m_sub_account_login_isSet) {
        obj.insert(QString("subAccountLogin"), ::OpenAPI::toJsonValue(m_sub_account_login));
    }
    if (m_sub_account_password_isSet) {
        obj.insert(QString("subAccountPassword"), ::OpenAPI::toJsonValue(m_sub_account_password));
    }
    return obj;
}

QString OAISubaccountAddRequest::getKeyid() const {
    return m_keyid;
}
void OAISubaccountAddRequest::setKeyid(const QString &keyid) {
    m_keyid = keyid;
    m_keyid_isSet = true;
}

bool OAISubaccountAddRequest::is_keyid_Set() const{
    return m_keyid_isSet;
}

bool OAISubaccountAddRequest::is_keyid_Valid() const{
    return m_keyid_isValid;
}

QString OAISubaccountAddRequest::getSubAccountEdit() const {
    return m_sub_account_edit;
}
void OAISubaccountAddRequest::setSubAccountEdit(const QString &sub_account_edit) {
    m_sub_account_edit = sub_account_edit;
    m_sub_account_edit_isSet = true;
}

bool OAISubaccountAddRequest::is_sub_account_edit_Set() const{
    return m_sub_account_edit_isSet;
}

bool OAISubaccountAddRequest::is_sub_account_edit_Valid() const{
    return m_sub_account_edit_isValid;
}

QString OAISubaccountAddRequest::getSubAccountLogin() const {
    return m_sub_account_login;
}
void OAISubaccountAddRequest::setSubAccountLogin(const QString &sub_account_login) {
    m_sub_account_login = sub_account_login;
    m_sub_account_login_isSet = true;
}

bool OAISubaccountAddRequest::is_sub_account_login_Set() const{
    return m_sub_account_login_isSet;
}

bool OAISubaccountAddRequest::is_sub_account_login_Valid() const{
    return m_sub_account_login_isValid;
}

QString OAISubaccountAddRequest::getSubAccountPassword() const {
    return m_sub_account_password;
}
void OAISubaccountAddRequest::setSubAccountPassword(const QString &sub_account_password) {
    m_sub_account_password = sub_account_password;
    m_sub_account_password_isSet = true;
}

bool OAISubaccountAddRequest::is_sub_account_password_Set() const{
    return m_sub_account_password_isSet;
}

bool OAISubaccountAddRequest::is_sub_account_password_Valid() const{
    return m_sub_account_password_isValid;
}

bool OAISubaccountAddRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keyid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubaccountAddRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_keyid_isValid && m_sub_account_edit_isValid && m_sub_account_login_isValid && m_sub_account_password_isValid && true;
}

} // namespace OpenAPI
