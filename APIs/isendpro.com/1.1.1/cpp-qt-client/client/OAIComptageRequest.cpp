/**
 * API iSendPro
 * [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP 
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: support@isendpro.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComptageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComptageRequest::OAIComptageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComptageRequest::OAIComptageRequest() {
    this->initializeModel();
}

OAIComptageRequest::~OAIComptageRequest() {}

void OAIComptageRequest::initializeModel() {

    m_comptage_isSet = false;
    m_comptage_isValid = false;

    m_date_envoi_isSet = false;
    m_date_envoi_isValid = false;

    m_emetteur_isSet = false;
    m_emetteur_isValid = false;

    m_gmt_zone_isSet = false;
    m_gmt_zone_isValid = false;

    m_keyid_isSet = false;
    m_keyid_isValid = false;

    m_nostop_isSet = false;
    m_nostop_isValid = false;

    m_num_isSet = false;
    m_num_isValid = false;

    m_num_azur_isSet = false;
    m_num_azur_isValid = false;

    m_sms_isSet = false;
    m_sms_isValid = false;

    m_smslong_isSet = false;
    m_smslong_isValid = false;

    m_tracker_isSet = false;
    m_tracker_isValid = false;

    m_ucs2_isSet = false;
    m_ucs2_isValid = false;
}

void OAIComptageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComptageRequest::fromJsonObject(QJsonObject json) {

    m_comptage_isValid = ::OpenAPI::fromJsonValue(m_comptage, json[QString("comptage")]);
    m_comptage_isSet = !json[QString("comptage")].isNull() && m_comptage_isValid;

    m_date_envoi_isValid = ::OpenAPI::fromJsonValue(m_date_envoi, json[QString("date_envoi")]);
    m_date_envoi_isSet = !json[QString("date_envoi")].isNull() && m_date_envoi_isValid;

    m_emetteur_isValid = ::OpenAPI::fromJsonValue(m_emetteur, json[QString("emetteur")]);
    m_emetteur_isSet = !json[QString("emetteur")].isNull() && m_emetteur_isValid;

    m_gmt_zone_isValid = ::OpenAPI::fromJsonValue(m_gmt_zone, json[QString("gmt_zone")]);
    m_gmt_zone_isSet = !json[QString("gmt_zone")].isNull() && m_gmt_zone_isValid;

    m_keyid_isValid = ::OpenAPI::fromJsonValue(m_keyid, json[QString("keyid")]);
    m_keyid_isSet = !json[QString("keyid")].isNull() && m_keyid_isValid;

    m_nostop_isValid = ::OpenAPI::fromJsonValue(m_nostop, json[QString("nostop")]);
    m_nostop_isSet = !json[QString("nostop")].isNull() && m_nostop_isValid;

    m_num_isValid = ::OpenAPI::fromJsonValue(m_num, json[QString("num")]);
    m_num_isSet = !json[QString("num")].isNull() && m_num_isValid;

    m_num_azur_isValid = ::OpenAPI::fromJsonValue(m_num_azur, json[QString("numAzur")]);
    m_num_azur_isSet = !json[QString("numAzur")].isNull() && m_num_azur_isValid;

    m_sms_isValid = ::OpenAPI::fromJsonValue(m_sms, json[QString("sms")]);
    m_sms_isSet = !json[QString("sms")].isNull() && m_sms_isValid;

    m_smslong_isValid = ::OpenAPI::fromJsonValue(m_smslong, json[QString("smslong")]);
    m_smslong_isSet = !json[QString("smslong")].isNull() && m_smslong_isValid;

    m_tracker_isValid = ::OpenAPI::fromJsonValue(m_tracker, json[QString("tracker")]);
    m_tracker_isSet = !json[QString("tracker")].isNull() && m_tracker_isValid;

    m_ucs2_isValid = ::OpenAPI::fromJsonValue(m_ucs2, json[QString("ucs2")]);
    m_ucs2_isSet = !json[QString("ucs2")].isNull() && m_ucs2_isValid;
}

QString OAIComptageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComptageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_comptage_isSet) {
        obj.insert(QString("comptage"), ::OpenAPI::toJsonValue(m_comptage));
    }
    if (m_date_envoi_isSet) {
        obj.insert(QString("date_envoi"), ::OpenAPI::toJsonValue(m_date_envoi));
    }
    if (m_emetteur_isSet) {
        obj.insert(QString("emetteur"), ::OpenAPI::toJsonValue(m_emetteur));
    }
    if (m_gmt_zone_isSet) {
        obj.insert(QString("gmt_zone"), ::OpenAPI::toJsonValue(m_gmt_zone));
    }
    if (m_keyid_isSet) {
        obj.insert(QString("keyid"), ::OpenAPI::toJsonValue(m_keyid));
    }
    if (m_nostop_isSet) {
        obj.insert(QString("nostop"), ::OpenAPI::toJsonValue(m_nostop));
    }
    if (m_num_isSet) {
        obj.insert(QString("num"), ::OpenAPI::toJsonValue(m_num));
    }
    if (m_num_azur_isSet) {
        obj.insert(QString("numAzur"), ::OpenAPI::toJsonValue(m_num_azur));
    }
    if (m_sms_isSet) {
        obj.insert(QString("sms"), ::OpenAPI::toJsonValue(m_sms));
    }
    if (m_smslong_isSet) {
        obj.insert(QString("smslong"), ::OpenAPI::toJsonValue(m_smslong));
    }
    if (m_tracker_isSet) {
        obj.insert(QString("tracker"), ::OpenAPI::toJsonValue(m_tracker));
    }
    if (m_ucs2_isSet) {
        obj.insert(QString("ucs2"), ::OpenAPI::toJsonValue(m_ucs2));
    }
    return obj;
}

QString OAIComptageRequest::getComptage() const {
    return m_comptage;
}
void OAIComptageRequest::setComptage(const QString &comptage) {
    m_comptage = comptage;
    m_comptage_isSet = true;
}

bool OAIComptageRequest::is_comptage_Set() const{
    return m_comptage_isSet;
}

bool OAIComptageRequest::is_comptage_Valid() const{
    return m_comptage_isValid;
}

QString OAIComptageRequest::getDateEnvoi() const {
    return m_date_envoi;
}
void OAIComptageRequest::setDateEnvoi(const QString &date_envoi) {
    m_date_envoi = date_envoi;
    m_date_envoi_isSet = true;
}

bool OAIComptageRequest::is_date_envoi_Set() const{
    return m_date_envoi_isSet;
}

bool OAIComptageRequest::is_date_envoi_Valid() const{
    return m_date_envoi_isValid;
}

QString OAIComptageRequest::getEmetteur() const {
    return m_emetteur;
}
void OAIComptageRequest::setEmetteur(const QString &emetteur) {
    m_emetteur = emetteur;
    m_emetteur_isSet = true;
}

bool OAIComptageRequest::is_emetteur_Set() const{
    return m_emetteur_isSet;
}

bool OAIComptageRequest::is_emetteur_Valid() const{
    return m_emetteur_isValid;
}

QString OAIComptageRequest::getGmtZone() const {
    return m_gmt_zone;
}
void OAIComptageRequest::setGmtZone(const QString &gmt_zone) {
    m_gmt_zone = gmt_zone;
    m_gmt_zone_isSet = true;
}

bool OAIComptageRequest::is_gmt_zone_Set() const{
    return m_gmt_zone_isSet;
}

bool OAIComptageRequest::is_gmt_zone_Valid() const{
    return m_gmt_zone_isValid;
}

QString OAIComptageRequest::getKeyid() const {
    return m_keyid;
}
void OAIComptageRequest::setKeyid(const QString &keyid) {
    m_keyid = keyid;
    m_keyid_isSet = true;
}

bool OAIComptageRequest::is_keyid_Set() const{
    return m_keyid_isSet;
}

bool OAIComptageRequest::is_keyid_Valid() const{
    return m_keyid_isValid;
}

QString OAIComptageRequest::getNostop() const {
    return m_nostop;
}
void OAIComptageRequest::setNostop(const QString &nostop) {
    m_nostop = nostop;
    m_nostop_isSet = true;
}

bool OAIComptageRequest::is_nostop_Set() const{
    return m_nostop_isSet;
}

bool OAIComptageRequest::is_nostop_Valid() const{
    return m_nostop_isValid;
}

QString OAIComptageRequest::getNum() const {
    return m_num;
}
void OAIComptageRequest::setNum(const QString &num) {
    m_num = num;
    m_num_isSet = true;
}

bool OAIComptageRequest::is_num_Set() const{
    return m_num_isSet;
}

bool OAIComptageRequest::is_num_Valid() const{
    return m_num_isValid;
}

QString OAIComptageRequest::getNumAzur() const {
    return m_num_azur;
}
void OAIComptageRequest::setNumAzur(const QString &num_azur) {
    m_num_azur = num_azur;
    m_num_azur_isSet = true;
}

bool OAIComptageRequest::is_num_azur_Set() const{
    return m_num_azur_isSet;
}

bool OAIComptageRequest::is_num_azur_Valid() const{
    return m_num_azur_isValid;
}

QString OAIComptageRequest::getSms() const {
    return m_sms;
}
void OAIComptageRequest::setSms(const QString &sms) {
    m_sms = sms;
    m_sms_isSet = true;
}

bool OAIComptageRequest::is_sms_Set() const{
    return m_sms_isSet;
}

bool OAIComptageRequest::is_sms_Valid() const{
    return m_sms_isValid;
}

QString OAIComptageRequest::getSmslong() const {
    return m_smslong;
}
void OAIComptageRequest::setSmslong(const QString &smslong) {
    m_smslong = smslong;
    m_smslong_isSet = true;
}

bool OAIComptageRequest::is_smslong_Set() const{
    return m_smslong_isSet;
}

bool OAIComptageRequest::is_smslong_Valid() const{
    return m_smslong_isValid;
}

QString OAIComptageRequest::getTracker() const {
    return m_tracker;
}
void OAIComptageRequest::setTracker(const QString &tracker) {
    m_tracker = tracker;
    m_tracker_isSet = true;
}

bool OAIComptageRequest::is_tracker_Set() const{
    return m_tracker_isSet;
}

bool OAIComptageRequest::is_tracker_Valid() const{
    return m_tracker_isValid;
}

QString OAIComptageRequest::getUcs2() const {
    return m_ucs2;
}
void OAIComptageRequest::setUcs2(const QString &ucs2) {
    m_ucs2 = ucs2;
    m_ucs2_isSet = true;
}

bool OAIComptageRequest::is_ucs2_Set() const{
    return m_ucs2_isSet;
}

bool OAIComptageRequest::is_ucs2_Valid() const{
    return m_ucs2_isValid;
}

bool OAIComptageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comptage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_envoi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emetteur_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gmt_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nostop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_azur_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smslong_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ucs2_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComptageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comptage_isValid && m_keyid_isValid && m_num_isValid && m_sms_isValid && true;
}

} // namespace OpenAPI
