/**
 * API iSendPro
 * [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP 
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: support@isendpro.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIREPERTOIREmodifrequest.h
 *
 * 
 */

#ifndef OAIREPERTOIREmodifrequest_H
#define OAIREPERTOIREmodifrequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIREPERTOIREmodifrequest : public OAIObject {
public:
    OAIREPERTOIREmodifrequest();
    OAIREPERTOIREmodifrequest(QString json);
    ~OAIREPERTOIREmodifrequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getChamp1() const;
    void setChamp1(const QList<QString> &champ1);
    bool is_champ1_Set() const;
    bool is_champ1_Valid() const;

    QList<QString> getChamp10() const;
    void setChamp10(const QList<QString> &champ10);
    bool is_champ10_Set() const;
    bool is_champ10_Valid() const;

    QList<QString> getChamp11() const;
    void setChamp11(const QList<QString> &champ11);
    bool is_champ11_Set() const;
    bool is_champ11_Valid() const;

    QList<QString> getChamp12() const;
    void setChamp12(const QList<QString> &champ12);
    bool is_champ12_Set() const;
    bool is_champ12_Valid() const;

    QList<QString> getChamp13() const;
    void setChamp13(const QList<QString> &champ13);
    bool is_champ13_Set() const;
    bool is_champ13_Valid() const;

    QList<QString> getChamp14() const;
    void setChamp14(const QList<QString> &champ14);
    bool is_champ14_Set() const;
    bool is_champ14_Valid() const;

    QList<QString> getChamp15() const;
    void setChamp15(const QList<QString> &champ15);
    bool is_champ15_Set() const;
    bool is_champ15_Valid() const;

    QList<QString> getChamp16() const;
    void setChamp16(const QList<QString> &champ16);
    bool is_champ16_Set() const;
    bool is_champ16_Valid() const;

    QList<QString> getChamp17() const;
    void setChamp17(const QList<QString> &champ17);
    bool is_champ17_Set() const;
    bool is_champ17_Valid() const;

    QList<QString> getChamp18() const;
    void setChamp18(const QList<QString> &champ18);
    bool is_champ18_Set() const;
    bool is_champ18_Valid() const;

    QList<QString> getChamp19() const;
    void setChamp19(const QList<QString> &champ19);
    bool is_champ19_Set() const;
    bool is_champ19_Valid() const;

    QList<QString> getChamp2() const;
    void setChamp2(const QList<QString> &champ2);
    bool is_champ2_Set() const;
    bool is_champ2_Valid() const;

    QList<QString> getChamp20() const;
    void setChamp20(const QList<QString> &champ20);
    bool is_champ20_Set() const;
    bool is_champ20_Valid() const;

    QList<QString> getChamp21() const;
    void setChamp21(const QList<QString> &champ21);
    bool is_champ21_Set() const;
    bool is_champ21_Valid() const;

    QList<QString> getChamp22() const;
    void setChamp22(const QList<QString> &champ22);
    bool is_champ22_Set() const;
    bool is_champ22_Valid() const;

    QList<QString> getChamp23() const;
    void setChamp23(const QList<QString> &champ23);
    bool is_champ23_Set() const;
    bool is_champ23_Valid() const;

    QList<QString> getChamp24() const;
    void setChamp24(const QList<QString> &champ24);
    bool is_champ24_Set() const;
    bool is_champ24_Valid() const;

    QList<QString> getChamp25() const;
    void setChamp25(const QList<QString> &champ25);
    bool is_champ25_Set() const;
    bool is_champ25_Valid() const;

    QList<QString> getChamp26() const;
    void setChamp26(const QList<QString> &champ26);
    bool is_champ26_Set() const;
    bool is_champ26_Valid() const;

    QList<QString> getChamp27() const;
    void setChamp27(const QList<QString> &champ27);
    bool is_champ27_Set() const;
    bool is_champ27_Valid() const;

    QList<QString> getChamp3() const;
    void setChamp3(const QList<QString> &champ3);
    bool is_champ3_Set() const;
    bool is_champ3_Valid() const;

    QList<QString> getChamp4() const;
    void setChamp4(const QList<QString> &champ4);
    bool is_champ4_Set() const;
    bool is_champ4_Valid() const;

    QList<QString> getChamp5() const;
    void setChamp5(const QList<QString> &champ5);
    bool is_champ5_Set() const;
    bool is_champ5_Valid() const;

    QList<QString> getChamp6() const;
    void setChamp6(const QList<QString> &champ6);
    bool is_champ6_Set() const;
    bool is_champ6_Valid() const;

    QList<QString> getChamp7() const;
    void setChamp7(const QList<QString> &champ7);
    bool is_champ7_Set() const;
    bool is_champ7_Valid() const;

    QList<QString> getChamp8() const;
    void setChamp8(const QList<QString> &champ8);
    bool is_champ8_Set() const;
    bool is_champ8_Valid() const;

    QList<QString> getChamp9() const;
    void setChamp9(const QList<QString> &champ9);
    bool is_champ9_Set() const;
    bool is_champ9_Valid() const;

    QString getKeyid() const;
    void setKeyid(const QString &keyid);
    bool is_keyid_Set() const;
    bool is_keyid_Valid() const;

    QList<QString> getNum() const;
    void setNum(const QList<QString> &num);
    bool is_num_Set() const;
    bool is_num_Valid() const;

    QString getRepertoireEdit() const;
    void setRepertoireEdit(const QString &repertoire_edit);
    bool is_repertoire_edit_Set() const;
    bool is_repertoire_edit_Valid() const;

    QString getRepertoireId() const;
    void setRepertoireId(const QString &repertoire_id);
    bool is_repertoire_id_Set() const;
    bool is_repertoire_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_champ1;
    bool m_champ1_isSet;
    bool m_champ1_isValid;

    QList<QString> m_champ10;
    bool m_champ10_isSet;
    bool m_champ10_isValid;

    QList<QString> m_champ11;
    bool m_champ11_isSet;
    bool m_champ11_isValid;

    QList<QString> m_champ12;
    bool m_champ12_isSet;
    bool m_champ12_isValid;

    QList<QString> m_champ13;
    bool m_champ13_isSet;
    bool m_champ13_isValid;

    QList<QString> m_champ14;
    bool m_champ14_isSet;
    bool m_champ14_isValid;

    QList<QString> m_champ15;
    bool m_champ15_isSet;
    bool m_champ15_isValid;

    QList<QString> m_champ16;
    bool m_champ16_isSet;
    bool m_champ16_isValid;

    QList<QString> m_champ17;
    bool m_champ17_isSet;
    bool m_champ17_isValid;

    QList<QString> m_champ18;
    bool m_champ18_isSet;
    bool m_champ18_isValid;

    QList<QString> m_champ19;
    bool m_champ19_isSet;
    bool m_champ19_isValid;

    QList<QString> m_champ2;
    bool m_champ2_isSet;
    bool m_champ2_isValid;

    QList<QString> m_champ20;
    bool m_champ20_isSet;
    bool m_champ20_isValid;

    QList<QString> m_champ21;
    bool m_champ21_isSet;
    bool m_champ21_isValid;

    QList<QString> m_champ22;
    bool m_champ22_isSet;
    bool m_champ22_isValid;

    QList<QString> m_champ23;
    bool m_champ23_isSet;
    bool m_champ23_isValid;

    QList<QString> m_champ24;
    bool m_champ24_isSet;
    bool m_champ24_isValid;

    QList<QString> m_champ25;
    bool m_champ25_isSet;
    bool m_champ25_isValid;

    QList<QString> m_champ26;
    bool m_champ26_isSet;
    bool m_champ26_isValid;

    QList<QString> m_champ27;
    bool m_champ27_isSet;
    bool m_champ27_isValid;

    QList<QString> m_champ3;
    bool m_champ3_isSet;
    bool m_champ3_isValid;

    QList<QString> m_champ4;
    bool m_champ4_isSet;
    bool m_champ4_isValid;

    QList<QString> m_champ5;
    bool m_champ5_isSet;
    bool m_champ5_isValid;

    QList<QString> m_champ6;
    bool m_champ6_isSet;
    bool m_champ6_isValid;

    QList<QString> m_champ7;
    bool m_champ7_isSet;
    bool m_champ7_isValid;

    QList<QString> m_champ8;
    bool m_champ8_isSet;
    bool m_champ8_isValid;

    QList<QString> m_champ9;
    bool m_champ9_isSet;
    bool m_champ9_isValid;

    QString m_keyid;
    bool m_keyid_isSet;
    bool m_keyid_isValid;

    QList<QString> m_num;
    bool m_num_isSet;
    bool m_num_isValid;

    QString m_repertoire_edit;
    bool m_repertoire_edit_isSet;
    bool m_repertoire_edit_isValid;

    QString m_repertoire_id;
    bool m_repertoire_id_isSet;
    bool m_repertoire_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIREPERTOIREmodifrequest)

#endif // OAIREPERTOIREmodifrequest_H
