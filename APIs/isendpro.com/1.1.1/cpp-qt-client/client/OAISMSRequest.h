/**
 * API iSendPro
 * [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP 
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: support@isendpro.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISMSRequest.h
 *
 * 
 */

#ifndef OAISMSRequest_H
#define OAISMSRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISMSRequest : public OAIObject {
public:
    OAISMSRequest();
    OAISMSRequest(QString json);
    ~OAISMSRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDateEnvoi() const;
    void setDateEnvoi(const QString &date_envoi);
    bool is_date_envoi_Set() const;
    bool is_date_envoi_Valid() const;

    QString getEmetteur() const;
    void setEmetteur(const QString &emetteur);
    bool is_emetteur_Set() const;
    bool is_emetteur_Valid() const;

    QString getGmtZone() const;
    void setGmtZone(const QString &gmt_zone);
    bool is_gmt_zone_Set() const;
    bool is_gmt_zone_Valid() const;

    QString getKeyid() const;
    void setKeyid(const QString &keyid);
    bool is_keyid_Set() const;
    bool is_keyid_Valid() const;

    QString getNostop() const;
    void setNostop(const QString &nostop);
    bool is_nostop_Set() const;
    bool is_nostop_Valid() const;

    QList<QString> getNum() const;
    void setNum(const QList<QString> &num);
    bool is_num_Set() const;
    bool is_num_Valid() const;

    QString getNumAzur() const;
    void setNumAzur(const QString &num_azur);
    bool is_num_azur_Set() const;
    bool is_num_azur_Valid() const;

    QString getRepertoireId() const;
    void setRepertoireId(const QString &repertoire_id);
    bool is_repertoire_id_Set() const;
    bool is_repertoire_id_Valid() const;

    QList<QString> getSms() const;
    void setSms(const QList<QString> &sms);
    bool is_sms_Set() const;
    bool is_sms_Valid() const;

    QString getSmslong() const;
    void setSmslong(const QString &smslong);
    bool is_smslong_Set() const;
    bool is_smslong_Valid() const;

    QList<QString> getTracker() const;
    void setTracker(const QList<QString> &tracker);
    bool is_tracker_Set() const;
    bool is_tracker_Valid() const;

    QString getUcs2() const;
    void setUcs2(const QString &ucs2);
    bool is_ucs2_Set() const;
    bool is_ucs2_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_date_envoi;
    bool m_date_envoi_isSet;
    bool m_date_envoi_isValid;

    QString m_emetteur;
    bool m_emetteur_isSet;
    bool m_emetteur_isValid;

    QString m_gmt_zone;
    bool m_gmt_zone_isSet;
    bool m_gmt_zone_isValid;

    QString m_keyid;
    bool m_keyid_isSet;
    bool m_keyid_isValid;

    QString m_nostop;
    bool m_nostop_isSet;
    bool m_nostop_isValid;

    QList<QString> m_num;
    bool m_num_isSet;
    bool m_num_isValid;

    QString m_num_azur;
    bool m_num_azur_isSet;
    bool m_num_azur_isValid;

    QString m_repertoire_id;
    bool m_repertoire_id_isSet;
    bool m_repertoire_id_isValid;

    QList<QString> m_sms;
    bool m_sms_isSet;
    bool m_sms_isValid;

    QString m_smslong;
    bool m_smslong_isSet;
    bool m_smslong_isValid;

    QList<QString> m_tracker;
    bool m_tracker_isSet;
    bool m_tracker_isValid;

    QString m_ucs2;
    bool m_ucs2_isSet;
    bool m_ucs2_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISMSRequest)

#endif // OAISMSRequest_H
