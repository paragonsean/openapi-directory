/**
 * API iSendPro
 * [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP 
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: support@isendpro.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubaccountRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubaccountRequest::OAISubaccountRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubaccountRequest::OAISubaccountRequest() {
    this->initializeModel();
}

OAISubaccountRequest::~OAISubaccountRequest() {}

void OAISubaccountRequest::initializeModel() {

    m_keyid_isSet = false;
    m_keyid_isValid = false;

    m_sub_account_add_credit_isSet = false;
    m_sub_account_add_credit_isValid = false;

    m_sub_account_country_code_isSet = false;
    m_sub_account_country_code_isValid = false;

    m_sub_account_edit_isSet = false;
    m_sub_account_edit_isValid = false;

    m_sub_account_key_id_isSet = false;
    m_sub_account_key_id_isValid = false;

    m_sub_account_price_isSet = false;
    m_sub_account_price_isValid = false;

    m_sub_account_restriction_stop_isSet = false;
    m_sub_account_restriction_stop_isValid = false;

    m_sub_account_restriction_time_isSet = false;
    m_sub_account_restriction_time_isValid = false;
}

void OAISubaccountRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubaccountRequest::fromJsonObject(QJsonObject json) {

    m_keyid_isValid = ::OpenAPI::fromJsonValue(m_keyid, json[QString("keyid")]);
    m_keyid_isSet = !json[QString("keyid")].isNull() && m_keyid_isValid;

    m_sub_account_add_credit_isValid = ::OpenAPI::fromJsonValue(m_sub_account_add_credit, json[QString("subAccountAddCredit")]);
    m_sub_account_add_credit_isSet = !json[QString("subAccountAddCredit")].isNull() && m_sub_account_add_credit_isValid;

    m_sub_account_country_code_isValid = ::OpenAPI::fromJsonValue(m_sub_account_country_code, json[QString("subAccountCountryCode")]);
    m_sub_account_country_code_isSet = !json[QString("subAccountCountryCode")].isNull() && m_sub_account_country_code_isValid;

    m_sub_account_edit_isValid = ::OpenAPI::fromJsonValue(m_sub_account_edit, json[QString("subAccountEdit")]);
    m_sub_account_edit_isSet = !json[QString("subAccountEdit")].isNull() && m_sub_account_edit_isValid;

    m_sub_account_key_id_isValid = ::OpenAPI::fromJsonValue(m_sub_account_key_id, json[QString("subAccountKeyId")]);
    m_sub_account_key_id_isSet = !json[QString("subAccountKeyId")].isNull() && m_sub_account_key_id_isValid;

    m_sub_account_price_isValid = ::OpenAPI::fromJsonValue(m_sub_account_price, json[QString("subAccountPrice")]);
    m_sub_account_price_isSet = !json[QString("subAccountPrice")].isNull() && m_sub_account_price_isValid;

    m_sub_account_restriction_stop_isValid = ::OpenAPI::fromJsonValue(m_sub_account_restriction_stop, json[QString("subAccountRestrictionStop")]);
    m_sub_account_restriction_stop_isSet = !json[QString("subAccountRestrictionStop")].isNull() && m_sub_account_restriction_stop_isValid;

    m_sub_account_restriction_time_isValid = ::OpenAPI::fromJsonValue(m_sub_account_restriction_time, json[QString("subAccountRestrictionTime")]);
    m_sub_account_restriction_time_isSet = !json[QString("subAccountRestrictionTime")].isNull() && m_sub_account_restriction_time_isValid;
}

QString OAISubaccountRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubaccountRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_keyid_isSet) {
        obj.insert(QString("keyid"), ::OpenAPI::toJsonValue(m_keyid));
    }
    if (m_sub_account_add_credit_isSet) {
        obj.insert(QString("subAccountAddCredit"), ::OpenAPI::toJsonValue(m_sub_account_add_credit));
    }
    if (m_sub_account_country_code_isSet) {
        obj.insert(QString("subAccountCountryCode"), ::OpenAPI::toJsonValue(m_sub_account_country_code));
    }
    if (m_sub_account_edit_isSet) {
        obj.insert(QString("subAccountEdit"), ::OpenAPI::toJsonValue(m_sub_account_edit));
    }
    if (m_sub_account_key_id_isSet) {
        obj.insert(QString("subAccountKeyId"), ::OpenAPI::toJsonValue(m_sub_account_key_id));
    }
    if (m_sub_account_price_isSet) {
        obj.insert(QString("subAccountPrice"), ::OpenAPI::toJsonValue(m_sub_account_price));
    }
    if (m_sub_account_restriction_stop_isSet) {
        obj.insert(QString("subAccountRestrictionStop"), ::OpenAPI::toJsonValue(m_sub_account_restriction_stop));
    }
    if (m_sub_account_restriction_time_isSet) {
        obj.insert(QString("subAccountRestrictionTime"), ::OpenAPI::toJsonValue(m_sub_account_restriction_time));
    }
    return obj;
}

QString OAISubaccountRequest::getKeyid() const {
    return m_keyid;
}
void OAISubaccountRequest::setKeyid(const QString &keyid) {
    m_keyid = keyid;
    m_keyid_isSet = true;
}

bool OAISubaccountRequest::is_keyid_Set() const{
    return m_keyid_isSet;
}

bool OAISubaccountRequest::is_keyid_Valid() const{
    return m_keyid_isValid;
}

QString OAISubaccountRequest::getSubAccountAddCredit() const {
    return m_sub_account_add_credit;
}
void OAISubaccountRequest::setSubAccountAddCredit(const QString &sub_account_add_credit) {
    m_sub_account_add_credit = sub_account_add_credit;
    m_sub_account_add_credit_isSet = true;
}

bool OAISubaccountRequest::is_sub_account_add_credit_Set() const{
    return m_sub_account_add_credit_isSet;
}

bool OAISubaccountRequest::is_sub_account_add_credit_Valid() const{
    return m_sub_account_add_credit_isValid;
}

QString OAISubaccountRequest::getSubAccountCountryCode() const {
    return m_sub_account_country_code;
}
void OAISubaccountRequest::setSubAccountCountryCode(const QString &sub_account_country_code) {
    m_sub_account_country_code = sub_account_country_code;
    m_sub_account_country_code_isSet = true;
}

bool OAISubaccountRequest::is_sub_account_country_code_Set() const{
    return m_sub_account_country_code_isSet;
}

bool OAISubaccountRequest::is_sub_account_country_code_Valid() const{
    return m_sub_account_country_code_isValid;
}

QString OAISubaccountRequest::getSubAccountEdit() const {
    return m_sub_account_edit;
}
void OAISubaccountRequest::setSubAccountEdit(const QString &sub_account_edit) {
    m_sub_account_edit = sub_account_edit;
    m_sub_account_edit_isSet = true;
}

bool OAISubaccountRequest::is_sub_account_edit_Set() const{
    return m_sub_account_edit_isSet;
}

bool OAISubaccountRequest::is_sub_account_edit_Valid() const{
    return m_sub_account_edit_isValid;
}

QString OAISubaccountRequest::getSubAccountKeyId() const {
    return m_sub_account_key_id;
}
void OAISubaccountRequest::setSubAccountKeyId(const QString &sub_account_key_id) {
    m_sub_account_key_id = sub_account_key_id;
    m_sub_account_key_id_isSet = true;
}

bool OAISubaccountRequest::is_sub_account_key_id_Set() const{
    return m_sub_account_key_id_isSet;
}

bool OAISubaccountRequest::is_sub_account_key_id_Valid() const{
    return m_sub_account_key_id_isValid;
}

QString OAISubaccountRequest::getSubAccountPrice() const {
    return m_sub_account_price;
}
void OAISubaccountRequest::setSubAccountPrice(const QString &sub_account_price) {
    m_sub_account_price = sub_account_price;
    m_sub_account_price_isSet = true;
}

bool OAISubaccountRequest::is_sub_account_price_Set() const{
    return m_sub_account_price_isSet;
}

bool OAISubaccountRequest::is_sub_account_price_Valid() const{
    return m_sub_account_price_isValid;
}

QString OAISubaccountRequest::getSubAccountRestrictionStop() const {
    return m_sub_account_restriction_stop;
}
void OAISubaccountRequest::setSubAccountRestrictionStop(const QString &sub_account_restriction_stop) {
    m_sub_account_restriction_stop = sub_account_restriction_stop;
    m_sub_account_restriction_stop_isSet = true;
}

bool OAISubaccountRequest::is_sub_account_restriction_stop_Set() const{
    return m_sub_account_restriction_stop_isSet;
}

bool OAISubaccountRequest::is_sub_account_restriction_stop_Valid() const{
    return m_sub_account_restriction_stop_isValid;
}

QString OAISubaccountRequest::getSubAccountRestrictionTime() const {
    return m_sub_account_restriction_time;
}
void OAISubaccountRequest::setSubAccountRestrictionTime(const QString &sub_account_restriction_time) {
    m_sub_account_restriction_time = sub_account_restriction_time;
    m_sub_account_restriction_time_isSet = true;
}

bool OAISubaccountRequest::is_sub_account_restriction_time_Set() const{
    return m_sub_account_restriction_time_isSet;
}

bool OAISubaccountRequest::is_sub_account_restriction_time_Valid() const{
    return m_sub_account_restriction_time_isValid;
}

bool OAISubaccountRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keyid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_add_credit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_restriction_stop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_restriction_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubaccountRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_keyid_isValid && m_sub_account_edit_isValid && true;
}

} // namespace OpenAPI
