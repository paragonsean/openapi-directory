/*
 * API iSendPro
 * [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP 
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: support@isendpro.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubaccountRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:47.335301-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubaccountRequest {
  public static final String SERIALIZED_NAME_KEYID = "keyid";
  @SerializedName(SERIALIZED_NAME_KEYID)
  private String keyid;

  public static final String SERIALIZED_NAME_SUB_ACCOUNT_ADD_CREDIT = "subAccountAddCredit";
  @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_ADD_CREDIT)
  private String subAccountAddCredit;

  public static final String SERIALIZED_NAME_SUB_ACCOUNT_COUNTRY_CODE = "subAccountCountryCode";
  @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_COUNTRY_CODE)
  private String subAccountCountryCode;

  /**
   * action à réaliser soit setPrice pour définir un prix ou addCredit pour ajouter du credit ou setRestriction modifier la restriction stop /
   */
  @JsonAdapter(SubAccountEditEnum.Adapter.class)
  public enum SubAccountEditEnum {
    SET_PRICE("setPrice"),
    
    ADD_CREDIT("addCredit"),
    
    SET_RESTRICTION("setRestriction");

    private String value;

    SubAccountEditEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubAccountEditEnum fromValue(String value) {
      for (SubAccountEditEnum b : SubAccountEditEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubAccountEditEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubAccountEditEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubAccountEditEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubAccountEditEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubAccountEditEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUB_ACCOUNT_EDIT = "subAccountEdit";
  @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_EDIT)
  private SubAccountEditEnum subAccountEdit;

  public static final String SERIALIZED_NAME_SUB_ACCOUNT_KEY_ID = "subAccountKeyId";
  @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_KEY_ID)
  private String subAccountKeyId;

  public static final String SERIALIZED_NAME_SUB_ACCOUNT_PRICE = "subAccountPrice";
  @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_PRICE)
  private String subAccountPrice;

  /**
   * Gets or Sets subAccountRestrictionStop
   */
  @JsonAdapter(SubAccountRestrictionStopEnum.Adapter.class)
  public enum SubAccountRestrictionStopEnum {
    _0("0"),
    
    _1("1");

    private String value;

    SubAccountRestrictionStopEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubAccountRestrictionStopEnum fromValue(String value) {
      for (SubAccountRestrictionStopEnum b : SubAccountRestrictionStopEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubAccountRestrictionStopEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubAccountRestrictionStopEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubAccountRestrictionStopEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubAccountRestrictionStopEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubAccountRestrictionStopEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUB_ACCOUNT_RESTRICTION_STOP = "subAccountRestrictionStop";
  @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_RESTRICTION_STOP)
  private SubAccountRestrictionStopEnum subAccountRestrictionStop;

  /**
   * Gets or Sets subAccountRestrictionTime
   */
  @JsonAdapter(SubAccountRestrictionTimeEnum.Adapter.class)
  public enum SubAccountRestrictionTimeEnum {
    _0("0"),
    
    _1("1");

    private String value;

    SubAccountRestrictionTimeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubAccountRestrictionTimeEnum fromValue(String value) {
      for (SubAccountRestrictionTimeEnum b : SubAccountRestrictionTimeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubAccountRestrictionTimeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubAccountRestrictionTimeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubAccountRestrictionTimeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubAccountRestrictionTimeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubAccountRestrictionTimeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUB_ACCOUNT_RESTRICTION_TIME = "subAccountRestrictionTime";
  @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_RESTRICTION_TIME)
  private SubAccountRestrictionTimeEnum subAccountRestrictionTime;

  public SubaccountRequest() {
  }

  public SubaccountRequest keyid(String keyid) {
    this.keyid = keyid;
    return this;
  }

  /**
   * Clé API
   * @return keyid
   */
  @javax.annotation.Nonnull
  public String getKeyid() {
    return keyid;
  }

  public void setKeyid(String keyid) {
    this.keyid = keyid;
  }


  public SubaccountRequest subAccountAddCredit(String subAccountAddCredit) {
    this.subAccountAddCredit = subAccountAddCredit;
    return this;
  }

  /**
   * montant du crédit à ajouter
   * @return subAccountAddCredit
   */
  @javax.annotation.Nullable
  public String getSubAccountAddCredit() {
    return subAccountAddCredit;
  }

  public void setSubAccountAddCredit(String subAccountAddCredit) {
    this.subAccountAddCredit = subAccountAddCredit;
  }


  public SubaccountRequest subAccountCountryCode(String subAccountCountryCode) {
    this.subAccountCountryCode = subAccountCountryCode;
    return this;
  }

  /**
   * Get subAccountCountryCode
   * @return subAccountCountryCode
   */
  @javax.annotation.Nullable
  public String getSubAccountCountryCode() {
    return subAccountCountryCode;
  }

  public void setSubAccountCountryCode(String subAccountCountryCode) {
    this.subAccountCountryCode = subAccountCountryCode;
  }


  public SubaccountRequest subAccountEdit(SubAccountEditEnum subAccountEdit) {
    this.subAccountEdit = subAccountEdit;
    return this;
  }

  /**
   * action à réaliser soit setPrice pour définir un prix ou addCredit pour ajouter du credit ou setRestriction modifier la restriction stop /
   * @return subAccountEdit
   */
  @javax.annotation.Nonnull
  public SubAccountEditEnum getSubAccountEdit() {
    return subAccountEdit;
  }

  public void setSubAccountEdit(SubAccountEditEnum subAccountEdit) {
    this.subAccountEdit = subAccountEdit;
  }


  public SubaccountRequest subAccountKeyId(String subAccountKeyId) {
    this.subAccountKeyId = subAccountKeyId;
    return this;
  }

  /**
   * keyid du sous-compte
   * @return subAccountKeyId
   */
  @javax.annotation.Nullable
  public String getSubAccountKeyId() {
    return subAccountKeyId;
  }

  public void setSubAccountKeyId(String subAccountKeyId) {
    this.subAccountKeyId = subAccountKeyId;
  }


  public SubaccountRequest subAccountPrice(String subAccountPrice) {
    this.subAccountPrice = subAccountPrice;
    return this;
  }

  /**
   * Get subAccountPrice
   * @return subAccountPrice
   */
  @javax.annotation.Nullable
  public String getSubAccountPrice() {
    return subAccountPrice;
  }

  public void setSubAccountPrice(String subAccountPrice) {
    this.subAccountPrice = subAccountPrice;
  }


  public SubaccountRequest subAccountRestrictionStop(SubAccountRestrictionStopEnum subAccountRestrictionStop) {
    this.subAccountRestrictionStop = subAccountRestrictionStop;
    return this;
  }

  /**
   * Get subAccountRestrictionStop
   * @return subAccountRestrictionStop
   */
  @javax.annotation.Nullable
  public SubAccountRestrictionStopEnum getSubAccountRestrictionStop() {
    return subAccountRestrictionStop;
  }

  public void setSubAccountRestrictionStop(SubAccountRestrictionStopEnum subAccountRestrictionStop) {
    this.subAccountRestrictionStop = subAccountRestrictionStop;
  }


  public SubaccountRequest subAccountRestrictionTime(SubAccountRestrictionTimeEnum subAccountRestrictionTime) {
    this.subAccountRestrictionTime = subAccountRestrictionTime;
    return this;
  }

  /**
   * Get subAccountRestrictionTime
   * @return subAccountRestrictionTime
   */
  @javax.annotation.Nullable
  public SubAccountRestrictionTimeEnum getSubAccountRestrictionTime() {
    return subAccountRestrictionTime;
  }

  public void setSubAccountRestrictionTime(SubAccountRestrictionTimeEnum subAccountRestrictionTime) {
    this.subAccountRestrictionTime = subAccountRestrictionTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubaccountRequest subaccountRequest = (SubaccountRequest) o;
    return Objects.equals(this.keyid, subaccountRequest.keyid) &&
        Objects.equals(this.subAccountAddCredit, subaccountRequest.subAccountAddCredit) &&
        Objects.equals(this.subAccountCountryCode, subaccountRequest.subAccountCountryCode) &&
        Objects.equals(this.subAccountEdit, subaccountRequest.subAccountEdit) &&
        Objects.equals(this.subAccountKeyId, subaccountRequest.subAccountKeyId) &&
        Objects.equals(this.subAccountPrice, subaccountRequest.subAccountPrice) &&
        Objects.equals(this.subAccountRestrictionStop, subaccountRequest.subAccountRestrictionStop) &&
        Objects.equals(this.subAccountRestrictionTime, subaccountRequest.subAccountRestrictionTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyid, subAccountAddCredit, subAccountCountryCode, subAccountEdit, subAccountKeyId, subAccountPrice, subAccountRestrictionStop, subAccountRestrictionTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubaccountRequest {\n");
    sb.append("    keyid: ").append(toIndentedString(keyid)).append("\n");
    sb.append("    subAccountAddCredit: ").append(toIndentedString(subAccountAddCredit)).append("\n");
    sb.append("    subAccountCountryCode: ").append(toIndentedString(subAccountCountryCode)).append("\n");
    sb.append("    subAccountEdit: ").append(toIndentedString(subAccountEdit)).append("\n");
    sb.append("    subAccountKeyId: ").append(toIndentedString(subAccountKeyId)).append("\n");
    sb.append("    subAccountPrice: ").append(toIndentedString(subAccountPrice)).append("\n");
    sb.append("    subAccountRestrictionStop: ").append(toIndentedString(subAccountRestrictionStop)).append("\n");
    sb.append("    subAccountRestrictionTime: ").append(toIndentedString(subAccountRestrictionTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keyid");
    openapiFields.add("subAccountAddCredit");
    openapiFields.add("subAccountCountryCode");
    openapiFields.add("subAccountEdit");
    openapiFields.add("subAccountKeyId");
    openapiFields.add("subAccountPrice");
    openapiFields.add("subAccountRestrictionStop");
    openapiFields.add("subAccountRestrictionTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("keyid");
    openapiRequiredFields.add("subAccountEdit");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubaccountRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubaccountRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubaccountRequest is not found in the empty JSON string", SubaccountRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubaccountRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubaccountRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubaccountRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("keyid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyid").toString()));
      }
      if ((jsonObj.get("subAccountAddCredit") != null && !jsonObj.get("subAccountAddCredit").isJsonNull()) && !jsonObj.get("subAccountAddCredit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subAccountAddCredit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subAccountAddCredit").toString()));
      }
      if ((jsonObj.get("subAccountCountryCode") != null && !jsonObj.get("subAccountCountryCode").isJsonNull()) && !jsonObj.get("subAccountCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subAccountCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subAccountCountryCode").toString()));
      }
      if (!jsonObj.get("subAccountEdit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subAccountEdit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subAccountEdit").toString()));
      }
      // validate the required field `subAccountEdit`
      SubAccountEditEnum.validateJsonElement(jsonObj.get("subAccountEdit"));
      if ((jsonObj.get("subAccountKeyId") != null && !jsonObj.get("subAccountKeyId").isJsonNull()) && !jsonObj.get("subAccountKeyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subAccountKeyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subAccountKeyId").toString()));
      }
      if ((jsonObj.get("subAccountPrice") != null && !jsonObj.get("subAccountPrice").isJsonNull()) && !jsonObj.get("subAccountPrice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subAccountPrice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subAccountPrice").toString()));
      }
      if ((jsonObj.get("subAccountRestrictionStop") != null && !jsonObj.get("subAccountRestrictionStop").isJsonNull()) && !jsonObj.get("subAccountRestrictionStop").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subAccountRestrictionStop` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subAccountRestrictionStop").toString()));
      }
      // validate the optional field `subAccountRestrictionStop`
      if (jsonObj.get("subAccountRestrictionStop") != null && !jsonObj.get("subAccountRestrictionStop").isJsonNull()) {
        SubAccountRestrictionStopEnum.validateJsonElement(jsonObj.get("subAccountRestrictionStop"));
      }
      if ((jsonObj.get("subAccountRestrictionTime") != null && !jsonObj.get("subAccountRestrictionTime").isJsonNull()) && !jsonObj.get("subAccountRestrictionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subAccountRestrictionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subAccountRestrictionTime").toString()));
      }
      // validate the optional field `subAccountRestrictionTime`
      if (jsonObj.get("subAccountRestrictionTime") != null && !jsonObj.get("subAccountRestrictionTime").isJsonNull()) {
        SubAccountRestrictionTimeEnum.validateJsonElement(jsonObj.get("subAccountRestrictionTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubaccountRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubaccountRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubaccountRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubaccountRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SubaccountRequest>() {
           @Override
           public void write(JsonWriter out, SubaccountRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubaccountRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubaccountRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubaccountRequest
   * @throws IOException if the JSON string is invalid with respect to SubaccountRequest
   */
  public static SubaccountRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubaccountRequest.class);
  }

  /**
   * Convert an instance of SubaccountRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

