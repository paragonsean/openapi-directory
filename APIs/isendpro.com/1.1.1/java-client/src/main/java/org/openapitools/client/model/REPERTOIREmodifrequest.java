/*
 * API iSendPro
 * [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP 
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: support@isendpro.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * REPERTOIREmodifrequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:47.335301-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class REPERTOIREmodifrequest {
  public static final String SERIALIZED_NAME_CHAMP1 = "champ1";
  @SerializedName(SERIALIZED_NAME_CHAMP1)
  private List<String> champ1 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP10 = "champ10";
  @SerializedName(SERIALIZED_NAME_CHAMP10)
  private List<String> champ10 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP11 = "champ11";
  @SerializedName(SERIALIZED_NAME_CHAMP11)
  private List<String> champ11 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP12 = "champ12";
  @SerializedName(SERIALIZED_NAME_CHAMP12)
  private List<String> champ12 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP13 = "champ13";
  @SerializedName(SERIALIZED_NAME_CHAMP13)
  private List<String> champ13 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP14 = "champ14";
  @SerializedName(SERIALIZED_NAME_CHAMP14)
  private List<String> champ14 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP15 = "champ15";
  @SerializedName(SERIALIZED_NAME_CHAMP15)
  private List<String> champ15 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP16 = "champ16";
  @SerializedName(SERIALIZED_NAME_CHAMP16)
  private List<String> champ16 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP17 = "champ17";
  @SerializedName(SERIALIZED_NAME_CHAMP17)
  private List<String> champ17 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP18 = "champ18";
  @SerializedName(SERIALIZED_NAME_CHAMP18)
  private List<String> champ18 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP19 = "champ19";
  @SerializedName(SERIALIZED_NAME_CHAMP19)
  private List<String> champ19 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP2 = "champ2";
  @SerializedName(SERIALIZED_NAME_CHAMP2)
  private List<String> champ2 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP20 = "champ20";
  @SerializedName(SERIALIZED_NAME_CHAMP20)
  private List<String> champ20 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP21 = "champ21";
  @SerializedName(SERIALIZED_NAME_CHAMP21)
  private List<String> champ21 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP22 = "champ22";
  @SerializedName(SERIALIZED_NAME_CHAMP22)
  private List<String> champ22 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP23 = "champ23";
  @SerializedName(SERIALIZED_NAME_CHAMP23)
  private List<String> champ23 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP24 = "champ24";
  @SerializedName(SERIALIZED_NAME_CHAMP24)
  private List<String> champ24 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP25 = "champ25";
  @SerializedName(SERIALIZED_NAME_CHAMP25)
  private List<String> champ25 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP26 = "champ26";
  @SerializedName(SERIALIZED_NAME_CHAMP26)
  private List<String> champ26 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP27 = "champ27";
  @SerializedName(SERIALIZED_NAME_CHAMP27)
  private List<String> champ27 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP3 = "champ3";
  @SerializedName(SERIALIZED_NAME_CHAMP3)
  private List<String> champ3 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP4 = "champ4";
  @SerializedName(SERIALIZED_NAME_CHAMP4)
  private List<String> champ4 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP5 = "champ5";
  @SerializedName(SERIALIZED_NAME_CHAMP5)
  private List<String> champ5 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP6 = "champ6";
  @SerializedName(SERIALIZED_NAME_CHAMP6)
  private List<String> champ6 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP7 = "champ7";
  @SerializedName(SERIALIZED_NAME_CHAMP7)
  private List<String> champ7 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP8 = "champ8";
  @SerializedName(SERIALIZED_NAME_CHAMP8)
  private List<String> champ8 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMP9 = "champ9";
  @SerializedName(SERIALIZED_NAME_CHAMP9)
  private List<String> champ9 = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEYID = "keyid";
  @SerializedName(SERIALIZED_NAME_KEYID)
  private String keyid;

  public static final String SERIALIZED_NAME_NUM = "num";
  @SerializedName(SERIALIZED_NAME_NUM)
  private List<String> num = new ArrayList<>();

  /**
   * action à réaliser, \&quot;add\&quot; pour l&#39;ajout de numéros, \&quot;del\&quot; pour la suppression de numéros
   */
  @JsonAdapter(RepertoireEditEnum.Adapter.class)
  public enum RepertoireEditEnum {
    ADD("add"),
    
    DEL("del");

    private String value;

    RepertoireEditEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepertoireEditEnum fromValue(String value) {
      for (RepertoireEditEnum b : RepertoireEditEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepertoireEditEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepertoireEditEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepertoireEditEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepertoireEditEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RepertoireEditEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPERTOIRE_EDIT = "repertoireEdit";
  @SerializedName(SERIALIZED_NAME_REPERTOIRE_EDIT)
  private RepertoireEditEnum repertoireEdit;

  public static final String SERIALIZED_NAME_REPERTOIRE_ID = "repertoireId";
  @SerializedName(SERIALIZED_NAME_REPERTOIRE_ID)
  private String repertoireId;

  public REPERTOIREmodifrequest() {
  }

  public REPERTOIREmodifrequest champ1(List<String> champ1) {
    this.champ1 = champ1;
    return this;
  }

  public REPERTOIREmodifrequest addChamp1Item(String champ1Item) {
    if (this.champ1 == null) {
      this.champ1 = new ArrayList<>();
    }
    this.champ1.add(champ1Item);
    return this;
  }

  /**
   * Noms des contact
   * @return champ1
   */
  @javax.annotation.Nullable
  public List<String> getChamp1() {
    return champ1;
  }

  public void setChamp1(List<String> champ1) {
    this.champ1 = champ1;
  }


  public REPERTOIREmodifrequest champ10(List<String> champ10) {
    this.champ10 = champ10;
    return this;
  }

  public REPERTOIREmodifrequest addChamp10Item(String champ10Item) {
    if (this.champ10 == null) {
      this.champ10 = new ArrayList<>();
    }
    this.champ10.add(champ10Item);
    return this;
  }

  /**
   * Champs I des contacts
   * @return champ10
   */
  @javax.annotation.Nullable
  public List<String> getChamp10() {
    return champ10;
  }

  public void setChamp10(List<String> champ10) {
    this.champ10 = champ10;
  }


  public REPERTOIREmodifrequest champ11(List<String> champ11) {
    this.champ11 = champ11;
    return this;
  }

  public REPERTOIREmodifrequest addChamp11Item(String champ11Item) {
    if (this.champ11 == null) {
      this.champ11 = new ArrayList<>();
    }
    this.champ11.add(champ11Item);
    return this;
  }

  /**
   * Champs J des contacts
   * @return champ11
   */
  @javax.annotation.Nullable
  public List<String> getChamp11() {
    return champ11;
  }

  public void setChamp11(List<String> champ11) {
    this.champ11 = champ11;
  }


  public REPERTOIREmodifrequest champ12(List<String> champ12) {
    this.champ12 = champ12;
    return this;
  }

  public REPERTOIREmodifrequest addChamp12Item(String champ12Item) {
    if (this.champ12 == null) {
      this.champ12 = new ArrayList<>();
    }
    this.champ12.add(champ12Item);
    return this;
  }

  /**
   * Champs K des contacts
   * @return champ12
   */
  @javax.annotation.Nullable
  public List<String> getChamp12() {
    return champ12;
  }

  public void setChamp12(List<String> champ12) {
    this.champ12 = champ12;
  }


  public REPERTOIREmodifrequest champ13(List<String> champ13) {
    this.champ13 = champ13;
    return this;
  }

  public REPERTOIREmodifrequest addChamp13Item(String champ13Item) {
    if (this.champ13 == null) {
      this.champ13 = new ArrayList<>();
    }
    this.champ13.add(champ13Item);
    return this;
  }

  /**
   * Champs L des contacts
   * @return champ13
   */
  @javax.annotation.Nullable
  public List<String> getChamp13() {
    return champ13;
  }

  public void setChamp13(List<String> champ13) {
    this.champ13 = champ13;
  }


  public REPERTOIREmodifrequest champ14(List<String> champ14) {
    this.champ14 = champ14;
    return this;
  }

  public REPERTOIREmodifrequest addChamp14Item(String champ14Item) {
    if (this.champ14 == null) {
      this.champ14 = new ArrayList<>();
    }
    this.champ14.add(champ14Item);
    return this;
  }

  /**
   * Champs M des contacts
   * @return champ14
   */
  @javax.annotation.Nullable
  public List<String> getChamp14() {
    return champ14;
  }

  public void setChamp14(List<String> champ14) {
    this.champ14 = champ14;
  }


  public REPERTOIREmodifrequest champ15(List<String> champ15) {
    this.champ15 = champ15;
    return this;
  }

  public REPERTOIREmodifrequest addChamp15Item(String champ15Item) {
    if (this.champ15 == null) {
      this.champ15 = new ArrayList<>();
    }
    this.champ15.add(champ15Item);
    return this;
  }

  /**
   * Champs N des contacts
   * @return champ15
   */
  @javax.annotation.Nullable
  public List<String> getChamp15() {
    return champ15;
  }

  public void setChamp15(List<String> champ15) {
    this.champ15 = champ15;
  }


  public REPERTOIREmodifrequest champ16(List<String> champ16) {
    this.champ16 = champ16;
    return this;
  }

  public REPERTOIREmodifrequest addChamp16Item(String champ16Item) {
    if (this.champ16 == null) {
      this.champ16 = new ArrayList<>();
    }
    this.champ16.add(champ16Item);
    return this;
  }

  /**
   * Champs O des contacts
   * @return champ16
   */
  @javax.annotation.Nullable
  public List<String> getChamp16() {
    return champ16;
  }

  public void setChamp16(List<String> champ16) {
    this.champ16 = champ16;
  }


  public REPERTOIREmodifrequest champ17(List<String> champ17) {
    this.champ17 = champ17;
    return this;
  }

  public REPERTOIREmodifrequest addChamp17Item(String champ17Item) {
    if (this.champ17 == null) {
      this.champ17 = new ArrayList<>();
    }
    this.champ17.add(champ17Item);
    return this;
  }

  /**
   * Champs P des contacts
   * @return champ17
   */
  @javax.annotation.Nullable
  public List<String> getChamp17() {
    return champ17;
  }

  public void setChamp17(List<String> champ17) {
    this.champ17 = champ17;
  }


  public REPERTOIREmodifrequest champ18(List<String> champ18) {
    this.champ18 = champ18;
    return this;
  }

  public REPERTOIREmodifrequest addChamp18Item(String champ18Item) {
    if (this.champ18 == null) {
      this.champ18 = new ArrayList<>();
    }
    this.champ18.add(champ18Item);
    return this;
  }

  /**
   * Champs Q des contacts
   * @return champ18
   */
  @javax.annotation.Nullable
  public List<String> getChamp18() {
    return champ18;
  }

  public void setChamp18(List<String> champ18) {
    this.champ18 = champ18;
  }


  public REPERTOIREmodifrequest champ19(List<String> champ19) {
    this.champ19 = champ19;
    return this;
  }

  public REPERTOIREmodifrequest addChamp19Item(String champ19Item) {
    if (this.champ19 == null) {
      this.champ19 = new ArrayList<>();
    }
    this.champ19.add(champ19Item);
    return this;
  }

  /**
   * Champs R des contacts
   * @return champ19
   */
  @javax.annotation.Nullable
  public List<String> getChamp19() {
    return champ19;
  }

  public void setChamp19(List<String> champ19) {
    this.champ19 = champ19;
  }


  public REPERTOIREmodifrequest champ2(List<String> champ2) {
    this.champ2 = champ2;
    return this;
  }

  public REPERTOIREmodifrequest addChamp2Item(String champ2Item) {
    if (this.champ2 == null) {
      this.champ2 = new ArrayList<>();
    }
    this.champ2.add(champ2Item);
    return this;
  }

  /**
   * Champs A des contacts
   * @return champ2
   */
  @javax.annotation.Nullable
  public List<String> getChamp2() {
    return champ2;
  }

  public void setChamp2(List<String> champ2) {
    this.champ2 = champ2;
  }


  public REPERTOIREmodifrequest champ20(List<String> champ20) {
    this.champ20 = champ20;
    return this;
  }

  public REPERTOIREmodifrequest addChamp20Item(String champ20Item) {
    if (this.champ20 == null) {
      this.champ20 = new ArrayList<>();
    }
    this.champ20.add(champ20Item);
    return this;
  }

  /**
   * Champs S des contacts
   * @return champ20
   */
  @javax.annotation.Nullable
  public List<String> getChamp20() {
    return champ20;
  }

  public void setChamp20(List<String> champ20) {
    this.champ20 = champ20;
  }


  public REPERTOIREmodifrequest champ21(List<String> champ21) {
    this.champ21 = champ21;
    return this;
  }

  public REPERTOIREmodifrequest addChamp21Item(String champ21Item) {
    if (this.champ21 == null) {
      this.champ21 = new ArrayList<>();
    }
    this.champ21.add(champ21Item);
    return this;
  }

  /**
   * Champs T des contacts
   * @return champ21
   */
  @javax.annotation.Nullable
  public List<String> getChamp21() {
    return champ21;
  }

  public void setChamp21(List<String> champ21) {
    this.champ21 = champ21;
  }


  public REPERTOIREmodifrequest champ22(List<String> champ22) {
    this.champ22 = champ22;
    return this;
  }

  public REPERTOIREmodifrequest addChamp22Item(String champ22Item) {
    if (this.champ22 == null) {
      this.champ22 = new ArrayList<>();
    }
    this.champ22.add(champ22Item);
    return this;
  }

  /**
   * Champs U des contacts
   * @return champ22
   */
  @javax.annotation.Nullable
  public List<String> getChamp22() {
    return champ22;
  }

  public void setChamp22(List<String> champ22) {
    this.champ22 = champ22;
  }


  public REPERTOIREmodifrequest champ23(List<String> champ23) {
    this.champ23 = champ23;
    return this;
  }

  public REPERTOIREmodifrequest addChamp23Item(String champ23Item) {
    if (this.champ23 == null) {
      this.champ23 = new ArrayList<>();
    }
    this.champ23.add(champ23Item);
    return this;
  }

  /**
   * Champs V des contacts
   * @return champ23
   */
  @javax.annotation.Nullable
  public List<String> getChamp23() {
    return champ23;
  }

  public void setChamp23(List<String> champ23) {
    this.champ23 = champ23;
  }


  public REPERTOIREmodifrequest champ24(List<String> champ24) {
    this.champ24 = champ24;
    return this;
  }

  public REPERTOIREmodifrequest addChamp24Item(String champ24Item) {
    if (this.champ24 == null) {
      this.champ24 = new ArrayList<>();
    }
    this.champ24.add(champ24Item);
    return this;
  }

  /**
   * Champs W des contacts
   * @return champ24
   */
  @javax.annotation.Nullable
  public List<String> getChamp24() {
    return champ24;
  }

  public void setChamp24(List<String> champ24) {
    this.champ24 = champ24;
  }


  public REPERTOIREmodifrequest champ25(List<String> champ25) {
    this.champ25 = champ25;
    return this;
  }

  public REPERTOIREmodifrequest addChamp25Item(String champ25Item) {
    if (this.champ25 == null) {
      this.champ25 = new ArrayList<>();
    }
    this.champ25.add(champ25Item);
    return this;
  }

  /**
   * Champs X des contacts
   * @return champ25
   */
  @javax.annotation.Nullable
  public List<String> getChamp25() {
    return champ25;
  }

  public void setChamp25(List<String> champ25) {
    this.champ25 = champ25;
  }


  public REPERTOIREmodifrequest champ26(List<String> champ26) {
    this.champ26 = champ26;
    return this;
  }

  public REPERTOIREmodifrequest addChamp26Item(String champ26Item) {
    if (this.champ26 == null) {
      this.champ26 = new ArrayList<>();
    }
    this.champ26.add(champ26Item);
    return this;
  }

  /**
   * Champs Y des contacts
   * @return champ26
   */
  @javax.annotation.Nullable
  public List<String> getChamp26() {
    return champ26;
  }

  public void setChamp26(List<String> champ26) {
    this.champ26 = champ26;
  }


  public REPERTOIREmodifrequest champ27(List<String> champ27) {
    this.champ27 = champ27;
    return this;
  }

  public REPERTOIREmodifrequest addChamp27Item(String champ27Item) {
    if (this.champ27 == null) {
      this.champ27 = new ArrayList<>();
    }
    this.champ27.add(champ27Item);
    return this;
  }

  /**
   * Champs Z des contacts
   * @return champ27
   */
  @javax.annotation.Nullable
  public List<String> getChamp27() {
    return champ27;
  }

  public void setChamp27(List<String> champ27) {
    this.champ27 = champ27;
  }


  public REPERTOIREmodifrequest champ3(List<String> champ3) {
    this.champ3 = champ3;
    return this;
  }

  public REPERTOIREmodifrequest addChamp3Item(String champ3Item) {
    if (this.champ3 == null) {
      this.champ3 = new ArrayList<>();
    }
    this.champ3.add(champ3Item);
    return this;
  }

  /**
   * Champs B des contacts
   * @return champ3
   */
  @javax.annotation.Nullable
  public List<String> getChamp3() {
    return champ3;
  }

  public void setChamp3(List<String> champ3) {
    this.champ3 = champ3;
  }


  public REPERTOIREmodifrequest champ4(List<String> champ4) {
    this.champ4 = champ4;
    return this;
  }

  public REPERTOIREmodifrequest addChamp4Item(String champ4Item) {
    if (this.champ4 == null) {
      this.champ4 = new ArrayList<>();
    }
    this.champ4.add(champ4Item);
    return this;
  }

  /**
   * Champs C des contacts
   * @return champ4
   */
  @javax.annotation.Nullable
  public List<String> getChamp4() {
    return champ4;
  }

  public void setChamp4(List<String> champ4) {
    this.champ4 = champ4;
  }


  public REPERTOIREmodifrequest champ5(List<String> champ5) {
    this.champ5 = champ5;
    return this;
  }

  public REPERTOIREmodifrequest addChamp5Item(String champ5Item) {
    if (this.champ5 == null) {
      this.champ5 = new ArrayList<>();
    }
    this.champ5.add(champ5Item);
    return this;
  }

  /**
   * Champs D des contacts
   * @return champ5
   */
  @javax.annotation.Nullable
  public List<String> getChamp5() {
    return champ5;
  }

  public void setChamp5(List<String> champ5) {
    this.champ5 = champ5;
  }


  public REPERTOIREmodifrequest champ6(List<String> champ6) {
    this.champ6 = champ6;
    return this;
  }

  public REPERTOIREmodifrequest addChamp6Item(String champ6Item) {
    if (this.champ6 == null) {
      this.champ6 = new ArrayList<>();
    }
    this.champ6.add(champ6Item);
    return this;
  }

  /**
   * Champs E des contacts
   * @return champ6
   */
  @javax.annotation.Nullable
  public List<String> getChamp6() {
    return champ6;
  }

  public void setChamp6(List<String> champ6) {
    this.champ6 = champ6;
  }


  public REPERTOIREmodifrequest champ7(List<String> champ7) {
    this.champ7 = champ7;
    return this;
  }

  public REPERTOIREmodifrequest addChamp7Item(String champ7Item) {
    if (this.champ7 == null) {
      this.champ7 = new ArrayList<>();
    }
    this.champ7.add(champ7Item);
    return this;
  }

  /**
   * Champs F des contacts
   * @return champ7
   */
  @javax.annotation.Nullable
  public List<String> getChamp7() {
    return champ7;
  }

  public void setChamp7(List<String> champ7) {
    this.champ7 = champ7;
  }


  public REPERTOIREmodifrequest champ8(List<String> champ8) {
    this.champ8 = champ8;
    return this;
  }

  public REPERTOIREmodifrequest addChamp8Item(String champ8Item) {
    if (this.champ8 == null) {
      this.champ8 = new ArrayList<>();
    }
    this.champ8.add(champ8Item);
    return this;
  }

  /**
   * Champs G des contacts
   * @return champ8
   */
  @javax.annotation.Nullable
  public List<String> getChamp8() {
    return champ8;
  }

  public void setChamp8(List<String> champ8) {
    this.champ8 = champ8;
  }


  public REPERTOIREmodifrequest champ9(List<String> champ9) {
    this.champ9 = champ9;
    return this;
  }

  public REPERTOIREmodifrequest addChamp9Item(String champ9Item) {
    if (this.champ9 == null) {
      this.champ9 = new ArrayList<>();
    }
    this.champ9.add(champ9Item);
    return this;
  }

  /**
   * Champs H des contacts
   * @return champ9
   */
  @javax.annotation.Nullable
  public List<String> getChamp9() {
    return champ9;
  }

  public void setChamp9(List<String> champ9) {
    this.champ9 = champ9;
  }


  public REPERTOIREmodifrequest keyid(String keyid) {
    this.keyid = keyid;
    return this;
  }

  /**
   * Clé API
   * @return keyid
   */
  @javax.annotation.Nonnull
  public String getKeyid() {
    return keyid;
  }

  public void setKeyid(String keyid) {
    this.keyid = keyid;
  }


  public REPERTOIREmodifrequest num(List<String> num) {
    this.num = num;
    return this;
  }

  public REPERTOIREmodifrequest addNumItem(String numItem) {
    if (this.num == null) {
      this.num = new ArrayList<>();
    }
    this.num.add(numItem);
    return this;
  }

  /**
   * liste des numéros des téléphone à ajouter ou supprimer
   * @return num
   */
  @javax.annotation.Nonnull
  public List<String> getNum() {
    return num;
  }

  public void setNum(List<String> num) {
    this.num = num;
  }


  public REPERTOIREmodifrequest repertoireEdit(RepertoireEditEnum repertoireEdit) {
    this.repertoireEdit = repertoireEdit;
    return this;
  }

  /**
   * action à réaliser, \&quot;add\&quot; pour l&#39;ajout de numéros, \&quot;del\&quot; pour la suppression de numéros
   * @return repertoireEdit
   */
  @javax.annotation.Nonnull
  public RepertoireEditEnum getRepertoireEdit() {
    return repertoireEdit;
  }

  public void setRepertoireEdit(RepertoireEditEnum repertoireEdit) {
    this.repertoireEdit = repertoireEdit;
  }


  public REPERTOIREmodifrequest repertoireId(String repertoireId) {
    this.repertoireId = repertoireId;
    return this;
  }

  /**
   * repertoireId du répertoire cible
   * @return repertoireId
   */
  @javax.annotation.Nonnull
  public String getRepertoireId() {
    return repertoireId;
  }

  public void setRepertoireId(String repertoireId) {
    this.repertoireId = repertoireId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    REPERTOIREmodifrequest rePERTOIREmodifrequest = (REPERTOIREmodifrequest) o;
    return Objects.equals(this.champ1, rePERTOIREmodifrequest.champ1) &&
        Objects.equals(this.champ10, rePERTOIREmodifrequest.champ10) &&
        Objects.equals(this.champ11, rePERTOIREmodifrequest.champ11) &&
        Objects.equals(this.champ12, rePERTOIREmodifrequest.champ12) &&
        Objects.equals(this.champ13, rePERTOIREmodifrequest.champ13) &&
        Objects.equals(this.champ14, rePERTOIREmodifrequest.champ14) &&
        Objects.equals(this.champ15, rePERTOIREmodifrequest.champ15) &&
        Objects.equals(this.champ16, rePERTOIREmodifrequest.champ16) &&
        Objects.equals(this.champ17, rePERTOIREmodifrequest.champ17) &&
        Objects.equals(this.champ18, rePERTOIREmodifrequest.champ18) &&
        Objects.equals(this.champ19, rePERTOIREmodifrequest.champ19) &&
        Objects.equals(this.champ2, rePERTOIREmodifrequest.champ2) &&
        Objects.equals(this.champ20, rePERTOIREmodifrequest.champ20) &&
        Objects.equals(this.champ21, rePERTOIREmodifrequest.champ21) &&
        Objects.equals(this.champ22, rePERTOIREmodifrequest.champ22) &&
        Objects.equals(this.champ23, rePERTOIREmodifrequest.champ23) &&
        Objects.equals(this.champ24, rePERTOIREmodifrequest.champ24) &&
        Objects.equals(this.champ25, rePERTOIREmodifrequest.champ25) &&
        Objects.equals(this.champ26, rePERTOIREmodifrequest.champ26) &&
        Objects.equals(this.champ27, rePERTOIREmodifrequest.champ27) &&
        Objects.equals(this.champ3, rePERTOIREmodifrequest.champ3) &&
        Objects.equals(this.champ4, rePERTOIREmodifrequest.champ4) &&
        Objects.equals(this.champ5, rePERTOIREmodifrequest.champ5) &&
        Objects.equals(this.champ6, rePERTOIREmodifrequest.champ6) &&
        Objects.equals(this.champ7, rePERTOIREmodifrequest.champ7) &&
        Objects.equals(this.champ8, rePERTOIREmodifrequest.champ8) &&
        Objects.equals(this.champ9, rePERTOIREmodifrequest.champ9) &&
        Objects.equals(this.keyid, rePERTOIREmodifrequest.keyid) &&
        Objects.equals(this.num, rePERTOIREmodifrequest.num) &&
        Objects.equals(this.repertoireEdit, rePERTOIREmodifrequest.repertoireEdit) &&
        Objects.equals(this.repertoireId, rePERTOIREmodifrequest.repertoireId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(champ1, champ10, champ11, champ12, champ13, champ14, champ15, champ16, champ17, champ18, champ19, champ2, champ20, champ21, champ22, champ23, champ24, champ25, champ26, champ27, champ3, champ4, champ5, champ6, champ7, champ8, champ9, keyid, num, repertoireEdit, repertoireId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class REPERTOIREmodifrequest {\n");
    sb.append("    champ1: ").append(toIndentedString(champ1)).append("\n");
    sb.append("    champ10: ").append(toIndentedString(champ10)).append("\n");
    sb.append("    champ11: ").append(toIndentedString(champ11)).append("\n");
    sb.append("    champ12: ").append(toIndentedString(champ12)).append("\n");
    sb.append("    champ13: ").append(toIndentedString(champ13)).append("\n");
    sb.append("    champ14: ").append(toIndentedString(champ14)).append("\n");
    sb.append("    champ15: ").append(toIndentedString(champ15)).append("\n");
    sb.append("    champ16: ").append(toIndentedString(champ16)).append("\n");
    sb.append("    champ17: ").append(toIndentedString(champ17)).append("\n");
    sb.append("    champ18: ").append(toIndentedString(champ18)).append("\n");
    sb.append("    champ19: ").append(toIndentedString(champ19)).append("\n");
    sb.append("    champ2: ").append(toIndentedString(champ2)).append("\n");
    sb.append("    champ20: ").append(toIndentedString(champ20)).append("\n");
    sb.append("    champ21: ").append(toIndentedString(champ21)).append("\n");
    sb.append("    champ22: ").append(toIndentedString(champ22)).append("\n");
    sb.append("    champ23: ").append(toIndentedString(champ23)).append("\n");
    sb.append("    champ24: ").append(toIndentedString(champ24)).append("\n");
    sb.append("    champ25: ").append(toIndentedString(champ25)).append("\n");
    sb.append("    champ26: ").append(toIndentedString(champ26)).append("\n");
    sb.append("    champ27: ").append(toIndentedString(champ27)).append("\n");
    sb.append("    champ3: ").append(toIndentedString(champ3)).append("\n");
    sb.append("    champ4: ").append(toIndentedString(champ4)).append("\n");
    sb.append("    champ5: ").append(toIndentedString(champ5)).append("\n");
    sb.append("    champ6: ").append(toIndentedString(champ6)).append("\n");
    sb.append("    champ7: ").append(toIndentedString(champ7)).append("\n");
    sb.append("    champ8: ").append(toIndentedString(champ8)).append("\n");
    sb.append("    champ9: ").append(toIndentedString(champ9)).append("\n");
    sb.append("    keyid: ").append(toIndentedString(keyid)).append("\n");
    sb.append("    num: ").append(toIndentedString(num)).append("\n");
    sb.append("    repertoireEdit: ").append(toIndentedString(repertoireEdit)).append("\n");
    sb.append("    repertoireId: ").append(toIndentedString(repertoireId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("champ1");
    openapiFields.add("champ10");
    openapiFields.add("champ11");
    openapiFields.add("champ12");
    openapiFields.add("champ13");
    openapiFields.add("champ14");
    openapiFields.add("champ15");
    openapiFields.add("champ16");
    openapiFields.add("champ17");
    openapiFields.add("champ18");
    openapiFields.add("champ19");
    openapiFields.add("champ2");
    openapiFields.add("champ20");
    openapiFields.add("champ21");
    openapiFields.add("champ22");
    openapiFields.add("champ23");
    openapiFields.add("champ24");
    openapiFields.add("champ25");
    openapiFields.add("champ26");
    openapiFields.add("champ27");
    openapiFields.add("champ3");
    openapiFields.add("champ4");
    openapiFields.add("champ5");
    openapiFields.add("champ6");
    openapiFields.add("champ7");
    openapiFields.add("champ8");
    openapiFields.add("champ9");
    openapiFields.add("keyid");
    openapiFields.add("num");
    openapiFields.add("repertoireEdit");
    openapiFields.add("repertoireId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("keyid");
    openapiRequiredFields.add("num");
    openapiRequiredFields.add("repertoireEdit");
    openapiRequiredFields.add("repertoireId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to REPERTOIREmodifrequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!REPERTOIREmodifrequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in REPERTOIREmodifrequest is not found in the empty JSON string", REPERTOIREmodifrequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!REPERTOIREmodifrequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `REPERTOIREmodifrequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : REPERTOIREmodifrequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ1") != null && !jsonObj.get("champ1").isJsonNull() && !jsonObj.get("champ1").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ1` to be an array in the JSON string but got `%s`", jsonObj.get("champ1").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ10") != null && !jsonObj.get("champ10").isJsonNull() && !jsonObj.get("champ10").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ10` to be an array in the JSON string but got `%s`", jsonObj.get("champ10").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ11") != null && !jsonObj.get("champ11").isJsonNull() && !jsonObj.get("champ11").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ11` to be an array in the JSON string but got `%s`", jsonObj.get("champ11").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ12") != null && !jsonObj.get("champ12").isJsonNull() && !jsonObj.get("champ12").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ12` to be an array in the JSON string but got `%s`", jsonObj.get("champ12").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ13") != null && !jsonObj.get("champ13").isJsonNull() && !jsonObj.get("champ13").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ13` to be an array in the JSON string but got `%s`", jsonObj.get("champ13").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ14") != null && !jsonObj.get("champ14").isJsonNull() && !jsonObj.get("champ14").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ14` to be an array in the JSON string but got `%s`", jsonObj.get("champ14").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ15") != null && !jsonObj.get("champ15").isJsonNull() && !jsonObj.get("champ15").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ15` to be an array in the JSON string but got `%s`", jsonObj.get("champ15").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ16") != null && !jsonObj.get("champ16").isJsonNull() && !jsonObj.get("champ16").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ16` to be an array in the JSON string but got `%s`", jsonObj.get("champ16").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ17") != null && !jsonObj.get("champ17").isJsonNull() && !jsonObj.get("champ17").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ17` to be an array in the JSON string but got `%s`", jsonObj.get("champ17").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ18") != null && !jsonObj.get("champ18").isJsonNull() && !jsonObj.get("champ18").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ18` to be an array in the JSON string but got `%s`", jsonObj.get("champ18").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ19") != null && !jsonObj.get("champ19").isJsonNull() && !jsonObj.get("champ19").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ19` to be an array in the JSON string but got `%s`", jsonObj.get("champ19").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ2") != null && !jsonObj.get("champ2").isJsonNull() && !jsonObj.get("champ2").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ2` to be an array in the JSON string but got `%s`", jsonObj.get("champ2").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ20") != null && !jsonObj.get("champ20").isJsonNull() && !jsonObj.get("champ20").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ20` to be an array in the JSON string but got `%s`", jsonObj.get("champ20").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ21") != null && !jsonObj.get("champ21").isJsonNull() && !jsonObj.get("champ21").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ21` to be an array in the JSON string but got `%s`", jsonObj.get("champ21").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ22") != null && !jsonObj.get("champ22").isJsonNull() && !jsonObj.get("champ22").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ22` to be an array in the JSON string but got `%s`", jsonObj.get("champ22").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ23") != null && !jsonObj.get("champ23").isJsonNull() && !jsonObj.get("champ23").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ23` to be an array in the JSON string but got `%s`", jsonObj.get("champ23").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ24") != null && !jsonObj.get("champ24").isJsonNull() && !jsonObj.get("champ24").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ24` to be an array in the JSON string but got `%s`", jsonObj.get("champ24").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ25") != null && !jsonObj.get("champ25").isJsonNull() && !jsonObj.get("champ25").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ25` to be an array in the JSON string but got `%s`", jsonObj.get("champ25").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ26") != null && !jsonObj.get("champ26").isJsonNull() && !jsonObj.get("champ26").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ26` to be an array in the JSON string but got `%s`", jsonObj.get("champ26").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ27") != null && !jsonObj.get("champ27").isJsonNull() && !jsonObj.get("champ27").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ27` to be an array in the JSON string but got `%s`", jsonObj.get("champ27").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ3") != null && !jsonObj.get("champ3").isJsonNull() && !jsonObj.get("champ3").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ3` to be an array in the JSON string but got `%s`", jsonObj.get("champ3").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ4") != null && !jsonObj.get("champ4").isJsonNull() && !jsonObj.get("champ4").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ4` to be an array in the JSON string but got `%s`", jsonObj.get("champ4").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ5") != null && !jsonObj.get("champ5").isJsonNull() && !jsonObj.get("champ5").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ5` to be an array in the JSON string but got `%s`", jsonObj.get("champ5").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ6") != null && !jsonObj.get("champ6").isJsonNull() && !jsonObj.get("champ6").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ6` to be an array in the JSON string but got `%s`", jsonObj.get("champ6").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ7") != null && !jsonObj.get("champ7").isJsonNull() && !jsonObj.get("champ7").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ7` to be an array in the JSON string but got `%s`", jsonObj.get("champ7").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ8") != null && !jsonObj.get("champ8").isJsonNull() && !jsonObj.get("champ8").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ8` to be an array in the JSON string but got `%s`", jsonObj.get("champ8").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("champ9") != null && !jsonObj.get("champ9").isJsonNull() && !jsonObj.get("champ9").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `champ9` to be an array in the JSON string but got `%s`", jsonObj.get("champ9").toString()));
      }
      if (!jsonObj.get("keyid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyid").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("num") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("num").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `num` to be an array in the JSON string but got `%s`", jsonObj.get("num").toString()));
      }
      if (!jsonObj.get("repertoireEdit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repertoireEdit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repertoireEdit").toString()));
      }
      // validate the required field `repertoireEdit`
      RepertoireEditEnum.validateJsonElement(jsonObj.get("repertoireEdit"));
      if (!jsonObj.get("repertoireId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repertoireId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repertoireId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!REPERTOIREmodifrequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'REPERTOIREmodifrequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<REPERTOIREmodifrequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(REPERTOIREmodifrequest.class));

       return (TypeAdapter<T>) new TypeAdapter<REPERTOIREmodifrequest>() {
           @Override
           public void write(JsonWriter out, REPERTOIREmodifrequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public REPERTOIREmodifrequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of REPERTOIREmodifrequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of REPERTOIREmodifrequest
   * @throws IOException if the JSON string is invalid with respect to REPERTOIREmodifrequest
   */
  public static REPERTOIREmodifrequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, REPERTOIREmodifrequest.class);
  }

  /**
   * Convert an instance of REPERTOIREmodifrequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

