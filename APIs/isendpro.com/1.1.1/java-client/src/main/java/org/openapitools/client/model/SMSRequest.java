/*
 * API iSendPro
 * [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP 
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: support@isendpro.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SMSRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:47.335301-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SMSRequest {
  public static final String SERIALIZED_NAME_DATE_ENVOI = "date_envoi";
  @SerializedName(SERIALIZED_NAME_DATE_ENVOI)
  private String dateEnvoi;

  public static final String SERIALIZED_NAME_EMETTEUR = "emetteur";
  @SerializedName(SERIALIZED_NAME_EMETTEUR)
  private String emetteur;

  /**
   * Fuseau horaire de la date d&#39;envoi
   */
  @JsonAdapter(GmtZoneEnum.Adapter.class)
  public enum GmtZoneEnum {
    PACIFIC_MIDWAY("Pacific/Midway"),
    
    AMERICA_ADAK("America/Adak"),
    
    ETC_GMT_10("Etc/GMT+10"),
    
    PACIFIC_MARQUESAS("Pacific/Marquesas"),
    
    PACIFIC_GAMBIER("Pacific/Gambier"),
    
    AMERICA_ANCHORAGE("America/Anchorage"),
    
    AMERICA_ENSENADA("America/Ensenada"),
    
    ETC_GMT_8("Etc/GMT+8"),
    
    AMERICA_LOS_ANGELES("America/Los_Angeles"),
    
    AMERICA_DENVER("America/Denver"),
    
    AMERICA_CHIHUAHUA("America/Chihuahua"),
    
    AMERICA_DAWSON_CREEK("America/Dawson_Creek"),
    
    AMERICA_BELIZE("America/Belize"),
    
    AMERICA_CANCUN("America/Cancun"),
    
    CHILE_EASTER_ISLAND("Chile/EasterIsland"),
    
    AMERICA_CHICAGO("America/Chicago"),
    
    AMERICA_NEW_YORK("America/New_York"),
    
    AMERICA_HAVANA("America/Havana"),
    
    AMERICA_BOGOTA("America/Bogota"),
    
    AMERICA_CARACAS("America/Caracas"),
    
    AMERICA_SANTIAGO("America/Santiago"),
    
    AMERICA_LA_PAZ("America/La_Paz"),
    
    ATLANTIC_STANLEY("Atlantic/Stanley"),
    
    AMERICA_CAMPO_GRANDE("America/Campo_Grande"),
    
    AMERICA_GOOSE_BAY("America/Goose_Bay"),
    
    AMERICA_GLACE_BAY("America/Glace_Bay"),
    
    AMERICA_ST_JOHNS("America/St_Johns"),
    
    AMERICA_ARAGUAINA("America/Araguaina"),
    
    AMERICA_MONTEVIDEO("America/Montevideo"),
    
    AMERICA_MIQUELON("America/Miquelon"),
    
    AMERICA_GODTHAB("America/Godthab"),
    
    AMERICA_ARGENTINA_BUENOS_AIRES("America/Argentina/Buenos_Aires"),
    
    AMERICA_SAO_PAULO("America/Sao_Paulo"),
    
    AMERICA_NORONHA("America/Noronha"),
    
    ATLANTIC_CAPE_VERDE("Atlantic/Cape_Verde"),
    
    ATLANTIC_AZORES("Atlantic/Azores"),
    
    EUROPE_BELFAST("Europe/Belfast"),
    
    EUROPE_DUBLIN("Europe/Dublin"),
    
    EUROPE_LISBON("Europe/Lisbon"),
    
    EUROPE_LONDON("Europe/London"),
    
    AFRICA_ABIDJAN("Africa/Abidjan"),
    
    EUROPE_AMSTERDAM("Europe/Amsterdam"),
    
    EUROPE_BELGRADE("Europe/Belgrade"),
    
    EUROPE_BRUSSELS("Europe/Brussels"),
    
    AFRICA_ALGIERS("Africa/Algiers"),
    
    AFRICA_WINDHOEK("Africa/Windhoek"),
    
    ASIA_BEIRUT("Asia/Beirut"),
    
    AFRICA_CAIRO("Africa/Cairo"),
    
    ASIA_GAZA("Asia/Gaza"),
    
    AFRICA_BLANTYRE("Africa/Blantyre"),
    
    ASIA_JERUSALEM("Asia/Jerusalem"),
    
    EUROPE_MINSK("Europe/Minsk"),
    
    ASIA_DAMASCUS("Asia/Damascus"),
    
    EUROPE_MOSCOW("Europe/Moscow"),
    
    AFRICA_ADDIS_ABABA("Africa/Addis_Ababa"),
    
    ASIA_TEHRAN("Asia/Tehran"),
    
    ASIA_DUBAI("Asia/Dubai"),
    
    ASIA_YEREVAN("Asia/Yerevan"),
    
    ASIA_KABUL("Asia/Kabul"),
    
    ASIA_YEKATERINBURG("Asia/Yekaterinburg"),
    
    ASIA_TASHKENT("Asia/Tashkent"),
    
    ASIA_KOLKATA("Asia/Kolkata"),
    
    ASIA_KATMANDU("Asia/Katmandu"),
    
    ASIA_DHAKA("Asia/Dhaka"),
    
    ASIA_NOVOSIBIRSK("Asia/Novosibirsk"),
    
    ASIA_RANGOON("Asia/Rangoon"),
    
    ASIA_BANGKOK("Asia/Bangkok"),
    
    ASIA_KRASNOYARSK("Asia/Krasnoyarsk"),
    
    ASIA_HONG_KONG("Asia/Hong_Kong"),
    
    ASIA_IRKUTSK("Asia/Irkutsk"),
    
    AUSTRALIA_PERTH("Australia/Perth"),
    
    AUSTRALIA_EUCLA("Australia/Eucla"),
    
    ASIA_TOKYO("Asia/Tokyo"),
    
    ASIA_SEOUL("Asia/Seoul"),
    
    ASIA_YAKUTSK("Asia/Yakutsk"),
    
    AUSTRALIA_ADELAIDE("Australia/Adelaide"),
    
    AUSTRALIA_DARWIN("Australia/Darwin"),
    
    AUSTRALIA_BRISBANE("Australia/Brisbane"),
    
    AUSTRALIA_HOBART("Australia/Hobart"),
    
    ASIA_VLADIVOSTOK("Asia/Vladivostok"),
    
    AUSTRALIA_LORD_HOWE("Australia/Lord_Howe"),
    
    ETC_GMT_11("Etc/GMT-11"),
    
    ASIA_MAGADAN("Asia/Magadan"),
    
    PACIFIC_NORFOLK("Pacific/Norfolk"),
    
    ASIA_ANADYR("Asia/Anadyr"),
    
    PACIFIC_AUCKLAND("Pacific/Auckland"),
    
    ETC_GMT_12("Etc/GMT-12"),
    
    PACIFIC_CHATHAM("Pacific/Chatham"),
    
    PACIFIC_TONGATAPU("Pacific/Tongatapu"),
    
    PACIFIC_KIRITIMATI("Pacific/Kiritimati");

    private String value;

    GmtZoneEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GmtZoneEnum fromValue(String value) {
      for (GmtZoneEnum b : GmtZoneEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GmtZoneEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GmtZoneEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GmtZoneEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GmtZoneEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GmtZoneEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GMT_ZONE = "gmt_zone";
  @SerializedName(SERIALIZED_NAME_GMT_ZONE)
  private GmtZoneEnum gmtZone;

  public static final String SERIALIZED_NAME_KEYID = "keyid";
  @SerializedName(SERIALIZED_NAME_KEYID)
  private String keyid;

  public static final String SERIALIZED_NAME_NOSTOP = "nostop";
  @SerializedName(SERIALIZED_NAME_NOSTOP)
  private String nostop;

  public static final String SERIALIZED_NAME_NUM = "num";
  @SerializedName(SERIALIZED_NAME_NUM)
  private List<String> num = new ArrayList<>();

  /**
   * Gets or Sets numAzur
   */
  @JsonAdapter(NumAzurEnum.Adapter.class)
  public enum NumAzurEnum {
    _1("1");

    private String value;

    NumAzurEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NumAzurEnum fromValue(String value) {
      for (NumAzurEnum b : NumAzurEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NumAzurEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NumAzurEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NumAzurEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NumAzurEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NumAzurEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NUM_AZUR = "numAzur";
  @SerializedName(SERIALIZED_NAME_NUM_AZUR)
  private NumAzurEnum numAzur;

  public static final String SERIALIZED_NAME_REPERTOIRE_ID = "repertoireId";
  @SerializedName(SERIALIZED_NAME_REPERTOIRE_ID)
  private String repertoireId;

  public static final String SERIALIZED_NAME_SMS = "sms";
  @SerializedName(SERIALIZED_NAME_SMS)
  private List<String> sms = new ArrayList<>();

  public static final String SERIALIZED_NAME_SMSLONG = "smslong";
  @SerializedName(SERIALIZED_NAME_SMSLONG)
  private String smslong;

  public static final String SERIALIZED_NAME_TRACKER = "tracker";
  @SerializedName(SERIALIZED_NAME_TRACKER)
  private List<String> tracker = new ArrayList<>();

  public static final String SERIALIZED_NAME_UCS2 = "ucs2";
  @SerializedName(SERIALIZED_NAME_UCS2)
  private String ucs2;

  public SMSRequest() {
  }

  public SMSRequest dateEnvoi(String dateEnvoi) {
    this.dateEnvoi = dateEnvoi;
    return this;
  }

  /**
   * Paramètre optionnel, date d&#39;envoi au format YYYY-MM-DD hh:mm
   * @return dateEnvoi
   */
  @javax.annotation.Nullable
  public String getDateEnvoi() {
    return dateEnvoi;
  }

  public void setDateEnvoi(String dateEnvoi) {
    this.dateEnvoi = dateEnvoi;
  }


  public SMSRequest emetteur(String emetteur) {
    this.emetteur = emetteur;
    return this;
  }

  /**
   * L&#39;emetteur doit être une chaîne alphanumérique comprise entre 4 et 11 caractères. Les caractères acceptés sont les chiffres entre 0 et 9, les lettres entre A et Z et l’espace. Il ne peut pas comporter uniquement des chiffres. Pour la modification de l’émetteur et dans le cadre de campagnes commerciales, les opérateurs imposent contractuellement d’ajouter en fin de message le texte suivant : STOP XXXXX De ce fait, le message envoyé ne pourra excéder une longueur de 148 caractères au lieu des 160 caractères, le « STOP » étant rajouté automatiquement.
   * @return emetteur
   */
  @javax.annotation.Nullable
  public String getEmetteur() {
    return emetteur;
  }

  public void setEmetteur(String emetteur) {
    this.emetteur = emetteur;
  }


  public SMSRequest gmtZone(GmtZoneEnum gmtZone) {
    this.gmtZone = gmtZone;
    return this;
  }

  /**
   * Fuseau horaire de la date d&#39;envoi
   * @return gmtZone
   */
  @javax.annotation.Nullable
  public GmtZoneEnum getGmtZone() {
    return gmtZone;
  }

  public void setGmtZone(GmtZoneEnum gmtZone) {
    this.gmtZone = gmtZone;
  }


  public SMSRequest keyid(String keyid) {
    this.keyid = keyid;
    return this;
  }

  /**
   * Clé API
   * @return keyid
   */
  @javax.annotation.Nonnull
  public String getKeyid() {
    return keyid;
  }

  public void setKeyid(String keyid) {
    this.keyid = keyid;
  }


  public SMSRequest nostop(String nostop) {
    this.nostop = nostop;
    return this;
  }

  /**
   * Si le message n’est pas à but commercial, vous pouvez faire une demande pour retirer l’obligation du STOP. Une fois votre demande validée par nos services, vous pourrez supprimer la mention STOP SMS en ajoutant nostop &#x3D; \&quot;1\&quot;
   * @return nostop
   */
  @javax.annotation.Nullable
  public String getNostop() {
    return nostop;
  }

  public void setNostop(String nostop) {
    this.nostop = nostop;
  }


  public SMSRequest num(List<String> num) {
    this.num = num;
    return this;
  }

  public SMSRequest addNumItem(String numItem) {
    if (this.num == null) {
      this.num = new ArrayList<>();
    }
    this.num.add(numItem);
    return this;
  }

  /**
   * Get num
   * @return num
   */
  @javax.annotation.Nonnull
  public List<String> getNum() {
    return num;
  }

  public void setNum(List<String> num) {
    this.num = num;
  }


  public SMSRequest numAzur(NumAzurEnum numAzur) {
    this.numAzur = numAzur;
    return this;
  }

  /**
   * Get numAzur
   * @return numAzur
   */
  @javax.annotation.Nullable
  public NumAzurEnum getNumAzur() {
    return numAzur;
  }

  public void setNumAzur(NumAzurEnum numAzur) {
    this.numAzur = numAzur;
  }


  public SMSRequest repertoireId(String repertoireId) {
    this.repertoireId = repertoireId;
    return this;
  }

  /**
   * Id du repertoire
   * @return repertoireId
   */
  @javax.annotation.Nullable
  public String getRepertoireId() {
    return repertoireId;
  }

  public void setRepertoireId(String repertoireId) {
    this.repertoireId = repertoireId;
  }


  public SMSRequest sms(List<String> sms) {
    this.sms = sms;
    return this;
  }

  public SMSRequest addSmsItem(String smsItem) {
    if (this.sms == null) {
      this.sms = new ArrayList<>();
    }
    this.sms.add(smsItem);
    return this;
  }

  /**
   * Get sms
   * @return sms
   */
  @javax.annotation.Nonnull
  public List<String> getSms() {
    return sms;
  }

  public void setSms(List<String> sms) {
    this.sms = sms;
  }


  public SMSRequest smslong(String smslong) {
    this.smslong = smslong;
    return this;
  }

  /**
   * Le SMS long permet de dépasser la limite de 160 caractères en envoyant un message constitué de plusieurs SMS. Il est possible d’envoyer jusqu’à 6 SMS concaténés pour une longueur totale maximale de 918 caractères par message. Pour des raisons technique, la limite par SMS concaténé étant de 153 caractères. En cas de modification de l’émetteur, il faut considérer l’ajout automatique de 12 caractères du « STOP SMS ». Pour envoyer un smslong, il faut ajouter le paramètre smslong aux appels. La valeur de SMS doit être le nombre maximum de sms concaténé autorisé.   Pour ne pas avoir ce message d’erreur et obtenir un calcul dynamique du nombre de SMS alors il faut renseigner smslong &#x3D; \&quot;999\&quot; 
   * @return smslong
   */
  @javax.annotation.Nullable
  public String getSmslong() {
    return smslong;
  }

  public void setSmslong(String smslong) {
    this.smslong = smslong;
  }


  public SMSRequest tracker(List<String> tracker) {
    this.tracker = tracker;
    return this;
  }

  public SMSRequest addTrackerItem(String trackerItem) {
    if (this.tracker == null) {
      this.tracker = new ArrayList<>();
    }
    this.tracker.add(trackerItem);
    return this;
  }

  /**
   * Get tracker
   * @return tracker
   */
  @javax.annotation.Nullable
  public List<String> getTracker() {
    return tracker;
  }

  public void setTracker(List<String> tracker) {
    this.tracker = tracker;
  }


  public SMSRequest ucs2(String ucs2) {
    this.ucs2 = ucs2;
    return this;
  }

  /**
   * Il est également possible d’envoyer des SMS en alphabet non latin (russe, chinois, arabe, etc) sur les numéros hors France métropolitaine. Pour ce faire, la requête devrait être encodée au format UTF-8 et contenir l’argument ucs2 &#x3D; \&quot;1\&quot; Du fait de contraintes techniques, 1 SMS unique ne pourra pas dépasser 70 caractères (au lieu des 160 usuels) et dans le cas de SMS long, chaque sms ne pourra dépasser 67 caractères.
   * @return ucs2
   */
  @javax.annotation.Nullable
  public String getUcs2() {
    return ucs2;
  }

  public void setUcs2(String ucs2) {
    this.ucs2 = ucs2;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SMSRequest smSRequest = (SMSRequest) o;
    return Objects.equals(this.dateEnvoi, smSRequest.dateEnvoi) &&
        Objects.equals(this.emetteur, smSRequest.emetteur) &&
        Objects.equals(this.gmtZone, smSRequest.gmtZone) &&
        Objects.equals(this.keyid, smSRequest.keyid) &&
        Objects.equals(this.nostop, smSRequest.nostop) &&
        Objects.equals(this.num, smSRequest.num) &&
        Objects.equals(this.numAzur, smSRequest.numAzur) &&
        Objects.equals(this.repertoireId, smSRequest.repertoireId) &&
        Objects.equals(this.sms, smSRequest.sms) &&
        Objects.equals(this.smslong, smSRequest.smslong) &&
        Objects.equals(this.tracker, smSRequest.tracker) &&
        Objects.equals(this.ucs2, smSRequest.ucs2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateEnvoi, emetteur, gmtZone, keyid, nostop, num, numAzur, repertoireId, sms, smslong, tracker, ucs2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SMSRequest {\n");
    sb.append("    dateEnvoi: ").append(toIndentedString(dateEnvoi)).append("\n");
    sb.append("    emetteur: ").append(toIndentedString(emetteur)).append("\n");
    sb.append("    gmtZone: ").append(toIndentedString(gmtZone)).append("\n");
    sb.append("    keyid: ").append(toIndentedString(keyid)).append("\n");
    sb.append("    nostop: ").append(toIndentedString(nostop)).append("\n");
    sb.append("    num: ").append(toIndentedString(num)).append("\n");
    sb.append("    numAzur: ").append(toIndentedString(numAzur)).append("\n");
    sb.append("    repertoireId: ").append(toIndentedString(repertoireId)).append("\n");
    sb.append("    sms: ").append(toIndentedString(sms)).append("\n");
    sb.append("    smslong: ").append(toIndentedString(smslong)).append("\n");
    sb.append("    tracker: ").append(toIndentedString(tracker)).append("\n");
    sb.append("    ucs2: ").append(toIndentedString(ucs2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date_envoi");
    openapiFields.add("emetteur");
    openapiFields.add("gmt_zone");
    openapiFields.add("keyid");
    openapiFields.add("nostop");
    openapiFields.add("num");
    openapiFields.add("numAzur");
    openapiFields.add("repertoireId");
    openapiFields.add("sms");
    openapiFields.add("smslong");
    openapiFields.add("tracker");
    openapiFields.add("ucs2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("keyid");
    openapiRequiredFields.add("num");
    openapiRequiredFields.add("sms");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SMSRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SMSRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SMSRequest is not found in the empty JSON string", SMSRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SMSRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SMSRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SMSRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("date_envoi") != null && !jsonObj.get("date_envoi").isJsonNull()) && !jsonObj.get("date_envoi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_envoi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_envoi").toString()));
      }
      if ((jsonObj.get("emetteur") != null && !jsonObj.get("emetteur").isJsonNull()) && !jsonObj.get("emetteur").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emetteur` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emetteur").toString()));
      }
      if ((jsonObj.get("gmt_zone") != null && !jsonObj.get("gmt_zone").isJsonNull()) && !jsonObj.get("gmt_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gmt_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gmt_zone").toString()));
      }
      // validate the optional field `gmt_zone`
      if (jsonObj.get("gmt_zone") != null && !jsonObj.get("gmt_zone").isJsonNull()) {
        GmtZoneEnum.validateJsonElement(jsonObj.get("gmt_zone"));
      }
      if (!jsonObj.get("keyid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyid").toString()));
      }
      if ((jsonObj.get("nostop") != null && !jsonObj.get("nostop").isJsonNull()) && !jsonObj.get("nostop").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nostop` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nostop").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("num") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("num").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `num` to be an array in the JSON string but got `%s`", jsonObj.get("num").toString()));
      }
      if ((jsonObj.get("numAzur") != null && !jsonObj.get("numAzur").isJsonNull()) && !jsonObj.get("numAzur").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numAzur` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numAzur").toString()));
      }
      // validate the optional field `numAzur`
      if (jsonObj.get("numAzur") != null && !jsonObj.get("numAzur").isJsonNull()) {
        NumAzurEnum.validateJsonElement(jsonObj.get("numAzur"));
      }
      if ((jsonObj.get("repertoireId") != null && !jsonObj.get("repertoireId").isJsonNull()) && !jsonObj.get("repertoireId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repertoireId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repertoireId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("sms") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("sms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sms` to be an array in the JSON string but got `%s`", jsonObj.get("sms").toString()));
      }
      if ((jsonObj.get("smslong") != null && !jsonObj.get("smslong").isJsonNull()) && !jsonObj.get("smslong").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smslong` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smslong").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tracker") != null && !jsonObj.get("tracker").isJsonNull() && !jsonObj.get("tracker").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracker` to be an array in the JSON string but got `%s`", jsonObj.get("tracker").toString()));
      }
      if ((jsonObj.get("ucs2") != null && !jsonObj.get("ucs2").isJsonNull()) && !jsonObj.get("ucs2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ucs2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ucs2").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SMSRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SMSRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SMSRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SMSRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SMSRequest>() {
           @Override
           public void write(JsonWriter out, SMSRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SMSRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SMSRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SMSRequest
   * @throws IOException if the JSON string is invalid with respect to SMSRequest
   */
  public static SMSRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SMSRequest.class);
  }

  /**
   * Convert an instance of SMSRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

