# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubaccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, keyid: str=None, sub_account_add_credit: str=None, sub_account_country_code: str=None, sub_account_edit: str=None, sub_account_key_id: str=None, sub_account_price: str=None, sub_account_restriction_stop: str=None, sub_account_restriction_time: str=None):
        """SubaccountRequest - a model defined in OpenAPI

        :param keyid: The keyid of this SubaccountRequest.
        :param sub_account_add_credit: The sub_account_add_credit of this SubaccountRequest.
        :param sub_account_country_code: The sub_account_country_code of this SubaccountRequest.
        :param sub_account_edit: The sub_account_edit of this SubaccountRequest.
        :param sub_account_key_id: The sub_account_key_id of this SubaccountRequest.
        :param sub_account_price: The sub_account_price of this SubaccountRequest.
        :param sub_account_restriction_stop: The sub_account_restriction_stop of this SubaccountRequest.
        :param sub_account_restriction_time: The sub_account_restriction_time of this SubaccountRequest.
        """
        self.openapi_types = {
            'keyid': str,
            'sub_account_add_credit': str,
            'sub_account_country_code': str,
            'sub_account_edit': str,
            'sub_account_key_id': str,
            'sub_account_price': str,
            'sub_account_restriction_stop': str,
            'sub_account_restriction_time': str
        }

        self.attribute_map = {
            'keyid': 'keyid',
            'sub_account_add_credit': 'subAccountAddCredit',
            'sub_account_country_code': 'subAccountCountryCode',
            'sub_account_edit': 'subAccountEdit',
            'sub_account_key_id': 'subAccountKeyId',
            'sub_account_price': 'subAccountPrice',
            'sub_account_restriction_stop': 'subAccountRestrictionStop',
            'sub_account_restriction_time': 'subAccountRestrictionTime'
        }

        self._keyid = keyid
        self._sub_account_add_credit = sub_account_add_credit
        self._sub_account_country_code = sub_account_country_code
        self._sub_account_edit = sub_account_edit
        self._sub_account_key_id = sub_account_key_id
        self._sub_account_price = sub_account_price
        self._sub_account_restriction_stop = sub_account_restriction_stop
        self._sub_account_restriction_time = sub_account_restriction_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubaccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubaccountRequest of this SubaccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def keyid(self):
        """Gets the keyid of this SubaccountRequest.

        Clé API

        :return: The keyid of this SubaccountRequest.
        :rtype: str
        """
        return self._keyid

    @keyid.setter
    def keyid(self, keyid):
        """Sets the keyid of this SubaccountRequest.

        Clé API

        :param keyid: The keyid of this SubaccountRequest.
        :type keyid: str
        """
        if keyid is None:
            raise ValueError("Invalid value for `keyid`, must not be `None`")

        self._keyid = keyid

    @property
    def sub_account_add_credit(self):
        """Gets the sub_account_add_credit of this SubaccountRequest.

        montant du crédit à ajouter

        :return: The sub_account_add_credit of this SubaccountRequest.
        :rtype: str
        """
        return self._sub_account_add_credit

    @sub_account_add_credit.setter
    def sub_account_add_credit(self, sub_account_add_credit):
        """Sets the sub_account_add_credit of this SubaccountRequest.

        montant du crédit à ajouter

        :param sub_account_add_credit: The sub_account_add_credit of this SubaccountRequest.
        :type sub_account_add_credit: str
        """

        self._sub_account_add_credit = sub_account_add_credit

    @property
    def sub_account_country_code(self):
        """Gets the sub_account_country_code of this SubaccountRequest.


        :return: The sub_account_country_code of this SubaccountRequest.
        :rtype: str
        """
        return self._sub_account_country_code

    @sub_account_country_code.setter
    def sub_account_country_code(self, sub_account_country_code):
        """Sets the sub_account_country_code of this SubaccountRequest.


        :param sub_account_country_code: The sub_account_country_code of this SubaccountRequest.
        :type sub_account_country_code: str
        """

        self._sub_account_country_code = sub_account_country_code

    @property
    def sub_account_edit(self):
        """Gets the sub_account_edit of this SubaccountRequest.

        action à réaliser soit setPrice pour définir un prix ou addCredit pour ajouter du credit ou setRestriction modifier la restriction stop /

        :return: The sub_account_edit of this SubaccountRequest.
        :rtype: str
        """
        return self._sub_account_edit

    @sub_account_edit.setter
    def sub_account_edit(self, sub_account_edit):
        """Sets the sub_account_edit of this SubaccountRequest.

        action à réaliser soit setPrice pour définir un prix ou addCredit pour ajouter du credit ou setRestriction modifier la restriction stop /

        :param sub_account_edit: The sub_account_edit of this SubaccountRequest.
        :type sub_account_edit: str
        """
        allowed_values = ["setPrice", "addCredit", "setRestriction"]  # noqa: E501
        if sub_account_edit not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_account_edit` ({0}), must be one of {1}"
                .format(sub_account_edit, allowed_values)
            )

        self._sub_account_edit = sub_account_edit

    @property
    def sub_account_key_id(self):
        """Gets the sub_account_key_id of this SubaccountRequest.

        keyid du sous-compte

        :return: The sub_account_key_id of this SubaccountRequest.
        :rtype: str
        """
        return self._sub_account_key_id

    @sub_account_key_id.setter
    def sub_account_key_id(self, sub_account_key_id):
        """Sets the sub_account_key_id of this SubaccountRequest.

        keyid du sous-compte

        :param sub_account_key_id: The sub_account_key_id of this SubaccountRequest.
        :type sub_account_key_id: str
        """

        self._sub_account_key_id = sub_account_key_id

    @property
    def sub_account_price(self):
        """Gets the sub_account_price of this SubaccountRequest.


        :return: The sub_account_price of this SubaccountRequest.
        :rtype: str
        """
        return self._sub_account_price

    @sub_account_price.setter
    def sub_account_price(self, sub_account_price):
        """Sets the sub_account_price of this SubaccountRequest.


        :param sub_account_price: The sub_account_price of this SubaccountRequest.
        :type sub_account_price: str
        """

        self._sub_account_price = sub_account_price

    @property
    def sub_account_restriction_stop(self):
        """Gets the sub_account_restriction_stop of this SubaccountRequest.


        :return: The sub_account_restriction_stop of this SubaccountRequest.
        :rtype: str
        """
        return self._sub_account_restriction_stop

    @sub_account_restriction_stop.setter
    def sub_account_restriction_stop(self, sub_account_restriction_stop):
        """Sets the sub_account_restriction_stop of this SubaccountRequest.


        :param sub_account_restriction_stop: The sub_account_restriction_stop of this SubaccountRequest.
        :type sub_account_restriction_stop: str
        """
        allowed_values = ["0", "1"]  # noqa: E501
        if sub_account_restriction_stop not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_account_restriction_stop` ({0}), must be one of {1}"
                .format(sub_account_restriction_stop, allowed_values)
            )

        self._sub_account_restriction_stop = sub_account_restriction_stop

    @property
    def sub_account_restriction_time(self):
        """Gets the sub_account_restriction_time of this SubaccountRequest.


        :return: The sub_account_restriction_time of this SubaccountRequest.
        :rtype: str
        """
        return self._sub_account_restriction_time

    @sub_account_restriction_time.setter
    def sub_account_restriction_time(self, sub_account_restriction_time):
        """Sets the sub_account_restriction_time of this SubaccountRequest.


        :param sub_account_restriction_time: The sub_account_restriction_time of this SubaccountRequest.
        :type sub_account_restriction_time: str
        """
        allowed_values = ["0", "1"]  # noqa: E501
        if sub_account_restriction_time not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_account_restriction_time` ({0}), must be one of {1}"
                .format(sub_account_restriction_time, allowed_values)
            )

        self._sub_account_restriction_time = sub_account_restriction_time
