# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class REPERTOIREcreatereponseEtatEtat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, message: str=None, repertoire_id: str=None):
        """REPERTOIREcreatereponseEtatEtat - a model defined in OpenAPI

        :param code: The code of this REPERTOIREcreatereponseEtatEtat.
        :param message: The message of this REPERTOIREcreatereponseEtatEtat.
        :param repertoire_id: The repertoire_id of this REPERTOIREcreatereponseEtatEtat.
        """
        self.openapi_types = {
            'code': str,
            'message': str,
            'repertoire_id': str
        }

        self.attribute_map = {
            'code': 'code',
            'message': 'message',
            'repertoire_id': 'repertoireId'
        }

        self._code = code
        self._message = message
        self._repertoire_id = repertoire_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'REPERTOIREcreatereponseEtatEtat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The REPERTOIREcreatereponse_etat_etat of this REPERTOIREcreatereponseEtatEtat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this REPERTOIREcreatereponseEtatEtat.

        Code retour. Voir \"tableau des code retour\" dans l'annexe de la documentation

        :return: The code of this REPERTOIREcreatereponseEtatEtat.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this REPERTOIREcreatereponseEtatEtat.

        Code retour. Voir \"tableau des code retour\" dans l'annexe de la documentation

        :param code: The code of this REPERTOIREcreatereponseEtatEtat.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def message(self):
        """Gets the message of this REPERTOIREcreatereponseEtatEtat.

        Libellé associé au code retour.

        :return: The message of this REPERTOIREcreatereponseEtatEtat.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this REPERTOIREcreatereponseEtatEtat.

        Libellé associé au code retour.

        :param message: The message of this REPERTOIREcreatereponseEtatEtat.
        :type message: str
        """

        self._message = message

    @property
    def repertoire_id(self):
        """Gets the repertoire_id of this REPERTOIREcreatereponseEtatEtat.

        repertoireId du repertoire crée.

        :return: The repertoire_id of this REPERTOIREcreatereponseEtatEtat.
        :rtype: str
        """
        return self._repertoire_id

    @repertoire_id.setter
    def repertoire_id(self, repertoire_id):
        """Sets the repertoire_id of this REPERTOIREcreatereponseEtatEtat.

        repertoireId du repertoire crée.

        :param repertoire_id: The repertoire_id of this REPERTOIREcreatereponseEtatEtat.
        :type repertoire_id: str
        """

        self._repertoire_id = repertoire_id
