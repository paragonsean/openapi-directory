# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class REPERTOIREcreaterequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, keyid: str=None, repertoire_edit: str='create', repertoire_nom: str=None):
        """REPERTOIREcreaterequest - a model defined in OpenAPI

        :param keyid: The keyid of this REPERTOIREcreaterequest.
        :param repertoire_edit: The repertoire_edit of this REPERTOIREcreaterequest.
        :param repertoire_nom: The repertoire_nom of this REPERTOIREcreaterequest.
        """
        self.openapi_types = {
            'keyid': str,
            'repertoire_edit': str,
            'repertoire_nom': str
        }

        self.attribute_map = {
            'keyid': 'keyid',
            'repertoire_edit': 'repertoireEdit',
            'repertoire_nom': 'repertoireNom'
        }

        self._keyid = keyid
        self._repertoire_edit = repertoire_edit
        self._repertoire_nom = repertoire_nom

    @classmethod
    def from_dict(cls, dikt: dict) -> 'REPERTOIREcreaterequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The REPERTOIREcreaterequest of this REPERTOIREcreaterequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def keyid(self):
        """Gets the keyid of this REPERTOIREcreaterequest.

        Clé API

        :return: The keyid of this REPERTOIREcreaterequest.
        :rtype: str
        """
        return self._keyid

    @keyid.setter
    def keyid(self, keyid):
        """Sets the keyid of this REPERTOIREcreaterequest.

        Clé API

        :param keyid: The keyid of this REPERTOIREcreaterequest.
        :type keyid: str
        """
        if keyid is None:
            raise ValueError("Invalid value for `keyid`, must not be `None`")

        self._keyid = keyid

    @property
    def repertoire_edit(self):
        """Gets the repertoire_edit of this REPERTOIREcreaterequest.

        Action à réaliser doit valoir \"create\" ici.

        :return: The repertoire_edit of this REPERTOIREcreaterequest.
        :rtype: str
        """
        return self._repertoire_edit

    @repertoire_edit.setter
    def repertoire_edit(self, repertoire_edit):
        """Sets the repertoire_edit of this REPERTOIREcreaterequest.

        Action à réaliser doit valoir \"create\" ici.

        :param repertoire_edit: The repertoire_edit of this REPERTOIREcreaterequest.
        :type repertoire_edit: str
        """
        allowed_values = ["create"]  # noqa: E501
        if repertoire_edit not in allowed_values:
            raise ValueError(
                "Invalid value for `repertoire_edit` ({0}), must be one of {1}"
                .format(repertoire_edit, allowed_values)
            )

        self._repertoire_edit = repertoire_edit

    @property
    def repertoire_nom(self):
        """Gets the repertoire_nom of this REPERTOIREcreaterequest.

        Nom du répertoire (libellé) à créer

        :return: The repertoire_nom of this REPERTOIREcreaterequest.
        :rtype: str
        """
        return self._repertoire_nom

    @repertoire_nom.setter
    def repertoire_nom(self, repertoire_nom):
        """Sets the repertoire_nom of this REPERTOIREcreaterequest.

        Nom du répertoire (libellé) à créer

        :param repertoire_nom: The repertoire_nom of this REPERTOIREcreaterequest.
        :type repertoire_nom: str
        """
        if repertoire_nom is None:
            raise ValueError("Invalid value for `repertoire_nom`, must not be `None`")

        self._repertoire_nom = repertoire_nom
