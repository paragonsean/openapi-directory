# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LISTENOIREReponseEtatEtat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, liste_noire: str=None, tel: str=None):
        """LISTENOIREReponseEtatEtat - a model defined in OpenAPI

        :param liste_noire: The liste_noire of this LISTENOIREReponseEtatEtat.
        :param tel: The tel of this LISTENOIREReponseEtatEtat.
        """
        self.openapi_types = {
            'liste_noire': str,
            'tel': str
        }

        self.attribute_map = {
            'liste_noire': 'listeNoire',
            'tel': 'tel'
        }

        self._liste_noire = liste_noire
        self._tel = tel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LISTENOIREReponseEtatEtat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LISTENOIREReponse_etat_etat of this LISTENOIREReponseEtatEtat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def liste_noire(self):
        """Gets the liste_noire of this LISTENOIREReponseEtatEtat.

        Doit valoir \"OK\"

        :return: The liste_noire of this LISTENOIREReponseEtatEtat.
        :rtype: str
        """
        return self._liste_noire

    @liste_noire.setter
    def liste_noire(self, liste_noire):
        """Sets the liste_noire of this LISTENOIREReponseEtatEtat.

        Doit valoir \"OK\"

        :param liste_noire: The liste_noire of this LISTENOIREReponseEtatEtat.
        :type liste_noire: str
        """
        if liste_noire is None:
            raise ValueError("Invalid value for `liste_noire`, must not be `None`")

        self._liste_noire = liste_noire

    @property
    def tel(self):
        """Gets the tel of this LISTENOIREReponseEtatEtat.

        Numéro de téléphone à placer en liste noire. Format national Français ou international.

        :return: The tel of this LISTENOIREReponseEtatEtat.
        :rtype: str
        """
        return self._tel

    @tel.setter
    def tel(self, tel):
        """Sets the tel of this LISTENOIREReponseEtatEtat.

        Numéro de téléphone à placer en liste noire. Format national Français ou international.

        :param tel: The tel of this LISTENOIREReponseEtatEtat.
        :type tel: str
        """
        if tel is None:
            raise ValueError("Invalid value for `tel`, must not be `None`")

        self._tel = tel
