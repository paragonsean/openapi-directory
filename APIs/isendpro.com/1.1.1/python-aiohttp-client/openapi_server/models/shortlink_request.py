# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShortlinkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, keyid: str=None, shortlink: str=None):
        """ShortlinkRequest - a model defined in OpenAPI

        :param keyid: The keyid of this ShortlinkRequest.
        :param shortlink: The shortlink of this ShortlinkRequest.
        """
        self.openapi_types = {
            'keyid': str,
            'shortlink': str
        }

        self.attribute_map = {
            'keyid': 'keyid',
            'shortlink': 'shortlink'
        }

        self._keyid = keyid
        self._shortlink = shortlink

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShortlinkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShortlinkRequest of this ShortlinkRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def keyid(self):
        """Gets the keyid of this ShortlinkRequest.


        :return: The keyid of this ShortlinkRequest.
        :rtype: str
        """
        return self._keyid

    @keyid.setter
    def keyid(self, keyid):
        """Sets the keyid of this ShortlinkRequest.


        :param keyid: The keyid of this ShortlinkRequest.
        :type keyid: str
        """
        if keyid is None:
            raise ValueError("Invalid value for `keyid`, must not be `None`")

        self._keyid = keyid

    @property
    def shortlink(self):
        """Gets the shortlink of this ShortlinkRequest.


        :return: The shortlink of this ShortlinkRequest.
        :rtype: str
        """
        return self._shortlink

    @shortlink.setter
    def shortlink(self, shortlink):
        """Sets the shortlink of this ShortlinkRequest.


        :param shortlink: The shortlink of this ShortlinkRequest.
        :type shortlink: str
        """
        if shortlink is None:
            raise ValueError("Invalid value for `shortlink`, must not be `None`")

        self._shortlink = shortlink
