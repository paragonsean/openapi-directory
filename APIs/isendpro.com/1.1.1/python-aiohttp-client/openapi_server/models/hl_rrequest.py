# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HLRrequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, get_hlr: str='1', keyid: str=None, num: List[str]=None):
        """HLRrequest - a model defined in OpenAPI

        :param get_hlr: The get_hlr of this HLRrequest.
        :param keyid: The keyid of this HLRrequest.
        :param num: The num of this HLRrequest.
        """
        self.openapi_types = {
            'get_hlr': str,
            'keyid': str,
            'num': List[str]
        }

        self.attribute_map = {
            'get_hlr': 'getHLR',
            'keyid': 'keyid',
            'num': 'num'
        }

        self._get_hlr = get_hlr
        self._keyid = keyid
        self._num = num

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HLRrequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HLRrequest of this HLRrequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def get_hlr(self):
        """Gets the get_hlr of this HLRrequest.

        Doit valoir \"1\"

        :return: The get_hlr of this HLRrequest.
        :rtype: str
        """
        return self._get_hlr

    @get_hlr.setter
    def get_hlr(self, get_hlr):
        """Sets the get_hlr of this HLRrequest.

        Doit valoir \"1\"

        :param get_hlr: The get_hlr of this HLRrequest.
        :type get_hlr: str
        """
        allowed_values = ["1"]  # noqa: E501
        if get_hlr not in allowed_values:
            raise ValueError(
                "Invalid value for `get_hlr` ({0}), must be one of {1}"
                .format(get_hlr, allowed_values)
            )

        self._get_hlr = get_hlr

    @property
    def keyid(self):
        """Gets the keyid of this HLRrequest.

        Clé API

        :return: The keyid of this HLRrequest.
        :rtype: str
        """
        return self._keyid

    @keyid.setter
    def keyid(self, keyid):
        """Sets the keyid of this HLRrequest.

        Clé API

        :param keyid: The keyid of this HLRrequest.
        :type keyid: str
        """
        if keyid is None:
            raise ValueError("Invalid value for `keyid`, must not be `None`")

        self._keyid = keyid

    @property
    def num(self):
        """Gets the num of this HLRrequest.

        liste de numéros de téléphone

        :return: The num of this HLRrequest.
        :rtype: List[str]
        """
        return self._num

    @num.setter
    def num(self, num):
        """Sets the num of this HLRrequest.

        liste de numéros de téléphone

        :param num: The num of this HLRrequest.
        :type num: List[str]
        """
        if num is None:
            raise ValueError("Invalid value for `num`, must not be `None`")

        self._num = num
