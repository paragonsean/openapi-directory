/**
 * API iSendPro
 * [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP 
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: support@isendpro.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The REPERTOIREcreaterequest model module.
 * @module model/REPERTOIREcreaterequest
 * @version 1.1.1
 */
class REPERTOIREcreaterequest {
    /**
     * Constructs a new <code>REPERTOIREcreaterequest</code>.
     * @alias module:model/REPERTOIREcreaterequest
     * @param keyid {String} Clé API
     * @param repertoireEdit {module:model/REPERTOIREcreaterequest.RepertoireEditEnum} Action à réaliser doit valoir \"create\" ici.
     * @param repertoireNom {String} Nom du répertoire (libellé) à créer
     */
    constructor(keyid, repertoireEdit, repertoireNom) { 
        
        REPERTOIREcreaterequest.initialize(this, keyid, repertoireEdit, repertoireNom);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keyid, repertoireEdit, repertoireNom) { 
        obj['keyid'] = keyid;
        obj['repertoireEdit'] = repertoireEdit || 'create';
        obj['repertoireNom'] = repertoireNom;
    }

    /**
     * Constructs a <code>REPERTOIREcreaterequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/REPERTOIREcreaterequest} obj Optional instance to populate.
     * @return {module:model/REPERTOIREcreaterequest} The populated <code>REPERTOIREcreaterequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new REPERTOIREcreaterequest();

            if (data.hasOwnProperty('keyid')) {
                obj['keyid'] = ApiClient.convertToType(data['keyid'], 'String');
            }
            if (data.hasOwnProperty('repertoireEdit')) {
                obj['repertoireEdit'] = ApiClient.convertToType(data['repertoireEdit'], 'String');
            }
            if (data.hasOwnProperty('repertoireNom')) {
                obj['repertoireNom'] = ApiClient.convertToType(data['repertoireNom'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>REPERTOIREcreaterequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>REPERTOIREcreaterequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of REPERTOIREcreaterequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['keyid'] && !(typeof data['keyid'] === 'string' || data['keyid'] instanceof String)) {
            throw new Error("Expected the field `keyid` to be a primitive type in the JSON string but got " + data['keyid']);
        }
        // ensure the json data is a string
        if (data['repertoireEdit'] && !(typeof data['repertoireEdit'] === 'string' || data['repertoireEdit'] instanceof String)) {
            throw new Error("Expected the field `repertoireEdit` to be a primitive type in the JSON string but got " + data['repertoireEdit']);
        }
        // ensure the json data is a string
        if (data['repertoireNom'] && !(typeof data['repertoireNom'] === 'string' || data['repertoireNom'] instanceof String)) {
            throw new Error("Expected the field `repertoireNom` to be a primitive type in the JSON string but got " + data['repertoireNom']);
        }

        return true;
    }


}

REPERTOIREcreaterequest.RequiredProperties = ["keyid", "repertoireEdit", "repertoireNom"];

/**
 * Clé API
 * @member {String} keyid
 */
REPERTOIREcreaterequest.prototype['keyid'] = undefined;

/**
 * Action à réaliser doit valoir \"create\" ici.
 * @member {module:model/REPERTOIREcreaterequest.RepertoireEditEnum} repertoireEdit
 * @default 'create'
 */
REPERTOIREcreaterequest.prototype['repertoireEdit'] = 'create';

/**
 * Nom du répertoire (libellé) à créer
 * @member {String} repertoireNom
 */
REPERTOIREcreaterequest.prototype['repertoireNom'] = undefined;





/**
 * Allowed values for the <code>repertoireEdit</code> property.
 * @enum {String}
 * @readonly
 */
REPERTOIREcreaterequest['RepertoireEditEnum'] = {

    /**
     * value: "create"
     * @const
     */
    "create": "create"
};



export default REPERTOIREcreaterequest;

