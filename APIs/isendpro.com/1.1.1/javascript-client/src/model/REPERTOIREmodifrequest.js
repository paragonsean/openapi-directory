/**
 * API iSendPro
 * [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP 
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: support@isendpro.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The REPERTOIREmodifrequest model module.
 * @module model/REPERTOIREmodifrequest
 * @version 1.1.1
 */
class REPERTOIREmodifrequest {
    /**
     * Constructs a new <code>REPERTOIREmodifrequest</code>.
     * @alias module:model/REPERTOIREmodifrequest
     * @param keyid {String} Clé API
     * @param num {Array.<String>} liste des numéros des téléphone à ajouter ou supprimer
     * @param repertoireEdit {module:model/REPERTOIREmodifrequest.RepertoireEditEnum} action à réaliser, \"add\" pour l'ajout de numéros, \"del\" pour la suppression de numéros
     * @param repertoireId {String} repertoireId du répertoire cible
     */
    constructor(keyid, num, repertoireEdit, repertoireId) { 
        
        REPERTOIREmodifrequest.initialize(this, keyid, num, repertoireEdit, repertoireId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keyid, num, repertoireEdit, repertoireId) { 
        obj['keyid'] = keyid;
        obj['num'] = num;
        obj['repertoireEdit'] = repertoireEdit;
        obj['repertoireId'] = repertoireId;
    }

    /**
     * Constructs a <code>REPERTOIREmodifrequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/REPERTOIREmodifrequest} obj Optional instance to populate.
     * @return {module:model/REPERTOIREmodifrequest} The populated <code>REPERTOIREmodifrequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new REPERTOIREmodifrequest();

            if (data.hasOwnProperty('champ1')) {
                obj['champ1'] = ApiClient.convertToType(data['champ1'], ['String']);
            }
            if (data.hasOwnProperty('champ10')) {
                obj['champ10'] = ApiClient.convertToType(data['champ10'], ['String']);
            }
            if (data.hasOwnProperty('champ11')) {
                obj['champ11'] = ApiClient.convertToType(data['champ11'], ['String']);
            }
            if (data.hasOwnProperty('champ12')) {
                obj['champ12'] = ApiClient.convertToType(data['champ12'], ['String']);
            }
            if (data.hasOwnProperty('champ13')) {
                obj['champ13'] = ApiClient.convertToType(data['champ13'], ['String']);
            }
            if (data.hasOwnProperty('champ14')) {
                obj['champ14'] = ApiClient.convertToType(data['champ14'], ['String']);
            }
            if (data.hasOwnProperty('champ15')) {
                obj['champ15'] = ApiClient.convertToType(data['champ15'], ['String']);
            }
            if (data.hasOwnProperty('champ16')) {
                obj['champ16'] = ApiClient.convertToType(data['champ16'], ['String']);
            }
            if (data.hasOwnProperty('champ17')) {
                obj['champ17'] = ApiClient.convertToType(data['champ17'], ['String']);
            }
            if (data.hasOwnProperty('champ18')) {
                obj['champ18'] = ApiClient.convertToType(data['champ18'], ['String']);
            }
            if (data.hasOwnProperty('champ19')) {
                obj['champ19'] = ApiClient.convertToType(data['champ19'], ['String']);
            }
            if (data.hasOwnProperty('champ2')) {
                obj['champ2'] = ApiClient.convertToType(data['champ2'], ['String']);
            }
            if (data.hasOwnProperty('champ20')) {
                obj['champ20'] = ApiClient.convertToType(data['champ20'], ['String']);
            }
            if (data.hasOwnProperty('champ21')) {
                obj['champ21'] = ApiClient.convertToType(data['champ21'], ['String']);
            }
            if (data.hasOwnProperty('champ22')) {
                obj['champ22'] = ApiClient.convertToType(data['champ22'], ['String']);
            }
            if (data.hasOwnProperty('champ23')) {
                obj['champ23'] = ApiClient.convertToType(data['champ23'], ['String']);
            }
            if (data.hasOwnProperty('champ24')) {
                obj['champ24'] = ApiClient.convertToType(data['champ24'], ['String']);
            }
            if (data.hasOwnProperty('champ25')) {
                obj['champ25'] = ApiClient.convertToType(data['champ25'], ['String']);
            }
            if (data.hasOwnProperty('champ26')) {
                obj['champ26'] = ApiClient.convertToType(data['champ26'], ['String']);
            }
            if (data.hasOwnProperty('champ27')) {
                obj['champ27'] = ApiClient.convertToType(data['champ27'], ['String']);
            }
            if (data.hasOwnProperty('champ3')) {
                obj['champ3'] = ApiClient.convertToType(data['champ3'], ['String']);
            }
            if (data.hasOwnProperty('champ4')) {
                obj['champ4'] = ApiClient.convertToType(data['champ4'], ['String']);
            }
            if (data.hasOwnProperty('champ5')) {
                obj['champ5'] = ApiClient.convertToType(data['champ5'], ['String']);
            }
            if (data.hasOwnProperty('champ6')) {
                obj['champ6'] = ApiClient.convertToType(data['champ6'], ['String']);
            }
            if (data.hasOwnProperty('champ7')) {
                obj['champ7'] = ApiClient.convertToType(data['champ7'], ['String']);
            }
            if (data.hasOwnProperty('champ8')) {
                obj['champ8'] = ApiClient.convertToType(data['champ8'], ['String']);
            }
            if (data.hasOwnProperty('champ9')) {
                obj['champ9'] = ApiClient.convertToType(data['champ9'], ['String']);
            }
            if (data.hasOwnProperty('keyid')) {
                obj['keyid'] = ApiClient.convertToType(data['keyid'], 'String');
            }
            if (data.hasOwnProperty('num')) {
                obj['num'] = ApiClient.convertToType(data['num'], ['String']);
            }
            if (data.hasOwnProperty('repertoireEdit')) {
                obj['repertoireEdit'] = ApiClient.convertToType(data['repertoireEdit'], 'String');
            }
            if (data.hasOwnProperty('repertoireId')) {
                obj['repertoireId'] = ApiClient.convertToType(data['repertoireId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>REPERTOIREmodifrequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>REPERTOIREmodifrequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of REPERTOIREmodifrequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ1'])) {
            throw new Error("Expected the field `champ1` to be an array in the JSON data but got " + data['champ1']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ10'])) {
            throw new Error("Expected the field `champ10` to be an array in the JSON data but got " + data['champ10']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ11'])) {
            throw new Error("Expected the field `champ11` to be an array in the JSON data but got " + data['champ11']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ12'])) {
            throw new Error("Expected the field `champ12` to be an array in the JSON data but got " + data['champ12']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ13'])) {
            throw new Error("Expected the field `champ13` to be an array in the JSON data but got " + data['champ13']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ14'])) {
            throw new Error("Expected the field `champ14` to be an array in the JSON data but got " + data['champ14']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ15'])) {
            throw new Error("Expected the field `champ15` to be an array in the JSON data but got " + data['champ15']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ16'])) {
            throw new Error("Expected the field `champ16` to be an array in the JSON data but got " + data['champ16']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ17'])) {
            throw new Error("Expected the field `champ17` to be an array in the JSON data but got " + data['champ17']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ18'])) {
            throw new Error("Expected the field `champ18` to be an array in the JSON data but got " + data['champ18']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ19'])) {
            throw new Error("Expected the field `champ19` to be an array in the JSON data but got " + data['champ19']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ2'])) {
            throw new Error("Expected the field `champ2` to be an array in the JSON data but got " + data['champ2']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ20'])) {
            throw new Error("Expected the field `champ20` to be an array in the JSON data but got " + data['champ20']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ21'])) {
            throw new Error("Expected the field `champ21` to be an array in the JSON data but got " + data['champ21']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ22'])) {
            throw new Error("Expected the field `champ22` to be an array in the JSON data but got " + data['champ22']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ23'])) {
            throw new Error("Expected the field `champ23` to be an array in the JSON data but got " + data['champ23']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ24'])) {
            throw new Error("Expected the field `champ24` to be an array in the JSON data but got " + data['champ24']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ25'])) {
            throw new Error("Expected the field `champ25` to be an array in the JSON data but got " + data['champ25']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ26'])) {
            throw new Error("Expected the field `champ26` to be an array in the JSON data but got " + data['champ26']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ27'])) {
            throw new Error("Expected the field `champ27` to be an array in the JSON data but got " + data['champ27']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ3'])) {
            throw new Error("Expected the field `champ3` to be an array in the JSON data but got " + data['champ3']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ4'])) {
            throw new Error("Expected the field `champ4` to be an array in the JSON data but got " + data['champ4']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ5'])) {
            throw new Error("Expected the field `champ5` to be an array in the JSON data but got " + data['champ5']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ6'])) {
            throw new Error("Expected the field `champ6` to be an array in the JSON data but got " + data['champ6']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ7'])) {
            throw new Error("Expected the field `champ7` to be an array in the JSON data but got " + data['champ7']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ8'])) {
            throw new Error("Expected the field `champ8` to be an array in the JSON data but got " + data['champ8']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['champ9'])) {
            throw new Error("Expected the field `champ9` to be an array in the JSON data but got " + data['champ9']);
        }
        // ensure the json data is a string
        if (data['keyid'] && !(typeof data['keyid'] === 'string' || data['keyid'] instanceof String)) {
            throw new Error("Expected the field `keyid` to be a primitive type in the JSON string but got " + data['keyid']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['num'])) {
            throw new Error("Expected the field `num` to be an array in the JSON data but got " + data['num']);
        }
        // ensure the json data is a string
        if (data['repertoireEdit'] && !(typeof data['repertoireEdit'] === 'string' || data['repertoireEdit'] instanceof String)) {
            throw new Error("Expected the field `repertoireEdit` to be a primitive type in the JSON string but got " + data['repertoireEdit']);
        }
        // ensure the json data is a string
        if (data['repertoireId'] && !(typeof data['repertoireId'] === 'string' || data['repertoireId'] instanceof String)) {
            throw new Error("Expected the field `repertoireId` to be a primitive type in the JSON string but got " + data['repertoireId']);
        }

        return true;
    }


}

REPERTOIREmodifrequest.RequiredProperties = ["keyid", "num", "repertoireEdit", "repertoireId"];

/**
 * Noms des contact
 * @member {Array.<String>} champ1
 */
REPERTOIREmodifrequest.prototype['champ1'] = undefined;

/**
 * Champs I des contacts
 * @member {Array.<String>} champ10
 */
REPERTOIREmodifrequest.prototype['champ10'] = undefined;

/**
 * Champs J des contacts
 * @member {Array.<String>} champ11
 */
REPERTOIREmodifrequest.prototype['champ11'] = undefined;

/**
 * Champs K des contacts
 * @member {Array.<String>} champ12
 */
REPERTOIREmodifrequest.prototype['champ12'] = undefined;

/**
 * Champs L des contacts
 * @member {Array.<String>} champ13
 */
REPERTOIREmodifrequest.prototype['champ13'] = undefined;

/**
 * Champs M des contacts
 * @member {Array.<String>} champ14
 */
REPERTOIREmodifrequest.prototype['champ14'] = undefined;

/**
 * Champs N des contacts
 * @member {Array.<String>} champ15
 */
REPERTOIREmodifrequest.prototype['champ15'] = undefined;

/**
 * Champs O des contacts
 * @member {Array.<String>} champ16
 */
REPERTOIREmodifrequest.prototype['champ16'] = undefined;

/**
 * Champs P des contacts
 * @member {Array.<String>} champ17
 */
REPERTOIREmodifrequest.prototype['champ17'] = undefined;

/**
 * Champs Q des contacts
 * @member {Array.<String>} champ18
 */
REPERTOIREmodifrequest.prototype['champ18'] = undefined;

/**
 * Champs R des contacts
 * @member {Array.<String>} champ19
 */
REPERTOIREmodifrequest.prototype['champ19'] = undefined;

/**
 * Champs A des contacts
 * @member {Array.<String>} champ2
 */
REPERTOIREmodifrequest.prototype['champ2'] = undefined;

/**
 * Champs S des contacts
 * @member {Array.<String>} champ20
 */
REPERTOIREmodifrequest.prototype['champ20'] = undefined;

/**
 * Champs T des contacts
 * @member {Array.<String>} champ21
 */
REPERTOIREmodifrequest.prototype['champ21'] = undefined;

/**
 * Champs U des contacts
 * @member {Array.<String>} champ22
 */
REPERTOIREmodifrequest.prototype['champ22'] = undefined;

/**
 * Champs V des contacts
 * @member {Array.<String>} champ23
 */
REPERTOIREmodifrequest.prototype['champ23'] = undefined;

/**
 * Champs W des contacts
 * @member {Array.<String>} champ24
 */
REPERTOIREmodifrequest.prototype['champ24'] = undefined;

/**
 * Champs X des contacts
 * @member {Array.<String>} champ25
 */
REPERTOIREmodifrequest.prototype['champ25'] = undefined;

/**
 * Champs Y des contacts
 * @member {Array.<String>} champ26
 */
REPERTOIREmodifrequest.prototype['champ26'] = undefined;

/**
 * Champs Z des contacts
 * @member {Array.<String>} champ27
 */
REPERTOIREmodifrequest.prototype['champ27'] = undefined;

/**
 * Champs B des contacts
 * @member {Array.<String>} champ3
 */
REPERTOIREmodifrequest.prototype['champ3'] = undefined;

/**
 * Champs C des contacts
 * @member {Array.<String>} champ4
 */
REPERTOIREmodifrequest.prototype['champ4'] = undefined;

/**
 * Champs D des contacts
 * @member {Array.<String>} champ5
 */
REPERTOIREmodifrequest.prototype['champ5'] = undefined;

/**
 * Champs E des contacts
 * @member {Array.<String>} champ6
 */
REPERTOIREmodifrequest.prototype['champ6'] = undefined;

/**
 * Champs F des contacts
 * @member {Array.<String>} champ7
 */
REPERTOIREmodifrequest.prototype['champ7'] = undefined;

/**
 * Champs G des contacts
 * @member {Array.<String>} champ8
 */
REPERTOIREmodifrequest.prototype['champ8'] = undefined;

/**
 * Champs H des contacts
 * @member {Array.<String>} champ9
 */
REPERTOIREmodifrequest.prototype['champ9'] = undefined;

/**
 * Clé API
 * @member {String} keyid
 */
REPERTOIREmodifrequest.prototype['keyid'] = undefined;

/**
 * liste des numéros des téléphone à ajouter ou supprimer
 * @member {Array.<String>} num
 */
REPERTOIREmodifrequest.prototype['num'] = undefined;

/**
 * action à réaliser, \"add\" pour l'ajout de numéros, \"del\" pour la suppression de numéros
 * @member {module:model/REPERTOIREmodifrequest.RepertoireEditEnum} repertoireEdit
 */
REPERTOIREmodifrequest.prototype['repertoireEdit'] = undefined;

/**
 * repertoireId du répertoire cible
 * @member {String} repertoireId
 */
REPERTOIREmodifrequest.prototype['repertoireId'] = undefined;





/**
 * Allowed values for the <code>repertoireEdit</code> property.
 * @enum {String}
 * @readonly
 */
REPERTOIREmodifrequest['RepertoireEditEnum'] = {

    /**
     * value: "add"
     * @const
     */
    "add": "add",

    /**
     * value: "del"
     * @const
     */
    "del": "del"
};



export default REPERTOIREmodifrequest;

