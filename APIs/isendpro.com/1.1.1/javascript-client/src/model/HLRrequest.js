/**
 * API iSendPro
 * [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP 
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: support@isendpro.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HLRrequest model module.
 * @module model/HLRrequest
 * @version 1.1.1
 */
class HLRrequest {
    /**
     * Constructs a new <code>HLRrequest</code>.
     * @alias module:model/HLRrequest
     * @param getHLR {module:model/HLRrequest.GetHLREnum} Doit valoir \"1\"
     * @param keyid {String} Clé API
     * @param num {Array.<String>} liste de numéros de téléphone
     */
    constructor(getHLR, keyid, num) { 
        
        HLRrequest.initialize(this, getHLR, keyid, num);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, getHLR, keyid, num) { 
        obj['getHLR'] = getHLR || '1';
        obj['keyid'] = keyid;
        obj['num'] = num;
    }

    /**
     * Constructs a <code>HLRrequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HLRrequest} obj Optional instance to populate.
     * @return {module:model/HLRrequest} The populated <code>HLRrequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HLRrequest();

            if (data.hasOwnProperty('getHLR')) {
                obj['getHLR'] = ApiClient.convertToType(data['getHLR'], 'String');
            }
            if (data.hasOwnProperty('keyid')) {
                obj['keyid'] = ApiClient.convertToType(data['keyid'], 'String');
            }
            if (data.hasOwnProperty('num')) {
                obj['num'] = ApiClient.convertToType(data['num'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HLRrequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HLRrequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HLRrequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['getHLR'] && !(typeof data['getHLR'] === 'string' || data['getHLR'] instanceof String)) {
            throw new Error("Expected the field `getHLR` to be a primitive type in the JSON string but got " + data['getHLR']);
        }
        // ensure the json data is a string
        if (data['keyid'] && !(typeof data['keyid'] === 'string' || data['keyid'] instanceof String)) {
            throw new Error("Expected the field `keyid` to be a primitive type in the JSON string but got " + data['keyid']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['num'])) {
            throw new Error("Expected the field `num` to be an array in the JSON data but got " + data['num']);
        }

        return true;
    }


}

HLRrequest.RequiredProperties = ["getHLR", "keyid", "num"];

/**
 * Doit valoir \"1\"
 * @member {module:model/HLRrequest.GetHLREnum} getHLR
 * @default '1'
 */
HLRrequest.prototype['getHLR'] = '1';

/**
 * Clé API
 * @member {String} keyid
 */
HLRrequest.prototype['keyid'] = undefined;

/**
 * liste de numéros de téléphone
 * @member {Array.<String>} num
 */
HLRrequest.prototype['num'] = undefined;





/**
 * Allowed values for the <code>getHLR</code> property.
 * @enum {String}
 * @readonly
 */
HLRrequest['GetHLREnum'] = {

    /**
     * value: "1"
     * @const
     */
    "1": "1"
};



export default HLRrequest;

