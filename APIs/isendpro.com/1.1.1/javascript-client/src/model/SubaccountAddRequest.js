/**
 * API iSendPro
 * [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP 
 *
 * The version of the OpenAPI document: 1.1.1
 * Contact: support@isendpro.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubaccountAddRequest model module.
 * @module model/SubaccountAddRequest
 * @version 1.1.1
 */
class SubaccountAddRequest {
    /**
     * Constructs a new <code>SubaccountAddRequest</code>.
     * @alias module:model/SubaccountAddRequest
     * @param keyid {String} 
     * @param subAccountEdit {module:model/SubaccountAddRequest.SubAccountEditEnum} 
     * @param subAccountLogin {String} 
     * @param subAccountPassword {String} 
     */
    constructor(keyid, subAccountEdit, subAccountLogin, subAccountPassword) { 
        
        SubaccountAddRequest.initialize(this, keyid, subAccountEdit, subAccountLogin, subAccountPassword);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keyid, subAccountEdit, subAccountLogin, subAccountPassword) { 
        obj['keyid'] = keyid;
        obj['subAccountEdit'] = subAccountEdit;
        obj['subAccountLogin'] = subAccountLogin;
        obj['subAccountPassword'] = subAccountPassword;
    }

    /**
     * Constructs a <code>SubaccountAddRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubaccountAddRequest} obj Optional instance to populate.
     * @return {module:model/SubaccountAddRequest} The populated <code>SubaccountAddRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubaccountAddRequest();

            if (data.hasOwnProperty('keyid')) {
                obj['keyid'] = ApiClient.convertToType(data['keyid'], 'String');
            }
            if (data.hasOwnProperty('subAccountEdit')) {
                obj['subAccountEdit'] = ApiClient.convertToType(data['subAccountEdit'], 'String');
            }
            if (data.hasOwnProperty('subAccountLogin')) {
                obj['subAccountLogin'] = ApiClient.convertToType(data['subAccountLogin'], 'String');
            }
            if (data.hasOwnProperty('subAccountPassword')) {
                obj['subAccountPassword'] = ApiClient.convertToType(data['subAccountPassword'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubaccountAddRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubaccountAddRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubaccountAddRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['keyid'] && !(typeof data['keyid'] === 'string' || data['keyid'] instanceof String)) {
            throw new Error("Expected the field `keyid` to be a primitive type in the JSON string but got " + data['keyid']);
        }
        // ensure the json data is a string
        if (data['subAccountEdit'] && !(typeof data['subAccountEdit'] === 'string' || data['subAccountEdit'] instanceof String)) {
            throw new Error("Expected the field `subAccountEdit` to be a primitive type in the JSON string but got " + data['subAccountEdit']);
        }
        // ensure the json data is a string
        if (data['subAccountLogin'] && !(typeof data['subAccountLogin'] === 'string' || data['subAccountLogin'] instanceof String)) {
            throw new Error("Expected the field `subAccountLogin` to be a primitive type in the JSON string but got " + data['subAccountLogin']);
        }
        // ensure the json data is a string
        if (data['subAccountPassword'] && !(typeof data['subAccountPassword'] === 'string' || data['subAccountPassword'] instanceof String)) {
            throw new Error("Expected the field `subAccountPassword` to be a primitive type in the JSON string but got " + data['subAccountPassword']);
        }

        return true;
    }


}

SubaccountAddRequest.RequiredProperties = ["keyid", "subAccountEdit", "subAccountLogin", "subAccountPassword"];

/**
 * @member {String} keyid
 */
SubaccountAddRequest.prototype['keyid'] = undefined;

/**
 * @member {module:model/SubaccountAddRequest.SubAccountEditEnum} subAccountEdit
 */
SubaccountAddRequest.prototype['subAccountEdit'] = undefined;

/**
 * @member {String} subAccountLogin
 */
SubaccountAddRequest.prototype['subAccountLogin'] = undefined;

/**
 * @member {String} subAccountPassword
 */
SubaccountAddRequest.prototype['subAccountPassword'] = undefined;





/**
 * Allowed values for the <code>subAccountEdit</code> property.
 * @enum {String}
 * @readonly
 */
SubaccountAddRequest['SubAccountEditEnum'] = {

    /**
     * value: "addAccount"
     * @const
     */
    "addAccount": "addAccount"
};



export default SubaccountAddRequest;

