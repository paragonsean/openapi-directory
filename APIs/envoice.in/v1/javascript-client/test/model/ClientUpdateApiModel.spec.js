/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiV100);
  }
}(this, function(expect, ApiV100) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiV100.ClientUpdateApiModel();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ClientUpdateApiModel', function() {
    it('should create an instance of ClientUpdateApiModel', function() {
      // uncomment below and update the code to test ClientUpdateApiModel
      //var instance = new ApiV100.ClientUpdateApiModel();
      //expect(instance).to.be.a(ApiV100.ClientUpdateApiModel);
    });

    it('should have the property additionalEmails (base name: "AdditionalEmails")', function() {
      // uncomment below and update the code to test the property additionalEmails
      //var instance = new ApiV100.ClientUpdateApiModel();
      //expect(instance).to.be();
    });

    it('should have the property address (base name: "Address")', function() {
      // uncomment below and update the code to test the property address
      //var instance = new ApiV100.ClientUpdateApiModel();
      //expect(instance).to.be();
    });

    it('should have the property clientCountryId (base name: "ClientCountryId")', function() {
      // uncomment below and update the code to test the property clientCountryId
      //var instance = new ApiV100.ClientUpdateApiModel();
      //expect(instance).to.be();
    });

    it('should have the property clientCurrencyId (base name: "ClientCurrencyId")', function() {
      // uncomment below and update the code to test the property clientCurrencyId
      //var instance = new ApiV100.ClientUpdateApiModel();
      //expect(instance).to.be();
    });

    it('should have the property companyRegistrationNumber (base name: "CompanyRegistrationNumber")', function() {
      // uncomment below and update the code to test the property companyRegistrationNumber
      //var instance = new ApiV100.ClientUpdateApiModel();
      //expect(instance).to.be();
    });

    it('should have the property defaultDueDateInDays (base name: "DefaultDueDateInDays")', function() {
      // uncomment below and update the code to test the property defaultDueDateInDays
      //var instance = new ApiV100.ClientUpdateApiModel();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "Email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new ApiV100.ClientUpdateApiModel();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ApiV100.ClientUpdateApiModel();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ApiV100.ClientUpdateApiModel();
      //expect(instance).to.be();
    });

    it('should have the property phoneNumber (base name: "PhoneNumber")', function() {
      // uncomment below and update the code to test the property phoneNumber
      //var instance = new ApiV100.ClientUpdateApiModel();
      //expect(instance).to.be();
    });

    it('should have the property uiLanguageId (base name: "UiLanguageId")', function() {
      // uncomment below and update the code to test the property uiLanguageId
      //var instance = new ApiV100.ClientUpdateApiModel();
      //expect(instance).to.be();
    });

    it('should have the property vat (base name: "Vat")', function() {
      // uncomment below and update the code to test the property vat
      //var instance = new ApiV100.ClientUpdateApiModel();
      //expect(instance).to.be();
    });

  });

}));
