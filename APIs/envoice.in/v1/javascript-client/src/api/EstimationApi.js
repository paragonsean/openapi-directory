/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EstimationChangeStatusApiModel from '../model/EstimationChangeStatusApiModel';
import EstimationCreateApiModel from '../model/EstimationCreateApiModel';
import EstimationDeleteApiModel from '../model/EstimationDeleteApiModel';
import EstimationFullDetailsApiModel from '../model/EstimationFullDetailsApiModel';
import EstimationUpdateApiModel from '../model/EstimationUpdateApiModel';
import EstimationUriApiModel from '../model/EstimationUriApiModel';
import InvoiceFullDetailsApiModel from '../model/InvoiceFullDetailsApiModel';
import ListResultEstimationDetailsApiModel from '../model/ListResultEstimationDetailsApiModel';
import SendEstimationToClientApiModel from '../model/SendEstimationToClientApiModel';

/**
* Estimation service.
* @module api/EstimationApi
* @version v1
*/
export default class EstimationApi {

    /**
    * Constructs a new EstimationApi. 
    * @alias module:api/EstimationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the estimationApiAll operation.
     * @callback module:api/EstimationApi~estimationApiAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResultEstimationDetailsApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all estimation for the account
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {Object} opts Optional parameters
     * @param {Number} [queryOptionsPage] 
     * @param {Number} [queryOptionsPageSize] 
     * @param {module:api/EstimationApi~estimationApiAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResultEstimationDetailsApiModel}
     */
    estimationApiAll(xAuthKey, xAuthSecret, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling estimationApiAll");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling estimationApiAll");
      }

      let pathParams = {
      };
      let queryParams = {
        'queryOptions.page': opts['queryOptionsPage'],
        'queryOptions.pageSize': opts['queryOptionsPageSize']
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = ListResultEstimationDetailsApiModel;
      return this.apiClient.callApi(
        '/api/estimation/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the estimationApiChangeStatus operation.
     * @callback module:api/EstimationApi~estimationApiChangeStatusCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change estimation status
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:model/EstimationChangeStatusApiModel} estimationChangeStatusApiModel 
     * @param {module:api/EstimationApi~estimationApiChangeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    estimationApiChangeStatus(xAuthKey, xAuthSecret, estimationChangeStatusApiModel, callback) {
      let postBody = estimationChangeStatusApiModel;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling estimationApiChangeStatus");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling estimationApiChangeStatus");
      }
      // verify the required parameter 'estimationChangeStatusApiModel' is set
      if (estimationChangeStatusApiModel === undefined || estimationChangeStatusApiModel === null) {
        throw new Error("Missing the required parameter 'estimationChangeStatusApiModel' when calling estimationApiChangeStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/estimation/changestatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the estimationApiConvert operation.
     * @callback module:api/EstimationApi~estimationApiConvertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceFullDetailsApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert the estimation to an invoice
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {Number} body 
     * @param {module:api/EstimationApi~estimationApiConvertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceFullDetailsApiModel}
     */
    estimationApiConvert(xAuthKey, xAuthSecret, body, callback) {
      let postBody = body;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling estimationApiConvert");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling estimationApiConvert");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling estimationApiConvert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = InvoiceFullDetailsApiModel;
      return this.apiClient.callApi(
        '/api/estimation/convert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the estimationApiDelete operation.
     * @callback module:api/EstimationApi~estimationApiDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing estimation
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:model/EstimationDeleteApiModel} estimationDeleteApiModel 
     * @param {module:api/EstimationApi~estimationApiDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    estimationApiDelete(xAuthKey, xAuthSecret, estimationDeleteApiModel, callback) {
      let postBody = estimationDeleteApiModel;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling estimationApiDelete");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling estimationApiDelete");
      }
      // verify the required parameter 'estimationDeleteApiModel' is set
      if (estimationDeleteApiModel === undefined || estimationDeleteApiModel === null) {
        throw new Error("Missing the required parameter 'estimationDeleteApiModel' when calling estimationApiDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/estimation/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the estimationApiDetails operation.
     * @callback module:api/EstimationApi~estimationApiDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EstimationFullDetailsApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return estimation data
     * @param {Number} id 
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:api/EstimationApi~estimationApiDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EstimationFullDetailsApiModel}
     */
    estimationApiDetails(id, xAuthKey, xAuthSecret, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling estimationApiDetails");
      }
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling estimationApiDetails");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling estimationApiDetails");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = EstimationFullDetailsApiModel;
      return this.apiClient.callApi(
        '/api/estimation/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the estimationApiNew operation.
     * @callback module:api/EstimationApi~estimationApiNewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EstimationFullDetailsApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an estimation
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:model/EstimationCreateApiModel} estimationCreateApiModel 
     * @param {module:api/EstimationApi~estimationApiNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EstimationFullDetailsApiModel}
     */
    estimationApiNew(xAuthKey, xAuthSecret, estimationCreateApiModel, callback) {
      let postBody = estimationCreateApiModel;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling estimationApiNew");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling estimationApiNew");
      }
      // verify the required parameter 'estimationCreateApiModel' is set
      if (estimationCreateApiModel === undefined || estimationCreateApiModel === null) {
        throw new Error("Missing the required parameter 'estimationCreateApiModel' when calling estimationApiNew");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = EstimationFullDetailsApiModel;
      return this.apiClient.callApi(
        '/api/estimation/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the estimationApiSendToClient operation.
     * @callback module:api/EstimationApi~estimationApiSendToClientCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send the provided estimation to the client
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:model/SendEstimationToClientApiModel} sendEstimationToClientApiModel 
     * @param {module:api/EstimationApi~estimationApiSendToClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    estimationApiSendToClient(xAuthKey, xAuthSecret, sendEstimationToClientApiModel, callback) {
      let postBody = sendEstimationToClientApiModel;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling estimationApiSendToClient");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling estimationApiSendToClient");
      }
      // verify the required parameter 'sendEstimationToClientApiModel' is set
      if (sendEstimationToClientApiModel === undefined || sendEstimationToClientApiModel === null) {
        throw new Error("Missing the required parameter 'sendEstimationToClientApiModel' when calling estimationApiSendToClient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/estimation/sendtoclient', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the estimationApiStatus operation.
     * @callback module:api/EstimationApi~estimationApiStatusCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the status of the estimation
     * @param {Number} id 
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:api/EstimationApi~estimationApiStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    estimationApiStatus(id, xAuthKey, xAuthSecret, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling estimationApiStatus");
      }
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling estimationApiStatus");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling estimationApiStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/estimation/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the estimationApiUpdate operation.
     * @callback module:api/EstimationApi~estimationApiUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EstimationFullDetailsApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing estimation
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:model/EstimationUpdateApiModel} estimationUpdateApiModel 
     * @param {module:api/EstimationApi~estimationApiUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EstimationFullDetailsApiModel}
     */
    estimationApiUpdate(xAuthKey, xAuthSecret, estimationUpdateApiModel, callback) {
      let postBody = estimationUpdateApiModel;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling estimationApiUpdate");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling estimationApiUpdate");
      }
      // verify the required parameter 'estimationUpdateApiModel' is set
      if (estimationUpdateApiModel === undefined || estimationUpdateApiModel === null) {
        throw new Error("Missing the required parameter 'estimationUpdateApiModel' when calling estimationApiUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = EstimationFullDetailsApiModel;
      return this.apiClient.callApi(
        '/api/estimation/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the estimationApiUri operation.
     * @callback module:api/EstimationApi~estimationApiUriCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EstimationUriApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the unique url to the client's invoice
     * @param {Number} id 
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:api/EstimationApi~estimationApiUriCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EstimationUriApiModel}
     */
    estimationApiUri(id, xAuthKey, xAuthSecret, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling estimationApiUri");
      }
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling estimationApiUri");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling estimationApiUri");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = EstimationUriApiModel;
      return this.apiClient.callApi(
        '/api/estimation/uri', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
