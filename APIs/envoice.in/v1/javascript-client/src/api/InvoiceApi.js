/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangeStatusApiModel from '../model/ChangeStatusApiModel';
import InvoiceCategoryApiModel from '../model/InvoiceCategoryApiModel';
import InvoiceCategoryCreateApiModel from '../model/InvoiceCategoryCreateApiModel';
import InvoiceCategoryDeleteApiModel from '../model/InvoiceCategoryDeleteApiModel';
import InvoiceCategoryUpdateApiModel from '../model/InvoiceCategoryUpdateApiModel';
import InvoiceCreateApiModel from '../model/InvoiceCreateApiModel';
import InvoiceDeleteApiModel from '../model/InvoiceDeleteApiModel';
import InvoiceFullDetailsApiModel from '../model/InvoiceFullDetailsApiModel';
import InvoiceUpdateApiModel from '../model/InvoiceUpdateApiModel';
import InvoiceUriApiModel from '../model/InvoiceUriApiModel';
import ListResultInvoiceCategoryApiModel from '../model/ListResultInvoiceCategoryApiModel';
import ListResultInvoiceDetailsApiModel from '../model/ListResultInvoiceDetailsApiModel';
import SendInvoiceToAccountantApiModel from '../model/SendInvoiceToAccountantApiModel';
import SendInvoiceToClientApiModel from '../model/SendInvoiceToClientApiModel';

/**
* Invoice service.
* @module api/InvoiceApi
* @version v1
*/
export default class InvoiceApi {

    /**
    * Constructs a new InvoiceApi. 
    * @alias module:api/InvoiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiInvoiceAllcategoriesGet operation.
     * @callback module:api/InvoiceApi~apiInvoiceAllcategoriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResultInvoiceCategoryApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all invoice categories for the account
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {Object} opts Optional parameters
     * @param {String} [query] 
     * @param {module:api/InvoiceApi~apiInvoiceAllcategoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResultInvoiceCategoryApiModel}
     */
    apiInvoiceAllcategoriesGet(xAuthKey, xAuthSecret, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling apiInvoiceAllcategoriesGet");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling apiInvoiceAllcategoriesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query']
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = ListResultInvoiceCategoryApiModel;
      return this.apiClient.callApi(
        '/api/invoice/allcategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvoiceDeletecategoryPost operation.
     * @callback module:api/InvoiceApi~apiInvoiceDeletecategoryPostCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing invoice category
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:model/InvoiceCategoryDeleteApiModel} invoiceCategoryDeleteApiModel 
     * @param {module:api/InvoiceApi~apiInvoiceDeletecategoryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    apiInvoiceDeletecategoryPost(xAuthKey, xAuthSecret, invoiceCategoryDeleteApiModel, callback) {
      let postBody = invoiceCategoryDeleteApiModel;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling apiInvoiceDeletecategoryPost");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling apiInvoiceDeletecategoryPost");
      }
      // verify the required parameter 'invoiceCategoryDeleteApiModel' is set
      if (invoiceCategoryDeleteApiModel === undefined || invoiceCategoryDeleteApiModel === null) {
        throw new Error("Missing the required parameter 'invoiceCategoryDeleteApiModel' when calling apiInvoiceDeletecategoryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/invoice/deletecategory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvoiceNewcategoryPost operation.
     * @callback module:api/InvoiceApi~apiInvoiceNewcategoryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceCategoryApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an invoice category
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:model/InvoiceCategoryCreateApiModel} invoiceCategoryCreateApiModel 
     * @param {module:api/InvoiceApi~apiInvoiceNewcategoryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceCategoryApiModel}
     */
    apiInvoiceNewcategoryPost(xAuthKey, xAuthSecret, invoiceCategoryCreateApiModel, callback) {
      let postBody = invoiceCategoryCreateApiModel;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling apiInvoiceNewcategoryPost");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling apiInvoiceNewcategoryPost");
      }
      // verify the required parameter 'invoiceCategoryCreateApiModel' is set
      if (invoiceCategoryCreateApiModel === undefined || invoiceCategoryCreateApiModel === null) {
        throw new Error("Missing the required parameter 'invoiceCategoryCreateApiModel' when calling apiInvoiceNewcategoryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = InvoiceCategoryApiModel;
      return this.apiClient.callApi(
        '/api/invoice/newcategory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInvoiceUpdatecategoryPost operation.
     * @callback module:api/InvoiceApi~apiInvoiceUpdatecategoryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceCategoryApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing invoice category
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:model/InvoiceCategoryUpdateApiModel} invoiceCategoryUpdateApiModel 
     * @param {module:api/InvoiceApi~apiInvoiceUpdatecategoryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceCategoryApiModel}
     */
    apiInvoiceUpdatecategoryPost(xAuthKey, xAuthSecret, invoiceCategoryUpdateApiModel, callback) {
      let postBody = invoiceCategoryUpdateApiModel;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling apiInvoiceUpdatecategoryPost");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling apiInvoiceUpdatecategoryPost");
      }
      // verify the required parameter 'invoiceCategoryUpdateApiModel' is set
      if (invoiceCategoryUpdateApiModel === undefined || invoiceCategoryUpdateApiModel === null) {
        throw new Error("Missing the required parameter 'invoiceCategoryUpdateApiModel' when calling apiInvoiceUpdatecategoryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = InvoiceCategoryApiModel;
      return this.apiClient.callApi(
        '/api/invoice/updatecategory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceApiAll operation.
     * @callback module:api/InvoiceApi~invoiceApiAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResultInvoiceDetailsApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all invoices for the account
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {Object} opts Optional parameters
     * @param {Number} [queryOptionsPage] 
     * @param {Number} [queryOptionsPageSize] 
     * @param {module:api/InvoiceApi~invoiceApiAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResultInvoiceDetailsApiModel}
     */
    invoiceApiAll(xAuthKey, xAuthSecret, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling invoiceApiAll");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling invoiceApiAll");
      }

      let pathParams = {
      };
      let queryParams = {
        'queryOptions.page': opts['queryOptionsPage'],
        'queryOptions.pageSize': opts['queryOptionsPageSize']
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = ListResultInvoiceDetailsApiModel;
      return this.apiClient.callApi(
        '/api/invoice/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceApiChangeStatus operation.
     * @callback module:api/InvoiceApi~invoiceApiChangeStatusCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change invoice status
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:model/ChangeStatusApiModel} changeStatusApiModel 
     * @param {module:api/InvoiceApi~invoiceApiChangeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    invoiceApiChangeStatus(xAuthKey, xAuthSecret, changeStatusApiModel, callback) {
      let postBody = changeStatusApiModel;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling invoiceApiChangeStatus");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling invoiceApiChangeStatus");
      }
      // verify the required parameter 'changeStatusApiModel' is set
      if (changeStatusApiModel === undefined || changeStatusApiModel === null) {
        throw new Error("Missing the required parameter 'changeStatusApiModel' when calling invoiceApiChangeStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/invoice/changestatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceApiDelete operation.
     * @callback module:api/InvoiceApi~invoiceApiDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing invoice
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:model/InvoiceDeleteApiModel} invoiceDeleteApiModel 
     * @param {module:api/InvoiceApi~invoiceApiDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    invoiceApiDelete(xAuthKey, xAuthSecret, invoiceDeleteApiModel, callback) {
      let postBody = invoiceDeleteApiModel;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling invoiceApiDelete");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling invoiceApiDelete");
      }
      // verify the required parameter 'invoiceDeleteApiModel' is set
      if (invoiceDeleteApiModel === undefined || invoiceDeleteApiModel === null) {
        throw new Error("Missing the required parameter 'invoiceDeleteApiModel' when calling invoiceApiDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/invoice/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceApiDetails operation.
     * @callback module:api/InvoiceApi~invoiceApiDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceFullDetailsApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return invoice data
     * @param {Number} id 
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:api/InvoiceApi~invoiceApiDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceFullDetailsApiModel}
     */
    invoiceApiDetails(id, xAuthKey, xAuthSecret, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling invoiceApiDetails");
      }
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling invoiceApiDetails");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling invoiceApiDetails");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = InvoiceFullDetailsApiModel;
      return this.apiClient.callApi(
        '/api/invoice/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceApiNew operation.
     * @callback module:api/InvoiceApi~invoiceApiNewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceFullDetailsApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an invoice
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:model/InvoiceCreateApiModel} invoiceCreateApiModel 
     * @param {module:api/InvoiceApi~invoiceApiNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceFullDetailsApiModel}
     */
    invoiceApiNew(xAuthKey, xAuthSecret, invoiceCreateApiModel, callback) {
      let postBody = invoiceCreateApiModel;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling invoiceApiNew");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling invoiceApiNew");
      }
      // verify the required parameter 'invoiceCreateApiModel' is set
      if (invoiceCreateApiModel === undefined || invoiceCreateApiModel === null) {
        throw new Error("Missing the required parameter 'invoiceCreateApiModel' when calling invoiceApiNew");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = InvoiceFullDetailsApiModel;
      return this.apiClient.callApi(
        '/api/invoice/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceApiPdf operation.
     * @callback module:api/InvoiceApi~invoiceApiPdfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceUriApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the PDF for the invoice
     * @param {Number} id 
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [signedVersion] 
     * @param {module:api/InvoiceApi~invoiceApiPdfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceUriApiModel}
     */
    invoiceApiPdf(id, xAuthKey, xAuthSecret, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling invoiceApiPdf");
      }
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling invoiceApiPdf");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling invoiceApiPdf");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'signedVersion': opts['signedVersion']
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = InvoiceUriApiModel;
      return this.apiClient.callApi(
        '/api/invoice/pdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceApiSendToAccountant operation.
     * @callback module:api/InvoiceApi~invoiceApiSendToAccountantCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send the provided invoice to the accountant
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:model/SendInvoiceToAccountantApiModel} sendInvoiceToAccountantApiModel 
     * @param {module:api/InvoiceApi~invoiceApiSendToAccountantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    invoiceApiSendToAccountant(xAuthKey, xAuthSecret, sendInvoiceToAccountantApiModel, callback) {
      let postBody = sendInvoiceToAccountantApiModel;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling invoiceApiSendToAccountant");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling invoiceApiSendToAccountant");
      }
      // verify the required parameter 'sendInvoiceToAccountantApiModel' is set
      if (sendInvoiceToAccountantApiModel === undefined || sendInvoiceToAccountantApiModel === null) {
        throw new Error("Missing the required parameter 'sendInvoiceToAccountantApiModel' when calling invoiceApiSendToAccountant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/invoice/sendtoaccountant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceApiSendToClient operation.
     * @callback module:api/InvoiceApi~invoiceApiSendToClientCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send the provided invoice to the client
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:model/SendInvoiceToClientApiModel} sendInvoiceToClientApiModel 
     * @param {module:api/InvoiceApi~invoiceApiSendToClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    invoiceApiSendToClient(xAuthKey, xAuthSecret, sendInvoiceToClientApiModel, callback) {
      let postBody = sendInvoiceToClientApiModel;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling invoiceApiSendToClient");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling invoiceApiSendToClient");
      }
      // verify the required parameter 'sendInvoiceToClientApiModel' is set
      if (sendInvoiceToClientApiModel === undefined || sendInvoiceToClientApiModel === null) {
        throw new Error("Missing the required parameter 'sendInvoiceToClientApiModel' when calling invoiceApiSendToClient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/invoice/sendtoclient', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceApiStatus operation.
     * @callback module:api/InvoiceApi~invoiceApiStatusCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the status of the invoice
     * @param {Number} id 
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:api/InvoiceApi~invoiceApiStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    invoiceApiStatus(id, xAuthKey, xAuthSecret, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling invoiceApiStatus");
      }
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling invoiceApiStatus");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling invoiceApiStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/invoice/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceApiUpdate operation.
     * @callback module:api/InvoiceApi~invoiceApiUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceFullDetailsApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing invoice
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:model/InvoiceUpdateApiModel} invoiceUpdateApiModel 
     * @param {module:api/InvoiceApi~invoiceApiUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceFullDetailsApiModel}
     */
    invoiceApiUpdate(xAuthKey, xAuthSecret, invoiceUpdateApiModel, callback) {
      let postBody = invoiceUpdateApiModel;
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling invoiceApiUpdate");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling invoiceApiUpdate");
      }
      // verify the required parameter 'invoiceUpdateApiModel' is set
      if (invoiceUpdateApiModel === undefined || invoiceUpdateApiModel === null) {
        throw new Error("Missing the required parameter 'invoiceUpdateApiModel' when calling invoiceApiUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = InvoiceFullDetailsApiModel;
      return this.apiClient.callApi(
        '/api/invoice/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invoiceApiUri operation.
     * @callback module:api/InvoiceApi~invoiceApiUriCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceUriApiModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the unique url to the client's invoice
     * @param {Number} id 
     * @param {String} xAuthKey 
     * @param {String} xAuthSecret 
     * @param {module:api/InvoiceApi~invoiceApiUriCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceUriApiModel}
     */
    invoiceApiUri(id, xAuthKey, xAuthSecret, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling invoiceApiUri");
      }
      // verify the required parameter 'xAuthKey' is set
      if (xAuthKey === undefined || xAuthKey === null) {
        throw new Error("Missing the required parameter 'xAuthKey' when calling invoiceApiUri");
      }
      // verify the required parameter 'xAuthSecret' is set
      if (xAuthSecret === undefined || xAuthSecret === null) {
        throw new Error("Missing the required parameter 'xAuthSecret' when calling invoiceApiUri");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        'x-auth-key': xAuthKey,
        'x-auth-secret': xAuthSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/html', 'text/json', 'text/xml'];
      let returnType = InvoiceUriApiModel;
      return this.apiClient.callApi(
        '/api/invoice/uri', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
