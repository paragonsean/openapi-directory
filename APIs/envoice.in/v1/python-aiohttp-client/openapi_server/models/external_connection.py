# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExternalConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, access_token_secret: str=None, data: str=None, expires_on: datetime=None, external_user_id: str=None, external_username: str=None, id: int=None, provider: str=None, user_id: int=None):
        """ExternalConnection - a model defined in OpenAPI

        :param access_token: The access_token of this ExternalConnection.
        :param access_token_secret: The access_token_secret of this ExternalConnection.
        :param data: The data of this ExternalConnection.
        :param expires_on: The expires_on of this ExternalConnection.
        :param external_user_id: The external_user_id of this ExternalConnection.
        :param external_username: The external_username of this ExternalConnection.
        :param id: The id of this ExternalConnection.
        :param provider: The provider of this ExternalConnection.
        :param user_id: The user_id of this ExternalConnection.
        """
        self.openapi_types = {
            'access_token': str,
            'access_token_secret': str,
            'data': str,
            'expires_on': datetime,
            'external_user_id': str,
            'external_username': str,
            'id': int,
            'provider': str,
            'user_id': int
        }

        self.attribute_map = {
            'access_token': 'AccessToken',
            'access_token_secret': 'AccessTokenSecret',
            'data': 'Data',
            'expires_on': 'ExpiresOn',
            'external_user_id': 'ExternalUserId',
            'external_username': 'ExternalUsername',
            'id': 'Id',
            'provider': 'Provider',
            'user_id': 'UserId'
        }

        self._access_token = access_token
        self._access_token_secret = access_token_secret
        self._data = data
        self._expires_on = expires_on
        self._external_user_id = external_user_id
        self._external_username = external_username
        self._id = id
        self._provider = provider
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalConnection of this ExternalConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this ExternalConnection.


        :return: The access_token of this ExternalConnection.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this ExternalConnection.


        :param access_token: The access_token of this ExternalConnection.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def access_token_secret(self):
        """Gets the access_token_secret of this ExternalConnection.


        :return: The access_token_secret of this ExternalConnection.
        :rtype: str
        """
        return self._access_token_secret

    @access_token_secret.setter
    def access_token_secret(self, access_token_secret):
        """Sets the access_token_secret of this ExternalConnection.


        :param access_token_secret: The access_token_secret of this ExternalConnection.
        :type access_token_secret: str
        """

        self._access_token_secret = access_token_secret

    @property
    def data(self):
        """Gets the data of this ExternalConnection.


        :return: The data of this ExternalConnection.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ExternalConnection.


        :param data: The data of this ExternalConnection.
        :type data: str
        """

        self._data = data

    @property
    def expires_on(self):
        """Gets the expires_on of this ExternalConnection.


        :return: The expires_on of this ExternalConnection.
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this ExternalConnection.


        :param expires_on: The expires_on of this ExternalConnection.
        :type expires_on: datetime
        """

        self._expires_on = expires_on

    @property
    def external_user_id(self):
        """Gets the external_user_id of this ExternalConnection.


        :return: The external_user_id of this ExternalConnection.
        :rtype: str
        """
        return self._external_user_id

    @external_user_id.setter
    def external_user_id(self, external_user_id):
        """Sets the external_user_id of this ExternalConnection.


        :param external_user_id: The external_user_id of this ExternalConnection.
        :type external_user_id: str
        """

        self._external_user_id = external_user_id

    @property
    def external_username(self):
        """Gets the external_username of this ExternalConnection.


        :return: The external_username of this ExternalConnection.
        :rtype: str
        """
        return self._external_username

    @external_username.setter
    def external_username(self, external_username):
        """Sets the external_username of this ExternalConnection.


        :param external_username: The external_username of this ExternalConnection.
        :type external_username: str
        """

        self._external_username = external_username

    @property
    def id(self):
        """Gets the id of this ExternalConnection.


        :return: The id of this ExternalConnection.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExternalConnection.


        :param id: The id of this ExternalConnection.
        :type id: int
        """

        self._id = id

    @property
    def provider(self):
        """Gets the provider of this ExternalConnection.


        :return: The provider of this ExternalConnection.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ExternalConnection.


        :param provider: The provider of this ExternalConnection.
        :type provider: str
        """

        self._provider = provider

    @property
    def user_id(self):
        """Gets the user_id of this ExternalConnection.


        :return: The user_id of this ExternalConnection.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ExternalConnection.


        :param user_id: The user_id of this ExternalConnection.
        :type user_id: int
        """

        self._user_id = user_id
