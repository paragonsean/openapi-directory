# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.payment_gateway_input_field import PaymentGatewayInputField
from openapi_server import util


class PaymentGateway(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_disconnect: bool=None, client_import_uri: str=None, connection_type: str=None, external_connection_id: int=None, fields: List[PaymentGatewayInputField]=None, is_connected: bool=None, is_enabled: bool=None, maximum_amount: float=None, minimum_amount: float=None, name: str=None, o_auth_uri: str=None, refund_uri: str=None, supported_currencies: List[Currency]=None, supports_clients_import: bool=None, supports_instant_checkout: bool=None, supports_refund: bool=None):
        """PaymentGateway - a model defined in OpenAPI

        :param can_disconnect: The can_disconnect of this PaymentGateway.
        :param client_import_uri: The client_import_uri of this PaymentGateway.
        :param connection_type: The connection_type of this PaymentGateway.
        :param external_connection_id: The external_connection_id of this PaymentGateway.
        :param fields: The fields of this PaymentGateway.
        :param is_connected: The is_connected of this PaymentGateway.
        :param is_enabled: The is_enabled of this PaymentGateway.
        :param maximum_amount: The maximum_amount of this PaymentGateway.
        :param minimum_amount: The minimum_amount of this PaymentGateway.
        :param name: The name of this PaymentGateway.
        :param o_auth_uri: The o_auth_uri of this PaymentGateway.
        :param refund_uri: The refund_uri of this PaymentGateway.
        :param supported_currencies: The supported_currencies of this PaymentGateway.
        :param supports_clients_import: The supports_clients_import of this PaymentGateway.
        :param supports_instant_checkout: The supports_instant_checkout of this PaymentGateway.
        :param supports_refund: The supports_refund of this PaymentGateway.
        """
        self.openapi_types = {
            'can_disconnect': bool,
            'client_import_uri': str,
            'connection_type': str,
            'external_connection_id': int,
            'fields': List[PaymentGatewayInputField],
            'is_connected': bool,
            'is_enabled': bool,
            'maximum_amount': float,
            'minimum_amount': float,
            'name': str,
            'o_auth_uri': str,
            'refund_uri': str,
            'supported_currencies': List[Currency],
            'supports_clients_import': bool,
            'supports_instant_checkout': bool,
            'supports_refund': bool
        }

        self.attribute_map = {
            'can_disconnect': 'CanDisconnect',
            'client_import_uri': 'ClientImportUri',
            'connection_type': 'ConnectionType',
            'external_connection_id': 'ExternalConnectionId',
            'fields': 'Fields',
            'is_connected': 'IsConnected',
            'is_enabled': 'IsEnabled',
            'maximum_amount': 'MaximumAmount',
            'minimum_amount': 'MinimumAmount',
            'name': 'Name',
            'o_auth_uri': 'OAuthUri',
            'refund_uri': 'RefundUri',
            'supported_currencies': 'SupportedCurrencies',
            'supports_clients_import': 'SupportsClientsImport',
            'supports_instant_checkout': 'SupportsInstantCheckout',
            'supports_refund': 'SupportsRefund'
        }

        self._can_disconnect = can_disconnect
        self._client_import_uri = client_import_uri
        self._connection_type = connection_type
        self._external_connection_id = external_connection_id
        self._fields = fields
        self._is_connected = is_connected
        self._is_enabled = is_enabled
        self._maximum_amount = maximum_amount
        self._minimum_amount = minimum_amount
        self._name = name
        self._o_auth_uri = o_auth_uri
        self._refund_uri = refund_uri
        self._supported_currencies = supported_currencies
        self._supports_clients_import = supports_clients_import
        self._supports_instant_checkout = supports_instant_checkout
        self._supports_refund = supports_refund

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentGateway':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentGateway of this PaymentGateway.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_disconnect(self):
        """Gets the can_disconnect of this PaymentGateway.


        :return: The can_disconnect of this PaymentGateway.
        :rtype: bool
        """
        return self._can_disconnect

    @can_disconnect.setter
    def can_disconnect(self, can_disconnect):
        """Sets the can_disconnect of this PaymentGateway.


        :param can_disconnect: The can_disconnect of this PaymentGateway.
        :type can_disconnect: bool
        """

        self._can_disconnect = can_disconnect

    @property
    def client_import_uri(self):
        """Gets the client_import_uri of this PaymentGateway.


        :return: The client_import_uri of this PaymentGateway.
        :rtype: str
        """
        return self._client_import_uri

    @client_import_uri.setter
    def client_import_uri(self, client_import_uri):
        """Sets the client_import_uri of this PaymentGateway.


        :param client_import_uri: The client_import_uri of this PaymentGateway.
        :type client_import_uri: str
        """

        self._client_import_uri = client_import_uri

    @property
    def connection_type(self):
        """Gets the connection_type of this PaymentGateway.


        :return: The connection_type of this PaymentGateway.
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this PaymentGateway.


        :param connection_type: The connection_type of this PaymentGateway.
        :type connection_type: str
        """
        allowed_values = ["OAuth", "InputFields", "Dropdown"]  # noqa: E501
        if connection_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_type` ({0}), must be one of {1}"
                .format(connection_type, allowed_values)
            )

        self._connection_type = connection_type

    @property
    def external_connection_id(self):
        """Gets the external_connection_id of this PaymentGateway.


        :return: The external_connection_id of this PaymentGateway.
        :rtype: int
        """
        return self._external_connection_id

    @external_connection_id.setter
    def external_connection_id(self, external_connection_id):
        """Sets the external_connection_id of this PaymentGateway.


        :param external_connection_id: The external_connection_id of this PaymentGateway.
        :type external_connection_id: int
        """

        self._external_connection_id = external_connection_id

    @property
    def fields(self):
        """Gets the fields of this PaymentGateway.


        :return: The fields of this PaymentGateway.
        :rtype: List[PaymentGatewayInputField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this PaymentGateway.


        :param fields: The fields of this PaymentGateway.
        :type fields: List[PaymentGatewayInputField]
        """

        self._fields = fields

    @property
    def is_connected(self):
        """Gets the is_connected of this PaymentGateway.


        :return: The is_connected of this PaymentGateway.
        :rtype: bool
        """
        return self._is_connected

    @is_connected.setter
    def is_connected(self, is_connected):
        """Sets the is_connected of this PaymentGateway.


        :param is_connected: The is_connected of this PaymentGateway.
        :type is_connected: bool
        """

        self._is_connected = is_connected

    @property
    def is_enabled(self):
        """Gets the is_enabled of this PaymentGateway.


        :return: The is_enabled of this PaymentGateway.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this PaymentGateway.


        :param is_enabled: The is_enabled of this PaymentGateway.
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def maximum_amount(self):
        """Gets the maximum_amount of this PaymentGateway.


        :return: The maximum_amount of this PaymentGateway.
        :rtype: float
        """
        return self._maximum_amount

    @maximum_amount.setter
    def maximum_amount(self, maximum_amount):
        """Sets the maximum_amount of this PaymentGateway.


        :param maximum_amount: The maximum_amount of this PaymentGateway.
        :type maximum_amount: float
        """

        self._maximum_amount = maximum_amount

    @property
    def minimum_amount(self):
        """Gets the minimum_amount of this PaymentGateway.


        :return: The minimum_amount of this PaymentGateway.
        :rtype: float
        """
        return self._minimum_amount

    @minimum_amount.setter
    def minimum_amount(self, minimum_amount):
        """Sets the minimum_amount of this PaymentGateway.


        :param minimum_amount: The minimum_amount of this PaymentGateway.
        :type minimum_amount: float
        """

        self._minimum_amount = minimum_amount

    @property
    def name(self):
        """Gets the name of this PaymentGateway.


        :return: The name of this PaymentGateway.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaymentGateway.


        :param name: The name of this PaymentGateway.
        :type name: str
        """

        self._name = name

    @property
    def o_auth_uri(self):
        """Gets the o_auth_uri of this PaymentGateway.


        :return: The o_auth_uri of this PaymentGateway.
        :rtype: str
        """
        return self._o_auth_uri

    @o_auth_uri.setter
    def o_auth_uri(self, o_auth_uri):
        """Sets the o_auth_uri of this PaymentGateway.


        :param o_auth_uri: The o_auth_uri of this PaymentGateway.
        :type o_auth_uri: str
        """

        self._o_auth_uri = o_auth_uri

    @property
    def refund_uri(self):
        """Gets the refund_uri of this PaymentGateway.


        :return: The refund_uri of this PaymentGateway.
        :rtype: str
        """
        return self._refund_uri

    @refund_uri.setter
    def refund_uri(self, refund_uri):
        """Sets the refund_uri of this PaymentGateway.


        :param refund_uri: The refund_uri of this PaymentGateway.
        :type refund_uri: str
        """

        self._refund_uri = refund_uri

    @property
    def supported_currencies(self):
        """Gets the supported_currencies of this PaymentGateway.


        :return: The supported_currencies of this PaymentGateway.
        :rtype: List[Currency]
        """
        return self._supported_currencies

    @supported_currencies.setter
    def supported_currencies(self, supported_currencies):
        """Sets the supported_currencies of this PaymentGateway.


        :param supported_currencies: The supported_currencies of this PaymentGateway.
        :type supported_currencies: List[Currency]
        """

        self._supported_currencies = supported_currencies

    @property
    def supports_clients_import(self):
        """Gets the supports_clients_import of this PaymentGateway.


        :return: The supports_clients_import of this PaymentGateway.
        :rtype: bool
        """
        return self._supports_clients_import

    @supports_clients_import.setter
    def supports_clients_import(self, supports_clients_import):
        """Sets the supports_clients_import of this PaymentGateway.


        :param supports_clients_import: The supports_clients_import of this PaymentGateway.
        :type supports_clients_import: bool
        """

        self._supports_clients_import = supports_clients_import

    @property
    def supports_instant_checkout(self):
        """Gets the supports_instant_checkout of this PaymentGateway.


        :return: The supports_instant_checkout of this PaymentGateway.
        :rtype: bool
        """
        return self._supports_instant_checkout

    @supports_instant_checkout.setter
    def supports_instant_checkout(self, supports_instant_checkout):
        """Sets the supports_instant_checkout of this PaymentGateway.


        :param supports_instant_checkout: The supports_instant_checkout of this PaymentGateway.
        :type supports_instant_checkout: bool
        """

        self._supports_instant_checkout = supports_instant_checkout

    @property
    def supports_refund(self):
        """Gets the supports_refund of this PaymentGateway.


        :return: The supports_refund of this PaymentGateway.
        :rtype: bool
        """
        return self._supports_refund

    @supports_refund.setter
    def supports_refund(self, supports_refund):
        """Sets the supports_refund of this PaymentGateway.


        :param supports_refund: The supports_refund of this PaymentGateway.
        :type supports_refund: bool
        """

        self._supports_refund = supports_refund
