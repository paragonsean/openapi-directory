# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SendInvoiceToClientApiModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attach_pdf: bool=None, id: int=None, invoice_id: int=None, message: str=None, send_to_self: bool=None, subject: str=None):
        """SendInvoiceToClientApiModel - a model defined in OpenAPI

        :param attach_pdf: The attach_pdf of this SendInvoiceToClientApiModel.
        :param id: The id of this SendInvoiceToClientApiModel.
        :param invoice_id: The invoice_id of this SendInvoiceToClientApiModel.
        :param message: The message of this SendInvoiceToClientApiModel.
        :param send_to_self: The send_to_self of this SendInvoiceToClientApiModel.
        :param subject: The subject of this SendInvoiceToClientApiModel.
        """
        self.openapi_types = {
            'attach_pdf': bool,
            'id': int,
            'invoice_id': int,
            'message': str,
            'send_to_self': bool,
            'subject': str
        }

        self.attribute_map = {
            'attach_pdf': 'AttachPdf',
            'id': 'Id',
            'invoice_id': 'InvoiceId',
            'message': 'Message',
            'send_to_self': 'SendToSelf',
            'subject': 'Subject'
        }

        self._attach_pdf = attach_pdf
        self._id = id
        self._invoice_id = invoice_id
        self._message = message
        self._send_to_self = send_to_self
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendInvoiceToClientApiModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendInvoiceToClientApiModel of this SendInvoiceToClientApiModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attach_pdf(self):
        """Gets the attach_pdf of this SendInvoiceToClientApiModel.

        Should attach pdf file

        :return: The attach_pdf of this SendInvoiceToClientApiModel.
        :rtype: bool
        """
        return self._attach_pdf

    @attach_pdf.setter
    def attach_pdf(self, attach_pdf):
        """Sets the attach_pdf of this SendInvoiceToClientApiModel.

        Should attach pdf file

        :param attach_pdf: The attach_pdf of this SendInvoiceToClientApiModel.
        :type attach_pdf: bool
        """

        self._attach_pdf = attach_pdf

    @property
    def id(self):
        """Gets the id of this SendInvoiceToClientApiModel.

        Id of the invoice

        :return: The id of this SendInvoiceToClientApiModel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SendInvoiceToClientApiModel.

        Id of the invoice

        :param id: The id of this SendInvoiceToClientApiModel.
        :type id: int
        """

        self._id = id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this SendInvoiceToClientApiModel.

        Id of the invoice

        :return: The invoice_id of this SendInvoiceToClientApiModel.
        :rtype: int
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this SendInvoiceToClientApiModel.

        Id of the invoice

        :param invoice_id: The invoice_id of this SendInvoiceToClientApiModel.
        :type invoice_id: int
        """

        self._invoice_id = invoice_id

    @property
    def message(self):
        """Gets the message of this SendInvoiceToClientApiModel.

        Message to be embedded in the email

        :return: The message of this SendInvoiceToClientApiModel.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SendInvoiceToClientApiModel.

        Message to be embedded in the email

        :param message: The message of this SendInvoiceToClientApiModel.
        :type message: str
        """

        self._message = message

    @property
    def send_to_self(self):
        """Gets the send_to_self of this SendInvoiceToClientApiModel.

        Should email copy be send to self

        :return: The send_to_self of this SendInvoiceToClientApiModel.
        :rtype: bool
        """
        return self._send_to_self

    @send_to_self.setter
    def send_to_self(self, send_to_self):
        """Sets the send_to_self of this SendInvoiceToClientApiModel.

        Should email copy be send to self

        :param send_to_self: The send_to_self of this SendInvoiceToClientApiModel.
        :type send_to_self: bool
        """

        self._send_to_self = send_to_self

    @property
    def subject(self):
        """Gets the subject of this SendInvoiceToClientApiModel.

        Subject for the email

        :return: The subject of this SendInvoiceToClientApiModel.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SendInvoiceToClientApiModel.

        Subject for the email

        :param subject: The subject of this SendInvoiceToClientApiModel.
        :type subject: str
        """

        self._subject = subject
