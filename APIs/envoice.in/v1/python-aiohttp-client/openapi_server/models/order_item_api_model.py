# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderItemApiModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: float=None, description: str=None, product_item_id: int=None, quantity: float=None, reference_id: str=None, sub_total_amount: float=None, tax_amount: float=None, tax_id: int=None, tax_percentage: float=None, total_amount: float=None, work_type_id: int=None):
        """OrderItemApiModel - a model defined in OpenAPI

        :param cost: The cost of this OrderItemApiModel.
        :param description: The description of this OrderItemApiModel.
        :param product_item_id: The product_item_id of this OrderItemApiModel.
        :param quantity: The quantity of this OrderItemApiModel.
        :param reference_id: The reference_id of this OrderItemApiModel.
        :param sub_total_amount: The sub_total_amount of this OrderItemApiModel.
        :param tax_amount: The tax_amount of this OrderItemApiModel.
        :param tax_id: The tax_id of this OrderItemApiModel.
        :param tax_percentage: The tax_percentage of this OrderItemApiModel.
        :param total_amount: The total_amount of this OrderItemApiModel.
        :param work_type_id: The work_type_id of this OrderItemApiModel.
        """
        self.openapi_types = {
            'cost': float,
            'description': str,
            'product_item_id': int,
            'quantity': float,
            'reference_id': str,
            'sub_total_amount': float,
            'tax_amount': float,
            'tax_id': int,
            'tax_percentage': float,
            'total_amount': float,
            'work_type_id': int
        }

        self.attribute_map = {
            'cost': 'Cost',
            'description': 'Description',
            'product_item_id': 'ProductItemId',
            'quantity': 'Quantity',
            'reference_id': 'ReferenceId',
            'sub_total_amount': 'SubTotalAmount',
            'tax_amount': 'TaxAmount',
            'tax_id': 'TaxId',
            'tax_percentage': 'TaxPercentage',
            'total_amount': 'TotalAmount',
            'work_type_id': 'WorkTypeId'
        }

        self._cost = cost
        self._description = description
        self._product_item_id = product_item_id
        self._quantity = quantity
        self._reference_id = reference_id
        self._sub_total_amount = sub_total_amount
        self._tax_amount = tax_amount
        self._tax_id = tax_id
        self._tax_percentage = tax_percentage
        self._total_amount = total_amount
        self._work_type_id = work_type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderItemApiModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderItemApiModel of this OrderItemApiModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this OrderItemApiModel.

        Work item cost

        :return: The cost of this OrderItemApiModel.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this OrderItemApiModel.

        Work item cost

        :param cost: The cost of this OrderItemApiModel.
        :type cost: float
        """

        self._cost = cost

    @property
    def description(self):
        """Gets the description of this OrderItemApiModel.

        General description

        :return: The description of this OrderItemApiModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrderItemApiModel.

        General description

        :param description: The description of this OrderItemApiModel.
        :type description: str
        """

        self._description = description

    @property
    def product_item_id(self):
        """Gets the product_item_id of this OrderItemApiModel.

        Foreign key product item id

        :return: The product_item_id of this OrderItemApiModel.
        :rtype: int
        """
        return self._product_item_id

    @product_item_id.setter
    def product_item_id(self, product_item_id):
        """Sets the product_item_id of this OrderItemApiModel.

        Foreign key product item id

        :param product_item_id: The product_item_id of this OrderItemApiModel.
        :type product_item_id: int
        """

        self._product_item_id = product_item_id

    @property
    def quantity(self):
        """Gets the quantity of this OrderItemApiModel.

        Work item quantity

        :return: The quantity of this OrderItemApiModel.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderItemApiModel.

        Work item quantity

        :param quantity: The quantity of this OrderItemApiModel.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def reference_id(self):
        """Gets the reference_id of this OrderItemApiModel.

        Order SKU

        :return: The reference_id of this OrderItemApiModel.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this OrderItemApiModel.

        Order SKU

        :param reference_id: The reference_id of this OrderItemApiModel.
        :type reference_id: str
        """

        self._reference_id = reference_id

    @property
    def sub_total_amount(self):
        """Gets the sub_total_amount of this OrderItemApiModel.

        Subtotal amount of product

        :return: The sub_total_amount of this OrderItemApiModel.
        :rtype: float
        """
        return self._sub_total_amount

    @sub_total_amount.setter
    def sub_total_amount(self, sub_total_amount):
        """Sets the sub_total_amount of this OrderItemApiModel.

        Subtotal amount of product

        :param sub_total_amount: The sub_total_amount of this OrderItemApiModel.
        :type sub_total_amount: float
        """

        self._sub_total_amount = sub_total_amount

    @property
    def tax_amount(self):
        """Gets the tax_amount of this OrderItemApiModel.

        Tax amount

        :return: The tax_amount of this OrderItemApiModel.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this OrderItemApiModel.

        Tax amount

        :param tax_amount: The tax_amount of this OrderItemApiModel.
        :type tax_amount: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_id(self):
        """Gets the tax_id of this OrderItemApiModel.

        Foreign key Tax id

        :return: The tax_id of this OrderItemApiModel.
        :rtype: int
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this OrderItemApiModel.

        Foreign key Tax id

        :param tax_id: The tax_id of this OrderItemApiModel.
        :type tax_id: int
        """

        self._tax_id = tax_id

    @property
    def tax_percentage(self):
        """Gets the tax_percentage of this OrderItemApiModel.

        Tax percentage

        :return: The tax_percentage of this OrderItemApiModel.
        :rtype: float
        """
        return self._tax_percentage

    @tax_percentage.setter
    def tax_percentage(self, tax_percentage):
        """Sets the tax_percentage of this OrderItemApiModel.

        Tax percentage

        :param tax_percentage: The tax_percentage of this OrderItemApiModel.
        :type tax_percentage: float
        """

        self._tax_percentage = tax_percentage

    @property
    def total_amount(self):
        """Gets the total_amount of this OrderItemApiModel.

        Total amount of product

        :return: The total_amount of this OrderItemApiModel.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this OrderItemApiModel.

        Total amount of product

        :param total_amount: The total_amount of this OrderItemApiModel.
        :type total_amount: float
        """

        self._total_amount = total_amount

    @property
    def work_type_id(self):
        """Gets the work_type_id of this OrderItemApiModel.

        Foreign key work type id

        :return: The work_type_id of this OrderItemApiModel.
        :rtype: int
        """
        return self._work_type_id

    @work_type_id.setter
    def work_type_id(self, work_type_id):
        """Sets the work_type_id of this OrderItemApiModel.

        Foreign key work type id

        :param work_type_id: The work_type_id of this OrderItemApiModel.
        :type work_type_id: int
        """

        self._work_type_id = work_type_id
