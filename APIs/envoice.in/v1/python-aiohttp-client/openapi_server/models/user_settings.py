# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country import Country
from openapi_server.models.currency import Currency
from openapi_server.models.ui_language import UiLanguage
from openapi_server import util


class UserSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accountant_email: str=None, address: str=None, api_key: str=None, api_secret: str=None, background_image: str=None, bank: str=None, bank_account: str=None, cname: str=None, company_registration_number: str=None, country: Country=None, country_id: int=None, currency: Currency=None, currency_id: int=None, currency_symbol: str=None, default_date_format: str=None, default_due_date_in_days: int=None, do_not_track: bool=None, enable_client_portal: bool=None, enable_predictive_invoicing: bool=None, enable_recurring_invoicing: bool=None, has_invoice_logo: bool=None, iban: str=None, id: int=None, invoice_template: str=None, invoice_template_color_hex: str=None, phone_number: str=None, profession: str=None, receive_sms_notifications: bool=None, referral_program: str=None, store_checkout_fields: str=None, store_color_hex: str=None, store_currency: Currency=None, store_currency_id: int=None, store_custom_java_script: str=None, store_description: str=None, store_email: str=None, store_language: UiLanguage=None, store_language_id: int=None, store_name: str=None, store_purchase_email_message: str=None, store_purchase_thank_you_message: str=None, store_text_color_hex: str=None, store_url: str=None, subscribe_to_product_emails: bool=None, swift: str=None, terms: str=None, user_id: int=None, user_signature: str=None, vat_number: str=None, years_of_experience: int=None):
        """UserSettings - a model defined in OpenAPI

        :param accountant_email: The accountant_email of this UserSettings.
        :param address: The address of this UserSettings.
        :param api_key: The api_key of this UserSettings.
        :param api_secret: The api_secret of this UserSettings.
        :param background_image: The background_image of this UserSettings.
        :param bank: The bank of this UserSettings.
        :param bank_account: The bank_account of this UserSettings.
        :param cname: The cname of this UserSettings.
        :param company_registration_number: The company_registration_number of this UserSettings.
        :param country: The country of this UserSettings.
        :param country_id: The country_id of this UserSettings.
        :param currency: The currency of this UserSettings.
        :param currency_id: The currency_id of this UserSettings.
        :param currency_symbol: The currency_symbol of this UserSettings.
        :param default_date_format: The default_date_format of this UserSettings.
        :param default_due_date_in_days: The default_due_date_in_days of this UserSettings.
        :param do_not_track: The do_not_track of this UserSettings.
        :param enable_client_portal: The enable_client_portal of this UserSettings.
        :param enable_predictive_invoicing: The enable_predictive_invoicing of this UserSettings.
        :param enable_recurring_invoicing: The enable_recurring_invoicing of this UserSettings.
        :param has_invoice_logo: The has_invoice_logo of this UserSettings.
        :param iban: The iban of this UserSettings.
        :param id: The id of this UserSettings.
        :param invoice_template: The invoice_template of this UserSettings.
        :param invoice_template_color_hex: The invoice_template_color_hex of this UserSettings.
        :param phone_number: The phone_number of this UserSettings.
        :param profession: The profession of this UserSettings.
        :param receive_sms_notifications: The receive_sms_notifications of this UserSettings.
        :param referral_program: The referral_program of this UserSettings.
        :param store_checkout_fields: The store_checkout_fields of this UserSettings.
        :param store_color_hex: The store_color_hex of this UserSettings.
        :param store_currency: The store_currency of this UserSettings.
        :param store_currency_id: The store_currency_id of this UserSettings.
        :param store_custom_java_script: The store_custom_java_script of this UserSettings.
        :param store_description: The store_description of this UserSettings.
        :param store_email: The store_email of this UserSettings.
        :param store_language: The store_language of this UserSettings.
        :param store_language_id: The store_language_id of this UserSettings.
        :param store_name: The store_name of this UserSettings.
        :param store_purchase_email_message: The store_purchase_email_message of this UserSettings.
        :param store_purchase_thank_you_message: The store_purchase_thank_you_message of this UserSettings.
        :param store_text_color_hex: The store_text_color_hex of this UserSettings.
        :param store_url: The store_url of this UserSettings.
        :param subscribe_to_product_emails: The subscribe_to_product_emails of this UserSettings.
        :param swift: The swift of this UserSettings.
        :param terms: The terms of this UserSettings.
        :param user_id: The user_id of this UserSettings.
        :param user_signature: The user_signature of this UserSettings.
        :param vat_number: The vat_number of this UserSettings.
        :param years_of_experience: The years_of_experience of this UserSettings.
        """
        self.openapi_types = {
            'accountant_email': str,
            'address': str,
            'api_key': str,
            'api_secret': str,
            'background_image': str,
            'bank': str,
            'bank_account': str,
            'cname': str,
            'company_registration_number': str,
            'country': Country,
            'country_id': int,
            'currency': Currency,
            'currency_id': int,
            'currency_symbol': str,
            'default_date_format': str,
            'default_due_date_in_days': int,
            'do_not_track': bool,
            'enable_client_portal': bool,
            'enable_predictive_invoicing': bool,
            'enable_recurring_invoicing': bool,
            'has_invoice_logo': bool,
            'iban': str,
            'id': int,
            'invoice_template': str,
            'invoice_template_color_hex': str,
            'phone_number': str,
            'profession': str,
            'receive_sms_notifications': bool,
            'referral_program': str,
            'store_checkout_fields': str,
            'store_color_hex': str,
            'store_currency': Currency,
            'store_currency_id': int,
            'store_custom_java_script': str,
            'store_description': str,
            'store_email': str,
            'store_language': UiLanguage,
            'store_language_id': int,
            'store_name': str,
            'store_purchase_email_message': str,
            'store_purchase_thank_you_message': str,
            'store_text_color_hex': str,
            'store_url': str,
            'subscribe_to_product_emails': bool,
            'swift': str,
            'terms': str,
            'user_id': int,
            'user_signature': str,
            'vat_number': str,
            'years_of_experience': int
        }

        self.attribute_map = {
            'accountant_email': 'AccountantEmail',
            'address': 'Address',
            'api_key': 'ApiKey',
            'api_secret': 'ApiSecret',
            'background_image': 'BackgroundImage',
            'bank': 'Bank',
            'bank_account': 'BankAccount',
            'cname': 'Cname',
            'company_registration_number': 'CompanyRegistrationNumber',
            'country': 'Country',
            'country_id': 'CountryId',
            'currency': 'Currency',
            'currency_id': 'CurrencyId',
            'currency_symbol': 'CurrencySymbol',
            'default_date_format': 'DefaultDateFormat',
            'default_due_date_in_days': 'DefaultDueDateInDays',
            'do_not_track': 'DoNotTrack',
            'enable_client_portal': 'EnableClientPortal',
            'enable_predictive_invoicing': 'EnablePredictiveInvoicing',
            'enable_recurring_invoicing': 'EnableRecurringInvoicing',
            'has_invoice_logo': 'HasInvoiceLogo',
            'iban': 'Iban',
            'id': 'Id',
            'invoice_template': 'InvoiceTemplate',
            'invoice_template_color_hex': 'InvoiceTemplateColorHex',
            'phone_number': 'PhoneNumber',
            'profession': 'Profession',
            'receive_sms_notifications': 'ReceiveSmsNotifications',
            'referral_program': 'ReferralProgram',
            'store_checkout_fields': 'StoreCheckoutFields',
            'store_color_hex': 'StoreColorHex',
            'store_currency': 'StoreCurrency',
            'store_currency_id': 'StoreCurrencyId',
            'store_custom_java_script': 'StoreCustomJavaScript',
            'store_description': 'StoreDescription',
            'store_email': 'StoreEmail',
            'store_language': 'StoreLanguage',
            'store_language_id': 'StoreLanguageId',
            'store_name': 'StoreName',
            'store_purchase_email_message': 'StorePurchaseEmailMessage',
            'store_purchase_thank_you_message': 'StorePurchaseThankYouMessage',
            'store_text_color_hex': 'StoreTextColorHex',
            'store_url': 'StoreUrl',
            'subscribe_to_product_emails': 'SubscribeToProductEmails',
            'swift': 'Swift',
            'terms': 'Terms',
            'user_id': 'UserId',
            'user_signature': 'UserSignature',
            'vat_number': 'VatNumber',
            'years_of_experience': 'YearsOfExperience'
        }

        self._accountant_email = accountant_email
        self._address = address
        self._api_key = api_key
        self._api_secret = api_secret
        self._background_image = background_image
        self._bank = bank
        self._bank_account = bank_account
        self._cname = cname
        self._company_registration_number = company_registration_number
        self._country = country
        self._country_id = country_id
        self._currency = currency
        self._currency_id = currency_id
        self._currency_symbol = currency_symbol
        self._default_date_format = default_date_format
        self._default_due_date_in_days = default_due_date_in_days
        self._do_not_track = do_not_track
        self._enable_client_portal = enable_client_portal
        self._enable_predictive_invoicing = enable_predictive_invoicing
        self._enable_recurring_invoicing = enable_recurring_invoicing
        self._has_invoice_logo = has_invoice_logo
        self._iban = iban
        self._id = id
        self._invoice_template = invoice_template
        self._invoice_template_color_hex = invoice_template_color_hex
        self._phone_number = phone_number
        self._profession = profession
        self._receive_sms_notifications = receive_sms_notifications
        self._referral_program = referral_program
        self._store_checkout_fields = store_checkout_fields
        self._store_color_hex = store_color_hex
        self._store_currency = store_currency
        self._store_currency_id = store_currency_id
        self._store_custom_java_script = store_custom_java_script
        self._store_description = store_description
        self._store_email = store_email
        self._store_language = store_language
        self._store_language_id = store_language_id
        self._store_name = store_name
        self._store_purchase_email_message = store_purchase_email_message
        self._store_purchase_thank_you_message = store_purchase_thank_you_message
        self._store_text_color_hex = store_text_color_hex
        self._store_url = store_url
        self._subscribe_to_product_emails = subscribe_to_product_emails
        self._swift = swift
        self._terms = terms
        self._user_id = user_id
        self._user_signature = user_signature
        self._vat_number = vat_number
        self._years_of_experience = years_of_experience

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserSettings of this UserSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accountant_email(self):
        """Gets the accountant_email of this UserSettings.


        :return: The accountant_email of this UserSettings.
        :rtype: str
        """
        return self._accountant_email

    @accountant_email.setter
    def accountant_email(self, accountant_email):
        """Sets the accountant_email of this UserSettings.


        :param accountant_email: The accountant_email of this UserSettings.
        :type accountant_email: str
        """

        self._accountant_email = accountant_email

    @property
    def address(self):
        """Gets the address of this UserSettings.


        :return: The address of this UserSettings.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UserSettings.


        :param address: The address of this UserSettings.
        :type address: str
        """

        self._address = address

    @property
    def api_key(self):
        """Gets the api_key of this UserSettings.


        :return: The api_key of this UserSettings.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this UserSettings.


        :param api_key: The api_key of this UserSettings.
        :type api_key: str
        """

        self._api_key = api_key

    @property
    def api_secret(self):
        """Gets the api_secret of this UserSettings.


        :return: The api_secret of this UserSettings.
        :rtype: str
        """
        return self._api_secret

    @api_secret.setter
    def api_secret(self, api_secret):
        """Sets the api_secret of this UserSettings.


        :param api_secret: The api_secret of this UserSettings.
        :type api_secret: str
        """

        self._api_secret = api_secret

    @property
    def background_image(self):
        """Gets the background_image of this UserSettings.


        :return: The background_image of this UserSettings.
        :rtype: str
        """
        return self._background_image

    @background_image.setter
    def background_image(self, background_image):
        """Sets the background_image of this UserSettings.


        :param background_image: The background_image of this UserSettings.
        :type background_image: str
        """

        self._background_image = background_image

    @property
    def bank(self):
        """Gets the bank of this UserSettings.


        :return: The bank of this UserSettings.
        :rtype: str
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this UserSettings.


        :param bank: The bank of this UserSettings.
        :type bank: str
        """

        self._bank = bank

    @property
    def bank_account(self):
        """Gets the bank_account of this UserSettings.


        :return: The bank_account of this UserSettings.
        :rtype: str
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this UserSettings.


        :param bank_account: The bank_account of this UserSettings.
        :type bank_account: str
        """

        self._bank_account = bank_account

    @property
    def cname(self):
        """Gets the cname of this UserSettings.


        :return: The cname of this UserSettings.
        :rtype: str
        """
        return self._cname

    @cname.setter
    def cname(self, cname):
        """Sets the cname of this UserSettings.


        :param cname: The cname of this UserSettings.
        :type cname: str
        """

        self._cname = cname

    @property
    def company_registration_number(self):
        """Gets the company_registration_number of this UserSettings.


        :return: The company_registration_number of this UserSettings.
        :rtype: str
        """
        return self._company_registration_number

    @company_registration_number.setter
    def company_registration_number(self, company_registration_number):
        """Sets the company_registration_number of this UserSettings.


        :param company_registration_number: The company_registration_number of this UserSettings.
        :type company_registration_number: str
        """

        self._company_registration_number = company_registration_number

    @property
    def country(self):
        """Gets the country of this UserSettings.


        :return: The country of this UserSettings.
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UserSettings.


        :param country: The country of this UserSettings.
        :type country: Country
        """

        self._country = country

    @property
    def country_id(self):
        """Gets the country_id of this UserSettings.


        :return: The country_id of this UserSettings.
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this UserSettings.


        :param country_id: The country_id of this UserSettings.
        :type country_id: int
        """

        self._country_id = country_id

    @property
    def currency(self):
        """Gets the currency of this UserSettings.


        :return: The currency of this UserSettings.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this UserSettings.


        :param currency: The currency of this UserSettings.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def currency_id(self):
        """Gets the currency_id of this UserSettings.


        :return: The currency_id of this UserSettings.
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this UserSettings.


        :param currency_id: The currency_id of this UserSettings.
        :type currency_id: int
        """

        self._currency_id = currency_id

    @property
    def currency_symbol(self):
        """Gets the currency_symbol of this UserSettings.


        :return: The currency_symbol of this UserSettings.
        :rtype: str
        """
        return self._currency_symbol

    @currency_symbol.setter
    def currency_symbol(self, currency_symbol):
        """Sets the currency_symbol of this UserSettings.


        :param currency_symbol: The currency_symbol of this UserSettings.
        :type currency_symbol: str
        """

        self._currency_symbol = currency_symbol

    @property
    def default_date_format(self):
        """Gets the default_date_format of this UserSettings.


        :return: The default_date_format of this UserSettings.
        :rtype: str
        """
        return self._default_date_format

    @default_date_format.setter
    def default_date_format(self, default_date_format):
        """Sets the default_date_format of this UserSettings.


        :param default_date_format: The default_date_format of this UserSettings.
        :type default_date_format: str
        """

        self._default_date_format = default_date_format

    @property
    def default_due_date_in_days(self):
        """Gets the default_due_date_in_days of this UserSettings.


        :return: The default_due_date_in_days of this UserSettings.
        :rtype: int
        """
        return self._default_due_date_in_days

    @default_due_date_in_days.setter
    def default_due_date_in_days(self, default_due_date_in_days):
        """Sets the default_due_date_in_days of this UserSettings.


        :param default_due_date_in_days: The default_due_date_in_days of this UserSettings.
        :type default_due_date_in_days: int
        """

        self._default_due_date_in_days = default_due_date_in_days

    @property
    def do_not_track(self):
        """Gets the do_not_track of this UserSettings.


        :return: The do_not_track of this UserSettings.
        :rtype: bool
        """
        return self._do_not_track

    @do_not_track.setter
    def do_not_track(self, do_not_track):
        """Sets the do_not_track of this UserSettings.


        :param do_not_track: The do_not_track of this UserSettings.
        :type do_not_track: bool
        """

        self._do_not_track = do_not_track

    @property
    def enable_client_portal(self):
        """Gets the enable_client_portal of this UserSettings.


        :return: The enable_client_portal of this UserSettings.
        :rtype: bool
        """
        return self._enable_client_portal

    @enable_client_portal.setter
    def enable_client_portal(self, enable_client_portal):
        """Sets the enable_client_portal of this UserSettings.


        :param enable_client_portal: The enable_client_portal of this UserSettings.
        :type enable_client_portal: bool
        """

        self._enable_client_portal = enable_client_portal

    @property
    def enable_predictive_invoicing(self):
        """Gets the enable_predictive_invoicing of this UserSettings.


        :return: The enable_predictive_invoicing of this UserSettings.
        :rtype: bool
        """
        return self._enable_predictive_invoicing

    @enable_predictive_invoicing.setter
    def enable_predictive_invoicing(self, enable_predictive_invoicing):
        """Sets the enable_predictive_invoicing of this UserSettings.


        :param enable_predictive_invoicing: The enable_predictive_invoicing of this UserSettings.
        :type enable_predictive_invoicing: bool
        """

        self._enable_predictive_invoicing = enable_predictive_invoicing

    @property
    def enable_recurring_invoicing(self):
        """Gets the enable_recurring_invoicing of this UserSettings.


        :return: The enable_recurring_invoicing of this UserSettings.
        :rtype: bool
        """
        return self._enable_recurring_invoicing

    @enable_recurring_invoicing.setter
    def enable_recurring_invoicing(self, enable_recurring_invoicing):
        """Sets the enable_recurring_invoicing of this UserSettings.


        :param enable_recurring_invoicing: The enable_recurring_invoicing of this UserSettings.
        :type enable_recurring_invoicing: bool
        """

        self._enable_recurring_invoicing = enable_recurring_invoicing

    @property
    def has_invoice_logo(self):
        """Gets the has_invoice_logo of this UserSettings.


        :return: The has_invoice_logo of this UserSettings.
        :rtype: bool
        """
        return self._has_invoice_logo

    @has_invoice_logo.setter
    def has_invoice_logo(self, has_invoice_logo):
        """Sets the has_invoice_logo of this UserSettings.


        :param has_invoice_logo: The has_invoice_logo of this UserSettings.
        :type has_invoice_logo: bool
        """

        self._has_invoice_logo = has_invoice_logo

    @property
    def iban(self):
        """Gets the iban of this UserSettings.


        :return: The iban of this UserSettings.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this UserSettings.


        :param iban: The iban of this UserSettings.
        :type iban: str
        """

        self._iban = iban

    @property
    def id(self):
        """Gets the id of this UserSettings.


        :return: The id of this UserSettings.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserSettings.


        :param id: The id of this UserSettings.
        :type id: int
        """

        self._id = id

    @property
    def invoice_template(self):
        """Gets the invoice_template of this UserSettings.


        :return: The invoice_template of this UserSettings.
        :rtype: str
        """
        return self._invoice_template

    @invoice_template.setter
    def invoice_template(self, invoice_template):
        """Sets the invoice_template of this UserSettings.


        :param invoice_template: The invoice_template of this UserSettings.
        :type invoice_template: str
        """
        allowed_values = ["Default", "Template1", "Template2"]  # noqa: E501
        if invoice_template not in allowed_values:
            raise ValueError(
                "Invalid value for `invoice_template` ({0}), must be one of {1}"
                .format(invoice_template, allowed_values)
            )

        self._invoice_template = invoice_template

    @property
    def invoice_template_color_hex(self):
        """Gets the invoice_template_color_hex of this UserSettings.


        :return: The invoice_template_color_hex of this UserSettings.
        :rtype: str
        """
        return self._invoice_template_color_hex

    @invoice_template_color_hex.setter
    def invoice_template_color_hex(self, invoice_template_color_hex):
        """Sets the invoice_template_color_hex of this UserSettings.


        :param invoice_template_color_hex: The invoice_template_color_hex of this UserSettings.
        :type invoice_template_color_hex: str
        """

        self._invoice_template_color_hex = invoice_template_color_hex

    @property
    def phone_number(self):
        """Gets the phone_number of this UserSettings.


        :return: The phone_number of this UserSettings.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserSettings.


        :param phone_number: The phone_number of this UserSettings.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def profession(self):
        """Gets the profession of this UserSettings.


        :return: The profession of this UserSettings.
        :rtype: str
        """
        return self._profession

    @profession.setter
    def profession(self, profession):
        """Sets the profession of this UserSettings.


        :param profession: The profession of this UserSettings.
        :type profession: str
        """
        allowed_values = ["Other", "DesignAndCreative", "SoftwareDevelopment", "ContentWritingAndMarketing", "Freelancers", "Consultants", "Smes", "Enterprise", "ECommerce", "Individual"]  # noqa: E501
        if profession not in allowed_values:
            raise ValueError(
                "Invalid value for `profession` ({0}), must be one of {1}"
                .format(profession, allowed_values)
            )

        self._profession = profession

    @property
    def receive_sms_notifications(self):
        """Gets the receive_sms_notifications of this UserSettings.


        :return: The receive_sms_notifications of this UserSettings.
        :rtype: bool
        """
        return self._receive_sms_notifications

    @receive_sms_notifications.setter
    def receive_sms_notifications(self, receive_sms_notifications):
        """Sets the receive_sms_notifications of this UserSettings.


        :param receive_sms_notifications: The receive_sms_notifications of this UserSettings.
        :type receive_sms_notifications: bool
        """

        self._receive_sms_notifications = receive_sms_notifications

    @property
    def referral_program(self):
        """Gets the referral_program of this UserSettings.


        :return: The referral_program of this UserSettings.
        :rtype: str
        """
        return self._referral_program

    @referral_program.setter
    def referral_program(self, referral_program):
        """Sets the referral_program of this UserSettings.


        :param referral_program: The referral_program of this UserSettings.
        :type referral_program: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if referral_program not in allowed_values:
            raise ValueError(
                "Invalid value for `referral_program` ({0}), must be one of {1}"
                .format(referral_program, allowed_values)
            )

        self._referral_program = referral_program

    @property
    def store_checkout_fields(self):
        """Gets the store_checkout_fields of this UserSettings.


        :return: The store_checkout_fields of this UserSettings.
        :rtype: str
        """
        return self._store_checkout_fields

    @store_checkout_fields.setter
    def store_checkout_fields(self, store_checkout_fields):
        """Sets the store_checkout_fields of this UserSettings.


        :param store_checkout_fields: The store_checkout_fields of this UserSettings.
        :type store_checkout_fields: str
        """
        allowed_values = ["ShowMinimumRequiredFields", "ShowAllFields"]  # noqa: E501
        if store_checkout_fields not in allowed_values:
            raise ValueError(
                "Invalid value for `store_checkout_fields` ({0}), must be one of {1}"
                .format(store_checkout_fields, allowed_values)
            )

        self._store_checkout_fields = store_checkout_fields

    @property
    def store_color_hex(self):
        """Gets the store_color_hex of this UserSettings.


        :return: The store_color_hex of this UserSettings.
        :rtype: str
        """
        return self._store_color_hex

    @store_color_hex.setter
    def store_color_hex(self, store_color_hex):
        """Sets the store_color_hex of this UserSettings.


        :param store_color_hex: The store_color_hex of this UserSettings.
        :type store_color_hex: str
        """

        self._store_color_hex = store_color_hex

    @property
    def store_currency(self):
        """Gets the store_currency of this UserSettings.


        :return: The store_currency of this UserSettings.
        :rtype: Currency
        """
        return self._store_currency

    @store_currency.setter
    def store_currency(self, store_currency):
        """Sets the store_currency of this UserSettings.


        :param store_currency: The store_currency of this UserSettings.
        :type store_currency: Currency
        """

        self._store_currency = store_currency

    @property
    def store_currency_id(self):
        """Gets the store_currency_id of this UserSettings.


        :return: The store_currency_id of this UserSettings.
        :rtype: int
        """
        return self._store_currency_id

    @store_currency_id.setter
    def store_currency_id(self, store_currency_id):
        """Sets the store_currency_id of this UserSettings.


        :param store_currency_id: The store_currency_id of this UserSettings.
        :type store_currency_id: int
        """

        self._store_currency_id = store_currency_id

    @property
    def store_custom_java_script(self):
        """Gets the store_custom_java_script of this UserSettings.


        :return: The store_custom_java_script of this UserSettings.
        :rtype: str
        """
        return self._store_custom_java_script

    @store_custom_java_script.setter
    def store_custom_java_script(self, store_custom_java_script):
        """Sets the store_custom_java_script of this UserSettings.


        :param store_custom_java_script: The store_custom_java_script of this UserSettings.
        :type store_custom_java_script: str
        """

        self._store_custom_java_script = store_custom_java_script

    @property
    def store_description(self):
        """Gets the store_description of this UserSettings.


        :return: The store_description of this UserSettings.
        :rtype: str
        """
        return self._store_description

    @store_description.setter
    def store_description(self, store_description):
        """Sets the store_description of this UserSettings.


        :param store_description: The store_description of this UserSettings.
        :type store_description: str
        """

        self._store_description = store_description

    @property
    def store_email(self):
        """Gets the store_email of this UserSettings.


        :return: The store_email of this UserSettings.
        :rtype: str
        """
        return self._store_email

    @store_email.setter
    def store_email(self, store_email):
        """Sets the store_email of this UserSettings.


        :param store_email: The store_email of this UserSettings.
        :type store_email: str
        """

        self._store_email = store_email

    @property
    def store_language(self):
        """Gets the store_language of this UserSettings.


        :return: The store_language of this UserSettings.
        :rtype: UiLanguage
        """
        return self._store_language

    @store_language.setter
    def store_language(self, store_language):
        """Sets the store_language of this UserSettings.


        :param store_language: The store_language of this UserSettings.
        :type store_language: UiLanguage
        """

        self._store_language = store_language

    @property
    def store_language_id(self):
        """Gets the store_language_id of this UserSettings.


        :return: The store_language_id of this UserSettings.
        :rtype: int
        """
        return self._store_language_id

    @store_language_id.setter
    def store_language_id(self, store_language_id):
        """Sets the store_language_id of this UserSettings.


        :param store_language_id: The store_language_id of this UserSettings.
        :type store_language_id: int
        """

        self._store_language_id = store_language_id

    @property
    def store_name(self):
        """Gets the store_name of this UserSettings.


        :return: The store_name of this UserSettings.
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name):
        """Sets the store_name of this UserSettings.


        :param store_name: The store_name of this UserSettings.
        :type store_name: str
        """

        self._store_name = store_name

    @property
    def store_purchase_email_message(self):
        """Gets the store_purchase_email_message of this UserSettings.


        :return: The store_purchase_email_message of this UserSettings.
        :rtype: str
        """
        return self._store_purchase_email_message

    @store_purchase_email_message.setter
    def store_purchase_email_message(self, store_purchase_email_message):
        """Sets the store_purchase_email_message of this UserSettings.


        :param store_purchase_email_message: The store_purchase_email_message of this UserSettings.
        :type store_purchase_email_message: str
        """

        self._store_purchase_email_message = store_purchase_email_message

    @property
    def store_purchase_thank_you_message(self):
        """Gets the store_purchase_thank_you_message of this UserSettings.


        :return: The store_purchase_thank_you_message of this UserSettings.
        :rtype: str
        """
        return self._store_purchase_thank_you_message

    @store_purchase_thank_you_message.setter
    def store_purchase_thank_you_message(self, store_purchase_thank_you_message):
        """Sets the store_purchase_thank_you_message of this UserSettings.


        :param store_purchase_thank_you_message: The store_purchase_thank_you_message of this UserSettings.
        :type store_purchase_thank_you_message: str
        """

        self._store_purchase_thank_you_message = store_purchase_thank_you_message

    @property
    def store_text_color_hex(self):
        """Gets the store_text_color_hex of this UserSettings.


        :return: The store_text_color_hex of this UserSettings.
        :rtype: str
        """
        return self._store_text_color_hex

    @store_text_color_hex.setter
    def store_text_color_hex(self, store_text_color_hex):
        """Sets the store_text_color_hex of this UserSettings.


        :param store_text_color_hex: The store_text_color_hex of this UserSettings.
        :type store_text_color_hex: str
        """

        self._store_text_color_hex = store_text_color_hex

    @property
    def store_url(self):
        """Gets the store_url of this UserSettings.


        :return: The store_url of this UserSettings.
        :rtype: str
        """
        return self._store_url

    @store_url.setter
    def store_url(self, store_url):
        """Sets the store_url of this UserSettings.


        :param store_url: The store_url of this UserSettings.
        :type store_url: str
        """

        self._store_url = store_url

    @property
    def subscribe_to_product_emails(self):
        """Gets the subscribe_to_product_emails of this UserSettings.


        :return: The subscribe_to_product_emails of this UserSettings.
        :rtype: bool
        """
        return self._subscribe_to_product_emails

    @subscribe_to_product_emails.setter
    def subscribe_to_product_emails(self, subscribe_to_product_emails):
        """Sets the subscribe_to_product_emails of this UserSettings.


        :param subscribe_to_product_emails: The subscribe_to_product_emails of this UserSettings.
        :type subscribe_to_product_emails: bool
        """

        self._subscribe_to_product_emails = subscribe_to_product_emails

    @property
    def swift(self):
        """Gets the swift of this UserSettings.


        :return: The swift of this UserSettings.
        :rtype: str
        """
        return self._swift

    @swift.setter
    def swift(self, swift):
        """Sets the swift of this UserSettings.


        :param swift: The swift of this UserSettings.
        :type swift: str
        """

        self._swift = swift

    @property
    def terms(self):
        """Gets the terms of this UserSettings.


        :return: The terms of this UserSettings.
        :rtype: str
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this UserSettings.


        :param terms: The terms of this UserSettings.
        :type terms: str
        """

        self._terms = terms

    @property
    def user_id(self):
        """Gets the user_id of this UserSettings.


        :return: The user_id of this UserSettings.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserSettings.


        :param user_id: The user_id of this UserSettings.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def user_signature(self):
        """Gets the user_signature of this UserSettings.


        :return: The user_signature of this UserSettings.
        :rtype: str
        """
        return self._user_signature

    @user_signature.setter
    def user_signature(self, user_signature):
        """Sets the user_signature of this UserSettings.


        :param user_signature: The user_signature of this UserSettings.
        :type user_signature: str
        """

        self._user_signature = user_signature

    @property
    def vat_number(self):
        """Gets the vat_number of this UserSettings.


        :return: The vat_number of this UserSettings.
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """Sets the vat_number of this UserSettings.


        :param vat_number: The vat_number of this UserSettings.
        :type vat_number: str
        """

        self._vat_number = vat_number

    @property
    def years_of_experience(self):
        """Gets the years_of_experience of this UserSettings.


        :return: The years_of_experience of this UserSettings.
        :rtype: int
        """
        return self._years_of_experience

    @years_of_experience.setter
    def years_of_experience(self, years_of_experience):
        """Sets the years_of_experience of this UserSettings.


        :param years_of_experience: The years_of_experience of this UserSettings.
        :type years_of_experience: int
        """

        self._years_of_experience = years_of_experience
