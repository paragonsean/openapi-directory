# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionPlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancellated_on: datetime=None, coupon_code: str=None, currency_code: str=None, external_identifier: str=None, features: List[str]=None, has_due_payment: bool=None, has_due_payment_since: datetime=None, id: int=None, identifier: str=None, is_active: bool=None, is_lifetime: bool=None, last_payment_on: datetime=None, max_clients: int=None, name: str=None, on_hold: bool=None, order_identifier: str=None, price: float=None, recurrence: str=None, sale_id: int=None, status: str=None, system_cancelation_reason: str=None, trial_ends_on: datetime=None, trial_number_of_days: int=None, trial_starts_on: datetime=None, user_id: int=None, version: int=None):
        """SubscriptionPlan - a model defined in OpenAPI

        :param cancellated_on: The cancellated_on of this SubscriptionPlan.
        :param coupon_code: The coupon_code of this SubscriptionPlan.
        :param currency_code: The currency_code of this SubscriptionPlan.
        :param external_identifier: The external_identifier of this SubscriptionPlan.
        :param features: The features of this SubscriptionPlan.
        :param has_due_payment: The has_due_payment of this SubscriptionPlan.
        :param has_due_payment_since: The has_due_payment_since of this SubscriptionPlan.
        :param id: The id of this SubscriptionPlan.
        :param identifier: The identifier of this SubscriptionPlan.
        :param is_active: The is_active of this SubscriptionPlan.
        :param is_lifetime: The is_lifetime of this SubscriptionPlan.
        :param last_payment_on: The last_payment_on of this SubscriptionPlan.
        :param max_clients: The max_clients of this SubscriptionPlan.
        :param name: The name of this SubscriptionPlan.
        :param on_hold: The on_hold of this SubscriptionPlan.
        :param order_identifier: The order_identifier of this SubscriptionPlan.
        :param price: The price of this SubscriptionPlan.
        :param recurrence: The recurrence of this SubscriptionPlan.
        :param sale_id: The sale_id of this SubscriptionPlan.
        :param status: The status of this SubscriptionPlan.
        :param system_cancelation_reason: The system_cancelation_reason of this SubscriptionPlan.
        :param trial_ends_on: The trial_ends_on of this SubscriptionPlan.
        :param trial_number_of_days: The trial_number_of_days of this SubscriptionPlan.
        :param trial_starts_on: The trial_starts_on of this SubscriptionPlan.
        :param user_id: The user_id of this SubscriptionPlan.
        :param version: The version of this SubscriptionPlan.
        """
        self.openapi_types = {
            'cancellated_on': datetime,
            'coupon_code': str,
            'currency_code': str,
            'external_identifier': str,
            'features': List[str],
            'has_due_payment': bool,
            'has_due_payment_since': datetime,
            'id': int,
            'identifier': str,
            'is_active': bool,
            'is_lifetime': bool,
            'last_payment_on': datetime,
            'max_clients': int,
            'name': str,
            'on_hold': bool,
            'order_identifier': str,
            'price': float,
            'recurrence': str,
            'sale_id': int,
            'status': str,
            'system_cancelation_reason': str,
            'trial_ends_on': datetime,
            'trial_number_of_days': int,
            'trial_starts_on': datetime,
            'user_id': int,
            'version': int
        }

        self.attribute_map = {
            'cancellated_on': 'CancellatedOn',
            'coupon_code': 'CouponCode',
            'currency_code': 'CurrencyCode',
            'external_identifier': 'ExternalIdentifier',
            'features': 'Features',
            'has_due_payment': 'HasDuePayment',
            'has_due_payment_since': 'HasDuePaymentSince',
            'id': 'Id',
            'identifier': 'Identifier',
            'is_active': 'IsActive',
            'is_lifetime': 'IsLifetime',
            'last_payment_on': 'LastPaymentOn',
            'max_clients': 'MaxClients',
            'name': 'Name',
            'on_hold': 'OnHold',
            'order_identifier': 'OrderIdentifier',
            'price': 'Price',
            'recurrence': 'Recurrence',
            'sale_id': 'SaleId',
            'status': 'Status',
            'system_cancelation_reason': 'SystemCancelationReason',
            'trial_ends_on': 'TrialEndsOn',
            'trial_number_of_days': 'TrialNumberOfDays',
            'trial_starts_on': 'TrialStartsOn',
            'user_id': 'UserId',
            'version': 'Version'
        }

        self._cancellated_on = cancellated_on
        self._coupon_code = coupon_code
        self._currency_code = currency_code
        self._external_identifier = external_identifier
        self._features = features
        self._has_due_payment = has_due_payment
        self._has_due_payment_since = has_due_payment_since
        self._id = id
        self._identifier = identifier
        self._is_active = is_active
        self._is_lifetime = is_lifetime
        self._last_payment_on = last_payment_on
        self._max_clients = max_clients
        self._name = name
        self._on_hold = on_hold
        self._order_identifier = order_identifier
        self._price = price
        self._recurrence = recurrence
        self._sale_id = sale_id
        self._status = status
        self._system_cancelation_reason = system_cancelation_reason
        self._trial_ends_on = trial_ends_on
        self._trial_number_of_days = trial_number_of_days
        self._trial_starts_on = trial_starts_on
        self._user_id = user_id
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionPlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionPlan of this SubscriptionPlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancellated_on(self):
        """Gets the cancellated_on of this SubscriptionPlan.


        :return: The cancellated_on of this SubscriptionPlan.
        :rtype: datetime
        """
        return self._cancellated_on

    @cancellated_on.setter
    def cancellated_on(self, cancellated_on):
        """Sets the cancellated_on of this SubscriptionPlan.


        :param cancellated_on: The cancellated_on of this SubscriptionPlan.
        :type cancellated_on: datetime
        """

        self._cancellated_on = cancellated_on

    @property
    def coupon_code(self):
        """Gets the coupon_code of this SubscriptionPlan.


        :return: The coupon_code of this SubscriptionPlan.
        :rtype: str
        """
        return self._coupon_code

    @coupon_code.setter
    def coupon_code(self, coupon_code):
        """Sets the coupon_code of this SubscriptionPlan.


        :param coupon_code: The coupon_code of this SubscriptionPlan.
        :type coupon_code: str
        """

        self._coupon_code = coupon_code

    @property
    def currency_code(self):
        """Gets the currency_code of this SubscriptionPlan.


        :return: The currency_code of this SubscriptionPlan.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this SubscriptionPlan.


        :param currency_code: The currency_code of this SubscriptionPlan.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def external_identifier(self):
        """Gets the external_identifier of this SubscriptionPlan.


        :return: The external_identifier of this SubscriptionPlan.
        :rtype: str
        """
        return self._external_identifier

    @external_identifier.setter
    def external_identifier(self, external_identifier):
        """Sets the external_identifier of this SubscriptionPlan.


        :param external_identifier: The external_identifier of this SubscriptionPlan.
        :type external_identifier: str
        """

        self._external_identifier = external_identifier

    @property
    def features(self):
        """Gets the features of this SubscriptionPlan.


        :return: The features of this SubscriptionPlan.
        :rtype: List[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this SubscriptionPlan.


        :param features: The features of this SubscriptionPlan.
        :type features: List[str]
        """
        allowed_values = ["Api", "Teams", "Clients", "Shop", "PaymentLinks", "Cname"]  # noqa: E501
        if not set(features).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `features` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(features) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._features = features

    @property
    def has_due_payment(self):
        """Gets the has_due_payment of this SubscriptionPlan.


        :return: The has_due_payment of this SubscriptionPlan.
        :rtype: bool
        """
        return self._has_due_payment

    @has_due_payment.setter
    def has_due_payment(self, has_due_payment):
        """Sets the has_due_payment of this SubscriptionPlan.


        :param has_due_payment: The has_due_payment of this SubscriptionPlan.
        :type has_due_payment: bool
        """

        self._has_due_payment = has_due_payment

    @property
    def has_due_payment_since(self):
        """Gets the has_due_payment_since of this SubscriptionPlan.


        :return: The has_due_payment_since of this SubscriptionPlan.
        :rtype: datetime
        """
        return self._has_due_payment_since

    @has_due_payment_since.setter
    def has_due_payment_since(self, has_due_payment_since):
        """Sets the has_due_payment_since of this SubscriptionPlan.


        :param has_due_payment_since: The has_due_payment_since of this SubscriptionPlan.
        :type has_due_payment_since: datetime
        """

        self._has_due_payment_since = has_due_payment_since

    @property
    def id(self):
        """Gets the id of this SubscriptionPlan.


        :return: The id of this SubscriptionPlan.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionPlan.


        :param id: The id of this SubscriptionPlan.
        :type id: int
        """

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this SubscriptionPlan.


        :return: The identifier of this SubscriptionPlan.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this SubscriptionPlan.


        :param identifier: The identifier of this SubscriptionPlan.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def is_active(self):
        """Gets the is_active of this SubscriptionPlan.


        :return: The is_active of this SubscriptionPlan.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SubscriptionPlan.


        :param is_active: The is_active of this SubscriptionPlan.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_lifetime(self):
        """Gets the is_lifetime of this SubscriptionPlan.


        :return: The is_lifetime of this SubscriptionPlan.
        :rtype: bool
        """
        return self._is_lifetime

    @is_lifetime.setter
    def is_lifetime(self, is_lifetime):
        """Sets the is_lifetime of this SubscriptionPlan.


        :param is_lifetime: The is_lifetime of this SubscriptionPlan.
        :type is_lifetime: bool
        """

        self._is_lifetime = is_lifetime

    @property
    def last_payment_on(self):
        """Gets the last_payment_on of this SubscriptionPlan.


        :return: The last_payment_on of this SubscriptionPlan.
        :rtype: datetime
        """
        return self._last_payment_on

    @last_payment_on.setter
    def last_payment_on(self, last_payment_on):
        """Sets the last_payment_on of this SubscriptionPlan.


        :param last_payment_on: The last_payment_on of this SubscriptionPlan.
        :type last_payment_on: datetime
        """

        self._last_payment_on = last_payment_on

    @property
    def max_clients(self):
        """Gets the max_clients of this SubscriptionPlan.


        :return: The max_clients of this SubscriptionPlan.
        :rtype: int
        """
        return self._max_clients

    @max_clients.setter
    def max_clients(self, max_clients):
        """Sets the max_clients of this SubscriptionPlan.


        :param max_clients: The max_clients of this SubscriptionPlan.
        :type max_clients: int
        """

        self._max_clients = max_clients

    @property
    def name(self):
        """Gets the name of this SubscriptionPlan.


        :return: The name of this SubscriptionPlan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscriptionPlan.


        :param name: The name of this SubscriptionPlan.
        :type name: str
        """

        self._name = name

    @property
    def on_hold(self):
        """Gets the on_hold of this SubscriptionPlan.


        :return: The on_hold of this SubscriptionPlan.
        :rtype: bool
        """
        return self._on_hold

    @on_hold.setter
    def on_hold(self, on_hold):
        """Sets the on_hold of this SubscriptionPlan.


        :param on_hold: The on_hold of this SubscriptionPlan.
        :type on_hold: bool
        """

        self._on_hold = on_hold

    @property
    def order_identifier(self):
        """Gets the order_identifier of this SubscriptionPlan.


        :return: The order_identifier of this SubscriptionPlan.
        :rtype: str
        """
        return self._order_identifier

    @order_identifier.setter
    def order_identifier(self, order_identifier):
        """Sets the order_identifier of this SubscriptionPlan.


        :param order_identifier: The order_identifier of this SubscriptionPlan.
        :type order_identifier: str
        """

        self._order_identifier = order_identifier

    @property
    def price(self):
        """Gets the price of this SubscriptionPlan.


        :return: The price of this SubscriptionPlan.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SubscriptionPlan.


        :param price: The price of this SubscriptionPlan.
        :type price: float
        """

        self._price = price

    @property
    def recurrence(self):
        """Gets the recurrence of this SubscriptionPlan.


        :return: The recurrence of this SubscriptionPlan.
        :rtype: str
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this SubscriptionPlan.


        :param recurrence: The recurrence of this SubscriptionPlan.
        :type recurrence: str
        """
        allowed_values = ["Monthly", "Yearly"]  # noqa: E501
        if recurrence not in allowed_values:
            raise ValueError(
                "Invalid value for `recurrence` ({0}), must be one of {1}"
                .format(recurrence, allowed_values)
            )

        self._recurrence = recurrence

    @property
    def sale_id(self):
        """Gets the sale_id of this SubscriptionPlan.


        :return: The sale_id of this SubscriptionPlan.
        :rtype: int
        """
        return self._sale_id

    @sale_id.setter
    def sale_id(self, sale_id):
        """Sets the sale_id of this SubscriptionPlan.


        :param sale_id: The sale_id of this SubscriptionPlan.
        :type sale_id: int
        """

        self._sale_id = sale_id

    @property
    def status(self):
        """Gets the status of this SubscriptionPlan.


        :return: The status of this SubscriptionPlan.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionPlan.


        :param status: The status of this SubscriptionPlan.
        :type status: str
        """
        allowed_values = ["ActiveTrial", "ExpiredTrial", "Active", "Canceled", "Fraudlent"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def system_cancelation_reason(self):
        """Gets the system_cancelation_reason of this SubscriptionPlan.


        :return: The system_cancelation_reason of this SubscriptionPlan.
        :rtype: str
        """
        return self._system_cancelation_reason

    @system_cancelation_reason.setter
    def system_cancelation_reason(self, system_cancelation_reason):
        """Sets the system_cancelation_reason of this SubscriptionPlan.


        :param system_cancelation_reason: The system_cancelation_reason of this SubscriptionPlan.
        :type system_cancelation_reason: str
        """
        allowed_values = ["FailToCaptureFee", "Fraud"]  # noqa: E501
        if system_cancelation_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `system_cancelation_reason` ({0}), must be one of {1}"
                .format(system_cancelation_reason, allowed_values)
            )

        self._system_cancelation_reason = system_cancelation_reason

    @property
    def trial_ends_on(self):
        """Gets the trial_ends_on of this SubscriptionPlan.


        :return: The trial_ends_on of this SubscriptionPlan.
        :rtype: datetime
        """
        return self._trial_ends_on

    @trial_ends_on.setter
    def trial_ends_on(self, trial_ends_on):
        """Sets the trial_ends_on of this SubscriptionPlan.


        :param trial_ends_on: The trial_ends_on of this SubscriptionPlan.
        :type trial_ends_on: datetime
        """

        self._trial_ends_on = trial_ends_on

    @property
    def trial_number_of_days(self):
        """Gets the trial_number_of_days of this SubscriptionPlan.


        :return: The trial_number_of_days of this SubscriptionPlan.
        :rtype: int
        """
        return self._trial_number_of_days

    @trial_number_of_days.setter
    def trial_number_of_days(self, trial_number_of_days):
        """Sets the trial_number_of_days of this SubscriptionPlan.


        :param trial_number_of_days: The trial_number_of_days of this SubscriptionPlan.
        :type trial_number_of_days: int
        """

        self._trial_number_of_days = trial_number_of_days

    @property
    def trial_starts_on(self):
        """Gets the trial_starts_on of this SubscriptionPlan.


        :return: The trial_starts_on of this SubscriptionPlan.
        :rtype: datetime
        """
        return self._trial_starts_on

    @trial_starts_on.setter
    def trial_starts_on(self, trial_starts_on):
        """Sets the trial_starts_on of this SubscriptionPlan.


        :param trial_starts_on: The trial_starts_on of this SubscriptionPlan.
        :type trial_starts_on: datetime
        """

        self._trial_starts_on = trial_starts_on

    @property
    def user_id(self):
        """Gets the user_id of this SubscriptionPlan.


        :return: The user_id of this SubscriptionPlan.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SubscriptionPlan.


        :param user_id: The user_id of this SubscriptionPlan.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def version(self):
        """Gets the version of this SubscriptionPlan.


        :return: The version of this SubscriptionPlan.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SubscriptionPlan.


        :param version: The version of this SubscriptionPlan.
        :type version: int
        """

        self._version = version
