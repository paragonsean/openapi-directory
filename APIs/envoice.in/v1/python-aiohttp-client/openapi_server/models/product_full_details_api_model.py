# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency_details_api_model import CurrencyDetailsApiModel
from openapi_server.models.product_attachment_api_model import ProductAttachmentApiModel
from openapi_server.models.product_coupon_api_model import ProductCouponApiModel
from openapi_server.models.product_discount_api_model import ProductDiscountApiModel
from openapi_server.models.product_gateway_api_model import ProductGatewayApiModel
from openapi_server.models.product_item_api_model import ProductItemApiModel
from openapi_server import util


class ProductFullDetailsApiModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, after_payment_description: str=None, attachments: List[ProductAttachmentApiModel]=None, button_call_to_action: str=None, coupons: List[ProductCouponApiModel]=None, currency: CurrencyDetailsApiModel=None, currency_id: int=None, description: str=None, discounts: List[ProductDiscountApiModel]=None, id: int=None, is_featured: bool=None, items: List[ProductItemApiModel]=None, name: str=None, payment_gateways: List[ProductGatewayApiModel]=None, shipping_amount: float=None, shipping_description: str=None, status: str=None, sub_total_amount: float=None, total_amount: float=None, total_with_shipping: float=None, what_happens_next_description: str=None):
        """ProductFullDetailsApiModel - a model defined in OpenAPI

        :param access_token: The access_token of this ProductFullDetailsApiModel.
        :param after_payment_description: The after_payment_description of this ProductFullDetailsApiModel.
        :param attachments: The attachments of this ProductFullDetailsApiModel.
        :param button_call_to_action: The button_call_to_action of this ProductFullDetailsApiModel.
        :param coupons: The coupons of this ProductFullDetailsApiModel.
        :param currency: The currency of this ProductFullDetailsApiModel.
        :param currency_id: The currency_id of this ProductFullDetailsApiModel.
        :param description: The description of this ProductFullDetailsApiModel.
        :param discounts: The discounts of this ProductFullDetailsApiModel.
        :param id: The id of this ProductFullDetailsApiModel.
        :param is_featured: The is_featured of this ProductFullDetailsApiModel.
        :param items: The items of this ProductFullDetailsApiModel.
        :param name: The name of this ProductFullDetailsApiModel.
        :param payment_gateways: The payment_gateways of this ProductFullDetailsApiModel.
        :param shipping_amount: The shipping_amount of this ProductFullDetailsApiModel.
        :param shipping_description: The shipping_description of this ProductFullDetailsApiModel.
        :param status: The status of this ProductFullDetailsApiModel.
        :param sub_total_amount: The sub_total_amount of this ProductFullDetailsApiModel.
        :param total_amount: The total_amount of this ProductFullDetailsApiModel.
        :param total_with_shipping: The total_with_shipping of this ProductFullDetailsApiModel.
        :param what_happens_next_description: The what_happens_next_description of this ProductFullDetailsApiModel.
        """
        self.openapi_types = {
            'access_token': str,
            'after_payment_description': str,
            'attachments': List[ProductAttachmentApiModel],
            'button_call_to_action': str,
            'coupons': List[ProductCouponApiModel],
            'currency': CurrencyDetailsApiModel,
            'currency_id': int,
            'description': str,
            'discounts': List[ProductDiscountApiModel],
            'id': int,
            'is_featured': bool,
            'items': List[ProductItemApiModel],
            'name': str,
            'payment_gateways': List[ProductGatewayApiModel],
            'shipping_amount': float,
            'shipping_description': str,
            'status': str,
            'sub_total_amount': float,
            'total_amount': float,
            'total_with_shipping': float,
            'what_happens_next_description': str
        }

        self.attribute_map = {
            'access_token': 'AccessToken',
            'after_payment_description': 'AfterPaymentDescription',
            'attachments': 'Attachments',
            'button_call_to_action': 'ButtonCallToAction',
            'coupons': 'Coupons',
            'currency': 'Currency',
            'currency_id': 'CurrencyId',
            'description': 'Description',
            'discounts': 'Discounts',
            'id': 'Id',
            'is_featured': 'IsFeatured',
            'items': 'Items',
            'name': 'Name',
            'payment_gateways': 'PaymentGateways',
            'shipping_amount': 'ShippingAmount',
            'shipping_description': 'ShippingDescription',
            'status': 'Status',
            'sub_total_amount': 'SubTotalAmount',
            'total_amount': 'TotalAmount',
            'total_with_shipping': 'TotalWithShipping',
            'what_happens_next_description': 'WhatHappensNextDescription'
        }

        self._access_token = access_token
        self._after_payment_description = after_payment_description
        self._attachments = attachments
        self._button_call_to_action = button_call_to_action
        self._coupons = coupons
        self._currency = currency
        self._currency_id = currency_id
        self._description = description
        self._discounts = discounts
        self._id = id
        self._is_featured = is_featured
        self._items = items
        self._name = name
        self._payment_gateways = payment_gateways
        self._shipping_amount = shipping_amount
        self._shipping_description = shipping_description
        self._status = status
        self._sub_total_amount = sub_total_amount
        self._total_amount = total_amount
        self._total_with_shipping = total_with_shipping
        self._what_happens_next_description = what_happens_next_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductFullDetailsApiModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductFullDetailsApiModel of this ProductFullDetailsApiModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this ProductFullDetailsApiModel.

        Product short link

        :return: The access_token of this ProductFullDetailsApiModel.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this ProductFullDetailsApiModel.

        Product short link

        :param access_token: The access_token of this ProductFullDetailsApiModel.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def after_payment_description(self):
        """Gets the after_payment_description of this ProductFullDetailsApiModel.

        After payment description

        :return: The after_payment_description of this ProductFullDetailsApiModel.
        :rtype: str
        """
        return self._after_payment_description

    @after_payment_description.setter
    def after_payment_description(self, after_payment_description):
        """Sets the after_payment_description of this ProductFullDetailsApiModel.

        After payment description

        :param after_payment_description: The after_payment_description of this ProductFullDetailsApiModel.
        :type after_payment_description: str
        """

        self._after_payment_description = after_payment_description

    @property
    def attachments(self):
        """Gets the attachments of this ProductFullDetailsApiModel.

        List of product attachments

        :return: The attachments of this ProductFullDetailsApiModel.
        :rtype: List[ProductAttachmentApiModel]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this ProductFullDetailsApiModel.

        List of product attachments

        :param attachments: The attachments of this ProductFullDetailsApiModel.
        :type attachments: List[ProductAttachmentApiModel]
        """

        self._attachments = attachments

    @property
    def button_call_to_action(self):
        """Gets the button_call_to_action of this ProductFullDetailsApiModel.

        Default button call to action  Ex: Buy now, subscribe, ...

        :return: The button_call_to_action of this ProductFullDetailsApiModel.
        :rtype: str
        """
        return self._button_call_to_action

    @button_call_to_action.setter
    def button_call_to_action(self, button_call_to_action):
        """Sets the button_call_to_action of this ProductFullDetailsApiModel.

        Default button call to action  Ex: Buy now, subscribe, ...

        :param button_call_to_action: The button_call_to_action of this ProductFullDetailsApiModel.
        :type button_call_to_action: str
        """

        self._button_call_to_action = button_call_to_action

    @property
    def coupons(self):
        """Gets the coupons of this ProductFullDetailsApiModel.

        List of product coupons

        :return: The coupons of this ProductFullDetailsApiModel.
        :rtype: List[ProductCouponApiModel]
        """
        return self._coupons

    @coupons.setter
    def coupons(self, coupons):
        """Sets the coupons of this ProductFullDetailsApiModel.

        List of product coupons

        :param coupons: The coupons of this ProductFullDetailsApiModel.
        :type coupons: List[ProductCouponApiModel]
        """

        self._coupons = coupons

    @property
    def currency(self):
        """Gets the currency of this ProductFullDetailsApiModel.


        :return: The currency of this ProductFullDetailsApiModel.
        :rtype: CurrencyDetailsApiModel
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ProductFullDetailsApiModel.


        :param currency: The currency of this ProductFullDetailsApiModel.
        :type currency: CurrencyDetailsApiModel
        """

        self._currency = currency

    @property
    def currency_id(self):
        """Gets the currency_id of this ProductFullDetailsApiModel.

        Foreign key Currency

        :return: The currency_id of this ProductFullDetailsApiModel.
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this ProductFullDetailsApiModel.

        Foreign key Currency

        :param currency_id: The currency_id of this ProductFullDetailsApiModel.
        :type currency_id: int
        """

        self._currency_id = currency_id

    @property
    def description(self):
        """Gets the description of this ProductFullDetailsApiModel.

        Product description

        :return: The description of this ProductFullDetailsApiModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductFullDetailsApiModel.

        Product description

        :param description: The description of this ProductFullDetailsApiModel.
        :type description: str
        """

        self._description = description

    @property
    def discounts(self):
        """Gets the discounts of this ProductFullDetailsApiModel.

        List of product discounts

        :return: The discounts of this ProductFullDetailsApiModel.
        :rtype: List[ProductDiscountApiModel]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this ProductFullDetailsApiModel.

        List of product discounts

        :param discounts: The discounts of this ProductFullDetailsApiModel.
        :type discounts: List[ProductDiscountApiModel]
        """

        self._discounts = discounts

    @property
    def id(self):
        """Gets the id of this ProductFullDetailsApiModel.

        Product id

        :return: The id of this ProductFullDetailsApiModel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductFullDetailsApiModel.

        Product id

        :param id: The id of this ProductFullDetailsApiModel.
        :type id: int
        """

        self._id = id

    @property
    def is_featured(self):
        """Gets the is_featured of this ProductFullDetailsApiModel.

        Indicate that the product is set as featured

        :return: The is_featured of this ProductFullDetailsApiModel.
        :rtype: bool
        """
        return self._is_featured

    @is_featured.setter
    def is_featured(self, is_featured):
        """Sets the is_featured of this ProductFullDetailsApiModel.

        Indicate that the product is set as featured

        :param is_featured: The is_featured of this ProductFullDetailsApiModel.
        :type is_featured: bool
        """

        self._is_featured = is_featured

    @property
    def items(self):
        """Gets the items of this ProductFullDetailsApiModel.

        List of product items

        :return: The items of this ProductFullDetailsApiModel.
        :rtype: List[ProductItemApiModel]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ProductFullDetailsApiModel.

        List of product items

        :param items: The items of this ProductFullDetailsApiModel.
        :type items: List[ProductItemApiModel]
        """

        self._items = items

    @property
    def name(self):
        """Gets the name of this ProductFullDetailsApiModel.

        Product alias

        :return: The name of this ProductFullDetailsApiModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductFullDetailsApiModel.

        Product alias

        :param name: The name of this ProductFullDetailsApiModel.
        :type name: str
        """

        self._name = name

    @property
    def payment_gateways(self):
        """Gets the payment_gateways of this ProductFullDetailsApiModel.

        List of enabled payment gateways for this product

        :return: The payment_gateways of this ProductFullDetailsApiModel.
        :rtype: List[ProductGatewayApiModel]
        """
        return self._payment_gateways

    @payment_gateways.setter
    def payment_gateways(self, payment_gateways):
        """Sets the payment_gateways of this ProductFullDetailsApiModel.

        List of enabled payment gateways for this product

        :param payment_gateways: The payment_gateways of this ProductFullDetailsApiModel.
        :type payment_gateways: List[ProductGatewayApiModel]
        """

        self._payment_gateways = payment_gateways

    @property
    def shipping_amount(self):
        """Gets the shipping_amount of this ProductFullDetailsApiModel.

        Cost for shipping the product

        :return: The shipping_amount of this ProductFullDetailsApiModel.
        :rtype: float
        """
        return self._shipping_amount

    @shipping_amount.setter
    def shipping_amount(self, shipping_amount):
        """Sets the shipping_amount of this ProductFullDetailsApiModel.

        Cost for shipping the product

        :param shipping_amount: The shipping_amount of this ProductFullDetailsApiModel.
        :type shipping_amount: float
        """

        self._shipping_amount = shipping_amount

    @property
    def shipping_description(self):
        """Gets the shipping_description of this ProductFullDetailsApiModel.

        Client instructions for shipping

        :return: The shipping_description of this ProductFullDetailsApiModel.
        :rtype: str
        """
        return self._shipping_description

    @shipping_description.setter
    def shipping_description(self, shipping_description):
        """Sets the shipping_description of this ProductFullDetailsApiModel.

        Client instructions for shipping

        :param shipping_description: The shipping_description of this ProductFullDetailsApiModel.
        :type shipping_description: str
        """

        self._shipping_description = shipping_description

    @property
    def status(self):
        """Gets the status of this ProductFullDetailsApiModel.

        Product availability status

        :return: The status of this ProductFullDetailsApiModel.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProductFullDetailsApiModel.

        Product availability status

        :param status: The status of this ProductFullDetailsApiModel.
        :type status: str
        """
        allowed_values = ["Active", "NotAvailable", "Inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sub_total_amount(self):
        """Gets the sub_total_amount of this ProductFullDetailsApiModel.

        Subtotal amount of product

        :return: The sub_total_amount of this ProductFullDetailsApiModel.
        :rtype: float
        """
        return self._sub_total_amount

    @sub_total_amount.setter
    def sub_total_amount(self, sub_total_amount):
        """Sets the sub_total_amount of this ProductFullDetailsApiModel.

        Subtotal amount of product

        :param sub_total_amount: The sub_total_amount of this ProductFullDetailsApiModel.
        :type sub_total_amount: float
        """

        self._sub_total_amount = sub_total_amount

    @property
    def total_amount(self):
        """Gets the total_amount of this ProductFullDetailsApiModel.

        Total amount of product

        :return: The total_amount of this ProductFullDetailsApiModel.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this ProductFullDetailsApiModel.

        Total amount of product

        :param total_amount: The total_amount of this ProductFullDetailsApiModel.
        :type total_amount: float
        """

        self._total_amount = total_amount

    @property
    def total_with_shipping(self):
        """Gets the total_with_shipping of this ProductFullDetailsApiModel.

        Total amount of product with shipping

        :return: The total_with_shipping of this ProductFullDetailsApiModel.
        :rtype: float
        """
        return self._total_with_shipping

    @total_with_shipping.setter
    def total_with_shipping(self, total_with_shipping):
        """Sets the total_with_shipping of this ProductFullDetailsApiModel.

        Total amount of product with shipping

        :param total_with_shipping: The total_with_shipping of this ProductFullDetailsApiModel.
        :type total_with_shipping: float
        """

        self._total_with_shipping = total_with_shipping

    @property
    def what_happens_next_description(self):
        """Gets the what_happens_next_description of this ProductFullDetailsApiModel.

        What happens next description

        :return: The what_happens_next_description of this ProductFullDetailsApiModel.
        :rtype: str
        """
        return self._what_happens_next_description

    @what_happens_next_description.setter
    def what_happens_next_description(self, what_happens_next_description):
        """Sets the what_happens_next_description of this ProductFullDetailsApiModel.

        What happens next description

        :param what_happens_next_description: The what_happens_next_description of this ProductFullDetailsApiModel.
        :type what_happens_next_description: str
        """

        self._what_happens_next_description = what_happens_next_description
