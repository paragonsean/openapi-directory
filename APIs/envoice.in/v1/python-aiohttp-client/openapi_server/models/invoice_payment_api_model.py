# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvoicePaymentApiModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, id: int=None, is_automatic: bool=None, note: str=None, paid_on: datetime=None, reference_id: str=None, type: str=None):
        """InvoicePaymentApiModel - a model defined in OpenAPI

        :param amount: The amount of this InvoicePaymentApiModel.
        :param id: The id of this InvoicePaymentApiModel.
        :param is_automatic: The is_automatic of this InvoicePaymentApiModel.
        :param note: The note of this InvoicePaymentApiModel.
        :param paid_on: The paid_on of this InvoicePaymentApiModel.
        :param reference_id: The reference_id of this InvoicePaymentApiModel.
        :param type: The type of this InvoicePaymentApiModel.
        """
        self.openapi_types = {
            'amount': float,
            'id': int,
            'is_automatic': bool,
            'note': str,
            'paid_on': datetime,
            'reference_id': str,
            'type': str
        }

        self.attribute_map = {
            'amount': 'Amount',
            'id': 'Id',
            'is_automatic': 'IsAutomatic',
            'note': 'Note',
            'paid_on': 'PaidOn',
            'reference_id': 'ReferenceId',
            'type': 'Type'
        }

        self._amount = amount
        self._id = id
        self._is_automatic = is_automatic
        self._note = note
        self._paid_on = paid_on
        self._reference_id = reference_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoicePaymentApiModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoicePaymentApiModel of this InvoicePaymentApiModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this InvoicePaymentApiModel.

        Total amount of the payment

        :return: The amount of this InvoicePaymentApiModel.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoicePaymentApiModel.

        Total amount of the payment

        :param amount: The amount of this InvoicePaymentApiModel.
        :type amount: float
        """

        self._amount = amount

    @property
    def id(self):
        """Gets the id of this InvoicePaymentApiModel.

        Id of invoice payment

        :return: The id of this InvoicePaymentApiModel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoicePaymentApiModel.

        Id of invoice payment

        :param id: The id of this InvoicePaymentApiModel.
        :type id: int
        """

        self._id = id

    @property
    def is_automatic(self):
        """Gets the is_automatic of this InvoicePaymentApiModel.

        Indicate if the payment is automatic or manual

        :return: The is_automatic of this InvoicePaymentApiModel.
        :rtype: bool
        """
        return self._is_automatic

    @is_automatic.setter
    def is_automatic(self, is_automatic):
        """Sets the is_automatic of this InvoicePaymentApiModel.

        Indicate if the payment is automatic or manual

        :param is_automatic: The is_automatic of this InvoicePaymentApiModel.
        :type is_automatic: bool
        """

        self._is_automatic = is_automatic

    @property
    def note(self):
        """Gets the note of this InvoicePaymentApiModel.

        Internal payment note

        :return: The note of this InvoicePaymentApiModel.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this InvoicePaymentApiModel.

        Internal payment note

        :param note: The note of this InvoicePaymentApiModel.
        :type note: str
        """

        self._note = note

    @property
    def paid_on(self):
        """Gets the paid_on of this InvoicePaymentApiModel.

        When the payment was done by the client

        :return: The paid_on of this InvoicePaymentApiModel.
        :rtype: datetime
        """
        return self._paid_on

    @paid_on.setter
    def paid_on(self, paid_on):
        """Sets the paid_on of this InvoicePaymentApiModel.

        When the payment was done by the client

        :param paid_on: The paid_on of this InvoicePaymentApiModel.
        :type paid_on: datetime
        """

        self._paid_on = paid_on

    @property
    def reference_id(self):
        """Gets the reference_id of this InvoicePaymentApiModel.

        Id of the payment

        :return: The reference_id of this InvoicePaymentApiModel.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this InvoicePaymentApiModel.

        Id of the payment

        :param reference_id: The reference_id of this InvoicePaymentApiModel.
        :type reference_id: str
        """

        self._reference_id = reference_id

    @property
    def type(self):
        """Gets the type of this InvoicePaymentApiModel.

        Type of payment

        :return: The type of this InvoicePaymentApiModel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InvoicePaymentApiModel.

        Type of payment

        :param type: The type of this InvoicePaymentApiModel.
        :type type: str
        """
        allowed_values = ["Other", "Paypal", "Stripe", "Payoneer", "Bank", "Cash", "Cheque", "Ach", "Sepa", "Square", "KlikAndPay", "Razorpay", "Wepay", "Halkbank", "TwoCheckout", "PaymentWall", "BamboraEU", "BamboraNA", "Nlb", "AuthorizeNet", "Braintree"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
