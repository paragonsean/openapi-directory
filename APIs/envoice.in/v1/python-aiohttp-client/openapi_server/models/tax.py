# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Tax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, percentage: float=None, user_id: int=None):
        """Tax - a model defined in OpenAPI

        :param id: The id of this Tax.
        :param name: The name of this Tax.
        :param percentage: The percentage of this Tax.
        :param user_id: The user_id of this Tax.
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'percentage': float,
            'user_id': int
        }

        self.attribute_map = {
            'id': 'Id',
            'name': 'Name',
            'percentage': 'Percentage',
            'user_id': 'UserId'
        }

        self._id = id
        self._name = name
        self._percentage = percentage
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tax of this Tax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Tax.


        :return: The id of this Tax.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tax.


        :param id: The id of this Tax.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Tax.


        :return: The name of this Tax.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tax.


        :param name: The name of this Tax.
        :type name: str
        """

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this Tax.


        :return: The percentage of this Tax.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this Tax.


        :param percentage: The percentage of this Tax.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def user_id(self):
        """Gets the user_id of this Tax.


        :return: The user_id of this Tax.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Tax.


        :param user_id: The user_id of this Tax.
        :type user_id: int
        """

        self._user_id = user_id
