# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invoice import Invoice
from openapi_server import util


class QueuedInvoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloned_from_id: int=None, id: int=None, invoice: Invoice=None, invoice_id: int=None, recurring_profile_id: int=None, scheduled_for: datetime=None, status: str=None, user_id: int=None):
        """QueuedInvoice - a model defined in OpenAPI

        :param cloned_from_id: The cloned_from_id of this QueuedInvoice.
        :param id: The id of this QueuedInvoice.
        :param invoice: The invoice of this QueuedInvoice.
        :param invoice_id: The invoice_id of this QueuedInvoice.
        :param recurring_profile_id: The recurring_profile_id of this QueuedInvoice.
        :param scheduled_for: The scheduled_for of this QueuedInvoice.
        :param status: The status of this QueuedInvoice.
        :param user_id: The user_id of this QueuedInvoice.
        """
        self.openapi_types = {
            'cloned_from_id': int,
            'id': int,
            'invoice': Invoice,
            'invoice_id': int,
            'recurring_profile_id': int,
            'scheduled_for': datetime,
            'status': str,
            'user_id': int
        }

        self.attribute_map = {
            'cloned_from_id': 'ClonedFromId',
            'id': 'Id',
            'invoice': 'Invoice',
            'invoice_id': 'InvoiceId',
            'recurring_profile_id': 'RecurringProfileId',
            'scheduled_for': 'ScheduledFor',
            'status': 'Status',
            'user_id': 'UserId'
        }

        self._cloned_from_id = cloned_from_id
        self._id = id
        self._invoice = invoice
        self._invoice_id = invoice_id
        self._recurring_profile_id = recurring_profile_id
        self._scheduled_for = scheduled_for
        self._status = status
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueuedInvoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueuedInvoice of this QueuedInvoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloned_from_id(self):
        """Gets the cloned_from_id of this QueuedInvoice.


        :return: The cloned_from_id of this QueuedInvoice.
        :rtype: int
        """
        return self._cloned_from_id

    @cloned_from_id.setter
    def cloned_from_id(self, cloned_from_id):
        """Sets the cloned_from_id of this QueuedInvoice.


        :param cloned_from_id: The cloned_from_id of this QueuedInvoice.
        :type cloned_from_id: int
        """

        self._cloned_from_id = cloned_from_id

    @property
    def id(self):
        """Gets the id of this QueuedInvoice.


        :return: The id of this QueuedInvoice.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueuedInvoice.


        :param id: The id of this QueuedInvoice.
        :type id: int
        """

        self._id = id

    @property
    def invoice(self):
        """Gets the invoice of this QueuedInvoice.


        :return: The invoice of this QueuedInvoice.
        :rtype: Invoice
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this QueuedInvoice.


        :param invoice: The invoice of this QueuedInvoice.
        :type invoice: Invoice
        """

        self._invoice = invoice

    @property
    def invoice_id(self):
        """Gets the invoice_id of this QueuedInvoice.


        :return: The invoice_id of this QueuedInvoice.
        :rtype: int
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this QueuedInvoice.


        :param invoice_id: The invoice_id of this QueuedInvoice.
        :type invoice_id: int
        """

        self._invoice_id = invoice_id

    @property
    def recurring_profile_id(self):
        """Gets the recurring_profile_id of this QueuedInvoice.


        :return: The recurring_profile_id of this QueuedInvoice.
        :rtype: int
        """
        return self._recurring_profile_id

    @recurring_profile_id.setter
    def recurring_profile_id(self, recurring_profile_id):
        """Sets the recurring_profile_id of this QueuedInvoice.


        :param recurring_profile_id: The recurring_profile_id of this QueuedInvoice.
        :type recurring_profile_id: int
        """

        self._recurring_profile_id = recurring_profile_id

    @property
    def scheduled_for(self):
        """Gets the scheduled_for of this QueuedInvoice.


        :return: The scheduled_for of this QueuedInvoice.
        :rtype: datetime
        """
        return self._scheduled_for

    @scheduled_for.setter
    def scheduled_for(self, scheduled_for):
        """Sets the scheduled_for of this QueuedInvoice.


        :param scheduled_for: The scheduled_for of this QueuedInvoice.
        :type scheduled_for: datetime
        """

        self._scheduled_for = scheduled_for

    @property
    def status(self):
        """Gets the status of this QueuedInvoice.


        :return: The status of this QueuedInvoice.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QueuedInvoice.


        :param status: The status of this QueuedInvoice.
        :type status: str
        """
        allowed_values = ["Pending", "Cancelled", "Failed", "Processed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this QueuedInvoice.


        :return: The user_id of this QueuedInvoice.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this QueuedInvoice.


        :param user_id: The user_id of this QueuedInvoice.
        :type user_id: int
        """

        self._user_id = user_id
