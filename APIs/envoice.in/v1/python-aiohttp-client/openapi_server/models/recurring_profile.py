# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecurringProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_month: int=None, day_of_week: str=None, due_date_in_days: int=None, end_of_recurrance: datetime=None, id: int=None, invoice_id: int=None, month: int=None, recurrance_pattern: str=None, recurrance_value: int=None, start_of_recurrance: datetime=None, status: str=None, title: str=None):
        """RecurringProfile - a model defined in OpenAPI

        :param day_of_month: The day_of_month of this RecurringProfile.
        :param day_of_week: The day_of_week of this RecurringProfile.
        :param due_date_in_days: The due_date_in_days of this RecurringProfile.
        :param end_of_recurrance: The end_of_recurrance of this RecurringProfile.
        :param id: The id of this RecurringProfile.
        :param invoice_id: The invoice_id of this RecurringProfile.
        :param month: The month of this RecurringProfile.
        :param recurrance_pattern: The recurrance_pattern of this RecurringProfile.
        :param recurrance_value: The recurrance_value of this RecurringProfile.
        :param start_of_recurrance: The start_of_recurrance of this RecurringProfile.
        :param status: The status of this RecurringProfile.
        :param title: The title of this RecurringProfile.
        """
        self.openapi_types = {
            'day_of_month': int,
            'day_of_week': str,
            'due_date_in_days': int,
            'end_of_recurrance': datetime,
            'id': int,
            'invoice_id': int,
            'month': int,
            'recurrance_pattern': str,
            'recurrance_value': int,
            'start_of_recurrance': datetime,
            'status': str,
            'title': str
        }

        self.attribute_map = {
            'day_of_month': 'DayOfMonth',
            'day_of_week': 'DayOfWeek',
            'due_date_in_days': 'DueDateInDays',
            'end_of_recurrance': 'EndOfRecurrance',
            'id': 'Id',
            'invoice_id': 'InvoiceId',
            'month': 'Month',
            'recurrance_pattern': 'RecurrancePattern',
            'recurrance_value': 'RecurranceValue',
            'start_of_recurrance': 'StartOfRecurrance',
            'status': 'Status',
            'title': 'Title'
        }

        self._day_of_month = day_of_month
        self._day_of_week = day_of_week
        self._due_date_in_days = due_date_in_days
        self._end_of_recurrance = end_of_recurrance
        self._id = id
        self._invoice_id = invoice_id
        self._month = month
        self._recurrance_pattern = recurrance_pattern
        self._recurrance_value = recurrance_value
        self._start_of_recurrance = start_of_recurrance
        self._status = status
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecurringProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecurringProfile of this RecurringProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_month(self):
        """Gets the day_of_month of this RecurringProfile.


        :return: The day_of_month of this RecurringProfile.
        :rtype: int
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this RecurringProfile.


        :param day_of_month: The day_of_month of this RecurringProfile.
        :type day_of_month: int
        """

        self._day_of_month = day_of_month

    @property
    def day_of_week(self):
        """Gets the day_of_week of this RecurringProfile.


        :return: The day_of_week of this RecurringProfile.
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this RecurringProfile.


        :param day_of_week: The day_of_week of this RecurringProfile.
        :type day_of_week: str
        """
        allowed_values = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]  # noqa: E501
        if day_of_week not in allowed_values:
            raise ValueError(
                "Invalid value for `day_of_week` ({0}), must be one of {1}"
                .format(day_of_week, allowed_values)
            )

        self._day_of_week = day_of_week

    @property
    def due_date_in_days(self):
        """Gets the due_date_in_days of this RecurringProfile.


        :return: The due_date_in_days of this RecurringProfile.
        :rtype: int
        """
        return self._due_date_in_days

    @due_date_in_days.setter
    def due_date_in_days(self, due_date_in_days):
        """Sets the due_date_in_days of this RecurringProfile.


        :param due_date_in_days: The due_date_in_days of this RecurringProfile.
        :type due_date_in_days: int
        """

        self._due_date_in_days = due_date_in_days

    @property
    def end_of_recurrance(self):
        """Gets the end_of_recurrance of this RecurringProfile.


        :return: The end_of_recurrance of this RecurringProfile.
        :rtype: datetime
        """
        return self._end_of_recurrance

    @end_of_recurrance.setter
    def end_of_recurrance(self, end_of_recurrance):
        """Sets the end_of_recurrance of this RecurringProfile.


        :param end_of_recurrance: The end_of_recurrance of this RecurringProfile.
        :type end_of_recurrance: datetime
        """

        self._end_of_recurrance = end_of_recurrance

    @property
    def id(self):
        """Gets the id of this RecurringProfile.


        :return: The id of this RecurringProfile.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecurringProfile.


        :param id: The id of this RecurringProfile.
        :type id: int
        """

        self._id = id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this RecurringProfile.


        :return: The invoice_id of this RecurringProfile.
        :rtype: int
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this RecurringProfile.


        :param invoice_id: The invoice_id of this RecurringProfile.
        :type invoice_id: int
        """

        self._invoice_id = invoice_id

    @property
    def month(self):
        """Gets the month of this RecurringProfile.


        :return: The month of this RecurringProfile.
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this RecurringProfile.


        :param month: The month of this RecurringProfile.
        :type month: int
        """

        self._month = month

    @property
    def recurrance_pattern(self):
        """Gets the recurrance_pattern of this RecurringProfile.


        :return: The recurrance_pattern of this RecurringProfile.
        :rtype: str
        """
        return self._recurrance_pattern

    @recurrance_pattern.setter
    def recurrance_pattern(self, recurrance_pattern):
        """Sets the recurrance_pattern of this RecurringProfile.


        :param recurrance_pattern: The recurrance_pattern of this RecurringProfile.
        :type recurrance_pattern: str
        """
        allowed_values = ["Daily", "Weekly", "Monthly", "Yearly"]  # noqa: E501
        if recurrance_pattern not in allowed_values:
            raise ValueError(
                "Invalid value for `recurrance_pattern` ({0}), must be one of {1}"
                .format(recurrance_pattern, allowed_values)
            )

        self._recurrance_pattern = recurrance_pattern

    @property
    def recurrance_value(self):
        """Gets the recurrance_value of this RecurringProfile.


        :return: The recurrance_value of this RecurringProfile.
        :rtype: int
        """
        return self._recurrance_value

    @recurrance_value.setter
    def recurrance_value(self, recurrance_value):
        """Sets the recurrance_value of this RecurringProfile.


        :param recurrance_value: The recurrance_value of this RecurringProfile.
        :type recurrance_value: int
        """

        self._recurrance_value = recurrance_value

    @property
    def start_of_recurrance(self):
        """Gets the start_of_recurrance of this RecurringProfile.


        :return: The start_of_recurrance of this RecurringProfile.
        :rtype: datetime
        """
        return self._start_of_recurrance

    @start_of_recurrance.setter
    def start_of_recurrance(self, start_of_recurrance):
        """Sets the start_of_recurrance of this RecurringProfile.


        :param start_of_recurrance: The start_of_recurrance of this RecurringProfile.
        :type start_of_recurrance: datetime
        """

        self._start_of_recurrance = start_of_recurrance

    @property
    def status(self):
        """Gets the status of this RecurringProfile.


        :return: The status of this RecurringProfile.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RecurringProfile.


        :param status: The status of this RecurringProfile.
        :type status: str
        """
        allowed_values = ["Pending", "Active", "Cancelled", "Finished"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def title(self):
        """Gets the title of this RecurringProfile.


        :return: The title of this RecurringProfile.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RecurringProfile.


        :param title: The title of this RecurringProfile.
        :type title: str
        """

        self._title = title
