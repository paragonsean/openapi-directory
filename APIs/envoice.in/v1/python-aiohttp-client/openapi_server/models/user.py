# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_connection import ExternalConnection
from openapi_server.models.subscription_plan import SubscriptionPlan
from openapi_server.models.user_settings import UserSettings
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_notifications_last_read_on: datetime=None, email: str=None, external_connections: List[ExternalConnection]=None, has_been_onboarded: bool=None, id: int=None, is_locked: bool=None, is_verified: bool=None, knowledge_notifications_last_read_on: datetime=None, last_seen_on: datetime=None, name: str=None, password: str=None, password_salt: str=None, referral_path: str=None, referred_users: int=None, referrer_key: str=None, settings: UserSettings=None, status: str=None, subscription_plan: SubscriptionPlan=None, type: str=None, username: str=None, verified_on: datetime=None, years_of_experience: str=None):
        """User - a model defined in OpenAPI

        :param action_notifications_last_read_on: The action_notifications_last_read_on of this User.
        :param email: The email of this User.
        :param external_connections: The external_connections of this User.
        :param has_been_onboarded: The has_been_onboarded of this User.
        :param id: The id of this User.
        :param is_locked: The is_locked of this User.
        :param is_verified: The is_verified of this User.
        :param knowledge_notifications_last_read_on: The knowledge_notifications_last_read_on of this User.
        :param last_seen_on: The last_seen_on of this User.
        :param name: The name of this User.
        :param password: The password of this User.
        :param password_salt: The password_salt of this User.
        :param referral_path: The referral_path of this User.
        :param referred_users: The referred_users of this User.
        :param referrer_key: The referrer_key of this User.
        :param settings: The settings of this User.
        :param status: The status of this User.
        :param subscription_plan: The subscription_plan of this User.
        :param type: The type of this User.
        :param username: The username of this User.
        :param verified_on: The verified_on of this User.
        :param years_of_experience: The years_of_experience of this User.
        """
        self.openapi_types = {
            'action_notifications_last_read_on': datetime,
            'email': str,
            'external_connections': List[ExternalConnection],
            'has_been_onboarded': bool,
            'id': int,
            'is_locked': bool,
            'is_verified': bool,
            'knowledge_notifications_last_read_on': datetime,
            'last_seen_on': datetime,
            'name': str,
            'password': str,
            'password_salt': str,
            'referral_path': str,
            'referred_users': int,
            'referrer_key': str,
            'settings': UserSettings,
            'status': str,
            'subscription_plan': SubscriptionPlan,
            'type': str,
            'username': str,
            'verified_on': datetime,
            'years_of_experience': str
        }

        self.attribute_map = {
            'action_notifications_last_read_on': 'ActionNotificationsLastReadOn',
            'email': 'Email',
            'external_connections': 'ExternalConnections',
            'has_been_onboarded': 'HasBeenOnboarded',
            'id': 'Id',
            'is_locked': 'IsLocked',
            'is_verified': 'IsVerified',
            'knowledge_notifications_last_read_on': 'KnowledgeNotificationsLastReadOn',
            'last_seen_on': 'LastSeenOn',
            'name': 'Name',
            'password': 'Password',
            'password_salt': 'PasswordSalt',
            'referral_path': 'ReferralPath',
            'referred_users': 'ReferredUsers',
            'referrer_key': 'ReferrerKey',
            'settings': 'Settings',
            'status': 'Status',
            'subscription_plan': 'SubscriptionPlan',
            'type': 'Type',
            'username': 'Username',
            'verified_on': 'VerifiedOn',
            'years_of_experience': 'YearsOfExperience'
        }

        self._action_notifications_last_read_on = action_notifications_last_read_on
        self._email = email
        self._external_connections = external_connections
        self._has_been_onboarded = has_been_onboarded
        self._id = id
        self._is_locked = is_locked
        self._is_verified = is_verified
        self._knowledge_notifications_last_read_on = knowledge_notifications_last_read_on
        self._last_seen_on = last_seen_on
        self._name = name
        self._password = password
        self._password_salt = password_salt
        self._referral_path = referral_path
        self._referred_users = referred_users
        self._referrer_key = referrer_key
        self._settings = settings
        self._status = status
        self._subscription_plan = subscription_plan
        self._type = type
        self._username = username
        self._verified_on = verified_on
        self._years_of_experience = years_of_experience

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_notifications_last_read_on(self):
        """Gets the action_notifications_last_read_on of this User.


        :return: The action_notifications_last_read_on of this User.
        :rtype: datetime
        """
        return self._action_notifications_last_read_on

    @action_notifications_last_read_on.setter
    def action_notifications_last_read_on(self, action_notifications_last_read_on):
        """Sets the action_notifications_last_read_on of this User.


        :param action_notifications_last_read_on: The action_notifications_last_read_on of this User.
        :type action_notifications_last_read_on: datetime
        """

        self._action_notifications_last_read_on = action_notifications_last_read_on

    @property
    def email(self):
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def external_connections(self):
        """Gets the external_connections of this User.


        :return: The external_connections of this User.
        :rtype: List[ExternalConnection]
        """
        return self._external_connections

    @external_connections.setter
    def external_connections(self, external_connections):
        """Sets the external_connections of this User.


        :param external_connections: The external_connections of this User.
        :type external_connections: List[ExternalConnection]
        """

        self._external_connections = external_connections

    @property
    def has_been_onboarded(self):
        """Gets the has_been_onboarded of this User.


        :return: The has_been_onboarded of this User.
        :rtype: bool
        """
        return self._has_been_onboarded

    @has_been_onboarded.setter
    def has_been_onboarded(self, has_been_onboarded):
        """Sets the has_been_onboarded of this User.


        :param has_been_onboarded: The has_been_onboarded of this User.
        :type has_been_onboarded: bool
        """

        self._has_been_onboarded = has_been_onboarded

    @property
    def id(self):
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def is_locked(self):
        """Gets the is_locked of this User.


        :return: The is_locked of this User.
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this User.


        :param is_locked: The is_locked of this User.
        :type is_locked: bool
        """

        self._is_locked = is_locked

    @property
    def is_verified(self):
        """Gets the is_verified of this User.


        :return: The is_verified of this User.
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this User.


        :param is_verified: The is_verified of this User.
        :type is_verified: bool
        """

        self._is_verified = is_verified

    @property
    def knowledge_notifications_last_read_on(self):
        """Gets the knowledge_notifications_last_read_on of this User.


        :return: The knowledge_notifications_last_read_on of this User.
        :rtype: datetime
        """
        return self._knowledge_notifications_last_read_on

    @knowledge_notifications_last_read_on.setter
    def knowledge_notifications_last_read_on(self, knowledge_notifications_last_read_on):
        """Sets the knowledge_notifications_last_read_on of this User.


        :param knowledge_notifications_last_read_on: The knowledge_notifications_last_read_on of this User.
        :type knowledge_notifications_last_read_on: datetime
        """

        self._knowledge_notifications_last_read_on = knowledge_notifications_last_read_on

    @property
    def last_seen_on(self):
        """Gets the last_seen_on of this User.


        :return: The last_seen_on of this User.
        :rtype: datetime
        """
        return self._last_seen_on

    @last_seen_on.setter
    def last_seen_on(self, last_seen_on):
        """Sets the last_seen_on of this User.


        :param last_seen_on: The last_seen_on of this User.
        :type last_seen_on: datetime
        """

        self._last_seen_on = last_seen_on

    @property
    def name(self):
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def password_salt(self):
        """Gets the password_salt of this User.


        :return: The password_salt of this User.
        :rtype: str
        """
        return self._password_salt

    @password_salt.setter
    def password_salt(self, password_salt):
        """Sets the password_salt of this User.


        :param password_salt: The password_salt of this User.
        :type password_salt: str
        """

        self._password_salt = password_salt

    @property
    def referral_path(self):
        """Gets the referral_path of this User.


        :return: The referral_path of this User.
        :rtype: str
        """
        return self._referral_path

    @referral_path.setter
    def referral_path(self, referral_path):
        """Sets the referral_path of this User.


        :param referral_path: The referral_path of this User.
        :type referral_path: str
        """

        self._referral_path = referral_path

    @property
    def referred_users(self):
        """Gets the referred_users of this User.


        :return: The referred_users of this User.
        :rtype: int
        """
        return self._referred_users

    @referred_users.setter
    def referred_users(self, referred_users):
        """Sets the referred_users of this User.


        :param referred_users: The referred_users of this User.
        :type referred_users: int
        """

        self._referred_users = referred_users

    @property
    def referrer_key(self):
        """Gets the referrer_key of this User.


        :return: The referrer_key of this User.
        :rtype: str
        """
        return self._referrer_key

    @referrer_key.setter
    def referrer_key(self, referrer_key):
        """Sets the referrer_key of this User.


        :param referrer_key: The referrer_key of this User.
        :type referrer_key: str
        """

        self._referrer_key = referrer_key

    @property
    def settings(self):
        """Gets the settings of this User.


        :return: The settings of this User.
        :rtype: UserSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this User.


        :param settings: The settings of this User.
        :type settings: UserSettings
        """

        self._settings = settings

    @property
    def status(self):
        """Gets the status of this User.


        :return: The status of this User.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.


        :param status: The status of this User.
        :type status: str
        """
        allowed_values = ["Normal", "Fraudlent", "Locked"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscription_plan(self):
        """Gets the subscription_plan of this User.


        :return: The subscription_plan of this User.
        :rtype: SubscriptionPlan
        """
        return self._subscription_plan

    @subscription_plan.setter
    def subscription_plan(self, subscription_plan):
        """Sets the subscription_plan of this User.


        :param subscription_plan: The subscription_plan of this User.
        :type subscription_plan: SubscriptionPlan
        """

        self._subscription_plan = subscription_plan

    @property
    def type(self):
        """Gets the type of this User.


        :return: The type of this User.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this User.


        :param type: The type of this User.
        :type type: str
        """
        allowed_values = ["Anonymous", "Customer", "SystemAdministrator", "Collaborator"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def username(self):
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """

        self._username = username

    @property
    def verified_on(self):
        """Gets the verified_on of this User.


        :return: The verified_on of this User.
        :rtype: datetime
        """
        return self._verified_on

    @verified_on.setter
    def verified_on(self, verified_on):
        """Sets the verified_on of this User.


        :param verified_on: The verified_on of this User.
        :type verified_on: datetime
        """

        self._verified_on = verified_on

    @property
    def years_of_experience(self):
        """Gets the years_of_experience of this User.


        :return: The years_of_experience of this User.
        :rtype: str
        """
        return self._years_of_experience

    @years_of_experience.setter
    def years_of_experience(self, years_of_experience):
        """Sets the years_of_experience of this User.


        :param years_of_experience: The years_of_experience of this User.
        :type years_of_experience: str
        """
        allowed_values = ["One", "OneToThree", "ThreeToFive", "SixPlus"]  # noqa: E501
        if years_of_experience not in allowed_values:
            raise ValueError(
                "Invalid value for `years_of_experience` ({0}), must be one of {1}"
                .format(years_of_experience, allowed_values)
            )

        self._years_of_experience = years_of_experience
