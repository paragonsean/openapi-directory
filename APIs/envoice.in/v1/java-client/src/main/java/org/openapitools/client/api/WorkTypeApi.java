/*
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.WorkTypeCreateApiModel;
import org.openapitools.client.model.WorkTypeDeleteApiModel;
import org.openapitools.client.model.WorkTypeDetailsApiModel;
import org.openapitools.client.model.WorkTypeUpdateApiModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkTypeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkTypeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkTypeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workTypeApiAll
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypeApiAllCall(String xAuthKey, String xAuthSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/worktype/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workTypeApiAllValidateBeforeCall(String xAuthKey, String xAuthSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling workTypeApiAll(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling workTypeApiAll(Async)");
        }

        return workTypeApiAllCall(xAuthKey, xAuthSecret, _callback);

    }

    /**
     * Return all work types for the account
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @return List&lt;WorkTypeDetailsApiModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkTypeDetailsApiModel> workTypeApiAll(String xAuthKey, String xAuthSecret) throws ApiException {
        ApiResponse<List<WorkTypeDetailsApiModel>> localVarResp = workTypeApiAllWithHttpInfo(xAuthKey, xAuthSecret);
        return localVarResp.getData();
    }

    /**
     * Return all work types for the account
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @return ApiResponse&lt;List&lt;WorkTypeDetailsApiModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkTypeDetailsApiModel>> workTypeApiAllWithHttpInfo(String xAuthKey, String xAuthSecret) throws ApiException {
        okhttp3.Call localVarCall = workTypeApiAllValidateBeforeCall(xAuthKey, xAuthSecret, null);
        Type localVarReturnType = new TypeToken<List<WorkTypeDetailsApiModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return all work types for the account (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypeApiAllAsync(String xAuthKey, String xAuthSecret, final ApiCallback<List<WorkTypeDetailsApiModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workTypeApiAllValidateBeforeCall(xAuthKey, xAuthSecret, _callback);
        Type localVarReturnType = new TypeToken<List<WorkTypeDetailsApiModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workTypeApiDelete
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param workTypeDeleteApiModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypeApiDeleteCall(String xAuthKey, String xAuthSecret, WorkTypeDeleteApiModel workTypeDeleteApiModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workTypeDeleteApiModel;

        // create path and map variables
        String localVarPath = "/api/worktype/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workTypeApiDeleteValidateBeforeCall(String xAuthKey, String xAuthSecret, WorkTypeDeleteApiModel workTypeDeleteApiModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling workTypeApiDelete(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling workTypeApiDelete(Async)");
        }

        // verify the required parameter 'workTypeDeleteApiModel' is set
        if (workTypeDeleteApiModel == null) {
            throw new ApiException("Missing the required parameter 'workTypeDeleteApiModel' when calling workTypeApiDelete(Async)");
        }

        return workTypeApiDeleteCall(xAuthKey, xAuthSecret, workTypeDeleteApiModel, _callback);

    }

    /**
     * Delete an existing work type
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param workTypeDeleteApiModel  (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Integer workTypeApiDelete(String xAuthKey, String xAuthSecret, WorkTypeDeleteApiModel workTypeDeleteApiModel) throws ApiException {
        ApiResponse<Integer> localVarResp = workTypeApiDeleteWithHttpInfo(xAuthKey, xAuthSecret, workTypeDeleteApiModel);
        return localVarResp.getData();
    }

    /**
     * Delete an existing work type
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param workTypeDeleteApiModel  (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> workTypeApiDeleteWithHttpInfo(String xAuthKey, String xAuthSecret, WorkTypeDeleteApiModel workTypeDeleteApiModel) throws ApiException {
        okhttp3.Call localVarCall = workTypeApiDeleteValidateBeforeCall(xAuthKey, xAuthSecret, workTypeDeleteApiModel, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing work type (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param workTypeDeleteApiModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypeApiDeleteAsync(String xAuthKey, String xAuthSecret, WorkTypeDeleteApiModel workTypeDeleteApiModel, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = workTypeApiDeleteValidateBeforeCall(xAuthKey, xAuthSecret, workTypeDeleteApiModel, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workTypeApiDetails
     * @param workTypeId  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypeApiDetailsCall(Integer workTypeId, String xAuthKey, String xAuthSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/worktype/details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workTypeId", workTypeId));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workTypeApiDetailsValidateBeforeCall(Integer workTypeId, String xAuthKey, String xAuthSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workTypeId' is set
        if (workTypeId == null) {
            throw new ApiException("Missing the required parameter 'workTypeId' when calling workTypeApiDetails(Async)");
        }

        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling workTypeApiDetails(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling workTypeApiDetails(Async)");
        }

        return workTypeApiDetailsCall(workTypeId, xAuthKey, xAuthSecret, _callback);

    }

    /**
     * Return work type details
     * 
     * @param workTypeId  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @return WorkTypeDetailsApiModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WorkTypeDetailsApiModel workTypeApiDetails(Integer workTypeId, String xAuthKey, String xAuthSecret) throws ApiException {
        ApiResponse<WorkTypeDetailsApiModel> localVarResp = workTypeApiDetailsWithHttpInfo(workTypeId, xAuthKey, xAuthSecret);
        return localVarResp.getData();
    }

    /**
     * Return work type details
     * 
     * @param workTypeId  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @return ApiResponse&lt;WorkTypeDetailsApiModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkTypeDetailsApiModel> workTypeApiDetailsWithHttpInfo(Integer workTypeId, String xAuthKey, String xAuthSecret) throws ApiException {
        okhttp3.Call localVarCall = workTypeApiDetailsValidateBeforeCall(workTypeId, xAuthKey, xAuthSecret, null);
        Type localVarReturnType = new TypeToken<WorkTypeDetailsApiModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return work type details (asynchronously)
     * 
     * @param workTypeId  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypeApiDetailsAsync(Integer workTypeId, String xAuthKey, String xAuthSecret, final ApiCallback<WorkTypeDetailsApiModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = workTypeApiDetailsValidateBeforeCall(workTypeId, xAuthKey, xAuthSecret, _callback);
        Type localVarReturnType = new TypeToken<WorkTypeDetailsApiModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workTypeApiNew
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param workTypeCreateApiModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypeApiNewCall(String xAuthKey, String xAuthSecret, WorkTypeCreateApiModel workTypeCreateApiModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workTypeCreateApiModel;

        // create path and map variables
        String localVarPath = "/api/worktype/new";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workTypeApiNewValidateBeforeCall(String xAuthKey, String xAuthSecret, WorkTypeCreateApiModel workTypeCreateApiModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling workTypeApiNew(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling workTypeApiNew(Async)");
        }

        // verify the required parameter 'workTypeCreateApiModel' is set
        if (workTypeCreateApiModel == null) {
            throw new ApiException("Missing the required parameter 'workTypeCreateApiModel' when calling workTypeApiNew(Async)");
        }

        return workTypeApiNewCall(xAuthKey, xAuthSecret, workTypeCreateApiModel, _callback);

    }

    /**
     * Create a work type
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param workTypeCreateApiModel  (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Integer workTypeApiNew(String xAuthKey, String xAuthSecret, WorkTypeCreateApiModel workTypeCreateApiModel) throws ApiException {
        ApiResponse<Integer> localVarResp = workTypeApiNewWithHttpInfo(xAuthKey, xAuthSecret, workTypeCreateApiModel);
        return localVarResp.getData();
    }

    /**
     * Create a work type
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param workTypeCreateApiModel  (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> workTypeApiNewWithHttpInfo(String xAuthKey, String xAuthSecret, WorkTypeCreateApiModel workTypeCreateApiModel) throws ApiException {
        okhttp3.Call localVarCall = workTypeApiNewValidateBeforeCall(xAuthKey, xAuthSecret, workTypeCreateApiModel, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a work type (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param workTypeCreateApiModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypeApiNewAsync(String xAuthKey, String xAuthSecret, WorkTypeCreateApiModel workTypeCreateApiModel, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = workTypeApiNewValidateBeforeCall(xAuthKey, xAuthSecret, workTypeCreateApiModel, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workTypeApiSearch
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param queryOptionsQuery  (optional)
     * @param queryOptionsOrderBy  (optional)
     * @param queryOptionsOrder  (optional)
     * @param queryOptionsPage  (optional)
     * @param queryOptionsPageSize  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypeApiSearchCall(String xAuthKey, String xAuthSecret, String queryOptionsQuery, String queryOptionsOrderBy, String queryOptionsOrder, Integer queryOptionsPage, Integer queryOptionsPageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/worktype/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queryOptionsQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryOptions.query", queryOptionsQuery));
        }

        if (queryOptionsOrderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryOptions.orderBy", queryOptionsOrderBy));
        }

        if (queryOptionsOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryOptions.order", queryOptionsOrder));
        }

        if (queryOptionsPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryOptions.page", queryOptionsPage));
        }

        if (queryOptionsPageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryOptions.pageSize", queryOptionsPageSize));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workTypeApiSearchValidateBeforeCall(String xAuthKey, String xAuthSecret, String queryOptionsQuery, String queryOptionsOrderBy, String queryOptionsOrder, Integer queryOptionsPage, Integer queryOptionsPageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling workTypeApiSearch(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling workTypeApiSearch(Async)");
        }

        return workTypeApiSearchCall(xAuthKey, xAuthSecret, queryOptionsQuery, queryOptionsOrderBy, queryOptionsOrder, queryOptionsPage, queryOptionsPageSize, _callback);

    }

    /**
     * Return all work types for the account that match the query param
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param queryOptionsQuery  (optional)
     * @param queryOptionsOrderBy  (optional)
     * @param queryOptionsOrder  (optional)
     * @param queryOptionsPage  (optional)
     * @param queryOptionsPageSize  (optional)
     * @return List&lt;WorkTypeDetailsApiModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkTypeDetailsApiModel> workTypeApiSearch(String xAuthKey, String xAuthSecret, String queryOptionsQuery, String queryOptionsOrderBy, String queryOptionsOrder, Integer queryOptionsPage, Integer queryOptionsPageSize) throws ApiException {
        ApiResponse<List<WorkTypeDetailsApiModel>> localVarResp = workTypeApiSearchWithHttpInfo(xAuthKey, xAuthSecret, queryOptionsQuery, queryOptionsOrderBy, queryOptionsOrder, queryOptionsPage, queryOptionsPageSize);
        return localVarResp.getData();
    }

    /**
     * Return all work types for the account that match the query param
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param queryOptionsQuery  (optional)
     * @param queryOptionsOrderBy  (optional)
     * @param queryOptionsOrder  (optional)
     * @param queryOptionsPage  (optional)
     * @param queryOptionsPageSize  (optional)
     * @return ApiResponse&lt;List&lt;WorkTypeDetailsApiModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkTypeDetailsApiModel>> workTypeApiSearchWithHttpInfo(String xAuthKey, String xAuthSecret, String queryOptionsQuery, String queryOptionsOrderBy, String queryOptionsOrder, Integer queryOptionsPage, Integer queryOptionsPageSize) throws ApiException {
        okhttp3.Call localVarCall = workTypeApiSearchValidateBeforeCall(xAuthKey, xAuthSecret, queryOptionsQuery, queryOptionsOrderBy, queryOptionsOrder, queryOptionsPage, queryOptionsPageSize, null);
        Type localVarReturnType = new TypeToken<List<WorkTypeDetailsApiModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return all work types for the account that match the query param (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param queryOptionsQuery  (optional)
     * @param queryOptionsOrderBy  (optional)
     * @param queryOptionsOrder  (optional)
     * @param queryOptionsPage  (optional)
     * @param queryOptionsPageSize  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypeApiSearchAsync(String xAuthKey, String xAuthSecret, String queryOptionsQuery, String queryOptionsOrderBy, String queryOptionsOrder, Integer queryOptionsPage, Integer queryOptionsPageSize, final ApiCallback<List<WorkTypeDetailsApiModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = workTypeApiSearchValidateBeforeCall(xAuthKey, xAuthSecret, queryOptionsQuery, queryOptionsOrderBy, queryOptionsOrder, queryOptionsPage, queryOptionsPageSize, _callback);
        Type localVarReturnType = new TypeToken<List<WorkTypeDetailsApiModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workTypeApiUpdate
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param workTypeUpdateApiModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypeApiUpdateCall(String xAuthKey, String xAuthSecret, WorkTypeUpdateApiModel workTypeUpdateApiModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workTypeUpdateApiModel;

        // create path and map variables
        String localVarPath = "/api/worktype/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workTypeApiUpdateValidateBeforeCall(String xAuthKey, String xAuthSecret, WorkTypeUpdateApiModel workTypeUpdateApiModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling workTypeApiUpdate(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling workTypeApiUpdate(Async)");
        }

        // verify the required parameter 'workTypeUpdateApiModel' is set
        if (workTypeUpdateApiModel == null) {
            throw new ApiException("Missing the required parameter 'workTypeUpdateApiModel' when calling workTypeApiUpdate(Async)");
        }

        return workTypeApiUpdateCall(xAuthKey, xAuthSecret, workTypeUpdateApiModel, _callback);

    }

    /**
     * Update an existing work type
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param workTypeUpdateApiModel  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void workTypeApiUpdate(String xAuthKey, String xAuthSecret, WorkTypeUpdateApiModel workTypeUpdateApiModel) throws ApiException {
        workTypeApiUpdateWithHttpInfo(xAuthKey, xAuthSecret, workTypeUpdateApiModel);
    }

    /**
     * Update an existing work type
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param workTypeUpdateApiModel  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workTypeApiUpdateWithHttpInfo(String xAuthKey, String xAuthSecret, WorkTypeUpdateApiModel workTypeUpdateApiModel) throws ApiException {
        okhttp3.Call localVarCall = workTypeApiUpdateValidateBeforeCall(xAuthKey, xAuthSecret, workTypeUpdateApiModel, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an existing work type (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param workTypeUpdateApiModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workTypeApiUpdateAsync(String xAuthKey, String xAuthSecret, WorkTypeUpdateApiModel workTypeUpdateApiModel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workTypeApiUpdateValidateBeforeCall(xAuthKey, xAuthSecret, workTypeUpdateApiModel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
