/*
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExternalConnection;
import org.openapitools.client.model.SubscriptionPlan;
import org.openapitools.client.model.UserSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:00.947845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class User {
  public static final String SERIALIZED_NAME_ACTION_NOTIFICATIONS_LAST_READ_ON = "ActionNotificationsLastReadOn";
  @SerializedName(SERIALIZED_NAME_ACTION_NOTIFICATIONS_LAST_READ_ON)
  private OffsetDateTime actionNotificationsLastReadOn;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXTERNAL_CONNECTIONS = "ExternalConnections";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_CONNECTIONS)
  private List<ExternalConnection> externalConnections = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_BEEN_ONBOARDED = "HasBeenOnboarded";
  @SerializedName(SERIALIZED_NAME_HAS_BEEN_ONBOARDED)
  private Boolean hasBeenOnboarded;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_LOCKED = "IsLocked";
  @SerializedName(SERIALIZED_NAME_IS_LOCKED)
  private Boolean isLocked;

  public static final String SERIALIZED_NAME_IS_VERIFIED = "IsVerified";
  @SerializedName(SERIALIZED_NAME_IS_VERIFIED)
  private Boolean isVerified;

  public static final String SERIALIZED_NAME_KNOWLEDGE_NOTIFICATIONS_LAST_READ_ON = "KnowledgeNotificationsLastReadOn";
  @SerializedName(SERIALIZED_NAME_KNOWLEDGE_NOTIFICATIONS_LAST_READ_ON)
  private OffsetDateTime knowledgeNotificationsLastReadOn;

  public static final String SERIALIZED_NAME_LAST_SEEN_ON = "LastSeenOn";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_ON)
  private OffsetDateTime lastSeenOn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "Password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PASSWORD_SALT = "PasswordSalt";
  @SerializedName(SERIALIZED_NAME_PASSWORD_SALT)
  private String passwordSalt;

  public static final String SERIALIZED_NAME_REFERRAL_PATH = "ReferralPath";
  @SerializedName(SERIALIZED_NAME_REFERRAL_PATH)
  private String referralPath;

  public static final String SERIALIZED_NAME_REFERRED_USERS = "ReferredUsers";
  @SerializedName(SERIALIZED_NAME_REFERRED_USERS)
  private Integer referredUsers;

  public static final String SERIALIZED_NAME_REFERRER_KEY = "ReferrerKey";
  @SerializedName(SERIALIZED_NAME_REFERRER_KEY)
  private String referrerKey;

  public static final String SERIALIZED_NAME_SETTINGS = "Settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private UserSettings settings;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NORMAL("Normal"),
    
    FRAUDLENT("Fraudlent"),
    
    LOCKED("Locked");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_PLAN = "SubscriptionPlan";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_PLAN)
  private SubscriptionPlan subscriptionPlan;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ANONYMOUS("Anonymous"),
    
    CUSTOMER("Customer"),
    
    SYSTEM_ADMINISTRATOR("SystemAdministrator"),
    
    COLLABORATOR("Collaborator");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USERNAME = "Username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_VERIFIED_ON = "VerifiedOn";
  @SerializedName(SERIALIZED_NAME_VERIFIED_ON)
  private OffsetDateTime verifiedOn;

  /**
   * Gets or Sets yearsOfExperience
   */
  @JsonAdapter(YearsOfExperienceEnum.Adapter.class)
  public enum YearsOfExperienceEnum {
    ONE("One"),
    
    ONE_TO_THREE("OneToThree"),
    
    THREE_TO_FIVE("ThreeToFive"),
    
    SIX_PLUS("SixPlus");

    private String value;

    YearsOfExperienceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static YearsOfExperienceEnum fromValue(String value) {
      for (YearsOfExperienceEnum b : YearsOfExperienceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<YearsOfExperienceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final YearsOfExperienceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public YearsOfExperienceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return YearsOfExperienceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      YearsOfExperienceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_YEARS_OF_EXPERIENCE = "YearsOfExperience";
  @SerializedName(SERIALIZED_NAME_YEARS_OF_EXPERIENCE)
  private YearsOfExperienceEnum yearsOfExperience;

  public User() {
  }

  public User actionNotificationsLastReadOn(OffsetDateTime actionNotificationsLastReadOn) {
    this.actionNotificationsLastReadOn = actionNotificationsLastReadOn;
    return this;
  }

  /**
   * Get actionNotificationsLastReadOn
   * @return actionNotificationsLastReadOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActionNotificationsLastReadOn() {
    return actionNotificationsLastReadOn;
  }

  public void setActionNotificationsLastReadOn(OffsetDateTime actionNotificationsLastReadOn) {
    this.actionNotificationsLastReadOn = actionNotificationsLastReadOn;
  }


  public User email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public User externalConnections(List<ExternalConnection> externalConnections) {
    this.externalConnections = externalConnections;
    return this;
  }

  public User addExternalConnectionsItem(ExternalConnection externalConnectionsItem) {
    if (this.externalConnections == null) {
      this.externalConnections = new ArrayList<>();
    }
    this.externalConnections.add(externalConnectionsItem);
    return this;
  }

  /**
   * Get externalConnections
   * @return externalConnections
   */
  @javax.annotation.Nullable
  public List<ExternalConnection> getExternalConnections() {
    return externalConnections;
  }

  public void setExternalConnections(List<ExternalConnection> externalConnections) {
    this.externalConnections = externalConnections;
  }


  public User hasBeenOnboarded(Boolean hasBeenOnboarded) {
    this.hasBeenOnboarded = hasBeenOnboarded;
    return this;
  }

  /**
   * Get hasBeenOnboarded
   * @return hasBeenOnboarded
   */
  @javax.annotation.Nullable
  public Boolean getHasBeenOnboarded() {
    return hasBeenOnboarded;
  }

  public void setHasBeenOnboarded(Boolean hasBeenOnboarded) {
    this.hasBeenOnboarded = hasBeenOnboarded;
  }


  public User id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public User isLocked(Boolean isLocked) {
    this.isLocked = isLocked;
    return this;
  }

  /**
   * Get isLocked
   * @return isLocked
   */
  @javax.annotation.Nullable
  public Boolean getIsLocked() {
    return isLocked;
  }

  public void setIsLocked(Boolean isLocked) {
    this.isLocked = isLocked;
  }


  public User isVerified(Boolean isVerified) {
    this.isVerified = isVerified;
    return this;
  }

  /**
   * Get isVerified
   * @return isVerified
   */
  @javax.annotation.Nullable
  public Boolean getIsVerified() {
    return isVerified;
  }

  public void setIsVerified(Boolean isVerified) {
    this.isVerified = isVerified;
  }


  public User knowledgeNotificationsLastReadOn(OffsetDateTime knowledgeNotificationsLastReadOn) {
    this.knowledgeNotificationsLastReadOn = knowledgeNotificationsLastReadOn;
    return this;
  }

  /**
   * Get knowledgeNotificationsLastReadOn
   * @return knowledgeNotificationsLastReadOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getKnowledgeNotificationsLastReadOn() {
    return knowledgeNotificationsLastReadOn;
  }

  public void setKnowledgeNotificationsLastReadOn(OffsetDateTime knowledgeNotificationsLastReadOn) {
    this.knowledgeNotificationsLastReadOn = knowledgeNotificationsLastReadOn;
  }


  public User lastSeenOn(OffsetDateTime lastSeenOn) {
    this.lastSeenOn = lastSeenOn;
    return this;
  }

  /**
   * Get lastSeenOn
   * @return lastSeenOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSeenOn() {
    return lastSeenOn;
  }

  public void setLastSeenOn(OffsetDateTime lastSeenOn) {
    this.lastSeenOn = lastSeenOn;
  }


  public User name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public User password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public User passwordSalt(String passwordSalt) {
    this.passwordSalt = passwordSalt;
    return this;
  }

  /**
   * Get passwordSalt
   * @return passwordSalt
   */
  @javax.annotation.Nullable
  public String getPasswordSalt() {
    return passwordSalt;
  }

  public void setPasswordSalt(String passwordSalt) {
    this.passwordSalt = passwordSalt;
  }


  public User referralPath(String referralPath) {
    this.referralPath = referralPath;
    return this;
  }

  /**
   * Get referralPath
   * @return referralPath
   */
  @javax.annotation.Nullable
  public String getReferralPath() {
    return referralPath;
  }

  public void setReferralPath(String referralPath) {
    this.referralPath = referralPath;
  }


  public User referredUsers(Integer referredUsers) {
    this.referredUsers = referredUsers;
    return this;
  }

  /**
   * Get referredUsers
   * @return referredUsers
   */
  @javax.annotation.Nullable
  public Integer getReferredUsers() {
    return referredUsers;
  }

  public void setReferredUsers(Integer referredUsers) {
    this.referredUsers = referredUsers;
  }


  public User referrerKey(String referrerKey) {
    this.referrerKey = referrerKey;
    return this;
  }

  /**
   * Get referrerKey
   * @return referrerKey
   */
  @javax.annotation.Nullable
  public String getReferrerKey() {
    return referrerKey;
  }

  public void setReferrerKey(String referrerKey) {
    this.referrerKey = referrerKey;
  }


  public User settings(UserSettings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nullable
  public UserSettings getSettings() {
    return settings;
  }

  public void setSettings(UserSettings settings) {
    this.settings = settings;
  }


  public User status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public User subscriptionPlan(SubscriptionPlan subscriptionPlan) {
    this.subscriptionPlan = subscriptionPlan;
    return this;
  }

  /**
   * Get subscriptionPlan
   * @return subscriptionPlan
   */
  @javax.annotation.Nullable
  public SubscriptionPlan getSubscriptionPlan() {
    return subscriptionPlan;
  }

  public void setSubscriptionPlan(SubscriptionPlan subscriptionPlan) {
    this.subscriptionPlan = subscriptionPlan;
  }


  public User type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public User username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public User verifiedOn(OffsetDateTime verifiedOn) {
    this.verifiedOn = verifiedOn;
    return this;
  }

  /**
   * Get verifiedOn
   * @return verifiedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getVerifiedOn() {
    return verifiedOn;
  }

  public void setVerifiedOn(OffsetDateTime verifiedOn) {
    this.verifiedOn = verifiedOn;
  }


  public User yearsOfExperience(YearsOfExperienceEnum yearsOfExperience) {
    this.yearsOfExperience = yearsOfExperience;
    return this;
  }

  /**
   * Get yearsOfExperience
   * @return yearsOfExperience
   */
  @javax.annotation.Nullable
  public YearsOfExperienceEnum getYearsOfExperience() {
    return yearsOfExperience;
  }

  public void setYearsOfExperience(YearsOfExperienceEnum yearsOfExperience) {
    this.yearsOfExperience = yearsOfExperience;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.actionNotificationsLastReadOn, user.actionNotificationsLastReadOn) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.externalConnections, user.externalConnections) &&
        Objects.equals(this.hasBeenOnboarded, user.hasBeenOnboarded) &&
        Objects.equals(this.id, user.id) &&
        Objects.equals(this.isLocked, user.isLocked) &&
        Objects.equals(this.isVerified, user.isVerified) &&
        Objects.equals(this.knowledgeNotificationsLastReadOn, user.knowledgeNotificationsLastReadOn) &&
        Objects.equals(this.lastSeenOn, user.lastSeenOn) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.password, user.password) &&
        Objects.equals(this.passwordSalt, user.passwordSalt) &&
        Objects.equals(this.referralPath, user.referralPath) &&
        Objects.equals(this.referredUsers, user.referredUsers) &&
        Objects.equals(this.referrerKey, user.referrerKey) &&
        Objects.equals(this.settings, user.settings) &&
        Objects.equals(this.status, user.status) &&
        Objects.equals(this.subscriptionPlan, user.subscriptionPlan) &&
        Objects.equals(this.type, user.type) &&
        Objects.equals(this.username, user.username) &&
        Objects.equals(this.verifiedOn, user.verifiedOn) &&
        Objects.equals(this.yearsOfExperience, user.yearsOfExperience);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionNotificationsLastReadOn, email, externalConnections, hasBeenOnboarded, id, isLocked, isVerified, knowledgeNotificationsLastReadOn, lastSeenOn, name, password, passwordSalt, referralPath, referredUsers, referrerKey, settings, status, subscriptionPlan, type, username, verifiedOn, yearsOfExperience);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    actionNotificationsLastReadOn: ").append(toIndentedString(actionNotificationsLastReadOn)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    externalConnections: ").append(toIndentedString(externalConnections)).append("\n");
    sb.append("    hasBeenOnboarded: ").append(toIndentedString(hasBeenOnboarded)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isLocked: ").append(toIndentedString(isLocked)).append("\n");
    sb.append("    isVerified: ").append(toIndentedString(isVerified)).append("\n");
    sb.append("    knowledgeNotificationsLastReadOn: ").append(toIndentedString(knowledgeNotificationsLastReadOn)).append("\n");
    sb.append("    lastSeenOn: ").append(toIndentedString(lastSeenOn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    passwordSalt: ").append(toIndentedString(passwordSalt)).append("\n");
    sb.append("    referralPath: ").append(toIndentedString(referralPath)).append("\n");
    sb.append("    referredUsers: ").append(toIndentedString(referredUsers)).append("\n");
    sb.append("    referrerKey: ").append(toIndentedString(referrerKey)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscriptionPlan: ").append(toIndentedString(subscriptionPlan)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    verifiedOn: ").append(toIndentedString(verifiedOn)).append("\n");
    sb.append("    yearsOfExperience: ").append(toIndentedString(yearsOfExperience)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActionNotificationsLastReadOn");
    openapiFields.add("Email");
    openapiFields.add("ExternalConnections");
    openapiFields.add("HasBeenOnboarded");
    openapiFields.add("Id");
    openapiFields.add("IsLocked");
    openapiFields.add("IsVerified");
    openapiFields.add("KnowledgeNotificationsLastReadOn");
    openapiFields.add("LastSeenOn");
    openapiFields.add("Name");
    openapiFields.add("Password");
    openapiFields.add("PasswordSalt");
    openapiFields.add("ReferralPath");
    openapiFields.add("ReferredUsers");
    openapiFields.add("ReferrerKey");
    openapiFields.add("Settings");
    openapiFields.add("Status");
    openapiFields.add("SubscriptionPlan");
    openapiFields.add("Type");
    openapiFields.add("Username");
    openapiFields.add("VerifiedOn");
    openapiFields.add("YearsOfExperience");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to User
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) && !jsonObj.get("Email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Email").toString()));
      }
      if (jsonObj.get("ExternalConnections") != null && !jsonObj.get("ExternalConnections").isJsonNull()) {
        JsonArray jsonArrayexternalConnections = jsonObj.getAsJsonArray("ExternalConnections");
        if (jsonArrayexternalConnections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ExternalConnections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ExternalConnections` to be an array in the JSON string but got `%s`", jsonObj.get("ExternalConnections").toString()));
          }

          // validate the optional field `ExternalConnections` (array)
          for (int i = 0; i < jsonArrayexternalConnections.size(); i++) {
            ExternalConnection.validateJsonElement(jsonArrayexternalConnections.get(i));
          };
        }
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Password") != null && !jsonObj.get("Password").isJsonNull()) && !jsonObj.get("Password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Password").toString()));
      }
      if ((jsonObj.get("PasswordSalt") != null && !jsonObj.get("PasswordSalt").isJsonNull()) && !jsonObj.get("PasswordSalt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PasswordSalt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PasswordSalt").toString()));
      }
      if ((jsonObj.get("ReferralPath") != null && !jsonObj.get("ReferralPath").isJsonNull()) && !jsonObj.get("ReferralPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReferralPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReferralPath").toString()));
      }
      if ((jsonObj.get("ReferrerKey") != null && !jsonObj.get("ReferrerKey").isJsonNull()) && !jsonObj.get("ReferrerKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReferrerKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReferrerKey").toString()));
      }
      // validate the optional field `Settings`
      if (jsonObj.get("Settings") != null && !jsonObj.get("Settings").isJsonNull()) {
        UserSettings.validateJsonElement(jsonObj.get("Settings"));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `SubscriptionPlan`
      if (jsonObj.get("SubscriptionPlan") != null && !jsonObj.get("SubscriptionPlan").isJsonNull()) {
        SubscriptionPlan.validateJsonElement(jsonObj.get("SubscriptionPlan"));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("Type"));
      }
      if ((jsonObj.get("Username") != null && !jsonObj.get("Username").isJsonNull()) && !jsonObj.get("Username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Username").toString()));
      }
      if ((jsonObj.get("YearsOfExperience") != null && !jsonObj.get("YearsOfExperience").isJsonNull()) && !jsonObj.get("YearsOfExperience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `YearsOfExperience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("YearsOfExperience").toString()));
      }
      // validate the optional field `YearsOfExperience`
      if (jsonObj.get("YearsOfExperience") != null && !jsonObj.get("YearsOfExperience").isJsonNull()) {
        YearsOfExperienceEnum.validateJsonElement(jsonObj.get("YearsOfExperience"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of User given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of User
   * @throws IOException if the JSON string is invalid with respect to User
   */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

  /**
   * Convert an instance of User to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

