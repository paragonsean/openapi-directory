/*
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of invoice recurring profile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:00.947845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvoiceRecurringApiModel {
  public static final String SERIALIZED_NAME_DAY_OF_MONTH = "DayOfMonth";
  @SerializedName(SERIALIZED_NAME_DAY_OF_MONTH)
  private Integer dayOfMonth;

  /**
   * Day when the recurrance should happen
   */
  @JsonAdapter(DayOfWeekEnum.Adapter.class)
  public enum DayOfWeekEnum {
    SUNDAY("Sunday"),
    
    MONDAY("Monday"),
    
    TUESDAY("Tuesday"),
    
    WEDNESDAY("Wednesday"),
    
    THURSDAY("Thursday"),
    
    FRIDAY("Friday"),
    
    SATURDAY("Saturday");

    private String value;

    DayOfWeekEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DayOfWeekEnum fromValue(String value) {
      for (DayOfWeekEnum b : DayOfWeekEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DayOfWeekEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DayOfWeekEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DayOfWeekEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DayOfWeekEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DayOfWeekEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DAY_OF_WEEK = "DayOfWeek";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK)
  private DayOfWeekEnum dayOfWeek;

  public static final String SERIALIZED_NAME_DUE_DATE_IN_DAYS = "DueDateInDays";
  @SerializedName(SERIALIZED_NAME_DUE_DATE_IN_DAYS)
  private Integer dueDateInDays;

  public static final String SERIALIZED_NAME_END_OF_RECURRANCE = "EndOfRecurrance";
  @SerializedName(SERIALIZED_NAME_END_OF_RECURRANCE)
  private OffsetDateTime endOfRecurrance;

  public static final String SERIALIZED_NAME_MONTH = "Month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private Integer month;

  /**
   * How often the recurrance occurs
   */
  @JsonAdapter(RecurrancePatternEnum.Adapter.class)
  public enum RecurrancePatternEnum {
    DAILY("Daily"),
    
    WEEKLY("Weekly"),
    
    MONTHLY("Monthly"),
    
    YEARLY("Yearly");

    private String value;

    RecurrancePatternEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecurrancePatternEnum fromValue(String value) {
      for (RecurrancePatternEnum b : RecurrancePatternEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecurrancePatternEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecurrancePatternEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecurrancePatternEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecurrancePatternEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecurrancePatternEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECURRANCE_PATTERN = "RecurrancePattern";
  @SerializedName(SERIALIZED_NAME_RECURRANCE_PATTERN)
  private RecurrancePatternEnum recurrancePattern;

  public static final String SERIALIZED_NAME_RECURRANCE_VALUE = "RecurranceValue";
  @SerializedName(SERIALIZED_NAME_RECURRANCE_VALUE)
  private Integer recurranceValue;

  public static final String SERIALIZED_NAME_START_OF_RECURRANCE = "StartOfRecurrance";
  @SerializedName(SERIALIZED_NAME_START_OF_RECURRANCE)
  private OffsetDateTime startOfRecurrance;

  /**
   * The status of the recurrance
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("Pending"),
    
    ACTIVE("Active"),
    
    CANCELLED("Cancelled"),
    
    FINISHED("Finished");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public InvoiceRecurringApiModel() {
  }

  public InvoiceRecurringApiModel dayOfMonth(Integer dayOfMonth) {
    this.dayOfMonth = dayOfMonth;
    return this;
  }

  /**
   * Day of month when the recurrance should happen
   * @return dayOfMonth
   */
  @javax.annotation.Nullable
  public Integer getDayOfMonth() {
    return dayOfMonth;
  }

  public void setDayOfMonth(Integer dayOfMonth) {
    this.dayOfMonth = dayOfMonth;
  }


  public InvoiceRecurringApiModel dayOfWeek(DayOfWeekEnum dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
    return this;
  }

  /**
   * Day when the recurrance should happen
   * @return dayOfWeek
   */
  @javax.annotation.Nullable
  public DayOfWeekEnum getDayOfWeek() {
    return dayOfWeek;
  }

  public void setDayOfWeek(DayOfWeekEnum dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
  }


  public InvoiceRecurringApiModel dueDateInDays(Integer dueDateInDays) {
    this.dueDateInDays = dueDateInDays;
    return this;
  }

  /**
   * Total number of days for the client to pay the invoice after issuing it
   * @return dueDateInDays
   */
  @javax.annotation.Nullable
  public Integer getDueDateInDays() {
    return dueDateInDays;
  }

  public void setDueDateInDays(Integer dueDateInDays) {
    this.dueDateInDays = dueDateInDays;
  }


  public InvoiceRecurringApiModel endOfRecurrance(OffsetDateTime endOfRecurrance) {
    this.endOfRecurrance = endOfRecurrance;
    return this;
  }

  /**
   * Indcate the date when the recurrance should stop
   * @return endOfRecurrance
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndOfRecurrance() {
    return endOfRecurrance;
  }

  public void setEndOfRecurrance(OffsetDateTime endOfRecurrance) {
    this.endOfRecurrance = endOfRecurrance;
  }


  public InvoiceRecurringApiModel month(Integer month) {
    this.month = month;
    return this;
  }

  /**
   * Month when the recurrance should happen
   * @return month
   */
  @javax.annotation.Nullable
  public Integer getMonth() {
    return month;
  }

  public void setMonth(Integer month) {
    this.month = month;
  }


  public InvoiceRecurringApiModel recurrancePattern(RecurrancePatternEnum recurrancePattern) {
    this.recurrancePattern = recurrancePattern;
    return this;
  }

  /**
   * How often the recurrance occurs
   * @return recurrancePattern
   */
  @javax.annotation.Nullable
  public RecurrancePatternEnum getRecurrancePattern() {
    return recurrancePattern;
  }

  public void setRecurrancePattern(RecurrancePatternEnum recurrancePattern) {
    this.recurrancePattern = recurrancePattern;
  }


  public InvoiceRecurringApiModel recurranceValue(Integer recurranceValue) {
    this.recurranceValue = recurranceValue;
    return this;
  }

  /**
   * Recurring every [value] RecurrancePattern  Ex: Recur every 1 week
   * @return recurranceValue
   */
  @javax.annotation.Nullable
  public Integer getRecurranceValue() {
    return recurranceValue;
  }

  public void setRecurranceValue(Integer recurranceValue) {
    this.recurranceValue = recurranceValue;
  }


  public InvoiceRecurringApiModel startOfRecurrance(OffsetDateTime startOfRecurrance) {
    this.startOfRecurrance = startOfRecurrance;
    return this;
  }

  /**
   * Indcate the date when the recurrance has started
   * @return startOfRecurrance
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartOfRecurrance() {
    return startOfRecurrance;
  }

  public void setStartOfRecurrance(OffsetDateTime startOfRecurrance) {
    this.startOfRecurrance = startOfRecurrance;
  }


  public InvoiceRecurringApiModel status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the recurrance
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public InvoiceRecurringApiModel title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the recurring profile.   Ex: BRAND PACKAGE - 2017-08-16 - 2018-08-16
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceRecurringApiModel invoiceRecurringApiModel = (InvoiceRecurringApiModel) o;
    return Objects.equals(this.dayOfMonth, invoiceRecurringApiModel.dayOfMonth) &&
        Objects.equals(this.dayOfWeek, invoiceRecurringApiModel.dayOfWeek) &&
        Objects.equals(this.dueDateInDays, invoiceRecurringApiModel.dueDateInDays) &&
        Objects.equals(this.endOfRecurrance, invoiceRecurringApiModel.endOfRecurrance) &&
        Objects.equals(this.month, invoiceRecurringApiModel.month) &&
        Objects.equals(this.recurrancePattern, invoiceRecurringApiModel.recurrancePattern) &&
        Objects.equals(this.recurranceValue, invoiceRecurringApiModel.recurranceValue) &&
        Objects.equals(this.startOfRecurrance, invoiceRecurringApiModel.startOfRecurrance) &&
        Objects.equals(this.status, invoiceRecurringApiModel.status) &&
        Objects.equals(this.title, invoiceRecurringApiModel.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dayOfMonth, dayOfWeek, dueDateInDays, endOfRecurrance, month, recurrancePattern, recurranceValue, startOfRecurrance, status, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceRecurringApiModel {\n");
    sb.append("    dayOfMonth: ").append(toIndentedString(dayOfMonth)).append("\n");
    sb.append("    dayOfWeek: ").append(toIndentedString(dayOfWeek)).append("\n");
    sb.append("    dueDateInDays: ").append(toIndentedString(dueDateInDays)).append("\n");
    sb.append("    endOfRecurrance: ").append(toIndentedString(endOfRecurrance)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    recurrancePattern: ").append(toIndentedString(recurrancePattern)).append("\n");
    sb.append("    recurranceValue: ").append(toIndentedString(recurranceValue)).append("\n");
    sb.append("    startOfRecurrance: ").append(toIndentedString(startOfRecurrance)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DayOfMonth");
    openapiFields.add("DayOfWeek");
    openapiFields.add("DueDateInDays");
    openapiFields.add("EndOfRecurrance");
    openapiFields.add("Month");
    openapiFields.add("RecurrancePattern");
    openapiFields.add("RecurranceValue");
    openapiFields.add("StartOfRecurrance");
    openapiFields.add("Status");
    openapiFields.add("Title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceRecurringApiModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceRecurringApiModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceRecurringApiModel is not found in the empty JSON string", InvoiceRecurringApiModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceRecurringApiModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceRecurringApiModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DayOfWeek") != null && !jsonObj.get("DayOfWeek").isJsonNull()) && !jsonObj.get("DayOfWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DayOfWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DayOfWeek").toString()));
      }
      // validate the optional field `DayOfWeek`
      if (jsonObj.get("DayOfWeek") != null && !jsonObj.get("DayOfWeek").isJsonNull()) {
        DayOfWeekEnum.validateJsonElement(jsonObj.get("DayOfWeek"));
      }
      if ((jsonObj.get("RecurrancePattern") != null && !jsonObj.get("RecurrancePattern").isJsonNull()) && !jsonObj.get("RecurrancePattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RecurrancePattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RecurrancePattern").toString()));
      }
      // validate the optional field `RecurrancePattern`
      if (jsonObj.get("RecurrancePattern") != null && !jsonObj.get("RecurrancePattern").isJsonNull()) {
        RecurrancePatternEnum.validateJsonElement(jsonObj.get("RecurrancePattern"));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceRecurringApiModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceRecurringApiModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceRecurringApiModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceRecurringApiModel.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceRecurringApiModel>() {
           @Override
           public void write(JsonWriter out, InvoiceRecurringApiModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceRecurringApiModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceRecurringApiModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceRecurringApiModel
   * @throws IOException if the JSON string is invalid with respect to InvoiceRecurringApiModel
   */
  public static InvoiceRecurringApiModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceRecurringApiModel.class);
  }

  /**
   * Convert an instance of InvoiceRecurringApiModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

