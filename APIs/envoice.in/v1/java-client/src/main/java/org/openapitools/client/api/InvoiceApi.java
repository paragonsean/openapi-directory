/*
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ChangeStatusApiModel;
import org.openapitools.client.model.InvoiceCategoryApiModel;
import org.openapitools.client.model.InvoiceCategoryCreateApiModel;
import org.openapitools.client.model.InvoiceCategoryDeleteApiModel;
import org.openapitools.client.model.InvoiceCategoryUpdateApiModel;
import org.openapitools.client.model.InvoiceCreateApiModel;
import org.openapitools.client.model.InvoiceDeleteApiModel;
import org.openapitools.client.model.InvoiceFullDetailsApiModel;
import org.openapitools.client.model.InvoiceUpdateApiModel;
import org.openapitools.client.model.InvoiceUriApiModel;
import org.openapitools.client.model.ListResultInvoiceCategoryApiModel;
import org.openapitools.client.model.ListResultInvoiceDetailsApiModel;
import org.openapitools.client.model.SendInvoiceToAccountantApiModel;
import org.openapitools.client.model.SendInvoiceToClientApiModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvoiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvoiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiInvoiceAllcategoriesGet
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param query  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiInvoiceAllcategoriesGetCall(String xAuthKey, String xAuthSecret, String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/invoice/allcategories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiInvoiceAllcategoriesGetValidateBeforeCall(String xAuthKey, String xAuthSecret, String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling apiInvoiceAllcategoriesGet(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling apiInvoiceAllcategoriesGet(Async)");
        }

        return apiInvoiceAllcategoriesGetCall(xAuthKey, xAuthSecret, query, _callback);

    }

    /**
     * Return all invoice categories for the account
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param query  (optional)
     * @return ListResultInvoiceCategoryApiModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListResultInvoiceCategoryApiModel apiInvoiceAllcategoriesGet(String xAuthKey, String xAuthSecret, String query) throws ApiException {
        ApiResponse<ListResultInvoiceCategoryApiModel> localVarResp = apiInvoiceAllcategoriesGetWithHttpInfo(xAuthKey, xAuthSecret, query);
        return localVarResp.getData();
    }

    /**
     * Return all invoice categories for the account
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param query  (optional)
     * @return ApiResponse&lt;ListResultInvoiceCategoryApiModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResultInvoiceCategoryApiModel> apiInvoiceAllcategoriesGetWithHttpInfo(String xAuthKey, String xAuthSecret, String query) throws ApiException {
        okhttp3.Call localVarCall = apiInvoiceAllcategoriesGetValidateBeforeCall(xAuthKey, xAuthSecret, query, null);
        Type localVarReturnType = new TypeToken<ListResultInvoiceCategoryApiModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return all invoice categories for the account (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param query  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiInvoiceAllcategoriesGetAsync(String xAuthKey, String xAuthSecret, String query, final ApiCallback<ListResultInvoiceCategoryApiModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiInvoiceAllcategoriesGetValidateBeforeCall(xAuthKey, xAuthSecret, query, _callback);
        Type localVarReturnType = new TypeToken<ListResultInvoiceCategoryApiModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiInvoiceDeletecategoryPost
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceCategoryDeleteApiModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiInvoiceDeletecategoryPostCall(String xAuthKey, String xAuthSecret, InvoiceCategoryDeleteApiModel invoiceCategoryDeleteApiModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceCategoryDeleteApiModel;

        // create path and map variables
        String localVarPath = "/api/invoice/deletecategory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiInvoiceDeletecategoryPostValidateBeforeCall(String xAuthKey, String xAuthSecret, InvoiceCategoryDeleteApiModel invoiceCategoryDeleteApiModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling apiInvoiceDeletecategoryPost(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling apiInvoiceDeletecategoryPost(Async)");
        }

        // verify the required parameter 'invoiceCategoryDeleteApiModel' is set
        if (invoiceCategoryDeleteApiModel == null) {
            throw new ApiException("Missing the required parameter 'invoiceCategoryDeleteApiModel' when calling apiInvoiceDeletecategoryPost(Async)");
        }

        return apiInvoiceDeletecategoryPostCall(xAuthKey, xAuthSecret, invoiceCategoryDeleteApiModel, _callback);

    }

    /**
     * Delete an existing invoice category
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceCategoryDeleteApiModel  (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Integer apiInvoiceDeletecategoryPost(String xAuthKey, String xAuthSecret, InvoiceCategoryDeleteApiModel invoiceCategoryDeleteApiModel) throws ApiException {
        ApiResponse<Integer> localVarResp = apiInvoiceDeletecategoryPostWithHttpInfo(xAuthKey, xAuthSecret, invoiceCategoryDeleteApiModel);
        return localVarResp.getData();
    }

    /**
     * Delete an existing invoice category
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceCategoryDeleteApiModel  (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> apiInvoiceDeletecategoryPostWithHttpInfo(String xAuthKey, String xAuthSecret, InvoiceCategoryDeleteApiModel invoiceCategoryDeleteApiModel) throws ApiException {
        okhttp3.Call localVarCall = apiInvoiceDeletecategoryPostValidateBeforeCall(xAuthKey, xAuthSecret, invoiceCategoryDeleteApiModel, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing invoice category (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceCategoryDeleteApiModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiInvoiceDeletecategoryPostAsync(String xAuthKey, String xAuthSecret, InvoiceCategoryDeleteApiModel invoiceCategoryDeleteApiModel, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiInvoiceDeletecategoryPostValidateBeforeCall(xAuthKey, xAuthSecret, invoiceCategoryDeleteApiModel, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiInvoiceNewcategoryPost
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceCategoryCreateApiModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiInvoiceNewcategoryPostCall(String xAuthKey, String xAuthSecret, InvoiceCategoryCreateApiModel invoiceCategoryCreateApiModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceCategoryCreateApiModel;

        // create path and map variables
        String localVarPath = "/api/invoice/newcategory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiInvoiceNewcategoryPostValidateBeforeCall(String xAuthKey, String xAuthSecret, InvoiceCategoryCreateApiModel invoiceCategoryCreateApiModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling apiInvoiceNewcategoryPost(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling apiInvoiceNewcategoryPost(Async)");
        }

        // verify the required parameter 'invoiceCategoryCreateApiModel' is set
        if (invoiceCategoryCreateApiModel == null) {
            throw new ApiException("Missing the required parameter 'invoiceCategoryCreateApiModel' when calling apiInvoiceNewcategoryPost(Async)");
        }

        return apiInvoiceNewcategoryPostCall(xAuthKey, xAuthSecret, invoiceCategoryCreateApiModel, _callback);

    }

    /**
     * Create an invoice category
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceCategoryCreateApiModel  (required)
     * @return InvoiceCategoryApiModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceCategoryApiModel apiInvoiceNewcategoryPost(String xAuthKey, String xAuthSecret, InvoiceCategoryCreateApiModel invoiceCategoryCreateApiModel) throws ApiException {
        ApiResponse<InvoiceCategoryApiModel> localVarResp = apiInvoiceNewcategoryPostWithHttpInfo(xAuthKey, xAuthSecret, invoiceCategoryCreateApiModel);
        return localVarResp.getData();
    }

    /**
     * Create an invoice category
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceCategoryCreateApiModel  (required)
     * @return ApiResponse&lt;InvoiceCategoryApiModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceCategoryApiModel> apiInvoiceNewcategoryPostWithHttpInfo(String xAuthKey, String xAuthSecret, InvoiceCategoryCreateApiModel invoiceCategoryCreateApiModel) throws ApiException {
        okhttp3.Call localVarCall = apiInvoiceNewcategoryPostValidateBeforeCall(xAuthKey, xAuthSecret, invoiceCategoryCreateApiModel, null);
        Type localVarReturnType = new TypeToken<InvoiceCategoryApiModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an invoice category (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceCategoryCreateApiModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiInvoiceNewcategoryPostAsync(String xAuthKey, String xAuthSecret, InvoiceCategoryCreateApiModel invoiceCategoryCreateApiModel, final ApiCallback<InvoiceCategoryApiModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiInvoiceNewcategoryPostValidateBeforeCall(xAuthKey, xAuthSecret, invoiceCategoryCreateApiModel, _callback);
        Type localVarReturnType = new TypeToken<InvoiceCategoryApiModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiInvoiceUpdatecategoryPost
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceCategoryUpdateApiModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiInvoiceUpdatecategoryPostCall(String xAuthKey, String xAuthSecret, InvoiceCategoryUpdateApiModel invoiceCategoryUpdateApiModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceCategoryUpdateApiModel;

        // create path and map variables
        String localVarPath = "/api/invoice/updatecategory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiInvoiceUpdatecategoryPostValidateBeforeCall(String xAuthKey, String xAuthSecret, InvoiceCategoryUpdateApiModel invoiceCategoryUpdateApiModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling apiInvoiceUpdatecategoryPost(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling apiInvoiceUpdatecategoryPost(Async)");
        }

        // verify the required parameter 'invoiceCategoryUpdateApiModel' is set
        if (invoiceCategoryUpdateApiModel == null) {
            throw new ApiException("Missing the required parameter 'invoiceCategoryUpdateApiModel' when calling apiInvoiceUpdatecategoryPost(Async)");
        }

        return apiInvoiceUpdatecategoryPostCall(xAuthKey, xAuthSecret, invoiceCategoryUpdateApiModel, _callback);

    }

    /**
     * Update an existing invoice category
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceCategoryUpdateApiModel  (required)
     * @return InvoiceCategoryApiModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceCategoryApiModel apiInvoiceUpdatecategoryPost(String xAuthKey, String xAuthSecret, InvoiceCategoryUpdateApiModel invoiceCategoryUpdateApiModel) throws ApiException {
        ApiResponse<InvoiceCategoryApiModel> localVarResp = apiInvoiceUpdatecategoryPostWithHttpInfo(xAuthKey, xAuthSecret, invoiceCategoryUpdateApiModel);
        return localVarResp.getData();
    }

    /**
     * Update an existing invoice category
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceCategoryUpdateApiModel  (required)
     * @return ApiResponse&lt;InvoiceCategoryApiModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceCategoryApiModel> apiInvoiceUpdatecategoryPostWithHttpInfo(String xAuthKey, String xAuthSecret, InvoiceCategoryUpdateApiModel invoiceCategoryUpdateApiModel) throws ApiException {
        okhttp3.Call localVarCall = apiInvoiceUpdatecategoryPostValidateBeforeCall(xAuthKey, xAuthSecret, invoiceCategoryUpdateApiModel, null);
        Type localVarReturnType = new TypeToken<InvoiceCategoryApiModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing invoice category (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceCategoryUpdateApiModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiInvoiceUpdatecategoryPostAsync(String xAuthKey, String xAuthSecret, InvoiceCategoryUpdateApiModel invoiceCategoryUpdateApiModel, final ApiCallback<InvoiceCategoryApiModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiInvoiceUpdatecategoryPostValidateBeforeCall(xAuthKey, xAuthSecret, invoiceCategoryUpdateApiModel, _callback);
        Type localVarReturnType = new TypeToken<InvoiceCategoryApiModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceApiAll
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param queryOptionsPage  (optional)
     * @param queryOptionsPageSize  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiAllCall(String xAuthKey, String xAuthSecret, Integer queryOptionsPage, Integer queryOptionsPageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/invoice/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queryOptionsPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryOptions.page", queryOptionsPage));
        }

        if (queryOptionsPageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryOptions.pageSize", queryOptionsPageSize));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceApiAllValidateBeforeCall(String xAuthKey, String xAuthSecret, Integer queryOptionsPage, Integer queryOptionsPageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling invoiceApiAll(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling invoiceApiAll(Async)");
        }

        return invoiceApiAllCall(xAuthKey, xAuthSecret, queryOptionsPage, queryOptionsPageSize, _callback);

    }

    /**
     * Return all invoices for the account
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param queryOptionsPage  (optional)
     * @param queryOptionsPageSize  (optional)
     * @return ListResultInvoiceDetailsApiModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListResultInvoiceDetailsApiModel invoiceApiAll(String xAuthKey, String xAuthSecret, Integer queryOptionsPage, Integer queryOptionsPageSize) throws ApiException {
        ApiResponse<ListResultInvoiceDetailsApiModel> localVarResp = invoiceApiAllWithHttpInfo(xAuthKey, xAuthSecret, queryOptionsPage, queryOptionsPageSize);
        return localVarResp.getData();
    }

    /**
     * Return all invoices for the account
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param queryOptionsPage  (optional)
     * @param queryOptionsPageSize  (optional)
     * @return ApiResponse&lt;ListResultInvoiceDetailsApiModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResultInvoiceDetailsApiModel> invoiceApiAllWithHttpInfo(String xAuthKey, String xAuthSecret, Integer queryOptionsPage, Integer queryOptionsPageSize) throws ApiException {
        okhttp3.Call localVarCall = invoiceApiAllValidateBeforeCall(xAuthKey, xAuthSecret, queryOptionsPage, queryOptionsPageSize, null);
        Type localVarReturnType = new TypeToken<ListResultInvoiceDetailsApiModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return all invoices for the account (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param queryOptionsPage  (optional)
     * @param queryOptionsPageSize  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiAllAsync(String xAuthKey, String xAuthSecret, Integer queryOptionsPage, Integer queryOptionsPageSize, final ApiCallback<ListResultInvoiceDetailsApiModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceApiAllValidateBeforeCall(xAuthKey, xAuthSecret, queryOptionsPage, queryOptionsPageSize, _callback);
        Type localVarReturnType = new TypeToken<ListResultInvoiceDetailsApiModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceApiChangeStatus
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param changeStatusApiModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiChangeStatusCall(String xAuthKey, String xAuthSecret, ChangeStatusApiModel changeStatusApiModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeStatusApiModel;

        // create path and map variables
        String localVarPath = "/api/invoice/changestatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceApiChangeStatusValidateBeforeCall(String xAuthKey, String xAuthSecret, ChangeStatusApiModel changeStatusApiModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling invoiceApiChangeStatus(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling invoiceApiChangeStatus(Async)");
        }

        // verify the required parameter 'changeStatusApiModel' is set
        if (changeStatusApiModel == null) {
            throw new ApiException("Missing the required parameter 'changeStatusApiModel' when calling invoiceApiChangeStatus(Async)");
        }

        return invoiceApiChangeStatusCall(xAuthKey, xAuthSecret, changeStatusApiModel, _callback);

    }

    /**
     * Change invoice status
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param changeStatusApiModel  (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Boolean invoiceApiChangeStatus(String xAuthKey, String xAuthSecret, ChangeStatusApiModel changeStatusApiModel) throws ApiException {
        ApiResponse<Boolean> localVarResp = invoiceApiChangeStatusWithHttpInfo(xAuthKey, xAuthSecret, changeStatusApiModel);
        return localVarResp.getData();
    }

    /**
     * Change invoice status
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param changeStatusApiModel  (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> invoiceApiChangeStatusWithHttpInfo(String xAuthKey, String xAuthSecret, ChangeStatusApiModel changeStatusApiModel) throws ApiException {
        okhttp3.Call localVarCall = invoiceApiChangeStatusValidateBeforeCall(xAuthKey, xAuthSecret, changeStatusApiModel, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change invoice status (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param changeStatusApiModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiChangeStatusAsync(String xAuthKey, String xAuthSecret, ChangeStatusApiModel changeStatusApiModel, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceApiChangeStatusValidateBeforeCall(xAuthKey, xAuthSecret, changeStatusApiModel, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceApiDelete
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceDeleteApiModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiDeleteCall(String xAuthKey, String xAuthSecret, InvoiceDeleteApiModel invoiceDeleteApiModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceDeleteApiModel;

        // create path and map variables
        String localVarPath = "/api/invoice/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceApiDeleteValidateBeforeCall(String xAuthKey, String xAuthSecret, InvoiceDeleteApiModel invoiceDeleteApiModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling invoiceApiDelete(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling invoiceApiDelete(Async)");
        }

        // verify the required parameter 'invoiceDeleteApiModel' is set
        if (invoiceDeleteApiModel == null) {
            throw new ApiException("Missing the required parameter 'invoiceDeleteApiModel' when calling invoiceApiDelete(Async)");
        }

        return invoiceApiDeleteCall(xAuthKey, xAuthSecret, invoiceDeleteApiModel, _callback);

    }

    /**
     * Delete an existing invoice
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceDeleteApiModel  (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Integer invoiceApiDelete(String xAuthKey, String xAuthSecret, InvoiceDeleteApiModel invoiceDeleteApiModel) throws ApiException {
        ApiResponse<Integer> localVarResp = invoiceApiDeleteWithHttpInfo(xAuthKey, xAuthSecret, invoiceDeleteApiModel);
        return localVarResp.getData();
    }

    /**
     * Delete an existing invoice
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceDeleteApiModel  (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> invoiceApiDeleteWithHttpInfo(String xAuthKey, String xAuthSecret, InvoiceDeleteApiModel invoiceDeleteApiModel) throws ApiException {
        okhttp3.Call localVarCall = invoiceApiDeleteValidateBeforeCall(xAuthKey, xAuthSecret, invoiceDeleteApiModel, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing invoice (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceDeleteApiModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiDeleteAsync(String xAuthKey, String xAuthSecret, InvoiceDeleteApiModel invoiceDeleteApiModel, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceApiDeleteValidateBeforeCall(xAuthKey, xAuthSecret, invoiceDeleteApiModel, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceApiDetails
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiDetailsCall(Integer id, String xAuthKey, String xAuthSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/invoice/details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceApiDetailsValidateBeforeCall(Integer id, String xAuthKey, String xAuthSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling invoiceApiDetails(Async)");
        }

        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling invoiceApiDetails(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling invoiceApiDetails(Async)");
        }

        return invoiceApiDetailsCall(id, xAuthKey, xAuthSecret, _callback);

    }

    /**
     * Return invoice data
     * 
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @return InvoiceFullDetailsApiModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceFullDetailsApiModel invoiceApiDetails(Integer id, String xAuthKey, String xAuthSecret) throws ApiException {
        ApiResponse<InvoiceFullDetailsApiModel> localVarResp = invoiceApiDetailsWithHttpInfo(id, xAuthKey, xAuthSecret);
        return localVarResp.getData();
    }

    /**
     * Return invoice data
     * 
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @return ApiResponse&lt;InvoiceFullDetailsApiModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceFullDetailsApiModel> invoiceApiDetailsWithHttpInfo(Integer id, String xAuthKey, String xAuthSecret) throws ApiException {
        okhttp3.Call localVarCall = invoiceApiDetailsValidateBeforeCall(id, xAuthKey, xAuthSecret, null);
        Type localVarReturnType = new TypeToken<InvoiceFullDetailsApiModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return invoice data (asynchronously)
     * 
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiDetailsAsync(Integer id, String xAuthKey, String xAuthSecret, final ApiCallback<InvoiceFullDetailsApiModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceApiDetailsValidateBeforeCall(id, xAuthKey, xAuthSecret, _callback);
        Type localVarReturnType = new TypeToken<InvoiceFullDetailsApiModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceApiNew
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceCreateApiModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiNewCall(String xAuthKey, String xAuthSecret, InvoiceCreateApiModel invoiceCreateApiModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceCreateApiModel;

        // create path and map variables
        String localVarPath = "/api/invoice/new";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceApiNewValidateBeforeCall(String xAuthKey, String xAuthSecret, InvoiceCreateApiModel invoiceCreateApiModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling invoiceApiNew(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling invoiceApiNew(Async)");
        }

        // verify the required parameter 'invoiceCreateApiModel' is set
        if (invoiceCreateApiModel == null) {
            throw new ApiException("Missing the required parameter 'invoiceCreateApiModel' when calling invoiceApiNew(Async)");
        }

        return invoiceApiNewCall(xAuthKey, xAuthSecret, invoiceCreateApiModel, _callback);

    }

    /**
     * Create an invoice
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceCreateApiModel  (required)
     * @return InvoiceFullDetailsApiModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceFullDetailsApiModel invoiceApiNew(String xAuthKey, String xAuthSecret, InvoiceCreateApiModel invoiceCreateApiModel) throws ApiException {
        ApiResponse<InvoiceFullDetailsApiModel> localVarResp = invoiceApiNewWithHttpInfo(xAuthKey, xAuthSecret, invoiceCreateApiModel);
        return localVarResp.getData();
    }

    /**
     * Create an invoice
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceCreateApiModel  (required)
     * @return ApiResponse&lt;InvoiceFullDetailsApiModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceFullDetailsApiModel> invoiceApiNewWithHttpInfo(String xAuthKey, String xAuthSecret, InvoiceCreateApiModel invoiceCreateApiModel) throws ApiException {
        okhttp3.Call localVarCall = invoiceApiNewValidateBeforeCall(xAuthKey, xAuthSecret, invoiceCreateApiModel, null);
        Type localVarReturnType = new TypeToken<InvoiceFullDetailsApiModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an invoice (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceCreateApiModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiNewAsync(String xAuthKey, String xAuthSecret, InvoiceCreateApiModel invoiceCreateApiModel, final ApiCallback<InvoiceFullDetailsApiModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceApiNewValidateBeforeCall(xAuthKey, xAuthSecret, invoiceCreateApiModel, _callback);
        Type localVarReturnType = new TypeToken<InvoiceFullDetailsApiModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceApiPdf
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param signedVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiPdfCall(Integer id, String xAuthKey, String xAuthSecret, Boolean signedVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/invoice/pdf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (signedVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signedVersion", signedVersion));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceApiPdfValidateBeforeCall(Integer id, String xAuthKey, String xAuthSecret, Boolean signedVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling invoiceApiPdf(Async)");
        }

        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling invoiceApiPdf(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling invoiceApiPdf(Async)");
        }

        return invoiceApiPdfCall(id, xAuthKey, xAuthSecret, signedVersion, _callback);

    }

    /**
     * Return the PDF for the invoice
     * 
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param signedVersion  (optional)
     * @return InvoiceUriApiModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceUriApiModel invoiceApiPdf(Integer id, String xAuthKey, String xAuthSecret, Boolean signedVersion) throws ApiException {
        ApiResponse<InvoiceUriApiModel> localVarResp = invoiceApiPdfWithHttpInfo(id, xAuthKey, xAuthSecret, signedVersion);
        return localVarResp.getData();
    }

    /**
     * Return the PDF for the invoice
     * 
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param signedVersion  (optional)
     * @return ApiResponse&lt;InvoiceUriApiModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceUriApiModel> invoiceApiPdfWithHttpInfo(Integer id, String xAuthKey, String xAuthSecret, Boolean signedVersion) throws ApiException {
        okhttp3.Call localVarCall = invoiceApiPdfValidateBeforeCall(id, xAuthKey, xAuthSecret, signedVersion, null);
        Type localVarReturnType = new TypeToken<InvoiceUriApiModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the PDF for the invoice (asynchronously)
     * 
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param signedVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiPdfAsync(Integer id, String xAuthKey, String xAuthSecret, Boolean signedVersion, final ApiCallback<InvoiceUriApiModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceApiPdfValidateBeforeCall(id, xAuthKey, xAuthSecret, signedVersion, _callback);
        Type localVarReturnType = new TypeToken<InvoiceUriApiModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceApiSendToAccountant
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param sendInvoiceToAccountantApiModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiSendToAccountantCall(String xAuthKey, String xAuthSecret, SendInvoiceToAccountantApiModel sendInvoiceToAccountantApiModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendInvoiceToAccountantApiModel;

        // create path and map variables
        String localVarPath = "/api/invoice/sendtoaccountant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceApiSendToAccountantValidateBeforeCall(String xAuthKey, String xAuthSecret, SendInvoiceToAccountantApiModel sendInvoiceToAccountantApiModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling invoiceApiSendToAccountant(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling invoiceApiSendToAccountant(Async)");
        }

        // verify the required parameter 'sendInvoiceToAccountantApiModel' is set
        if (sendInvoiceToAccountantApiModel == null) {
            throw new ApiException("Missing the required parameter 'sendInvoiceToAccountantApiModel' when calling invoiceApiSendToAccountant(Async)");
        }

        return invoiceApiSendToAccountantCall(xAuthKey, xAuthSecret, sendInvoiceToAccountantApiModel, _callback);

    }

    /**
     * Send the provided invoice to the accountant
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param sendInvoiceToAccountantApiModel  (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Integer invoiceApiSendToAccountant(String xAuthKey, String xAuthSecret, SendInvoiceToAccountantApiModel sendInvoiceToAccountantApiModel) throws ApiException {
        ApiResponse<Integer> localVarResp = invoiceApiSendToAccountantWithHttpInfo(xAuthKey, xAuthSecret, sendInvoiceToAccountantApiModel);
        return localVarResp.getData();
    }

    /**
     * Send the provided invoice to the accountant
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param sendInvoiceToAccountantApiModel  (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> invoiceApiSendToAccountantWithHttpInfo(String xAuthKey, String xAuthSecret, SendInvoiceToAccountantApiModel sendInvoiceToAccountantApiModel) throws ApiException {
        okhttp3.Call localVarCall = invoiceApiSendToAccountantValidateBeforeCall(xAuthKey, xAuthSecret, sendInvoiceToAccountantApiModel, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send the provided invoice to the accountant (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param sendInvoiceToAccountantApiModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiSendToAccountantAsync(String xAuthKey, String xAuthSecret, SendInvoiceToAccountantApiModel sendInvoiceToAccountantApiModel, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceApiSendToAccountantValidateBeforeCall(xAuthKey, xAuthSecret, sendInvoiceToAccountantApiModel, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceApiSendToClient
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param sendInvoiceToClientApiModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiSendToClientCall(String xAuthKey, String xAuthSecret, SendInvoiceToClientApiModel sendInvoiceToClientApiModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendInvoiceToClientApiModel;

        // create path and map variables
        String localVarPath = "/api/invoice/sendtoclient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceApiSendToClientValidateBeforeCall(String xAuthKey, String xAuthSecret, SendInvoiceToClientApiModel sendInvoiceToClientApiModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling invoiceApiSendToClient(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling invoiceApiSendToClient(Async)");
        }

        // verify the required parameter 'sendInvoiceToClientApiModel' is set
        if (sendInvoiceToClientApiModel == null) {
            throw new ApiException("Missing the required parameter 'sendInvoiceToClientApiModel' when calling invoiceApiSendToClient(Async)");
        }

        return invoiceApiSendToClientCall(xAuthKey, xAuthSecret, sendInvoiceToClientApiModel, _callback);

    }

    /**
     * Send the provided invoice to the client
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param sendInvoiceToClientApiModel  (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Integer invoiceApiSendToClient(String xAuthKey, String xAuthSecret, SendInvoiceToClientApiModel sendInvoiceToClientApiModel) throws ApiException {
        ApiResponse<Integer> localVarResp = invoiceApiSendToClientWithHttpInfo(xAuthKey, xAuthSecret, sendInvoiceToClientApiModel);
        return localVarResp.getData();
    }

    /**
     * Send the provided invoice to the client
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param sendInvoiceToClientApiModel  (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> invoiceApiSendToClientWithHttpInfo(String xAuthKey, String xAuthSecret, SendInvoiceToClientApiModel sendInvoiceToClientApiModel) throws ApiException {
        okhttp3.Call localVarCall = invoiceApiSendToClientValidateBeforeCall(xAuthKey, xAuthSecret, sendInvoiceToClientApiModel, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send the provided invoice to the client (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param sendInvoiceToClientApiModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiSendToClientAsync(String xAuthKey, String xAuthSecret, SendInvoiceToClientApiModel sendInvoiceToClientApiModel, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceApiSendToClientValidateBeforeCall(xAuthKey, xAuthSecret, sendInvoiceToClientApiModel, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceApiStatus
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiStatusCall(Integer id, String xAuthKey, String xAuthSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/invoice/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceApiStatusValidateBeforeCall(Integer id, String xAuthKey, String xAuthSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling invoiceApiStatus(Async)");
        }

        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling invoiceApiStatus(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling invoiceApiStatus(Async)");
        }

        return invoiceApiStatusCall(id, xAuthKey, xAuthSecret, _callback);

    }

    /**
     * Retrieve the status of the invoice
     * 
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String invoiceApiStatus(Integer id, String xAuthKey, String xAuthSecret) throws ApiException {
        ApiResponse<String> localVarResp = invoiceApiStatusWithHttpInfo(id, xAuthKey, xAuthSecret);
        return localVarResp.getData();
    }

    /**
     * Retrieve the status of the invoice
     * 
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> invoiceApiStatusWithHttpInfo(Integer id, String xAuthKey, String xAuthSecret) throws ApiException {
        okhttp3.Call localVarCall = invoiceApiStatusValidateBeforeCall(id, xAuthKey, xAuthSecret, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the status of the invoice (asynchronously)
     * 
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiStatusAsync(Integer id, String xAuthKey, String xAuthSecret, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceApiStatusValidateBeforeCall(id, xAuthKey, xAuthSecret, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceApiUpdate
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceUpdateApiModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiUpdateCall(String xAuthKey, String xAuthSecret, InvoiceUpdateApiModel invoiceUpdateApiModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceUpdateApiModel;

        // create path and map variables
        String localVarPath = "/api/invoice/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceApiUpdateValidateBeforeCall(String xAuthKey, String xAuthSecret, InvoiceUpdateApiModel invoiceUpdateApiModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling invoiceApiUpdate(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling invoiceApiUpdate(Async)");
        }

        // verify the required parameter 'invoiceUpdateApiModel' is set
        if (invoiceUpdateApiModel == null) {
            throw new ApiException("Missing the required parameter 'invoiceUpdateApiModel' when calling invoiceApiUpdate(Async)");
        }

        return invoiceApiUpdateCall(xAuthKey, xAuthSecret, invoiceUpdateApiModel, _callback);

    }

    /**
     * Update an existing invoice
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceUpdateApiModel  (required)
     * @return InvoiceFullDetailsApiModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceFullDetailsApiModel invoiceApiUpdate(String xAuthKey, String xAuthSecret, InvoiceUpdateApiModel invoiceUpdateApiModel) throws ApiException {
        ApiResponse<InvoiceFullDetailsApiModel> localVarResp = invoiceApiUpdateWithHttpInfo(xAuthKey, xAuthSecret, invoiceUpdateApiModel);
        return localVarResp.getData();
    }

    /**
     * Update an existing invoice
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceUpdateApiModel  (required)
     * @return ApiResponse&lt;InvoiceFullDetailsApiModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceFullDetailsApiModel> invoiceApiUpdateWithHttpInfo(String xAuthKey, String xAuthSecret, InvoiceUpdateApiModel invoiceUpdateApiModel) throws ApiException {
        okhttp3.Call localVarCall = invoiceApiUpdateValidateBeforeCall(xAuthKey, xAuthSecret, invoiceUpdateApiModel, null);
        Type localVarReturnType = new TypeToken<InvoiceFullDetailsApiModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing invoice (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param invoiceUpdateApiModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiUpdateAsync(String xAuthKey, String xAuthSecret, InvoiceUpdateApiModel invoiceUpdateApiModel, final ApiCallback<InvoiceFullDetailsApiModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceApiUpdateValidateBeforeCall(xAuthKey, xAuthSecret, invoiceUpdateApiModel, _callback);
        Type localVarReturnType = new TypeToken<InvoiceFullDetailsApiModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoiceApiUri
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiUriCall(Integer id, String xAuthKey, String xAuthSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/invoice/uri";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceApiUriValidateBeforeCall(Integer id, String xAuthKey, String xAuthSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling invoiceApiUri(Async)");
        }

        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling invoiceApiUri(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling invoiceApiUri(Async)");
        }

        return invoiceApiUriCall(id, xAuthKey, xAuthSecret, _callback);

    }

    /**
     * Return the unique url to the client&#39;s invoice
     * 
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @return InvoiceUriApiModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceUriApiModel invoiceApiUri(Integer id, String xAuthKey, String xAuthSecret) throws ApiException {
        ApiResponse<InvoiceUriApiModel> localVarResp = invoiceApiUriWithHttpInfo(id, xAuthKey, xAuthSecret);
        return localVarResp.getData();
    }

    /**
     * Return the unique url to the client&#39;s invoice
     * 
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @return ApiResponse&lt;InvoiceUriApiModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceUriApiModel> invoiceApiUriWithHttpInfo(Integer id, String xAuthKey, String xAuthSecret) throws ApiException {
        okhttp3.Call localVarCall = invoiceApiUriValidateBeforeCall(id, xAuthKey, xAuthSecret, null);
        Type localVarReturnType = new TypeToken<InvoiceUriApiModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the unique url to the client&#39;s invoice (asynchronously)
     * 
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceApiUriAsync(Integer id, String xAuthKey, String xAuthSecret, final ApiCallback<InvoiceUriApiModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceApiUriValidateBeforeCall(id, xAuthKey, xAuthSecret, _callback);
        Type localVarReturnType = new TypeToken<InvoiceUriApiModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
