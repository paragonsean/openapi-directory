/*
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListResultProductDetailsApiModel;
import org.openapitools.client.model.ProductCreateApiModel;
import org.openapitools.client.model.ProductDeleteApiModel;
import org.openapitools.client.model.ProductFullDetailsApiModel;
import org.openapitools.client.model.ProductUpdateApiModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for productApiAll
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param queryOptionsPage  (optional)
     * @param queryOptionsPageSize  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productApiAllCall(String xAuthKey, String xAuthSecret, Integer queryOptionsPage, Integer queryOptionsPageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/product/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queryOptionsPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryOptions.page", queryOptionsPage));
        }

        if (queryOptionsPageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryOptions.pageSize", queryOptionsPageSize));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productApiAllValidateBeforeCall(String xAuthKey, String xAuthSecret, Integer queryOptionsPage, Integer queryOptionsPageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling productApiAll(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling productApiAll(Async)");
        }

        return productApiAllCall(xAuthKey, xAuthSecret, queryOptionsPage, queryOptionsPageSize, _callback);

    }

    /**
     * Return all products for the account
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param queryOptionsPage  (optional)
     * @param queryOptionsPageSize  (optional)
     * @return ListResultProductDetailsApiModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListResultProductDetailsApiModel productApiAll(String xAuthKey, String xAuthSecret, Integer queryOptionsPage, Integer queryOptionsPageSize) throws ApiException {
        ApiResponse<ListResultProductDetailsApiModel> localVarResp = productApiAllWithHttpInfo(xAuthKey, xAuthSecret, queryOptionsPage, queryOptionsPageSize);
        return localVarResp.getData();
    }

    /**
     * Return all products for the account
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param queryOptionsPage  (optional)
     * @param queryOptionsPageSize  (optional)
     * @return ApiResponse&lt;ListResultProductDetailsApiModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResultProductDetailsApiModel> productApiAllWithHttpInfo(String xAuthKey, String xAuthSecret, Integer queryOptionsPage, Integer queryOptionsPageSize) throws ApiException {
        okhttp3.Call localVarCall = productApiAllValidateBeforeCall(xAuthKey, xAuthSecret, queryOptionsPage, queryOptionsPageSize, null);
        Type localVarReturnType = new TypeToken<ListResultProductDetailsApiModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return all products for the account (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param queryOptionsPage  (optional)
     * @param queryOptionsPageSize  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productApiAllAsync(String xAuthKey, String xAuthSecret, Integer queryOptionsPage, Integer queryOptionsPageSize, final ApiCallback<ListResultProductDetailsApiModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = productApiAllValidateBeforeCall(xAuthKey, xAuthSecret, queryOptionsPage, queryOptionsPageSize, _callback);
        Type localVarReturnType = new TypeToken<ListResultProductDetailsApiModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productApiDelete
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param productDeleteApiModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productApiDeleteCall(String xAuthKey, String xAuthSecret, ProductDeleteApiModel productDeleteApiModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productDeleteApiModel;

        // create path and map variables
        String localVarPath = "/api/product/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productApiDeleteValidateBeforeCall(String xAuthKey, String xAuthSecret, ProductDeleteApiModel productDeleteApiModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling productApiDelete(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling productApiDelete(Async)");
        }

        // verify the required parameter 'productDeleteApiModel' is set
        if (productDeleteApiModel == null) {
            throw new ApiException("Missing the required parameter 'productDeleteApiModel' when calling productApiDelete(Async)");
        }

        return productApiDeleteCall(xAuthKey, xAuthSecret, productDeleteApiModel, _callback);

    }

    /**
     * Delete an existing product
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param productDeleteApiModel  (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Integer productApiDelete(String xAuthKey, String xAuthSecret, ProductDeleteApiModel productDeleteApiModel) throws ApiException {
        ApiResponse<Integer> localVarResp = productApiDeleteWithHttpInfo(xAuthKey, xAuthSecret, productDeleteApiModel);
        return localVarResp.getData();
    }

    /**
     * Delete an existing product
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param productDeleteApiModel  (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> productApiDeleteWithHttpInfo(String xAuthKey, String xAuthSecret, ProductDeleteApiModel productDeleteApiModel) throws ApiException {
        okhttp3.Call localVarCall = productApiDeleteValidateBeforeCall(xAuthKey, xAuthSecret, productDeleteApiModel, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing product (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param productDeleteApiModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productApiDeleteAsync(String xAuthKey, String xAuthSecret, ProductDeleteApiModel productDeleteApiModel, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = productApiDeleteValidateBeforeCall(xAuthKey, xAuthSecret, productDeleteApiModel, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productApiDetails
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productApiDetailsCall(Integer id, String xAuthKey, String xAuthSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/product/details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productApiDetailsValidateBeforeCall(Integer id, String xAuthKey, String xAuthSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productApiDetails(Async)");
        }

        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling productApiDetails(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling productApiDetails(Async)");
        }

        return productApiDetailsCall(id, xAuthKey, xAuthSecret, _callback);

    }

    /**
     * Return product details
     * 
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @return ProductFullDetailsApiModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ProductFullDetailsApiModel productApiDetails(Integer id, String xAuthKey, String xAuthSecret) throws ApiException {
        ApiResponse<ProductFullDetailsApiModel> localVarResp = productApiDetailsWithHttpInfo(id, xAuthKey, xAuthSecret);
        return localVarResp.getData();
    }

    /**
     * Return product details
     * 
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @return ApiResponse&lt;ProductFullDetailsApiModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductFullDetailsApiModel> productApiDetailsWithHttpInfo(Integer id, String xAuthKey, String xAuthSecret) throws ApiException {
        okhttp3.Call localVarCall = productApiDetailsValidateBeforeCall(id, xAuthKey, xAuthSecret, null);
        Type localVarReturnType = new TypeToken<ProductFullDetailsApiModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return product details (asynchronously)
     * 
     * @param id  (required)
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productApiDetailsAsync(Integer id, String xAuthKey, String xAuthSecret, final ApiCallback<ProductFullDetailsApiModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = productApiDetailsValidateBeforeCall(id, xAuthKey, xAuthSecret, _callback);
        Type localVarReturnType = new TypeToken<ProductFullDetailsApiModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productApiNew
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param productCreateApiModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productApiNewCall(String xAuthKey, String xAuthSecret, ProductCreateApiModel productCreateApiModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productCreateApiModel;

        // create path and map variables
        String localVarPath = "/api/product/new";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productApiNewValidateBeforeCall(String xAuthKey, String xAuthSecret, ProductCreateApiModel productCreateApiModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling productApiNew(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling productApiNew(Async)");
        }

        // verify the required parameter 'productCreateApiModel' is set
        if (productCreateApiModel == null) {
            throw new ApiException("Missing the required parameter 'productCreateApiModel' when calling productApiNew(Async)");
        }

        return productApiNewCall(xAuthKey, xAuthSecret, productCreateApiModel, _callback);

    }

    /**
     * Create a product
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param productCreateApiModel  (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Integer productApiNew(String xAuthKey, String xAuthSecret, ProductCreateApiModel productCreateApiModel) throws ApiException {
        ApiResponse<Integer> localVarResp = productApiNewWithHttpInfo(xAuthKey, xAuthSecret, productCreateApiModel);
        return localVarResp.getData();
    }

    /**
     * Create a product
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param productCreateApiModel  (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> productApiNewWithHttpInfo(String xAuthKey, String xAuthSecret, ProductCreateApiModel productCreateApiModel) throws ApiException {
        okhttp3.Call localVarCall = productApiNewValidateBeforeCall(xAuthKey, xAuthSecret, productCreateApiModel, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a product (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param productCreateApiModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productApiNewAsync(String xAuthKey, String xAuthSecret, ProductCreateApiModel productCreateApiModel, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = productApiNewValidateBeforeCall(xAuthKey, xAuthSecret, productCreateApiModel, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productApiUpdate
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param productUpdateApiModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productApiUpdateCall(String xAuthKey, String xAuthSecret, ProductUpdateApiModel productUpdateApiModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productUpdateApiModel;

        // create path and map variables
        String localVarPath = "/api/product/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAuthKey != null) {
            localVarHeaderParams.put("x-auth-key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthSecret != null) {
            localVarHeaderParams.put("x-auth-secret", localVarApiClient.parameterToString(xAuthSecret));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/html",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productApiUpdateValidateBeforeCall(String xAuthKey, String xAuthSecret, ProductUpdateApiModel productUpdateApiModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAuthKey' is set
        if (xAuthKey == null) {
            throw new ApiException("Missing the required parameter 'xAuthKey' when calling productApiUpdate(Async)");
        }

        // verify the required parameter 'xAuthSecret' is set
        if (xAuthSecret == null) {
            throw new ApiException("Missing the required parameter 'xAuthSecret' when calling productApiUpdate(Async)");
        }

        // verify the required parameter 'productUpdateApiModel' is set
        if (productUpdateApiModel == null) {
            throw new ApiException("Missing the required parameter 'productUpdateApiModel' when calling productApiUpdate(Async)");
        }

        return productApiUpdateCall(xAuthKey, xAuthSecret, productUpdateApiModel, _callback);

    }

    /**
     * Update an existing product
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param productUpdateApiModel  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void productApiUpdate(String xAuthKey, String xAuthSecret, ProductUpdateApiModel productUpdateApiModel) throws ApiException {
        productApiUpdateWithHttpInfo(xAuthKey, xAuthSecret, productUpdateApiModel);
    }

    /**
     * Update an existing product
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param productUpdateApiModel  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productApiUpdateWithHttpInfo(String xAuthKey, String xAuthSecret, ProductUpdateApiModel productUpdateApiModel) throws ApiException {
        okhttp3.Call localVarCall = productApiUpdateValidateBeforeCall(xAuthKey, xAuthSecret, productUpdateApiModel, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an existing product (asynchronously)
     * 
     * @param xAuthKey  (required)
     * @param xAuthSecret  (required)
     * @param productUpdateApiModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productApiUpdateAsync(String xAuthKey, String xAuthSecret, ProductUpdateApiModel productUpdateApiModel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productApiUpdateValidateBeforeCall(xAuthKey, xAuthSecret, productUpdateApiModel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
