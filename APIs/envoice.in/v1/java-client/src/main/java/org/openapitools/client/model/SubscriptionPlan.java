/*
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubscriptionPlan
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:00.947845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionPlan {
  public static final String SERIALIZED_NAME_CANCELLATED_ON = "CancellatedOn";
  @SerializedName(SERIALIZED_NAME_CANCELLATED_ON)
  private OffsetDateTime cancellatedOn;

  public static final String SERIALIZED_NAME_COUPON_CODE = "CouponCode";
  @SerializedName(SERIALIZED_NAME_COUPON_CODE)
  private String couponCode;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_EXTERNAL_IDENTIFIER = "ExternalIdentifier";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IDENTIFIER)
  private String externalIdentifier;

  /**
   * Gets or Sets features
   */
  @JsonAdapter(FeaturesEnum.Adapter.class)
  public enum FeaturesEnum {
    API("Api"),
    
    TEAMS("Teams"),
    
    CLIENTS("Clients"),
    
    SHOP("Shop"),
    
    PAYMENT_LINKS("PaymentLinks"),
    
    CNAME("Cname");

    private String value;

    FeaturesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeaturesEnum fromValue(String value) {
      for (FeaturesEnum b : FeaturesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeaturesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeaturesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeaturesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeaturesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeaturesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEATURES = "Features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<FeaturesEnum> features = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_DUE_PAYMENT = "HasDuePayment";
  @SerializedName(SERIALIZED_NAME_HAS_DUE_PAYMENT)
  private Boolean hasDuePayment;

  public static final String SERIALIZED_NAME_HAS_DUE_PAYMENT_SINCE = "HasDuePaymentSince";
  @SerializedName(SERIALIZED_NAME_HAS_DUE_PAYMENT_SINCE)
  private OffsetDateTime hasDuePaymentSince;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IDENTIFIER = "Identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "IsActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_LIFETIME = "IsLifetime";
  @SerializedName(SERIALIZED_NAME_IS_LIFETIME)
  private Boolean isLifetime;

  public static final String SERIALIZED_NAME_LAST_PAYMENT_ON = "LastPaymentOn";
  @SerializedName(SERIALIZED_NAME_LAST_PAYMENT_ON)
  private OffsetDateTime lastPaymentOn;

  public static final String SERIALIZED_NAME_MAX_CLIENTS = "MaxClients";
  @SerializedName(SERIALIZED_NAME_MAX_CLIENTS)
  private Integer maxClients;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ON_HOLD = "OnHold";
  @SerializedName(SERIALIZED_NAME_ON_HOLD)
  private Boolean onHold;

  public static final String SERIALIZED_NAME_ORDER_IDENTIFIER = "OrderIdentifier";
  @SerializedName(SERIALIZED_NAME_ORDER_IDENTIFIER)
  private String orderIdentifier;

  public static final String SERIALIZED_NAME_PRICE = "Price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  /**
   * Gets or Sets recurrence
   */
  @JsonAdapter(RecurrenceEnum.Adapter.class)
  public enum RecurrenceEnum {
    MONTHLY("Monthly"),
    
    YEARLY("Yearly");

    private String value;

    RecurrenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecurrenceEnum fromValue(String value) {
      for (RecurrenceEnum b : RecurrenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecurrenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecurrenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecurrenceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecurrenceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecurrenceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECURRENCE = "Recurrence";
  @SerializedName(SERIALIZED_NAME_RECURRENCE)
  private RecurrenceEnum recurrence;

  public static final String SERIALIZED_NAME_SALE_ID = "SaleId";
  @SerializedName(SERIALIZED_NAME_SALE_ID)
  private Long saleId;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE_TRIAL("ActiveTrial"),
    
    EXPIRED_TRIAL("ExpiredTrial"),
    
    ACTIVE("Active"),
    
    CANCELED("Canceled"),
    
    FRAUDLENT("Fraudlent");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Gets or Sets systemCancelationReason
   */
  @JsonAdapter(SystemCancelationReasonEnum.Adapter.class)
  public enum SystemCancelationReasonEnum {
    FAIL_TO_CAPTURE_FEE("FailToCaptureFee"),
    
    FRAUD("Fraud");

    private String value;

    SystemCancelationReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SystemCancelationReasonEnum fromValue(String value) {
      for (SystemCancelationReasonEnum b : SystemCancelationReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SystemCancelationReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SystemCancelationReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SystemCancelationReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SystemCancelationReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SystemCancelationReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYSTEM_CANCELATION_REASON = "SystemCancelationReason";
  @SerializedName(SERIALIZED_NAME_SYSTEM_CANCELATION_REASON)
  private SystemCancelationReasonEnum systemCancelationReason;

  public static final String SERIALIZED_NAME_TRIAL_ENDS_ON = "TrialEndsOn";
  @SerializedName(SERIALIZED_NAME_TRIAL_ENDS_ON)
  private OffsetDateTime trialEndsOn;

  public static final String SERIALIZED_NAME_TRIAL_NUMBER_OF_DAYS = "TrialNumberOfDays";
  @SerializedName(SERIALIZED_NAME_TRIAL_NUMBER_OF_DAYS)
  private Integer trialNumberOfDays;

  public static final String SERIALIZED_NAME_TRIAL_STARTS_ON = "TrialStartsOn";
  @SerializedName(SERIALIZED_NAME_TRIAL_STARTS_ON)
  private OffsetDateTime trialStartsOn;

  public static final String SERIALIZED_NAME_USER_ID = "UserId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public SubscriptionPlan() {
  }

  public SubscriptionPlan cancellatedOn(OffsetDateTime cancellatedOn) {
    this.cancellatedOn = cancellatedOn;
    return this;
  }

  /**
   * Get cancellatedOn
   * @return cancellatedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCancellatedOn() {
    return cancellatedOn;
  }

  public void setCancellatedOn(OffsetDateTime cancellatedOn) {
    this.cancellatedOn = cancellatedOn;
  }


  public SubscriptionPlan couponCode(String couponCode) {
    this.couponCode = couponCode;
    return this;
  }

  /**
   * Get couponCode
   * @return couponCode
   */
  @javax.annotation.Nullable
  public String getCouponCode() {
    return couponCode;
  }

  public void setCouponCode(String couponCode) {
    this.couponCode = couponCode;
  }


  public SubscriptionPlan currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public SubscriptionPlan externalIdentifier(String externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
    return this;
  }

  /**
   * Get externalIdentifier
   * @return externalIdentifier
   */
  @javax.annotation.Nullable
  public String getExternalIdentifier() {
    return externalIdentifier;
  }

  public void setExternalIdentifier(String externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
  }


  public SubscriptionPlan features(List<FeaturesEnum> features) {
    this.features = features;
    return this;
  }

  public SubscriptionPlan addFeaturesItem(FeaturesEnum featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

  /**
   * Get features
   * @return features
   */
  @javax.annotation.Nullable
  public List<FeaturesEnum> getFeatures() {
    return features;
  }

  public void setFeatures(List<FeaturesEnum> features) {
    this.features = features;
  }


  public SubscriptionPlan hasDuePayment(Boolean hasDuePayment) {
    this.hasDuePayment = hasDuePayment;
    return this;
  }

  /**
   * Get hasDuePayment
   * @return hasDuePayment
   */
  @javax.annotation.Nullable
  public Boolean getHasDuePayment() {
    return hasDuePayment;
  }

  public void setHasDuePayment(Boolean hasDuePayment) {
    this.hasDuePayment = hasDuePayment;
  }


  public SubscriptionPlan hasDuePaymentSince(OffsetDateTime hasDuePaymentSince) {
    this.hasDuePaymentSince = hasDuePaymentSince;
    return this;
  }

  /**
   * Get hasDuePaymentSince
   * @return hasDuePaymentSince
   */
  @javax.annotation.Nullable
  public OffsetDateTime getHasDuePaymentSince() {
    return hasDuePaymentSince;
  }

  public void setHasDuePaymentSince(OffsetDateTime hasDuePaymentSince) {
    this.hasDuePaymentSince = hasDuePaymentSince;
  }


  public SubscriptionPlan id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public SubscriptionPlan identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public SubscriptionPlan isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Get isActive
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public SubscriptionPlan isLifetime(Boolean isLifetime) {
    this.isLifetime = isLifetime;
    return this;
  }

  /**
   * Get isLifetime
   * @return isLifetime
   */
  @javax.annotation.Nullable
  public Boolean getIsLifetime() {
    return isLifetime;
  }

  public void setIsLifetime(Boolean isLifetime) {
    this.isLifetime = isLifetime;
  }


  public SubscriptionPlan lastPaymentOn(OffsetDateTime lastPaymentOn) {
    this.lastPaymentOn = lastPaymentOn;
    return this;
  }

  /**
   * Get lastPaymentOn
   * @return lastPaymentOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastPaymentOn() {
    return lastPaymentOn;
  }

  public void setLastPaymentOn(OffsetDateTime lastPaymentOn) {
    this.lastPaymentOn = lastPaymentOn;
  }


  public SubscriptionPlan maxClients(Integer maxClients) {
    this.maxClients = maxClients;
    return this;
  }

  /**
   * Get maxClients
   * @return maxClients
   */
  @javax.annotation.Nullable
  public Integer getMaxClients() {
    return maxClients;
  }

  public void setMaxClients(Integer maxClients) {
    this.maxClients = maxClients;
  }


  public SubscriptionPlan name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SubscriptionPlan onHold(Boolean onHold) {
    this.onHold = onHold;
    return this;
  }

  /**
   * Get onHold
   * @return onHold
   */
  @javax.annotation.Nullable
  public Boolean getOnHold() {
    return onHold;
  }

  public void setOnHold(Boolean onHold) {
    this.onHold = onHold;
  }


  public SubscriptionPlan orderIdentifier(String orderIdentifier) {
    this.orderIdentifier = orderIdentifier;
    return this;
  }

  /**
   * Get orderIdentifier
   * @return orderIdentifier
   */
  @javax.annotation.Nullable
  public String getOrderIdentifier() {
    return orderIdentifier;
  }

  public void setOrderIdentifier(String orderIdentifier) {
    this.orderIdentifier = orderIdentifier;
  }


  public SubscriptionPlan price(Double price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }


  public SubscriptionPlan recurrence(RecurrenceEnum recurrence) {
    this.recurrence = recurrence;
    return this;
  }

  /**
   * Get recurrence
   * @return recurrence
   */
  @javax.annotation.Nullable
  public RecurrenceEnum getRecurrence() {
    return recurrence;
  }

  public void setRecurrence(RecurrenceEnum recurrence) {
    this.recurrence = recurrence;
  }


  public SubscriptionPlan saleId(Long saleId) {
    this.saleId = saleId;
    return this;
  }

  /**
   * Get saleId
   * @return saleId
   */
  @javax.annotation.Nullable
  public Long getSaleId() {
    return saleId;
  }

  public void setSaleId(Long saleId) {
    this.saleId = saleId;
  }


  public SubscriptionPlan status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public SubscriptionPlan systemCancelationReason(SystemCancelationReasonEnum systemCancelationReason) {
    this.systemCancelationReason = systemCancelationReason;
    return this;
  }

  /**
   * Get systemCancelationReason
   * @return systemCancelationReason
   */
  @javax.annotation.Nullable
  public SystemCancelationReasonEnum getSystemCancelationReason() {
    return systemCancelationReason;
  }

  public void setSystemCancelationReason(SystemCancelationReasonEnum systemCancelationReason) {
    this.systemCancelationReason = systemCancelationReason;
  }


  public SubscriptionPlan trialEndsOn(OffsetDateTime trialEndsOn) {
    this.trialEndsOn = trialEndsOn;
    return this;
  }

  /**
   * Get trialEndsOn
   * @return trialEndsOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTrialEndsOn() {
    return trialEndsOn;
  }

  public void setTrialEndsOn(OffsetDateTime trialEndsOn) {
    this.trialEndsOn = trialEndsOn;
  }


  public SubscriptionPlan trialNumberOfDays(Integer trialNumberOfDays) {
    this.trialNumberOfDays = trialNumberOfDays;
    return this;
  }

  /**
   * Get trialNumberOfDays
   * @return trialNumberOfDays
   */
  @javax.annotation.Nullable
  public Integer getTrialNumberOfDays() {
    return trialNumberOfDays;
  }

  public void setTrialNumberOfDays(Integer trialNumberOfDays) {
    this.trialNumberOfDays = trialNumberOfDays;
  }


  public SubscriptionPlan trialStartsOn(OffsetDateTime trialStartsOn) {
    this.trialStartsOn = trialStartsOn;
    return this;
  }

  /**
   * Get trialStartsOn
   * @return trialStartsOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTrialStartsOn() {
    return trialStartsOn;
  }

  public void setTrialStartsOn(OffsetDateTime trialStartsOn) {
    this.trialStartsOn = trialStartsOn;
  }


  public SubscriptionPlan userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public SubscriptionPlan version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionPlan subscriptionPlan = (SubscriptionPlan) o;
    return Objects.equals(this.cancellatedOn, subscriptionPlan.cancellatedOn) &&
        Objects.equals(this.couponCode, subscriptionPlan.couponCode) &&
        Objects.equals(this.currencyCode, subscriptionPlan.currencyCode) &&
        Objects.equals(this.externalIdentifier, subscriptionPlan.externalIdentifier) &&
        Objects.equals(this.features, subscriptionPlan.features) &&
        Objects.equals(this.hasDuePayment, subscriptionPlan.hasDuePayment) &&
        Objects.equals(this.hasDuePaymentSince, subscriptionPlan.hasDuePaymentSince) &&
        Objects.equals(this.id, subscriptionPlan.id) &&
        Objects.equals(this.identifier, subscriptionPlan.identifier) &&
        Objects.equals(this.isActive, subscriptionPlan.isActive) &&
        Objects.equals(this.isLifetime, subscriptionPlan.isLifetime) &&
        Objects.equals(this.lastPaymentOn, subscriptionPlan.lastPaymentOn) &&
        Objects.equals(this.maxClients, subscriptionPlan.maxClients) &&
        Objects.equals(this.name, subscriptionPlan.name) &&
        Objects.equals(this.onHold, subscriptionPlan.onHold) &&
        Objects.equals(this.orderIdentifier, subscriptionPlan.orderIdentifier) &&
        Objects.equals(this.price, subscriptionPlan.price) &&
        Objects.equals(this.recurrence, subscriptionPlan.recurrence) &&
        Objects.equals(this.saleId, subscriptionPlan.saleId) &&
        Objects.equals(this.status, subscriptionPlan.status) &&
        Objects.equals(this.systemCancelationReason, subscriptionPlan.systemCancelationReason) &&
        Objects.equals(this.trialEndsOn, subscriptionPlan.trialEndsOn) &&
        Objects.equals(this.trialNumberOfDays, subscriptionPlan.trialNumberOfDays) &&
        Objects.equals(this.trialStartsOn, subscriptionPlan.trialStartsOn) &&
        Objects.equals(this.userId, subscriptionPlan.userId) &&
        Objects.equals(this.version, subscriptionPlan.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancellatedOn, couponCode, currencyCode, externalIdentifier, features, hasDuePayment, hasDuePaymentSince, id, identifier, isActive, isLifetime, lastPaymentOn, maxClients, name, onHold, orderIdentifier, price, recurrence, saleId, status, systemCancelationReason, trialEndsOn, trialNumberOfDays, trialStartsOn, userId, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionPlan {\n");
    sb.append("    cancellatedOn: ").append(toIndentedString(cancellatedOn)).append("\n");
    sb.append("    couponCode: ").append(toIndentedString(couponCode)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    externalIdentifier: ").append(toIndentedString(externalIdentifier)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    hasDuePayment: ").append(toIndentedString(hasDuePayment)).append("\n");
    sb.append("    hasDuePaymentSince: ").append(toIndentedString(hasDuePaymentSince)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isLifetime: ").append(toIndentedString(isLifetime)).append("\n");
    sb.append("    lastPaymentOn: ").append(toIndentedString(lastPaymentOn)).append("\n");
    sb.append("    maxClients: ").append(toIndentedString(maxClients)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onHold: ").append(toIndentedString(onHold)).append("\n");
    sb.append("    orderIdentifier: ").append(toIndentedString(orderIdentifier)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    recurrence: ").append(toIndentedString(recurrence)).append("\n");
    sb.append("    saleId: ").append(toIndentedString(saleId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    systemCancelationReason: ").append(toIndentedString(systemCancelationReason)).append("\n");
    sb.append("    trialEndsOn: ").append(toIndentedString(trialEndsOn)).append("\n");
    sb.append("    trialNumberOfDays: ").append(toIndentedString(trialNumberOfDays)).append("\n");
    sb.append("    trialStartsOn: ").append(toIndentedString(trialStartsOn)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CancellatedOn");
    openapiFields.add("CouponCode");
    openapiFields.add("CurrencyCode");
    openapiFields.add("ExternalIdentifier");
    openapiFields.add("Features");
    openapiFields.add("HasDuePayment");
    openapiFields.add("HasDuePaymentSince");
    openapiFields.add("Id");
    openapiFields.add("Identifier");
    openapiFields.add("IsActive");
    openapiFields.add("IsLifetime");
    openapiFields.add("LastPaymentOn");
    openapiFields.add("MaxClients");
    openapiFields.add("Name");
    openapiFields.add("OnHold");
    openapiFields.add("OrderIdentifier");
    openapiFields.add("Price");
    openapiFields.add("Recurrence");
    openapiFields.add("SaleId");
    openapiFields.add("Status");
    openapiFields.add("SystemCancelationReason");
    openapiFields.add("TrialEndsOn");
    openapiFields.add("TrialNumberOfDays");
    openapiFields.add("TrialStartsOn");
    openapiFields.add("UserId");
    openapiFields.add("Version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionPlan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionPlan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionPlan is not found in the empty JSON string", SubscriptionPlan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionPlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionPlan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CouponCode") != null && !jsonObj.get("CouponCode").isJsonNull()) && !jsonObj.get("CouponCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CouponCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CouponCode").toString()));
      }
      if ((jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) && !jsonObj.get("CurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyCode").toString()));
      }
      if ((jsonObj.get("ExternalIdentifier") != null && !jsonObj.get("ExternalIdentifier").isJsonNull()) && !jsonObj.get("ExternalIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExternalIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExternalIdentifier").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Features") != null && !jsonObj.get("Features").isJsonNull() && !jsonObj.get("Features").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Features` to be an array in the JSON string but got `%s`", jsonObj.get("Features").toString()));
      }
      if ((jsonObj.get("Identifier") != null && !jsonObj.get("Identifier").isJsonNull()) && !jsonObj.get("Identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Identifier").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("OrderIdentifier") != null && !jsonObj.get("OrderIdentifier").isJsonNull()) && !jsonObj.get("OrderIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrderIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrderIdentifier").toString()));
      }
      if ((jsonObj.get("Recurrence") != null && !jsonObj.get("Recurrence").isJsonNull()) && !jsonObj.get("Recurrence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Recurrence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Recurrence").toString()));
      }
      // validate the optional field `Recurrence`
      if (jsonObj.get("Recurrence") != null && !jsonObj.get("Recurrence").isJsonNull()) {
        RecurrenceEnum.validateJsonElement(jsonObj.get("Recurrence"));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("SystemCancelationReason") != null && !jsonObj.get("SystemCancelationReason").isJsonNull()) && !jsonObj.get("SystemCancelationReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SystemCancelationReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SystemCancelationReason").toString()));
      }
      // validate the optional field `SystemCancelationReason`
      if (jsonObj.get("SystemCancelationReason") != null && !jsonObj.get("SystemCancelationReason").isJsonNull()) {
        SystemCancelationReasonEnum.validateJsonElement(jsonObj.get("SystemCancelationReason"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionPlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionPlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionPlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionPlan.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionPlan>() {
           @Override
           public void write(JsonWriter out, SubscriptionPlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionPlan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionPlan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionPlan
   * @throws IOException if the JSON string is invalid with respect to SubscriptionPlan
   */
  public static SubscriptionPlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionPlan.class);
  }

  /**
   * Convert an instance of SubscriptionPlan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

