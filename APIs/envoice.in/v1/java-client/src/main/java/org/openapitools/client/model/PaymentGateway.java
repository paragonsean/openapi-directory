/*
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.PaymentGatewayInputField;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentGateway
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:00.947845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentGateway {
  public static final String SERIALIZED_NAME_CAN_DISCONNECT = "CanDisconnect";
  @SerializedName(SERIALIZED_NAME_CAN_DISCONNECT)
  private Boolean canDisconnect;

  public static final String SERIALIZED_NAME_CLIENT_IMPORT_URI = "ClientImportUri";
  @SerializedName(SERIALIZED_NAME_CLIENT_IMPORT_URI)
  private String clientImportUri;

  /**
   * Gets or Sets connectionType
   */
  @JsonAdapter(ConnectionTypeEnum.Adapter.class)
  public enum ConnectionTypeEnum {
    O_AUTH("OAuth"),
    
    INPUT_FIELDS("InputFields"),
    
    DROPDOWN("Dropdown");

    private String value;

    ConnectionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionTypeEnum fromValue(String value) {
      for (ConnectionTypeEnum b : ConnectionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "ConnectionType";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  private ConnectionTypeEnum connectionType;

  public static final String SERIALIZED_NAME_EXTERNAL_CONNECTION_ID = "ExternalConnectionId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_CONNECTION_ID)
  private Integer externalConnectionId;

  public static final String SERIALIZED_NAME_FIELDS = "Fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<PaymentGatewayInputField> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_CONNECTED = "IsConnected";
  @SerializedName(SERIALIZED_NAME_IS_CONNECTED)
  private Boolean isConnected;

  public static final String SERIALIZED_NAME_IS_ENABLED = "IsEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_MAXIMUM_AMOUNT = "MaximumAmount";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_AMOUNT)
  private Double maximumAmount;

  public static final String SERIALIZED_NAME_MINIMUM_AMOUNT = "MinimumAmount";
  @SerializedName(SERIALIZED_NAME_MINIMUM_AMOUNT)
  private Double minimumAmount;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OAUTH_URI = "OAuthUri";
  @SerializedName(SERIALIZED_NAME_OAUTH_URI)
  private String oauthUri;

  public static final String SERIALIZED_NAME_REFUND_URI = "RefundUri";
  @SerializedName(SERIALIZED_NAME_REFUND_URI)
  private String refundUri;

  public static final String SERIALIZED_NAME_SUPPORTED_CURRENCIES = "SupportedCurrencies";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_CURRENCIES)
  private List<Currency> supportedCurrencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTS_CLIENTS_IMPORT = "SupportsClientsImport";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_CLIENTS_IMPORT)
  private Boolean supportsClientsImport;

  public static final String SERIALIZED_NAME_SUPPORTS_INSTANT_CHECKOUT = "SupportsInstantCheckout";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_INSTANT_CHECKOUT)
  private Boolean supportsInstantCheckout;

  public static final String SERIALIZED_NAME_SUPPORTS_REFUND = "SupportsRefund";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_REFUND)
  private Boolean supportsRefund;

  public PaymentGateway() {
  }

  public PaymentGateway canDisconnect(Boolean canDisconnect) {
    this.canDisconnect = canDisconnect;
    return this;
  }

  /**
   * Get canDisconnect
   * @return canDisconnect
   */
  @javax.annotation.Nullable
  public Boolean getCanDisconnect() {
    return canDisconnect;
  }

  public void setCanDisconnect(Boolean canDisconnect) {
    this.canDisconnect = canDisconnect;
  }


  public PaymentGateway clientImportUri(String clientImportUri) {
    this.clientImportUri = clientImportUri;
    return this;
  }

  /**
   * Get clientImportUri
   * @return clientImportUri
   */
  @javax.annotation.Nullable
  public String getClientImportUri() {
    return clientImportUri;
  }

  public void setClientImportUri(String clientImportUri) {
    this.clientImportUri = clientImportUri;
  }


  public PaymentGateway connectionType(ConnectionTypeEnum connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Get connectionType
   * @return connectionType
   */
  @javax.annotation.Nullable
  public ConnectionTypeEnum getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(ConnectionTypeEnum connectionType) {
    this.connectionType = connectionType;
  }


  public PaymentGateway externalConnectionId(Integer externalConnectionId) {
    this.externalConnectionId = externalConnectionId;
    return this;
  }

  /**
   * Get externalConnectionId
   * @return externalConnectionId
   */
  @javax.annotation.Nullable
  public Integer getExternalConnectionId() {
    return externalConnectionId;
  }

  public void setExternalConnectionId(Integer externalConnectionId) {
    this.externalConnectionId = externalConnectionId;
  }


  public PaymentGateway fields(List<PaymentGatewayInputField> fields) {
    this.fields = fields;
    return this;
  }

  public PaymentGateway addFieldsItem(PaymentGatewayInputField fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * Get fields
   * @return fields
   */
  @javax.annotation.Nullable
  public List<PaymentGatewayInputField> getFields() {
    return fields;
  }

  public void setFields(List<PaymentGatewayInputField> fields) {
    this.fields = fields;
  }


  public PaymentGateway isConnected(Boolean isConnected) {
    this.isConnected = isConnected;
    return this;
  }

  /**
   * Get isConnected
   * @return isConnected
   */
  @javax.annotation.Nullable
  public Boolean getIsConnected() {
    return isConnected;
  }

  public void setIsConnected(Boolean isConnected) {
    this.isConnected = isConnected;
  }


  public PaymentGateway isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * Get isEnabled
   * @return isEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public PaymentGateway maximumAmount(Double maximumAmount) {
    this.maximumAmount = maximumAmount;
    return this;
  }

  /**
   * Get maximumAmount
   * @return maximumAmount
   */
  @javax.annotation.Nullable
  public Double getMaximumAmount() {
    return maximumAmount;
  }

  public void setMaximumAmount(Double maximumAmount) {
    this.maximumAmount = maximumAmount;
  }


  public PaymentGateway minimumAmount(Double minimumAmount) {
    this.minimumAmount = minimumAmount;
    return this;
  }

  /**
   * Get minimumAmount
   * @return minimumAmount
   */
  @javax.annotation.Nullable
  public Double getMinimumAmount() {
    return minimumAmount;
  }

  public void setMinimumAmount(Double minimumAmount) {
    this.minimumAmount = minimumAmount;
  }


  public PaymentGateway name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PaymentGateway oauthUri(String oauthUri) {
    this.oauthUri = oauthUri;
    return this;
  }

  /**
   * Get oauthUri
   * @return oauthUri
   */
  @javax.annotation.Nullable
  public String getOauthUri() {
    return oauthUri;
  }

  public void setOauthUri(String oauthUri) {
    this.oauthUri = oauthUri;
  }


  public PaymentGateway refundUri(String refundUri) {
    this.refundUri = refundUri;
    return this;
  }

  /**
   * Get refundUri
   * @return refundUri
   */
  @javax.annotation.Nullable
  public String getRefundUri() {
    return refundUri;
  }

  public void setRefundUri(String refundUri) {
    this.refundUri = refundUri;
  }


  public PaymentGateway supportedCurrencies(List<Currency> supportedCurrencies) {
    this.supportedCurrencies = supportedCurrencies;
    return this;
  }

  public PaymentGateway addSupportedCurrenciesItem(Currency supportedCurrenciesItem) {
    if (this.supportedCurrencies == null) {
      this.supportedCurrencies = new ArrayList<>();
    }
    this.supportedCurrencies.add(supportedCurrenciesItem);
    return this;
  }

  /**
   * Get supportedCurrencies
   * @return supportedCurrencies
   */
  @javax.annotation.Nullable
  public List<Currency> getSupportedCurrencies() {
    return supportedCurrencies;
  }

  public void setSupportedCurrencies(List<Currency> supportedCurrencies) {
    this.supportedCurrencies = supportedCurrencies;
  }


  public PaymentGateway supportsClientsImport(Boolean supportsClientsImport) {
    this.supportsClientsImport = supportsClientsImport;
    return this;
  }

  /**
   * Get supportsClientsImport
   * @return supportsClientsImport
   */
  @javax.annotation.Nullable
  public Boolean getSupportsClientsImport() {
    return supportsClientsImport;
  }

  public void setSupportsClientsImport(Boolean supportsClientsImport) {
    this.supportsClientsImport = supportsClientsImport;
  }


  public PaymentGateway supportsInstantCheckout(Boolean supportsInstantCheckout) {
    this.supportsInstantCheckout = supportsInstantCheckout;
    return this;
  }

  /**
   * Get supportsInstantCheckout
   * @return supportsInstantCheckout
   */
  @javax.annotation.Nullable
  public Boolean getSupportsInstantCheckout() {
    return supportsInstantCheckout;
  }

  public void setSupportsInstantCheckout(Boolean supportsInstantCheckout) {
    this.supportsInstantCheckout = supportsInstantCheckout;
  }


  public PaymentGateway supportsRefund(Boolean supportsRefund) {
    this.supportsRefund = supportsRefund;
    return this;
  }

  /**
   * Get supportsRefund
   * @return supportsRefund
   */
  @javax.annotation.Nullable
  public Boolean getSupportsRefund() {
    return supportsRefund;
  }

  public void setSupportsRefund(Boolean supportsRefund) {
    this.supportsRefund = supportsRefund;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentGateway paymentGateway = (PaymentGateway) o;
    return Objects.equals(this.canDisconnect, paymentGateway.canDisconnect) &&
        Objects.equals(this.clientImportUri, paymentGateway.clientImportUri) &&
        Objects.equals(this.connectionType, paymentGateway.connectionType) &&
        Objects.equals(this.externalConnectionId, paymentGateway.externalConnectionId) &&
        Objects.equals(this.fields, paymentGateway.fields) &&
        Objects.equals(this.isConnected, paymentGateway.isConnected) &&
        Objects.equals(this.isEnabled, paymentGateway.isEnabled) &&
        Objects.equals(this.maximumAmount, paymentGateway.maximumAmount) &&
        Objects.equals(this.minimumAmount, paymentGateway.minimumAmount) &&
        Objects.equals(this.name, paymentGateway.name) &&
        Objects.equals(this.oauthUri, paymentGateway.oauthUri) &&
        Objects.equals(this.refundUri, paymentGateway.refundUri) &&
        Objects.equals(this.supportedCurrencies, paymentGateway.supportedCurrencies) &&
        Objects.equals(this.supportsClientsImport, paymentGateway.supportsClientsImport) &&
        Objects.equals(this.supportsInstantCheckout, paymentGateway.supportsInstantCheckout) &&
        Objects.equals(this.supportsRefund, paymentGateway.supportsRefund);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canDisconnect, clientImportUri, connectionType, externalConnectionId, fields, isConnected, isEnabled, maximumAmount, minimumAmount, name, oauthUri, refundUri, supportedCurrencies, supportsClientsImport, supportsInstantCheckout, supportsRefund);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentGateway {\n");
    sb.append("    canDisconnect: ").append(toIndentedString(canDisconnect)).append("\n");
    sb.append("    clientImportUri: ").append(toIndentedString(clientImportUri)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    externalConnectionId: ").append(toIndentedString(externalConnectionId)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    isConnected: ").append(toIndentedString(isConnected)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    maximumAmount: ").append(toIndentedString(maximumAmount)).append("\n");
    sb.append("    minimumAmount: ").append(toIndentedString(minimumAmount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oauthUri: ").append(toIndentedString(oauthUri)).append("\n");
    sb.append("    refundUri: ").append(toIndentedString(refundUri)).append("\n");
    sb.append("    supportedCurrencies: ").append(toIndentedString(supportedCurrencies)).append("\n");
    sb.append("    supportsClientsImport: ").append(toIndentedString(supportsClientsImport)).append("\n");
    sb.append("    supportsInstantCheckout: ").append(toIndentedString(supportsInstantCheckout)).append("\n");
    sb.append("    supportsRefund: ").append(toIndentedString(supportsRefund)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CanDisconnect");
    openapiFields.add("ClientImportUri");
    openapiFields.add("ConnectionType");
    openapiFields.add("ExternalConnectionId");
    openapiFields.add("Fields");
    openapiFields.add("IsConnected");
    openapiFields.add("IsEnabled");
    openapiFields.add("MaximumAmount");
    openapiFields.add("MinimumAmount");
    openapiFields.add("Name");
    openapiFields.add("OAuthUri");
    openapiFields.add("RefundUri");
    openapiFields.add("SupportedCurrencies");
    openapiFields.add("SupportsClientsImport");
    openapiFields.add("SupportsInstantCheckout");
    openapiFields.add("SupportsRefund");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentGateway
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentGateway.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentGateway is not found in the empty JSON string", PaymentGateway.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentGateway.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentGateway` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ClientImportUri") != null && !jsonObj.get("ClientImportUri").isJsonNull()) && !jsonObj.get("ClientImportUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientImportUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientImportUri").toString()));
      }
      if ((jsonObj.get("ConnectionType") != null && !jsonObj.get("ConnectionType").isJsonNull()) && !jsonObj.get("ConnectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConnectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConnectionType").toString()));
      }
      // validate the optional field `ConnectionType`
      if (jsonObj.get("ConnectionType") != null && !jsonObj.get("ConnectionType").isJsonNull()) {
        ConnectionTypeEnum.validateJsonElement(jsonObj.get("ConnectionType"));
      }
      if (jsonObj.get("Fields") != null && !jsonObj.get("Fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("Fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Fields` to be an array in the JSON string but got `%s`", jsonObj.get("Fields").toString()));
          }

          // validate the optional field `Fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            PaymentGatewayInputField.validateJsonElement(jsonArrayfields.get(i));
          };
        }
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("OAuthUri") != null && !jsonObj.get("OAuthUri").isJsonNull()) && !jsonObj.get("OAuthUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OAuthUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OAuthUri").toString()));
      }
      if ((jsonObj.get("RefundUri") != null && !jsonObj.get("RefundUri").isJsonNull()) && !jsonObj.get("RefundUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RefundUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RefundUri").toString()));
      }
      if (jsonObj.get("SupportedCurrencies") != null && !jsonObj.get("SupportedCurrencies").isJsonNull()) {
        JsonArray jsonArraysupportedCurrencies = jsonObj.getAsJsonArray("SupportedCurrencies");
        if (jsonArraysupportedCurrencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SupportedCurrencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SupportedCurrencies` to be an array in the JSON string but got `%s`", jsonObj.get("SupportedCurrencies").toString()));
          }

          // validate the optional field `SupportedCurrencies` (array)
          for (int i = 0; i < jsonArraysupportedCurrencies.size(); i++) {
            Currency.validateJsonElement(jsonArraysupportedCurrencies.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentGateway.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentGateway' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentGateway> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentGateway.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentGateway>() {
           @Override
           public void write(JsonWriter out, PaymentGateway value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentGateway read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentGateway given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentGateway
   * @throws IOException if the JSON string is invalid with respect to PaymentGateway
   */
  public static PaymentGateway fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentGateway.class);
  }

  /**
   * Convert an instance of PaymentGateway to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

