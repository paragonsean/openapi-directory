/*
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Country;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.UiLanguage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for UserSettings
 */
public class UserSettingsTest {
    private final UserSettings model = new UserSettings();

    /**
     * Model tests for UserSettings
     */
    @Test
    public void testUserSettings() {
        // TODO: test UserSettings
    }

    /**
     * Test the property 'accountantEmail'
     */
    @Test
    public void accountantEmailTest() {
        // TODO: test accountantEmail
    }

    /**
     * Test the property 'address'
     */
    @Test
    public void addressTest() {
        // TODO: test address
    }

    /**
     * Test the property 'apiKey'
     */
    @Test
    public void apiKeyTest() {
        // TODO: test apiKey
    }

    /**
     * Test the property 'apiSecret'
     */
    @Test
    public void apiSecretTest() {
        // TODO: test apiSecret
    }

    /**
     * Test the property 'backgroundImage'
     */
    @Test
    public void backgroundImageTest() {
        // TODO: test backgroundImage
    }

    /**
     * Test the property 'bank'
     */
    @Test
    public void bankTest() {
        // TODO: test bank
    }

    /**
     * Test the property 'bankAccount'
     */
    @Test
    public void bankAccountTest() {
        // TODO: test bankAccount
    }

    /**
     * Test the property 'cname'
     */
    @Test
    public void cnameTest() {
        // TODO: test cname
    }

    /**
     * Test the property 'companyRegistrationNumber'
     */
    @Test
    public void companyRegistrationNumberTest() {
        // TODO: test companyRegistrationNumber
    }

    /**
     * Test the property 'country'
     */
    @Test
    public void countryTest() {
        // TODO: test country
    }

    /**
     * Test the property 'countryId'
     */
    @Test
    public void countryIdTest() {
        // TODO: test countryId
    }

    /**
     * Test the property 'currency'
     */
    @Test
    public void currencyTest() {
        // TODO: test currency
    }

    /**
     * Test the property 'currencyId'
     */
    @Test
    public void currencyIdTest() {
        // TODO: test currencyId
    }

    /**
     * Test the property 'currencySymbol'
     */
    @Test
    public void currencySymbolTest() {
        // TODO: test currencySymbol
    }

    /**
     * Test the property 'defaultDateFormat'
     */
    @Test
    public void defaultDateFormatTest() {
        // TODO: test defaultDateFormat
    }

    /**
     * Test the property 'defaultDueDateInDays'
     */
    @Test
    public void defaultDueDateInDaysTest() {
        // TODO: test defaultDueDateInDays
    }

    /**
     * Test the property 'doNotTrack'
     */
    @Test
    public void doNotTrackTest() {
        // TODO: test doNotTrack
    }

    /**
     * Test the property 'enableClientPortal'
     */
    @Test
    public void enableClientPortalTest() {
        // TODO: test enableClientPortal
    }

    /**
     * Test the property 'enablePredictiveInvoicing'
     */
    @Test
    public void enablePredictiveInvoicingTest() {
        // TODO: test enablePredictiveInvoicing
    }

    /**
     * Test the property 'enableRecurringInvoicing'
     */
    @Test
    public void enableRecurringInvoicingTest() {
        // TODO: test enableRecurringInvoicing
    }

    /**
     * Test the property 'hasInvoiceLogo'
     */
    @Test
    public void hasInvoiceLogoTest() {
        // TODO: test hasInvoiceLogo
    }

    /**
     * Test the property 'iban'
     */
    @Test
    public void ibanTest() {
        // TODO: test iban
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'invoiceTemplate'
     */
    @Test
    public void invoiceTemplateTest() {
        // TODO: test invoiceTemplate
    }

    /**
     * Test the property 'invoiceTemplateColorHex'
     */
    @Test
    public void invoiceTemplateColorHexTest() {
        // TODO: test invoiceTemplateColorHex
    }

    /**
     * Test the property 'phoneNumber'
     */
    @Test
    public void phoneNumberTest() {
        // TODO: test phoneNumber
    }

    /**
     * Test the property 'profession'
     */
    @Test
    public void professionTest() {
        // TODO: test profession
    }

    /**
     * Test the property 'receiveSmsNotifications'
     */
    @Test
    public void receiveSmsNotificationsTest() {
        // TODO: test receiveSmsNotifications
    }

    /**
     * Test the property 'referralProgram'
     */
    @Test
    public void referralProgramTest() {
        // TODO: test referralProgram
    }

    /**
     * Test the property 'storeCheckoutFields'
     */
    @Test
    public void storeCheckoutFieldsTest() {
        // TODO: test storeCheckoutFields
    }

    /**
     * Test the property 'storeColorHex'
     */
    @Test
    public void storeColorHexTest() {
        // TODO: test storeColorHex
    }

    /**
     * Test the property 'storeCurrency'
     */
    @Test
    public void storeCurrencyTest() {
        // TODO: test storeCurrency
    }

    /**
     * Test the property 'storeCurrencyId'
     */
    @Test
    public void storeCurrencyIdTest() {
        // TODO: test storeCurrencyId
    }

    /**
     * Test the property 'storeCustomJavaScript'
     */
    @Test
    public void storeCustomJavaScriptTest() {
        // TODO: test storeCustomJavaScript
    }

    /**
     * Test the property 'storeDescription'
     */
    @Test
    public void storeDescriptionTest() {
        // TODO: test storeDescription
    }

    /**
     * Test the property 'storeEmail'
     */
    @Test
    public void storeEmailTest() {
        // TODO: test storeEmail
    }

    /**
     * Test the property 'storeLanguage'
     */
    @Test
    public void storeLanguageTest() {
        // TODO: test storeLanguage
    }

    /**
     * Test the property 'storeLanguageId'
     */
    @Test
    public void storeLanguageIdTest() {
        // TODO: test storeLanguageId
    }

    /**
     * Test the property 'storeName'
     */
    @Test
    public void storeNameTest() {
        // TODO: test storeName
    }

    /**
     * Test the property 'storePurchaseEmailMessage'
     */
    @Test
    public void storePurchaseEmailMessageTest() {
        // TODO: test storePurchaseEmailMessage
    }

    /**
     * Test the property 'storePurchaseThankYouMessage'
     */
    @Test
    public void storePurchaseThankYouMessageTest() {
        // TODO: test storePurchaseThankYouMessage
    }

    /**
     * Test the property 'storeTextColorHex'
     */
    @Test
    public void storeTextColorHexTest() {
        // TODO: test storeTextColorHex
    }

    /**
     * Test the property 'storeUrl'
     */
    @Test
    public void storeUrlTest() {
        // TODO: test storeUrl
    }

    /**
     * Test the property 'subscribeToProductEmails'
     */
    @Test
    public void subscribeToProductEmailsTest() {
        // TODO: test subscribeToProductEmails
    }

    /**
     * Test the property 'swift'
     */
    @Test
    public void swiftTest() {
        // TODO: test swift
    }

    /**
     * Test the property 'terms'
     */
    @Test
    public void termsTest() {
        // TODO: test terms
    }

    /**
     * Test the property 'userId'
     */
    @Test
    public void userIdTest() {
        // TODO: test userId
    }

    /**
     * Test the property 'userSignature'
     */
    @Test
    public void userSignatureTest() {
        // TODO: test userSignature
    }

    /**
     * Test the property 'vatNumber'
     */
    @Test
    public void vatNumberTest() {
        // TODO: test vatNumber
    }

    /**
     * Test the property 'yearsOfExperience'
     */
    @Test
    public void yearsOfExperienceTest() {
        // TODO: test yearsOfExperience
    }

}
