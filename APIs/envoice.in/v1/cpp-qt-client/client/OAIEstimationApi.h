/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEstimationApi_H
#define OAI_OAIEstimationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEstimationChangeStatusApiModel.h"
#include "OAIEstimationCreateApiModel.h"
#include "OAIEstimationDeleteApiModel.h"
#include "OAIEstimationFullDetailsApiModel.h"
#include "OAIEstimationUpdateApiModel.h"
#include "OAIEstimationUriApiModel.h"
#include "OAIInvoiceFullDetailsApiModel.h"
#include "OAIListResult_EstimationDetailsApiModel_.h"
#include "OAISendEstimationToClientApiModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEstimationApi : public QObject {
    Q_OBJECT

public:
    OAIEstimationApi(const int timeOut = 0);
    ~OAIEstimationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  query_options_page qint32 [optional]
    * @param[in]  query_options_page_size qint32 [optional]
    */
    virtual void estimationApiAll(const QString &x_auth_key, const QString &x_auth_secret, const ::OpenAPI::OptionalParam<qint32> &query_options_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &query_options_page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_estimation_change_status_api_model OAIEstimationChangeStatusApiModel [required]
    */
    virtual void estimationApiChangeStatus(const QString &x_auth_key, const QString &x_auth_secret, const OAIEstimationChangeStatusApiModel &oai_estimation_change_status_api_model);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  body qint32 [required]
    */
    virtual void estimationApiConvert(const QString &x_auth_key, const QString &x_auth_secret, const qint32 &body);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_estimation_delete_api_model OAIEstimationDeleteApiModel [required]
    */
    virtual void estimationApiDelete(const QString &x_auth_key, const QString &x_auth_secret, const OAIEstimationDeleteApiModel &oai_estimation_delete_api_model);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    */
    virtual void estimationApiDetails(const qint32 &id, const QString &x_auth_key, const QString &x_auth_secret);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_estimation_create_api_model OAIEstimationCreateApiModel [required]
    */
    virtual void estimationApiNew(const QString &x_auth_key, const QString &x_auth_secret, const OAIEstimationCreateApiModel &oai_estimation_create_api_model);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_send_estimation_to_client_api_model OAISendEstimationToClientApiModel [required]
    */
    virtual void estimationApiSendToClient(const QString &x_auth_key, const QString &x_auth_secret, const OAISendEstimationToClientApiModel &oai_send_estimation_to_client_api_model);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    */
    virtual void estimationApiStatus(const qint32 &id, const QString &x_auth_key, const QString &x_auth_secret);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_estimation_update_api_model OAIEstimationUpdateApiModel [required]
    */
    virtual void estimationApiUpdate(const QString &x_auth_key, const QString &x_auth_secret, const OAIEstimationUpdateApiModel &oai_estimation_update_api_model);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    */
    virtual void estimationApiUri(const qint32 &id, const QString &x_auth_key, const QString &x_auth_secret);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void estimationApiAllCallback(OAIHttpRequestWorker *worker);
    void estimationApiChangeStatusCallback(OAIHttpRequestWorker *worker);
    void estimationApiConvertCallback(OAIHttpRequestWorker *worker);
    void estimationApiDeleteCallback(OAIHttpRequestWorker *worker);
    void estimationApiDetailsCallback(OAIHttpRequestWorker *worker);
    void estimationApiNewCallback(OAIHttpRequestWorker *worker);
    void estimationApiSendToClientCallback(OAIHttpRequestWorker *worker);
    void estimationApiStatusCallback(OAIHttpRequestWorker *worker);
    void estimationApiUpdateCallback(OAIHttpRequestWorker *worker);
    void estimationApiUriCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void estimationApiAllSignal(OAIListResult_EstimationDetailsApiModel_ summary);
    void estimationApiChangeStatusSignal(bool summary);
    void estimationApiConvertSignal(OAIInvoiceFullDetailsApiModel summary);
    void estimationApiDeleteSignal(qint32 summary);
    void estimationApiDetailsSignal(OAIEstimationFullDetailsApiModel summary);
    void estimationApiNewSignal(OAIEstimationFullDetailsApiModel summary);
    void estimationApiSendToClientSignal(qint32 summary);
    void estimationApiStatusSignal(QString summary);
    void estimationApiUpdateSignal(OAIEstimationFullDetailsApiModel summary);
    void estimationApiUriSignal(OAIEstimationUriApiModel summary);


    void estimationApiAllSignalFull(OAIHttpRequestWorker *worker, OAIListResult_EstimationDetailsApiModel_ summary);
    void estimationApiChangeStatusSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void estimationApiConvertSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceFullDetailsApiModel summary);
    void estimationApiDeleteSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void estimationApiDetailsSignalFull(OAIHttpRequestWorker *worker, OAIEstimationFullDetailsApiModel summary);
    void estimationApiNewSignalFull(OAIHttpRequestWorker *worker, OAIEstimationFullDetailsApiModel summary);
    void estimationApiSendToClientSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void estimationApiStatusSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void estimationApiUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEstimationFullDetailsApiModel summary);
    void estimationApiUriSignalFull(OAIHttpRequestWorker *worker, OAIEstimationUriApiModel summary);

    Q_DECL_DEPRECATED_X("Use estimationApiAllSignalError() instead")
    void estimationApiAllSignalE(OAIListResult_EstimationDetailsApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiAllSignalError(OAIListResult_EstimationDetailsApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiChangeStatusSignalError() instead")
    void estimationApiChangeStatusSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiChangeStatusSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiConvertSignalError() instead")
    void estimationApiConvertSignalE(OAIInvoiceFullDetailsApiModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiConvertSignalError(OAIInvoiceFullDetailsApiModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiDeleteSignalError() instead")
    void estimationApiDeleteSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiDeleteSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiDetailsSignalError() instead")
    void estimationApiDetailsSignalE(OAIEstimationFullDetailsApiModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiDetailsSignalError(OAIEstimationFullDetailsApiModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiNewSignalError() instead")
    void estimationApiNewSignalE(OAIEstimationFullDetailsApiModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiNewSignalError(OAIEstimationFullDetailsApiModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiSendToClientSignalError() instead")
    void estimationApiSendToClientSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiSendToClientSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiStatusSignalError() instead")
    void estimationApiStatusSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiStatusSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiUpdateSignalError() instead")
    void estimationApiUpdateSignalE(OAIEstimationFullDetailsApiModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiUpdateSignalError(OAIEstimationFullDetailsApiModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiUriSignalError() instead")
    void estimationApiUriSignalE(OAIEstimationUriApiModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiUriSignalError(OAIEstimationUriApiModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use estimationApiAllSignalErrorFull() instead")
    void estimationApiAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiChangeStatusSignalErrorFull() instead")
    void estimationApiChangeStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiChangeStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiConvertSignalErrorFull() instead")
    void estimationApiConvertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiConvertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiDeleteSignalErrorFull() instead")
    void estimationApiDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiDetailsSignalErrorFull() instead")
    void estimationApiDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiNewSignalErrorFull() instead")
    void estimationApiNewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiNewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiSendToClientSignalErrorFull() instead")
    void estimationApiSendToClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiSendToClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiStatusSignalErrorFull() instead")
    void estimationApiStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiUpdateSignalErrorFull() instead")
    void estimationApiUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use estimationApiUriSignalErrorFull() instead")
    void estimationApiUriSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void estimationApiUriSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
