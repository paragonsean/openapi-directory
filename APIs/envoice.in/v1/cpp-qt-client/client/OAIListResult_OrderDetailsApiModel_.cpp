/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListResult_OrderDetailsApiModel_.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListResult_OrderDetailsApiModel_::OAIListResult_OrderDetailsApiModel_(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListResult_OrderDetailsApiModel_::OAIListResult_OrderDetailsApiModel_() {
    this->initializeModel();
}

OAIListResult_OrderDetailsApiModel_::~OAIListResult_OrderDetailsApiModel_() {}

void OAIListResult_OrderDetailsApiModel_::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_error_messages_isSet = false;
    m_error_messages_isValid = false;

    m_is_faulted_isSet = false;
    m_is_faulted_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIListResult_OrderDetailsApiModel_::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListResult_OrderDetailsApiModel_::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;

    m_error_messages_isValid = ::OpenAPI::fromJsonValue(m_error_messages, json[QString("ErrorMessages")]);
    m_error_messages_isSet = !json[QString("ErrorMessages")].isNull() && m_error_messages_isValid;

    m_is_faulted_isValid = ::OpenAPI::fromJsonValue(m_is_faulted, json[QString("IsFaulted")]);
    m_is_faulted_isSet = !json[QString("IsFaulted")].isNull() && m_is_faulted_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("Result")]);
    m_result_isSet = !json[QString("Result")].isNull() && m_result_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("TotalCount")]);
    m_total_count_isSet = !json[QString("TotalCount")].isNull() && m_total_count_isValid;
}

QString OAIListResult_OrderDetailsApiModel_::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListResult_OrderDetailsApiModel_::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_error_messages.size() > 0) {
        obj.insert(QString("ErrorMessages"), ::OpenAPI::toJsonValue(m_error_messages));
    }
    if (m_is_faulted_isSet) {
        obj.insert(QString("IsFaulted"), ::OpenAPI::toJsonValue(m_is_faulted));
    }
    if (m_result.size() > 0) {
        obj.insert(QString("Result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("TotalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

qint32 OAIListResult_OrderDetailsApiModel_::getCount() const {
    return m_count;
}
void OAIListResult_OrderDetailsApiModel_::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIListResult_OrderDetailsApiModel_::is_count_Set() const{
    return m_count_isSet;
}

bool OAIListResult_OrderDetailsApiModel_::is_count_Valid() const{
    return m_count_isValid;
}

QList<OAIIErrorInfo> OAIListResult_OrderDetailsApiModel_::getErrorMessages() const {
    return m_error_messages;
}
void OAIListResult_OrderDetailsApiModel_::setErrorMessages(const QList<OAIIErrorInfo> &error_messages) {
    m_error_messages = error_messages;
    m_error_messages_isSet = true;
}

bool OAIListResult_OrderDetailsApiModel_::is_error_messages_Set() const{
    return m_error_messages_isSet;
}

bool OAIListResult_OrderDetailsApiModel_::is_error_messages_Valid() const{
    return m_error_messages_isValid;
}

bool OAIListResult_OrderDetailsApiModel_::isIsFaulted() const {
    return m_is_faulted;
}
void OAIListResult_OrderDetailsApiModel_::setIsFaulted(const bool &is_faulted) {
    m_is_faulted = is_faulted;
    m_is_faulted_isSet = true;
}

bool OAIListResult_OrderDetailsApiModel_::is_is_faulted_Set() const{
    return m_is_faulted_isSet;
}

bool OAIListResult_OrderDetailsApiModel_::is_is_faulted_Valid() const{
    return m_is_faulted_isValid;
}

QList<OAIOrderDetailsApiModel> OAIListResult_OrderDetailsApiModel_::getResult() const {
    return m_result;
}
void OAIListResult_OrderDetailsApiModel_::setResult(const QList<OAIOrderDetailsApiModel> &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIListResult_OrderDetailsApiModel_::is_result_Set() const{
    return m_result_isSet;
}

bool OAIListResult_OrderDetailsApiModel_::is_result_Valid() const{
    return m_result_isValid;
}

qint32 OAIListResult_OrderDetailsApiModel_::getTotalCount() const {
    return m_total_count;
}
void OAIListResult_OrderDetailsApiModel_::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIListResult_OrderDetailsApiModel_::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIListResult_OrderDetailsApiModel_::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIListResult_OrderDetailsApiModel_::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_faulted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListResult_OrderDetailsApiModel_::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
