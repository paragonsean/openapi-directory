/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoiceApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIInvoiceApi::OAIInvoiceApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIInvoiceApi::~OAIInvoiceApi() {
}

void OAIInvoiceApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://www.envoice.in"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("apiInvoiceAllcategoriesGet", defaultConf);
    _serverIndices.insert("apiInvoiceAllcategoriesGet", 0);
    _serverConfigs.insert("apiInvoiceDeletecategoryPost", defaultConf);
    _serverIndices.insert("apiInvoiceDeletecategoryPost", 0);
    _serverConfigs.insert("apiInvoiceNewcategoryPost", defaultConf);
    _serverIndices.insert("apiInvoiceNewcategoryPost", 0);
    _serverConfigs.insert("apiInvoiceUpdatecategoryPost", defaultConf);
    _serverIndices.insert("apiInvoiceUpdatecategoryPost", 0);
    _serverConfigs.insert("invoiceApiAll", defaultConf);
    _serverIndices.insert("invoiceApiAll", 0);
    _serverConfigs.insert("invoiceApiChangeStatus", defaultConf);
    _serverIndices.insert("invoiceApiChangeStatus", 0);
    _serverConfigs.insert("invoiceApiDelete", defaultConf);
    _serverIndices.insert("invoiceApiDelete", 0);
    _serverConfigs.insert("invoiceApiDetails", defaultConf);
    _serverIndices.insert("invoiceApiDetails", 0);
    _serverConfigs.insert("invoiceApiNew", defaultConf);
    _serverIndices.insert("invoiceApiNew", 0);
    _serverConfigs.insert("invoiceApiPdf", defaultConf);
    _serverIndices.insert("invoiceApiPdf", 0);
    _serverConfigs.insert("invoiceApiSendToAccountant", defaultConf);
    _serverIndices.insert("invoiceApiSendToAccountant", 0);
    _serverConfigs.insert("invoiceApiSendToClient", defaultConf);
    _serverIndices.insert("invoiceApiSendToClient", 0);
    _serverConfigs.insert("invoiceApiStatus", defaultConf);
    _serverIndices.insert("invoiceApiStatus", 0);
    _serverConfigs.insert("invoiceApiUpdate", defaultConf);
    _serverIndices.insert("invoiceApiUpdate", 0);
    _serverConfigs.insert("invoiceApiUri", defaultConf);
    _serverIndices.insert("invoiceApiUri", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIInvoiceApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIInvoiceApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIInvoiceApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIInvoiceApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIInvoiceApi::setUsername(const QString &username) {
    _username = username;
}

void OAIInvoiceApi::setPassword(const QString &password) {
    _password = password;
}


void OAIInvoiceApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIInvoiceApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIInvoiceApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIInvoiceApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIInvoiceApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIInvoiceApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIInvoiceApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIInvoiceApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIInvoiceApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIInvoiceApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIInvoiceApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIInvoiceApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIInvoiceApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIInvoiceApi::apiInvoiceAllcategoriesGet(const QString &x_auth_key, const QString &x_auth_secret, const ::OpenAPI::OptionalParam<QString> &query) {
    QString fullPath = QString(_serverConfigs["apiInvoiceAllcategoriesGet"][_serverIndices.value("apiInvoiceAllcategoriesGet")].URL()+"/api/invoice/allcategories");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (query.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "query", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("query")).append(querySuffix).append(QUrl::toPercentEncoding(query.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_auth_key).isEmpty()) {
            input.headers.insert("x-auth-key", ::OpenAPI::toStringValue(x_auth_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_secret).isEmpty()) {
            input.headers.insert("x-auth-secret", ::OpenAPI::toStringValue(x_auth_secret));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInvoiceApi::apiInvoiceAllcategoriesGetCallback);
    connect(this, &OAIInvoiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInvoiceApi::apiInvoiceAllcategoriesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListResult_InvoiceCategoryApiModel_ output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiInvoiceAllcategoriesGetSignal(output);
        Q_EMIT apiInvoiceAllcategoriesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiInvoiceAllcategoriesGetSignalE(output, error_type, error_str);
        Q_EMIT apiInvoiceAllcategoriesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiInvoiceAllcategoriesGetSignalError(output, error_type, error_str);
        Q_EMIT apiInvoiceAllcategoriesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInvoiceApi::apiInvoiceDeletecategoryPost(const QString &x_auth_key, const QString &x_auth_secret, const OAIInvoiceCategoryDeleteApiModel &oai_invoice_category_delete_api_model) {
    QString fullPath = QString(_serverConfigs["apiInvoiceDeletecategoryPost"][_serverIndices.value("apiInvoiceDeletecategoryPost")].URL()+"/api/invoice/deletecategory");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_invoice_category_delete_api_model.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_key).isEmpty()) {
            input.headers.insert("x-auth-key", ::OpenAPI::toStringValue(x_auth_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_secret).isEmpty()) {
            input.headers.insert("x-auth-secret", ::OpenAPI::toStringValue(x_auth_secret));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInvoiceApi::apiInvoiceDeletecategoryPostCallback);
    connect(this, &OAIInvoiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInvoiceApi::apiInvoiceDeletecategoryPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    qint32 output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiInvoiceDeletecategoryPostSignal(output);
        Q_EMIT apiInvoiceDeletecategoryPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiInvoiceDeletecategoryPostSignalE(output, error_type, error_str);
        Q_EMIT apiInvoiceDeletecategoryPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiInvoiceDeletecategoryPostSignalError(output, error_type, error_str);
        Q_EMIT apiInvoiceDeletecategoryPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInvoiceApi::apiInvoiceNewcategoryPost(const QString &x_auth_key, const QString &x_auth_secret, const OAIInvoiceCategoryCreateApiModel &oai_invoice_category_create_api_model) {
    QString fullPath = QString(_serverConfigs["apiInvoiceNewcategoryPost"][_serverIndices.value("apiInvoiceNewcategoryPost")].URL()+"/api/invoice/newcategory");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_invoice_category_create_api_model.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_key).isEmpty()) {
            input.headers.insert("x-auth-key", ::OpenAPI::toStringValue(x_auth_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_secret).isEmpty()) {
            input.headers.insert("x-auth-secret", ::OpenAPI::toStringValue(x_auth_secret));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInvoiceApi::apiInvoiceNewcategoryPostCallback);
    connect(this, &OAIInvoiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInvoiceApi::apiInvoiceNewcategoryPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIInvoiceCategoryApiModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiInvoiceNewcategoryPostSignal(output);
        Q_EMIT apiInvoiceNewcategoryPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiInvoiceNewcategoryPostSignalE(output, error_type, error_str);
        Q_EMIT apiInvoiceNewcategoryPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiInvoiceNewcategoryPostSignalError(output, error_type, error_str);
        Q_EMIT apiInvoiceNewcategoryPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInvoiceApi::apiInvoiceUpdatecategoryPost(const QString &x_auth_key, const QString &x_auth_secret, const OAIInvoiceCategoryUpdateApiModel &oai_invoice_category_update_api_model) {
    QString fullPath = QString(_serverConfigs["apiInvoiceUpdatecategoryPost"][_serverIndices.value("apiInvoiceUpdatecategoryPost")].URL()+"/api/invoice/updatecategory");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_invoice_category_update_api_model.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_key).isEmpty()) {
            input.headers.insert("x-auth-key", ::OpenAPI::toStringValue(x_auth_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_secret).isEmpty()) {
            input.headers.insert("x-auth-secret", ::OpenAPI::toStringValue(x_auth_secret));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInvoiceApi::apiInvoiceUpdatecategoryPostCallback);
    connect(this, &OAIInvoiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInvoiceApi::apiInvoiceUpdatecategoryPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIInvoiceCategoryApiModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiInvoiceUpdatecategoryPostSignal(output);
        Q_EMIT apiInvoiceUpdatecategoryPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiInvoiceUpdatecategoryPostSignalE(output, error_type, error_str);
        Q_EMIT apiInvoiceUpdatecategoryPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiInvoiceUpdatecategoryPostSignalError(output, error_type, error_str);
        Q_EMIT apiInvoiceUpdatecategoryPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInvoiceApi::invoiceApiAll(const QString &x_auth_key, const QString &x_auth_secret, const ::OpenAPI::OptionalParam<qint32> &query_options_page, const ::OpenAPI::OptionalParam<qint32> &query_options_page_size) {
    QString fullPath = QString(_serverConfigs["invoiceApiAll"][_serverIndices.value("invoiceApiAll")].URL()+"/api/invoice/all");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (query_options_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "queryOptions.page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("queryOptions.page")).append(querySuffix).append(QUrl::toPercentEncoding(query_options_page.stringValue()));
    }
    if (query_options_page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "queryOptions.pageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("queryOptions.pageSize")).append(querySuffix).append(QUrl::toPercentEncoding(query_options_page_size.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_auth_key).isEmpty()) {
            input.headers.insert("x-auth-key", ::OpenAPI::toStringValue(x_auth_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_secret).isEmpty()) {
            input.headers.insert("x-auth-secret", ::OpenAPI::toStringValue(x_auth_secret));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInvoiceApi::invoiceApiAllCallback);
    connect(this, &OAIInvoiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInvoiceApi::invoiceApiAllCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListResult_InvoiceDetailsApiModel_ output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT invoiceApiAllSignal(output);
        Q_EMIT invoiceApiAllSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT invoiceApiAllSignalE(output, error_type, error_str);
        Q_EMIT invoiceApiAllSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT invoiceApiAllSignalError(output, error_type, error_str);
        Q_EMIT invoiceApiAllSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInvoiceApi::invoiceApiChangeStatus(const QString &x_auth_key, const QString &x_auth_secret, const OAIChangeStatusApiModel &oai_change_status_api_model) {
    QString fullPath = QString(_serverConfigs["invoiceApiChangeStatus"][_serverIndices.value("invoiceApiChangeStatus")].URL()+"/api/invoice/changestatus");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_change_status_api_model.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_key).isEmpty()) {
            input.headers.insert("x-auth-key", ::OpenAPI::toStringValue(x_auth_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_secret).isEmpty()) {
            input.headers.insert("x-auth-secret", ::OpenAPI::toStringValue(x_auth_secret));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInvoiceApi::invoiceApiChangeStatusCallback);
    connect(this, &OAIInvoiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInvoiceApi::invoiceApiChangeStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    bool output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT invoiceApiChangeStatusSignal(output);
        Q_EMIT invoiceApiChangeStatusSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT invoiceApiChangeStatusSignalE(output, error_type, error_str);
        Q_EMIT invoiceApiChangeStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT invoiceApiChangeStatusSignalError(output, error_type, error_str);
        Q_EMIT invoiceApiChangeStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInvoiceApi::invoiceApiDelete(const QString &x_auth_key, const QString &x_auth_secret, const OAIInvoiceDeleteApiModel &oai_invoice_delete_api_model) {
    QString fullPath = QString(_serverConfigs["invoiceApiDelete"][_serverIndices.value("invoiceApiDelete")].URL()+"/api/invoice/delete");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_invoice_delete_api_model.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_key).isEmpty()) {
            input.headers.insert("x-auth-key", ::OpenAPI::toStringValue(x_auth_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_secret).isEmpty()) {
            input.headers.insert("x-auth-secret", ::OpenAPI::toStringValue(x_auth_secret));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInvoiceApi::invoiceApiDeleteCallback);
    connect(this, &OAIInvoiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInvoiceApi::invoiceApiDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    qint32 output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT invoiceApiDeleteSignal(output);
        Q_EMIT invoiceApiDeleteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT invoiceApiDeleteSignalE(output, error_type, error_str);
        Q_EMIT invoiceApiDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT invoiceApiDeleteSignalError(output, error_type, error_str);
        Q_EMIT invoiceApiDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInvoiceApi::invoiceApiDetails(const qint32 &id, const QString &x_auth_key, const QString &x_auth_secret) {
    QString fullPath = QString(_serverConfigs["invoiceApiDetails"][_serverIndices.value("invoiceApiDetails")].URL()+"/api/invoice/details");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_auth_key).isEmpty()) {
            input.headers.insert("x-auth-key", ::OpenAPI::toStringValue(x_auth_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_secret).isEmpty()) {
            input.headers.insert("x-auth-secret", ::OpenAPI::toStringValue(x_auth_secret));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInvoiceApi::invoiceApiDetailsCallback);
    connect(this, &OAIInvoiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInvoiceApi::invoiceApiDetailsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIInvoiceFullDetailsApiModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT invoiceApiDetailsSignal(output);
        Q_EMIT invoiceApiDetailsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT invoiceApiDetailsSignalE(output, error_type, error_str);
        Q_EMIT invoiceApiDetailsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT invoiceApiDetailsSignalError(output, error_type, error_str);
        Q_EMIT invoiceApiDetailsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInvoiceApi::invoiceApiNew(const QString &x_auth_key, const QString &x_auth_secret, const OAIInvoiceCreateApiModel &oai_invoice_create_api_model) {
    QString fullPath = QString(_serverConfigs["invoiceApiNew"][_serverIndices.value("invoiceApiNew")].URL()+"/api/invoice/new");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_invoice_create_api_model.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_key).isEmpty()) {
            input.headers.insert("x-auth-key", ::OpenAPI::toStringValue(x_auth_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_secret).isEmpty()) {
            input.headers.insert("x-auth-secret", ::OpenAPI::toStringValue(x_auth_secret));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInvoiceApi::invoiceApiNewCallback);
    connect(this, &OAIInvoiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInvoiceApi::invoiceApiNewCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIInvoiceFullDetailsApiModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT invoiceApiNewSignal(output);
        Q_EMIT invoiceApiNewSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT invoiceApiNewSignalE(output, error_type, error_str);
        Q_EMIT invoiceApiNewSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT invoiceApiNewSignalError(output, error_type, error_str);
        Q_EMIT invoiceApiNewSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInvoiceApi::invoiceApiPdf(const qint32 &id, const QString &x_auth_key, const QString &x_auth_secret, const ::OpenAPI::OptionalParam<bool> &signed_version) {
    QString fullPath = QString(_serverConfigs["invoiceApiPdf"][_serverIndices.value("invoiceApiPdf")].URL()+"/api/invoice/pdf");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id));
    }
    if (signed_version.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "signedVersion", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("signedVersion")).append(querySuffix).append(QUrl::toPercentEncoding(signed_version.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_auth_key).isEmpty()) {
            input.headers.insert("x-auth-key", ::OpenAPI::toStringValue(x_auth_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_secret).isEmpty()) {
            input.headers.insert("x-auth-secret", ::OpenAPI::toStringValue(x_auth_secret));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInvoiceApi::invoiceApiPdfCallback);
    connect(this, &OAIInvoiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInvoiceApi::invoiceApiPdfCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIInvoiceUriApiModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT invoiceApiPdfSignal(output);
        Q_EMIT invoiceApiPdfSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT invoiceApiPdfSignalE(output, error_type, error_str);
        Q_EMIT invoiceApiPdfSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT invoiceApiPdfSignalError(output, error_type, error_str);
        Q_EMIT invoiceApiPdfSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInvoiceApi::invoiceApiSendToAccountant(const QString &x_auth_key, const QString &x_auth_secret, const OAISendInvoiceToAccountantApiModel &oai_send_invoice_to_accountant_api_model) {
    QString fullPath = QString(_serverConfigs["invoiceApiSendToAccountant"][_serverIndices.value("invoiceApiSendToAccountant")].URL()+"/api/invoice/sendtoaccountant");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_send_invoice_to_accountant_api_model.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_key).isEmpty()) {
            input.headers.insert("x-auth-key", ::OpenAPI::toStringValue(x_auth_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_secret).isEmpty()) {
            input.headers.insert("x-auth-secret", ::OpenAPI::toStringValue(x_auth_secret));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInvoiceApi::invoiceApiSendToAccountantCallback);
    connect(this, &OAIInvoiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInvoiceApi::invoiceApiSendToAccountantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    qint32 output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT invoiceApiSendToAccountantSignal(output);
        Q_EMIT invoiceApiSendToAccountantSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT invoiceApiSendToAccountantSignalE(output, error_type, error_str);
        Q_EMIT invoiceApiSendToAccountantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT invoiceApiSendToAccountantSignalError(output, error_type, error_str);
        Q_EMIT invoiceApiSendToAccountantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInvoiceApi::invoiceApiSendToClient(const QString &x_auth_key, const QString &x_auth_secret, const OAISendInvoiceToClientApiModel &oai_send_invoice_to_client_api_model) {
    QString fullPath = QString(_serverConfigs["invoiceApiSendToClient"][_serverIndices.value("invoiceApiSendToClient")].URL()+"/api/invoice/sendtoclient");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_send_invoice_to_client_api_model.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_key).isEmpty()) {
            input.headers.insert("x-auth-key", ::OpenAPI::toStringValue(x_auth_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_secret).isEmpty()) {
            input.headers.insert("x-auth-secret", ::OpenAPI::toStringValue(x_auth_secret));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInvoiceApi::invoiceApiSendToClientCallback);
    connect(this, &OAIInvoiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInvoiceApi::invoiceApiSendToClientCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    qint32 output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT invoiceApiSendToClientSignal(output);
        Q_EMIT invoiceApiSendToClientSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT invoiceApiSendToClientSignalE(output, error_type, error_str);
        Q_EMIT invoiceApiSendToClientSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT invoiceApiSendToClientSignalError(output, error_type, error_str);
        Q_EMIT invoiceApiSendToClientSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInvoiceApi::invoiceApiStatus(const qint32 &id, const QString &x_auth_key, const QString &x_auth_secret) {
    QString fullPath = QString(_serverConfigs["invoiceApiStatus"][_serverIndices.value("invoiceApiStatus")].URL()+"/api/invoice/status");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_auth_key).isEmpty()) {
            input.headers.insert("x-auth-key", ::OpenAPI::toStringValue(x_auth_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_secret).isEmpty()) {
            input.headers.insert("x-auth-secret", ::OpenAPI::toStringValue(x_auth_secret));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInvoiceApi::invoiceApiStatusCallback);
    connect(this, &OAIInvoiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInvoiceApi::invoiceApiStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT invoiceApiStatusSignal(output);
        Q_EMIT invoiceApiStatusSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT invoiceApiStatusSignalE(output, error_type, error_str);
        Q_EMIT invoiceApiStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT invoiceApiStatusSignalError(output, error_type, error_str);
        Q_EMIT invoiceApiStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInvoiceApi::invoiceApiUpdate(const QString &x_auth_key, const QString &x_auth_secret, const OAIInvoiceUpdateApiModel &oai_invoice_update_api_model) {
    QString fullPath = QString(_serverConfigs["invoiceApiUpdate"][_serverIndices.value("invoiceApiUpdate")].URL()+"/api/invoice/update");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_invoice_update_api_model.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_key).isEmpty()) {
            input.headers.insert("x-auth-key", ::OpenAPI::toStringValue(x_auth_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_secret).isEmpty()) {
            input.headers.insert("x-auth-secret", ::OpenAPI::toStringValue(x_auth_secret));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInvoiceApi::invoiceApiUpdateCallback);
    connect(this, &OAIInvoiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInvoiceApi::invoiceApiUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIInvoiceFullDetailsApiModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT invoiceApiUpdateSignal(output);
        Q_EMIT invoiceApiUpdateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT invoiceApiUpdateSignalE(output, error_type, error_str);
        Q_EMIT invoiceApiUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT invoiceApiUpdateSignalError(output, error_type, error_str);
        Q_EMIT invoiceApiUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInvoiceApi::invoiceApiUri(const qint32 &id, const QString &x_auth_key, const QString &x_auth_secret) {
    QString fullPath = QString(_serverConfigs["invoiceApiUri"][_serverIndices.value("invoiceApiUri")].URL()+"/api/invoice/uri");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_auth_key).isEmpty()) {
            input.headers.insert("x-auth-key", ::OpenAPI::toStringValue(x_auth_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_auth_secret).isEmpty()) {
            input.headers.insert("x-auth-secret", ::OpenAPI::toStringValue(x_auth_secret));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIInvoiceApi::invoiceApiUriCallback);
    connect(this, &OAIInvoiceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIInvoiceApi::invoiceApiUriCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIInvoiceUriApiModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT invoiceApiUriSignal(output);
        Q_EMIT invoiceApiUriSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT invoiceApiUriSignalE(output, error_type, error_str);
        Q_EMIT invoiceApiUriSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT invoiceApiUriSignalError(output, error_type, error_str);
        Q_EMIT invoiceApiUriSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIInvoiceApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
