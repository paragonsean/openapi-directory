/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalConnection::OAIExternalConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalConnection::OAIExternalConnection() {
    this->initializeModel();
}

OAIExternalConnection::~OAIExternalConnection() {}

void OAIExternalConnection::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_access_token_secret_isSet = false;
    m_access_token_secret_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_expires_on_isSet = false;
    m_expires_on_isValid = false;

    m_external_user_id_isSet = false;
    m_external_user_id_isValid = false;

    m_external_username_isSet = false;
    m_external_username_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIExternalConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternalConnection::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("AccessToken")]);
    m_access_token_isSet = !json[QString("AccessToken")].isNull() && m_access_token_isValid;

    m_access_token_secret_isValid = ::OpenAPI::fromJsonValue(m_access_token_secret, json[QString("AccessTokenSecret")]);
    m_access_token_secret_isSet = !json[QString("AccessTokenSecret")].isNull() && m_access_token_secret_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("Data")]);
    m_data_isSet = !json[QString("Data")].isNull() && m_data_isValid;

    m_expires_on_isValid = ::OpenAPI::fromJsonValue(m_expires_on, json[QString("ExpiresOn")]);
    m_expires_on_isSet = !json[QString("ExpiresOn")].isNull() && m_expires_on_isValid;

    m_external_user_id_isValid = ::OpenAPI::fromJsonValue(m_external_user_id, json[QString("ExternalUserId")]);
    m_external_user_id_isSet = !json[QString("ExternalUserId")].isNull() && m_external_user_id_isValid;

    m_external_username_isValid = ::OpenAPI::fromJsonValue(m_external_username, json[QString("ExternalUsername")]);
    m_external_username_isSet = !json[QString("ExternalUsername")].isNull() && m_external_username_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("Provider")]);
    m_provider_isSet = !json[QString("Provider")].isNull() && m_provider_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;
}

QString OAIExternalConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternalConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("AccessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_access_token_secret_isSet) {
        obj.insert(QString("AccessTokenSecret"), ::OpenAPI::toJsonValue(m_access_token_secret));
    }
    if (m_data_isSet) {
        obj.insert(QString("Data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_expires_on_isSet) {
        obj.insert(QString("ExpiresOn"), ::OpenAPI::toJsonValue(m_expires_on));
    }
    if (m_external_user_id_isSet) {
        obj.insert(QString("ExternalUserId"), ::OpenAPI::toJsonValue(m_external_user_id));
    }
    if (m_external_username_isSet) {
        obj.insert(QString("ExternalUsername"), ::OpenAPI::toJsonValue(m_external_username));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_provider_isSet) {
        obj.insert(QString("Provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIExternalConnection::getAccessToken() const {
    return m_access_token;
}
void OAIExternalConnection::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIExternalConnection::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIExternalConnection::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QString OAIExternalConnection::getAccessTokenSecret() const {
    return m_access_token_secret;
}
void OAIExternalConnection::setAccessTokenSecret(const QString &access_token_secret) {
    m_access_token_secret = access_token_secret;
    m_access_token_secret_isSet = true;
}

bool OAIExternalConnection::is_access_token_secret_Set() const{
    return m_access_token_secret_isSet;
}

bool OAIExternalConnection::is_access_token_secret_Valid() const{
    return m_access_token_secret_isValid;
}

QString OAIExternalConnection::getData() const {
    return m_data;
}
void OAIExternalConnection::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIExternalConnection::is_data_Set() const{
    return m_data_isSet;
}

bool OAIExternalConnection::is_data_Valid() const{
    return m_data_isValid;
}

QDateTime OAIExternalConnection::getExpiresOn() const {
    return m_expires_on;
}
void OAIExternalConnection::setExpiresOn(const QDateTime &expires_on) {
    m_expires_on = expires_on;
    m_expires_on_isSet = true;
}

bool OAIExternalConnection::is_expires_on_Set() const{
    return m_expires_on_isSet;
}

bool OAIExternalConnection::is_expires_on_Valid() const{
    return m_expires_on_isValid;
}

QString OAIExternalConnection::getExternalUserId() const {
    return m_external_user_id;
}
void OAIExternalConnection::setExternalUserId(const QString &external_user_id) {
    m_external_user_id = external_user_id;
    m_external_user_id_isSet = true;
}

bool OAIExternalConnection::is_external_user_id_Set() const{
    return m_external_user_id_isSet;
}

bool OAIExternalConnection::is_external_user_id_Valid() const{
    return m_external_user_id_isValid;
}

QString OAIExternalConnection::getExternalUsername() const {
    return m_external_username;
}
void OAIExternalConnection::setExternalUsername(const QString &external_username) {
    m_external_username = external_username;
    m_external_username_isSet = true;
}

bool OAIExternalConnection::is_external_username_Set() const{
    return m_external_username_isSet;
}

bool OAIExternalConnection::is_external_username_Valid() const{
    return m_external_username_isValid;
}

qint32 OAIExternalConnection::getId() const {
    return m_id;
}
void OAIExternalConnection::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExternalConnection::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExternalConnection::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIExternalConnection::getProvider() const {
    return m_provider;
}
void OAIExternalConnection::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIExternalConnection::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIExternalConnection::is_provider_Valid() const{
    return m_provider_isValid;
}

qint32 OAIExternalConnection::getUserId() const {
    return m_user_id;
}
void OAIExternalConnection::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIExternalConnection::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIExternalConnection::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIExternalConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_token_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternalConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
