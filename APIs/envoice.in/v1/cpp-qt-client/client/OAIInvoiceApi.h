/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInvoiceApi_H
#define OAI_OAIInvoiceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChangeStatusApiModel.h"
#include "OAIInvoiceCategoryApiModel.h"
#include "OAIInvoiceCategoryCreateApiModel.h"
#include "OAIInvoiceCategoryDeleteApiModel.h"
#include "OAIInvoiceCategoryUpdateApiModel.h"
#include "OAIInvoiceCreateApiModel.h"
#include "OAIInvoiceDeleteApiModel.h"
#include "OAIInvoiceFullDetailsApiModel.h"
#include "OAIInvoiceUpdateApiModel.h"
#include "OAIInvoiceUriApiModel.h"
#include "OAIListResult_InvoiceCategoryApiModel_.h"
#include "OAIListResult_InvoiceDetailsApiModel_.h"
#include "OAISendInvoiceToAccountantApiModel.h"
#include "OAISendInvoiceToClientApiModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInvoiceApi : public QObject {
    Q_OBJECT

public:
    OAIInvoiceApi(const int timeOut = 0);
    ~OAIInvoiceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  query QString [optional]
    */
    virtual void apiInvoiceAllcategoriesGet(const QString &x_auth_key, const QString &x_auth_secret, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_invoice_category_delete_api_model OAIInvoiceCategoryDeleteApiModel [required]
    */
    virtual void apiInvoiceDeletecategoryPost(const QString &x_auth_key, const QString &x_auth_secret, const OAIInvoiceCategoryDeleteApiModel &oai_invoice_category_delete_api_model);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_invoice_category_create_api_model OAIInvoiceCategoryCreateApiModel [required]
    */
    virtual void apiInvoiceNewcategoryPost(const QString &x_auth_key, const QString &x_auth_secret, const OAIInvoiceCategoryCreateApiModel &oai_invoice_category_create_api_model);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_invoice_category_update_api_model OAIInvoiceCategoryUpdateApiModel [required]
    */
    virtual void apiInvoiceUpdatecategoryPost(const QString &x_auth_key, const QString &x_auth_secret, const OAIInvoiceCategoryUpdateApiModel &oai_invoice_category_update_api_model);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  query_options_page qint32 [optional]
    * @param[in]  query_options_page_size qint32 [optional]
    */
    virtual void invoiceApiAll(const QString &x_auth_key, const QString &x_auth_secret, const ::OpenAPI::OptionalParam<qint32> &query_options_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &query_options_page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_change_status_api_model OAIChangeStatusApiModel [required]
    */
    virtual void invoiceApiChangeStatus(const QString &x_auth_key, const QString &x_auth_secret, const OAIChangeStatusApiModel &oai_change_status_api_model);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_invoice_delete_api_model OAIInvoiceDeleteApiModel [required]
    */
    virtual void invoiceApiDelete(const QString &x_auth_key, const QString &x_auth_secret, const OAIInvoiceDeleteApiModel &oai_invoice_delete_api_model);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    */
    virtual void invoiceApiDetails(const qint32 &id, const QString &x_auth_key, const QString &x_auth_secret);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_invoice_create_api_model OAIInvoiceCreateApiModel [required]
    */
    virtual void invoiceApiNew(const QString &x_auth_key, const QString &x_auth_secret, const OAIInvoiceCreateApiModel &oai_invoice_create_api_model);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  signed_version bool [optional]
    */
    virtual void invoiceApiPdf(const qint32 &id, const QString &x_auth_key, const QString &x_auth_secret, const ::OpenAPI::OptionalParam<bool> &signed_version = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_send_invoice_to_accountant_api_model OAISendInvoiceToAccountantApiModel [required]
    */
    virtual void invoiceApiSendToAccountant(const QString &x_auth_key, const QString &x_auth_secret, const OAISendInvoiceToAccountantApiModel &oai_send_invoice_to_accountant_api_model);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_send_invoice_to_client_api_model OAISendInvoiceToClientApiModel [required]
    */
    virtual void invoiceApiSendToClient(const QString &x_auth_key, const QString &x_auth_secret, const OAISendInvoiceToClientApiModel &oai_send_invoice_to_client_api_model);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    */
    virtual void invoiceApiStatus(const qint32 &id, const QString &x_auth_key, const QString &x_auth_secret);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_invoice_update_api_model OAIInvoiceUpdateApiModel [required]
    */
    virtual void invoiceApiUpdate(const QString &x_auth_key, const QString &x_auth_secret, const OAIInvoiceUpdateApiModel &oai_invoice_update_api_model);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    */
    virtual void invoiceApiUri(const qint32 &id, const QString &x_auth_key, const QString &x_auth_secret);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiInvoiceAllcategoriesGetCallback(OAIHttpRequestWorker *worker);
    void apiInvoiceDeletecategoryPostCallback(OAIHttpRequestWorker *worker);
    void apiInvoiceNewcategoryPostCallback(OAIHttpRequestWorker *worker);
    void apiInvoiceUpdatecategoryPostCallback(OAIHttpRequestWorker *worker);
    void invoiceApiAllCallback(OAIHttpRequestWorker *worker);
    void invoiceApiChangeStatusCallback(OAIHttpRequestWorker *worker);
    void invoiceApiDeleteCallback(OAIHttpRequestWorker *worker);
    void invoiceApiDetailsCallback(OAIHttpRequestWorker *worker);
    void invoiceApiNewCallback(OAIHttpRequestWorker *worker);
    void invoiceApiPdfCallback(OAIHttpRequestWorker *worker);
    void invoiceApiSendToAccountantCallback(OAIHttpRequestWorker *worker);
    void invoiceApiSendToClientCallback(OAIHttpRequestWorker *worker);
    void invoiceApiStatusCallback(OAIHttpRequestWorker *worker);
    void invoiceApiUpdateCallback(OAIHttpRequestWorker *worker);
    void invoiceApiUriCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiInvoiceAllcategoriesGetSignal(OAIListResult_InvoiceCategoryApiModel_ summary);
    void apiInvoiceDeletecategoryPostSignal(qint32 summary);
    void apiInvoiceNewcategoryPostSignal(OAIInvoiceCategoryApiModel summary);
    void apiInvoiceUpdatecategoryPostSignal(OAIInvoiceCategoryApiModel summary);
    void invoiceApiAllSignal(OAIListResult_InvoiceDetailsApiModel_ summary);
    void invoiceApiChangeStatusSignal(bool summary);
    void invoiceApiDeleteSignal(qint32 summary);
    void invoiceApiDetailsSignal(OAIInvoiceFullDetailsApiModel summary);
    void invoiceApiNewSignal(OAIInvoiceFullDetailsApiModel summary);
    void invoiceApiPdfSignal(OAIInvoiceUriApiModel summary);
    void invoiceApiSendToAccountantSignal(qint32 summary);
    void invoiceApiSendToClientSignal(qint32 summary);
    void invoiceApiStatusSignal(QString summary);
    void invoiceApiUpdateSignal(OAIInvoiceFullDetailsApiModel summary);
    void invoiceApiUriSignal(OAIInvoiceUriApiModel summary);


    void apiInvoiceAllcategoriesGetSignalFull(OAIHttpRequestWorker *worker, OAIListResult_InvoiceCategoryApiModel_ summary);
    void apiInvoiceDeletecategoryPostSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void apiInvoiceNewcategoryPostSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceCategoryApiModel summary);
    void apiInvoiceUpdatecategoryPostSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceCategoryApiModel summary);
    void invoiceApiAllSignalFull(OAIHttpRequestWorker *worker, OAIListResult_InvoiceDetailsApiModel_ summary);
    void invoiceApiChangeStatusSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void invoiceApiDeleteSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void invoiceApiDetailsSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceFullDetailsApiModel summary);
    void invoiceApiNewSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceFullDetailsApiModel summary);
    void invoiceApiPdfSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceUriApiModel summary);
    void invoiceApiSendToAccountantSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void invoiceApiSendToClientSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void invoiceApiStatusSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void invoiceApiUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceFullDetailsApiModel summary);
    void invoiceApiUriSignalFull(OAIHttpRequestWorker *worker, OAIInvoiceUriApiModel summary);

    Q_DECL_DEPRECATED_X("Use apiInvoiceAllcategoriesGetSignalError() instead")
    void apiInvoiceAllcategoriesGetSignalE(OAIListResult_InvoiceCategoryApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiInvoiceAllcategoriesGetSignalError(OAIListResult_InvoiceCategoryApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiInvoiceDeletecategoryPostSignalError() instead")
    void apiInvoiceDeletecategoryPostSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiInvoiceDeletecategoryPostSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiInvoiceNewcategoryPostSignalError() instead")
    void apiInvoiceNewcategoryPostSignalE(OAIInvoiceCategoryApiModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiInvoiceNewcategoryPostSignalError(OAIInvoiceCategoryApiModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiInvoiceUpdatecategoryPostSignalError() instead")
    void apiInvoiceUpdatecategoryPostSignalE(OAIInvoiceCategoryApiModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiInvoiceUpdatecategoryPostSignalError(OAIInvoiceCategoryApiModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiAllSignalError() instead")
    void invoiceApiAllSignalE(OAIListResult_InvoiceDetailsApiModel_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiAllSignalError(OAIListResult_InvoiceDetailsApiModel_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiChangeStatusSignalError() instead")
    void invoiceApiChangeStatusSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiChangeStatusSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiDeleteSignalError() instead")
    void invoiceApiDeleteSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiDeleteSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiDetailsSignalError() instead")
    void invoiceApiDetailsSignalE(OAIInvoiceFullDetailsApiModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiDetailsSignalError(OAIInvoiceFullDetailsApiModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiNewSignalError() instead")
    void invoiceApiNewSignalE(OAIInvoiceFullDetailsApiModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiNewSignalError(OAIInvoiceFullDetailsApiModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiPdfSignalError() instead")
    void invoiceApiPdfSignalE(OAIInvoiceUriApiModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiPdfSignalError(OAIInvoiceUriApiModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiSendToAccountantSignalError() instead")
    void invoiceApiSendToAccountantSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiSendToAccountantSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiSendToClientSignalError() instead")
    void invoiceApiSendToClientSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiSendToClientSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiStatusSignalError() instead")
    void invoiceApiStatusSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiStatusSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiUpdateSignalError() instead")
    void invoiceApiUpdateSignalE(OAIInvoiceFullDetailsApiModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiUpdateSignalError(OAIInvoiceFullDetailsApiModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiUriSignalError() instead")
    void invoiceApiUriSignalE(OAIInvoiceUriApiModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiUriSignalError(OAIInvoiceUriApiModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiInvoiceAllcategoriesGetSignalErrorFull() instead")
    void apiInvoiceAllcategoriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiInvoiceAllcategoriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiInvoiceDeletecategoryPostSignalErrorFull() instead")
    void apiInvoiceDeletecategoryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiInvoiceDeletecategoryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiInvoiceNewcategoryPostSignalErrorFull() instead")
    void apiInvoiceNewcategoryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiInvoiceNewcategoryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiInvoiceUpdatecategoryPostSignalErrorFull() instead")
    void apiInvoiceUpdatecategoryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiInvoiceUpdatecategoryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiAllSignalErrorFull() instead")
    void invoiceApiAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiChangeStatusSignalErrorFull() instead")
    void invoiceApiChangeStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiChangeStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiDeleteSignalErrorFull() instead")
    void invoiceApiDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiDetailsSignalErrorFull() instead")
    void invoiceApiDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiNewSignalErrorFull() instead")
    void invoiceApiNewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiNewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiPdfSignalErrorFull() instead")
    void invoiceApiPdfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiPdfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiSendToAccountantSignalErrorFull() instead")
    void invoiceApiSendToAccountantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiSendToAccountantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiSendToClientSignalErrorFull() instead")
    void invoiceApiSendToClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiSendToClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiStatusSignalErrorFull() instead")
    void invoiceApiStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiUpdateSignalErrorFull() instead")
    void invoiceApiUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invoiceApiUriSignalErrorFull() instead")
    void invoiceApiUriSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceApiUriSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
