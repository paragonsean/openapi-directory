/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkTypeApi_H
#define OAI_OAIWorkTypeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIWorkTypeCreateApiModel.h"
#include "OAIWorkTypeDeleteApiModel.h"
#include "OAIWorkTypeDetailsApiModel.h"
#include "OAIWorkTypeUpdateApiModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkTypeApi : public QObject {
    Q_OBJECT

public:
    OAIWorkTypeApi(const int timeOut = 0);
    ~OAIWorkTypeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    */
    virtual void workTypeApiAll(const QString &x_auth_key, const QString &x_auth_secret);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_work_type_delete_api_model OAIWorkTypeDeleteApiModel [required]
    */
    virtual void workTypeApiDelete(const QString &x_auth_key, const QString &x_auth_secret, const OAIWorkTypeDeleteApiModel &oai_work_type_delete_api_model);

    /**
    * @param[in]  work_type_id qint32 [required]
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    */
    virtual void workTypeApiDetails(const qint32 &work_type_id, const QString &x_auth_key, const QString &x_auth_secret);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_work_type_create_api_model OAIWorkTypeCreateApiModel [required]
    */
    virtual void workTypeApiNew(const QString &x_auth_key, const QString &x_auth_secret, const OAIWorkTypeCreateApiModel &oai_work_type_create_api_model);

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  query_options_query QString [optional]
    * @param[in]  query_options_order_by QString [optional]
    * @param[in]  query_options_order QString [optional]
    * @param[in]  query_options_page qint32 [optional]
    * @param[in]  query_options_page_size qint32 [optional]
    */
    virtual void workTypeApiSearch(const QString &x_auth_key, const QString &x_auth_secret, const ::OpenAPI::OptionalParam<QString> &query_options_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query_options_order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query_options_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &query_options_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &query_options_page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_auth_key QString [required]
    * @param[in]  x_auth_secret QString [required]
    * @param[in]  oai_work_type_update_api_model OAIWorkTypeUpdateApiModel [required]
    */
    virtual void workTypeApiUpdate(const QString &x_auth_key, const QString &x_auth_secret, const OAIWorkTypeUpdateApiModel &oai_work_type_update_api_model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void workTypeApiAllCallback(OAIHttpRequestWorker *worker);
    void workTypeApiDeleteCallback(OAIHttpRequestWorker *worker);
    void workTypeApiDetailsCallback(OAIHttpRequestWorker *worker);
    void workTypeApiNewCallback(OAIHttpRequestWorker *worker);
    void workTypeApiSearchCallback(OAIHttpRequestWorker *worker);
    void workTypeApiUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void workTypeApiAllSignal(QList<OAIWorkTypeDetailsApiModel> summary);
    void workTypeApiDeleteSignal(qint32 summary);
    void workTypeApiDetailsSignal(OAIWorkTypeDetailsApiModel summary);
    void workTypeApiNewSignal(qint32 summary);
    void workTypeApiSearchSignal(QList<OAIWorkTypeDetailsApiModel> summary);
    void workTypeApiUpdateSignal();


    void workTypeApiAllSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorkTypeDetailsApiModel> summary);
    void workTypeApiDeleteSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void workTypeApiDetailsSignalFull(OAIHttpRequestWorker *worker, OAIWorkTypeDetailsApiModel summary);
    void workTypeApiNewSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void workTypeApiSearchSignalFull(OAIHttpRequestWorker *worker, QList<OAIWorkTypeDetailsApiModel> summary);
    void workTypeApiUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use workTypeApiAllSignalError() instead")
    void workTypeApiAllSignalE(QList<OAIWorkTypeDetailsApiModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypeApiAllSignalError(QList<OAIWorkTypeDetailsApiModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypeApiDeleteSignalError() instead")
    void workTypeApiDeleteSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypeApiDeleteSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypeApiDetailsSignalError() instead")
    void workTypeApiDetailsSignalE(OAIWorkTypeDetailsApiModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypeApiDetailsSignalError(OAIWorkTypeDetailsApiModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypeApiNewSignalError() instead")
    void workTypeApiNewSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypeApiNewSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypeApiSearchSignalError() instead")
    void workTypeApiSearchSignalE(QList<OAIWorkTypeDetailsApiModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypeApiSearchSignalError(QList<OAIWorkTypeDetailsApiModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypeApiUpdateSignalError() instead")
    void workTypeApiUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workTypeApiUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use workTypeApiAllSignalErrorFull() instead")
    void workTypeApiAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypeApiAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypeApiDeleteSignalErrorFull() instead")
    void workTypeApiDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypeApiDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypeApiDetailsSignalErrorFull() instead")
    void workTypeApiDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypeApiDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypeApiNewSignalErrorFull() instead")
    void workTypeApiNewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypeApiNewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypeApiSearchSignalErrorFull() instead")
    void workTypeApiSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypeApiSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workTypeApiUpdateSignalErrorFull() instead")
    void workTypeApiUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workTypeApiUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
