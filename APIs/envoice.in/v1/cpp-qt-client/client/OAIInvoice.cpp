/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoice::OAIInvoice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoice::OAIInvoice() {
    this->initializeModel();
}

OAIInvoice::~OAIInvoice() {}

void OAIInvoice::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_activities_isSet = false;
    m_activities_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_cloned_from_id_isSet = false;
    m_cloned_from_id_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_duedate_isSet = false;
    m_duedate_isValid = false;

    m_enable_partial_payments_isSet = false;
    m_enable_partial_payments_isValid = false;

    m_estimation_id_isSet = false;
    m_estimation_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invoice_category_id_isSet = false;
    m_invoice_category_id_isValid = false;

    m_is_digitally_signed_isSet = false;
    m_is_digitally_signed_isValid = false;

    m_issued_on_isSet = false;
    m_issued_on_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_payment_gateways_isSet = false;
    m_payment_gateways_isValid = false;

    m_payment_link_id_isSet = false;
    m_payment_link_id_isValid = false;

    m_payments_isSet = false;
    m_payments_isValid = false;

    m_po_number_isSet = false;
    m_po_number_isValid = false;

    m_recurring_profile_id_isSet = false;
    m_recurring_profile_id_isValid = false;

    m_should_send_reminders_isSet = false;
    m_should_send_reminders_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sub_total_amount_isSet = false;
    m_sub_total_amount_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIInvoice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoice::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("AccessToken")]);
    m_access_token_isSet = !json[QString("AccessToken")].isNull() && m_access_token_isValid;

    m_activities_isValid = ::OpenAPI::fromJsonValue(m_activities, json[QString("Activities")]);
    m_activities_isSet = !json[QString("Activities")].isNull() && m_activities_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("Attachments")]);
    m_attachments_isSet = !json[QString("Attachments")].isNull() && m_attachments_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("ClientId")]);
    m_client_id_isSet = !json[QString("ClientId")].isNull() && m_client_id_isValid;

    m_cloned_from_id_isValid = ::OpenAPI::fromJsonValue(m_cloned_from_id, json[QString("ClonedFromId")]);
    m_cloned_from_id_isSet = !json[QString("ClonedFromId")].isNull() && m_cloned_from_id_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("CurrencyId")]);
    m_currency_id_isSet = !json[QString("CurrencyId")].isNull() && m_currency_id_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("DiscountAmount")]);
    m_discount_amount_isSet = !json[QString("DiscountAmount")].isNull() && m_discount_amount_isValid;

    m_duedate_isValid = ::OpenAPI::fromJsonValue(m_duedate, json[QString("Duedate")]);
    m_duedate_isSet = !json[QString("Duedate")].isNull() && m_duedate_isValid;

    m_enable_partial_payments_isValid = ::OpenAPI::fromJsonValue(m_enable_partial_payments, json[QString("EnablePartialPayments")]);
    m_enable_partial_payments_isSet = !json[QString("EnablePartialPayments")].isNull() && m_enable_partial_payments_isValid;

    m_estimation_id_isValid = ::OpenAPI::fromJsonValue(m_estimation_id, json[QString("EstimationId")]);
    m_estimation_id_isSet = !json[QString("EstimationId")].isNull() && m_estimation_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_invoice_category_id_isValid = ::OpenAPI::fromJsonValue(m_invoice_category_id, json[QString("InvoiceCategoryId")]);
    m_invoice_category_id_isSet = !json[QString("InvoiceCategoryId")].isNull() && m_invoice_category_id_isValid;

    m_is_digitally_signed_isValid = ::OpenAPI::fromJsonValue(m_is_digitally_signed, json[QString("IsDigitallySigned")]);
    m_is_digitally_signed_isSet = !json[QString("IsDigitallySigned")].isNull() && m_is_digitally_signed_isValid;

    m_issued_on_isValid = ::OpenAPI::fromJsonValue(m_issued_on, json[QString("IssuedOn")]);
    m_issued_on_isSet = !json[QString("IssuedOn")].isNull() && m_issued_on_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("Items")]);
    m_items_isSet = !json[QString("Items")].isNull() && m_items_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("OrderId")]);
    m_order_id_isSet = !json[QString("OrderId")].isNull() && m_order_id_isValid;

    m_payment_gateways_isValid = ::OpenAPI::fromJsonValue(m_payment_gateways, json[QString("PaymentGateways")]);
    m_payment_gateways_isSet = !json[QString("PaymentGateways")].isNull() && m_payment_gateways_isValid;

    m_payment_link_id_isValid = ::OpenAPI::fromJsonValue(m_payment_link_id, json[QString("PaymentLinkId")]);
    m_payment_link_id_isSet = !json[QString("PaymentLinkId")].isNull() && m_payment_link_id_isValid;

    m_payments_isValid = ::OpenAPI::fromJsonValue(m_payments, json[QString("Payments")]);
    m_payments_isSet = !json[QString("Payments")].isNull() && m_payments_isValid;

    m_po_number_isValid = ::OpenAPI::fromJsonValue(m_po_number, json[QString("PoNumber")]);
    m_po_number_isSet = !json[QString("PoNumber")].isNull() && m_po_number_isValid;

    m_recurring_profile_id_isValid = ::OpenAPI::fromJsonValue(m_recurring_profile_id, json[QString("RecurringProfileId")]);
    m_recurring_profile_id_isSet = !json[QString("RecurringProfileId")].isNull() && m_recurring_profile_id_isValid;

    m_should_send_reminders_isValid = ::OpenAPI::fromJsonValue(m_should_send_reminders, json[QString("ShouldSendReminders")]);
    m_should_send_reminders_isSet = !json[QString("ShouldSendReminders")].isNull() && m_should_send_reminders_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_sub_total_amount_isValid = ::OpenAPI::fromJsonValue(m_sub_total_amount, json[QString("SubTotalAmount")]);
    m_sub_total_amount_isSet = !json[QString("SubTotalAmount")].isNull() && m_sub_total_amount_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("TaxAmount")]);
    m_tax_amount_isSet = !json[QString("TaxAmount")].isNull() && m_tax_amount_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("Terms")]);
    m_terms_isSet = !json[QString("Terms")].isNull() && m_terms_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("TotalAmount")]);
    m_total_amount_isSet = !json[QString("TotalAmount")].isNull() && m_total_amount_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;
}

QString OAIInvoice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoice::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("AccessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_activities.size() > 0) {
        obj.insert(QString("Activities"), ::OpenAPI::toJsonValue(m_activities));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("Attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("ClientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_cloned_from_id_isSet) {
        obj.insert(QString("ClonedFromId"), ::OpenAPI::toJsonValue(m_cloned_from_id));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("CurrencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_discount_amount_isSet) {
        obj.insert(QString("DiscountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_duedate_isSet) {
        obj.insert(QString("Duedate"), ::OpenAPI::toJsonValue(m_duedate));
    }
    if (m_enable_partial_payments_isSet) {
        obj.insert(QString("EnablePartialPayments"), ::OpenAPI::toJsonValue(m_enable_partial_payments));
    }
    if (m_estimation_id_isSet) {
        obj.insert(QString("EstimationId"), ::OpenAPI::toJsonValue(m_estimation_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invoice_category_id_isSet) {
        obj.insert(QString("InvoiceCategoryId"), ::OpenAPI::toJsonValue(m_invoice_category_id));
    }
    if (m_is_digitally_signed_isSet) {
        obj.insert(QString("IsDigitallySigned"), ::OpenAPI::toJsonValue(m_is_digitally_signed));
    }
    if (m_issued_on_isSet) {
        obj.insert(QString("IssuedOn"), ::OpenAPI::toJsonValue(m_issued_on));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("Items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("OrderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_payment_gateways.size() > 0) {
        obj.insert(QString("PaymentGateways"), ::OpenAPI::toJsonValue(m_payment_gateways));
    }
    if (m_payment_link_id_isSet) {
        obj.insert(QString("PaymentLinkId"), ::OpenAPI::toJsonValue(m_payment_link_id));
    }
    if (m_payments.size() > 0) {
        obj.insert(QString("Payments"), ::OpenAPI::toJsonValue(m_payments));
    }
    if (m_po_number_isSet) {
        obj.insert(QString("PoNumber"), ::OpenAPI::toJsonValue(m_po_number));
    }
    if (m_recurring_profile_id_isSet) {
        obj.insert(QString("RecurringProfileId"), ::OpenAPI::toJsonValue(m_recurring_profile_id));
    }
    if (m_should_send_reminders_isSet) {
        obj.insert(QString("ShouldSendReminders"), ::OpenAPI::toJsonValue(m_should_send_reminders));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sub_total_amount_isSet) {
        obj.insert(QString("SubTotalAmount"), ::OpenAPI::toJsonValue(m_sub_total_amount));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("TaxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_terms_isSet) {
        obj.insert(QString("Terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("TotalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIInvoice::getAccessToken() const {
    return m_access_token;
}
void OAIInvoice::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIInvoice::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIInvoice::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QList<OAIActivity> OAIInvoice::getActivities() const {
    return m_activities;
}
void OAIInvoice::setActivities(const QList<OAIActivity> &activities) {
    m_activities = activities;
    m_activities_isSet = true;
}

bool OAIInvoice::is_activities_Set() const{
    return m_activities_isSet;
}

bool OAIInvoice::is_activities_Valid() const{
    return m_activities_isValid;
}

QList<OAIInvoiceAttachment> OAIInvoice::getAttachments() const {
    return m_attachments;
}
void OAIInvoice::setAttachments(const QList<OAIInvoiceAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIInvoice::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIInvoice::is_attachments_Valid() const{
    return m_attachments_isValid;
}

qint32 OAIInvoice::getClientId() const {
    return m_client_id;
}
void OAIInvoice::setClientId(const qint32 &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIInvoice::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIInvoice::is_client_id_Valid() const{
    return m_client_id_isValid;
}

qint32 OAIInvoice::getClonedFromId() const {
    return m_cloned_from_id;
}
void OAIInvoice::setClonedFromId(const qint32 &cloned_from_id) {
    m_cloned_from_id = cloned_from_id;
    m_cloned_from_id_isSet = true;
}

bool OAIInvoice::is_cloned_from_id_Set() const{
    return m_cloned_from_id_isSet;
}

bool OAIInvoice::is_cloned_from_id_Valid() const{
    return m_cloned_from_id_isValid;
}

qint32 OAIInvoice::getCurrencyId() const {
    return m_currency_id;
}
void OAIInvoice::setCurrencyId(const qint32 &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAIInvoice::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAIInvoice::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

double OAIInvoice::getDiscountAmount() const {
    return m_discount_amount;
}
void OAIInvoice::setDiscountAmount(const double &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAIInvoice::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAIInvoice::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

QDateTime OAIInvoice::getDuedate() const {
    return m_duedate;
}
void OAIInvoice::setDuedate(const QDateTime &duedate) {
    m_duedate = duedate;
    m_duedate_isSet = true;
}

bool OAIInvoice::is_duedate_Set() const{
    return m_duedate_isSet;
}

bool OAIInvoice::is_duedate_Valid() const{
    return m_duedate_isValid;
}

bool OAIInvoice::isEnablePartialPayments() const {
    return m_enable_partial_payments;
}
void OAIInvoice::setEnablePartialPayments(const bool &enable_partial_payments) {
    m_enable_partial_payments = enable_partial_payments;
    m_enable_partial_payments_isSet = true;
}

bool OAIInvoice::is_enable_partial_payments_Set() const{
    return m_enable_partial_payments_isSet;
}

bool OAIInvoice::is_enable_partial_payments_Valid() const{
    return m_enable_partial_payments_isValid;
}

qint32 OAIInvoice::getEstimationId() const {
    return m_estimation_id;
}
void OAIInvoice::setEstimationId(const qint32 &estimation_id) {
    m_estimation_id = estimation_id;
    m_estimation_id_isSet = true;
}

bool OAIInvoice::is_estimation_id_Set() const{
    return m_estimation_id_isSet;
}

bool OAIInvoice::is_estimation_id_Valid() const{
    return m_estimation_id_isValid;
}

qint32 OAIInvoice::getId() const {
    return m_id;
}
void OAIInvoice::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInvoice::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInvoice::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIInvoice::getInvoiceCategoryId() const {
    return m_invoice_category_id;
}
void OAIInvoice::setInvoiceCategoryId(const qint32 &invoice_category_id) {
    m_invoice_category_id = invoice_category_id;
    m_invoice_category_id_isSet = true;
}

bool OAIInvoice::is_invoice_category_id_Set() const{
    return m_invoice_category_id_isSet;
}

bool OAIInvoice::is_invoice_category_id_Valid() const{
    return m_invoice_category_id_isValid;
}

bool OAIInvoice::isIsDigitallySigned() const {
    return m_is_digitally_signed;
}
void OAIInvoice::setIsDigitallySigned(const bool &is_digitally_signed) {
    m_is_digitally_signed = is_digitally_signed;
    m_is_digitally_signed_isSet = true;
}

bool OAIInvoice::is_is_digitally_signed_Set() const{
    return m_is_digitally_signed_isSet;
}

bool OAIInvoice::is_is_digitally_signed_Valid() const{
    return m_is_digitally_signed_isValid;
}

QDateTime OAIInvoice::getIssuedOn() const {
    return m_issued_on;
}
void OAIInvoice::setIssuedOn(const QDateTime &issued_on) {
    m_issued_on = issued_on;
    m_issued_on_isSet = true;
}

bool OAIInvoice::is_issued_on_Set() const{
    return m_issued_on_isSet;
}

bool OAIInvoice::is_issued_on_Valid() const{
    return m_issued_on_isValid;
}

QList<OAIInvoiceItem> OAIInvoice::getItems() const {
    return m_items;
}
void OAIInvoice::setItems(const QList<OAIInvoiceItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIInvoice::is_items_Set() const{
    return m_items_isSet;
}

bool OAIInvoice::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIInvoice::getNotes() const {
    return m_notes;
}
void OAIInvoice::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIInvoice::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIInvoice::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIInvoice::getNumber() const {
    return m_number;
}
void OAIInvoice::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIInvoice::is_number_Set() const{
    return m_number_isSet;
}

bool OAIInvoice::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIInvoice::getOrderId() const {
    return m_order_id;
}
void OAIInvoice::setOrderId(const qint32 &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIInvoice::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIInvoice::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QList<OAIPaymentGatewayForInvoice> OAIInvoice::getPaymentGateways() const {
    return m_payment_gateways;
}
void OAIInvoice::setPaymentGateways(const QList<OAIPaymentGatewayForInvoice> &payment_gateways) {
    m_payment_gateways = payment_gateways;
    m_payment_gateways_isSet = true;
}

bool OAIInvoice::is_payment_gateways_Set() const{
    return m_payment_gateways_isSet;
}

bool OAIInvoice::is_payment_gateways_Valid() const{
    return m_payment_gateways_isValid;
}

qint32 OAIInvoice::getPaymentLinkId() const {
    return m_payment_link_id;
}
void OAIInvoice::setPaymentLinkId(const qint32 &payment_link_id) {
    m_payment_link_id = payment_link_id;
    m_payment_link_id_isSet = true;
}

bool OAIInvoice::is_payment_link_id_Set() const{
    return m_payment_link_id_isSet;
}

bool OAIInvoice::is_payment_link_id_Valid() const{
    return m_payment_link_id_isValid;
}

QList<OAIPayment> OAIInvoice::getPayments() const {
    return m_payments;
}
void OAIInvoice::setPayments(const QList<OAIPayment> &payments) {
    m_payments = payments;
    m_payments_isSet = true;
}

bool OAIInvoice::is_payments_Set() const{
    return m_payments_isSet;
}

bool OAIInvoice::is_payments_Valid() const{
    return m_payments_isValid;
}

QString OAIInvoice::getPoNumber() const {
    return m_po_number;
}
void OAIInvoice::setPoNumber(const QString &po_number) {
    m_po_number = po_number;
    m_po_number_isSet = true;
}

bool OAIInvoice::is_po_number_Set() const{
    return m_po_number_isSet;
}

bool OAIInvoice::is_po_number_Valid() const{
    return m_po_number_isValid;
}

qint32 OAIInvoice::getRecurringProfileId() const {
    return m_recurring_profile_id;
}
void OAIInvoice::setRecurringProfileId(const qint32 &recurring_profile_id) {
    m_recurring_profile_id = recurring_profile_id;
    m_recurring_profile_id_isSet = true;
}

bool OAIInvoice::is_recurring_profile_id_Set() const{
    return m_recurring_profile_id_isSet;
}

bool OAIInvoice::is_recurring_profile_id_Valid() const{
    return m_recurring_profile_id_isValid;
}

bool OAIInvoice::isShouldSendReminders() const {
    return m_should_send_reminders;
}
void OAIInvoice::setShouldSendReminders(const bool &should_send_reminders) {
    m_should_send_reminders = should_send_reminders;
    m_should_send_reminders_isSet = true;
}

bool OAIInvoice::is_should_send_reminders_Set() const{
    return m_should_send_reminders_isSet;
}

bool OAIInvoice::is_should_send_reminders_Valid() const{
    return m_should_send_reminders_isValid;
}

QString OAIInvoice::getStatus() const {
    return m_status;
}
void OAIInvoice::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInvoice::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInvoice::is_status_Valid() const{
    return m_status_isValid;
}

double OAIInvoice::getSubTotalAmount() const {
    return m_sub_total_amount;
}
void OAIInvoice::setSubTotalAmount(const double &sub_total_amount) {
    m_sub_total_amount = sub_total_amount;
    m_sub_total_amount_isSet = true;
}

bool OAIInvoice::is_sub_total_amount_Set() const{
    return m_sub_total_amount_isSet;
}

bool OAIInvoice::is_sub_total_amount_Valid() const{
    return m_sub_total_amount_isValid;
}

double OAIInvoice::getTaxAmount() const {
    return m_tax_amount;
}
void OAIInvoice::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAIInvoice::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAIInvoice::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

QString OAIInvoice::getTerms() const {
    return m_terms;
}
void OAIInvoice::setTerms(const QString &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAIInvoice::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAIInvoice::is_terms_Valid() const{
    return m_terms_isValid;
}

double OAIInvoice::getTotalAmount() const {
    return m_total_amount;
}
void OAIInvoice::setTotalAmount(const double &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIInvoice::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIInvoice::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

qint32 OAIInvoice::getUserId() const {
    return m_user_id;
}
void OAIInvoice::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIInvoice::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIInvoice::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIInvoice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloned_from_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duedate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_partial_payments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_digitally_signed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issued_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_gateways.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_link_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_should_send_reminders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
