/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserSettings::OAIUserSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserSettings::OAIUserSettings() {
    this->initializeModel();
}

OAIUserSettings::~OAIUserSettings() {}

void OAIUserSettings::initializeModel() {

    m_accountant_email_isSet = false;
    m_accountant_email_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_api_secret_isSet = false;
    m_api_secret_isValid = false;

    m_background_image_isSet = false;
    m_background_image_isValid = false;

    m_bank_isSet = false;
    m_bank_isValid = false;

    m_bank_account_isSet = false;
    m_bank_account_isValid = false;

    m_cname_isSet = false;
    m_cname_isValid = false;

    m_company_registration_number_isSet = false;
    m_company_registration_number_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_id_isSet = false;
    m_country_id_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_currency_symbol_isSet = false;
    m_currency_symbol_isValid = false;

    m_default_date_format_isSet = false;
    m_default_date_format_isValid = false;

    m_default_due_date_in_days_isSet = false;
    m_default_due_date_in_days_isValid = false;

    m_do_not_track_isSet = false;
    m_do_not_track_isValid = false;

    m_enable_client_portal_isSet = false;
    m_enable_client_portal_isValid = false;

    m_enable_predictive_invoicing_isSet = false;
    m_enable_predictive_invoicing_isValid = false;

    m_enable_recurring_invoicing_isSet = false;
    m_enable_recurring_invoicing_isValid = false;

    m_has_invoice_logo_isSet = false;
    m_has_invoice_logo_isValid = false;

    m_iban_isSet = false;
    m_iban_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invoice_template_isSet = false;
    m_invoice_template_isValid = false;

    m_invoice_template_color_hex_isSet = false;
    m_invoice_template_color_hex_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_profession_isSet = false;
    m_profession_isValid = false;

    m_receive_sms_notifications_isSet = false;
    m_receive_sms_notifications_isValid = false;

    m_referral_program_isSet = false;
    m_referral_program_isValid = false;

    m_store_checkout_fields_isSet = false;
    m_store_checkout_fields_isValid = false;

    m_store_color_hex_isSet = false;
    m_store_color_hex_isValid = false;

    m_store_currency_isSet = false;
    m_store_currency_isValid = false;

    m_store_currency_id_isSet = false;
    m_store_currency_id_isValid = false;

    m_store_custom_java_script_isSet = false;
    m_store_custom_java_script_isValid = false;

    m_store_description_isSet = false;
    m_store_description_isValid = false;

    m_store_email_isSet = false;
    m_store_email_isValid = false;

    m_store_language_isSet = false;
    m_store_language_isValid = false;

    m_store_language_id_isSet = false;
    m_store_language_id_isValid = false;

    m_store_name_isSet = false;
    m_store_name_isValid = false;

    m_store_purchase_email_message_isSet = false;
    m_store_purchase_email_message_isValid = false;

    m_store_purchase_thank_you_message_isSet = false;
    m_store_purchase_thank_you_message_isValid = false;

    m_store_text_color_hex_isSet = false;
    m_store_text_color_hex_isValid = false;

    m_store_url_isSet = false;
    m_store_url_isValid = false;

    m_subscribe_to_product_emails_isSet = false;
    m_subscribe_to_product_emails_isValid = false;

    m_swift_isSet = false;
    m_swift_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_signature_isSet = false;
    m_user_signature_isValid = false;

    m_vat_number_isSet = false;
    m_vat_number_isValid = false;

    m_years_of_experience_isSet = false;
    m_years_of_experience_isValid = false;
}

void OAIUserSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserSettings::fromJsonObject(QJsonObject json) {

    m_accountant_email_isValid = ::OpenAPI::fromJsonValue(m_accountant_email, json[QString("AccountantEmail")]);
    m_accountant_email_isSet = !json[QString("AccountantEmail")].isNull() && m_accountant_email_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("ApiKey")]);
    m_api_key_isSet = !json[QString("ApiKey")].isNull() && m_api_key_isValid;

    m_api_secret_isValid = ::OpenAPI::fromJsonValue(m_api_secret, json[QString("ApiSecret")]);
    m_api_secret_isSet = !json[QString("ApiSecret")].isNull() && m_api_secret_isValid;

    m_background_image_isValid = ::OpenAPI::fromJsonValue(m_background_image, json[QString("BackgroundImage")]);
    m_background_image_isSet = !json[QString("BackgroundImage")].isNull() && m_background_image_isValid;

    m_bank_isValid = ::OpenAPI::fromJsonValue(m_bank, json[QString("Bank")]);
    m_bank_isSet = !json[QString("Bank")].isNull() && m_bank_isValid;

    m_bank_account_isValid = ::OpenAPI::fromJsonValue(m_bank_account, json[QString("BankAccount")]);
    m_bank_account_isSet = !json[QString("BankAccount")].isNull() && m_bank_account_isValid;

    m_cname_isValid = ::OpenAPI::fromJsonValue(m_cname, json[QString("Cname")]);
    m_cname_isSet = !json[QString("Cname")].isNull() && m_cname_isValid;

    m_company_registration_number_isValid = ::OpenAPI::fromJsonValue(m_company_registration_number, json[QString("CompanyRegistrationNumber")]);
    m_company_registration_number_isSet = !json[QString("CompanyRegistrationNumber")].isNull() && m_company_registration_number_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_country_id_isValid = ::OpenAPI::fromJsonValue(m_country_id, json[QString("CountryId")]);
    m_country_id_isSet = !json[QString("CountryId")].isNull() && m_country_id_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("Currency")]);
    m_currency_isSet = !json[QString("Currency")].isNull() && m_currency_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("CurrencyId")]);
    m_currency_id_isSet = !json[QString("CurrencyId")].isNull() && m_currency_id_isValid;

    m_currency_symbol_isValid = ::OpenAPI::fromJsonValue(m_currency_symbol, json[QString("CurrencySymbol")]);
    m_currency_symbol_isSet = !json[QString("CurrencySymbol")].isNull() && m_currency_symbol_isValid;

    m_default_date_format_isValid = ::OpenAPI::fromJsonValue(m_default_date_format, json[QString("DefaultDateFormat")]);
    m_default_date_format_isSet = !json[QString("DefaultDateFormat")].isNull() && m_default_date_format_isValid;

    m_default_due_date_in_days_isValid = ::OpenAPI::fromJsonValue(m_default_due_date_in_days, json[QString("DefaultDueDateInDays")]);
    m_default_due_date_in_days_isSet = !json[QString("DefaultDueDateInDays")].isNull() && m_default_due_date_in_days_isValid;

    m_do_not_track_isValid = ::OpenAPI::fromJsonValue(m_do_not_track, json[QString("DoNotTrack")]);
    m_do_not_track_isSet = !json[QString("DoNotTrack")].isNull() && m_do_not_track_isValid;

    m_enable_client_portal_isValid = ::OpenAPI::fromJsonValue(m_enable_client_portal, json[QString("EnableClientPortal")]);
    m_enable_client_portal_isSet = !json[QString("EnableClientPortal")].isNull() && m_enable_client_portal_isValid;

    m_enable_predictive_invoicing_isValid = ::OpenAPI::fromJsonValue(m_enable_predictive_invoicing, json[QString("EnablePredictiveInvoicing")]);
    m_enable_predictive_invoicing_isSet = !json[QString("EnablePredictiveInvoicing")].isNull() && m_enable_predictive_invoicing_isValid;

    m_enable_recurring_invoicing_isValid = ::OpenAPI::fromJsonValue(m_enable_recurring_invoicing, json[QString("EnableRecurringInvoicing")]);
    m_enable_recurring_invoicing_isSet = !json[QString("EnableRecurringInvoicing")].isNull() && m_enable_recurring_invoicing_isValid;

    m_has_invoice_logo_isValid = ::OpenAPI::fromJsonValue(m_has_invoice_logo, json[QString("HasInvoiceLogo")]);
    m_has_invoice_logo_isSet = !json[QString("HasInvoiceLogo")].isNull() && m_has_invoice_logo_isValid;

    m_iban_isValid = ::OpenAPI::fromJsonValue(m_iban, json[QString("Iban")]);
    m_iban_isSet = !json[QString("Iban")].isNull() && m_iban_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_invoice_template_isValid = ::OpenAPI::fromJsonValue(m_invoice_template, json[QString("InvoiceTemplate")]);
    m_invoice_template_isSet = !json[QString("InvoiceTemplate")].isNull() && m_invoice_template_isValid;

    m_invoice_template_color_hex_isValid = ::OpenAPI::fromJsonValue(m_invoice_template_color_hex, json[QString("InvoiceTemplateColorHex")]);
    m_invoice_template_color_hex_isSet = !json[QString("InvoiceTemplateColorHex")].isNull() && m_invoice_template_color_hex_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("PhoneNumber")]);
    m_phone_number_isSet = !json[QString("PhoneNumber")].isNull() && m_phone_number_isValid;

    m_profession_isValid = ::OpenAPI::fromJsonValue(m_profession, json[QString("Profession")]);
    m_profession_isSet = !json[QString("Profession")].isNull() && m_profession_isValid;

    m_receive_sms_notifications_isValid = ::OpenAPI::fromJsonValue(m_receive_sms_notifications, json[QString("ReceiveSmsNotifications")]);
    m_receive_sms_notifications_isSet = !json[QString("ReceiveSmsNotifications")].isNull() && m_receive_sms_notifications_isValid;

    m_referral_program_isValid = ::OpenAPI::fromJsonValue(m_referral_program, json[QString("ReferralProgram")]);
    m_referral_program_isSet = !json[QString("ReferralProgram")].isNull() && m_referral_program_isValid;

    m_store_checkout_fields_isValid = ::OpenAPI::fromJsonValue(m_store_checkout_fields, json[QString("StoreCheckoutFields")]);
    m_store_checkout_fields_isSet = !json[QString("StoreCheckoutFields")].isNull() && m_store_checkout_fields_isValid;

    m_store_color_hex_isValid = ::OpenAPI::fromJsonValue(m_store_color_hex, json[QString("StoreColorHex")]);
    m_store_color_hex_isSet = !json[QString("StoreColorHex")].isNull() && m_store_color_hex_isValid;

    m_store_currency_isValid = ::OpenAPI::fromJsonValue(m_store_currency, json[QString("StoreCurrency")]);
    m_store_currency_isSet = !json[QString("StoreCurrency")].isNull() && m_store_currency_isValid;

    m_store_currency_id_isValid = ::OpenAPI::fromJsonValue(m_store_currency_id, json[QString("StoreCurrencyId")]);
    m_store_currency_id_isSet = !json[QString("StoreCurrencyId")].isNull() && m_store_currency_id_isValid;

    m_store_custom_java_script_isValid = ::OpenAPI::fromJsonValue(m_store_custom_java_script, json[QString("StoreCustomJavaScript")]);
    m_store_custom_java_script_isSet = !json[QString("StoreCustomJavaScript")].isNull() && m_store_custom_java_script_isValid;

    m_store_description_isValid = ::OpenAPI::fromJsonValue(m_store_description, json[QString("StoreDescription")]);
    m_store_description_isSet = !json[QString("StoreDescription")].isNull() && m_store_description_isValid;

    m_store_email_isValid = ::OpenAPI::fromJsonValue(m_store_email, json[QString("StoreEmail")]);
    m_store_email_isSet = !json[QString("StoreEmail")].isNull() && m_store_email_isValid;

    m_store_language_isValid = ::OpenAPI::fromJsonValue(m_store_language, json[QString("StoreLanguage")]);
    m_store_language_isSet = !json[QString("StoreLanguage")].isNull() && m_store_language_isValid;

    m_store_language_id_isValid = ::OpenAPI::fromJsonValue(m_store_language_id, json[QString("StoreLanguageId")]);
    m_store_language_id_isSet = !json[QString("StoreLanguageId")].isNull() && m_store_language_id_isValid;

    m_store_name_isValid = ::OpenAPI::fromJsonValue(m_store_name, json[QString("StoreName")]);
    m_store_name_isSet = !json[QString("StoreName")].isNull() && m_store_name_isValid;

    m_store_purchase_email_message_isValid = ::OpenAPI::fromJsonValue(m_store_purchase_email_message, json[QString("StorePurchaseEmailMessage")]);
    m_store_purchase_email_message_isSet = !json[QString("StorePurchaseEmailMessage")].isNull() && m_store_purchase_email_message_isValid;

    m_store_purchase_thank_you_message_isValid = ::OpenAPI::fromJsonValue(m_store_purchase_thank_you_message, json[QString("StorePurchaseThankYouMessage")]);
    m_store_purchase_thank_you_message_isSet = !json[QString("StorePurchaseThankYouMessage")].isNull() && m_store_purchase_thank_you_message_isValid;

    m_store_text_color_hex_isValid = ::OpenAPI::fromJsonValue(m_store_text_color_hex, json[QString("StoreTextColorHex")]);
    m_store_text_color_hex_isSet = !json[QString("StoreTextColorHex")].isNull() && m_store_text_color_hex_isValid;

    m_store_url_isValid = ::OpenAPI::fromJsonValue(m_store_url, json[QString("StoreUrl")]);
    m_store_url_isSet = !json[QString("StoreUrl")].isNull() && m_store_url_isValid;

    m_subscribe_to_product_emails_isValid = ::OpenAPI::fromJsonValue(m_subscribe_to_product_emails, json[QString("SubscribeToProductEmails")]);
    m_subscribe_to_product_emails_isSet = !json[QString("SubscribeToProductEmails")].isNull() && m_subscribe_to_product_emails_isValid;

    m_swift_isValid = ::OpenAPI::fromJsonValue(m_swift, json[QString("Swift")]);
    m_swift_isSet = !json[QString("Swift")].isNull() && m_swift_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("Terms")]);
    m_terms_isSet = !json[QString("Terms")].isNull() && m_terms_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;

    m_user_signature_isValid = ::OpenAPI::fromJsonValue(m_user_signature, json[QString("UserSignature")]);
    m_user_signature_isSet = !json[QString("UserSignature")].isNull() && m_user_signature_isValid;

    m_vat_number_isValid = ::OpenAPI::fromJsonValue(m_vat_number, json[QString("VatNumber")]);
    m_vat_number_isSet = !json[QString("VatNumber")].isNull() && m_vat_number_isValid;

    m_years_of_experience_isValid = ::OpenAPI::fromJsonValue(m_years_of_experience, json[QString("YearsOfExperience")]);
    m_years_of_experience_isSet = !json[QString("YearsOfExperience")].isNull() && m_years_of_experience_isValid;
}

QString OAIUserSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_accountant_email_isSet) {
        obj.insert(QString("AccountantEmail"), ::OpenAPI::toJsonValue(m_accountant_email));
    }
    if (m_address_isSet) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_api_key_isSet) {
        obj.insert(QString("ApiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_api_secret_isSet) {
        obj.insert(QString("ApiSecret"), ::OpenAPI::toJsonValue(m_api_secret));
    }
    if (m_background_image_isSet) {
        obj.insert(QString("BackgroundImage"), ::OpenAPI::toJsonValue(m_background_image));
    }
    if (m_bank_isSet) {
        obj.insert(QString("Bank"), ::OpenAPI::toJsonValue(m_bank));
    }
    if (m_bank_account_isSet) {
        obj.insert(QString("BankAccount"), ::OpenAPI::toJsonValue(m_bank_account));
    }
    if (m_cname_isSet) {
        obj.insert(QString("Cname"), ::OpenAPI::toJsonValue(m_cname));
    }
    if (m_company_registration_number_isSet) {
        obj.insert(QString("CompanyRegistrationNumber"), ::OpenAPI::toJsonValue(m_company_registration_number));
    }
    if (m_country.isSet()) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_id_isSet) {
        obj.insert(QString("CountryId"), ::OpenAPI::toJsonValue(m_country_id));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("Currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("CurrencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_currency_symbol_isSet) {
        obj.insert(QString("CurrencySymbol"), ::OpenAPI::toJsonValue(m_currency_symbol));
    }
    if (m_default_date_format_isSet) {
        obj.insert(QString("DefaultDateFormat"), ::OpenAPI::toJsonValue(m_default_date_format));
    }
    if (m_default_due_date_in_days_isSet) {
        obj.insert(QString("DefaultDueDateInDays"), ::OpenAPI::toJsonValue(m_default_due_date_in_days));
    }
    if (m_do_not_track_isSet) {
        obj.insert(QString("DoNotTrack"), ::OpenAPI::toJsonValue(m_do_not_track));
    }
    if (m_enable_client_portal_isSet) {
        obj.insert(QString("EnableClientPortal"), ::OpenAPI::toJsonValue(m_enable_client_portal));
    }
    if (m_enable_predictive_invoicing_isSet) {
        obj.insert(QString("EnablePredictiveInvoicing"), ::OpenAPI::toJsonValue(m_enable_predictive_invoicing));
    }
    if (m_enable_recurring_invoicing_isSet) {
        obj.insert(QString("EnableRecurringInvoicing"), ::OpenAPI::toJsonValue(m_enable_recurring_invoicing));
    }
    if (m_has_invoice_logo_isSet) {
        obj.insert(QString("HasInvoiceLogo"), ::OpenAPI::toJsonValue(m_has_invoice_logo));
    }
    if (m_iban_isSet) {
        obj.insert(QString("Iban"), ::OpenAPI::toJsonValue(m_iban));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invoice_template_isSet) {
        obj.insert(QString("InvoiceTemplate"), ::OpenAPI::toJsonValue(m_invoice_template));
    }
    if (m_invoice_template_color_hex_isSet) {
        obj.insert(QString("InvoiceTemplateColorHex"), ::OpenAPI::toJsonValue(m_invoice_template_color_hex));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("PhoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_profession_isSet) {
        obj.insert(QString("Profession"), ::OpenAPI::toJsonValue(m_profession));
    }
    if (m_receive_sms_notifications_isSet) {
        obj.insert(QString("ReceiveSmsNotifications"), ::OpenAPI::toJsonValue(m_receive_sms_notifications));
    }
    if (m_referral_program_isSet) {
        obj.insert(QString("ReferralProgram"), ::OpenAPI::toJsonValue(m_referral_program));
    }
    if (m_store_checkout_fields_isSet) {
        obj.insert(QString("StoreCheckoutFields"), ::OpenAPI::toJsonValue(m_store_checkout_fields));
    }
    if (m_store_color_hex_isSet) {
        obj.insert(QString("StoreColorHex"), ::OpenAPI::toJsonValue(m_store_color_hex));
    }
    if (m_store_currency.isSet()) {
        obj.insert(QString("StoreCurrency"), ::OpenAPI::toJsonValue(m_store_currency));
    }
    if (m_store_currency_id_isSet) {
        obj.insert(QString("StoreCurrencyId"), ::OpenAPI::toJsonValue(m_store_currency_id));
    }
    if (m_store_custom_java_script_isSet) {
        obj.insert(QString("StoreCustomJavaScript"), ::OpenAPI::toJsonValue(m_store_custom_java_script));
    }
    if (m_store_description_isSet) {
        obj.insert(QString("StoreDescription"), ::OpenAPI::toJsonValue(m_store_description));
    }
    if (m_store_email_isSet) {
        obj.insert(QString("StoreEmail"), ::OpenAPI::toJsonValue(m_store_email));
    }
    if (m_store_language.isSet()) {
        obj.insert(QString("StoreLanguage"), ::OpenAPI::toJsonValue(m_store_language));
    }
    if (m_store_language_id_isSet) {
        obj.insert(QString("StoreLanguageId"), ::OpenAPI::toJsonValue(m_store_language_id));
    }
    if (m_store_name_isSet) {
        obj.insert(QString("StoreName"), ::OpenAPI::toJsonValue(m_store_name));
    }
    if (m_store_purchase_email_message_isSet) {
        obj.insert(QString("StorePurchaseEmailMessage"), ::OpenAPI::toJsonValue(m_store_purchase_email_message));
    }
    if (m_store_purchase_thank_you_message_isSet) {
        obj.insert(QString("StorePurchaseThankYouMessage"), ::OpenAPI::toJsonValue(m_store_purchase_thank_you_message));
    }
    if (m_store_text_color_hex_isSet) {
        obj.insert(QString("StoreTextColorHex"), ::OpenAPI::toJsonValue(m_store_text_color_hex));
    }
    if (m_store_url_isSet) {
        obj.insert(QString("StoreUrl"), ::OpenAPI::toJsonValue(m_store_url));
    }
    if (m_subscribe_to_product_emails_isSet) {
        obj.insert(QString("SubscribeToProductEmails"), ::OpenAPI::toJsonValue(m_subscribe_to_product_emails));
    }
    if (m_swift_isSet) {
        obj.insert(QString("Swift"), ::OpenAPI::toJsonValue(m_swift));
    }
    if (m_terms_isSet) {
        obj.insert(QString("Terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_signature_isSet) {
        obj.insert(QString("UserSignature"), ::OpenAPI::toJsonValue(m_user_signature));
    }
    if (m_vat_number_isSet) {
        obj.insert(QString("VatNumber"), ::OpenAPI::toJsonValue(m_vat_number));
    }
    if (m_years_of_experience_isSet) {
        obj.insert(QString("YearsOfExperience"), ::OpenAPI::toJsonValue(m_years_of_experience));
    }
    return obj;
}

QString OAIUserSettings::getAccountantEmail() const {
    return m_accountant_email;
}
void OAIUserSettings::setAccountantEmail(const QString &accountant_email) {
    m_accountant_email = accountant_email;
    m_accountant_email_isSet = true;
}

bool OAIUserSettings::is_accountant_email_Set() const{
    return m_accountant_email_isSet;
}

bool OAIUserSettings::is_accountant_email_Valid() const{
    return m_accountant_email_isValid;
}

QString OAIUserSettings::getAddress() const {
    return m_address;
}
void OAIUserSettings::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIUserSettings::is_address_Set() const{
    return m_address_isSet;
}

bool OAIUserSettings::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIUserSettings::getApiKey() const {
    return m_api_key;
}
void OAIUserSettings::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIUserSettings::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIUserSettings::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIUserSettings::getApiSecret() const {
    return m_api_secret;
}
void OAIUserSettings::setApiSecret(const QString &api_secret) {
    m_api_secret = api_secret;
    m_api_secret_isSet = true;
}

bool OAIUserSettings::is_api_secret_Set() const{
    return m_api_secret_isSet;
}

bool OAIUserSettings::is_api_secret_Valid() const{
    return m_api_secret_isValid;
}

QString OAIUserSettings::getBackgroundImage() const {
    return m_background_image;
}
void OAIUserSettings::setBackgroundImage(const QString &background_image) {
    m_background_image = background_image;
    m_background_image_isSet = true;
}

bool OAIUserSettings::is_background_image_Set() const{
    return m_background_image_isSet;
}

bool OAIUserSettings::is_background_image_Valid() const{
    return m_background_image_isValid;
}

QString OAIUserSettings::getBank() const {
    return m_bank;
}
void OAIUserSettings::setBank(const QString &bank) {
    m_bank = bank;
    m_bank_isSet = true;
}

bool OAIUserSettings::is_bank_Set() const{
    return m_bank_isSet;
}

bool OAIUserSettings::is_bank_Valid() const{
    return m_bank_isValid;
}

QString OAIUserSettings::getBankAccount() const {
    return m_bank_account;
}
void OAIUserSettings::setBankAccount(const QString &bank_account) {
    m_bank_account = bank_account;
    m_bank_account_isSet = true;
}

bool OAIUserSettings::is_bank_account_Set() const{
    return m_bank_account_isSet;
}

bool OAIUserSettings::is_bank_account_Valid() const{
    return m_bank_account_isValid;
}

QString OAIUserSettings::getCname() const {
    return m_cname;
}
void OAIUserSettings::setCname(const QString &cname) {
    m_cname = cname;
    m_cname_isSet = true;
}

bool OAIUserSettings::is_cname_Set() const{
    return m_cname_isSet;
}

bool OAIUserSettings::is_cname_Valid() const{
    return m_cname_isValid;
}

QString OAIUserSettings::getCompanyRegistrationNumber() const {
    return m_company_registration_number;
}
void OAIUserSettings::setCompanyRegistrationNumber(const QString &company_registration_number) {
    m_company_registration_number = company_registration_number;
    m_company_registration_number_isSet = true;
}

bool OAIUserSettings::is_company_registration_number_Set() const{
    return m_company_registration_number_isSet;
}

bool OAIUserSettings::is_company_registration_number_Valid() const{
    return m_company_registration_number_isValid;
}

OAICountry OAIUserSettings::getCountry() const {
    return m_country;
}
void OAIUserSettings::setCountry(const OAICountry &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIUserSettings::is_country_Set() const{
    return m_country_isSet;
}

bool OAIUserSettings::is_country_Valid() const{
    return m_country_isValid;
}

qint32 OAIUserSettings::getCountryId() const {
    return m_country_id;
}
void OAIUserSettings::setCountryId(const qint32 &country_id) {
    m_country_id = country_id;
    m_country_id_isSet = true;
}

bool OAIUserSettings::is_country_id_Set() const{
    return m_country_id_isSet;
}

bool OAIUserSettings::is_country_id_Valid() const{
    return m_country_id_isValid;
}

OAICurrency OAIUserSettings::getCurrency() const {
    return m_currency;
}
void OAIUserSettings::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIUserSettings::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIUserSettings::is_currency_Valid() const{
    return m_currency_isValid;
}

qint32 OAIUserSettings::getCurrencyId() const {
    return m_currency_id;
}
void OAIUserSettings::setCurrencyId(const qint32 &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAIUserSettings::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAIUserSettings::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

QString OAIUserSettings::getCurrencySymbol() const {
    return m_currency_symbol;
}
void OAIUserSettings::setCurrencySymbol(const QString &currency_symbol) {
    m_currency_symbol = currency_symbol;
    m_currency_symbol_isSet = true;
}

bool OAIUserSettings::is_currency_symbol_Set() const{
    return m_currency_symbol_isSet;
}

bool OAIUserSettings::is_currency_symbol_Valid() const{
    return m_currency_symbol_isValid;
}

QString OAIUserSettings::getDefaultDateFormat() const {
    return m_default_date_format;
}
void OAIUserSettings::setDefaultDateFormat(const QString &default_date_format) {
    m_default_date_format = default_date_format;
    m_default_date_format_isSet = true;
}

bool OAIUserSettings::is_default_date_format_Set() const{
    return m_default_date_format_isSet;
}

bool OAIUserSettings::is_default_date_format_Valid() const{
    return m_default_date_format_isValid;
}

qint32 OAIUserSettings::getDefaultDueDateInDays() const {
    return m_default_due_date_in_days;
}
void OAIUserSettings::setDefaultDueDateInDays(const qint32 &default_due_date_in_days) {
    m_default_due_date_in_days = default_due_date_in_days;
    m_default_due_date_in_days_isSet = true;
}

bool OAIUserSettings::is_default_due_date_in_days_Set() const{
    return m_default_due_date_in_days_isSet;
}

bool OAIUserSettings::is_default_due_date_in_days_Valid() const{
    return m_default_due_date_in_days_isValid;
}

bool OAIUserSettings::isDoNotTrack() const {
    return m_do_not_track;
}
void OAIUserSettings::setDoNotTrack(const bool &do_not_track) {
    m_do_not_track = do_not_track;
    m_do_not_track_isSet = true;
}

bool OAIUserSettings::is_do_not_track_Set() const{
    return m_do_not_track_isSet;
}

bool OAIUserSettings::is_do_not_track_Valid() const{
    return m_do_not_track_isValid;
}

bool OAIUserSettings::isEnableClientPortal() const {
    return m_enable_client_portal;
}
void OAIUserSettings::setEnableClientPortal(const bool &enable_client_portal) {
    m_enable_client_portal = enable_client_portal;
    m_enable_client_portal_isSet = true;
}

bool OAIUserSettings::is_enable_client_portal_Set() const{
    return m_enable_client_portal_isSet;
}

bool OAIUserSettings::is_enable_client_portal_Valid() const{
    return m_enable_client_portal_isValid;
}

bool OAIUserSettings::isEnablePredictiveInvoicing() const {
    return m_enable_predictive_invoicing;
}
void OAIUserSettings::setEnablePredictiveInvoicing(const bool &enable_predictive_invoicing) {
    m_enable_predictive_invoicing = enable_predictive_invoicing;
    m_enable_predictive_invoicing_isSet = true;
}

bool OAIUserSettings::is_enable_predictive_invoicing_Set() const{
    return m_enable_predictive_invoicing_isSet;
}

bool OAIUserSettings::is_enable_predictive_invoicing_Valid() const{
    return m_enable_predictive_invoicing_isValid;
}

bool OAIUserSettings::isEnableRecurringInvoicing() const {
    return m_enable_recurring_invoicing;
}
void OAIUserSettings::setEnableRecurringInvoicing(const bool &enable_recurring_invoicing) {
    m_enable_recurring_invoicing = enable_recurring_invoicing;
    m_enable_recurring_invoicing_isSet = true;
}

bool OAIUserSettings::is_enable_recurring_invoicing_Set() const{
    return m_enable_recurring_invoicing_isSet;
}

bool OAIUserSettings::is_enable_recurring_invoicing_Valid() const{
    return m_enable_recurring_invoicing_isValid;
}

bool OAIUserSettings::isHasInvoiceLogo() const {
    return m_has_invoice_logo;
}
void OAIUserSettings::setHasInvoiceLogo(const bool &has_invoice_logo) {
    m_has_invoice_logo = has_invoice_logo;
    m_has_invoice_logo_isSet = true;
}

bool OAIUserSettings::is_has_invoice_logo_Set() const{
    return m_has_invoice_logo_isSet;
}

bool OAIUserSettings::is_has_invoice_logo_Valid() const{
    return m_has_invoice_logo_isValid;
}

QString OAIUserSettings::getIban() const {
    return m_iban;
}
void OAIUserSettings::setIban(const QString &iban) {
    m_iban = iban;
    m_iban_isSet = true;
}

bool OAIUserSettings::is_iban_Set() const{
    return m_iban_isSet;
}

bool OAIUserSettings::is_iban_Valid() const{
    return m_iban_isValid;
}

qint32 OAIUserSettings::getId() const {
    return m_id;
}
void OAIUserSettings::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserSettings::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserSettings::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserSettings::getInvoiceTemplate() const {
    return m_invoice_template;
}
void OAIUserSettings::setInvoiceTemplate(const QString &invoice_template) {
    m_invoice_template = invoice_template;
    m_invoice_template_isSet = true;
}

bool OAIUserSettings::is_invoice_template_Set() const{
    return m_invoice_template_isSet;
}

bool OAIUserSettings::is_invoice_template_Valid() const{
    return m_invoice_template_isValid;
}

QString OAIUserSettings::getInvoiceTemplateColorHex() const {
    return m_invoice_template_color_hex;
}
void OAIUserSettings::setInvoiceTemplateColorHex(const QString &invoice_template_color_hex) {
    m_invoice_template_color_hex = invoice_template_color_hex;
    m_invoice_template_color_hex_isSet = true;
}

bool OAIUserSettings::is_invoice_template_color_hex_Set() const{
    return m_invoice_template_color_hex_isSet;
}

bool OAIUserSettings::is_invoice_template_color_hex_Valid() const{
    return m_invoice_template_color_hex_isValid;
}

QString OAIUserSettings::getPhoneNumber() const {
    return m_phone_number;
}
void OAIUserSettings::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIUserSettings::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIUserSettings::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIUserSettings::getProfession() const {
    return m_profession;
}
void OAIUserSettings::setProfession(const QString &profession) {
    m_profession = profession;
    m_profession_isSet = true;
}

bool OAIUserSettings::is_profession_Set() const{
    return m_profession_isSet;
}

bool OAIUserSettings::is_profession_Valid() const{
    return m_profession_isValid;
}

bool OAIUserSettings::isReceiveSmsNotifications() const {
    return m_receive_sms_notifications;
}
void OAIUserSettings::setReceiveSmsNotifications(const bool &receive_sms_notifications) {
    m_receive_sms_notifications = receive_sms_notifications;
    m_receive_sms_notifications_isSet = true;
}

bool OAIUserSettings::is_receive_sms_notifications_Set() const{
    return m_receive_sms_notifications_isSet;
}

bool OAIUserSettings::is_receive_sms_notifications_Valid() const{
    return m_receive_sms_notifications_isValid;
}

QString OAIUserSettings::getReferralProgram() const {
    return m_referral_program;
}
void OAIUserSettings::setReferralProgram(const QString &referral_program) {
    m_referral_program = referral_program;
    m_referral_program_isSet = true;
}

bool OAIUserSettings::is_referral_program_Set() const{
    return m_referral_program_isSet;
}

bool OAIUserSettings::is_referral_program_Valid() const{
    return m_referral_program_isValid;
}

QString OAIUserSettings::getStoreCheckoutFields() const {
    return m_store_checkout_fields;
}
void OAIUserSettings::setStoreCheckoutFields(const QString &store_checkout_fields) {
    m_store_checkout_fields = store_checkout_fields;
    m_store_checkout_fields_isSet = true;
}

bool OAIUserSettings::is_store_checkout_fields_Set() const{
    return m_store_checkout_fields_isSet;
}

bool OAIUserSettings::is_store_checkout_fields_Valid() const{
    return m_store_checkout_fields_isValid;
}

QString OAIUserSettings::getStoreColorHex() const {
    return m_store_color_hex;
}
void OAIUserSettings::setStoreColorHex(const QString &store_color_hex) {
    m_store_color_hex = store_color_hex;
    m_store_color_hex_isSet = true;
}

bool OAIUserSettings::is_store_color_hex_Set() const{
    return m_store_color_hex_isSet;
}

bool OAIUserSettings::is_store_color_hex_Valid() const{
    return m_store_color_hex_isValid;
}

OAICurrency OAIUserSettings::getStoreCurrency() const {
    return m_store_currency;
}
void OAIUserSettings::setStoreCurrency(const OAICurrency &store_currency) {
    m_store_currency = store_currency;
    m_store_currency_isSet = true;
}

bool OAIUserSettings::is_store_currency_Set() const{
    return m_store_currency_isSet;
}

bool OAIUserSettings::is_store_currency_Valid() const{
    return m_store_currency_isValid;
}

qint32 OAIUserSettings::getStoreCurrencyId() const {
    return m_store_currency_id;
}
void OAIUserSettings::setStoreCurrencyId(const qint32 &store_currency_id) {
    m_store_currency_id = store_currency_id;
    m_store_currency_id_isSet = true;
}

bool OAIUserSettings::is_store_currency_id_Set() const{
    return m_store_currency_id_isSet;
}

bool OAIUserSettings::is_store_currency_id_Valid() const{
    return m_store_currency_id_isValid;
}

QString OAIUserSettings::getStoreCustomJavaScript() const {
    return m_store_custom_java_script;
}
void OAIUserSettings::setStoreCustomJavaScript(const QString &store_custom_java_script) {
    m_store_custom_java_script = store_custom_java_script;
    m_store_custom_java_script_isSet = true;
}

bool OAIUserSettings::is_store_custom_java_script_Set() const{
    return m_store_custom_java_script_isSet;
}

bool OAIUserSettings::is_store_custom_java_script_Valid() const{
    return m_store_custom_java_script_isValid;
}

QString OAIUserSettings::getStoreDescription() const {
    return m_store_description;
}
void OAIUserSettings::setStoreDescription(const QString &store_description) {
    m_store_description = store_description;
    m_store_description_isSet = true;
}

bool OAIUserSettings::is_store_description_Set() const{
    return m_store_description_isSet;
}

bool OAIUserSettings::is_store_description_Valid() const{
    return m_store_description_isValid;
}

QString OAIUserSettings::getStoreEmail() const {
    return m_store_email;
}
void OAIUserSettings::setStoreEmail(const QString &store_email) {
    m_store_email = store_email;
    m_store_email_isSet = true;
}

bool OAIUserSettings::is_store_email_Set() const{
    return m_store_email_isSet;
}

bool OAIUserSettings::is_store_email_Valid() const{
    return m_store_email_isValid;
}

OAIUiLanguage OAIUserSettings::getStoreLanguage() const {
    return m_store_language;
}
void OAIUserSettings::setStoreLanguage(const OAIUiLanguage &store_language) {
    m_store_language = store_language;
    m_store_language_isSet = true;
}

bool OAIUserSettings::is_store_language_Set() const{
    return m_store_language_isSet;
}

bool OAIUserSettings::is_store_language_Valid() const{
    return m_store_language_isValid;
}

qint32 OAIUserSettings::getStoreLanguageId() const {
    return m_store_language_id;
}
void OAIUserSettings::setStoreLanguageId(const qint32 &store_language_id) {
    m_store_language_id = store_language_id;
    m_store_language_id_isSet = true;
}

bool OAIUserSettings::is_store_language_id_Set() const{
    return m_store_language_id_isSet;
}

bool OAIUserSettings::is_store_language_id_Valid() const{
    return m_store_language_id_isValid;
}

QString OAIUserSettings::getStoreName() const {
    return m_store_name;
}
void OAIUserSettings::setStoreName(const QString &store_name) {
    m_store_name = store_name;
    m_store_name_isSet = true;
}

bool OAIUserSettings::is_store_name_Set() const{
    return m_store_name_isSet;
}

bool OAIUserSettings::is_store_name_Valid() const{
    return m_store_name_isValid;
}

QString OAIUserSettings::getStorePurchaseEmailMessage() const {
    return m_store_purchase_email_message;
}
void OAIUserSettings::setStorePurchaseEmailMessage(const QString &store_purchase_email_message) {
    m_store_purchase_email_message = store_purchase_email_message;
    m_store_purchase_email_message_isSet = true;
}

bool OAIUserSettings::is_store_purchase_email_message_Set() const{
    return m_store_purchase_email_message_isSet;
}

bool OAIUserSettings::is_store_purchase_email_message_Valid() const{
    return m_store_purchase_email_message_isValid;
}

QString OAIUserSettings::getStorePurchaseThankYouMessage() const {
    return m_store_purchase_thank_you_message;
}
void OAIUserSettings::setStorePurchaseThankYouMessage(const QString &store_purchase_thank_you_message) {
    m_store_purchase_thank_you_message = store_purchase_thank_you_message;
    m_store_purchase_thank_you_message_isSet = true;
}

bool OAIUserSettings::is_store_purchase_thank_you_message_Set() const{
    return m_store_purchase_thank_you_message_isSet;
}

bool OAIUserSettings::is_store_purchase_thank_you_message_Valid() const{
    return m_store_purchase_thank_you_message_isValid;
}

QString OAIUserSettings::getStoreTextColorHex() const {
    return m_store_text_color_hex;
}
void OAIUserSettings::setStoreTextColorHex(const QString &store_text_color_hex) {
    m_store_text_color_hex = store_text_color_hex;
    m_store_text_color_hex_isSet = true;
}

bool OAIUserSettings::is_store_text_color_hex_Set() const{
    return m_store_text_color_hex_isSet;
}

bool OAIUserSettings::is_store_text_color_hex_Valid() const{
    return m_store_text_color_hex_isValid;
}

QString OAIUserSettings::getStoreUrl() const {
    return m_store_url;
}
void OAIUserSettings::setStoreUrl(const QString &store_url) {
    m_store_url = store_url;
    m_store_url_isSet = true;
}

bool OAIUserSettings::is_store_url_Set() const{
    return m_store_url_isSet;
}

bool OAIUserSettings::is_store_url_Valid() const{
    return m_store_url_isValid;
}

bool OAIUserSettings::isSubscribeToProductEmails() const {
    return m_subscribe_to_product_emails;
}
void OAIUserSettings::setSubscribeToProductEmails(const bool &subscribe_to_product_emails) {
    m_subscribe_to_product_emails = subscribe_to_product_emails;
    m_subscribe_to_product_emails_isSet = true;
}

bool OAIUserSettings::is_subscribe_to_product_emails_Set() const{
    return m_subscribe_to_product_emails_isSet;
}

bool OAIUserSettings::is_subscribe_to_product_emails_Valid() const{
    return m_subscribe_to_product_emails_isValid;
}

QString OAIUserSettings::getSwift() const {
    return m_swift;
}
void OAIUserSettings::setSwift(const QString &swift) {
    m_swift = swift;
    m_swift_isSet = true;
}

bool OAIUserSettings::is_swift_Set() const{
    return m_swift_isSet;
}

bool OAIUserSettings::is_swift_Valid() const{
    return m_swift_isValid;
}

QString OAIUserSettings::getTerms() const {
    return m_terms;
}
void OAIUserSettings::setTerms(const QString &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAIUserSettings::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAIUserSettings::is_terms_Valid() const{
    return m_terms_isValid;
}

qint32 OAIUserSettings::getUserId() const {
    return m_user_id;
}
void OAIUserSettings::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUserSettings::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUserSettings::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIUserSettings::getUserSignature() const {
    return m_user_signature;
}
void OAIUserSettings::setUserSignature(const QString &user_signature) {
    m_user_signature = user_signature;
    m_user_signature_isSet = true;
}

bool OAIUserSettings::is_user_signature_Set() const{
    return m_user_signature_isSet;
}

bool OAIUserSettings::is_user_signature_Valid() const{
    return m_user_signature_isValid;
}

QString OAIUserSettings::getVatNumber() const {
    return m_vat_number;
}
void OAIUserSettings::setVatNumber(const QString &vat_number) {
    m_vat_number = vat_number;
    m_vat_number_isSet = true;
}

bool OAIUserSettings::is_vat_number_Set() const{
    return m_vat_number_isSet;
}

bool OAIUserSettings::is_vat_number_Valid() const{
    return m_vat_number_isValid;
}

qint32 OAIUserSettings::getYearsOfExperience() const {
    return m_years_of_experience;
}
void OAIUserSettings::setYearsOfExperience(const qint32 &years_of_experience) {
    m_years_of_experience = years_of_experience;
    m_years_of_experience_isSet = true;
}

bool OAIUserSettings::is_years_of_experience_Set() const{
    return m_years_of_experience_isSet;
}

bool OAIUserSettings::is_years_of_experience_Valid() const{
    return m_years_of_experience_isValid;
}

bool OAIUserSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accountant_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_registration_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_date_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_due_date_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_client_portal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_predictive_invoicing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_recurring_invoicing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_invoice_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_template_color_hex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profession_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receive_sms_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referral_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_checkout_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_color_hex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_custom_java_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_language_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_purchase_email_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_purchase_thank_you_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_text_color_hex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribe_to_product_emails_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_swift_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_years_of_experience_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
