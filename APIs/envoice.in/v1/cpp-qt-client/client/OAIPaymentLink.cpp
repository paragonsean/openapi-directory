/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentLink::OAIPaymentLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentLink::OAIPaymentLink() {
    this->initializeModel();
}

OAIPaymentLink::~OAIPaymentLink() {}

void OAIPaymentLink::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invoice_isSet = false;
    m_invoice_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_sub_total_amount_isSet = false;
    m_sub_total_amount_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIPaymentLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentLink::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("AccessToken")]);
    m_access_token_isSet = !json[QString("AccessToken")].isNull() && m_access_token_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("Client")]);
    m_client_isSet = !json[QString("Client")].isNull() && m_client_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("ClientId")]);
    m_client_id_isSet = !json[QString("ClientId")].isNull() && m_client_id_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("Currency")]);
    m_currency_isSet = !json[QString("Currency")].isNull() && m_currency_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("CurrencyId")]);
    m_currency_id_isSet = !json[QString("CurrencyId")].isNull() && m_currency_id_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("DiscountAmount")]);
    m_discount_amount_isSet = !json[QString("DiscountAmount")].isNull() && m_discount_amount_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_invoice_isValid = ::OpenAPI::fromJsonValue(m_invoice, json[QString("Invoice")]);
    m_invoice_isSet = !json[QString("Invoice")].isNull() && m_invoice_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("Items")]);
    m_items_isSet = !json[QString("Items")].isNull() && m_items_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_sub_total_amount_isValid = ::OpenAPI::fromJsonValue(m_sub_total_amount, json[QString("SubTotalAmount")]);
    m_sub_total_amount_isSet = !json[QString("SubTotalAmount")].isNull() && m_sub_total_amount_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("TaxAmount")]);
    m_tax_amount_isSet = !json[QString("TaxAmount")].isNull() && m_tax_amount_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("TotalAmount")]);
    m_total_amount_isSet = !json[QString("TotalAmount")].isNull() && m_total_amount_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;
}

QString OAIPaymentLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentLink::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("AccessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_client.isSet()) {
        obj.insert(QString("Client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("ClientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("Currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("CurrencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_discount_amount_isSet) {
        obj.insert(QString("DiscountAmount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invoice.isSet()) {
        obj.insert(QString("Invoice"), ::OpenAPI::toJsonValue(m_invoice));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("Items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_sub_total_amount_isSet) {
        obj.insert(QString("SubTotalAmount"), ::OpenAPI::toJsonValue(m_sub_total_amount));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("TaxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("TotalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    if (m_user.isSet()) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIPaymentLink::getAccessToken() const {
    return m_access_token;
}
void OAIPaymentLink::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIPaymentLink::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIPaymentLink::is_access_token_Valid() const{
    return m_access_token_isValid;
}

OAIClient OAIPaymentLink::getClient() const {
    return m_client;
}
void OAIPaymentLink::setClient(const OAIClient &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIPaymentLink::is_client_Set() const{
    return m_client_isSet;
}

bool OAIPaymentLink::is_client_Valid() const{
    return m_client_isValid;
}

qint32 OAIPaymentLink::getClientId() const {
    return m_client_id;
}
void OAIPaymentLink::setClientId(const qint32 &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIPaymentLink::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIPaymentLink::is_client_id_Valid() const{
    return m_client_id_isValid;
}

OAICurrency OAIPaymentLink::getCurrency() const {
    return m_currency;
}
void OAIPaymentLink::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPaymentLink::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPaymentLink::is_currency_Valid() const{
    return m_currency_isValid;
}

qint32 OAIPaymentLink::getCurrencyId() const {
    return m_currency_id;
}
void OAIPaymentLink::setCurrencyId(const qint32 &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAIPaymentLink::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAIPaymentLink::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

double OAIPaymentLink::getDiscountAmount() const {
    return m_discount_amount;
}
void OAIPaymentLink::setDiscountAmount(const double &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAIPaymentLink::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAIPaymentLink::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

qint32 OAIPaymentLink::getId() const {
    return m_id;
}
void OAIPaymentLink::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPaymentLink::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPaymentLink::is_id_Valid() const{
    return m_id_isValid;
}

OAIInvoice OAIPaymentLink::getInvoice() const {
    return m_invoice;
}
void OAIPaymentLink::setInvoice(const OAIInvoice &invoice) {
    m_invoice = invoice;
    m_invoice_isSet = true;
}

bool OAIPaymentLink::is_invoice_Set() const{
    return m_invoice_isSet;
}

bool OAIPaymentLink::is_invoice_Valid() const{
    return m_invoice_isValid;
}

QList<OAIPaymentLinkItem> OAIPaymentLink::getItems() const {
    return m_items;
}
void OAIPaymentLink::setItems(const QList<OAIPaymentLinkItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIPaymentLink::is_items_Set() const{
    return m_items_isSet;
}

bool OAIPaymentLink::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIPaymentLink::getNumber() const {
    return m_number;
}
void OAIPaymentLink::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPaymentLink::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPaymentLink::is_number_Valid() const{
    return m_number_isValid;
}

double OAIPaymentLink::getSubTotalAmount() const {
    return m_sub_total_amount;
}
void OAIPaymentLink::setSubTotalAmount(const double &sub_total_amount) {
    m_sub_total_amount = sub_total_amount;
    m_sub_total_amount_isSet = true;
}

bool OAIPaymentLink::is_sub_total_amount_Set() const{
    return m_sub_total_amount_isSet;
}

bool OAIPaymentLink::is_sub_total_amount_Valid() const{
    return m_sub_total_amount_isValid;
}

double OAIPaymentLink::getTaxAmount() const {
    return m_tax_amount;
}
void OAIPaymentLink::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAIPaymentLink::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAIPaymentLink::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

double OAIPaymentLink::getTotalAmount() const {
    return m_total_amount;
}
void OAIPaymentLink::setTotalAmount(const double &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIPaymentLink::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIPaymentLink::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

OAIUser OAIPaymentLink::getUser() const {
    return m_user;
}
void OAIPaymentLink::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIPaymentLink::is_user_Set() const{
    return m_user_isSet;
}

bool OAIPaymentLink::is_user_Valid() const{
    return m_user_isValid;
}

qint32 OAIPaymentLink::getUserId() const {
    return m_user_id;
}
void OAIPaymentLink::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIPaymentLink::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIPaymentLink::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIPaymentLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
