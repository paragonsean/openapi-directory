/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUser.h
 *
 * 
 */

#ifndef OAIUser_H
#define OAIUser_H

#include <QJsonObject>

#include "OAIExternalConnection.h"
#include "OAISubscriptionPlan.h"
#include "OAIUserSettings.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExternalConnection;
class OAIUserSettings;
class OAISubscriptionPlan;

class OAIUser : public OAIObject {
public:
    OAIUser();
    OAIUser(QString json);
    ~OAIUser() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getActionNotificationsLastReadOn() const;
    void setActionNotificationsLastReadOn(const QDateTime &action_notifications_last_read_on);
    bool is_action_notifications_last_read_on_Set() const;
    bool is_action_notifications_last_read_on_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QList<OAIExternalConnection> getExternalConnections() const;
    void setExternalConnections(const QList<OAIExternalConnection> &external_connections);
    bool is_external_connections_Set() const;
    bool is_external_connections_Valid() const;

    bool isHasBeenOnboarded() const;
    void setHasBeenOnboarded(const bool &has_been_onboarded);
    bool is_has_been_onboarded_Set() const;
    bool is_has_been_onboarded_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsLocked() const;
    void setIsLocked(const bool &is_locked);
    bool is_is_locked_Set() const;
    bool is_is_locked_Valid() const;

    bool isIsVerified() const;
    void setIsVerified(const bool &is_verified);
    bool is_is_verified_Set() const;
    bool is_is_verified_Valid() const;

    QDateTime getKnowledgeNotificationsLastReadOn() const;
    void setKnowledgeNotificationsLastReadOn(const QDateTime &knowledge_notifications_last_read_on);
    bool is_knowledge_notifications_last_read_on_Set() const;
    bool is_knowledge_notifications_last_read_on_Valid() const;

    QDateTime getLastSeenOn() const;
    void setLastSeenOn(const QDateTime &last_seen_on);
    bool is_last_seen_on_Set() const;
    bool is_last_seen_on_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPassword() const;
    void setPassword(const QString &password);
    bool is_password_Set() const;
    bool is_password_Valid() const;

    QString getPasswordSalt() const;
    void setPasswordSalt(const QString &password_salt);
    bool is_password_salt_Set() const;
    bool is_password_salt_Valid() const;

    QString getReferralPath() const;
    void setReferralPath(const QString &referral_path);
    bool is_referral_path_Set() const;
    bool is_referral_path_Valid() const;

    qint32 getReferredUsers() const;
    void setReferredUsers(const qint32 &referred_users);
    bool is_referred_users_Set() const;
    bool is_referred_users_Valid() const;

    QString getReferrerKey() const;
    void setReferrerKey(const QString &referrer_key);
    bool is_referrer_key_Set() const;
    bool is_referrer_key_Valid() const;

    OAIUserSettings getSettings() const;
    void setSettings(const OAIUserSettings &settings);
    bool is_settings_Set() const;
    bool is_settings_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAISubscriptionPlan getSubscriptionPlan() const;
    void setSubscriptionPlan(const OAISubscriptionPlan &subscription_plan);
    bool is_subscription_plan_Set() const;
    bool is_subscription_plan_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    QDateTime getVerifiedOn() const;
    void setVerifiedOn(const QDateTime &verified_on);
    bool is_verified_on_Set() const;
    bool is_verified_on_Valid() const;

    QString getYearsOfExperience() const;
    void setYearsOfExperience(const QString &years_of_experience);
    bool is_years_of_experience_Set() const;
    bool is_years_of_experience_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_action_notifications_last_read_on;
    bool m_action_notifications_last_read_on_isSet;
    bool m_action_notifications_last_read_on_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QList<OAIExternalConnection> m_external_connections;
    bool m_external_connections_isSet;
    bool m_external_connections_isValid;

    bool m_has_been_onboarded;
    bool m_has_been_onboarded_isSet;
    bool m_has_been_onboarded_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_locked;
    bool m_is_locked_isSet;
    bool m_is_locked_isValid;

    bool m_is_verified;
    bool m_is_verified_isSet;
    bool m_is_verified_isValid;

    QDateTime m_knowledge_notifications_last_read_on;
    bool m_knowledge_notifications_last_read_on_isSet;
    bool m_knowledge_notifications_last_read_on_isValid;

    QDateTime m_last_seen_on;
    bool m_last_seen_on_isSet;
    bool m_last_seen_on_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_password;
    bool m_password_isSet;
    bool m_password_isValid;

    QString m_password_salt;
    bool m_password_salt_isSet;
    bool m_password_salt_isValid;

    QString m_referral_path;
    bool m_referral_path_isSet;
    bool m_referral_path_isValid;

    qint32 m_referred_users;
    bool m_referred_users_isSet;
    bool m_referred_users_isValid;

    QString m_referrer_key;
    bool m_referrer_key_isSet;
    bool m_referrer_key_isValid;

    OAIUserSettings m_settings;
    bool m_settings_isSet;
    bool m_settings_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAISubscriptionPlan m_subscription_plan;
    bool m_subscription_plan_isSet;
    bool m_subscription_plan_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;

    QDateTime m_verified_on;
    bool m_verified_on_isSet;
    bool m_verified_on_isValid;

    QString m_years_of_experience;
    bool m_years_of_experience_isSet;
    bool m_years_of_experience_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUser)

#endif // OAIUser_H
