/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecurringProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecurringProfile::OAIRecurringProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecurringProfile::OAIRecurringProfile() {
    this->initializeModel();
}

OAIRecurringProfile::~OAIRecurringProfile() {}

void OAIRecurringProfile::initializeModel() {

    m_day_of_month_isSet = false;
    m_day_of_month_isValid = false;

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_due_date_in_days_isSet = false;
    m_due_date_in_days_isValid = false;

    m_end_of_recurrance_isSet = false;
    m_end_of_recurrance_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invoice_id_isSet = false;
    m_invoice_id_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;

    m_recurrance_pattern_isSet = false;
    m_recurrance_pattern_isValid = false;

    m_recurrance_value_isSet = false;
    m_recurrance_value_isValid = false;

    m_start_of_recurrance_isSet = false;
    m_start_of_recurrance_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIRecurringProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecurringProfile::fromJsonObject(QJsonObject json) {

    m_day_of_month_isValid = ::OpenAPI::fromJsonValue(m_day_of_month, json[QString("DayOfMonth")]);
    m_day_of_month_isSet = !json[QString("DayOfMonth")].isNull() && m_day_of_month_isValid;

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("DayOfWeek")]);
    m_day_of_week_isSet = !json[QString("DayOfWeek")].isNull() && m_day_of_week_isValid;

    m_due_date_in_days_isValid = ::OpenAPI::fromJsonValue(m_due_date_in_days, json[QString("DueDateInDays")]);
    m_due_date_in_days_isSet = !json[QString("DueDateInDays")].isNull() && m_due_date_in_days_isValid;

    m_end_of_recurrance_isValid = ::OpenAPI::fromJsonValue(m_end_of_recurrance, json[QString("EndOfRecurrance")]);
    m_end_of_recurrance_isSet = !json[QString("EndOfRecurrance")].isNull() && m_end_of_recurrance_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_invoice_id, json[QString("InvoiceId")]);
    m_invoice_id_isSet = !json[QString("InvoiceId")].isNull() && m_invoice_id_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("Month")]);
    m_month_isSet = !json[QString("Month")].isNull() && m_month_isValid;

    m_recurrance_pattern_isValid = ::OpenAPI::fromJsonValue(m_recurrance_pattern, json[QString("RecurrancePattern")]);
    m_recurrance_pattern_isSet = !json[QString("RecurrancePattern")].isNull() && m_recurrance_pattern_isValid;

    m_recurrance_value_isValid = ::OpenAPI::fromJsonValue(m_recurrance_value, json[QString("RecurranceValue")]);
    m_recurrance_value_isSet = !json[QString("RecurranceValue")].isNull() && m_recurrance_value_isValid;

    m_start_of_recurrance_isValid = ::OpenAPI::fromJsonValue(m_start_of_recurrance, json[QString("StartOfRecurrance")]);
    m_start_of_recurrance_isSet = !json[QString("StartOfRecurrance")].isNull() && m_start_of_recurrance_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;
}

QString OAIRecurringProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecurringProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_day_of_month_isSet) {
        obj.insert(QString("DayOfMonth"), ::OpenAPI::toJsonValue(m_day_of_month));
    }
    if (m_day_of_week_isSet) {
        obj.insert(QString("DayOfWeek"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_due_date_in_days_isSet) {
        obj.insert(QString("DueDateInDays"), ::OpenAPI::toJsonValue(m_due_date_in_days));
    }
    if (m_end_of_recurrance_isSet) {
        obj.insert(QString("EndOfRecurrance"), ::OpenAPI::toJsonValue(m_end_of_recurrance));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invoice_id_isSet) {
        obj.insert(QString("InvoiceId"), ::OpenAPI::toJsonValue(m_invoice_id));
    }
    if (m_month_isSet) {
        obj.insert(QString("Month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_recurrance_pattern_isSet) {
        obj.insert(QString("RecurrancePattern"), ::OpenAPI::toJsonValue(m_recurrance_pattern));
    }
    if (m_recurrance_value_isSet) {
        obj.insert(QString("RecurranceValue"), ::OpenAPI::toJsonValue(m_recurrance_value));
    }
    if (m_start_of_recurrance_isSet) {
        obj.insert(QString("StartOfRecurrance"), ::OpenAPI::toJsonValue(m_start_of_recurrance));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint32 OAIRecurringProfile::getDayOfMonth() const {
    return m_day_of_month;
}
void OAIRecurringProfile::setDayOfMonth(const qint32 &day_of_month) {
    m_day_of_month = day_of_month;
    m_day_of_month_isSet = true;
}

bool OAIRecurringProfile::is_day_of_month_Set() const{
    return m_day_of_month_isSet;
}

bool OAIRecurringProfile::is_day_of_month_Valid() const{
    return m_day_of_month_isValid;
}

QString OAIRecurringProfile::getDayOfWeek() const {
    return m_day_of_week;
}
void OAIRecurringProfile::setDayOfWeek(const QString &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAIRecurringProfile::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAIRecurringProfile::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

qint32 OAIRecurringProfile::getDueDateInDays() const {
    return m_due_date_in_days;
}
void OAIRecurringProfile::setDueDateInDays(const qint32 &due_date_in_days) {
    m_due_date_in_days = due_date_in_days;
    m_due_date_in_days_isSet = true;
}

bool OAIRecurringProfile::is_due_date_in_days_Set() const{
    return m_due_date_in_days_isSet;
}

bool OAIRecurringProfile::is_due_date_in_days_Valid() const{
    return m_due_date_in_days_isValid;
}

QDateTime OAIRecurringProfile::getEndOfRecurrance() const {
    return m_end_of_recurrance;
}
void OAIRecurringProfile::setEndOfRecurrance(const QDateTime &end_of_recurrance) {
    m_end_of_recurrance = end_of_recurrance;
    m_end_of_recurrance_isSet = true;
}

bool OAIRecurringProfile::is_end_of_recurrance_Set() const{
    return m_end_of_recurrance_isSet;
}

bool OAIRecurringProfile::is_end_of_recurrance_Valid() const{
    return m_end_of_recurrance_isValid;
}

qint32 OAIRecurringProfile::getId() const {
    return m_id;
}
void OAIRecurringProfile::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRecurringProfile::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRecurringProfile::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIRecurringProfile::getInvoiceId() const {
    return m_invoice_id;
}
void OAIRecurringProfile::setInvoiceId(const qint32 &invoice_id) {
    m_invoice_id = invoice_id;
    m_invoice_id_isSet = true;
}

bool OAIRecurringProfile::is_invoice_id_Set() const{
    return m_invoice_id_isSet;
}

bool OAIRecurringProfile::is_invoice_id_Valid() const{
    return m_invoice_id_isValid;
}

qint32 OAIRecurringProfile::getMonth() const {
    return m_month;
}
void OAIRecurringProfile::setMonth(const qint32 &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIRecurringProfile::is_month_Set() const{
    return m_month_isSet;
}

bool OAIRecurringProfile::is_month_Valid() const{
    return m_month_isValid;
}

QString OAIRecurringProfile::getRecurrancePattern() const {
    return m_recurrance_pattern;
}
void OAIRecurringProfile::setRecurrancePattern(const QString &recurrance_pattern) {
    m_recurrance_pattern = recurrance_pattern;
    m_recurrance_pattern_isSet = true;
}

bool OAIRecurringProfile::is_recurrance_pattern_Set() const{
    return m_recurrance_pattern_isSet;
}

bool OAIRecurringProfile::is_recurrance_pattern_Valid() const{
    return m_recurrance_pattern_isValid;
}

qint32 OAIRecurringProfile::getRecurranceValue() const {
    return m_recurrance_value;
}
void OAIRecurringProfile::setRecurranceValue(const qint32 &recurrance_value) {
    m_recurrance_value = recurrance_value;
    m_recurrance_value_isSet = true;
}

bool OAIRecurringProfile::is_recurrance_value_Set() const{
    return m_recurrance_value_isSet;
}

bool OAIRecurringProfile::is_recurrance_value_Valid() const{
    return m_recurrance_value_isValid;
}

QDateTime OAIRecurringProfile::getStartOfRecurrance() const {
    return m_start_of_recurrance;
}
void OAIRecurringProfile::setStartOfRecurrance(const QDateTime &start_of_recurrance) {
    m_start_of_recurrance = start_of_recurrance;
    m_start_of_recurrance_isSet = true;
}

bool OAIRecurringProfile::is_start_of_recurrance_Set() const{
    return m_start_of_recurrance_isSet;
}

bool OAIRecurringProfile::is_start_of_recurrance_Valid() const{
    return m_start_of_recurrance_isValid;
}

QString OAIRecurringProfile::getStatus() const {
    return m_status;
}
void OAIRecurringProfile::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRecurringProfile::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRecurringProfile::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRecurringProfile::getTitle() const {
    return m_title;
}
void OAIRecurringProfile::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIRecurringProfile::is_title_Set() const{
    return m_title_isSet;
}

bool OAIRecurringProfile::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIRecurringProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_of_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_of_recurrance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrance_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrance_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_of_recurrance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecurringProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
