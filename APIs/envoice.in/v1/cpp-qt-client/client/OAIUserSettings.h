/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserSettings.h
 *
 * 
 */

#ifndef OAIUserSettings_H
#define OAIUserSettings_H

#include <QJsonObject>

#include "OAICountry.h"
#include "OAICurrency.h"
#include "OAIUiLanguage.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICountry;
class OAICurrency;
class OAIUiLanguage;

class OAIUserSettings : public OAIObject {
public:
    OAIUserSettings();
    OAIUserSettings(QString json);
    ~OAIUserSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountantEmail() const;
    void setAccountantEmail(const QString &accountant_email);
    bool is_accountant_email_Set() const;
    bool is_accountant_email_Valid() const;

    QString getAddress() const;
    void setAddress(const QString &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    QString getApiKey() const;
    void setApiKey(const QString &api_key);
    bool is_api_key_Set() const;
    bool is_api_key_Valid() const;

    QString getApiSecret() const;
    void setApiSecret(const QString &api_secret);
    bool is_api_secret_Set() const;
    bool is_api_secret_Valid() const;

    QString getBackgroundImage() const;
    void setBackgroundImage(const QString &background_image);
    bool is_background_image_Set() const;
    bool is_background_image_Valid() const;

    QString getBank() const;
    void setBank(const QString &bank);
    bool is_bank_Set() const;
    bool is_bank_Valid() const;

    QString getBankAccount() const;
    void setBankAccount(const QString &bank_account);
    bool is_bank_account_Set() const;
    bool is_bank_account_Valid() const;

    QString getCname() const;
    void setCname(const QString &cname);
    bool is_cname_Set() const;
    bool is_cname_Valid() const;

    QString getCompanyRegistrationNumber() const;
    void setCompanyRegistrationNumber(const QString &company_registration_number);
    bool is_company_registration_number_Set() const;
    bool is_company_registration_number_Valid() const;

    OAICountry getCountry() const;
    void setCountry(const OAICountry &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    qint32 getCountryId() const;
    void setCountryId(const qint32 &country_id);
    bool is_country_id_Set() const;
    bool is_country_id_Valid() const;

    OAICurrency getCurrency() const;
    void setCurrency(const OAICurrency &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    qint32 getCurrencyId() const;
    void setCurrencyId(const qint32 &currency_id);
    bool is_currency_id_Set() const;
    bool is_currency_id_Valid() const;

    QString getCurrencySymbol() const;
    void setCurrencySymbol(const QString &currency_symbol);
    bool is_currency_symbol_Set() const;
    bool is_currency_symbol_Valid() const;

    QString getDefaultDateFormat() const;
    void setDefaultDateFormat(const QString &default_date_format);
    bool is_default_date_format_Set() const;
    bool is_default_date_format_Valid() const;

    qint32 getDefaultDueDateInDays() const;
    void setDefaultDueDateInDays(const qint32 &default_due_date_in_days);
    bool is_default_due_date_in_days_Set() const;
    bool is_default_due_date_in_days_Valid() const;

    bool isDoNotTrack() const;
    void setDoNotTrack(const bool &do_not_track);
    bool is_do_not_track_Set() const;
    bool is_do_not_track_Valid() const;

    bool isEnableClientPortal() const;
    void setEnableClientPortal(const bool &enable_client_portal);
    bool is_enable_client_portal_Set() const;
    bool is_enable_client_portal_Valid() const;

    bool isEnablePredictiveInvoicing() const;
    void setEnablePredictiveInvoicing(const bool &enable_predictive_invoicing);
    bool is_enable_predictive_invoicing_Set() const;
    bool is_enable_predictive_invoicing_Valid() const;

    bool isEnableRecurringInvoicing() const;
    void setEnableRecurringInvoicing(const bool &enable_recurring_invoicing);
    bool is_enable_recurring_invoicing_Set() const;
    bool is_enable_recurring_invoicing_Valid() const;

    bool isHasInvoiceLogo() const;
    void setHasInvoiceLogo(const bool &has_invoice_logo);
    bool is_has_invoice_logo_Set() const;
    bool is_has_invoice_logo_Valid() const;

    QString getIban() const;
    void setIban(const QString &iban);
    bool is_iban_Set() const;
    bool is_iban_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getInvoiceTemplate() const;
    void setInvoiceTemplate(const QString &invoice_template);
    bool is_invoice_template_Set() const;
    bool is_invoice_template_Valid() const;

    QString getInvoiceTemplateColorHex() const;
    void setInvoiceTemplateColorHex(const QString &invoice_template_color_hex);
    bool is_invoice_template_color_hex_Set() const;
    bool is_invoice_template_color_hex_Valid() const;

    QString getPhoneNumber() const;
    void setPhoneNumber(const QString &phone_number);
    bool is_phone_number_Set() const;
    bool is_phone_number_Valid() const;

    QString getProfession() const;
    void setProfession(const QString &profession);
    bool is_profession_Set() const;
    bool is_profession_Valid() const;

    bool isReceiveSmsNotifications() const;
    void setReceiveSmsNotifications(const bool &receive_sms_notifications);
    bool is_receive_sms_notifications_Set() const;
    bool is_receive_sms_notifications_Valid() const;

    QString getReferralProgram() const;
    void setReferralProgram(const QString &referral_program);
    bool is_referral_program_Set() const;
    bool is_referral_program_Valid() const;

    QString getStoreCheckoutFields() const;
    void setStoreCheckoutFields(const QString &store_checkout_fields);
    bool is_store_checkout_fields_Set() const;
    bool is_store_checkout_fields_Valid() const;

    QString getStoreColorHex() const;
    void setStoreColorHex(const QString &store_color_hex);
    bool is_store_color_hex_Set() const;
    bool is_store_color_hex_Valid() const;

    OAICurrency getStoreCurrency() const;
    void setStoreCurrency(const OAICurrency &store_currency);
    bool is_store_currency_Set() const;
    bool is_store_currency_Valid() const;

    qint32 getStoreCurrencyId() const;
    void setStoreCurrencyId(const qint32 &store_currency_id);
    bool is_store_currency_id_Set() const;
    bool is_store_currency_id_Valid() const;

    QString getStoreCustomJavaScript() const;
    void setStoreCustomJavaScript(const QString &store_custom_java_script);
    bool is_store_custom_java_script_Set() const;
    bool is_store_custom_java_script_Valid() const;

    QString getStoreDescription() const;
    void setStoreDescription(const QString &store_description);
    bool is_store_description_Set() const;
    bool is_store_description_Valid() const;

    QString getStoreEmail() const;
    void setStoreEmail(const QString &store_email);
    bool is_store_email_Set() const;
    bool is_store_email_Valid() const;

    OAIUiLanguage getStoreLanguage() const;
    void setStoreLanguage(const OAIUiLanguage &store_language);
    bool is_store_language_Set() const;
    bool is_store_language_Valid() const;

    qint32 getStoreLanguageId() const;
    void setStoreLanguageId(const qint32 &store_language_id);
    bool is_store_language_id_Set() const;
    bool is_store_language_id_Valid() const;

    QString getStoreName() const;
    void setStoreName(const QString &store_name);
    bool is_store_name_Set() const;
    bool is_store_name_Valid() const;

    QString getStorePurchaseEmailMessage() const;
    void setStorePurchaseEmailMessage(const QString &store_purchase_email_message);
    bool is_store_purchase_email_message_Set() const;
    bool is_store_purchase_email_message_Valid() const;

    QString getStorePurchaseThankYouMessage() const;
    void setStorePurchaseThankYouMessage(const QString &store_purchase_thank_you_message);
    bool is_store_purchase_thank_you_message_Set() const;
    bool is_store_purchase_thank_you_message_Valid() const;

    QString getStoreTextColorHex() const;
    void setStoreTextColorHex(const QString &store_text_color_hex);
    bool is_store_text_color_hex_Set() const;
    bool is_store_text_color_hex_Valid() const;

    QString getStoreUrl() const;
    void setStoreUrl(const QString &store_url);
    bool is_store_url_Set() const;
    bool is_store_url_Valid() const;

    bool isSubscribeToProductEmails() const;
    void setSubscribeToProductEmails(const bool &subscribe_to_product_emails);
    bool is_subscribe_to_product_emails_Set() const;
    bool is_subscribe_to_product_emails_Valid() const;

    QString getSwift() const;
    void setSwift(const QString &swift);
    bool is_swift_Set() const;
    bool is_swift_Valid() const;

    QString getTerms() const;
    void setTerms(const QString &terms);
    bool is_terms_Set() const;
    bool is_terms_Valid() const;

    qint32 getUserId() const;
    void setUserId(const qint32 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getUserSignature() const;
    void setUserSignature(const QString &user_signature);
    bool is_user_signature_Set() const;
    bool is_user_signature_Valid() const;

    QString getVatNumber() const;
    void setVatNumber(const QString &vat_number);
    bool is_vat_number_Set() const;
    bool is_vat_number_Valid() const;

    qint32 getYearsOfExperience() const;
    void setYearsOfExperience(const qint32 &years_of_experience);
    bool is_years_of_experience_Set() const;
    bool is_years_of_experience_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_accountant_email;
    bool m_accountant_email_isSet;
    bool m_accountant_email_isValid;

    QString m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    QString m_api_key;
    bool m_api_key_isSet;
    bool m_api_key_isValid;

    QString m_api_secret;
    bool m_api_secret_isSet;
    bool m_api_secret_isValid;

    QString m_background_image;
    bool m_background_image_isSet;
    bool m_background_image_isValid;

    QString m_bank;
    bool m_bank_isSet;
    bool m_bank_isValid;

    QString m_bank_account;
    bool m_bank_account_isSet;
    bool m_bank_account_isValid;

    QString m_cname;
    bool m_cname_isSet;
    bool m_cname_isValid;

    QString m_company_registration_number;
    bool m_company_registration_number_isSet;
    bool m_company_registration_number_isValid;

    OAICountry m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    qint32 m_country_id;
    bool m_country_id_isSet;
    bool m_country_id_isValid;

    OAICurrency m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    qint32 m_currency_id;
    bool m_currency_id_isSet;
    bool m_currency_id_isValid;

    QString m_currency_symbol;
    bool m_currency_symbol_isSet;
    bool m_currency_symbol_isValid;

    QString m_default_date_format;
    bool m_default_date_format_isSet;
    bool m_default_date_format_isValid;

    qint32 m_default_due_date_in_days;
    bool m_default_due_date_in_days_isSet;
    bool m_default_due_date_in_days_isValid;

    bool m_do_not_track;
    bool m_do_not_track_isSet;
    bool m_do_not_track_isValid;

    bool m_enable_client_portal;
    bool m_enable_client_portal_isSet;
    bool m_enable_client_portal_isValid;

    bool m_enable_predictive_invoicing;
    bool m_enable_predictive_invoicing_isSet;
    bool m_enable_predictive_invoicing_isValid;

    bool m_enable_recurring_invoicing;
    bool m_enable_recurring_invoicing_isSet;
    bool m_enable_recurring_invoicing_isValid;

    bool m_has_invoice_logo;
    bool m_has_invoice_logo_isSet;
    bool m_has_invoice_logo_isValid;

    QString m_iban;
    bool m_iban_isSet;
    bool m_iban_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_invoice_template;
    bool m_invoice_template_isSet;
    bool m_invoice_template_isValid;

    QString m_invoice_template_color_hex;
    bool m_invoice_template_color_hex_isSet;
    bool m_invoice_template_color_hex_isValid;

    QString m_phone_number;
    bool m_phone_number_isSet;
    bool m_phone_number_isValid;

    QString m_profession;
    bool m_profession_isSet;
    bool m_profession_isValid;

    bool m_receive_sms_notifications;
    bool m_receive_sms_notifications_isSet;
    bool m_receive_sms_notifications_isValid;

    QString m_referral_program;
    bool m_referral_program_isSet;
    bool m_referral_program_isValid;

    QString m_store_checkout_fields;
    bool m_store_checkout_fields_isSet;
    bool m_store_checkout_fields_isValid;

    QString m_store_color_hex;
    bool m_store_color_hex_isSet;
    bool m_store_color_hex_isValid;

    OAICurrency m_store_currency;
    bool m_store_currency_isSet;
    bool m_store_currency_isValid;

    qint32 m_store_currency_id;
    bool m_store_currency_id_isSet;
    bool m_store_currency_id_isValid;

    QString m_store_custom_java_script;
    bool m_store_custom_java_script_isSet;
    bool m_store_custom_java_script_isValid;

    QString m_store_description;
    bool m_store_description_isSet;
    bool m_store_description_isValid;

    QString m_store_email;
    bool m_store_email_isSet;
    bool m_store_email_isValid;

    OAIUiLanguage m_store_language;
    bool m_store_language_isSet;
    bool m_store_language_isValid;

    qint32 m_store_language_id;
    bool m_store_language_id_isSet;
    bool m_store_language_id_isValid;

    QString m_store_name;
    bool m_store_name_isSet;
    bool m_store_name_isValid;

    QString m_store_purchase_email_message;
    bool m_store_purchase_email_message_isSet;
    bool m_store_purchase_email_message_isValid;

    QString m_store_purchase_thank_you_message;
    bool m_store_purchase_thank_you_message_isSet;
    bool m_store_purchase_thank_you_message_isValid;

    QString m_store_text_color_hex;
    bool m_store_text_color_hex_isSet;
    bool m_store_text_color_hex_isValid;

    QString m_store_url;
    bool m_store_url_isSet;
    bool m_store_url_isValid;

    bool m_subscribe_to_product_emails;
    bool m_subscribe_to_product_emails_isSet;
    bool m_subscribe_to_product_emails_isValid;

    QString m_swift;
    bool m_swift_isSet;
    bool m_swift_isValid;

    QString m_terms;
    bool m_terms_isSet;
    bool m_terms_isValid;

    qint32 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString m_user_signature;
    bool m_user_signature_isSet;
    bool m_user_signature_isValid;

    QString m_vat_number;
    bool m_vat_number_isSet;
    bool m_vat_number_isValid;

    qint32 m_years_of_experience;
    bool m_years_of_experience_isSet;
    bool m_years_of_experience_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserSettings)

#endif // OAIUserSettings_H
