/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_action_notifications_last_read_on_isSet = false;
    m_action_notifications_last_read_on_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_external_connections_isSet = false;
    m_external_connections_isValid = false;

    m_has_been_onboarded_isSet = false;
    m_has_been_onboarded_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_locked_isSet = false;
    m_is_locked_isValid = false;

    m_is_verified_isSet = false;
    m_is_verified_isValid = false;

    m_knowledge_notifications_last_read_on_isSet = false;
    m_knowledge_notifications_last_read_on_isValid = false;

    m_last_seen_on_isSet = false;
    m_last_seen_on_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_password_salt_isSet = false;
    m_password_salt_isValid = false;

    m_referral_path_isSet = false;
    m_referral_path_isValid = false;

    m_referred_users_isSet = false;
    m_referred_users_isValid = false;

    m_referrer_key_isSet = false;
    m_referrer_key_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subscription_plan_isSet = false;
    m_subscription_plan_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_verified_on_isSet = false;
    m_verified_on_isValid = false;

    m_years_of_experience_isSet = false;
    m_years_of_experience_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_action_notifications_last_read_on_isValid = ::OpenAPI::fromJsonValue(m_action_notifications_last_read_on, json[QString("ActionNotificationsLastReadOn")]);
    m_action_notifications_last_read_on_isSet = !json[QString("ActionNotificationsLastReadOn")].isNull() && m_action_notifications_last_read_on_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_external_connections_isValid = ::OpenAPI::fromJsonValue(m_external_connections, json[QString("ExternalConnections")]);
    m_external_connections_isSet = !json[QString("ExternalConnections")].isNull() && m_external_connections_isValid;

    m_has_been_onboarded_isValid = ::OpenAPI::fromJsonValue(m_has_been_onboarded, json[QString("HasBeenOnboarded")]);
    m_has_been_onboarded_isSet = !json[QString("HasBeenOnboarded")].isNull() && m_has_been_onboarded_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_locked_isValid = ::OpenAPI::fromJsonValue(m_is_locked, json[QString("IsLocked")]);
    m_is_locked_isSet = !json[QString("IsLocked")].isNull() && m_is_locked_isValid;

    m_is_verified_isValid = ::OpenAPI::fromJsonValue(m_is_verified, json[QString("IsVerified")]);
    m_is_verified_isSet = !json[QString("IsVerified")].isNull() && m_is_verified_isValid;

    m_knowledge_notifications_last_read_on_isValid = ::OpenAPI::fromJsonValue(m_knowledge_notifications_last_read_on, json[QString("KnowledgeNotificationsLastReadOn")]);
    m_knowledge_notifications_last_read_on_isSet = !json[QString("KnowledgeNotificationsLastReadOn")].isNull() && m_knowledge_notifications_last_read_on_isValid;

    m_last_seen_on_isValid = ::OpenAPI::fromJsonValue(m_last_seen_on, json[QString("LastSeenOn")]);
    m_last_seen_on_isSet = !json[QString("LastSeenOn")].isNull() && m_last_seen_on_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("Password")]);
    m_password_isSet = !json[QString("Password")].isNull() && m_password_isValid;

    m_password_salt_isValid = ::OpenAPI::fromJsonValue(m_password_salt, json[QString("PasswordSalt")]);
    m_password_salt_isSet = !json[QString("PasswordSalt")].isNull() && m_password_salt_isValid;

    m_referral_path_isValid = ::OpenAPI::fromJsonValue(m_referral_path, json[QString("ReferralPath")]);
    m_referral_path_isSet = !json[QString("ReferralPath")].isNull() && m_referral_path_isValid;

    m_referred_users_isValid = ::OpenAPI::fromJsonValue(m_referred_users, json[QString("ReferredUsers")]);
    m_referred_users_isSet = !json[QString("ReferredUsers")].isNull() && m_referred_users_isValid;

    m_referrer_key_isValid = ::OpenAPI::fromJsonValue(m_referrer_key, json[QString("ReferrerKey")]);
    m_referrer_key_isSet = !json[QString("ReferrerKey")].isNull() && m_referrer_key_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("Settings")]);
    m_settings_isSet = !json[QString("Settings")].isNull() && m_settings_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_subscription_plan_isValid = ::OpenAPI::fromJsonValue(m_subscription_plan, json[QString("SubscriptionPlan")]);
    m_subscription_plan_isSet = !json[QString("SubscriptionPlan")].isNull() && m_subscription_plan_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;

    m_verified_on_isValid = ::OpenAPI::fromJsonValue(m_verified_on, json[QString("VerifiedOn")]);
    m_verified_on_isSet = !json[QString("VerifiedOn")].isNull() && m_verified_on_isValid;

    m_years_of_experience_isValid = ::OpenAPI::fromJsonValue(m_years_of_experience, json[QString("YearsOfExperience")]);
    m_years_of_experience_isSet = !json[QString("YearsOfExperience")].isNull() && m_years_of_experience_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_action_notifications_last_read_on_isSet) {
        obj.insert(QString("ActionNotificationsLastReadOn"), ::OpenAPI::toJsonValue(m_action_notifications_last_read_on));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_external_connections.size() > 0) {
        obj.insert(QString("ExternalConnections"), ::OpenAPI::toJsonValue(m_external_connections));
    }
    if (m_has_been_onboarded_isSet) {
        obj.insert(QString("HasBeenOnboarded"), ::OpenAPI::toJsonValue(m_has_been_onboarded));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_locked_isSet) {
        obj.insert(QString("IsLocked"), ::OpenAPI::toJsonValue(m_is_locked));
    }
    if (m_is_verified_isSet) {
        obj.insert(QString("IsVerified"), ::OpenAPI::toJsonValue(m_is_verified));
    }
    if (m_knowledge_notifications_last_read_on_isSet) {
        obj.insert(QString("KnowledgeNotificationsLastReadOn"), ::OpenAPI::toJsonValue(m_knowledge_notifications_last_read_on));
    }
    if (m_last_seen_on_isSet) {
        obj.insert(QString("LastSeenOn"), ::OpenAPI::toJsonValue(m_last_seen_on));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("Password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_password_salt_isSet) {
        obj.insert(QString("PasswordSalt"), ::OpenAPI::toJsonValue(m_password_salt));
    }
    if (m_referral_path_isSet) {
        obj.insert(QString("ReferralPath"), ::OpenAPI::toJsonValue(m_referral_path));
    }
    if (m_referred_users_isSet) {
        obj.insert(QString("ReferredUsers"), ::OpenAPI::toJsonValue(m_referred_users));
    }
    if (m_referrer_key_isSet) {
        obj.insert(QString("ReferrerKey"), ::OpenAPI::toJsonValue(m_referrer_key));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("Settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subscription_plan.isSet()) {
        obj.insert(QString("SubscriptionPlan"), ::OpenAPI::toJsonValue(m_subscription_plan));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_verified_on_isSet) {
        obj.insert(QString("VerifiedOn"), ::OpenAPI::toJsonValue(m_verified_on));
    }
    if (m_years_of_experience_isSet) {
        obj.insert(QString("YearsOfExperience"), ::OpenAPI::toJsonValue(m_years_of_experience));
    }
    return obj;
}

QDateTime OAIUser::getActionNotificationsLastReadOn() const {
    return m_action_notifications_last_read_on;
}
void OAIUser::setActionNotificationsLastReadOn(const QDateTime &action_notifications_last_read_on) {
    m_action_notifications_last_read_on = action_notifications_last_read_on;
    m_action_notifications_last_read_on_isSet = true;
}

bool OAIUser::is_action_notifications_last_read_on_Set() const{
    return m_action_notifications_last_read_on_isSet;
}

bool OAIUser::is_action_notifications_last_read_on_Valid() const{
    return m_action_notifications_last_read_on_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

QList<OAIExternalConnection> OAIUser::getExternalConnections() const {
    return m_external_connections;
}
void OAIUser::setExternalConnections(const QList<OAIExternalConnection> &external_connections) {
    m_external_connections = external_connections;
    m_external_connections_isSet = true;
}

bool OAIUser::is_external_connections_Set() const{
    return m_external_connections_isSet;
}

bool OAIUser::is_external_connections_Valid() const{
    return m_external_connections_isValid;
}

bool OAIUser::isHasBeenOnboarded() const {
    return m_has_been_onboarded;
}
void OAIUser::setHasBeenOnboarded(const bool &has_been_onboarded) {
    m_has_been_onboarded = has_been_onboarded;
    m_has_been_onboarded_isSet = true;
}

bool OAIUser::is_has_been_onboarded_Set() const{
    return m_has_been_onboarded_isSet;
}

bool OAIUser::is_has_been_onboarded_Valid() const{
    return m_has_been_onboarded_isValid;
}

qint32 OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUser::isIsLocked() const {
    return m_is_locked;
}
void OAIUser::setIsLocked(const bool &is_locked) {
    m_is_locked = is_locked;
    m_is_locked_isSet = true;
}

bool OAIUser::is_is_locked_Set() const{
    return m_is_locked_isSet;
}

bool OAIUser::is_is_locked_Valid() const{
    return m_is_locked_isValid;
}

bool OAIUser::isIsVerified() const {
    return m_is_verified;
}
void OAIUser::setIsVerified(const bool &is_verified) {
    m_is_verified = is_verified;
    m_is_verified_isSet = true;
}

bool OAIUser::is_is_verified_Set() const{
    return m_is_verified_isSet;
}

bool OAIUser::is_is_verified_Valid() const{
    return m_is_verified_isValid;
}

QDateTime OAIUser::getKnowledgeNotificationsLastReadOn() const {
    return m_knowledge_notifications_last_read_on;
}
void OAIUser::setKnowledgeNotificationsLastReadOn(const QDateTime &knowledge_notifications_last_read_on) {
    m_knowledge_notifications_last_read_on = knowledge_notifications_last_read_on;
    m_knowledge_notifications_last_read_on_isSet = true;
}

bool OAIUser::is_knowledge_notifications_last_read_on_Set() const{
    return m_knowledge_notifications_last_read_on_isSet;
}

bool OAIUser::is_knowledge_notifications_last_read_on_Valid() const{
    return m_knowledge_notifications_last_read_on_isValid;
}

QDateTime OAIUser::getLastSeenOn() const {
    return m_last_seen_on;
}
void OAIUser::setLastSeenOn(const QDateTime &last_seen_on) {
    m_last_seen_on = last_seen_on;
    m_last_seen_on_isSet = true;
}

bool OAIUser::is_last_seen_on_Set() const{
    return m_last_seen_on_isSet;
}

bool OAIUser::is_last_seen_on_Valid() const{
    return m_last_seen_on_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUser::getPassword() const {
    return m_password;
}
void OAIUser::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIUser::is_password_Set() const{
    return m_password_isSet;
}

bool OAIUser::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIUser::getPasswordSalt() const {
    return m_password_salt;
}
void OAIUser::setPasswordSalt(const QString &password_salt) {
    m_password_salt = password_salt;
    m_password_salt_isSet = true;
}

bool OAIUser::is_password_salt_Set() const{
    return m_password_salt_isSet;
}

bool OAIUser::is_password_salt_Valid() const{
    return m_password_salt_isValid;
}

QString OAIUser::getReferralPath() const {
    return m_referral_path;
}
void OAIUser::setReferralPath(const QString &referral_path) {
    m_referral_path = referral_path;
    m_referral_path_isSet = true;
}

bool OAIUser::is_referral_path_Set() const{
    return m_referral_path_isSet;
}

bool OAIUser::is_referral_path_Valid() const{
    return m_referral_path_isValid;
}

qint32 OAIUser::getReferredUsers() const {
    return m_referred_users;
}
void OAIUser::setReferredUsers(const qint32 &referred_users) {
    m_referred_users = referred_users;
    m_referred_users_isSet = true;
}

bool OAIUser::is_referred_users_Set() const{
    return m_referred_users_isSet;
}

bool OAIUser::is_referred_users_Valid() const{
    return m_referred_users_isValid;
}

QString OAIUser::getReferrerKey() const {
    return m_referrer_key;
}
void OAIUser::setReferrerKey(const QString &referrer_key) {
    m_referrer_key = referrer_key;
    m_referrer_key_isSet = true;
}

bool OAIUser::is_referrer_key_Set() const{
    return m_referrer_key_isSet;
}

bool OAIUser::is_referrer_key_Valid() const{
    return m_referrer_key_isValid;
}

OAIUserSettings OAIUser::getSettings() const {
    return m_settings;
}
void OAIUser::setSettings(const OAIUserSettings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIUser::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIUser::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAIUser::getStatus() const {
    return m_status;
}
void OAIUser::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUser::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUser::is_status_Valid() const{
    return m_status_isValid;
}

OAISubscriptionPlan OAIUser::getSubscriptionPlan() const {
    return m_subscription_plan;
}
void OAIUser::setSubscriptionPlan(const OAISubscriptionPlan &subscription_plan) {
    m_subscription_plan = subscription_plan;
    m_subscription_plan_isSet = true;
}

bool OAIUser::is_subscription_plan_Set() const{
    return m_subscription_plan_isSet;
}

bool OAIUser::is_subscription_plan_Valid() const{
    return m_subscription_plan_isValid;
}

QString OAIUser::getType() const {
    return m_type;
}
void OAIUser::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUser::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUser::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIUser::getUsername() const {
    return m_username;
}
void OAIUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser::is_username_Valid() const{
    return m_username_isValid;
}

QDateTime OAIUser::getVerifiedOn() const {
    return m_verified_on;
}
void OAIUser::setVerifiedOn(const QDateTime &verified_on) {
    m_verified_on = verified_on;
    m_verified_on_isSet = true;
}

bool OAIUser::is_verified_on_Set() const{
    return m_verified_on_isSet;
}

bool OAIUser::is_verified_on_Valid() const{
    return m_verified_on_isValid;
}

QString OAIUser::getYearsOfExperience() const {
    return m_years_of_experience;
}
void OAIUser::setYearsOfExperience(const QString &years_of_experience) {
    m_years_of_experience = years_of_experience;
    m_years_of_experience_isSet = true;
}

bool OAIUser::is_years_of_experience_Set() const{
    return m_years_of_experience_isSet;
}

bool OAIUser::is_years_of_experience_Valid() const{
    return m_years_of_experience_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_notifications_last_read_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_connections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_been_onboarded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_knowledge_notifications_last_read_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_salt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referral_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referred_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referrer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_years_of_experience_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
