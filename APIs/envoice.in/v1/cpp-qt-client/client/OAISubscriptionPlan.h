/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISubscriptionPlan.h
 *
 * 
 */

#ifndef OAISubscriptionPlan_H
#define OAISubscriptionPlan_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISubscriptionPlan : public OAIObject {
public:
    OAISubscriptionPlan();
    OAISubscriptionPlan(QString json);
    ~OAISubscriptionPlan() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCancellatedOn() const;
    void setCancellatedOn(const QDateTime &cancellated_on);
    bool is_cancellated_on_Set() const;
    bool is_cancellated_on_Valid() const;

    QString getCouponCode() const;
    void setCouponCode(const QString &coupon_code);
    bool is_coupon_code_Set() const;
    bool is_coupon_code_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    QString getExternalIdentifier() const;
    void setExternalIdentifier(const QString &external_identifier);
    bool is_external_identifier_Set() const;
    bool is_external_identifier_Valid() const;

    QList<QString> getFeatures() const;
    void setFeatures(const QList<QString> &features);
    bool is_features_Set() const;
    bool is_features_Valid() const;

    bool isHasDuePayment() const;
    void setHasDuePayment(const bool &has_due_payment);
    bool is_has_due_payment_Set() const;
    bool is_has_due_payment_Valid() const;

    QDateTime getHasDuePaymentSince() const;
    void setHasDuePaymentSince(const QDateTime &has_due_payment_since);
    bool is_has_due_payment_since_Set() const;
    bool is_has_due_payment_since_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIdentifier() const;
    void setIdentifier(const QString &identifier);
    bool is_identifier_Set() const;
    bool is_identifier_Valid() const;

    bool isIsActive() const;
    void setIsActive(const bool &is_active);
    bool is_is_active_Set() const;
    bool is_is_active_Valid() const;

    bool isIsLifetime() const;
    void setIsLifetime(const bool &is_lifetime);
    bool is_is_lifetime_Set() const;
    bool is_is_lifetime_Valid() const;

    QDateTime getLastPaymentOn() const;
    void setLastPaymentOn(const QDateTime &last_payment_on);
    bool is_last_payment_on_Set() const;
    bool is_last_payment_on_Valid() const;

    qint32 getMaxClients() const;
    void setMaxClients(const qint32 &max_clients);
    bool is_max_clients_Set() const;
    bool is_max_clients_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isOnHold() const;
    void setOnHold(const bool &on_hold);
    bool is_on_hold_Set() const;
    bool is_on_hold_Valid() const;

    QString getOrderIdentifier() const;
    void setOrderIdentifier(const QString &order_identifier);
    bool is_order_identifier_Set() const;
    bool is_order_identifier_Valid() const;

    double getPrice() const;
    void setPrice(const double &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    QString getRecurrence() const;
    void setRecurrence(const QString &recurrence);
    bool is_recurrence_Set() const;
    bool is_recurrence_Valid() const;

    qint64 getSaleId() const;
    void setSaleId(const qint64 &sale_id);
    bool is_sale_id_Set() const;
    bool is_sale_id_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getSystemCancelationReason() const;
    void setSystemCancelationReason(const QString &system_cancelation_reason);
    bool is_system_cancelation_reason_Set() const;
    bool is_system_cancelation_reason_Valid() const;

    QDateTime getTrialEndsOn() const;
    void setTrialEndsOn(const QDateTime &trial_ends_on);
    bool is_trial_ends_on_Set() const;
    bool is_trial_ends_on_Valid() const;

    qint32 getTrialNumberOfDays() const;
    void setTrialNumberOfDays(const qint32 &trial_number_of_days);
    bool is_trial_number_of_days_Set() const;
    bool is_trial_number_of_days_Valid() const;

    QDateTime getTrialStartsOn() const;
    void setTrialStartsOn(const QDateTime &trial_starts_on);
    bool is_trial_starts_on_Set() const;
    bool is_trial_starts_on_Valid() const;

    qint32 getUserId() const;
    void setUserId(const qint32 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_cancellated_on;
    bool m_cancellated_on_isSet;
    bool m_cancellated_on_isValid;

    QString m_coupon_code;
    bool m_coupon_code_isSet;
    bool m_coupon_code_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    QString m_external_identifier;
    bool m_external_identifier_isSet;
    bool m_external_identifier_isValid;

    QList<QString> m_features;
    bool m_features_isSet;
    bool m_features_isValid;

    bool m_has_due_payment;
    bool m_has_due_payment_isSet;
    bool m_has_due_payment_isValid;

    QDateTime m_has_due_payment_since;
    bool m_has_due_payment_since_isSet;
    bool m_has_due_payment_since_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_identifier;
    bool m_identifier_isSet;
    bool m_identifier_isValid;

    bool m_is_active;
    bool m_is_active_isSet;
    bool m_is_active_isValid;

    bool m_is_lifetime;
    bool m_is_lifetime_isSet;
    bool m_is_lifetime_isValid;

    QDateTime m_last_payment_on;
    bool m_last_payment_on_isSet;
    bool m_last_payment_on_isValid;

    qint32 m_max_clients;
    bool m_max_clients_isSet;
    bool m_max_clients_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_on_hold;
    bool m_on_hold_isSet;
    bool m_on_hold_isValid;

    QString m_order_identifier;
    bool m_order_identifier_isSet;
    bool m_order_identifier_isValid;

    double m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    QString m_recurrence;
    bool m_recurrence_isSet;
    bool m_recurrence_isValid;

    qint64 m_sale_id;
    bool m_sale_id_isSet;
    bool m_sale_id_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_system_cancelation_reason;
    bool m_system_cancelation_reason_isSet;
    bool m_system_cancelation_reason_isValid;

    QDateTime m_trial_ends_on;
    bool m_trial_ends_on_isSet;
    bool m_trial_ends_on_isValid;

    qint32 m_trial_number_of_days;
    bool m_trial_number_of_days_isSet;
    bool m_trial_number_of_days_isValid;

    QDateTime m_trial_starts_on;
    bool m_trial_starts_on_isSet;
    bool m_trial_starts_on_isValid;

    qint32 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISubscriptionPlan)

#endif // OAISubscriptionPlan_H
