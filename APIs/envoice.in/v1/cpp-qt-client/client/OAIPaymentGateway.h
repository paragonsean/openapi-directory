/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentGateway.h
 *
 * 
 */

#ifndef OAIPaymentGateway_H
#define OAIPaymentGateway_H

#include <QJsonObject>

#include "OAICurrency.h"
#include "OAIPaymentGatewayInputField.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPaymentGatewayInputField;
class OAICurrency;

class OAIPaymentGateway : public OAIObject {
public:
    OAIPaymentGateway();
    OAIPaymentGateway(QString json);
    ~OAIPaymentGateway() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCanDisconnect() const;
    void setCanDisconnect(const bool &can_disconnect);
    bool is_can_disconnect_Set() const;
    bool is_can_disconnect_Valid() const;

    QString getClientImportUri() const;
    void setClientImportUri(const QString &client_import_uri);
    bool is_client_import_uri_Set() const;
    bool is_client_import_uri_Valid() const;

    QString getConnectionType() const;
    void setConnectionType(const QString &connection_type);
    bool is_connection_type_Set() const;
    bool is_connection_type_Valid() const;

    qint32 getExternalConnectionId() const;
    void setExternalConnectionId(const qint32 &external_connection_id);
    bool is_external_connection_id_Set() const;
    bool is_external_connection_id_Valid() const;

    QList<OAIPaymentGatewayInputField> getFields() const;
    void setFields(const QList<OAIPaymentGatewayInputField> &fields);
    bool is_fields_Set() const;
    bool is_fields_Valid() const;

    bool isIsConnected() const;
    void setIsConnected(const bool &is_connected);
    bool is_is_connected_Set() const;
    bool is_is_connected_Valid() const;

    bool isIsEnabled() const;
    void setIsEnabled(const bool &is_enabled);
    bool is_is_enabled_Set() const;
    bool is_is_enabled_Valid() const;

    double getMaximumAmount() const;
    void setMaximumAmount(const double &maximum_amount);
    bool is_maximum_amount_Set() const;
    bool is_maximum_amount_Valid() const;

    double getMinimumAmount() const;
    void setMinimumAmount(const double &minimum_amount);
    bool is_minimum_amount_Set() const;
    bool is_minimum_amount_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOAuthUri() const;
    void setOAuthUri(const QString &o_auth_uri);
    bool is_o_auth_uri_Set() const;
    bool is_o_auth_uri_Valid() const;

    QString getRefundUri() const;
    void setRefundUri(const QString &refund_uri);
    bool is_refund_uri_Set() const;
    bool is_refund_uri_Valid() const;

    QList<OAICurrency> getSupportedCurrencies() const;
    void setSupportedCurrencies(const QList<OAICurrency> &supported_currencies);
    bool is_supported_currencies_Set() const;
    bool is_supported_currencies_Valid() const;

    bool isSupportsClientsImport() const;
    void setSupportsClientsImport(const bool &supports_clients_import);
    bool is_supports_clients_import_Set() const;
    bool is_supports_clients_import_Valid() const;

    bool isSupportsInstantCheckout() const;
    void setSupportsInstantCheckout(const bool &supports_instant_checkout);
    bool is_supports_instant_checkout_Set() const;
    bool is_supports_instant_checkout_Valid() const;

    bool isSupportsRefund() const;
    void setSupportsRefund(const bool &supports_refund);
    bool is_supports_refund_Set() const;
    bool is_supports_refund_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_can_disconnect;
    bool m_can_disconnect_isSet;
    bool m_can_disconnect_isValid;

    QString m_client_import_uri;
    bool m_client_import_uri_isSet;
    bool m_client_import_uri_isValid;

    QString m_connection_type;
    bool m_connection_type_isSet;
    bool m_connection_type_isValid;

    qint32 m_external_connection_id;
    bool m_external_connection_id_isSet;
    bool m_external_connection_id_isValid;

    QList<OAIPaymentGatewayInputField> m_fields;
    bool m_fields_isSet;
    bool m_fields_isValid;

    bool m_is_connected;
    bool m_is_connected_isSet;
    bool m_is_connected_isValid;

    bool m_is_enabled;
    bool m_is_enabled_isSet;
    bool m_is_enabled_isValid;

    double m_maximum_amount;
    bool m_maximum_amount_isSet;
    bool m_maximum_amount_isValid;

    double m_minimum_amount;
    bool m_minimum_amount_isSet;
    bool m_minimum_amount_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_o_auth_uri;
    bool m_o_auth_uri_isSet;
    bool m_o_auth_uri_isValid;

    QString m_refund_uri;
    bool m_refund_uri_isSet;
    bool m_refund_uri_isValid;

    QList<OAICurrency> m_supported_currencies;
    bool m_supported_currencies_isSet;
    bool m_supported_currencies_isValid;

    bool m_supports_clients_import;
    bool m_supports_clients_import_isSet;
    bool m_supports_clients_import_isValid;

    bool m_supports_instant_checkout;
    bool m_supports_instant_checkout_isSet;
    bool m_supports_instant_checkout_isValid;

    bool m_supports_refund;
    bool m_supports_refund_isSet;
    bool m_supports_refund_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentGateway)

#endif // OAIPaymentGateway_H
