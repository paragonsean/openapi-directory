/**
 * API v1.0.0
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)  <span style='margin-left: 0.5em;'>or</span>  <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>    # Quickstart    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.    <div class='postman-tutorial'>    # Tutorial for running the API in postman    Click on \"\"Run in Postman\"\" button  <br /><br />  ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)     ---     A new page will open.  Click the \"\"Postman for windows\"\" to run postman as a desktop app.  Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.  <br /><br />  ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)     ---     In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".  <br /><br />  ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)     ---     The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"  <br /><br />  ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)     ---     When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.    <sub>\\*Eye button in top right corner </sub>  <br /><br />   ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)  <br /><br />   ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)     ---     You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.  <br /><br />  ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)     ---     Modify the example data to suit your needs and send a request.  <br /><br />  ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)  </div>    # Webhooks    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.   When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.   Webhooks can be used to update an external invoice data storage.    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.  All nonworking webhooks will be ignored after a certain period of time and several retry attempts.  If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.    The payload of the webhook is in format:  ```  {      Signature: \"\"sha256 string\"\",      Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",      Activity: {          Message: \"string\",          Link: \"share url\",          Type: int,                  InvoiceNumber: \"string\",          InvoiceId: int,                  OrderNumber: \"string\",          OrderId: int,          Id: int,          CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"      }  }  ```            
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentGateway.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentGateway::OAIPaymentGateway(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentGateway::OAIPaymentGateway() {
    this->initializeModel();
}

OAIPaymentGateway::~OAIPaymentGateway() {}

void OAIPaymentGateway::initializeModel() {

    m_can_disconnect_isSet = false;
    m_can_disconnect_isValid = false;

    m_client_import_uri_isSet = false;
    m_client_import_uri_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_external_connection_id_isSet = false;
    m_external_connection_id_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_is_connected_isSet = false;
    m_is_connected_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_maximum_amount_isSet = false;
    m_maximum_amount_isValid = false;

    m_minimum_amount_isSet = false;
    m_minimum_amount_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_o_auth_uri_isSet = false;
    m_o_auth_uri_isValid = false;

    m_refund_uri_isSet = false;
    m_refund_uri_isValid = false;

    m_supported_currencies_isSet = false;
    m_supported_currencies_isValid = false;

    m_supports_clients_import_isSet = false;
    m_supports_clients_import_isValid = false;

    m_supports_instant_checkout_isSet = false;
    m_supports_instant_checkout_isValid = false;

    m_supports_refund_isSet = false;
    m_supports_refund_isValid = false;
}

void OAIPaymentGateway::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentGateway::fromJsonObject(QJsonObject json) {

    m_can_disconnect_isValid = ::OpenAPI::fromJsonValue(m_can_disconnect, json[QString("CanDisconnect")]);
    m_can_disconnect_isSet = !json[QString("CanDisconnect")].isNull() && m_can_disconnect_isValid;

    m_client_import_uri_isValid = ::OpenAPI::fromJsonValue(m_client_import_uri, json[QString("ClientImportUri")]);
    m_client_import_uri_isSet = !json[QString("ClientImportUri")].isNull() && m_client_import_uri_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("ConnectionType")]);
    m_connection_type_isSet = !json[QString("ConnectionType")].isNull() && m_connection_type_isValid;

    m_external_connection_id_isValid = ::OpenAPI::fromJsonValue(m_external_connection_id, json[QString("ExternalConnectionId")]);
    m_external_connection_id_isSet = !json[QString("ExternalConnectionId")].isNull() && m_external_connection_id_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("Fields")]);
    m_fields_isSet = !json[QString("Fields")].isNull() && m_fields_isValid;

    m_is_connected_isValid = ::OpenAPI::fromJsonValue(m_is_connected, json[QString("IsConnected")]);
    m_is_connected_isSet = !json[QString("IsConnected")].isNull() && m_is_connected_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("IsEnabled")]);
    m_is_enabled_isSet = !json[QString("IsEnabled")].isNull() && m_is_enabled_isValid;

    m_maximum_amount_isValid = ::OpenAPI::fromJsonValue(m_maximum_amount, json[QString("MaximumAmount")]);
    m_maximum_amount_isSet = !json[QString("MaximumAmount")].isNull() && m_maximum_amount_isValid;

    m_minimum_amount_isValid = ::OpenAPI::fromJsonValue(m_minimum_amount, json[QString("MinimumAmount")]);
    m_minimum_amount_isSet = !json[QString("MinimumAmount")].isNull() && m_minimum_amount_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_o_auth_uri_isValid = ::OpenAPI::fromJsonValue(m_o_auth_uri, json[QString("OAuthUri")]);
    m_o_auth_uri_isSet = !json[QString("OAuthUri")].isNull() && m_o_auth_uri_isValid;

    m_refund_uri_isValid = ::OpenAPI::fromJsonValue(m_refund_uri, json[QString("RefundUri")]);
    m_refund_uri_isSet = !json[QString("RefundUri")].isNull() && m_refund_uri_isValid;

    m_supported_currencies_isValid = ::OpenAPI::fromJsonValue(m_supported_currencies, json[QString("SupportedCurrencies")]);
    m_supported_currencies_isSet = !json[QString("SupportedCurrencies")].isNull() && m_supported_currencies_isValid;

    m_supports_clients_import_isValid = ::OpenAPI::fromJsonValue(m_supports_clients_import, json[QString("SupportsClientsImport")]);
    m_supports_clients_import_isSet = !json[QString("SupportsClientsImport")].isNull() && m_supports_clients_import_isValid;

    m_supports_instant_checkout_isValid = ::OpenAPI::fromJsonValue(m_supports_instant_checkout, json[QString("SupportsInstantCheckout")]);
    m_supports_instant_checkout_isSet = !json[QString("SupportsInstantCheckout")].isNull() && m_supports_instant_checkout_isValid;

    m_supports_refund_isValid = ::OpenAPI::fromJsonValue(m_supports_refund, json[QString("SupportsRefund")]);
    m_supports_refund_isSet = !json[QString("SupportsRefund")].isNull() && m_supports_refund_isValid;
}

QString OAIPaymentGateway::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentGateway::asJsonObject() const {
    QJsonObject obj;
    if (m_can_disconnect_isSet) {
        obj.insert(QString("CanDisconnect"), ::OpenAPI::toJsonValue(m_can_disconnect));
    }
    if (m_client_import_uri_isSet) {
        obj.insert(QString("ClientImportUri"), ::OpenAPI::toJsonValue(m_client_import_uri));
    }
    if (m_connection_type_isSet) {
        obj.insert(QString("ConnectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_external_connection_id_isSet) {
        obj.insert(QString("ExternalConnectionId"), ::OpenAPI::toJsonValue(m_external_connection_id));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("Fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_is_connected_isSet) {
        obj.insert(QString("IsConnected"), ::OpenAPI::toJsonValue(m_is_connected));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("IsEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_maximum_amount_isSet) {
        obj.insert(QString("MaximumAmount"), ::OpenAPI::toJsonValue(m_maximum_amount));
    }
    if (m_minimum_amount_isSet) {
        obj.insert(QString("MinimumAmount"), ::OpenAPI::toJsonValue(m_minimum_amount));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_o_auth_uri_isSet) {
        obj.insert(QString("OAuthUri"), ::OpenAPI::toJsonValue(m_o_auth_uri));
    }
    if (m_refund_uri_isSet) {
        obj.insert(QString("RefundUri"), ::OpenAPI::toJsonValue(m_refund_uri));
    }
    if (m_supported_currencies.size() > 0) {
        obj.insert(QString("SupportedCurrencies"), ::OpenAPI::toJsonValue(m_supported_currencies));
    }
    if (m_supports_clients_import_isSet) {
        obj.insert(QString("SupportsClientsImport"), ::OpenAPI::toJsonValue(m_supports_clients_import));
    }
    if (m_supports_instant_checkout_isSet) {
        obj.insert(QString("SupportsInstantCheckout"), ::OpenAPI::toJsonValue(m_supports_instant_checkout));
    }
    if (m_supports_refund_isSet) {
        obj.insert(QString("SupportsRefund"), ::OpenAPI::toJsonValue(m_supports_refund));
    }
    return obj;
}

bool OAIPaymentGateway::isCanDisconnect() const {
    return m_can_disconnect;
}
void OAIPaymentGateway::setCanDisconnect(const bool &can_disconnect) {
    m_can_disconnect = can_disconnect;
    m_can_disconnect_isSet = true;
}

bool OAIPaymentGateway::is_can_disconnect_Set() const{
    return m_can_disconnect_isSet;
}

bool OAIPaymentGateway::is_can_disconnect_Valid() const{
    return m_can_disconnect_isValid;
}

QString OAIPaymentGateway::getClientImportUri() const {
    return m_client_import_uri;
}
void OAIPaymentGateway::setClientImportUri(const QString &client_import_uri) {
    m_client_import_uri = client_import_uri;
    m_client_import_uri_isSet = true;
}

bool OAIPaymentGateway::is_client_import_uri_Set() const{
    return m_client_import_uri_isSet;
}

bool OAIPaymentGateway::is_client_import_uri_Valid() const{
    return m_client_import_uri_isValid;
}

QString OAIPaymentGateway::getConnectionType() const {
    return m_connection_type;
}
void OAIPaymentGateway::setConnectionType(const QString &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIPaymentGateway::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIPaymentGateway::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

qint32 OAIPaymentGateway::getExternalConnectionId() const {
    return m_external_connection_id;
}
void OAIPaymentGateway::setExternalConnectionId(const qint32 &external_connection_id) {
    m_external_connection_id = external_connection_id;
    m_external_connection_id_isSet = true;
}

bool OAIPaymentGateway::is_external_connection_id_Set() const{
    return m_external_connection_id_isSet;
}

bool OAIPaymentGateway::is_external_connection_id_Valid() const{
    return m_external_connection_id_isValid;
}

QList<OAIPaymentGatewayInputField> OAIPaymentGateway::getFields() const {
    return m_fields;
}
void OAIPaymentGateway::setFields(const QList<OAIPaymentGatewayInputField> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIPaymentGateway::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIPaymentGateway::is_fields_Valid() const{
    return m_fields_isValid;
}

bool OAIPaymentGateway::isIsConnected() const {
    return m_is_connected;
}
void OAIPaymentGateway::setIsConnected(const bool &is_connected) {
    m_is_connected = is_connected;
    m_is_connected_isSet = true;
}

bool OAIPaymentGateway::is_is_connected_Set() const{
    return m_is_connected_isSet;
}

bool OAIPaymentGateway::is_is_connected_Valid() const{
    return m_is_connected_isValid;
}

bool OAIPaymentGateway::isIsEnabled() const {
    return m_is_enabled;
}
void OAIPaymentGateway::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIPaymentGateway::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIPaymentGateway::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

double OAIPaymentGateway::getMaximumAmount() const {
    return m_maximum_amount;
}
void OAIPaymentGateway::setMaximumAmount(const double &maximum_amount) {
    m_maximum_amount = maximum_amount;
    m_maximum_amount_isSet = true;
}

bool OAIPaymentGateway::is_maximum_amount_Set() const{
    return m_maximum_amount_isSet;
}

bool OAIPaymentGateway::is_maximum_amount_Valid() const{
    return m_maximum_amount_isValid;
}

double OAIPaymentGateway::getMinimumAmount() const {
    return m_minimum_amount;
}
void OAIPaymentGateway::setMinimumAmount(const double &minimum_amount) {
    m_minimum_amount = minimum_amount;
    m_minimum_amount_isSet = true;
}

bool OAIPaymentGateway::is_minimum_amount_Set() const{
    return m_minimum_amount_isSet;
}

bool OAIPaymentGateway::is_minimum_amount_Valid() const{
    return m_minimum_amount_isValid;
}

QString OAIPaymentGateway::getName() const {
    return m_name;
}
void OAIPaymentGateway::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPaymentGateway::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPaymentGateway::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPaymentGateway::getOAuthUri() const {
    return m_o_auth_uri;
}
void OAIPaymentGateway::setOAuthUri(const QString &o_auth_uri) {
    m_o_auth_uri = o_auth_uri;
    m_o_auth_uri_isSet = true;
}

bool OAIPaymentGateway::is_o_auth_uri_Set() const{
    return m_o_auth_uri_isSet;
}

bool OAIPaymentGateway::is_o_auth_uri_Valid() const{
    return m_o_auth_uri_isValid;
}

QString OAIPaymentGateway::getRefundUri() const {
    return m_refund_uri;
}
void OAIPaymentGateway::setRefundUri(const QString &refund_uri) {
    m_refund_uri = refund_uri;
    m_refund_uri_isSet = true;
}

bool OAIPaymentGateway::is_refund_uri_Set() const{
    return m_refund_uri_isSet;
}

bool OAIPaymentGateway::is_refund_uri_Valid() const{
    return m_refund_uri_isValid;
}

QList<OAICurrency> OAIPaymentGateway::getSupportedCurrencies() const {
    return m_supported_currencies;
}
void OAIPaymentGateway::setSupportedCurrencies(const QList<OAICurrency> &supported_currencies) {
    m_supported_currencies = supported_currencies;
    m_supported_currencies_isSet = true;
}

bool OAIPaymentGateway::is_supported_currencies_Set() const{
    return m_supported_currencies_isSet;
}

bool OAIPaymentGateway::is_supported_currencies_Valid() const{
    return m_supported_currencies_isValid;
}

bool OAIPaymentGateway::isSupportsClientsImport() const {
    return m_supports_clients_import;
}
void OAIPaymentGateway::setSupportsClientsImport(const bool &supports_clients_import) {
    m_supports_clients_import = supports_clients_import;
    m_supports_clients_import_isSet = true;
}

bool OAIPaymentGateway::is_supports_clients_import_Set() const{
    return m_supports_clients_import_isSet;
}

bool OAIPaymentGateway::is_supports_clients_import_Valid() const{
    return m_supports_clients_import_isValid;
}

bool OAIPaymentGateway::isSupportsInstantCheckout() const {
    return m_supports_instant_checkout;
}
void OAIPaymentGateway::setSupportsInstantCheckout(const bool &supports_instant_checkout) {
    m_supports_instant_checkout = supports_instant_checkout;
    m_supports_instant_checkout_isSet = true;
}

bool OAIPaymentGateway::is_supports_instant_checkout_Set() const{
    return m_supports_instant_checkout_isSet;
}

bool OAIPaymentGateway::is_supports_instant_checkout_Valid() const{
    return m_supports_instant_checkout_isValid;
}

bool OAIPaymentGateway::isSupportsRefund() const {
    return m_supports_refund;
}
void OAIPaymentGateway::setSupportsRefund(const bool &supports_refund) {
    m_supports_refund = supports_refund;
    m_supports_refund_isSet = true;
}

bool OAIPaymentGateway::is_supports_refund_Set() const{
    return m_supports_refund_isSet;
}

bool OAIPaymentGateway::is_supports_refund_Valid() const{
    return m_supports_refund_isValid;
}

bool OAIPaymentGateway::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_disconnect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_import_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_connected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_o_auth_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_currencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_clients_import_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_instant_checkout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_refund_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentGateway::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
