/*
 * Facial Recognition Reverse Image Face Search API
 * Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>
 *
 * The version of the OpenAPI document: v1.02
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InputImage;
import org.openapitools.client.model.SearchResults;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BrowserJsonResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:45.467249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BrowserJsonResponse {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_HAS_EMPTY_IMAGES = "hasEmptyImages";
  @SerializedName(SERIALIZED_NAME_HAS_EMPTY_IMAGES)
  private Boolean hasEmptyImages;

  public static final String SERIALIZED_NAME_ID_SEARCH = "id_search";
  @SerializedName(SERIALIZED_NAME_ID_SEARCH)
  private String idSearch;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private List<InputImage> input;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_OUTPUT = "output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private SearchResults output;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Integer progress;

  public BrowserJsonResponse() {
  }

  public BrowserJsonResponse(
     Boolean hasEmptyImages
  ) {
    this();
    this.hasEmptyImages = hasEmptyImages;
  }

  public BrowserJsonResponse code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public BrowserJsonResponse error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  /**
   * Get hasEmptyImages
   * @return hasEmptyImages
   */
  @javax.annotation.Nullable
  public Boolean getHasEmptyImages() {
    return hasEmptyImages;
  }



  public BrowserJsonResponse idSearch(String idSearch) {
    this.idSearch = idSearch;
    return this;
  }

  /**
   * Get idSearch
   * @return idSearch
   */
  @javax.annotation.Nullable
  public String getIdSearch() {
    return idSearch;
  }

  public void setIdSearch(String idSearch) {
    this.idSearch = idSearch;
  }


  public BrowserJsonResponse input(List<InputImage> input) {
    this.input = input;
    return this;
  }

  public BrowserJsonResponse addInputItem(InputImage inputItem) {
    if (this.input == null) {
      this.input = new ArrayList<>();
    }
    this.input.add(inputItem);
    return this;
  }

  /**
   * Get input
   * @return input
   */
  @javax.annotation.Nullable
  public List<InputImage> getInput() {
    return input;
  }

  public void setInput(List<InputImage> input) {
    this.input = input;
  }


  public BrowserJsonResponse message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public BrowserJsonResponse output(SearchResults output) {
    this.output = output;
    return this;
  }

  /**
   * Get output
   * @return output
   */
  @javax.annotation.Nullable
  public SearchResults getOutput() {
    return output;
  }

  public void setOutput(SearchResults output) {
    this.output = output;
  }


  public BrowserJsonResponse progress(Integer progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Get progress
   * @return progress
   */
  @javax.annotation.Nullable
  public Integer getProgress() {
    return progress;
  }

  public void setProgress(Integer progress) {
    this.progress = progress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrowserJsonResponse browserJsonResponse = (BrowserJsonResponse) o;
    return Objects.equals(this.code, browserJsonResponse.code) &&
        Objects.equals(this.error, browserJsonResponse.error) &&
        Objects.equals(this.hasEmptyImages, browserJsonResponse.hasEmptyImages) &&
        Objects.equals(this.idSearch, browserJsonResponse.idSearch) &&
        Objects.equals(this.input, browserJsonResponse.input) &&
        Objects.equals(this.message, browserJsonResponse.message) &&
        Objects.equals(this.output, browserJsonResponse.output) &&
        Objects.equals(this.progress, browserJsonResponse.progress);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, error, hasEmptyImages, idSearch, input, message, output, progress);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrowserJsonResponse {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    hasEmptyImages: ").append(toIndentedString(hasEmptyImages)).append("\n");
    sb.append("    idSearch: ").append(toIndentedString(idSearch)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("error");
    openapiFields.add("hasEmptyImages");
    openapiFields.add("id_search");
    openapiFields.add("input");
    openapiFields.add("message");
    openapiFields.add("output");
    openapiFields.add("progress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BrowserJsonResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BrowserJsonResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrowserJsonResponse is not found in the empty JSON string", BrowserJsonResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BrowserJsonResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BrowserJsonResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if ((jsonObj.get("id_search") != null && !jsonObj.get("id_search").isJsonNull()) && !jsonObj.get("id_search").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_search` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_search").toString()));
      }
      if (jsonObj.get("input") != null && !jsonObj.get("input").isJsonNull()) {
        JsonArray jsonArrayinput = jsonObj.getAsJsonArray("input");
        if (jsonArrayinput != null) {
          // ensure the json data is an array
          if (!jsonObj.get("input").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `input` to be an array in the JSON string but got `%s`", jsonObj.get("input").toString()));
          }

          // validate the optional field `input` (array)
          for (int i = 0; i < jsonArrayinput.size(); i++) {
            InputImage.validateJsonElement(jsonArrayinput.get(i));
          };
        }
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `output`
      if (jsonObj.get("output") != null && !jsonObj.get("output").isJsonNull()) {
        SearchResults.validateJsonElement(jsonObj.get("output"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrowserJsonResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrowserJsonResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrowserJsonResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrowserJsonResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BrowserJsonResponse>() {
           @Override
           public void write(JsonWriter out, BrowserJsonResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BrowserJsonResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BrowserJsonResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BrowserJsonResponse
   * @throws IOException if the JSON string is invalid with respect to BrowserJsonResponse
   */
  public static BrowserJsonResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrowserJsonResponse.class);
  }

  /**
   * Convert an instance of BrowserJsonResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

