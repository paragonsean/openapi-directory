/*
 * Facial Recognition Reverse Image Face Search API
 * Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>
 *
 * The version of the OpenAPI document: v1.02
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InfoResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:45.467249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InfoResponse {
  public static final String SERIALIZED_NAME_FACES = "faces";
  @SerializedName(SERIALIZED_NAME_FACES)
  private Integer faces;

  public static final String SERIALIZED_NAME_HAS_CREDITS_TO_SEARCH = "has_credits_to_search";
  @SerializedName(SERIALIZED_NAME_HAS_CREDITS_TO_SEARCH)
  private Boolean hasCreditsToSearch;

  public static final String SERIALIZED_NAME_IS_ONLINE = "is_online";
  @SerializedName(SERIALIZED_NAME_IS_ONLINE)
  private Boolean isOnline;

  public static final String SERIALIZED_NAME_REMAINING_CREDITS = "remaining_credits";
  @SerializedName(SERIALIZED_NAME_REMAINING_CREDITS)
  private Integer remainingCredits;

  public InfoResponse() {
  }

  public InfoResponse faces(Integer faces) {
    this.faces = faces;
    return this;
  }

  /**
   * Get faces
   * @return faces
   */
  @javax.annotation.Nullable
  public Integer getFaces() {
    return faces;
  }

  public void setFaces(Integer faces) {
    this.faces = faces;
  }


  public InfoResponse hasCreditsToSearch(Boolean hasCreditsToSearch) {
    this.hasCreditsToSearch = hasCreditsToSearch;
    return this;
  }

  /**
   * Get hasCreditsToSearch
   * @return hasCreditsToSearch
   */
  @javax.annotation.Nullable
  public Boolean getHasCreditsToSearch() {
    return hasCreditsToSearch;
  }

  public void setHasCreditsToSearch(Boolean hasCreditsToSearch) {
    this.hasCreditsToSearch = hasCreditsToSearch;
  }


  public InfoResponse isOnline(Boolean isOnline) {
    this.isOnline = isOnline;
    return this;
  }

  /**
   * Get isOnline
   * @return isOnline
   */
  @javax.annotation.Nullable
  public Boolean getIsOnline() {
    return isOnline;
  }

  public void setIsOnline(Boolean isOnline) {
    this.isOnline = isOnline;
  }


  public InfoResponse remainingCredits(Integer remainingCredits) {
    this.remainingCredits = remainingCredits;
    return this;
  }

  /**
   * Get remainingCredits
   * @return remainingCredits
   */
  @javax.annotation.Nullable
  public Integer getRemainingCredits() {
    return remainingCredits;
  }

  public void setRemainingCredits(Integer remainingCredits) {
    this.remainingCredits = remainingCredits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfoResponse infoResponse = (InfoResponse) o;
    return Objects.equals(this.faces, infoResponse.faces) &&
        Objects.equals(this.hasCreditsToSearch, infoResponse.hasCreditsToSearch) &&
        Objects.equals(this.isOnline, infoResponse.isOnline) &&
        Objects.equals(this.remainingCredits, infoResponse.remainingCredits);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(faces, hasCreditsToSearch, isOnline, remainingCredits);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfoResponse {\n");
    sb.append("    faces: ").append(toIndentedString(faces)).append("\n");
    sb.append("    hasCreditsToSearch: ").append(toIndentedString(hasCreditsToSearch)).append("\n");
    sb.append("    isOnline: ").append(toIndentedString(isOnline)).append("\n");
    sb.append("    remainingCredits: ").append(toIndentedString(remainingCredits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("faces");
    openapiFields.add("has_credits_to_search");
    openapiFields.add("is_online");
    openapiFields.add("remaining_credits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InfoResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InfoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InfoResponse is not found in the empty JSON string", InfoResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InfoResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InfoResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InfoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InfoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InfoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InfoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<InfoResponse>() {
           @Override
           public void write(JsonWriter out, InfoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InfoResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InfoResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InfoResponse
   * @throws IOException if the JSON string is invalid with respect to InfoResponse
   */
  public static InfoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InfoResponse.class);
  }

  /**
   * Convert an instance of InfoResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

