/*
 * Facial Recognition Reverse Image Face Search API
 * Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>
 *
 * The version of the OpenAPI document: v1.02
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SearchItem;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchResults
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:45.467249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchResults {
  public static final String SERIALIZED_NAME_DEMO = "demo";
  @SerializedName(SERIALIZED_NAME_DEMO)
  private Boolean demo;

  public static final String SERIALIZED_NAME_FACE_PER_SEC = "face_per_sec";
  @SerializedName(SERIALIZED_NAME_FACE_PER_SEC)
  private Integer facePerSec;

  public static final String SERIALIZED_NAME_FREE_RAM = "freeRam";
  @SerializedName(SERIALIZED_NAME_FREE_RAM)
  private Double freeRam;

  public static final String SERIALIZED_NAME_IMAGES_IN_BUNDLE = "images_in_bundle";
  @SerializedName(SERIALIZED_NAME_IMAGES_IN_BUNDLE)
  private Integer imagesInBundle;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<SearchItem> items;

  public static final String SERIALIZED_NAME_MAX_SCORE = "max_score";
  @SerializedName(SERIALIZED_NAME_MAX_SCORE)
  private Integer maxScore;

  public static final String SERIALIZED_NAME_PERFORMANCE = "performance";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE)
  private String performance;

  public static final String SERIALIZED_NAME_SCANED_TILL_INDEX = "scaned_till_index";
  @SerializedName(SERIALIZED_NAME_SCANED_TILL_INDEX)
  private Integer scanedTillIndex;

  public static final String SERIALIZED_NAME_SEARCHED_FACES = "searchedFaces";
  @SerializedName(SERIALIZED_NAME_SEARCHED_FACES)
  private Integer searchedFaces;

  public static final String SERIALIZED_NAME_TOOK_SECONDS = "tookSeconds";
  @SerializedName(SERIALIZED_NAME_TOOK_SECONDS)
  private Double tookSeconds;

  public static final String SERIALIZED_NAME_TOOK_SECONDS_DOWNLOAD = "tookSecondsDownload";
  @SerializedName(SERIALIZED_NAME_TOOK_SECONDS_DOWNLOAD)
  private Double tookSecondsDownload;

  public static final String SERIALIZED_NAME_TOOK_SECONDS_QUEUE = "tookSecondsQueue";
  @SerializedName(SERIALIZED_NAME_TOOK_SECONDS_QUEUE)
  private Double tookSecondsQueue;

  public SearchResults() {
  }

  public SearchResults(
     Integer facePerSec, 
     Integer maxScore, 
     String performance
  ) {
    this();
    this.facePerSec = facePerSec;
    this.maxScore = maxScore;
    this.performance = performance;
  }

  public SearchResults demo(Boolean demo) {
    this.demo = demo;
    return this;
  }

  /**
   * Get demo
   * @return demo
   */
  @javax.annotation.Nullable
  public Boolean getDemo() {
    return demo;
  }

  public void setDemo(Boolean demo) {
    this.demo = demo;
  }


  /**
   * Get facePerSec
   * @return facePerSec
   */
  @javax.annotation.Nullable
  public Integer getFacePerSec() {
    return facePerSec;
  }



  public SearchResults freeRam(Double freeRam) {
    this.freeRam = freeRam;
    return this;
  }

  /**
   * Get freeRam
   * @return freeRam
   */
  @javax.annotation.Nullable
  public Double getFreeRam() {
    return freeRam;
  }

  public void setFreeRam(Double freeRam) {
    this.freeRam = freeRam;
  }


  public SearchResults imagesInBundle(Integer imagesInBundle) {
    this.imagesInBundle = imagesInBundle;
    return this;
  }

  /**
   * Get imagesInBundle
   * @return imagesInBundle
   */
  @javax.annotation.Nullable
  public Integer getImagesInBundle() {
    return imagesInBundle;
  }

  public void setImagesInBundle(Integer imagesInBundle) {
    this.imagesInBundle = imagesInBundle;
  }


  public SearchResults items(List<SearchItem> items) {
    this.items = items;
    return this;
  }

  public SearchResults addItemsItem(SearchItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public List<SearchItem> getItems() {
    return items;
  }

  public void setItems(List<SearchItem> items) {
    this.items = items;
  }


  /**
   * Get maxScore
   * @return maxScore
   */
  @javax.annotation.Nullable
  public Integer getMaxScore() {
    return maxScore;
  }



  /**
   * Get performance
   * @return performance
   */
  @javax.annotation.Nullable
  public String getPerformance() {
    return performance;
  }



  public SearchResults scanedTillIndex(Integer scanedTillIndex) {
    this.scanedTillIndex = scanedTillIndex;
    return this;
  }

  /**
   * Get scanedTillIndex
   * @return scanedTillIndex
   */
  @javax.annotation.Nullable
  public Integer getScanedTillIndex() {
    return scanedTillIndex;
  }

  public void setScanedTillIndex(Integer scanedTillIndex) {
    this.scanedTillIndex = scanedTillIndex;
  }


  public SearchResults searchedFaces(Integer searchedFaces) {
    this.searchedFaces = searchedFaces;
    return this;
  }

  /**
   * Get searchedFaces
   * @return searchedFaces
   */
  @javax.annotation.Nullable
  public Integer getSearchedFaces() {
    return searchedFaces;
  }

  public void setSearchedFaces(Integer searchedFaces) {
    this.searchedFaces = searchedFaces;
  }


  public SearchResults tookSeconds(Double tookSeconds) {
    this.tookSeconds = tookSeconds;
    return this;
  }

  /**
   * Get tookSeconds
   * @return tookSeconds
   */
  @javax.annotation.Nullable
  public Double getTookSeconds() {
    return tookSeconds;
  }

  public void setTookSeconds(Double tookSeconds) {
    this.tookSeconds = tookSeconds;
  }


  public SearchResults tookSecondsDownload(Double tookSecondsDownload) {
    this.tookSecondsDownload = tookSecondsDownload;
    return this;
  }

  /**
   * Get tookSecondsDownload
   * @return tookSecondsDownload
   */
  @javax.annotation.Nullable
  public Double getTookSecondsDownload() {
    return tookSecondsDownload;
  }

  public void setTookSecondsDownload(Double tookSecondsDownload) {
    this.tookSecondsDownload = tookSecondsDownload;
  }


  public SearchResults tookSecondsQueue(Double tookSecondsQueue) {
    this.tookSecondsQueue = tookSecondsQueue;
    return this;
  }

  /**
   * Get tookSecondsQueue
   * @return tookSecondsQueue
   */
  @javax.annotation.Nullable
  public Double getTookSecondsQueue() {
    return tookSecondsQueue;
  }

  public void setTookSecondsQueue(Double tookSecondsQueue) {
    this.tookSecondsQueue = tookSecondsQueue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchResults searchResults = (SearchResults) o;
    return Objects.equals(this.demo, searchResults.demo) &&
        Objects.equals(this.facePerSec, searchResults.facePerSec) &&
        Objects.equals(this.freeRam, searchResults.freeRam) &&
        Objects.equals(this.imagesInBundle, searchResults.imagesInBundle) &&
        Objects.equals(this.items, searchResults.items) &&
        Objects.equals(this.maxScore, searchResults.maxScore) &&
        Objects.equals(this.performance, searchResults.performance) &&
        Objects.equals(this.scanedTillIndex, searchResults.scanedTillIndex) &&
        Objects.equals(this.searchedFaces, searchResults.searchedFaces) &&
        Objects.equals(this.tookSeconds, searchResults.tookSeconds) &&
        Objects.equals(this.tookSecondsDownload, searchResults.tookSecondsDownload) &&
        Objects.equals(this.tookSecondsQueue, searchResults.tookSecondsQueue);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(demo, facePerSec, freeRam, imagesInBundle, items, maxScore, performance, scanedTillIndex, searchedFaces, tookSeconds, tookSecondsDownload, tookSecondsQueue);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchResults {\n");
    sb.append("    demo: ").append(toIndentedString(demo)).append("\n");
    sb.append("    facePerSec: ").append(toIndentedString(facePerSec)).append("\n");
    sb.append("    freeRam: ").append(toIndentedString(freeRam)).append("\n");
    sb.append("    imagesInBundle: ").append(toIndentedString(imagesInBundle)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    maxScore: ").append(toIndentedString(maxScore)).append("\n");
    sb.append("    performance: ").append(toIndentedString(performance)).append("\n");
    sb.append("    scanedTillIndex: ").append(toIndentedString(scanedTillIndex)).append("\n");
    sb.append("    searchedFaces: ").append(toIndentedString(searchedFaces)).append("\n");
    sb.append("    tookSeconds: ").append(toIndentedString(tookSeconds)).append("\n");
    sb.append("    tookSecondsDownload: ").append(toIndentedString(tookSecondsDownload)).append("\n");
    sb.append("    tookSecondsQueue: ").append(toIndentedString(tookSecondsQueue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("demo");
    openapiFields.add("face_per_sec");
    openapiFields.add("freeRam");
    openapiFields.add("images_in_bundle");
    openapiFields.add("items");
    openapiFields.add("max_score");
    openapiFields.add("performance");
    openapiFields.add("scaned_till_index");
    openapiFields.add("searchedFaces");
    openapiFields.add("tookSeconds");
    openapiFields.add("tookSecondsDownload");
    openapiFields.add("tookSecondsQueue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchResults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchResults is not found in the empty JSON string", SearchResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            SearchItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("performance") != null && !jsonObj.get("performance").isJsonNull()) && !jsonObj.get("performance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `performance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("performance").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchResults.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchResults>() {
           @Override
           public void write(JsonWriter out, SearchResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchResults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchResults
   * @throws IOException if the JSON string is invalid with respect to SearchResults
   */
  public static SearchResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchResults.class);
  }

  /**
   * Convert an instance of SearchResults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

