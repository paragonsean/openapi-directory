/*
 * Facial Recognition Reverse Image Face Search API
 * Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>
 *
 * The version of the OpenAPI document: v1.02
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:45.467249-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchData {
  public static final String SERIALIZED_NAME_DEMO = "demo";
  @SerializedName(SERIALIZED_NAME_DEMO)
  private Boolean demo;

  public static final String SERIALIZED_NAME_ID_CAPTCHA = "id_captcha";
  @SerializedName(SERIALIZED_NAME_ID_CAPTCHA)
  private String idCaptcha;

  public static final String SERIALIZED_NAME_ID_SEARCH = "id_search";
  @SerializedName(SERIALIZED_NAME_ID_SEARCH)
  private String idSearch;

  public static final String SERIALIZED_NAME_STATUS_ONLY = "status_only";
  @SerializedName(SERIALIZED_NAME_STATUS_ONLY)
  private Boolean statusOnly;

  public static final String SERIALIZED_NAME_WITH_PROGRESS = "with_progress";
  @SerializedName(SERIALIZED_NAME_WITH_PROGRESS)
  private Boolean withProgress;

  public SearchData() {
  }

  public SearchData demo(Boolean demo) {
    this.demo = demo;
    return this;
  }

  /**
   * true &#x3D; searches only the first 100,000 faces, good for testing/debugging
   * @return demo
   */
  @javax.annotation.Nullable
  public Boolean getDemo() {
    return demo;
  }

  public void setDemo(Boolean demo) {
    this.demo = demo;
  }


  public SearchData idCaptcha(String idCaptcha) {
    this.idCaptcha = idCaptcha;
    return this;
  }

  /**
   * captcha is not used
   * @return idCaptcha
   */
  @javax.annotation.Nullable
  public String getIdCaptcha() {
    return idCaptcha;
  }

  public void setIdCaptcha(String idCaptcha) {
    this.idCaptcha = idCaptcha;
  }


  public SearchData idSearch(String idSearch) {
    this.idSearch = idSearch;
    return this;
  }

  /**
   * 
   * @return idSearch
   */
  @javax.annotation.Nullable
  public String getIdSearch() {
    return idSearch;
  }

  public void setIdSearch(String idSearch) {
    this.idSearch = idSearch;
  }


  public SearchData statusOnly(Boolean statusOnly) {
    this.statusOnly = statusOnly;
    return this;
  }

  /**
   * true &#x3D; don&#39;t submit a new search
   * @return statusOnly
   */
  @javax.annotation.Nullable
  public Boolean getStatusOnly() {
    return statusOnly;
  }

  public void setStatusOnly(Boolean statusOnly) {
    this.statusOnly = statusOnly;
  }


  public SearchData withProgress(Boolean withProgress) {
    this.withProgress = withProgress;
    return this;
  }

  /**
   * true &#x3D; return imediately with a progress. False waits until search is finished.
   * @return withProgress
   */
  @javax.annotation.Nullable
  public Boolean getWithProgress() {
    return withProgress;
  }

  public void setWithProgress(Boolean withProgress) {
    this.withProgress = withProgress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchData searchData = (SearchData) o;
    return Objects.equals(this.demo, searchData.demo) &&
        Objects.equals(this.idCaptcha, searchData.idCaptcha) &&
        Objects.equals(this.idSearch, searchData.idSearch) &&
        Objects.equals(this.statusOnly, searchData.statusOnly) &&
        Objects.equals(this.withProgress, searchData.withProgress);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(demo, idCaptcha, idSearch, statusOnly, withProgress);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchData {\n");
    sb.append("    demo: ").append(toIndentedString(demo)).append("\n");
    sb.append("    idCaptcha: ").append(toIndentedString(idCaptcha)).append("\n");
    sb.append("    idSearch: ").append(toIndentedString(idSearch)).append("\n");
    sb.append("    statusOnly: ").append(toIndentedString(statusOnly)).append("\n");
    sb.append("    withProgress: ").append(toIndentedString(withProgress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("demo");
    openapiFields.add("id_captcha");
    openapiFields.add("id_search");
    openapiFields.add("status_only");
    openapiFields.add("with_progress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchData is not found in the empty JSON string", SearchData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id_captcha") != null && !jsonObj.get("id_captcha").isJsonNull()) && !jsonObj.get("id_captcha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_captcha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_captcha").toString()));
      }
      if ((jsonObj.get("id_search") != null && !jsonObj.get("id_search").isJsonNull()) && !jsonObj.get("id_search").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_search` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_search").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchData.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchData>() {
           @Override
           public void write(JsonWriter out, SearchData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchData
   * @throws IOException if the JSON string is invalid with respect to SearchData
   */
  public static SearchData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchData.class);
  }

  /**
   * Convert an instance of SearchData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

