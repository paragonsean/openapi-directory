/**
 * Facial Recognition Reverse Image Face Search API
 * Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>
 *
 * The version of the OpenAPI document: v1.02
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BrowserJsonResponse from '../model/BrowserJsonResponse';
import InfoResponse from '../model/InfoResponse';
import SearchData from '../model/SearchData';

/**
* FaceCheckAPI service.
* @module api/FaceCheckAPIApi
* @version v1.02
*/
export default class FaceCheckAPIApi {

    /**
    * Constructs a new FaceCheckAPIApi. 
    * @alias module:api/FaceCheckAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiDeletePicPost operation.
     * @callback module:api/FaceCheckAPIApi~apiDeletePicPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrowserJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an image from a search request
     * @param {Object} opts Optional parameters
     * @param {String} [idSearch] 
     * @param {String} [idPic] 
     * @param {module:api/FaceCheckAPIApi~apiDeletePicPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrowserJsonResponse}
     */
    apiDeletePicPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id_search': opts['idSearch'],
        'id_pic': opts['idPic']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BrowserJsonResponse;
      return this.apiClient.callApi(
        '/api/delete_pic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInfoPost operation.
     * @callback module:api/FaceCheckAPIApi~apiInfoPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns remaining search credits, search engine online status, and number of indexed faces
     * @param {module:api/FaceCheckAPIApi~apiInfoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InfoResponse}
     */
    apiInfoPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InfoResponse;
      return this.apiClient.callApi(
        '/api/info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSearchPost operation.
     * @callback module:api/FaceCheckAPIApi~apiSearchPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrowserJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchData} [searchData] 
     * @param {module:api/FaceCheckAPIApi~apiSearchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrowserJsonResponse}
     */
    apiSearchPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['searchData'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/*+json', 'application/json', 'text/json'];
      let accepts = ['application/json'];
      let returnType = BrowserJsonResponse;
      return this.apiClient.callApi(
        '/api/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUploadPicPost operation.
     * @callback module:api/FaceCheckAPIApi~apiUploadPicPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrowserJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [idSearch] 
     * @param {Array.<File>} [images] 
     * @param {module:api/FaceCheckAPIApi~apiUploadPicPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrowserJsonResponse}
     */
    apiUploadPicPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'id_search': opts['idSearch'],
        'images': this.apiClient.buildCollectionParam(opts['images'], 'passthrough')
      };

      let authNames = ['Bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BrowserJsonResponse;
      return this.apiClient.callApi(
        '/api/upload_pic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
