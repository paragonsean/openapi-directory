/**
 * Facial Recognition Reverse Image Face Search API
 * Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>
 *
 * The version of the OpenAPI document: v1.02
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SearchData model module.
 * @module model/SearchData
 * @version v1.02
 */
class SearchData {
    /**
     * Constructs a new <code>SearchData</code>.
     * @alias module:model/SearchData
     */
    constructor() { 
        
        SearchData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchData} obj Optional instance to populate.
     * @return {module:model/SearchData} The populated <code>SearchData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchData();

            if (data.hasOwnProperty('demo')) {
                obj['demo'] = ApiClient.convertToType(data['demo'], 'Boolean');
            }
            if (data.hasOwnProperty('id_captcha')) {
                obj['id_captcha'] = ApiClient.convertToType(data['id_captcha'], 'String');
            }
            if (data.hasOwnProperty('id_search')) {
                obj['id_search'] = ApiClient.convertToType(data['id_search'], 'String');
            }
            if (data.hasOwnProperty('status_only')) {
                obj['status_only'] = ApiClient.convertToType(data['status_only'], 'Boolean');
            }
            if (data.hasOwnProperty('with_progress')) {
                obj['with_progress'] = ApiClient.convertToType(data['with_progress'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id_captcha'] && !(typeof data['id_captcha'] === 'string' || data['id_captcha'] instanceof String)) {
            throw new Error("Expected the field `id_captcha` to be a primitive type in the JSON string but got " + data['id_captcha']);
        }
        // ensure the json data is a string
        if (data['id_search'] && !(typeof data['id_search'] === 'string' || data['id_search'] instanceof String)) {
            throw new Error("Expected the field `id_search` to be a primitive type in the JSON string but got " + data['id_search']);
        }

        return true;
    }


}



/**
 * true = searches only the first 100,000 faces, good for testing/debugging
 * @member {Boolean} demo
 */
SearchData.prototype['demo'] = undefined;

/**
 * captcha is not used
 * @member {String} id_captcha
 */
SearchData.prototype['id_captcha'] = undefined;

/**
 * 
 * @member {String} id_search
 */
SearchData.prototype['id_search'] = undefined;

/**
 * true = don't submit a new search
 * @member {Boolean} status_only
 */
SearchData.prototype['status_only'] = undefined;

/**
 * true = return imediately with a progress. False waits until search is finished.
 * @member {Boolean} with_progress
 */
SearchData.prototype['with_progress'] = undefined;






export default SearchData;

