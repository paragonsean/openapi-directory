/**
 * Facial Recognition Reverse Image Face Search API
 * Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>
 *
 * The version of the OpenAPI document: v1.02
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputImage from './InputImage';
import SearchResults from './SearchResults';

/**
 * The BrowserJsonResponse model module.
 * @module model/BrowserJsonResponse
 * @version v1.02
 */
class BrowserJsonResponse {
    /**
     * Constructs a new <code>BrowserJsonResponse</code>.
     * @alias module:model/BrowserJsonResponse
     */
    constructor() { 
        
        BrowserJsonResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BrowserJsonResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BrowserJsonResponse} obj Optional instance to populate.
     * @return {module:model/BrowserJsonResponse} The populated <code>BrowserJsonResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BrowserJsonResponse();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('hasEmptyImages')) {
                obj['hasEmptyImages'] = ApiClient.convertToType(data['hasEmptyImages'], 'Boolean');
            }
            if (data.hasOwnProperty('id_search')) {
                obj['id_search'] = ApiClient.convertToType(data['id_search'], 'String');
            }
            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], [InputImage]);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('output')) {
                obj['output'] = SearchResults.constructFromObject(data['output']);
            }
            if (data.hasOwnProperty('progress')) {
                obj['progress'] = ApiClient.convertToType(data['progress'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BrowserJsonResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BrowserJsonResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['id_search'] && !(typeof data['id_search'] === 'string' || data['id_search'] instanceof String)) {
            throw new Error("Expected the field `id_search` to be a primitive type in the JSON string but got " + data['id_search']);
        }
        if (data['input']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['input'])) {
                throw new Error("Expected the field `input` to be an array in the JSON data but got " + data['input']);
            }
            // validate the optional field `input` (array)
            for (const item of data['input']) {
                InputImage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // validate the optional field `output`
        if (data['output']) { // data not null
          SearchResults.validateJSON(data['output']);
        }

        return true;
    }


}



/**
 * @member {String} code
 */
BrowserJsonResponse.prototype['code'] = undefined;

/**
 * @member {String} error
 */
BrowserJsonResponse.prototype['error'] = undefined;

/**
 * @member {Boolean} hasEmptyImages
 */
BrowserJsonResponse.prototype['hasEmptyImages'] = undefined;

/**
 * @member {String} id_search
 */
BrowserJsonResponse.prototype['id_search'] = undefined;

/**
 * @member {Array.<module:model/InputImage>} input
 */
BrowserJsonResponse.prototype['input'] = undefined;

/**
 * @member {String} message
 */
BrowserJsonResponse.prototype['message'] = undefined;

/**
 * @member {module:model/SearchResults} output
 */
BrowserJsonResponse.prototype['output'] = undefined;

/**
 * @member {Number} progress
 */
BrowserJsonResponse.prototype['progress'] = undefined;






export default BrowserJsonResponse;

