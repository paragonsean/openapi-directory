/**
 * Facial Recognition Reverse Image Face Search API
 * Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>
 *
 * The version of the OpenAPI document: v1.02
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FacialRecognitionReverseImageFaceSearchApi);
  }
}(this, function(expect, FacialRecognitionReverseImageFaceSearchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FacialRecognitionReverseImageFaceSearchApi.BrowserJsonResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BrowserJsonResponse', function() {
    it('should create an instance of BrowserJsonResponse', function() {
      // uncomment below and update the code to test BrowserJsonResponse
      //var instance = new FacialRecognitionReverseImageFaceSearchApi.BrowserJsonResponse();
      //expect(instance).to.be.a(FacialRecognitionReverseImageFaceSearchApi.BrowserJsonResponse);
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new FacialRecognitionReverseImageFaceSearchApi.BrowserJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property error (base name: "error")', function() {
      // uncomment below and update the code to test the property error
      //var instance = new FacialRecognitionReverseImageFaceSearchApi.BrowserJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property hasEmptyImages (base name: "hasEmptyImages")', function() {
      // uncomment below and update the code to test the property hasEmptyImages
      //var instance = new FacialRecognitionReverseImageFaceSearchApi.BrowserJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property idSearch (base name: "id_search")', function() {
      // uncomment below and update the code to test the property idSearch
      //var instance = new FacialRecognitionReverseImageFaceSearchApi.BrowserJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property input (base name: "input")', function() {
      // uncomment below and update the code to test the property input
      //var instance = new FacialRecognitionReverseImageFaceSearchApi.BrowserJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new FacialRecognitionReverseImageFaceSearchApi.BrowserJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property output (base name: "output")', function() {
      // uncomment below and update the code to test the property output
      //var instance = new FacialRecognitionReverseImageFaceSearchApi.BrowserJsonResponse();
      //expect(instance).to.be();
    });

    it('should have the property progress (base name: "progress")', function() {
      // uncomment below and update the code to test the property progress
      //var instance = new FacialRecognitionReverseImageFaceSearchApi.BrowserJsonResponse();
      //expect(instance).to.be();
    });

  });

}));
