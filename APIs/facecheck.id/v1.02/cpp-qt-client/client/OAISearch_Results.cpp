/**
 * Facial Recognition Reverse Image Face Search API
 * Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>
 *
 * The version of the OpenAPI document: v1.02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearch_Results.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearch_Results::OAISearch_Results(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearch_Results::OAISearch_Results() {
    this->initializeModel();
}

OAISearch_Results::~OAISearch_Results() {}

void OAISearch_Results::initializeModel() {

    m_demo_isSet = false;
    m_demo_isValid = false;

    m_face_per_sec_isSet = false;
    m_face_per_sec_isValid = false;

    m_free_ram_isSet = false;
    m_free_ram_isValid = false;

    m_images_in_bundle_isSet = false;
    m_images_in_bundle_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_max_score_isSet = false;
    m_max_score_isValid = false;

    m_performance_isSet = false;
    m_performance_isValid = false;

    m_scaned_till_index_isSet = false;
    m_scaned_till_index_isValid = false;

    m_searched_faces_isSet = false;
    m_searched_faces_isValid = false;

    m_took_seconds_isSet = false;
    m_took_seconds_isValid = false;

    m_took_seconds_download_isSet = false;
    m_took_seconds_download_isValid = false;

    m_took_seconds_queue_isSet = false;
    m_took_seconds_queue_isValid = false;
}

void OAISearch_Results::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearch_Results::fromJsonObject(QJsonObject json) {

    m_demo_isValid = ::OpenAPI::fromJsonValue(m_demo, json[QString("demo")]);
    m_demo_isSet = !json[QString("demo")].isNull() && m_demo_isValid;

    m_face_per_sec_isValid = ::OpenAPI::fromJsonValue(m_face_per_sec, json[QString("face_per_sec")]);
    m_face_per_sec_isSet = !json[QString("face_per_sec")].isNull() && m_face_per_sec_isValid;

    m_free_ram_isValid = ::OpenAPI::fromJsonValue(m_free_ram, json[QString("freeRam")]);
    m_free_ram_isSet = !json[QString("freeRam")].isNull() && m_free_ram_isValid;

    m_images_in_bundle_isValid = ::OpenAPI::fromJsonValue(m_images_in_bundle, json[QString("images_in_bundle")]);
    m_images_in_bundle_isSet = !json[QString("images_in_bundle")].isNull() && m_images_in_bundle_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_max_score_isValid = ::OpenAPI::fromJsonValue(m_max_score, json[QString("max_score")]);
    m_max_score_isSet = !json[QString("max_score")].isNull() && m_max_score_isValid;

    m_performance_isValid = ::OpenAPI::fromJsonValue(m_performance, json[QString("performance")]);
    m_performance_isSet = !json[QString("performance")].isNull() && m_performance_isValid;

    m_scaned_till_index_isValid = ::OpenAPI::fromJsonValue(m_scaned_till_index, json[QString("scaned_till_index")]);
    m_scaned_till_index_isSet = !json[QString("scaned_till_index")].isNull() && m_scaned_till_index_isValid;

    m_searched_faces_isValid = ::OpenAPI::fromJsonValue(m_searched_faces, json[QString("searchedFaces")]);
    m_searched_faces_isSet = !json[QString("searchedFaces")].isNull() && m_searched_faces_isValid;

    m_took_seconds_isValid = ::OpenAPI::fromJsonValue(m_took_seconds, json[QString("tookSeconds")]);
    m_took_seconds_isSet = !json[QString("tookSeconds")].isNull() && m_took_seconds_isValid;

    m_took_seconds_download_isValid = ::OpenAPI::fromJsonValue(m_took_seconds_download, json[QString("tookSecondsDownload")]);
    m_took_seconds_download_isSet = !json[QString("tookSecondsDownload")].isNull() && m_took_seconds_download_isValid;

    m_took_seconds_queue_isValid = ::OpenAPI::fromJsonValue(m_took_seconds_queue, json[QString("tookSecondsQueue")]);
    m_took_seconds_queue_isSet = !json[QString("tookSecondsQueue")].isNull() && m_took_seconds_queue_isValid;
}

QString OAISearch_Results::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearch_Results::asJsonObject() const {
    QJsonObject obj;
    if (m_demo_isSet) {
        obj.insert(QString("demo"), ::OpenAPI::toJsonValue(m_demo));
    }
    if (m_face_per_sec_isSet) {
        obj.insert(QString("face_per_sec"), ::OpenAPI::toJsonValue(m_face_per_sec));
    }
    if (m_free_ram_isSet) {
        obj.insert(QString("freeRam"), ::OpenAPI::toJsonValue(m_free_ram));
    }
    if (m_images_in_bundle_isSet) {
        obj.insert(QString("images_in_bundle"), ::OpenAPI::toJsonValue(m_images_in_bundle));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_max_score_isSet) {
        obj.insert(QString("max_score"), ::OpenAPI::toJsonValue(m_max_score));
    }
    if (m_performance_isSet) {
        obj.insert(QString("performance"), ::OpenAPI::toJsonValue(m_performance));
    }
    if (m_scaned_till_index_isSet) {
        obj.insert(QString("scaned_till_index"), ::OpenAPI::toJsonValue(m_scaned_till_index));
    }
    if (m_searched_faces_isSet) {
        obj.insert(QString("searchedFaces"), ::OpenAPI::toJsonValue(m_searched_faces));
    }
    if (m_took_seconds_isSet) {
        obj.insert(QString("tookSeconds"), ::OpenAPI::toJsonValue(m_took_seconds));
    }
    if (m_took_seconds_download_isSet) {
        obj.insert(QString("tookSecondsDownload"), ::OpenAPI::toJsonValue(m_took_seconds_download));
    }
    if (m_took_seconds_queue_isSet) {
        obj.insert(QString("tookSecondsQueue"), ::OpenAPI::toJsonValue(m_took_seconds_queue));
    }
    return obj;
}

bool OAISearch_Results::isDemo() const {
    return m_demo;
}
void OAISearch_Results::setDemo(const bool &demo) {
    m_demo = demo;
    m_demo_isSet = true;
}

bool OAISearch_Results::is_demo_Set() const{
    return m_demo_isSet;
}

bool OAISearch_Results::is_demo_Valid() const{
    return m_demo_isValid;
}

qint32 OAISearch_Results::getFacePerSec() const {
    return m_face_per_sec;
}
void OAISearch_Results::setFacePerSec(const qint32 &face_per_sec) {
    m_face_per_sec = face_per_sec;
    m_face_per_sec_isSet = true;
}

bool OAISearch_Results::is_face_per_sec_Set() const{
    return m_face_per_sec_isSet;
}

bool OAISearch_Results::is_face_per_sec_Valid() const{
    return m_face_per_sec_isValid;
}

double OAISearch_Results::getFreeRam() const {
    return m_free_ram;
}
void OAISearch_Results::setFreeRam(const double &free_ram) {
    m_free_ram = free_ram;
    m_free_ram_isSet = true;
}

bool OAISearch_Results::is_free_ram_Set() const{
    return m_free_ram_isSet;
}

bool OAISearch_Results::is_free_ram_Valid() const{
    return m_free_ram_isValid;
}

qint32 OAISearch_Results::getImagesInBundle() const {
    return m_images_in_bundle;
}
void OAISearch_Results::setImagesInBundle(const qint32 &images_in_bundle) {
    m_images_in_bundle = images_in_bundle;
    m_images_in_bundle_isSet = true;
}

bool OAISearch_Results::is_images_in_bundle_Set() const{
    return m_images_in_bundle_isSet;
}

bool OAISearch_Results::is_images_in_bundle_Valid() const{
    return m_images_in_bundle_isValid;
}

QList<OAISearchItem> OAISearch_Results::getItems() const {
    return m_items;
}
void OAISearch_Results::setItems(const QList<OAISearchItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAISearch_Results::is_items_Set() const{
    return m_items_isSet;
}

bool OAISearch_Results::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAISearch_Results::getMaxScore() const {
    return m_max_score;
}
void OAISearch_Results::setMaxScore(const qint32 &max_score) {
    m_max_score = max_score;
    m_max_score_isSet = true;
}

bool OAISearch_Results::is_max_score_Set() const{
    return m_max_score_isSet;
}

bool OAISearch_Results::is_max_score_Valid() const{
    return m_max_score_isValid;
}

QString OAISearch_Results::getPerformance() const {
    return m_performance;
}
void OAISearch_Results::setPerformance(const QString &performance) {
    m_performance = performance;
    m_performance_isSet = true;
}

bool OAISearch_Results::is_performance_Set() const{
    return m_performance_isSet;
}

bool OAISearch_Results::is_performance_Valid() const{
    return m_performance_isValid;
}

qint32 OAISearch_Results::getScanedTillIndex() const {
    return m_scaned_till_index;
}
void OAISearch_Results::setScanedTillIndex(const qint32 &scaned_till_index) {
    m_scaned_till_index = scaned_till_index;
    m_scaned_till_index_isSet = true;
}

bool OAISearch_Results::is_scaned_till_index_Set() const{
    return m_scaned_till_index_isSet;
}

bool OAISearch_Results::is_scaned_till_index_Valid() const{
    return m_scaned_till_index_isValid;
}

qint32 OAISearch_Results::getSearchedFaces() const {
    return m_searched_faces;
}
void OAISearch_Results::setSearchedFaces(const qint32 &searched_faces) {
    m_searched_faces = searched_faces;
    m_searched_faces_isSet = true;
}

bool OAISearch_Results::is_searched_faces_Set() const{
    return m_searched_faces_isSet;
}

bool OAISearch_Results::is_searched_faces_Valid() const{
    return m_searched_faces_isValid;
}

double OAISearch_Results::getTookSeconds() const {
    return m_took_seconds;
}
void OAISearch_Results::setTookSeconds(const double &took_seconds) {
    m_took_seconds = took_seconds;
    m_took_seconds_isSet = true;
}

bool OAISearch_Results::is_took_seconds_Set() const{
    return m_took_seconds_isSet;
}

bool OAISearch_Results::is_took_seconds_Valid() const{
    return m_took_seconds_isValid;
}

double OAISearch_Results::getTookSecondsDownload() const {
    return m_took_seconds_download;
}
void OAISearch_Results::setTookSecondsDownload(const double &took_seconds_download) {
    m_took_seconds_download = took_seconds_download;
    m_took_seconds_download_isSet = true;
}

bool OAISearch_Results::is_took_seconds_download_Set() const{
    return m_took_seconds_download_isSet;
}

bool OAISearch_Results::is_took_seconds_download_Valid() const{
    return m_took_seconds_download_isValid;
}

double OAISearch_Results::getTookSecondsQueue() const {
    return m_took_seconds_queue;
}
void OAISearch_Results::setTookSecondsQueue(const double &took_seconds_queue) {
    m_took_seconds_queue = took_seconds_queue;
    m_took_seconds_queue_isSet = true;
}

bool OAISearch_Results::is_took_seconds_queue_Set() const{
    return m_took_seconds_queue_isSet;
}

bool OAISearch_Results::is_took_seconds_queue_Valid() const{
    return m_took_seconds_queue_isValid;
}

bool OAISearch_Results::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_demo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_per_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_ram_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images_in_bundle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaned_till_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_searched_faces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_took_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_took_seconds_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_took_seconds_queue_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearch_Results::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
