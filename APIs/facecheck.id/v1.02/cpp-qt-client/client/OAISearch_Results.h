/**
 * Facial Recognition Reverse Image Face Search API
 * Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>
 *
 * The version of the OpenAPI document: v1.02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISearch_Results.h
 *
 * 
 */

#ifndef OAISearch_Results_H
#define OAISearch_Results_H

#include <QJsonObject>

#include "OAISearchItem.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISearchItem;

class OAISearch_Results : public OAIObject {
public:
    OAISearch_Results();
    OAISearch_Results(QString json);
    ~OAISearch_Results() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isDemo() const;
    void setDemo(const bool &demo);
    bool is_demo_Set() const;
    bool is_demo_Valid() const;

    qint32 getFacePerSec() const;
    void setFacePerSec(const qint32 &face_per_sec);
    bool is_face_per_sec_Set() const;
    bool is_face_per_sec_Valid() const;

    double getFreeRam() const;
    void setFreeRam(const double &free_ram);
    bool is_free_ram_Set() const;
    bool is_free_ram_Valid() const;

    qint32 getImagesInBundle() const;
    void setImagesInBundle(const qint32 &images_in_bundle);
    bool is_images_in_bundle_Set() const;
    bool is_images_in_bundle_Valid() const;

    QList<OAISearchItem> getItems() const;
    void setItems(const QList<OAISearchItem> &items);
    bool is_items_Set() const;
    bool is_items_Valid() const;

    qint32 getMaxScore() const;
    void setMaxScore(const qint32 &max_score);
    bool is_max_score_Set() const;
    bool is_max_score_Valid() const;

    QString getPerformance() const;
    void setPerformance(const QString &performance);
    bool is_performance_Set() const;
    bool is_performance_Valid() const;

    qint32 getScanedTillIndex() const;
    void setScanedTillIndex(const qint32 &scaned_till_index);
    bool is_scaned_till_index_Set() const;
    bool is_scaned_till_index_Valid() const;

    qint32 getSearchedFaces() const;
    void setSearchedFaces(const qint32 &searched_faces);
    bool is_searched_faces_Set() const;
    bool is_searched_faces_Valid() const;

    double getTookSeconds() const;
    void setTookSeconds(const double &took_seconds);
    bool is_took_seconds_Set() const;
    bool is_took_seconds_Valid() const;

    double getTookSecondsDownload() const;
    void setTookSecondsDownload(const double &took_seconds_download);
    bool is_took_seconds_download_Set() const;
    bool is_took_seconds_download_Valid() const;

    double getTookSecondsQueue() const;
    void setTookSecondsQueue(const double &took_seconds_queue);
    bool is_took_seconds_queue_Set() const;
    bool is_took_seconds_queue_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_demo;
    bool m_demo_isSet;
    bool m_demo_isValid;

    qint32 m_face_per_sec;
    bool m_face_per_sec_isSet;
    bool m_face_per_sec_isValid;

    double m_free_ram;
    bool m_free_ram_isSet;
    bool m_free_ram_isValid;

    qint32 m_images_in_bundle;
    bool m_images_in_bundle_isSet;
    bool m_images_in_bundle_isValid;

    QList<OAISearchItem> m_items;
    bool m_items_isSet;
    bool m_items_isValid;

    qint32 m_max_score;
    bool m_max_score_isSet;
    bool m_max_score_isValid;

    QString m_performance;
    bool m_performance_isSet;
    bool m_performance_isValid;

    qint32 m_scaned_till_index;
    bool m_scaned_till_index_isSet;
    bool m_scaned_till_index_isValid;

    qint32 m_searched_faces;
    bool m_searched_faces_isSet;
    bool m_searched_faces_isValid;

    double m_took_seconds;
    bool m_took_seconds_isSet;
    bool m_took_seconds_isValid;

    double m_took_seconds_download;
    bool m_took_seconds_download_isSet;
    bool m_took_seconds_download_isValid;

    double m_took_seconds_queue;
    bool m_took_seconds_queue_isSet;
    bool m_took_seconds_queue_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISearch_Results)

#endif // OAISearch_Results_H
