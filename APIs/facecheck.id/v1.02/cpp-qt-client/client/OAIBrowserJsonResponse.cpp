/**
 * Facial Recognition Reverse Image Face Search API
 * Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>
 *
 * The version of the OpenAPI document: v1.02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrowserJsonResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrowserJsonResponse::OAIBrowserJsonResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrowserJsonResponse::OAIBrowserJsonResponse() {
    this->initializeModel();
}

OAIBrowserJsonResponse::~OAIBrowserJsonResponse() {}

void OAIBrowserJsonResponse::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_has_empty_images_isSet = false;
    m_has_empty_images_isValid = false;

    m_id_search_isSet = false;
    m_id_search_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_output_isSet = false;
    m_output_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;
}

void OAIBrowserJsonResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrowserJsonResponse::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_has_empty_images_isValid = ::OpenAPI::fromJsonValue(m_has_empty_images, json[QString("hasEmptyImages")]);
    m_has_empty_images_isSet = !json[QString("hasEmptyImages")].isNull() && m_has_empty_images_isValid;

    m_id_search_isValid = ::OpenAPI::fromJsonValue(m_id_search, json[QString("id_search")]);
    m_id_search_isSet = !json[QString("id_search")].isNull() && m_id_search_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_output_isValid = ::OpenAPI::fromJsonValue(m_output, json[QString("output")]);
    m_output_isSet = !json[QString("output")].isNull() && m_output_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;
}

QString OAIBrowserJsonResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrowserJsonResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_has_empty_images_isSet) {
        obj.insert(QString("hasEmptyImages"), ::OpenAPI::toJsonValue(m_has_empty_images));
    }
    if (m_id_search_isSet) {
        obj.insert(QString("id_search"), ::OpenAPI::toJsonValue(m_id_search));
    }
    if (m_input.size() > 0) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_output.isSet()) {
        obj.insert(QString("output"), ::OpenAPI::toJsonValue(m_output));
    }
    if (m_progress_isSet) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    return obj;
}

QString OAIBrowserJsonResponse::getCode() const {
    return m_code;
}
void OAIBrowserJsonResponse::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIBrowserJsonResponse::is_code_Set() const{
    return m_code_isSet;
}

bool OAIBrowserJsonResponse::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIBrowserJsonResponse::getError() const {
    return m_error;
}
void OAIBrowserJsonResponse::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIBrowserJsonResponse::is_error_Set() const{
    return m_error_isSet;
}

bool OAIBrowserJsonResponse::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIBrowserJsonResponse::isHasEmptyImages() const {
    return m_has_empty_images;
}
void OAIBrowserJsonResponse::setHasEmptyImages(const bool &has_empty_images) {
    m_has_empty_images = has_empty_images;
    m_has_empty_images_isSet = true;
}

bool OAIBrowserJsonResponse::is_has_empty_images_Set() const{
    return m_has_empty_images_isSet;
}

bool OAIBrowserJsonResponse::is_has_empty_images_Valid() const{
    return m_has_empty_images_isValid;
}

QString OAIBrowserJsonResponse::getIdSearch() const {
    return m_id_search;
}
void OAIBrowserJsonResponse::setIdSearch(const QString &id_search) {
    m_id_search = id_search;
    m_id_search_isSet = true;
}

bool OAIBrowserJsonResponse::is_id_search_Set() const{
    return m_id_search_isSet;
}

bool OAIBrowserJsonResponse::is_id_search_Valid() const{
    return m_id_search_isValid;
}

QList<OAIInputImage> OAIBrowserJsonResponse::getInput() const {
    return m_input;
}
void OAIBrowserJsonResponse::setInput(const QList<OAIInputImage> &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIBrowserJsonResponse::is_input_Set() const{
    return m_input_isSet;
}

bool OAIBrowserJsonResponse::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIBrowserJsonResponse::getMessage() const {
    return m_message;
}
void OAIBrowserJsonResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIBrowserJsonResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIBrowserJsonResponse::is_message_Valid() const{
    return m_message_isValid;
}

OAISearch_Results OAIBrowserJsonResponse::getOutput() const {
    return m_output;
}
void OAIBrowserJsonResponse::setOutput(const OAISearch_Results &output) {
    m_output = output;
    m_output_isSet = true;
}

bool OAIBrowserJsonResponse::is_output_Set() const{
    return m_output_isSet;
}

bool OAIBrowserJsonResponse::is_output_Valid() const{
    return m_output_isValid;
}

qint32 OAIBrowserJsonResponse::getProgress() const {
    return m_progress;
}
void OAIBrowserJsonResponse::setProgress(const qint32 &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIBrowserJsonResponse::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIBrowserJsonResponse::is_progress_Valid() const{
    return m_progress_isValid;
}

bool OAIBrowserJsonResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_empty_images_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrowserJsonResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
