/**
 * Facial Recognition Reverse Image Face Search API
 * Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>
 *
 * The version of the OpenAPI document: v1.02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFaceCheckAPIApi_H
#define OAI_OAIFaceCheckAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBrowserJsonResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIInfoResponse.h"
#include "OAISearchData.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFaceCheckAPIApi : public QObject {
    Q_OBJECT

public:
    OAIFaceCheckAPIApi(const int timeOut = 0);
    ~OAIFaceCheckAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id_search QString [optional]
    * @param[in]  id_pic QString [optional]
    */
    virtual void apiDeletePicPost(const ::OpenAPI::OptionalParam<QString> &id_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id_pic = ::OpenAPI::OptionalParam<QString>());


    virtual void apiInfoPost();

    /**
    * @param[in]  oai_search_data OAISearchData [optional]
    */
    virtual void apiSearchPost(const ::OpenAPI::OptionalParam<OAISearchData> &oai_search_data = ::OpenAPI::OptionalParam<OAISearchData>());

    /**
    * @param[in]  id_search QString [optional]
    * @param[in]  images QList<OAIHttpFileElement> [optional]
    */
    virtual void apiUploadPicPost(const ::OpenAPI::OptionalParam<QString> &id_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIHttpFileElement>> &images = ::OpenAPI::OptionalParam<QList<OAIHttpFileElement>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiDeletePicPostCallback(OAIHttpRequestWorker *worker);
    void apiInfoPostCallback(OAIHttpRequestWorker *worker);
    void apiSearchPostCallback(OAIHttpRequestWorker *worker);
    void apiUploadPicPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiDeletePicPostSignal(OAIBrowserJsonResponse summary);
    void apiInfoPostSignal(OAIInfoResponse summary);
    void apiSearchPostSignal(OAIBrowserJsonResponse summary);
    void apiUploadPicPostSignal(OAIBrowserJsonResponse summary);


    void apiDeletePicPostSignalFull(OAIHttpRequestWorker *worker, OAIBrowserJsonResponse summary);
    void apiInfoPostSignalFull(OAIHttpRequestWorker *worker, OAIInfoResponse summary);
    void apiSearchPostSignalFull(OAIHttpRequestWorker *worker, OAIBrowserJsonResponse summary);
    void apiUploadPicPostSignalFull(OAIHttpRequestWorker *worker, OAIBrowserJsonResponse summary);

    Q_DECL_DEPRECATED_X("Use apiDeletePicPostSignalError() instead")
    void apiDeletePicPostSignalE(OAIBrowserJsonResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDeletePicPostSignalError(OAIBrowserJsonResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiInfoPostSignalError() instead")
    void apiInfoPostSignalE(OAIInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiInfoPostSignalError(OAIInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSearchPostSignalError() instead")
    void apiSearchPostSignalE(OAIBrowserJsonResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSearchPostSignalError(OAIBrowserJsonResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUploadPicPostSignalError() instead")
    void apiUploadPicPostSignalE(OAIBrowserJsonResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUploadPicPostSignalError(OAIBrowserJsonResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiDeletePicPostSignalErrorFull() instead")
    void apiDeletePicPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDeletePicPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiInfoPostSignalErrorFull() instead")
    void apiInfoPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiInfoPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSearchPostSignalErrorFull() instead")
    void apiSearchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSearchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUploadPicPostSignalErrorFull() instead")
    void apiUploadPicPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUploadPicPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
