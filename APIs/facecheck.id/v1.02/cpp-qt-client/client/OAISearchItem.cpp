/**
 * Facial Recognition Reverse Image Face Search API
 * Let your users search the Internet by face! Integrate FaceCheck facial search seamlessly with your app, website or software platform.   FaceCheck's REST API is hassle-free and easy to use. For code examples visit <a href='https://facecheck.id/Face-Search/API'>https://facecheck.id/Face-Search/API</a>
 *
 * The version of the OpenAPI document: v1.02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchItem::OAISearchItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchItem::OAISearchItem() {
    this->initializeModel();
}

OAISearchItem::~OAISearchItem() {}

void OAISearchItem::initializeModel() {

    m_base64_isSet = false;
    m_base64_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_index_db_isSet = false;
    m_index_db_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_seen_isSet = false;
    m_seen_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAISearchItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchItem::fromJsonObject(QJsonObject json) {

    m_base64_isValid = ::OpenAPI::fromJsonValue(m_base64, json[QString("base64")]);
    m_base64_isSet = !json[QString("base64")].isNull() && m_base64_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_index_db_isValid = ::OpenAPI::fromJsonValue(m_index_db, json[QString("indexDB")]);
    m_index_db_isSet = !json[QString("indexDB")].isNull() && m_index_db_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_seen_isValid = ::OpenAPI::fromJsonValue(m_seen, json[QString("seen")]);
    m_seen_isSet = !json[QString("seen")].isNull() && m_seen_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAISearchItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchItem::asJsonObject() const {
    QJsonObject obj;
    if (m_base64_isSet) {
        obj.insert(QString("base64"), ::OpenAPI::toJsonValue(m_base64));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_index_db_isSet) {
        obj.insert(QString("indexDB"), ::OpenAPI::toJsonValue(m_index_db));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_seen_isSet) {
        obj.insert(QString("seen"), ::OpenAPI::toJsonValue(m_seen));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAISearchItem::getBase64() const {
    return m_base64;
}
void OAISearchItem::setBase64(const QString &base64) {
    m_base64 = base64;
    m_base64_isSet = true;
}

bool OAISearchItem::is_base64_Set() const{
    return m_base64_isSet;
}

bool OAISearchItem::is_base64_Valid() const{
    return m_base64_isValid;
}

qint32 OAISearchItem::getGroup() const {
    return m_group;
}
void OAISearchItem::setGroup(const qint32 &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAISearchItem::is_group_Set() const{
    return m_group_isSet;
}

bool OAISearchItem::is_group_Valid() const{
    return m_group_isValid;
}

QString OAISearchItem::getGuid() const {
    return m_guid;
}
void OAISearchItem::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAISearchItem::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAISearchItem::is_guid_Valid() const{
    return m_guid_isValid;
}

qint32 OAISearchItem::getIndex() const {
    return m_index;
}
void OAISearchItem::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAISearchItem::is_index_Set() const{
    return m_index_isSet;
}

bool OAISearchItem::is_index_Valid() const{
    return m_index_isValid;
}

qint64 OAISearchItem::getIndexDb() const {
    return m_index_db;
}
void OAISearchItem::setIndexDb(const qint64 &index_db) {
    m_index_db = index_db;
    m_index_db_isSet = true;
}

bool OAISearchItem::is_index_db_Set() const{
    return m_index_db_isSet;
}

bool OAISearchItem::is_index_db_Valid() const{
    return m_index_db_isValid;
}

qint32 OAISearchItem::getScore() const {
    return m_score;
}
void OAISearchItem::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAISearchItem::is_score_Set() const{
    return m_score_isSet;
}

bool OAISearchItem::is_score_Valid() const{
    return m_score_isValid;
}

qint64 OAISearchItem::getSeen() const {
    return m_seen;
}
void OAISearchItem::setSeen(const qint64 &seen) {
    m_seen = seen;
    m_seen_isSet = true;
}

bool OAISearchItem::is_seen_Set() const{
    return m_seen_isSet;
}

bool OAISearchItem::is_seen_Valid() const{
    return m_seen_isValid;
}

QString OAISearchItem::getUrl() const {
    return m_url;
}
void OAISearchItem::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISearchItem::is_url_Set() const{
    return m_url_isSet;
}

bool OAISearchItem::is_url_Valid() const{
    return m_url_isValid;
}

bool OAISearchItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base64_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_db_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
