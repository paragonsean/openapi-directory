# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InfoResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, faces: int=None, has_credits_to_search: bool=None, is_online: bool=None, remaining_credits: int=None):
        """InfoResponse - a model defined in OpenAPI

        :param faces: The faces of this InfoResponse.
        :param has_credits_to_search: The has_credits_to_search of this InfoResponse.
        :param is_online: The is_online of this InfoResponse.
        :param remaining_credits: The remaining_credits of this InfoResponse.
        """
        self.openapi_types = {
            'faces': int,
            'has_credits_to_search': bool,
            'is_online': bool,
            'remaining_credits': int
        }

        self.attribute_map = {
            'faces': 'faces',
            'has_credits_to_search': 'has_credits_to_search',
            'is_online': 'is_online',
            'remaining_credits': 'remaining_credits'
        }

        self._faces = faces
        self._has_credits_to_search = has_credits_to_search
        self._is_online = is_online
        self._remaining_credits = remaining_credits

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InfoResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InfoResponse of this InfoResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def faces(self):
        """Gets the faces of this InfoResponse.


        :return: The faces of this InfoResponse.
        :rtype: int
        """
        return self._faces

    @faces.setter
    def faces(self, faces):
        """Sets the faces of this InfoResponse.


        :param faces: The faces of this InfoResponse.
        :type faces: int
        """

        self._faces = faces

    @property
    def has_credits_to_search(self):
        """Gets the has_credits_to_search of this InfoResponse.


        :return: The has_credits_to_search of this InfoResponse.
        :rtype: bool
        """
        return self._has_credits_to_search

    @has_credits_to_search.setter
    def has_credits_to_search(self, has_credits_to_search):
        """Sets the has_credits_to_search of this InfoResponse.


        :param has_credits_to_search: The has_credits_to_search of this InfoResponse.
        :type has_credits_to_search: bool
        """

        self._has_credits_to_search = has_credits_to_search

    @property
    def is_online(self):
        """Gets the is_online of this InfoResponse.


        :return: The is_online of this InfoResponse.
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this InfoResponse.


        :param is_online: The is_online of this InfoResponse.
        :type is_online: bool
        """

        self._is_online = is_online

    @property
    def remaining_credits(self):
        """Gets the remaining_credits of this InfoResponse.


        :return: The remaining_credits of this InfoResponse.
        :rtype: int
        """
        return self._remaining_credits

    @remaining_credits.setter
    def remaining_credits(self, remaining_credits):
        """Sets the remaining_credits of this InfoResponse.


        :param remaining_credits: The remaining_credits of this InfoResponse.
        :type remaining_credits: int
        """

        self._remaining_credits = remaining_credits
