# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _base64: str=None, group: int=None, guid: str=None, index: int=None, index_db: int=None, score: int=None, seen: int=None, url: str=None):
        """SearchItem - a model defined in OpenAPI

        :param _base64: The _base64 of this SearchItem.
        :param group: The group of this SearchItem.
        :param guid: The guid of this SearchItem.
        :param index: The index of this SearchItem.
        :param index_db: The index_db of this SearchItem.
        :param score: The score of this SearchItem.
        :param seen: The seen of this SearchItem.
        :param url: The url of this SearchItem.
        """
        self.openapi_types = {
            '_base64': str,
            'group': int,
            'guid': str,
            'index': int,
            'index_db': int,
            'score': int,
            'seen': int,
            'url': str
        }

        self.attribute_map = {
            '_base64': 'base64',
            'group': 'group',
            'guid': 'guid',
            'index': 'index',
            'index_db': 'indexDB',
            'score': 'score',
            'seen': 'seen',
            'url': 'url'
        }

        self.__base64 = _base64
        self._group = group
        self._guid = guid
        self._index = index
        self._index_db = index_db
        self._score = score
        self._seen = seen
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchItem of this SearchItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _base64(self):
        """Gets the _base64 of this SearchItem.


        :return: The _base64 of this SearchItem.
        :rtype: str
        """
        return self.__base64

    @_base64.setter
    def _base64(self, _base64):
        """Sets the _base64 of this SearchItem.


        :param _base64: The _base64 of this SearchItem.
        :type _base64: str
        """

        self.__base64 = _base64

    @property
    def group(self):
        """Gets the group of this SearchItem.


        :return: The group of this SearchItem.
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this SearchItem.


        :param group: The group of this SearchItem.
        :type group: int
        """

        self._group = group

    @property
    def guid(self):
        """Gets the guid of this SearchItem.


        :return: The guid of this SearchItem.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this SearchItem.


        :param guid: The guid of this SearchItem.
        :type guid: str
        """

        self._guid = guid

    @property
    def index(self):
        """Gets the index of this SearchItem.


        :return: The index of this SearchItem.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this SearchItem.


        :param index: The index of this SearchItem.
        :type index: int
        """

        self._index = index

    @property
    def index_db(self):
        """Gets the index_db of this SearchItem.


        :return: The index_db of this SearchItem.
        :rtype: int
        """
        return self._index_db

    @index_db.setter
    def index_db(self, index_db):
        """Sets the index_db of this SearchItem.


        :param index_db: The index_db of this SearchItem.
        :type index_db: int
        """

        self._index_db = index_db

    @property
    def score(self):
        """Gets the score of this SearchItem.


        :return: The score of this SearchItem.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this SearchItem.


        :param score: The score of this SearchItem.
        :type score: int
        """

        self._score = score

    @property
    def seen(self):
        """Gets the seen of this SearchItem.


        :return: The seen of this SearchItem.
        :rtype: int
        """
        return self._seen

    @seen.setter
    def seen(self, seen):
        """Sets the seen of this SearchItem.


        :param seen: The seen of this SearchItem.
        :type seen: int
        """

        self._seen = seen

    @property
    def url(self):
        """Gets the url of this SearchItem.


        :return: The url of this SearchItem.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SearchItem.


        :param url: The url of this SearchItem.
        :type url: str
        """

        self._url = url
