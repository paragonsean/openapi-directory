# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, demo: bool=None, id_captcha: str=None, id_search: str=None, status_only: bool=None, with_progress: bool=None):
        """SearchData - a model defined in OpenAPI

        :param demo: The demo of this SearchData.
        :param id_captcha: The id_captcha of this SearchData.
        :param id_search: The id_search of this SearchData.
        :param status_only: The status_only of this SearchData.
        :param with_progress: The with_progress of this SearchData.
        """
        self.openapi_types = {
            'demo': bool,
            'id_captcha': str,
            'id_search': str,
            'status_only': bool,
            'with_progress': bool
        }

        self.attribute_map = {
            'demo': 'demo',
            'id_captcha': 'id_captcha',
            'id_search': 'id_search',
            'status_only': 'status_only',
            'with_progress': 'with_progress'
        }

        self._demo = demo
        self._id_captcha = id_captcha
        self._id_search = id_search
        self._status_only = status_only
        self._with_progress = with_progress

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchData of this SearchData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def demo(self):
        """Gets the demo of this SearchData.

        true = searches only the first 100,000 faces, good for testing/debugging

        :return: The demo of this SearchData.
        :rtype: bool
        """
        return self._demo

    @demo.setter
    def demo(self, demo):
        """Sets the demo of this SearchData.

        true = searches only the first 100,000 faces, good for testing/debugging

        :param demo: The demo of this SearchData.
        :type demo: bool
        """

        self._demo = demo

    @property
    def id_captcha(self):
        """Gets the id_captcha of this SearchData.

        captcha is not used

        :return: The id_captcha of this SearchData.
        :rtype: str
        """
        return self._id_captcha

    @id_captcha.setter
    def id_captcha(self, id_captcha):
        """Sets the id_captcha of this SearchData.

        captcha is not used

        :param id_captcha: The id_captcha of this SearchData.
        :type id_captcha: str
        """

        self._id_captcha = id_captcha

    @property
    def id_search(self):
        """Gets the id_search of this SearchData.

        

        :return: The id_search of this SearchData.
        :rtype: str
        """
        return self._id_search

    @id_search.setter
    def id_search(self, id_search):
        """Sets the id_search of this SearchData.

        

        :param id_search: The id_search of this SearchData.
        :type id_search: str
        """

        self._id_search = id_search

    @property
    def status_only(self):
        """Gets the status_only of this SearchData.

        true = don't submit a new search

        :return: The status_only of this SearchData.
        :rtype: bool
        """
        return self._status_only

    @status_only.setter
    def status_only(self, status_only):
        """Sets the status_only of this SearchData.

        true = don't submit a new search

        :param status_only: The status_only of this SearchData.
        :type status_only: bool
        """

        self._status_only = status_only

    @property
    def with_progress(self):
        """Gets the with_progress of this SearchData.

        true = return imediately with a progress. False waits until search is finished.

        :return: The with_progress of this SearchData.
        :rtype: bool
        """
        return self._with_progress

    @with_progress.setter
    def with_progress(self, with_progress):
        """Sets the with_progress of this SearchData.

        true = return imediately with a progress. False waits until search is finished.

        :param with_progress: The with_progress of this SearchData.
        :type with_progress: bool
        """

        self._with_progress = with_progress
