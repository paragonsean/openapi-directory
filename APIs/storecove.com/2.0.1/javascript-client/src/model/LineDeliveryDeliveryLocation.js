/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LineDeliveryDeliveryLocation model module.
 * @module model/LineDeliveryDeliveryLocation
 * @version 2.0.1
 */
class LineDeliveryDeliveryLocation {
    /**
     * Constructs a new <code>LineDeliveryDeliveryLocation</code>.
     * @alias module:model/LineDeliveryDeliveryLocation
     */
    constructor() { 
        
        LineDeliveryDeliveryLocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LineDeliveryDeliveryLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LineDeliveryDeliveryLocation} obj Optional instance to populate.
     * @return {module:model/LineDeliveryDeliveryLocation} The populated <code>LineDeliveryDeliveryLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LineDeliveryDeliveryLocation();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('schemeId')) {
                obj['schemeId'] = ApiClient.convertToType(data['schemeId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LineDeliveryDeliveryLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LineDeliveryDeliveryLocation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['schemeId'] && !(typeof data['schemeId'] === 'string' || data['schemeId'] instanceof String)) {
            throw new Error("Expected the field `schemeId` to be a primitive type in the JSON string but got " + data['schemeId']);
        }

        return true;
    }


}



/**
 * The location identifier.
 * @member {String} id
 */
LineDeliveryDeliveryLocation.prototype['id'] = undefined;

/**
 * The schemeId of the location identifier (e.g. '0088')
 * @member {String} schemeId
 */
LineDeliveryDeliveryLocation.prototype['schemeId'] = undefined;






export default LineDeliveryDeliveryLocation;

