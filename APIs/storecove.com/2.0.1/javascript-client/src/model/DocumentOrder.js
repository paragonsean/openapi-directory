/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AllowanceCharge from './AllowanceCharge';
import Attachment from './Attachment';
import CurrencyCode from './CurrencyCode';
import Delivery from './Delivery';
import DeliveryTerms from './DeliveryTerms';
import OrderLine from './OrderLine';
import PaymentTerms from './PaymentTerms';
import Reference from './Reference';
import SellerSupplierParty from './SellerSupplierParty';

/**
 * The DocumentOrder model module.
 * @module model/DocumentOrder
 * @version 2.0.1
 */
class DocumentOrder {
    /**
     * Constructs a new <code>DocumentOrder</code>.
     * The order to send.
     * @alias module:model/DocumentOrder
     * @param amountIncludingTax {Number} Total amount including Tax.
     * @param documentNumber {String} The number you assigned to the document.
     * @param issueDate {String} Format: yyyy-mm-dd.
     * @param orderLines {Array.<module:model/OrderLine>} An array of order lines.
     * @param sellerSupplierParty {module:model/SellerSupplierParty} 
     */
    constructor(amountIncludingTax, documentNumber, issueDate, orderLines, sellerSupplierParty) { 
        
        DocumentOrder.initialize(this, amountIncludingTax, documentNumber, issueDate, orderLines, sellerSupplierParty);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amountIncludingTax, documentNumber, issueDate, orderLines, sellerSupplierParty) { 
        obj['amountIncludingTax'] = amountIncludingTax;
        obj['documentNumber'] = documentNumber;
        obj['issueDate'] = issueDate;
        obj['orderLines'] = orderLines;
        obj['orderType'] = 'regular';
        obj['sellerSupplierParty'] = sellerSupplierParty;
        obj['taxSystem'] = 'tax_line_percentages';
    }

    /**
     * Constructs a <code>DocumentOrder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentOrder} obj Optional instance to populate.
     * @return {module:model/DocumentOrder} The populated <code>DocumentOrder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentOrder();

            if (data.hasOwnProperty('accountingCost')) {
                obj['accountingCost'] = ApiClient.convertToType(data['accountingCost'], 'String');
            }
            if (data.hasOwnProperty('allowanceCharges')) {
                obj['allowanceCharges'] = ApiClient.convertToType(data['allowanceCharges'], [AllowanceCharge]);
            }
            if (data.hasOwnProperty('amountIncludingTax')) {
                obj['amountIncludingTax'] = ApiClient.convertToType(data['amountIncludingTax'], 'Number');
            }
            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('delivery')) {
                obj['delivery'] = Delivery.constructFromObject(data['delivery']);
            }
            if (data.hasOwnProperty('deliveryTerms')) {
                obj['deliveryTerms'] = DeliveryTerms.constructFromObject(data['deliveryTerms']);
            }
            if (data.hasOwnProperty('documentCurrencyCode')) {
                obj['documentCurrencyCode'] = CurrencyCode.constructFromObject(data['documentCurrencyCode']);
            }
            if (data.hasOwnProperty('documentNumber')) {
                obj['documentNumber'] = ApiClient.convertToType(data['documentNumber'], 'String');
            }
            if (data.hasOwnProperty('issueDate')) {
                obj['issueDate'] = ApiClient.convertToType(data['issueDate'], 'String');
            }
            if (data.hasOwnProperty('issueTime')) {
                obj['issueTime'] = ApiClient.convertToType(data['issueTime'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('orderLines')) {
                obj['orderLines'] = ApiClient.convertToType(data['orderLines'], [OrderLine]);
            }
            if (data.hasOwnProperty('orderType')) {
                obj['orderType'] = ApiClient.convertToType(data['orderType'], 'String');
            }
            if (data.hasOwnProperty('paymentTerms')) {
                obj['paymentTerms'] = PaymentTerms.constructFromObject(data['paymentTerms']);
            }
            if (data.hasOwnProperty('references')) {
                obj['references'] = ApiClient.convertToType(data['references'], [Reference]);
            }
            if (data.hasOwnProperty('sellerSupplierParty')) {
                obj['sellerSupplierParty'] = SellerSupplierParty.constructFromObject(data['sellerSupplierParty']);
            }
            if (data.hasOwnProperty('taxSystem')) {
                obj['taxSystem'] = ApiClient.convertToType(data['taxSystem'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('validityPeriod')) {
                obj['validityPeriod'] = ApiClient.convertToType(data['validityPeriod'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentOrder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentOrder</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentOrder.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountingCost'] && !(typeof data['accountingCost'] === 'string' || data['accountingCost'] instanceof String)) {
            throw new Error("Expected the field `accountingCost` to be a primitive type in the JSON string but got " + data['accountingCost']);
        }
        if (data['allowanceCharges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['allowanceCharges'])) {
                throw new Error("Expected the field `allowanceCharges` to be an array in the JSON data but got " + data['allowanceCharges']);
            }
            // validate the optional field `allowanceCharges` (array)
            for (const item of data['allowanceCharges']) {
                AllowanceCharge.validateJSON(item);
            };
        }
        if (data['attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachments'])) {
                throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
            }
            // validate the optional field `attachments` (array)
            for (const item of data['attachments']) {
                Attachment.validateJSON(item);
            };
        }
        // validate the optional field `delivery`
        if (data['delivery']) { // data not null
          Delivery.validateJSON(data['delivery']);
        }
        // validate the optional field `deliveryTerms`
        if (data['deliveryTerms']) { // data not null
          DeliveryTerms.validateJSON(data['deliveryTerms']);
        }
        // ensure the json data is a string
        if (data['documentNumber'] && !(typeof data['documentNumber'] === 'string' || data['documentNumber'] instanceof String)) {
            throw new Error("Expected the field `documentNumber` to be a primitive type in the JSON string but got " + data['documentNumber']);
        }
        // ensure the json data is a string
        if (data['issueDate'] && !(typeof data['issueDate'] === 'string' || data['issueDate'] instanceof String)) {
            throw new Error("Expected the field `issueDate` to be a primitive type in the JSON string but got " + data['issueDate']);
        }
        // ensure the json data is a string
        if (data['issueTime'] && !(typeof data['issueTime'] === 'string' || data['issueTime'] instanceof String)) {
            throw new Error("Expected the field `issueTime` to be a primitive type in the JSON string but got " + data['issueTime']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        if (data['orderLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orderLines'])) {
                throw new Error("Expected the field `orderLines` to be an array in the JSON data but got " + data['orderLines']);
            }
            // validate the optional field `orderLines` (array)
            for (const item of data['orderLines']) {
                OrderLine.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['orderType'] && !(typeof data['orderType'] === 'string' || data['orderType'] instanceof String)) {
            throw new Error("Expected the field `orderType` to be a primitive type in the JSON string but got " + data['orderType']);
        }
        // validate the optional field `paymentTerms`
        if (data['paymentTerms']) { // data not null
          PaymentTerms.validateJSON(data['paymentTerms']);
        }
        if (data['references']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['references'])) {
                throw new Error("Expected the field `references` to be an array in the JSON data but got " + data['references']);
            }
            // validate the optional field `references` (array)
            for (const item of data['references']) {
                Reference.validateJSON(item);
            };
        }
        // validate the optional field `sellerSupplierParty`
        if (data['sellerSupplierParty']) { // data not null
          SellerSupplierParty.validateJSON(data['sellerSupplierParty']);
        }
        // ensure the json data is a string
        if (data['taxSystem'] && !(typeof data['taxSystem'] === 'string' || data['taxSystem'] instanceof String)) {
            throw new Error("Expected the field `taxSystem` to be a primitive type in the JSON string but got " + data['taxSystem']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }
        // ensure the json data is a string
        if (data['validityPeriod'] && !(typeof data['validityPeriod'] === 'string' || data['validityPeriod'] instanceof String)) {
            throw new Error("Expected the field `validityPeriod` to be a primitive type in the JSON string but got " + data['validityPeriod']);
        }

        return true;
    }


}

DocumentOrder.RequiredProperties = ["amountIncludingTax", "documentNumber", "issueDate", "orderLines", "sellerSupplierParty"];

/**
 * The buyer's accounting cost centre for this document.
 * @member {String} accountingCost
 */
DocumentOrder.prototype['accountingCost'] = undefined;

/**
 * An array of allowance charges.
 * @member {Array.<module:model/AllowanceCharge>} allowanceCharges
 */
DocumentOrder.prototype['allowanceCharges'] = undefined;

/**
 * Total amount including Tax.
 * @member {Number} amountIncludingTax
 */
DocumentOrder.prototype['amountIncludingTax'] = undefined;

/**
 * An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.
 * @member {Array.<module:model/Attachment>} attachments
 */
DocumentOrder.prototype['attachments'] = undefined;

/**
 * @member {module:model/Delivery} delivery
 */
DocumentOrder.prototype['delivery'] = undefined;

/**
 * @member {module:model/DeliveryTerms} deliveryTerms
 */
DocumentOrder.prototype['deliveryTerms'] = undefined;

/**
 * @member {module:model/CurrencyCode} documentCurrencyCode
 */
DocumentOrder.prototype['documentCurrencyCode'] = undefined;

/**
 * The number you assigned to the document.
 * @member {String} documentNumber
 */
DocumentOrder.prototype['documentNumber'] = undefined;

/**
 * Format: yyyy-mm-dd.
 * @member {String} issueDate
 */
DocumentOrder.prototype['issueDate'] = undefined;

/**
 * Format: hh:mm:ss±zzzz 
 * @member {String} issueTime
 */
DocumentOrder.prototype['issueTime'] = undefined;

/**
 * A note to add to the document
 * @member {String} note
 */
DocumentOrder.prototype['note'] = undefined;

/**
 * An array of order lines.
 * @member {Array.<module:model/OrderLine>} orderLines
 */
DocumentOrder.prototype['orderLines'] = undefined;

/**
 * The type of this order.
 * @member {module:model/DocumentOrder.OrderTypeEnum} orderType
 * @default 'regular'
 */
DocumentOrder.prototype['orderType'] = 'regular';

/**
 * @member {module:model/PaymentTerms} paymentTerms
 */
DocumentOrder.prototype['paymentTerms'] = undefined;

/**
 * An array of references to other documents. Note that many syntaxes do not support multiple references of the same type in which case they will be concatenated with ','. Also, not all syntaxes and doucments support all documentTypes.
 * @member {Array.<module:model/Reference>} references
 */
DocumentOrder.prototype['references'] = undefined;

/**
 * @member {module:model/SellerSupplierParty} sellerSupplierParty
 */
DocumentOrder.prototype['sellerSupplierParty'] = undefined;

/**
 * The tax system used for the invoice. The system 'tax_line_percentages' is the only one currently supported.
 * @member {module:model/DocumentOrder.TaxSystemEnum} taxSystem
 * @default 'tax_line_percentages'
 */
DocumentOrder.prototype['taxSystem'] = 'tax_line_percentages';

/**
 * Format: ±zzzz, where ±zzzz is the difference from UTC, e.g. +0100 or -0900 etc. The timezone will also apply to the document issue date if this field is provided.
 * @member {String} timeZone
 */
DocumentOrder.prototype['timeZone'] = undefined;

/**
 * The period (or specific date) to which the invoice applies. Format: yyyy-mm-dd - yyyy-mm-dd.
 * @member {String} validityPeriod
 */
DocumentOrder.prototype['validityPeriod'] = undefined;





/**
 * Allowed values for the <code>orderType</code> property.
 * @enum {String}
 * @readonly
 */
DocumentOrder['OrderTypeEnum'] = {

    /**
     * value: "regular"
     * @const
     */
    "regular": "regular",

    /**
     * value: "consignment"
     * @const
     */
    "consignment": "consignment"
};


/**
 * Allowed values for the <code>taxSystem</code> property.
 * @enum {String}
 * @readonly
 */
DocumentOrder['TaxSystemEnum'] = {

    /**
     * value: "tax_line_percentages"
     * @const
     */
    "tax_line_percentages": "tax_line_percentages"
};



export default DocumentOrder;

