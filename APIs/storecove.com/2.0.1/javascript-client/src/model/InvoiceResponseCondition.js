/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InvoiceResponseCondition model module.
 * @module model/InvoiceResponseCondition
 * @version 2.0.1
 */
class InvoiceResponseCondition {
    /**
     * Constructs a new <code>InvoiceResponseCondition</code>.
     * Specifies an error in the received invoice.
     * @alias module:model/InvoiceResponseCondition
     * @param fieldCode {String} The code of the field with the error. Find the element here: https://docs.peppol.eu/poacc/billing/3.0/syntax/ubl-invoice/ and then get the field's Business term.
     * @param fieldValue {String} The (error) value of the field.
     */
    constructor(fieldCode, fieldValue) { 
        
        InvoiceResponseCondition.initialize(this, fieldCode, fieldValue);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fieldCode, fieldValue) { 
        obj['fieldCode'] = fieldCode;
        obj['fieldValue'] = fieldValue;
    }

    /**
     * Constructs a <code>InvoiceResponseCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InvoiceResponseCondition} obj Optional instance to populate.
     * @return {module:model/InvoiceResponseCondition} The populated <code>InvoiceResponseCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvoiceResponseCondition();

            if (data.hasOwnProperty('fieldCode')) {
                obj['fieldCode'] = ApiClient.convertToType(data['fieldCode'], 'String');
            }
            if (data.hasOwnProperty('fieldValue')) {
                obj['fieldValue'] = ApiClient.convertToType(data['fieldValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InvoiceResponseCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InvoiceResponseCondition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InvoiceResponseCondition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['fieldCode'] && !(typeof data['fieldCode'] === 'string' || data['fieldCode'] instanceof String)) {
            throw new Error("Expected the field `fieldCode` to be a primitive type in the JSON string but got " + data['fieldCode']);
        }
        // ensure the json data is a string
        if (data['fieldValue'] && !(typeof data['fieldValue'] === 'string' || data['fieldValue'] instanceof String)) {
            throw new Error("Expected the field `fieldValue` to be a primitive type in the JSON string but got " + data['fieldValue']);
        }

        return true;
    }


}

InvoiceResponseCondition.RequiredProperties = ["fieldCode", "fieldValue"];

/**
 * The code of the field with the error. Find the element here: https://docs.peppol.eu/poacc/billing/3.0/syntax/ubl-invoice/ and then get the field's Business term.
 * @member {String} fieldCode
 */
InvoiceResponseCondition.prototype['fieldCode'] = undefined;

/**
 * The (error) value of the field.
 * @member {String} fieldValue
 */
InvoiceResponseCondition.prototype['fieldValue'] = undefined;






export default InvoiceResponseCondition;

