/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Country from './Country';
import Rea from './Rea';

/**
 * The LegalEntityCreate model module.
 * @module model/LegalEntityCreate
 * @version 2.0.1
 */
class LegalEntityCreate {
    /**
     * Constructs a new <code>LegalEntityCreate</code>.
     * @alias module:model/LegalEntityCreate
     * @param city {String} The city.
     * @param country {module:model/Country} 
     * @param line1 {String} The first address line.
     * @param partyName {String} The name of the company.
     * @param zip {String} The zipcode.
     */
    constructor(city, country, line1, partyName, zip) { 
        
        LegalEntityCreate.initialize(this, city, country, line1, partyName, zip);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, city, country, line1, partyName, zip) { 
        obj['city'] = city;
        obj['country'] = country;
        obj['line1'] = line1;
        obj['party_name'] = partyName;
        obj['public'] = true;
        obj['zip'] = zip;
    }

    /**
     * Constructs a <code>LegalEntityCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LegalEntityCreate} obj Optional instance to populate.
     * @return {module:model/LegalEntityCreate} The populated <code>LegalEntityCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LegalEntityCreate();

            if (data.hasOwnProperty('advertisements')) {
                obj['advertisements'] = ApiClient.convertToType(data['advertisements'], ['String']);
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = Country.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = ApiClient.convertToType(data['county'], 'String');
            }
            if (data.hasOwnProperty('line1')) {
                obj['line1'] = ApiClient.convertToType(data['line1'], 'String');
            }
            if (data.hasOwnProperty('line2')) {
                obj['line2'] = ApiClient.convertToType(data['line2'], 'String');
            }
            if (data.hasOwnProperty('party_name')) {
                obj['party_name'] = ApiClient.convertToType(data['party_name'], 'String');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('rea')) {
                obj['rea'] = Rea.constructFromObject(data['rea']);
            }
            if (data.hasOwnProperty('tenant_id')) {
                obj['tenant_id'] = ApiClient.convertToType(data['tenant_id'], 'String');
            }
            if (data.hasOwnProperty('third_party_password')) {
                obj['third_party_password'] = ApiClient.convertToType(data['third_party_password'], 'String');
            }
            if (data.hasOwnProperty('third_party_username')) {
                obj['third_party_username'] = ApiClient.convertToType(data['third_party_username'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LegalEntityCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LegalEntityCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LegalEntityCreate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['advertisements'])) {
            throw new Error("Expected the field `advertisements` to be an array in the JSON data but got " + data['advertisements']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['county'] && !(typeof data['county'] === 'string' || data['county'] instanceof String)) {
            throw new Error("Expected the field `county` to be a primitive type in the JSON string but got " + data['county']);
        }
        // ensure the json data is a string
        if (data['line1'] && !(typeof data['line1'] === 'string' || data['line1'] instanceof String)) {
            throw new Error("Expected the field `line1` to be a primitive type in the JSON string but got " + data['line1']);
        }
        // ensure the json data is a string
        if (data['line2'] && !(typeof data['line2'] === 'string' || data['line2'] instanceof String)) {
            throw new Error("Expected the field `line2` to be a primitive type in the JSON string but got " + data['line2']);
        }
        // ensure the json data is a string
        if (data['party_name'] && !(typeof data['party_name'] === 'string' || data['party_name'] instanceof String)) {
            throw new Error("Expected the field `party_name` to be a primitive type in the JSON string but got " + data['party_name']);
        }
        // validate the optional field `rea`
        if (data['rea']) { // data not null
          Rea.validateJSON(data['rea']);
        }
        // ensure the json data is a string
        if (data['tenant_id'] && !(typeof data['tenant_id'] === 'string' || data['tenant_id'] instanceof String)) {
            throw new Error("Expected the field `tenant_id` to be a primitive type in the JSON string but got " + data['tenant_id']);
        }
        // ensure the json data is a string
        if (data['third_party_password'] && !(typeof data['third_party_password'] === 'string' || data['third_party_password'] instanceof String)) {
            throw new Error("Expected the field `third_party_password` to be a primitive type in the JSON string but got " + data['third_party_password']);
        }
        // ensure the json data is a string
        if (data['third_party_username'] && !(typeof data['third_party_username'] === 'string' || data['third_party_username'] instanceof String)) {
            throw new Error("Expected the field `third_party_username` to be a primitive type in the JSON string but got " + data['third_party_username']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }

        return true;
    }


}

LegalEntityCreate.RequiredProperties = ["city", "country", "line1", "party_name", "zip"];

/**
 * A list of document types to advertise. Use if this LegalEntity needs the ability to receive more than only invoice documents.
 * @member {Array.<module:model/LegalEntityCreate.AdvertisementsEnum>} advertisements
 */
LegalEntityCreate.prototype['advertisements'] = undefined;

/**
 * The city.
 * @member {String} city
 */
LegalEntityCreate.prototype['city'] = undefined;

/**
 * @member {module:model/Country} country
 */
LegalEntityCreate.prototype['country'] = undefined;

/**
 * County, if applicable
 * @member {String} county
 */
LegalEntityCreate.prototype['county'] = undefined;

/**
 * The first address line.
 * @member {String} line1
 */
LegalEntityCreate.prototype['line1'] = undefined;

/**
 * The second address line, if applicable
 * @member {String} line2
 */
LegalEntityCreate.prototype['line2'] = undefined;

/**
 * The name of the company.
 * @member {String} party_name
 */
LegalEntityCreate.prototype['party_name'] = undefined;

/**
 * Whether or not this LegalEntity is public. Public means it will be entered into the PEPPOL directory at https://directory.peppol.eu/
 * @member {Boolean} public
 * @default true
 */
LegalEntityCreate.prototype['public'] = true;

/**
 * @member {module:model/Rea} rea
 */
LegalEntityCreate.prototype['rea'] = undefined;

/**
 * The id of the tenant, to be used in case of single-tenant solutions that share webhook URLs. This property will included in webhook events.
 * @member {String} tenant_id
 */
LegalEntityCreate.prototype['tenant_id'] = undefined;

/**
 * The password to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN LegalEntity.
 * @member {String} third_party_password
 */
LegalEntityCreate.prototype['third_party_password'] = undefined;

/**
 * The username to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN LegalEntity.
 * @member {String} third_party_username
 */
LegalEntityCreate.prototype['third_party_username'] = undefined;

/**
 * The zipcode.
 * @member {String} zip
 */
LegalEntityCreate.prototype['zip'] = undefined;





/**
 * Allowed values for the <code>advertisements</code> property.
 * @enum {String}
 * @readonly
 */
LegalEntityCreate['AdvertisementsEnum'] = {

    /**
     * value: "invoice"
     * @const
     */
    "invoice": "invoice",

    /**
     * value: "invoice_response"
     * @const
     */
    "invoice_response": "invoice_response",

    /**
     * value: "order"
     * @const
     */
    "order": "order",

    /**
     * value: "ordering"
     * @const
     */
    "ordering": "ordering",

    /**
     * value: "order_response"
     * @const
     */
    "order_response": "order_response"
};



export default LegalEntityCreate;

