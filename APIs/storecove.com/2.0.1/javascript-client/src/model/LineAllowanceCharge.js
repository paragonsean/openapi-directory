/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LineAllowanceCharge model module.
 * @module model/LineAllowanceCharge
 * @version 2.0.1
 */
class LineAllowanceCharge {
    /**
     * Constructs a new <code>LineAllowanceCharge</code>.
     * @alias module:model/LineAllowanceCharge
     * @param amountExcludingTax {Number} The amount for the allowance or charge, excluding tax.
     */
    constructor(amountExcludingTax) { 
        
        LineAllowanceCharge.initialize(this, amountExcludingTax);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amountExcludingTax) { 
        obj['amountExcludingTax'] = amountExcludingTax;
    }

    /**
     * Constructs a <code>LineAllowanceCharge</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LineAllowanceCharge} obj Optional instance to populate.
     * @return {module:model/LineAllowanceCharge} The populated <code>LineAllowanceCharge</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LineAllowanceCharge();

            if (data.hasOwnProperty('amountExcludingTax')) {
                obj['amountExcludingTax'] = ApiClient.convertToType(data['amountExcludingTax'], 'Number');
            }
            if (data.hasOwnProperty('baseAmountExcludingTax')) {
                obj['baseAmountExcludingTax'] = ApiClient.convertToType(data['baseAmountExcludingTax'], 'Number');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('reasonCode')) {
                obj['reasonCode'] = ApiClient.convertToType(data['reasonCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LineAllowanceCharge</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LineAllowanceCharge</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LineAllowanceCharge.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['reasonCode'] && !(typeof data['reasonCode'] === 'string' || data['reasonCode'] instanceof String)) {
            throw new Error("Expected the field `reasonCode` to be a primitive type in the JSON string but got " + data['reasonCode']);
        }

        return true;
    }


}

LineAllowanceCharge.RequiredProperties = ["amountExcludingTax"];

/**
 * The amount for the allowance or charge, excluding tax.
 * @member {Number} amountExcludingTax
 */
LineAllowanceCharge.prototype['amountExcludingTax'] = undefined;

/**
 * The base amount for the allowance or charge, excluding tax.
 * @member {Number} baseAmountExcludingTax
 */
LineAllowanceCharge.prototype['baseAmountExcludingTax'] = undefined;

/**
 * The reason for the allowance or charge, free text
 * @member {String} reason
 */
LineAllowanceCharge.prototype['reason'] = undefined;

/**
 * Do not use. Contact Storecove first if you want to use this field.
 * @member {String} reasonCode
 */
LineAllowanceCharge.prototype['reasonCode'] = undefined;






export default LineAllowanceCharge;

