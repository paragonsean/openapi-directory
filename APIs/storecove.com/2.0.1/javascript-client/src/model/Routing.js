/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RoutingIdentifier from './RoutingIdentifier';

/**
 * The Routing model module.
 * @module model/Routing
 * @version 2.0.1
 */
class Routing {
    /**
     * Constructs a new <code>Routing</code>.
     * The different ways to send the invoice to the recipient. The publicIdentifiers are used to send via the Peppol network, if the recipient is not registered on the Peppol network, the invoice will be sent to the email addresses in the emails property. This property is only mandatory when sending the invoice data using the &lt;&lt;_openapi_invoice&gt;&gt; property, not when sending using the &lt;&lt;_openapi_invoicedata&gt;&gt; property, in which case this information will be extracted from the &lt;&lt;_openapi_invoicedata&gt;&gt; object. If you do specify an &lt;&lt;_openapi_invoicerecipient&gt;&gt; object and an &lt;&lt;_openapi_invoicedata&gt;&gt; object, the data from the two will be merged.
     * @alias module:model/Routing
     */
    constructor() { 
        
        Routing.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['clearWithoutSending'] = false;
    }

    /**
     * Constructs a <code>Routing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Routing} obj Optional instance to populate.
     * @return {module:model/Routing} The populated <code>Routing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Routing();

            if (data.hasOwnProperty('clearWithoutSending')) {
                obj['clearWithoutSending'] = ApiClient.convertToType(data['clearWithoutSending'], 'Boolean');
            }
            if (data.hasOwnProperty('eIdentifiers')) {
                obj['eIdentifiers'] = ApiClient.convertToType(data['eIdentifiers'], [RoutingIdentifier]);
            }
            if (data.hasOwnProperty('emails')) {
                obj['emails'] = ApiClient.convertToType(data['emails'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Routing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Routing</code>.
     */
    static validateJSON(data) {
        if (data['eIdentifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['eIdentifiers'])) {
                throw new Error("Expected the field `eIdentifiers` to be an array in the JSON data but got " + data['eIdentifiers']);
            }
            // validate the optional field `eIdentifiers` (array)
            for (const item of data['eIdentifiers']) {
                RoutingIdentifier.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['emails'])) {
            throw new Error("Expected the field `emails` to be an array in the JSON data but got " + data['emails']);
        }

        return true;
    }


}



/**
 * If you wish to send the document yourself in a Y-flow, use this flag. Wait for the 'cleared' webhook and use the <<_openapi_show_document_submission_evidence>> endpoint to retrieve the clearing evidence. This will include a sendable document.
 * @member {Boolean} clearWithoutSending
 * @default false
 */
Routing.prototype['clearWithoutSending'] = false;

/**
 * A list of electronic routing identifiers. These are the identifiers used on the Peppol network or for other destinations.
 * @member {Array.<module:model/RoutingIdentifier>} eIdentifiers
 */
Routing.prototype['eIdentifiers'] = undefined;

/**
 * The email addresses the invoice should be sent to if none of the other identifiers can be used
 * @member {Array.<String>} emails
 */
Routing.prototype['emails'] = undefined;






export default Routing;

