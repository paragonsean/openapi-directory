/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PeppolIdentifier from './PeppolIdentifier';
import PurchaseInvoiceSenderBillingContact from './PurchaseInvoiceSenderBillingContact';

/**
 * The PurchaseInvoiceSender model module.
 * @module model/PurchaseInvoiceSender
 * @version 2.0.1
 */
class PurchaseInvoiceSender {
    /**
     * Constructs a new <code>PurchaseInvoiceSender</code>.
     * @alias module:model/PurchaseInvoiceSender
     */
    constructor() { 
        
        PurchaseInvoiceSender.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PurchaseInvoiceSender</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PurchaseInvoiceSender} obj Optional instance to populate.
     * @return {module:model/PurchaseInvoiceSender} The populated <code>PurchaseInvoiceSender</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PurchaseInvoiceSender();

            if (data.hasOwnProperty('billing_contact')) {
                obj['billing_contact'] = PurchaseInvoiceSenderBillingContact.constructFromObject(data['billing_contact']);
            }
            if (data.hasOwnProperty('building_number')) {
                obj['building_number'] = ApiClient.convertToType(data['building_number'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = ApiClient.convertToType(data['county'], 'String');
            }
            if (data.hasOwnProperty('department')) {
                obj['department'] = ApiClient.convertToType(data['department'], 'String');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = ApiClient.convertToType(data['identifiers'], [PeppolIdentifier]);
            }
            if (data.hasOwnProperty('legal_name')) {
                obj['legal_name'] = ApiClient.convertToType(data['legal_name'], 'String');
            }
            if (data.hasOwnProperty('line1')) {
                obj['line1'] = ApiClient.convertToType(data['line1'], 'String');
            }
            if (data.hasOwnProperty('line2')) {
                obj['line2'] = ApiClient.convertToType(data['line2'], 'String');
            }
            if (data.hasOwnProperty('neighborhood')) {
                obj['neighborhood'] = ApiClient.convertToType(data['neighborhood'], 'String');
            }
            if (data.hasOwnProperty('party_name')) {
                obj['party_name'] = ApiClient.convertToType(data['party_name'], 'String');
            }
            if (data.hasOwnProperty('peppol_identifiers')) {
                obj['peppol_identifiers'] = PeppolIdentifier.constructFromObject(data['peppol_identifiers']);
            }
            if (data.hasOwnProperty('secondary_number')) {
                obj['secondary_number'] = ApiClient.convertToType(data['secondary_number'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PurchaseInvoiceSender</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PurchaseInvoiceSender</code>.
     */
    static validateJSON(data) {
        // validate the optional field `billing_contact`
        if (data['billing_contact']) { // data not null
          PurchaseInvoiceSenderBillingContact.validateJSON(data['billing_contact']);
        }
        // ensure the json data is a string
        if (data['building_number'] && !(typeof data['building_number'] === 'string' || data['building_number'] instanceof String)) {
            throw new Error("Expected the field `building_number` to be a primitive type in the JSON string but got " + data['building_number']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['county'] && !(typeof data['county'] === 'string' || data['county'] instanceof String)) {
            throw new Error("Expected the field `county` to be a primitive type in the JSON string but got " + data['county']);
        }
        // ensure the json data is a string
        if (data['department'] && !(typeof data['department'] === 'string' || data['department'] instanceof String)) {
            throw new Error("Expected the field `department` to be a primitive type in the JSON string but got " + data['department']);
        }
        if (data['identifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['identifiers'])) {
                throw new Error("Expected the field `identifiers` to be an array in the JSON data but got " + data['identifiers']);
            }
            // validate the optional field `identifiers` (array)
            for (const item of data['identifiers']) {
                PeppolIdentifier.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['legal_name'] && !(typeof data['legal_name'] === 'string' || data['legal_name'] instanceof String)) {
            throw new Error("Expected the field `legal_name` to be a primitive type in the JSON string but got " + data['legal_name']);
        }
        // ensure the json data is a string
        if (data['line1'] && !(typeof data['line1'] === 'string' || data['line1'] instanceof String)) {
            throw new Error("Expected the field `line1` to be a primitive type in the JSON string but got " + data['line1']);
        }
        // ensure the json data is a string
        if (data['line2'] && !(typeof data['line2'] === 'string' || data['line2'] instanceof String)) {
            throw new Error("Expected the field `line2` to be a primitive type in the JSON string but got " + data['line2']);
        }
        // ensure the json data is a string
        if (data['neighborhood'] && !(typeof data['neighborhood'] === 'string' || data['neighborhood'] instanceof String)) {
            throw new Error("Expected the field `neighborhood` to be a primitive type in the JSON string but got " + data['neighborhood']);
        }
        // ensure the json data is a string
        if (data['party_name'] && !(typeof data['party_name'] === 'string' || data['party_name'] instanceof String)) {
            throw new Error("Expected the field `party_name` to be a primitive type in the JSON string but got " + data['party_name']);
        }
        // validate the optional field `peppol_identifiers`
        if (data['peppol_identifiers']) { // data not null
          PeppolIdentifier.validateJSON(data['peppol_identifiers']);
        }
        // ensure the json data is a string
        if (data['secondary_number'] && !(typeof data['secondary_number'] === 'string' || data['secondary_number'] instanceof String)) {
            throw new Error("Expected the field `secondary_number` to be a primitive type in the JSON string but got " + data['secondary_number']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }

        return true;
    }


}



/**
 * @member {module:model/PurchaseInvoiceSenderBillingContact} billing_contact
 */
PurchaseInvoiceSender.prototype['billing_contact'] = undefined;

/**
 * The building number. Used in SA.
 * @member {String} building_number
 */
PurchaseInvoiceSender.prototype['building_number'] = undefined;

/**
 * The city.
 * @member {String} city
 */
PurchaseInvoiceSender.prototype['city'] = undefined;

/**
 * The country.
 * @member {String} country
 */
PurchaseInvoiceSender.prototype['country'] = undefined;

/**
 * The county.
 * @member {String} county
 */
PurchaseInvoiceSender.prototype['county'] = undefined;

/**
 * The department who sent the invoice.
 * @member {String} department
 */
PurchaseInvoiceSender.prototype['department'] = undefined;

/**
 * The array of identifiers for this sender.
 * @member {Array.<module:model/PeppolIdentifier>} identifiers
 */
PurchaseInvoiceSender.prototype['identifiers'] = undefined;

/**
 * The legal name of the party who sent the invoice.
 * @member {String} legal_name
 */
PurchaseInvoiceSender.prototype['legal_name'] = undefined;

/**
 * The address
 * @member {String} line1
 */
PurchaseInvoiceSender.prototype['line1'] = undefined;

/**
 * The address, line 2
 * @member {String} line2
 */
PurchaseInvoiceSender.prototype['line2'] = undefined;

/**
 * The neighborhood. Used in SA.
 * @member {String} neighborhood
 */
PurchaseInvoiceSender.prototype['neighborhood'] = undefined;

/**
 * The party who sent the invoice.
 * @member {String} party_name
 */
PurchaseInvoiceSender.prototype['party_name'] = undefined;

/**
 * @member {module:model/PeppolIdentifier} peppol_identifiers
 */
PurchaseInvoiceSender.prototype['peppol_identifiers'] = undefined;

/**
 * The secondary number. Used in SA.
 * @member {String} secondary_number
 */
PurchaseInvoiceSender.prototype['secondary_number'] = undefined;

/**
 * The zip code.
 * @member {String} zip
 */
PurchaseInvoiceSender.prototype['zip'] = undefined;






export default PurchaseInvoiceSender;

