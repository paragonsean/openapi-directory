/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Country from './Country';
import Receiver from './Receiver';
import Sender from './Sender';

/**
 * The CountrySpecification model module.
 * @module model/CountrySpecification
 * @version 2.0.1
 */
class CountrySpecification {
    /**
     * Constructs a new <code>CountrySpecification</code>.
     * @alias module:model/CountrySpecification
     */
    constructor() { 
        
        CountrySpecification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CountrySpecification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CountrySpecification} obj Optional instance to populate.
     * @return {module:model/CountrySpecification} The populated <code>CountrySpecification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CountrySpecification();

            if (data.hasOwnProperty('country')) {
                obj['country'] = Country.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('receiver')) {
                obj['receiver'] = Receiver.constructFromObject(data['receiver']);
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = Sender.constructFromObject(data['sender']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CountrySpecification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CountrySpecification</code>.
     */
    static validateJSON(data) {
        // validate the optional field `receiver`
        if (data['receiver']) { // data not null
          Receiver.validateJSON(data['receiver']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // validate the optional field `sender`
        if (data['sender']) { // data not null
          Sender.validateJSON(data['sender']);
        }

        return true;
    }


}



/**
 * @member {module:model/Country} country
 */
CountrySpecification.prototype['country'] = undefined;

/**
 * @member {module:model/Receiver} receiver
 */
CountrySpecification.prototype['receiver'] = undefined;

/**
 * The region this country belongs to. Within this region exchanging invoices is well defined. Between regions some care needs to be taken and Storecove may help in automatically converting some items. Contact us for details of inter-regional document exchange.
 * @member {module:model/CountrySpecification.RegionEnum} region
 */
CountrySpecification.prototype['region'] = undefined;

/**
 * @member {module:model/Sender} sender
 */
CountrySpecification.prototype['sender'] = undefined;





/**
 * Allowed values for the <code>region</code> property.
 * @enum {String}
 * @readonly
 */
CountrySpecification['RegionEnum'] = {

    /**
     * value: "eu_eea"
     * @const
     */
    "eu_eea": "eu_eea",

    /**
     * value: "sg"
     * @const
     */
    "sg": "sg",

    /**
     * value: "aunz"
     * @const
     */
    "aunz": "aunz",

    /**
     * value: "in"
     * @const
     */
    "in": "in",

    /**
     * value: "world"
     * @const
     */
    "world": "world"
};



export default CountrySpecification;

