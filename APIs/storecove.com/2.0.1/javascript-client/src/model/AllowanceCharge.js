/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tax from './Tax';

/**
 * The AllowanceCharge model module.
 * @module model/AllowanceCharge
 * @version 2.0.1
 */
class AllowanceCharge {
    /**
     * Constructs a new <code>AllowanceCharge</code>.
     * @alias module:model/AllowanceCharge
     */
    constructor() { 
        
        AllowanceCharge.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['reason'] = 'Agreed settlement';
    }

    /**
     * Constructs a <code>AllowanceCharge</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AllowanceCharge} obj Optional instance to populate.
     * @return {module:model/AllowanceCharge} The populated <code>AllowanceCharge</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AllowanceCharge();

            if (data.hasOwnProperty('amountExcludingTax')) {
                obj['amountExcludingTax'] = ApiClient.convertToType(data['amountExcludingTax'], 'Number');
            }
            if (data.hasOwnProperty('amountExcludingVat')) {
                obj['amountExcludingVat'] = ApiClient.convertToType(data['amountExcludingVat'], 'Number');
            }
            if (data.hasOwnProperty('amountIncludingTax')) {
                obj['amountIncludingTax'] = ApiClient.convertToType(data['amountIncludingTax'], 'Number');
            }
            if (data.hasOwnProperty('baseAmountExcludingTax')) {
                obj['baseAmountExcludingTax'] = ApiClient.convertToType(data['baseAmountExcludingTax'], 'Number');
            }
            if (data.hasOwnProperty('baseAmountIncludingTax')) {
                obj['baseAmountIncludingTax'] = ApiClient.convertToType(data['baseAmountIncludingTax'], 'Number');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('reasonCode')) {
                obj['reasonCode'] = ApiClient.convertToType(data['reasonCode'], 'String');
            }
            if (data.hasOwnProperty('tax')) {
                obj['tax'] = Tax.constructFromObject(data['tax']);
            }
            if (data.hasOwnProperty('taxesDutiesFees')) {
                obj['taxesDutiesFees'] = ApiClient.convertToType(data['taxesDutiesFees'], [Tax]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AllowanceCharge</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AllowanceCharge</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['reasonCode'] && !(typeof data['reasonCode'] === 'string' || data['reasonCode'] instanceof String)) {
            throw new Error("Expected the field `reasonCode` to be a primitive type in the JSON string but got " + data['reasonCode']);
        }
        // validate the optional field `tax`
        if (data['tax']) { // data not null
          Tax.validateJSON(data['tax']);
        }
        if (data['taxesDutiesFees']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taxesDutiesFees'])) {
                throw new Error("Expected the field `taxesDutiesFees` to be an array in the JSON data but got " + data['taxesDutiesFees']);
            }
            // validate the optional field `taxesDutiesFees` (array)
            for (const item of data['taxesDutiesFees']) {
                Tax.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The amount for the allowance or charge, excluding tax.
 * @member {Number} amountExcludingTax
 */
AllowanceCharge.prototype['amountExcludingTax'] = undefined;

/**
 * DEPRECATED. Use amountExcludingTax. The amount for the allowance or charge, excluding VAT.
 * @member {Number} amountExcludingVat
 */
AllowanceCharge.prototype['amountExcludingVat'] = undefined;

/**
 * The amount for the allowance or charge, including tax.
 * @member {Number} amountIncludingTax
 */
AllowanceCharge.prototype['amountIncludingTax'] = undefined;

/**
 * The base amount for the allowance or charge, excluding tax.
 * @member {Number} baseAmountExcludingTax
 */
AllowanceCharge.prototype['baseAmountExcludingTax'] = undefined;

/**
 * The base amount for the allowance or charge, including tax.
 * @member {Number} baseAmountIncludingTax
 */
AllowanceCharge.prototype['baseAmountIncludingTax'] = undefined;

/**
 * The reason for the allowance or charge, free text
 * @member {String} reason
 * @default 'Agreed settlement'
 */
AllowanceCharge.prototype['reason'] = 'Agreed settlement';

/**
 * Do not use. Contact Storecove first if you want to use this field.
 * @member {String} reasonCode
 */
AllowanceCharge.prototype['reasonCode'] = undefined;

/**
 * @member {module:model/Tax} tax
 */
AllowanceCharge.prototype['tax'] = undefined;

/**
 * An array of taxes, duties and fees for this invoice line. At this moment, multiple Tax items is allowed only for IN (India) and US (USA) taxes. All other countries can only have a single Tax item in this array.
 * @member {Array.<module:model/Tax>} taxesDutiesFees
 */
AllowanceCharge.prototype['taxesDutiesFees'] = undefined;






export default AllowanceCharge;

