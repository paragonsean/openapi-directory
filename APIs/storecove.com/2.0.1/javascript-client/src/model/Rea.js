/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Rea model module.
 * @module model/Rea
 * @version 2.0.1
 */
class Rea {
    /**
     * Constructs a new <code>Rea</code>.
     * @alias module:model/Rea
     */
    constructor() { 
        
        Rea.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Rea</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rea} obj Optional instance to populate.
     * @return {module:model/Rea} The populated <code>Rea</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rea();

            if (data.hasOwnProperty('capital')) {
                obj['capital'] = ApiClient.convertToType(data['capital'], 'Number');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('liquidation_status')) {
                obj['liquidation_status'] = ApiClient.convertToType(data['liquidation_status'], 'String');
            }
            if (data.hasOwnProperty('partners')) {
                obj['partners'] = ApiClient.convertToType(data['partners'], 'String');
            }
            if (data.hasOwnProperty('province')) {
                obj['province'] = ApiClient.convertToType(data['province'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rea</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rea</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['liquidation_status'] && !(typeof data['liquidation_status'] === 'string' || data['liquidation_status'] instanceof String)) {
            throw new Error("Expected the field `liquidation_status` to be a primitive type in the JSON string but got " + data['liquidation_status']);
        }
        // ensure the json data is a string
        if (data['partners'] && !(typeof data['partners'] === 'string' || data['partners'] instanceof String)) {
            throw new Error("Expected the field `partners` to be a primitive type in the JSON string but got " + data['partners']);
        }
        // ensure the json data is a string
        if (data['province'] && !(typeof data['province'] === 'string' || data['province'] instanceof String)) {
            throw new Error("Expected the field `province` to be a primitive type in the JSON string but got " + data['province']);
        }

        return true;
    }


}



/**
 * The captial for the company.
 * @member {Number} capital
 */
Rea.prototype['capital'] = undefined;

/**
 * The identifier.
 * @member {String} identifier
 */
Rea.prototype['identifier'] = undefined;

/**
 * The liquidation status of the company.
 * @member {module:model/Rea.LiquidationStatusEnum} liquidation_status
 */
Rea.prototype['liquidation_status'] = undefined;

/**
 * The number of partners.
 * @member {module:model/Rea.PartnersEnum} partners
 */
Rea.prototype['partners'] = undefined;

/**
 * The provincia of the ufficio that issued the identifier.
 * @member {module:model/Rea.ProvinceEnum} province
 */
Rea.prototype['province'] = undefined;





/**
 * Allowed values for the <code>liquidation_status</code> property.
 * @enum {String}
 * @readonly
 */
Rea['LiquidationStatusEnum'] = {

    /**
     * value: "LN"
     * @const
     */
    "LN": "LN",

    /**
     * value: "LS"
     * @const
     */
    "LS": "LS"
};


/**
 * Allowed values for the <code>partners</code> property.
 * @enum {String}
 * @readonly
 */
Rea['PartnersEnum'] = {

    /**
     * value: "SU"
     * @const
     */
    "SU": "SU",

    /**
     * value: "SM"
     * @const
     */
    "SM": "SM"
};


/**
 * Allowed values for the <code>province</code> property.
 * @enum {String}
 * @readonly
 */
Rea['ProvinceEnum'] = {

    /**
     * value: "AG"
     * @const
     */
    "AG": "AG",

    /**
     * value: "AL"
     * @const
     */
    "AL": "AL",

    /**
     * value: "AN"
     * @const
     */
    "AN": "AN",

    /**
     * value: "AO"
     * @const
     */
    "AO": "AO",

    /**
     * value: "AQ"
     * @const
     */
    "AQ": "AQ",

    /**
     * value: "AR"
     * @const
     */
    "AR": "AR",

    /**
     * value: "AP"
     * @const
     */
    "AP": "AP",

    /**
     * value: "AT"
     * @const
     */
    "AT": "AT",

    /**
     * value: "AV"
     * @const
     */
    "AV": "AV",

    /**
     * value: "BA"
     * @const
     */
    "BA": "BA",

    /**
     * value: "BT"
     * @const
     */
    "BT": "BT",

    /**
     * value: "BL"
     * @const
     */
    "BL": "BL",

    /**
     * value: "BN"
     * @const
     */
    "BN": "BN",

    /**
     * value: "BG"
     * @const
     */
    "BG": "BG",

    /**
     * value: "BI"
     * @const
     */
    "BI": "BI",

    /**
     * value: "BO"
     * @const
     */
    "BO": "BO",

    /**
     * value: "BZ"
     * @const
     */
    "BZ": "BZ",

    /**
     * value: "BS"
     * @const
     */
    "BS": "BS",

    /**
     * value: "BR"
     * @const
     */
    "BR": "BR",

    /**
     * value: "CA"
     * @const
     */
    "CA": "CA",

    /**
     * value: "CL"
     * @const
     */
    "CL": "CL",

    /**
     * value: "CB"
     * @const
     */
    "CB": "CB",

    /**
     * value: "CI"
     * @const
     */
    "CI": "CI",

    /**
     * value: "CE"
     * @const
     */
    "CE": "CE",

    /**
     * value: "CT"
     * @const
     */
    "CT": "CT",

    /**
     * value: "CZ"
     * @const
     */
    "CZ": "CZ",

    /**
     * value: "CH"
     * @const
     */
    "CH": "CH",

    /**
     * value: "CO"
     * @const
     */
    "CO": "CO",

    /**
     * value: "CS"
     * @const
     */
    "CS": "CS",

    /**
     * value: "CR"
     * @const
     */
    "CR": "CR",

    /**
     * value: "KR"
     * @const
     */
    "KR": "KR",

    /**
     * value: "CN"
     * @const
     */
    "CN": "CN",

    /**
     * value: "EN"
     * @const
     */
    "EN": "EN",

    /**
     * value: "FM"
     * @const
     */
    "FM": "FM",

    /**
     * value: "FE"
     * @const
     */
    "FE": "FE",

    /**
     * value: "FI"
     * @const
     */
    "FI": "FI",

    /**
     * value: "FG"
     * @const
     */
    "FG": "FG",

    /**
     * value: "FC"
     * @const
     */
    "FC": "FC",

    /**
     * value: "FR"
     * @const
     */
    "FR": "FR",

    /**
     * value: "GE"
     * @const
     */
    "GE": "GE",

    /**
     * value: "GO"
     * @const
     */
    "GO": "GO",

    /**
     * value: "GR"
     * @const
     */
    "GR": "GR",

    /**
     * value: "IM"
     * @const
     */
    "IM": "IM",

    /**
     * value: "IS"
     * @const
     */
    "IS": "IS",

    /**
     * value: "SP"
     * @const
     */
    "SP": "SP",

    /**
     * value: "LT"
     * @const
     */
    "LT": "LT",

    /**
     * value: "LE"
     * @const
     */
    "LE": "LE",

    /**
     * value: "LC"
     * @const
     */
    "LC": "LC",

    /**
     * value: "LI"
     * @const
     */
    "LI": "LI",

    /**
     * value: "LO"
     * @const
     */
    "LO": "LO",

    /**
     * value: "LU"
     * @const
     */
    "LU": "LU",

    /**
     * value: "MC"
     * @const
     */
    "MC": "MC",

    /**
     * value: "MN"
     * @const
     */
    "MN": "MN",

    /**
     * value: "MS"
     * @const
     */
    "MS": "MS",

    /**
     * value: "MT"
     * @const
     */
    "MT": "MT",

    /**
     * value: "VS"
     * @const
     */
    "VS": "VS",

    /**
     * value: "ME"
     * @const
     */
    "ME": "ME",

    /**
     * value: "MI"
     * @const
     */
    "MI": "MI",

    /**
     * value: "MO"
     * @const
     */
    "MO": "MO",

    /**
     * value: "MB"
     * @const
     */
    "MB": "MB",

    /**
     * value: "NA"
     * @const
     */
    "NA": "NA",

    /**
     * value: "false"
     * @const
     */
    "false": "false",

    /**
     * value: "NU"
     * @const
     */
    "NU": "NU",

    /**
     * value: "OG"
     * @const
     */
    "OG": "OG",

    /**
     * value: "OT"
     * @const
     */
    "OT": "OT",

    /**
     * value: "OR"
     * @const
     */
    "OR": "OR",

    /**
     * value: "PD"
     * @const
     */
    "PD": "PD",

    /**
     * value: "PA"
     * @const
     */
    "PA": "PA",

    /**
     * value: "PR"
     * @const
     */
    "PR": "PR",

    /**
     * value: "PV"
     * @const
     */
    "PV": "PV",

    /**
     * value: "PG"
     * @const
     */
    "PG": "PG",

    /**
     * value: "PU"
     * @const
     */
    "PU": "PU",

    /**
     * value: "PE"
     * @const
     */
    "PE": "PE",

    /**
     * value: "PC"
     * @const
     */
    "PC": "PC",

    /**
     * value: "PI"
     * @const
     */
    "PI": "PI",

    /**
     * value: "PT"
     * @const
     */
    "PT": "PT",

    /**
     * value: "PN"
     * @const
     */
    "PN": "PN",

    /**
     * value: "PZ"
     * @const
     */
    "PZ": "PZ",

    /**
     * value: "PO"
     * @const
     */
    "PO": "PO",

    /**
     * value: "RG"
     * @const
     */
    "RG": "RG",

    /**
     * value: "RA"
     * @const
     */
    "RA": "RA",

    /**
     * value: "RC"
     * @const
     */
    "RC": "RC",

    /**
     * value: "RE"
     * @const
     */
    "RE": "RE",

    /**
     * value: "RI"
     * @const
     */
    "RI": "RI",

    /**
     * value: "RN"
     * @const
     */
    "RN": "RN",

    /**
     * value: "RO"
     * @const
     */
    "RO": "RO",

    /**
     * value: "SA"
     * @const
     */
    "SA": "SA",

    /**
     * value: "SS"
     * @const
     */
    "SS": "SS",

    /**
     * value: "SV"
     * @const
     */
    "SV": "SV",

    /**
     * value: "SI"
     * @const
     */
    "SI": "SI",

    /**
     * value: "SR"
     * @const
     */
    "SR": "SR",

    /**
     * value: "SO"
     * @const
     */
    "SO": "SO",

    /**
     * value: "TA"
     * @const
     */
    "TA": "TA",

    /**
     * value: "TE"
     * @const
     */
    "TE": "TE",

    /**
     * value: "TR"
     * @const
     */
    "TR": "TR",

    /**
     * value: "TO"
     * @const
     */
    "TO": "TO",

    /**
     * value: "TP"
     * @const
     */
    "TP": "TP",

    /**
     * value: "TN"
     * @const
     */
    "TN": "TN",

    /**
     * value: "TV"
     * @const
     */
    "TV": "TV",

    /**
     * value: "TS"
     * @const
     */
    "TS": "TS",

    /**
     * value: "UD"
     * @const
     */
    "UD": "UD",

    /**
     * value: "VA"
     * @const
     */
    "VA": "VA",

    /**
     * value: "VE"
     * @const
     */
    "VE": "VE",

    /**
     * value: "VB"
     * @const
     */
    "VB": "VB",

    /**
     * value: "VC"
     * @const
     */
    "VC": "VC",

    /**
     * value: "VR"
     * @const
     */
    "VR": "VR",

    /**
     * value: "VV"
     * @const
     */
    "VV": "VV",

    /**
     * value: "VI"
     * @const
     */
    "VI": "VI",

    /**
     * value: "VT"
     * @const
     */
    "VT": "VT"
};



export default Rea;

