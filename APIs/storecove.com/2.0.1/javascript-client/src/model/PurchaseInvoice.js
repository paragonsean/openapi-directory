/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentMeansDEPRECATED from './PaymentMeansDEPRECATED';
import PurchaseInvoiceAccountingDetails from './PurchaseInvoiceAccountingDetails';
import PurchaseInvoiceAllowanceCharge from './PurchaseInvoiceAllowanceCharge';
import PurchaseInvoiceAttachment from './PurchaseInvoiceAttachment';
import PurchaseInvoiceDelivery from './PurchaseInvoiceDelivery';
import PurchaseInvoiceDocumentTotals from './PurchaseInvoiceDocumentTotals';
import PurchaseInvoiceInvoiceLine from './PurchaseInvoiceInvoiceLine';
import PurchaseInvoicePaymentMeans from './PurchaseInvoicePaymentMeans';
import PurchaseInvoiceSender from './PurchaseInvoiceSender';
import PurchaseInvoiceTaxSubtotal from './PurchaseInvoiceTaxSubtotal';

/**
 * The PurchaseInvoice model module.
 * @module model/PurchaseInvoice
 * @version 2.0.1
 */
class PurchaseInvoice {
    /**
     * Constructs a new <code>PurchaseInvoice</code>.
     * @alias module:model/PurchaseInvoice
     */
    constructor() { 
        
        PurchaseInvoice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PurchaseInvoice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PurchaseInvoice} obj Optional instance to populate.
     * @return {module:model/PurchaseInvoice} The populated <code>PurchaseInvoice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PurchaseInvoice();

            if (data.hasOwnProperty('accounting')) {
                obj['accounting'] = PurchaseInvoiceAccountingDetails.constructFromObject(data['accounting']);
            }
            if (data.hasOwnProperty('accounting_cost')) {
                obj['accounting_cost'] = ApiClient.convertToType(data['accounting_cost'], 'String');
            }
            if (data.hasOwnProperty('allowance_charge')) {
                obj['allowance_charge'] = ApiClient.convertToType(data['allowance_charge'], 'Number');
            }
            if (data.hasOwnProperty('allowance_charges')) {
                obj['allowance_charges'] = ApiClient.convertToType(data['allowance_charges'], [PurchaseInvoiceAllowanceCharge]);
            }
            if (data.hasOwnProperty('amount_including_vat')) {
                obj['amount_including_vat'] = ApiClient.convertToType(data['amount_including_vat'], 'Number');
            }
            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [PurchaseInvoiceAttachment]);
            }
            if (data.hasOwnProperty('billing_reference')) {
                obj['billing_reference'] = ApiClient.convertToType(data['billing_reference'], 'String');
            }
            if (data.hasOwnProperty('buyer_reference')) {
                obj['buyer_reference'] = ApiClient.convertToType(data['buyer_reference'], 'String');
            }
            if (data.hasOwnProperty('contract_document_reference')) {
                obj['contract_document_reference'] = ApiClient.convertToType(data['contract_document_reference'], 'String');
            }
            if (data.hasOwnProperty('delivery')) {
                obj['delivery'] = PurchaseInvoiceDelivery.constructFromObject(data['delivery']);
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = ApiClient.convertToType(data['document'], 'String');
            }
            if (data.hasOwnProperty('document_currency_code')) {
                obj['document_currency_code'] = ApiClient.convertToType(data['document_currency_code'], 'String');
            }
            if (data.hasOwnProperty('document_totals')) {
                obj['document_totals'] = PurchaseInvoiceDocumentTotals.constructFromObject(data['document_totals']);
            }
            if (data.hasOwnProperty('document_type')) {
                obj['document_type'] = ApiClient.convertToType(data['document_type'], 'String');
            }
            if (data.hasOwnProperty('due_date')) {
                obj['due_date'] = ApiClient.convertToType(data['due_date'], 'String');
            }
            if (data.hasOwnProperty('external_key')) {
                obj['external_key'] = ApiClient.convertToType(data['external_key'], 'String');
            }
            if (data.hasOwnProperty('external_user_id')) {
                obj['external_user_id'] = ApiClient.convertToType(data['external_user_id'], 'String');
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('invoice_lines')) {
                obj['invoice_lines'] = ApiClient.convertToType(data['invoice_lines'], [PurchaseInvoiceInvoiceLine]);
            }
            if (data.hasOwnProperty('invoice_number')) {
                obj['invoice_number'] = ApiClient.convertToType(data['invoice_number'], 'String');
            }
            if (data.hasOwnProperty('invoice_type')) {
                obj['invoice_type'] = ApiClient.convertToType(data['invoice_type'], 'String');
            }
            if (data.hasOwnProperty('issue_date')) {
                obj['issue_date'] = ApiClient.convertToType(data['issue_date'], 'String');
            }
            if (data.hasOwnProperty('legal_entity_id')) {
                obj['legal_entity_id'] = ApiClient.convertToType(data['legal_entity_id'], 'Number');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('order_reference')) {
                obj['order_reference'] = ApiClient.convertToType(data['order_reference'], 'String');
            }
            if (data.hasOwnProperty('payment_means')) {
                obj['payment_means'] = PaymentMeansDEPRECATED.constructFromObject(data['payment_means']);
            }
            if (data.hasOwnProperty('payment_means_array')) {
                obj['payment_means_array'] = ApiClient.convertToType(data['payment_means_array'], [PurchaseInvoicePaymentMeans]);
            }
            if (data.hasOwnProperty('payment_means_payment_id')) {
                obj['payment_means_payment_id'] = ApiClient.convertToType(data['payment_means_payment_id'], 'String');
            }
            if (data.hasOwnProperty('payment_terms_note')) {
                obj['payment_terms_note'] = ApiClient.convertToType(data['payment_terms_note'], 'String');
            }
            if (data.hasOwnProperty('period_end')) {
                obj['period_end'] = ApiClient.convertToType(data['period_end'], 'String');
            }
            if (data.hasOwnProperty('period_start')) {
                obj['period_start'] = ApiClient.convertToType(data['period_start'], 'String');
            }
            if (data.hasOwnProperty('project_reference')) {
                obj['project_reference'] = ApiClient.convertToType(data['project_reference'], 'String');
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = PurchaseInvoiceSender.constructFromObject(data['sender']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('sub_type')) {
                obj['sub_type'] = ApiClient.convertToType(data['sub_type'], 'String');
            }
            if (data.hasOwnProperty('system_generated_primary_image')) {
                obj['system_generated_primary_image'] = ApiClient.convertToType(data['system_generated_primary_image'], 'Boolean');
            }
            if (data.hasOwnProperty('tax_point_date')) {
                obj['tax_point_date'] = ApiClient.convertToType(data['tax_point_date'], 'String');
            }
            if (data.hasOwnProperty('tax_subtotals')) {
                obj['tax_subtotals'] = ApiClient.convertToType(data['tax_subtotals'], [PurchaseInvoiceTaxSubtotal]);
            }
            if (data.hasOwnProperty('tax_system')) {
                obj['tax_system'] = ApiClient.convertToType(data['tax_system'], 'String');
            }
            if (data.hasOwnProperty('vat_reverse_charge')) {
                obj['vat_reverse_charge'] = ApiClient.convertToType(data['vat_reverse_charge'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PurchaseInvoice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PurchaseInvoice</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accounting`
        if (data['accounting']) { // data not null
          PurchaseInvoiceAccountingDetails.validateJSON(data['accounting']);
        }
        // ensure the json data is a string
        if (data['accounting_cost'] && !(typeof data['accounting_cost'] === 'string' || data['accounting_cost'] instanceof String)) {
            throw new Error("Expected the field `accounting_cost` to be a primitive type in the JSON string but got " + data['accounting_cost']);
        }
        if (data['allowance_charges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['allowance_charges'])) {
                throw new Error("Expected the field `allowance_charges` to be an array in the JSON data but got " + data['allowance_charges']);
            }
            // validate the optional field `allowance_charges` (array)
            for (const item of data['allowance_charges']) {
                PurchaseInvoiceAllowanceCharge.validateJSON(item);
            };
        }
        if (data['attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachments'])) {
                throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
            }
            // validate the optional field `attachments` (array)
            for (const item of data['attachments']) {
                PurchaseInvoiceAttachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['billing_reference'] && !(typeof data['billing_reference'] === 'string' || data['billing_reference'] instanceof String)) {
            throw new Error("Expected the field `billing_reference` to be a primitive type in the JSON string but got " + data['billing_reference']);
        }
        // ensure the json data is a string
        if (data['buyer_reference'] && !(typeof data['buyer_reference'] === 'string' || data['buyer_reference'] instanceof String)) {
            throw new Error("Expected the field `buyer_reference` to be a primitive type in the JSON string but got " + data['buyer_reference']);
        }
        // ensure the json data is a string
        if (data['contract_document_reference'] && !(typeof data['contract_document_reference'] === 'string' || data['contract_document_reference'] instanceof String)) {
            throw new Error("Expected the field `contract_document_reference` to be a primitive type in the JSON string but got " + data['contract_document_reference']);
        }
        // validate the optional field `delivery`
        if (data['delivery']) { // data not null
          PurchaseInvoiceDelivery.validateJSON(data['delivery']);
        }
        // ensure the json data is a string
        if (data['document'] && !(typeof data['document'] === 'string' || data['document'] instanceof String)) {
            throw new Error("Expected the field `document` to be a primitive type in the JSON string but got " + data['document']);
        }
        // ensure the json data is a string
        if (data['document_currency_code'] && !(typeof data['document_currency_code'] === 'string' || data['document_currency_code'] instanceof String)) {
            throw new Error("Expected the field `document_currency_code` to be a primitive type in the JSON string but got " + data['document_currency_code']);
        }
        // validate the optional field `document_totals`
        if (data['document_totals']) { // data not null
          PurchaseInvoiceDocumentTotals.validateJSON(data['document_totals']);
        }
        // ensure the json data is a string
        if (data['document_type'] && !(typeof data['document_type'] === 'string' || data['document_type'] instanceof String)) {
            throw new Error("Expected the field `document_type` to be a primitive type in the JSON string but got " + data['document_type']);
        }
        // ensure the json data is a string
        if (data['due_date'] && !(typeof data['due_date'] === 'string' || data['due_date'] instanceof String)) {
            throw new Error("Expected the field `due_date` to be a primitive type in the JSON string but got " + data['due_date']);
        }
        // ensure the json data is a string
        if (data['external_key'] && !(typeof data['external_key'] === 'string' || data['external_key'] instanceof String)) {
            throw new Error("Expected the field `external_key` to be a primitive type in the JSON string but got " + data['external_key']);
        }
        // ensure the json data is a string
        if (data['external_user_id'] && !(typeof data['external_user_id'] === 'string' || data['external_user_id'] instanceof String)) {
            throw new Error("Expected the field `external_user_id` to be a primitive type in the JSON string but got " + data['external_user_id']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        if (data['invoice_lines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['invoice_lines'])) {
                throw new Error("Expected the field `invoice_lines` to be an array in the JSON data but got " + data['invoice_lines']);
            }
            // validate the optional field `invoice_lines` (array)
            for (const item of data['invoice_lines']) {
                PurchaseInvoiceInvoiceLine.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['invoice_number'] && !(typeof data['invoice_number'] === 'string' || data['invoice_number'] instanceof String)) {
            throw new Error("Expected the field `invoice_number` to be a primitive type in the JSON string but got " + data['invoice_number']);
        }
        // ensure the json data is a string
        if (data['invoice_type'] && !(typeof data['invoice_type'] === 'string' || data['invoice_type'] instanceof String)) {
            throw new Error("Expected the field `invoice_type` to be a primitive type in the JSON string but got " + data['invoice_type']);
        }
        // ensure the json data is a string
        if (data['issue_date'] && !(typeof data['issue_date'] === 'string' || data['issue_date'] instanceof String)) {
            throw new Error("Expected the field `issue_date` to be a primitive type in the JSON string but got " + data['issue_date']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['order_reference'] && !(typeof data['order_reference'] === 'string' || data['order_reference'] instanceof String)) {
            throw new Error("Expected the field `order_reference` to be a primitive type in the JSON string but got " + data['order_reference']);
        }
        // validate the optional field `payment_means`
        if (data['payment_means']) { // data not null
          PaymentMeansDEPRECATED.validateJSON(data['payment_means']);
        }
        if (data['payment_means_array']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payment_means_array'])) {
                throw new Error("Expected the field `payment_means_array` to be an array in the JSON data but got " + data['payment_means_array']);
            }
            // validate the optional field `payment_means_array` (array)
            for (const item of data['payment_means_array']) {
                PurchaseInvoicePaymentMeans.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['payment_means_payment_id'] && !(typeof data['payment_means_payment_id'] === 'string' || data['payment_means_payment_id'] instanceof String)) {
            throw new Error("Expected the field `payment_means_payment_id` to be a primitive type in the JSON string but got " + data['payment_means_payment_id']);
        }
        // ensure the json data is a string
        if (data['payment_terms_note'] && !(typeof data['payment_terms_note'] === 'string' || data['payment_terms_note'] instanceof String)) {
            throw new Error("Expected the field `payment_terms_note` to be a primitive type in the JSON string but got " + data['payment_terms_note']);
        }
        // ensure the json data is a string
        if (data['period_end'] && !(typeof data['period_end'] === 'string' || data['period_end'] instanceof String)) {
            throw new Error("Expected the field `period_end` to be a primitive type in the JSON string but got " + data['period_end']);
        }
        // ensure the json data is a string
        if (data['period_start'] && !(typeof data['period_start'] === 'string' || data['period_start'] instanceof String)) {
            throw new Error("Expected the field `period_start` to be a primitive type in the JSON string but got " + data['period_start']);
        }
        // ensure the json data is a string
        if (data['project_reference'] && !(typeof data['project_reference'] === 'string' || data['project_reference'] instanceof String)) {
            throw new Error("Expected the field `project_reference` to be a primitive type in the JSON string but got " + data['project_reference']);
        }
        // validate the optional field `sender`
        if (data['sender']) { // data not null
          PurchaseInvoiceSender.validateJSON(data['sender']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['sub_type'] && !(typeof data['sub_type'] === 'string' || data['sub_type'] instanceof String)) {
            throw new Error("Expected the field `sub_type` to be a primitive type in the JSON string but got " + data['sub_type']);
        }
        // ensure the json data is a string
        if (data['tax_point_date'] && !(typeof data['tax_point_date'] === 'string' || data['tax_point_date'] instanceof String)) {
            throw new Error("Expected the field `tax_point_date` to be a primitive type in the JSON string but got " + data['tax_point_date']);
        }
        if (data['tax_subtotals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tax_subtotals'])) {
                throw new Error("Expected the field `tax_subtotals` to be an array in the JSON data but got " + data['tax_subtotals']);
            }
            // validate the optional field `tax_subtotals` (array)
            for (const item of data['tax_subtotals']) {
                PurchaseInvoiceTaxSubtotal.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['tax_system'] && !(typeof data['tax_system'] === 'string' || data['tax_system'] instanceof String)) {
            throw new Error("Expected the field `tax_system` to be a primitive type in the JSON string but got " + data['tax_system']);
        }

        return true;
    }


}



/**
 * @member {module:model/PurchaseInvoiceAccountingDetails} accounting
 */
PurchaseInvoice.prototype['accounting'] = undefined;

/**
 * The accounting cost code.
 * @member {String} accounting_cost
 */
PurchaseInvoice.prototype['accounting_cost'] = undefined;

/**
 * DEPRECATED - Use the allowance_charges array.
 * @member {Number} allowance_charge
 */
PurchaseInvoice.prototype['allowance_charge'] = undefined;

/**
 * @member {Array.<module:model/PurchaseInvoiceAllowanceCharge>} allowance_charges
 */
PurchaseInvoice.prototype['allowance_charges'] = undefined;

/**
 * DEPRECATED - Use amount_including_tax.
 * @member {Number} amount_including_vat
 */
PurchaseInvoice.prototype['amount_including_vat'] = undefined;

/**
 * @member {Array.<module:model/PurchaseInvoiceAttachment>} attachments
 */
PurchaseInvoice.prototype['attachments'] = undefined;

/**
 * Reference to the previous invoice this invoice relates to.
 * @member {String} billing_reference
 */
PurchaseInvoice.prototype['billing_reference'] = undefined;

/**
 * Reference provided by the buyer. Used for routing.
 * @member {String} buyer_reference
 */
PurchaseInvoice.prototype['buyer_reference'] = undefined;

/**
 * Reference to the contract.
 * @member {String} contract_document_reference
 */
PurchaseInvoice.prototype['contract_document_reference'] = undefined;

/**
 * @member {module:model/PurchaseInvoiceDelivery} delivery
 */
PurchaseInvoice.prototype['delivery'] = undefined;

/**
 * DEPRECATED. Use the new atatchments array.
 * @member {String} document
 */
PurchaseInvoice.prototype['document'] = undefined;

/**
 * The ISO 4217 currency for the invoice.
 * @member {String} document_currency_code
 */
PurchaseInvoice.prototype['document_currency_code'] = undefined;

/**
 * @member {module:model/PurchaseInvoiceDocumentTotals} document_totals
 */
PurchaseInvoice.prototype['document_totals'] = undefined;

/**
 * The type of document. Only \"invoice\" for now.
 * @member {module:model/PurchaseInvoice.DocumentTypeEnum} document_type
 */
PurchaseInvoice.prototype['document_type'] = undefined;

/**
 * The date the invoice must be payed by. Format \"YYYY-MM-DD\".
 * @member {String} due_date
 */
PurchaseInvoice.prototype['due_date'] = undefined;

/**
 * Deprecated. Used for accountants. The id you specified for the organization.
 * @member {String} external_key
 */
PurchaseInvoice.prototype['external_key'] = undefined;

/**
 * Deprecated. Used for the embedded portal retrieval service. The external_user_id you provided when the ShopAccount was created.
 * @member {String} external_user_id
 */
PurchaseInvoice.prototype['external_user_id'] = undefined;

/**
 * The GUID of the invoice
 * @member {String} guid
 */
PurchaseInvoice.prototype['guid'] = undefined;

/**
 * @member {Array.<module:model/PurchaseInvoiceInvoiceLine>} invoice_lines
 */
PurchaseInvoice.prototype['invoice_lines'] = undefined;

/**
 * The invoicenumber.
 * @member {String} invoice_number
 */
PurchaseInvoice.prototype['invoice_number'] = undefined;

/**
 * The type of invoice.
 * @member {module:model/PurchaseInvoice.InvoiceTypeEnum} invoice_type
 */
PurchaseInvoice.prototype['invoice_type'] = undefined;

/**
 * The date the invoice was issued. Format \"YYYY-MM-DD\".
 * @member {String} issue_date
 */
PurchaseInvoice.prototype['issue_date'] = undefined;

/**
 * The id of the LegalEntity the invoice was received for.
 * @member {Number} legal_entity_id
 */
PurchaseInvoice.prototype['legal_entity_id'] = undefined;

/**
 * The invoice level note.
 * @member {String} note
 */
PurchaseInvoice.prototype['note'] = undefined;

/**
 * Reference to the order. Used for matching the invoice to an order.
 * @member {String} order_reference
 */
PurchaseInvoice.prototype['order_reference'] = undefined;

/**
 * @member {module:model/PaymentMeansDEPRECATED} payment_means
 */
PurchaseInvoice.prototype['payment_means'] = undefined;

/**
 * The different payment means that can be used to pay the invoice.
 * @member {Array.<module:model/PurchaseInvoicePaymentMeans>} payment_means_array
 */
PurchaseInvoice.prototype['payment_means_array'] = undefined;

/**
 * DEPRECATED - use the payment_id property in the payment_means_array
 * @member {String} payment_means_payment_id
 */
PurchaseInvoice.prototype['payment_means_payment_id'] = undefined;

/**
 * A textual description of the payment terms.
 * @member {String} payment_terms_note
 */
PurchaseInvoice.prototype['payment_terms_note'] = undefined;

/**
 * The end date of the period this invoice relates to. Format \"YYYY-MM-DD\".
 * @member {String} period_end
 */
PurchaseInvoice.prototype['period_end'] = undefined;

/**
 * The start date of the period this invoice relates to. Format \"YYYY-MM-DD\".
 * @member {String} period_start
 */
PurchaseInvoice.prototype['period_start'] = undefined;

/**
 * Reference to the project.
 * @member {String} project_reference
 */
PurchaseInvoice.prototype['project_reference'] = undefined;

/**
 * @member {module:model/PurchaseInvoiceSender} sender
 */
PurchaseInvoice.prototype['sender'] = undefined;

/**
 * The source the invoice was received from.
 * @member {module:model/PurchaseInvoice.SourceEnum} source
 */
PurchaseInvoice.prototype['source'] = undefined;

/**
 * The subtype of document.
 * @member {module:model/PurchaseInvoice.SubTypeEnum} sub_type
 */
PurchaseInvoice.prototype['sub_type'] = undefined;

/**
 * Whether or not the document image (PDF) was generated by Storecove. If true, it means the invoice was received without any attachments and Storecove generated one for you. If false, the invoice will contain at least one attachment, which was received from the invoice sender.
 * @member {Boolean} system_generated_primary_image
 */
PurchaseInvoice.prototype['system_generated_primary_image'] = undefined;

/**
 * The date the invoice was issued for tax purposes. In most countries MUST match the issue_date. Format \"YYYY-MM-DD\".
 * @member {String} tax_point_date
 */
PurchaseInvoice.prototype['tax_point_date'] = undefined;

/**
 * @member {Array.<module:model/PurchaseInvoiceTaxSubtotal>} tax_subtotals
 */
PurchaseInvoice.prototype['tax_subtotals'] = undefined;

/**
 * The tax system of the invoice. Either tax_line_percentages or tax_line_amounts. The first tax system means the invoice lines contain only the tax percentages and the tax amounts are included only in the tax subtotals at the invoice level and so are only calculated at the invoice level. The tax system tax_line_amounts means that in addition to the percentage, each invoice line also contains the tax amount. The tax subtotals at the invoice level are calculated as the sum of the tax of the invoice lines. The distinction between the two tax systems has has implications for rounding.
 * @member {String} tax_system
 */
PurchaseInvoice.prototype['tax_system'] = undefined;

/**
 * DEPRECATED - This is now part of each invoice line.
 * @member {Boolean} vat_reverse_charge
 */
PurchaseInvoice.prototype['vat_reverse_charge'] = undefined;





/**
 * Allowed values for the <code>document_type</code> property.
 * @enum {String}
 * @readonly
 */
PurchaseInvoice['DocumentTypeEnum'] = {

    /**
     * value: "invoice"
     * @const
     */
    "invoice": "invoice"
};


/**
 * Allowed values for the <code>invoice_type</code> property.
 * @enum {String}
 * @readonly
 */
PurchaseInvoice['InvoiceTypeEnum'] = {

    /**
     * value: "invoice"
     * @const
     */
    "invoice": "invoice",

    /**
     * value: "creditnote"
     * @const
     */
    "creditnote": "creditnote",

    /**
     * value: "correctioninvoice"
     * @const
     */
    "correctioninvoice": "correctioninvoice"
};


/**
 * Allowed values for the <code>source</code> property.
 * @enum {String}
 * @readonly
 */
PurchaseInvoice['SourceEnum'] = {

    /**
     * value: "peppol"
     * @const
     */
    "peppol": "peppol",

    /**
     * value: "script"
     * @const
     */
    "script": "script",

    /**
     * value: "supplier"
     * @const
     */
    "supplier": "supplier",

    /**
     * value: "email"
     * @const
     */
    "email": "email"
};


/**
 * Allowed values for the <code>sub_type</code> property.
 * @enum {String}
 * @readonly
 */
PurchaseInvoice['SubTypeEnum'] = {

    /**
     * value: "invoice"
     * @const
     */
    "invoice": "invoice",

    /**
     * value: "creditnote"
     * @const
     */
    "creditnote": "creditnote",

    /**
     * value: "correctioninvoice"
     * @const
     */
    "correctioninvoice": "correctioninvoice"
};



export default PurchaseInvoice;

