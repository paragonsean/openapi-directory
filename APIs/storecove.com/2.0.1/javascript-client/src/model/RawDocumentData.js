/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RawDocumentData model module.
 * @module model/RawDocumentData
 * @version 2.0.1
 */
class RawDocumentData {
    /**
     * Constructs a new <code>RawDocumentData</code>.
     * A document to send, in base64 encoded format.
     * @alias module:model/RawDocumentData
     * @param document {String} The base64 encoded version of the document.
     */
    constructor(document) { 
        
        RawDocumentData.initialize(this, document);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, document) { 
        obj['document'] = document;
        obj['parse'] = true;
    }

    /**
     * Constructs a <code>RawDocumentData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RawDocumentData} obj Optional instance to populate.
     * @return {module:model/RawDocumentData} The populated <code>RawDocumentData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RawDocumentData();

            if (data.hasOwnProperty('document')) {
                obj['document'] = ApiClient.convertToType(data['document'], 'String');
            }
            if (data.hasOwnProperty('documentTypeId')) {
                obj['documentTypeId'] = ApiClient.convertToType(data['documentTypeId'], 'String');
            }
            if (data.hasOwnProperty('parse')) {
                obj['parse'] = ApiClient.convertToType(data['parse'], 'Boolean');
            }
            if (data.hasOwnProperty('parseStrategy')) {
                obj['parseStrategy'] = ApiClient.convertToType(data['parseStrategy'], 'String');
            }
            if (data.hasOwnProperty('processId')) {
                obj['processId'] = ApiClient.convertToType(data['processId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RawDocumentData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RawDocumentData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RawDocumentData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['document'] && !(typeof data['document'] === 'string' || data['document'] instanceof String)) {
            throw new Error("Expected the field `document` to be a primitive type in the JSON string but got " + data['document']);
        }
        // ensure the json data is a string
        if (data['documentTypeId'] && !(typeof data['documentTypeId'] === 'string' || data['documentTypeId'] instanceof String)) {
            throw new Error("Expected the field `documentTypeId` to be a primitive type in the JSON string but got " + data['documentTypeId']);
        }
        // ensure the json data is a string
        if (data['parseStrategy'] && !(typeof data['parseStrategy'] === 'string' || data['parseStrategy'] instanceof String)) {
            throw new Error("Expected the field `parseStrategy` to be a primitive type in the JSON string but got " + data['parseStrategy']);
        }
        // ensure the json data is a string
        if (data['processId'] && !(typeof data['processId'] === 'string' || data['processId'] instanceof String)) {
            throw new Error("Expected the field `processId` to be a primitive type in the JSON string but got " + data['processId']);
        }

        return true;
    }


}

RawDocumentData.RequiredProperties = ["document"];

/**
 * The base64 encoded version of the document.
 * @member {String} document
 */
RawDocumentData.prototype['document'] = undefined;

/**
 * The document type id of the document. Required when parse == false.
 * @member {String} documentTypeId
 */
RawDocumentData.prototype['documentTypeId'] = undefined;

/**
 * *** NOTE: only parse == true is currently supported *** *** NOTE: parsing is only supported for documentType == 'invoice' *** Whether or not to parse the document. If true, the data will be extracted from the document and used to construct a new document. If false, the document will be sent as is. In this case, you must ensure the document validates without any errors against the relevant validation artifacts for that processId/documentTypeId. We automatically apply updates of the validation artificats, respecting the grace period provided by the issuer. During that period, documents that validate against either the old as well as against the new artifacts are accepted. After the grace period, your document must validate against the new artifacts. You are also responsible for making sure your receiver is able to receive the updated document.
 * @member {Boolean} parse
 * @default true
 */
RawDocumentData.prototype['parse'] = true;

/**
 * How to parse the document. Only needed when parse == true.
 * @member {module:model/RawDocumentData.ParseStrategyEnum} parseStrategy
 */
RawDocumentData.prototype['parseStrategy'] = undefined;

/**
 * The process id of the document. Required when parse == false.
 * @member {String} processId
 */
RawDocumentData.prototype['processId'] = undefined;





/**
 * Allowed values for the <code>parseStrategy</code> property.
 * @enum {String}
 * @readonly
 */
RawDocumentData['ParseStrategyEnum'] = {

    /**
     * value: "ubl"
     * @const
     */
    "ubl": "ubl",

    /**
     * value: "cii"
     * @const
     */
    "cii": "cii",

    /**
     * value: "idoc"
     * @const
     */
    "idoc": "idoc"
};



export default RawDocumentData;

