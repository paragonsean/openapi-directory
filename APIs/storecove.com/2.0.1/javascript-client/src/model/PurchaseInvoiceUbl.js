/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PurchaseInvoiceUbl model module.
 * @module model/PurchaseInvoiceUbl
 * @version 2.0.1
 */
class PurchaseInvoiceUbl {
    /**
     * Constructs a new <code>PurchaseInvoiceUbl</code>.
     * @alias module:model/PurchaseInvoiceUbl
     */
    constructor() { 
        
        PurchaseInvoiceUbl.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PurchaseInvoiceUbl</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PurchaseInvoiceUbl} obj Optional instance to populate.
     * @return {module:model/PurchaseInvoiceUbl} The populated <code>PurchaseInvoiceUbl</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PurchaseInvoiceUbl();

            if (data.hasOwnProperty('external_key')) {
                obj['external_key'] = ApiClient.convertToType(data['external_key'], 'String');
            }
            if (data.hasOwnProperty('external_user_id')) {
                obj['external_user_id'] = ApiClient.convertToType(data['external_user_id'], 'String');
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('legal_entity_id')) {
                obj['legal_entity_id'] = ApiClient.convertToType(data['legal_entity_id'], 'Number');
            }
            if (data.hasOwnProperty('system_generated_primary_image')) {
                obj['system_generated_primary_image'] = ApiClient.convertToType(data['system_generated_primary_image'], 'Boolean');
            }
            if (data.hasOwnProperty('tax_system')) {
                obj['tax_system'] = ApiClient.convertToType(data['tax_system'], 'String');
            }
            if (data.hasOwnProperty('ubl')) {
                obj['ubl'] = ApiClient.convertToType(data['ubl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PurchaseInvoiceUbl</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PurchaseInvoiceUbl</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['external_key'] && !(typeof data['external_key'] === 'string' || data['external_key'] instanceof String)) {
            throw new Error("Expected the field `external_key` to be a primitive type in the JSON string but got " + data['external_key']);
        }
        // ensure the json data is a string
        if (data['external_user_id'] && !(typeof data['external_user_id'] === 'string' || data['external_user_id'] instanceof String)) {
            throw new Error("Expected the field `external_user_id` to be a primitive type in the JSON string but got " + data['external_user_id']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // ensure the json data is a string
        if (data['tax_system'] && !(typeof data['tax_system'] === 'string' || data['tax_system'] instanceof String)) {
            throw new Error("Expected the field `tax_system` to be a primitive type in the JSON string but got " + data['tax_system']);
        }
        // ensure the json data is a string
        if (data['ubl'] && !(typeof data['ubl'] === 'string' || data['ubl'] instanceof String)) {
            throw new Error("Expected the field `ubl` to be a primitive type in the JSON string but got " + data['ubl']);
        }

        return true;
    }


}



/**
 * Used for accountants. The id you specified for the organization.
 * @member {String} external_key
 */
PurchaseInvoiceUbl.prototype['external_key'] = undefined;

/**
 * Used for the embedded portal retrieval service. The external_user_id you provided when the ShopAccount was created.
 * @member {String} external_user_id
 */
PurchaseInvoiceUbl.prototype['external_user_id'] = undefined;

/**
 * The GUID of the invoice
 * @member {String} guid
 */
PurchaseInvoiceUbl.prototype['guid'] = undefined;

/**
 * The id of the LegalEntity the invoice was received for.
 * @member {Number} legal_entity_id
 */
PurchaseInvoiceUbl.prototype['legal_entity_id'] = undefined;

/**
 * Whether or not the document image (PDF) was generated by Storecove. If true, it means the invoice was received without any attachments and Storecove generated one for you. If false, the invoice will contain at least one attachment, which was received from the invoice sender.
 * @member {Boolean} system_generated_primary_image
 */
PurchaseInvoiceUbl.prototype['system_generated_primary_image'] = undefined;

/**
 * The tax system of the invoice. Either tax_line_percentages or tax_line_amounts. The first tax system means the invoice lines contain only the tax percentages and the tax amounts are included only in the tax subtotals at the invoice level and so are only calculated at the invoice level. The tax system tax_line_amounts means that in addition to the percentage, each invoice line also contains the tax amount. The tax subtotals at the invoice level are calculated as the sum of the tax of the invoice lines. The distinction between the two tax systems has has implications for rounding.
 * @member {String} tax_system
 */
PurchaseInvoiceUbl.prototype['tax_system'] = undefined;

/**
 * The Base64 encoded UBL invoice.
 * @member {String} ubl
 */
PurchaseInvoiceUbl.prototype['ubl'] = undefined;






export default PurchaseInvoiceUbl;

