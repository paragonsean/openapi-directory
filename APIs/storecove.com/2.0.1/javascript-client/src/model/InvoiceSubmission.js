/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import Invoice from './Invoice';
import InvoiceData from './InvoiceData';
import InvoiceRecipient from './InvoiceRecipient';
import Routing from './Routing';

/**
 * The InvoiceSubmission model module.
 * @module model/InvoiceSubmission
 * @version 2.0.1
 */
class InvoiceSubmission {
    /**
     * Constructs a new <code>InvoiceSubmission</code>.
     * DEPRECATED. The invoice you want Storecove to process, with some meta-data.
     * @alias module:model/InvoiceSubmission
     */
    constructor() { 
        
        InvoiceSubmission.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InvoiceSubmission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InvoiceSubmission} obj Optional instance to populate.
     * @return {module:model/InvoiceSubmission} The populated <code>InvoiceSubmission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvoiceSubmission();

            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('createPrimaryImage')) {
                obj['createPrimaryImage'] = ApiClient.convertToType(data['createPrimaryImage'], 'Boolean');
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = ApiClient.convertToType(data['document'], 'String');
            }
            if (data.hasOwnProperty('documentUrl')) {
                obj['documentUrl'] = ApiClient.convertToType(data['documentUrl'], 'String');
            }
            if (data.hasOwnProperty('idempotencyGuid')) {
                obj['idempotencyGuid'] = ApiClient.convertToType(data['idempotencyGuid'], 'String');
            }
            if (data.hasOwnProperty('invoice')) {
                obj['invoice'] = Invoice.constructFromObject(data['invoice']);
            }
            if (data.hasOwnProperty('invoiceData')) {
                obj['invoiceData'] = InvoiceData.constructFromObject(data['invoiceData']);
            }
            if (data.hasOwnProperty('invoiceRecipient')) {
                obj['invoiceRecipient'] = InvoiceRecipient.constructFromObject(data['invoiceRecipient']);
            }
            if (data.hasOwnProperty('legalEntityId')) {
                obj['legalEntityId'] = ApiClient.convertToType(data['legalEntityId'], 'Number');
            }
            if (data.hasOwnProperty('legalSupplierId')) {
                obj['legalSupplierId'] = ApiClient.convertToType(data['legalSupplierId'], 'Number');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('routing')) {
                obj['routing'] = Routing.constructFromObject(data['routing']);
            }
            if (data.hasOwnProperty('supplierId')) {
                obj['supplierId'] = ApiClient.convertToType(data['supplierId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InvoiceSubmission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InvoiceSubmission</code>.
     */
    static validateJSON(data) {
        if (data['attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachments'])) {
                throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
            }
            // validate the optional field `attachments` (array)
            for (const item of data['attachments']) {
                Attachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['document'] && !(typeof data['document'] === 'string' || data['document'] instanceof String)) {
            throw new Error("Expected the field `document` to be a primitive type in the JSON string but got " + data['document']);
        }
        // ensure the json data is a string
        if (data['documentUrl'] && !(typeof data['documentUrl'] === 'string' || data['documentUrl'] instanceof String)) {
            throw new Error("Expected the field `documentUrl` to be a primitive type in the JSON string but got " + data['documentUrl']);
        }
        // ensure the json data is a string
        if (data['idempotencyGuid'] && !(typeof data['idempotencyGuid'] === 'string' || data['idempotencyGuid'] instanceof String)) {
            throw new Error("Expected the field `idempotencyGuid` to be a primitive type in the JSON string but got " + data['idempotencyGuid']);
        }
        // validate the optional field `invoice`
        if (data['invoice']) { // data not null
          Invoice.validateJSON(data['invoice']);
        }
        // validate the optional field `invoiceData`
        if (data['invoiceData']) { // data not null
          InvoiceData.validateJSON(data['invoiceData']);
        }
        // validate the optional field `invoiceRecipient`
        if (data['invoiceRecipient']) { // data not null
          InvoiceRecipient.validateJSON(data['invoiceRecipient']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // validate the optional field `routing`
        if (data['routing']) { // data not null
          Routing.validateJSON(data['routing']);
        }

        return true;
    }


}



/**
 * An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.
 * @member {Array.<module:model/Attachment>} attachments
 */
InvoiceSubmission.prototype['attachments'] = undefined;

/**
 * DEPRECATED. In the future we will no longer support creating PDF invoices. Whether or not to create a primary image (PDF) if one is not provided. For customers who started from December 1st 2022, the default is false. For customers who started before that, the default is true.
 * @member {Boolean} createPrimaryImage
 */
InvoiceSubmission.prototype['createPrimaryImage'] = undefined;

/**
 * DEPRECATED. Use attachments.
 * @member {String} document
 */
InvoiceSubmission.prototype['document'] = undefined;

/**
 * DEPRECATED. Use attachments.
 * @member {String} documentUrl
 */
InvoiceSubmission.prototype['documentUrl'] = undefined;

/**
 * A guid that you generated for this InvoiceSubmission to achieve idempotency. If you submit multiple documents with the same idempotencyGuid, only the first one will be processed.
 * @member {String} idempotencyGuid
 */
InvoiceSubmission.prototype['idempotencyGuid'] = undefined;

/**
 * @member {module:model/Invoice} invoice
 */
InvoiceSubmission.prototype['invoice'] = undefined;

/**
 * @member {module:model/InvoiceData} invoiceData
 */
InvoiceSubmission.prototype['invoiceData'] = undefined;

/**
 * @member {module:model/InvoiceRecipient} invoiceRecipient
 */
InvoiceSubmission.prototype['invoiceRecipient'] = undefined;

/**
 * The id of the LegalEntity this invoice should be sent for.
 * @member {Number} legalEntityId
 */
InvoiceSubmission.prototype['legalEntityId'] = undefined;

/**
 * DEPRECATED. Use legalEntityId
 * @member {Number} legalSupplierId
 */
InvoiceSubmission.prototype['legalSupplierId'] = undefined;

/**
 * DEPRECATED.
 * @member {module:model/InvoiceSubmission.ModeEnum} mode
 */
InvoiceSubmission.prototype['mode'] = undefined;

/**
 * @member {module:model/Routing} routing
 */
InvoiceSubmission.prototype['routing'] = undefined;

/**
 * DEPRECATED.
 * @member {Number} supplierId
 */
InvoiceSubmission.prototype['supplierId'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
InvoiceSubmission['ModeEnum'] = {

    /**
     * value: "direct"
     * @const
     */
    "direct": "direct"
};



export default InvoiceSubmission;

