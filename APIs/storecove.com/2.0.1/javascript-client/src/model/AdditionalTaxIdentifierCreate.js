/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdditionalTaxIdentifierCreate model module.
 * @module model/AdditionalTaxIdentifierCreate
 * @version 2.0.1
 */
class AdditionalTaxIdentifierCreate {
    /**
     * Constructs a new <code>AdditionalTaxIdentifierCreate</code>.
     * @alias module:model/AdditionalTaxIdentifierCreate
     * @param country {String} The ISO3166 country code to use this identifier for in case of consumerTaxMode.
     * @param identifier {String} The identifier.
     * @param scheme {String} The scheme of the identifier.
     * @param superscheme {String} The superscheme of the identifier. Should always be \"iso6523-actorid-upis\".
     */
    constructor(country, identifier, scheme, superscheme) { 
        
        AdditionalTaxIdentifierCreate.initialize(this, country, identifier, scheme, superscheme);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country, identifier, scheme, superscheme) { 
        obj['country'] = country;
        obj['identifier'] = identifier;
        obj['scheme'] = scheme;
        obj['superscheme'] = superscheme;
    }

    /**
     * Constructs a <code>AdditionalTaxIdentifierCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdditionalTaxIdentifierCreate} obj Optional instance to populate.
     * @return {module:model/AdditionalTaxIdentifierCreate} The populated <code>AdditionalTaxIdentifierCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdditionalTaxIdentifierCreate();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = ApiClient.convertToType(data['county'], 'String');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('scheme')) {
                obj['scheme'] = ApiClient.convertToType(data['scheme'], 'String');
            }
            if (data.hasOwnProperty('superscheme')) {
                obj['superscheme'] = ApiClient.convertToType(data['superscheme'], 'String');
            }
            if (data.hasOwnProperty('third_party_password')) {
                obj['third_party_password'] = ApiClient.convertToType(data['third_party_password'], 'String');
            }
            if (data.hasOwnProperty('third_party_username')) {
                obj['third_party_username'] = ApiClient.convertToType(data['third_party_username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdditionalTaxIdentifierCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdditionalTaxIdentifierCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AdditionalTaxIdentifierCreate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['county'] && !(typeof data['county'] === 'string' || data['county'] instanceof String)) {
            throw new Error("Expected the field `county` to be a primitive type in the JSON string but got " + data['county']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['scheme'] && !(typeof data['scheme'] === 'string' || data['scheme'] instanceof String)) {
            throw new Error("Expected the field `scheme` to be a primitive type in the JSON string but got " + data['scheme']);
        }
        // ensure the json data is a string
        if (data['superscheme'] && !(typeof data['superscheme'] === 'string' || data['superscheme'] instanceof String)) {
            throw new Error("Expected the field `superscheme` to be a primitive type in the JSON string but got " + data['superscheme']);
        }
        // ensure the json data is a string
        if (data['third_party_password'] && !(typeof data['third_party_password'] === 'string' || data['third_party_password'] instanceof String)) {
            throw new Error("Expected the field `third_party_password` to be a primitive type in the JSON string but got " + data['third_party_password']);
        }
        // ensure the json data is a string
        if (data['third_party_username'] && !(typeof data['third_party_username'] === 'string' || data['third_party_username'] instanceof String)) {
            throw new Error("Expected the field `third_party_username` to be a primitive type in the JSON string but got " + data['third_party_username']);
        }

        return true;
    }


}

AdditionalTaxIdentifierCreate.RequiredProperties = ["country", "identifier", "scheme", "superscheme"];

/**
 * The ISO3166 country code to use this identifier for in case of consumerTaxMode.
 * @member {String} country
 */
AdditionalTaxIdentifierCreate.prototype['country'] = undefined;

/**
 * The county/state inside the country code to use this identifier for in case of consumerTaxMode. Leave empty to create an additional tax identifier for the entire country. For India, use the two last characters of ISO 3166-2:IN (https://en.wikipedia.org/wiki/States_and_union_territories_of_India).
 * @member {String} county
 */
AdditionalTaxIdentifierCreate.prototype['county'] = undefined;

/**
 * The identifier.
 * @member {String} identifier
 */
AdditionalTaxIdentifierCreate.prototype['identifier'] = undefined;

/**
 * The scheme of the identifier.
 * @member {String} scheme
 */
AdditionalTaxIdentifierCreate.prototype['scheme'] = undefined;

/**
 * The superscheme of the identifier. Should always be \"iso6523-actorid-upis\".
 * @member {String} superscheme
 */
AdditionalTaxIdentifierCreate.prototype['superscheme'] = undefined;

/**
 * The password to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN tax identifier.
 * @member {String} third_party_password
 */
AdditionalTaxIdentifierCreate.prototype['third_party_password'] = undefined;

/**
 * The username to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN tax identifier.
 * @member {String} third_party_username
 */
AdditionalTaxIdentifierCreate.prototype['third_party_username'] = undefined;






export default AdditionalTaxIdentifierCreate;

