/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InvoiceResponseCondition from './InvoiceResponseCondition';

/**
 * The InvoiceResponseClarification model module.
 * @module model/InvoiceResponseClarification
 * @version 2.0.1
 */
class InvoiceResponseClarification {
    /**
     * Constructs a new <code>InvoiceResponseClarification</code>.
     * A clarification for why a received invoice was rejected (RE) or under query (UQ) and what action to take.
     * @alias module:model/InvoiceResponseClarification
     */
    constructor() { 
        
        InvoiceResponseClarification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InvoiceResponseClarification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InvoiceResponseClarification} obj Optional instance to populate.
     * @return {module:model/InvoiceResponseClarification} The populated <code>InvoiceResponseClarification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvoiceResponseClarification();

            if (data.hasOwnProperty('clarification')) {
                obj['clarification'] = ApiClient.convertToType(data['clarification'], 'String');
            }
            if (data.hasOwnProperty('clarificationCode')) {
                obj['clarificationCode'] = ApiClient.convertToType(data['clarificationCode'], 'String');
            }
            if (data.hasOwnProperty('clarificationCodeType')) {
                obj['clarificationCodeType'] = ApiClient.convertToType(data['clarificationCodeType'], 'String');
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [InvoiceResponseCondition]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InvoiceResponseClarification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InvoiceResponseClarification</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clarification'] && !(typeof data['clarification'] === 'string' || data['clarification'] instanceof String)) {
            throw new Error("Expected the field `clarification` to be a primitive type in the JSON string but got " + data['clarification']);
        }
        // ensure the json data is a string
        if (data['clarificationCode'] && !(typeof data['clarificationCode'] === 'string' || data['clarificationCode'] instanceof String)) {
            throw new Error("Expected the field `clarificationCode` to be a primitive type in the JSON string but got " + data['clarificationCode']);
        }
        // ensure the json data is a string
        if (data['clarificationCodeType'] && !(typeof data['clarificationCodeType'] === 'string' || data['clarificationCodeType'] instanceof String)) {
            throw new Error("Expected the field `clarificationCodeType` to be a primitive type in the JSON string but got " + data['clarificationCodeType']);
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                InvoiceResponseCondition.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A textual description of the clarification
 * @member {String} clarification
 */
InvoiceResponseClarification.prototype['clarification'] = undefined;

/**
 * The code for the clarification. For details see https://docs.peppol.eu/poacc/upgrade-3/codelist/OPStatusReason/ and https://docs.peppol.eu/poacc/upgrade-3/codelist/OPStatusAction/
 * @member {module:model/InvoiceResponseClarification.ClarificationCodeEnum} clarificationCode
 */
InvoiceResponseClarification.prototype['clarificationCode'] = undefined;

/**
 * The type of the clarification.
 * @member {module:model/InvoiceResponseClarification.ClarificationCodeTypeEnum} clarificationCodeType
 */
InvoiceResponseClarification.prototype['clarificationCodeType'] = undefined;

/**
 * A list of conditions that triggered the error. This is only included for receiving in webhooks. You cannot currently send these conditions.
 * @member {Array.<module:model/InvoiceResponseCondition>} conditions
 */
InvoiceResponseClarification.prototype['conditions'] = undefined;





/**
 * Allowed values for the <code>clarificationCode</code> property.
 * @enum {String}
 * @readonly
 */
InvoiceResponseClarification['ClarificationCodeEnum'] = {

    /**
     * value: "NON"
     * @const
     */
    "NON": "NON",

    /**
     * value: "REF"
     * @const
     */
    "REF": "REF",

    /**
     * value: "LEG"
     * @const
     */
    "LEG": "LEG",

    /**
     * value: "REC"
     * @const
     */
    "REC": "REC",

    /**
     * value: "QUA"
     * @const
     */
    "QUA": "QUA",

    /**
     * value: "DEL"
     * @const
     */
    "DEL": "DEL",

    /**
     * value: "PRI"
     * @const
     */
    "PRI": "PRI",

    /**
     * value: "QTY"
     * @const
     */
    "QTY": "QTY",

    /**
     * value: "ITM"
     * @const
     */
    "ITM": "ITM",

    /**
     * value: "PAY"
     * @const
     */
    "PAY": "PAY",

    /**
     * value: "UNR"
     * @const
     */
    "UNR": "UNR",

    /**
     * value: "FIN"
     * @const
     */
    "FIN": "FIN",

    /**
     * value: "PPD"
     * @const
     */
    "PPD": "PPD",

    /**
     * value: "OTH"
     * @const
     */
    "OTH": "OTH",

    /**
     * value: "NOA"
     * @const
     */
    "NOA": "NOA",

    /**
     * value: "PIN"
     * @const
     */
    "PIN": "PIN",

    /**
     * value: "NIN"
     * @const
     */
    "NIN": "NIN",

    /**
     * value: "CNF"
     * @const
     */
    "CNF": "CNF",

    /**
     * value: "CNP"
     * @const
     */
    "CNP": "CNP",

    /**
     * value: "CNA"
     * @const
     */
    "CNA": "CNA"
};


/**
 * Allowed values for the <code>clarificationCodeType</code> property.
 * @enum {String}
 * @readonly
 */
InvoiceResponseClarification['ClarificationCodeTypeEnum'] = {

    /**
     * value: "OPStatusReason"
     * @const
     */
    "OPStatusReason": "OPStatusReason",

    /**
     * value: "OPStatusAction"
     * @const
     */
    "OPStatusAction": "OPStatusAction"
};



export default InvoiceResponseClarification;

