/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PurchaseInvoiceAccountingDetails from './PurchaseInvoiceAccountingDetails';
import PurchaseInvoiceInvoiceLineAllowanceCharge from './PurchaseInvoiceInvoiceLineAllowanceCharge';
import PurchaseInvoiceInvoiceLineItem from './PurchaseInvoiceInvoiceLineItem';
import PurchaseInvoiceInvoiceLinePrice from './PurchaseInvoiceInvoiceLinePrice';
import PurchaseInvoiceTax from './PurchaseInvoiceTax';
import VATDetails from './VATDetails';

/**
 * The PurchaseInvoiceInvoiceLine model module.
 * @module model/PurchaseInvoiceInvoiceLine
 * @version 2.0.1
 */
class PurchaseInvoiceInvoiceLine {
    /**
     * Constructs a new <code>PurchaseInvoiceInvoiceLine</code>.
     * @alias module:model/PurchaseInvoiceInvoiceLine
     */
    constructor() { 
        
        PurchaseInvoiceInvoiceLine.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PurchaseInvoiceInvoiceLine</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PurchaseInvoiceInvoiceLine} obj Optional instance to populate.
     * @return {module:model/PurchaseInvoiceInvoiceLine} The populated <code>PurchaseInvoiceInvoiceLine</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PurchaseInvoiceInvoiceLine();

            if (data.hasOwnProperty('accounting')) {
                obj['accounting'] = PurchaseInvoiceAccountingDetails.constructFromObject(data['accounting']);
            }
            if (data.hasOwnProperty('allowance_charge')) {
                obj['allowance_charge'] = ApiClient.convertToType(data['allowance_charge'], 'Number');
            }
            if (data.hasOwnProperty('allowance_charge_array')) {
                obj['allowance_charge_array'] = ApiClient.convertToType(data['allowance_charge_array'], [PurchaseInvoiceInvoiceLineAllowanceCharge]);
            }
            if (data.hasOwnProperty('allowance_charges')) {
                obj['allowance_charges'] = ApiClient.convertToType(data['allowance_charges'], ['Number']);
            }
            if (data.hasOwnProperty('amount_excluding_tax')) {
                obj['amount_excluding_tax'] = ApiClient.convertToType(data['amount_excluding_tax'], 'Number');
            }
            if (data.hasOwnProperty('amount_excluding_vat')) {
                obj['amount_excluding_vat'] = ApiClient.convertToType(data['amount_excluding_vat'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('period_end')) {
                obj['period_end'] = ApiClient.convertToType(data['period_end'], 'String');
            }
            if (data.hasOwnProperty('period_start')) {
                obj['period_start'] = ApiClient.convertToType(data['period_start'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = PurchaseInvoiceInvoiceLinePrice.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('tax')) {
                obj['tax'] = PurchaseInvoiceTax.constructFromObject(data['tax']);
            }
            if (data.hasOwnProperty('units')) {
                obj['units'] = PurchaseInvoiceInvoiceLineItem.constructFromObject(data['units']);
            }
            if (data.hasOwnProperty('vat')) {
                obj['vat'] = VATDetails.constructFromObject(data['vat']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PurchaseInvoiceInvoiceLine</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PurchaseInvoiceInvoiceLine</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accounting`
        if (data['accounting']) { // data not null
          PurchaseInvoiceAccountingDetails.validateJSON(data['accounting']);
        }
        if (data['allowance_charge_array']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['allowance_charge_array'])) {
                throw new Error("Expected the field `allowance_charge_array` to be an array in the JSON data but got " + data['allowance_charge_array']);
            }
            // validate the optional field `allowance_charge_array` (array)
            for (const item of data['allowance_charge_array']) {
                PurchaseInvoiceInvoiceLineAllowanceCharge.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowance_charges'])) {
            throw new Error("Expected the field `allowance_charges` to be an array in the JSON data but got " + data['allowance_charges']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['period_end'] && !(typeof data['period_end'] === 'string' || data['period_end'] instanceof String)) {
            throw new Error("Expected the field `period_end` to be a primitive type in the JSON string but got " + data['period_end']);
        }
        // ensure the json data is a string
        if (data['period_start'] && !(typeof data['period_start'] === 'string' || data['period_start'] instanceof String)) {
            throw new Error("Expected the field `period_start` to be a primitive type in the JSON string but got " + data['period_start']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          PurchaseInvoiceInvoiceLinePrice.validateJSON(data['price']);
        }
        // validate the optional field `tax`
        if (data['tax']) { // data not null
          PurchaseInvoiceTax.validateJSON(data['tax']);
        }
        // validate the optional field `units`
        if (data['units']) { // data not null
          PurchaseInvoiceInvoiceLineItem.validateJSON(data['units']);
        }
        // validate the optional field `vat`
        if (data['vat']) { // data not null
          VATDetails.validateJSON(data['vat']);
        }

        return true;
    }


}



/**
 * @member {module:model/PurchaseInvoiceAccountingDetails} accounting
 */
PurchaseInvoiceInvoiceLine.prototype['accounting'] = undefined;

/**
 * DEPRECATED - use allowance_charges.
 * @member {Number} allowance_charge
 */
PurchaseInvoiceInvoiceLine.prototype['allowance_charge'] = undefined;

/**
 * @member {Array.<module:model/PurchaseInvoiceInvoiceLineAllowanceCharge>} allowance_charge_array
 */
PurchaseInvoiceInvoiceLine.prototype['allowance_charge_array'] = undefined;

/**
 * Deprecated.
 * @member {Array.<Number>} allowance_charges
 */
PurchaseInvoiceInvoiceLine.prototype['allowance_charges'] = undefined;

/**
 * The amount excluding Tax. This is equal to quantity x price_amount + âˆ‘ allowance_charges.
 * @member {Number} amount_excluding_tax
 */
PurchaseInvoiceInvoiceLine.prototype['amount_excluding_tax'] = undefined;

/**
 * DEPRECATED - use amount_excluding_tax. The amount excluding VAT.
 * @member {Number} amount_excluding_vat
 */
PurchaseInvoiceInvoiceLine.prototype['amount_excluding_vat'] = undefined;

/**
 * The description for the invoice line.
 * @member {String} description
 */
PurchaseInvoiceInvoiceLine.prototype['description'] = undefined;

/**
 * A short name for the invoice line.
 * @member {String} name
 */
PurchaseInvoiceInvoiceLine.prototype['name'] = undefined;

/**
 * The end date of the period this invoice line relates to. Format \"YYYY-MM-DD\".
 * @member {String} period_end
 */
PurchaseInvoiceInvoiceLine.prototype['period_end'] = undefined;

/**
 * The start date of the period this invoice line relates to. Format \"YYYY-MM-DD\".
 * @member {String} period_start
 */
PurchaseInvoiceInvoiceLine.prototype['period_start'] = undefined;

/**
 * @member {module:model/PurchaseInvoiceInvoiceLinePrice} price
 */
PurchaseInvoiceInvoiceLine.prototype['price'] = undefined;

/**
 * @member {module:model/PurchaseInvoiceTax} tax
 */
PurchaseInvoiceInvoiceLine.prototype['tax'] = undefined;

/**
 * @member {module:model/PurchaseInvoiceInvoiceLineItem} units
 */
PurchaseInvoiceInvoiceLine.prototype['units'] = undefined;

/**
 * @member {module:model/VATDetails} vat
 */
PurchaseInvoiceInvoiceLine.prototype['vat'] = undefined;






export default PurchaseInvoiceInvoiceLine;

