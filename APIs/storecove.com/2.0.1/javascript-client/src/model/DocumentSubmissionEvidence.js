/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentSubmissionEvidenceDocument from './DocumentSubmissionEvidenceDocument';
import DocumentSubmissionEvidenceEvidence from './DocumentSubmissionEvidenceEvidence';

/**
 * The DocumentSubmissionEvidence model module.
 * @module model/DocumentSubmissionEvidence
 * @version 2.0.1
 */
class DocumentSubmissionEvidence {
    /**
     * Constructs a new <code>DocumentSubmissionEvidence</code>.
     * @alias module:model/DocumentSubmissionEvidence
     */
    constructor() { 
        
        DocumentSubmissionEvidence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentSubmissionEvidence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentSubmissionEvidence} obj Optional instance to populate.
     * @return {module:model/DocumentSubmissionEvidence} The populated <code>DocumentSubmissionEvidence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentSubmissionEvidence();

            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], [DocumentSubmissionEvidenceDocument]);
            }
            if (data.hasOwnProperty('evidence')) {
                obj['evidence'] = DocumentSubmissionEvidenceEvidence.constructFromObject(data['evidence']);
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('receiver')) {
                obj['receiver'] = ApiClient.convertToType(data['receiver'], 'String');
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = ApiClient.convertToType(data['sender'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentSubmissionEvidence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentSubmissionEvidence</code>.
     */
    static validateJSON(data) {
        if (data['documents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['documents'])) {
                throw new Error("Expected the field `documents` to be an array in the JSON data but got " + data['documents']);
            }
            // validate the optional field `documents` (array)
            for (const item of data['documents']) {
                DocumentSubmissionEvidenceDocument.validateJSON(item);
            };
        }
        // validate the optional field `evidence`
        if (data['evidence']) { // data not null
          DocumentSubmissionEvidenceEvidence.validateJSON(data['evidence']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['receiver'] && !(typeof data['receiver'] === 'string' || data['receiver'] instanceof String)) {
            throw new Error("Expected the field `receiver` to be a primitive type in the JSON string but got " + data['receiver']);
        }
        // ensure the json data is a string
        if (data['sender'] && !(typeof data['sender'] === 'string' || data['sender'] instanceof String)) {
            throw new Error("Expected the field `sender` to be a primitive type in the JSON string but got " + data['sender']);
        }

        return true;
    }


}



/**
 * An array of documents that were sent. For OpenPeppol, this is always a single document (it may contain a PDF inside). For Email, the number of documents depends on the number of attachments, which in turn depends on the country of the receiver. For email, the raw email in RFC822 format is also included.
 * @member {Array.<module:model/DocumentSubmissionEvidenceDocument>} documents
 */
DocumentSubmissionEvidence.prototype['documents'] = undefined;

/**
 * @member {module:model/DocumentSubmissionEvidenceEvidence} evidence
 */
DocumentSubmissionEvidence.prototype['evidence'] = undefined;

/**
 * The exchange network that was used to send the document
 * @member {module:model/DocumentSubmissionEvidence.NetworkEnum} network
 */
DocumentSubmissionEvidence.prototype['network'] = undefined;

/**
 * The legal identifier of the receiver, or the tax identifier if there is no legal identifier.
 * @member {String} receiver
 */
DocumentSubmissionEvidence.prototype['receiver'] = undefined;

/**
 * The legal identifier of the sender, or the tax identifier if there is no legal identifier.
 * @member {String} sender
 */
DocumentSubmissionEvidence.prototype['sender'] = undefined;





/**
 * Allowed values for the <code>network</code> property.
 * @enum {String}
 * @readonly
 */
DocumentSubmissionEvidence['NetworkEnum'] = {

    /**
     * value: "as2"
     * @const
     */
    "as2": "as2",

    /**
     * value: "email"
     * @const
     */
    "email": "email",

    /**
     * value: "peppol"
     * @const
     */
    "peppol": "peppol",

    /**
     * value: "sdi"
     * @const
     */
    "sdi": "sdi"
};



export default DocumentSubmissionEvidence;

