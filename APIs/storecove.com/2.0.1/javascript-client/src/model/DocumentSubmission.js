/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import Routing from './Routing';
import SendableDocument from './SendableDocument';

/**
 * The DocumentSubmission model module.
 * @module model/DocumentSubmission
 * @version 2.0.1
 */
class DocumentSubmission {
    /**
     * Constructs a new <code>DocumentSubmission</code>.
     * The document you want Storecove to send, with some meta-data.
     * @alias module:model/DocumentSubmission
     */
    constructor() { 
        
        DocumentSubmission.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentSubmission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentSubmission} obj Optional instance to populate.
     * @return {module:model/DocumentSubmission} The populated <code>DocumentSubmission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentSubmission();

            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('createPrimaryImage')) {
                obj['createPrimaryImage'] = ApiClient.convertToType(data['createPrimaryImage'], 'Boolean');
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = SendableDocument.constructFromObject(data['document']);
            }
            if (data.hasOwnProperty('idempotencyGuid')) {
                obj['idempotencyGuid'] = ApiClient.convertToType(data['idempotencyGuid'], 'String');
            }
            if (data.hasOwnProperty('legalEntityId')) {
                obj['legalEntityId'] = ApiClient.convertToType(data['legalEntityId'], 'Number');
            }
            if (data.hasOwnProperty('receiveGuid')) {
                obj['receiveGuid'] = ApiClient.convertToType(data['receiveGuid'], 'String');
            }
            if (data.hasOwnProperty('routing')) {
                obj['routing'] = Routing.constructFromObject(data['routing']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentSubmission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentSubmission</code>.
     */
    static validateJSON(data) {
        if (data['attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachments'])) {
                throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
            }
            // validate the optional field `attachments` (array)
            for (const item of data['attachments']) {
                Attachment.validateJSON(item);
            };
        }
        // validate the optional field `document`
        if (data['document']) { // data not null
          SendableDocument.validateJSON(data['document']);
        }
        // ensure the json data is a string
        if (data['idempotencyGuid'] && !(typeof data['idempotencyGuid'] === 'string' || data['idempotencyGuid'] instanceof String)) {
            throw new Error("Expected the field `idempotencyGuid` to be a primitive type in the JSON string but got " + data['idempotencyGuid']);
        }
        // ensure the json data is a string
        if (data['receiveGuid'] && !(typeof data['receiveGuid'] === 'string' || data['receiveGuid'] instanceof String)) {
            throw new Error("Expected the field `receiveGuid` to be a primitive type in the JSON string but got " + data['receiveGuid']);
        }
        // validate the optional field `routing`
        if (data['routing']) { // data not null
          Routing.validateJSON(data['routing']);
        }

        return true;
    }


}



/**
 * DEPRECATED. Use the attachments array inside the 'document' property. An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.
 * @member {Array.<module:model/Attachment>} attachments
 */
DocumentSubmission.prototype['attachments'] = undefined;

/**
 * DEPRECATED. In the future we will no longer support creating PDF invoices. Whether or not to create a primary image (PDF) if one is not provided. For customers who started from April 1st 2023, the default is false. For customers who started before that, the default is true.
 * @member {Boolean} createPrimaryImage
 */
DocumentSubmission.prototype['createPrimaryImage'] = undefined;

/**
 * @member {module:model/SendableDocument} document
 */
DocumentSubmission.prototype['document'] = undefined;

/**
 * A guid that you generated for this DocumentSubmission to achieve idempotency. If you submit multiple documents with the same idempotencyGuid, only the first one will be processed and any subsequent ones will trigger an HTTP 422 Unprocessable Entity response.
 * @member {String} idempotencyGuid
 */
DocumentSubmission.prototype['idempotencyGuid'] = undefined;

/**
 * The id of the LegalEntity this document should be sent on behalf of. Either legalEntityId or receiveGuid is mandatory.
 * @member {Number} legalEntityId
 */
DocumentSubmission.prototype['legalEntityId'] = undefined;

/**
 * The GUID that was in the received_document webhook. Either legalEntityId or receiveGuid is mandatory. This field is used for sending response documents, such as InvoiceReponse and OrderResponse.
 * @member {String} receiveGuid
 */
DocumentSubmission.prototype['receiveGuid'] = undefined;

/**
 * @member {module:model/Routing} routing
 */
DocumentSubmission.prototype['routing'] = undefined;






export default DocumentSubmission;

