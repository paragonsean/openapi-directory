/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Country from './Country';

/**
 * The TaxSubtotal model module.
 * @module model/TaxSubtotal
 * @version 2.0.1
 */
class TaxSubtotal {
    /**
     * Constructs a new <code>TaxSubtotal</code>.
     * The total amount of tax of this type in the invoice.
     * @alias module:model/TaxSubtotal
     * @param country {module:model/Country} 
     * @param percentage {Number} The tax percentage. This should be a valid tax percentage in the country at the time of the taxpointDate of this invoice.
     * @param taxAmount {Number} The amount of tax.
     * @param taxableAmount {Number} The amount on which the tax is levied.
     */
    constructor(country, percentage, taxAmount, taxableAmount) { 
        
        TaxSubtotal.initialize(this, country, percentage, taxAmount, taxableAmount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country, percentage, taxAmount, taxableAmount) { 
        obj['country'] = country;
        obj['percentage'] = percentage;
        obj['taxAmount'] = taxAmount;
        obj['taxableAmount'] = taxableAmount;
    }

    /**
     * Constructs a <code>TaxSubtotal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxSubtotal} obj Optional instance to populate.
     * @return {module:model/TaxSubtotal} The populated <code>TaxSubtotal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaxSubtotal();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = Country.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('percentage')) {
                obj['percentage'] = ApiClient.convertToType(data['percentage'], 'Number');
            }
            if (data.hasOwnProperty('taxAmount')) {
                obj['taxAmount'] = ApiClient.convertToType(data['taxAmount'], 'Number');
            }
            if (data.hasOwnProperty('taxableAmount')) {
                obj['taxableAmount'] = ApiClient.convertToType(data['taxableAmount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaxSubtotal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaxSubtotal</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaxSubtotal.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }

        return true;
    }


}

TaxSubtotal.RequiredProperties = ["country", "percentage", "taxAmount", "taxableAmount"];

/**
 * The tax category. For a description see <<_openapi_tax>>
 * @member {module:model/TaxSubtotal.CategoryEnum} category
 */
TaxSubtotal.prototype['category'] = undefined;

/**
 * @member {module:model/Country} country
 */
TaxSubtotal.prototype['country'] = undefined;

/**
 * The tax percentage. This should be a valid tax percentage in the country at the time of the taxpointDate of this invoice.
 * @member {Number} percentage
 */
TaxSubtotal.prototype['percentage'] = undefined;

/**
 * The amount of tax.
 * @member {Number} taxAmount
 */
TaxSubtotal.prototype['taxAmount'] = undefined;

/**
 * The amount on which the tax is levied.
 * @member {Number} taxableAmount
 */
TaxSubtotal.prototype['taxableAmount'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
TaxSubtotal['CategoryEnum'] = {

    /**
     * value: "standard"
     * @const
     */
    "standard": "standard",

    /**
     * value: "zero_rated"
     * @const
     */
    "zero_rated": "zero_rated",

    /**
     * value: "reverse_charge"
     * @const
     */
    "reverse_charge": "reverse_charge",

    /**
     * value: "intra_community"
     * @const
     */
    "intra_community": "intra_community",

    /**
     * value: "exempt"
     * @const
     */
    "exempt": "exempt",

    /**
     * value: "export"
     * @const
     */
    "export": "export",

    /**
     * value: "outside_scope"
     * @const
     */
    "outside_scope": "outside_scope",

    /**
     * value: "regulation33_exempt"
     * @const
     */
    "regulation33_exempt": "regulation33_exempt",

    /**
     * value: "nonregulation33_exempt"
     * @const
     */
    "nonregulation33_exempt": "nonregulation33_exempt",

    /**
     * value: "deemed_supply"
     * @const
     */
    "deemed_supply": "deemed_supply",

    /**
     * value: "srca_s"
     * @const
     */
    "srca_s": "srca_s",

    /**
     * value: "srca_c"
     * @const
     */
    "srca_c": "srca_c",

    /**
     * value: "not_registered"
     * @const
     */
    "not_registered": "not_registered",

    /**
     * value: "igst"
     * @const
     */
    "igst": "igst",

    /**
     * value: "cgst"
     * @const
     */
    "cgst": "cgst",

    /**
     * value: "sgst"
     * @const
     */
    "sgst": "sgst",

    /**
     * value: "cess"
     * @const
     */
    "cess": "cess",

    /**
     * value: "state_cess"
     * @const
     */
    "state_cess": "state_cess",

    /**
     * value: "srovr"
     * @const
     */
    "srovr": "srovr",

    /**
     * value: "srovr_rs"
     * @const
     */
    "srovr_rs": "srovr_rs",

    /**
     * value: "srovr_lvg"
     * @const
     */
    "srovr_lvg": "srovr_lvg",

    /**
     * value: "srlvg"
     * @const
     */
    "srlvg": "srlvg"
};



export default TaxSubtotal;

