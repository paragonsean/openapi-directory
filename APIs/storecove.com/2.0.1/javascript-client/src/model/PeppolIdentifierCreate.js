/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CorpPassCreate from './CorpPassCreate';

/**
 * The PeppolIdentifierCreate model module.
 * @module model/PeppolIdentifierCreate
 * @version 2.0.1
 */
class PeppolIdentifierCreate {
    /**
     * Constructs a new <code>PeppolIdentifierCreate</code>.
     * @alias module:model/PeppolIdentifierCreate
     * @param identifier {String} The identifier.
     * @param scheme {String} The scheme of the identifier. See <<_receiver_identifiers_list>> for a list.
     * @param superscheme {String} The superscheme of the identifier. Should always be \"iso6523-actorid-upis\".
     */
    constructor(identifier, scheme, superscheme) { 
        
        PeppolIdentifierCreate.initialize(this, identifier, scheme, superscheme);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, identifier, scheme, superscheme) { 
        obj['identifier'] = identifier;
        obj['scheme'] = scheme;
        obj['superscheme'] = superscheme;
    }

    /**
     * Constructs a <code>PeppolIdentifierCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PeppolIdentifierCreate} obj Optional instance to populate.
     * @return {module:model/PeppolIdentifierCreate} The populated <code>PeppolIdentifierCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PeppolIdentifierCreate();

            if (data.hasOwnProperty('corppass')) {
                obj['corppass'] = CorpPassCreate.constructFromObject(data['corppass']);
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('scheme')) {
                obj['scheme'] = ApiClient.convertToType(data['scheme'], 'String');
            }
            if (data.hasOwnProperty('superscheme')) {
                obj['superscheme'] = ApiClient.convertToType(data['superscheme'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PeppolIdentifierCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PeppolIdentifierCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PeppolIdentifierCreate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `corppass`
        if (data['corppass']) { // data not null
          CorpPassCreate.validateJSON(data['corppass']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['scheme'] && !(typeof data['scheme'] === 'string' || data['scheme'] instanceof String)) {
            throw new Error("Expected the field `scheme` to be a primitive type in the JSON string but got " + data['scheme']);
        }
        // ensure the json data is a string
        if (data['superscheme'] && !(typeof data['superscheme'] === 'string' || data['superscheme'] instanceof String)) {
            throw new Error("Expected the field `superscheme` to be a primitive type in the JSON string but got " + data['superscheme']);
        }

        return true;
    }


}

PeppolIdentifierCreate.RequiredProperties = ["identifier", "scheme", "superscheme"];

/**
 * @member {module:model/CorpPassCreate} corppass
 */
PeppolIdentifierCreate.prototype['corppass'] = undefined;

/**
 * The identifier.
 * @member {String} identifier
 */
PeppolIdentifierCreate.prototype['identifier'] = undefined;

/**
 * The scheme of the identifier. See <<_receiver_identifiers_list>> for a list.
 * @member {String} scheme
 */
PeppolIdentifierCreate.prototype['scheme'] = undefined;

/**
 * The superscheme of the identifier. Should always be \"iso6523-actorid-upis\".
 * @member {String} superscheme
 */
PeppolIdentifierCreate.prototype['superscheme'] = undefined;






export default PeppolIdentifierCreate;

