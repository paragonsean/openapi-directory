/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PurchaseInvoiceDocumentTotals model module.
 * @module model/PurchaseInvoiceDocumentTotals
 * @version 2.0.1
 */
class PurchaseInvoiceDocumentTotals {
    /**
     * Constructs a new <code>PurchaseInvoiceDocumentTotals</code>.
     * @alias module:model/PurchaseInvoiceDocumentTotals
     */
    constructor() { 
        
        PurchaseInvoiceDocumentTotals.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PurchaseInvoiceDocumentTotals</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PurchaseInvoiceDocumentTotals} obj Optional instance to populate.
     * @return {module:model/PurchaseInvoiceDocumentTotals} The populated <code>PurchaseInvoiceDocumentTotals</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PurchaseInvoiceDocumentTotals();

            if (data.hasOwnProperty('payable')) {
                obj['payable'] = ApiClient.convertToType(data['payable'], 'Number');
            }
            if (data.hasOwnProperty('prepaid')) {
                obj['prepaid'] = ApiClient.convertToType(data['prepaid'], 'Number');
            }
            if (data.hasOwnProperty('rounding')) {
                obj['rounding'] = ApiClient.convertToType(data['rounding'], 'Number');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PurchaseInvoiceDocumentTotals</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PurchaseInvoiceDocumentTotals</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The total invoice amount payable including tax.
 * @member {Number} payable
 */
PurchaseInvoiceDocumentTotals.prototype['payable'] = undefined;

/**
 * The amount already paid.
 * @member {Number} prepaid
 */
PurchaseInvoiceDocumentTotals.prototype['prepaid'] = undefined;

/**
 * The difference between the payable amount and the total invoice amount including tax.
 * @member {Number} rounding
 */
PurchaseInvoiceDocumentTotals.prototype['rounding'] = undefined;

/**
 * The total invoice amount, including tax. This is equal to the sum of the invoice_lines (amount_excluding_tax + tax.amount) and the allowances and charges.
 * @member {Number} total
 */
PurchaseInvoiceDocumentTotals.prototype['total'] = undefined;






export default PurchaseInvoiceDocumentTotals;

