/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PurchaseInvoiceTax from './PurchaseInvoiceTax';
import PurchaseInvoiceVat from './PurchaseInvoiceVat';

/**
 * The PurchaseInvoiceTaxSubtotal model module.
 * @module model/PurchaseInvoiceTaxSubtotal
 * @version 2.0.1
 */
class PurchaseInvoiceTaxSubtotal {
    /**
     * Constructs a new <code>PurchaseInvoiceTaxSubtotal</code>.
     * @alias module:model/PurchaseInvoiceTaxSubtotal
     */
    constructor() { 
        
        PurchaseInvoiceTaxSubtotal.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PurchaseInvoiceTaxSubtotal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PurchaseInvoiceTaxSubtotal} obj Optional instance to populate.
     * @return {module:model/PurchaseInvoiceTaxSubtotal} The populated <code>PurchaseInvoiceTaxSubtotal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PurchaseInvoiceTaxSubtotal();

            if (data.hasOwnProperty('amount_excluding_tax')) {
                obj['amount_excluding_tax'] = ApiClient.convertToType(data['amount_excluding_tax'], 'Number');
            }
            if (data.hasOwnProperty('amount_excluding_vat')) {
                obj['amount_excluding_vat'] = ApiClient.convertToType(data['amount_excluding_vat'], 'String');
            }
            if (data.hasOwnProperty('tax')) {
                obj['tax'] = PurchaseInvoiceTax.constructFromObject(data['tax']);
            }
            if (data.hasOwnProperty('vat')) {
                obj['vat'] = PurchaseInvoiceVat.constructFromObject(data['vat']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PurchaseInvoiceTaxSubtotal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PurchaseInvoiceTaxSubtotal</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['amount_excluding_vat'] && !(typeof data['amount_excluding_vat'] === 'string' || data['amount_excluding_vat'] instanceof String)) {
            throw new Error("Expected the field `amount_excluding_vat` to be a primitive type in the JSON string but got " + data['amount_excluding_vat']);
        }
        // validate the optional field `tax`
        if (data['tax']) { // data not null
          PurchaseInvoiceTax.validateJSON(data['tax']);
        }
        // validate the optional field `vat`
        if (data['vat']) { // data not null
          PurchaseInvoiceVat.validateJSON(data['vat']);
        }

        return true;
    }


}



/**
 * The amount excluding tax.
 * @member {Number} amount_excluding_tax
 */
PurchaseInvoiceTaxSubtotal.prototype['amount_excluding_tax'] = undefined;

/**
 * DEPRECATED - use amount_excluding_tax.
 * @member {String} amount_excluding_vat
 */
PurchaseInvoiceTaxSubtotal.prototype['amount_excluding_vat'] = undefined;

/**
 * @member {module:model/PurchaseInvoiceTax} tax
 */
PurchaseInvoiceTaxSubtotal.prototype['tax'] = undefined;

/**
 * @member {module:model/PurchaseInvoiceVat} vat
 */
PurchaseInvoiceTaxSubtotal.prototype['vat'] = undefined;






export default PurchaseInvoiceTaxSubtotal;

