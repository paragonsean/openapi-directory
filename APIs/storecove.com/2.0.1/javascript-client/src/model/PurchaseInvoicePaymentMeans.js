/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PurchaseInvoicePaymentMeans model module.
 * @module model/PurchaseInvoicePaymentMeans
 * @version 2.0.1
 */
class PurchaseInvoicePaymentMeans {
    /**
     * Constructs a new <code>PurchaseInvoicePaymentMeans</code>.
     * @alias module:model/PurchaseInvoicePaymentMeans
     */
    constructor() { 
        
        PurchaseInvoicePaymentMeans.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PurchaseInvoicePaymentMeans</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PurchaseInvoicePaymentMeans} obj Optional instance to populate.
     * @return {module:model/PurchaseInvoicePaymentMeans} The populated <code>PurchaseInvoicePaymentMeans</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PurchaseInvoicePaymentMeans();

            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('branch_code')) {
                obj['branch_code'] = ApiClient.convertToType(data['branch_code'], 'String');
            }
            if (data.hasOwnProperty('holder')) {
                obj['holder'] = ApiClient.convertToType(data['holder'], 'String');
            }
            if (data.hasOwnProperty('mandate')) {
                obj['mandate'] = ApiClient.convertToType(data['mandate'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('payment_id')) {
                obj['payment_id'] = ApiClient.convertToType(data['payment_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PurchaseInvoicePaymentMeans</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PurchaseInvoicePaymentMeans</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        // ensure the json data is a string
        if (data['branch_code'] && !(typeof data['branch_code'] === 'string' || data['branch_code'] instanceof String)) {
            throw new Error("Expected the field `branch_code` to be a primitive type in the JSON string but got " + data['branch_code']);
        }
        // ensure the json data is a string
        if (data['holder'] && !(typeof data['holder'] === 'string' || data['holder'] instanceof String)) {
            throw new Error("Expected the field `holder` to be a primitive type in the JSON string but got " + data['holder']);
        }
        // ensure the json data is a string
        if (data['mandate'] && !(typeof data['mandate'] === 'string' || data['mandate'] instanceof String)) {
            throw new Error("Expected the field `mandate` to be a primitive type in the JSON string but got " + data['mandate']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['payment_id'] && !(typeof data['payment_id'] === 'string' || data['payment_id'] instanceof String)) {
            throw new Error("Expected the field `payment_id` to be a primitive type in the JSON string but got " + data['payment_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The account number to which to transfer.
 * @member {String} account
 */
PurchaseInvoicePaymentMeans.prototype['account'] = undefined;

/**
 * The code identifying the bank branch. May contain a BIC/SWIFT or something appropriate for the payment method, such as \"NPP\" for type NppPaymentMean.
 * @member {String} branch_code
 */
PurchaseInvoicePaymentMeans.prototype['branch_code'] = undefined;

/**
 * The account holder name to which to transfer.
 * @member {String} holder
 */
PurchaseInvoicePaymentMeans.prototype['holder'] = undefined;

/**
 * The mandate, used only for type DirectDebitPaymentMean.
 * @member {String} mandate
 */
PurchaseInvoicePaymentMeans.prototype['mandate'] = undefined;

/**
 * The payment network. Used only for type CardPaymentType.
 * @member {String} network
 */
PurchaseInvoicePaymentMeans.prototype['network'] = undefined;

/**
 * The payment id to use when making the payment. The invoice sender will use this to match the received funds to the invoice.
 * @member {String} payment_id
 */
PurchaseInvoicePaymentMeans.prototype['payment_id'] = undefined;

/**
 * The type of payment means. Which type are returned is determined by the &pmv= query parameter. For details see documentation for that field.
 * @member {module:model/PurchaseInvoicePaymentMeans.TypeEnum} type
 */
PurchaseInvoicePaymentMeans.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PurchaseInvoicePaymentMeans['TypeEnum'] = {

    /**
     * value: "BankPaymentMean"
     * @const
     */
    "BankPaymentMean": "BankPaymentMean",

    /**
     * value: "DirectDebitPaymentMean"
     * @const
     */
    "DirectDebitPaymentMean": "DirectDebitPaymentMean",

    /**
     * value: "CardPaymentMean"
     * @const
     */
    "CardPaymentMean": "CardPaymentMean",

    /**
     * value: "NppPaymentMean"
     * @const
     */
    "NppPaymentMean": "NppPaymentMean",

    /**
     * value: "SeBankGiroPaymentMean"
     * @const
     */
    "SeBankGiroPaymentMean": "SeBankGiroPaymentMean",

    /**
     * value: "SePlusgiroPaymentMean"
     * @const
     */
    "SePlusgiroPaymentMean": "SePlusgiroPaymentMean",

    /**
     * value: "SgCardPaymentMean"
     * @const
     */
    "SgCardPaymentMean": "SgCardPaymentMean",

    /**
     * value: "SgGiroPaymentMean"
     * @const
     */
    "SgGiroPaymentMean": "SgGiroPaymentMean",

    /**
     * value: "SgPaynowPaymentMean"
     * @const
     */
    "SgPaynowPaymentMean": "SgPaynowPaymentMean",

    /**
     * value: "CreditTransferPaymentMean"
     * @const
     */
    "CreditTransferPaymentMean": "CreditTransferPaymentMean",

    /**
     * value: "CreditCardPaymentMean"
     * @const
     */
    "CreditCardPaymentMean": "CreditCardPaymentMean",

    /**
     * value: "SeBankgiroPaymentMean"
     * @const
     */
    "SeBankgiroPaymentMean": "SeBankgiroPaymentMean",

    /**
     * value: "AunzNppPayidPaymentMean"
     * @const
     */
    "AunzNppPayidPaymentMean": "AunzNppPayidPaymentMean",

    /**
     * value: "OnlinePaymentServicePaymentMean"
     * @const
     */
    "OnlinePaymentServicePaymentMean": "OnlinePaymentServicePaymentMean",

    /**
     * value: "StandingAgreementPaymentMean"
     * @const
     */
    "StandingAgreementPaymentMean": "StandingAgreementPaymentMean",

    /**
     * value: "AunzNppPaytoPaymentMean"
     * @const
     */
    "AunzNppPaytoPaymentMean": "AunzNppPaytoPaymentMean",

    /**
     * value: "AunzBpayPaymentMean"
     * @const
     */
    "AunzBpayPaymentMean": "AunzBpayPaymentMean",

    /**
     * value: "AunzPostbillpayPaymentMean"
     * @const
     */
    "AunzPostbillpayPaymentMean": "AunzPostbillpayPaymentMean",

    /**
     * value: "AunzUriPaymentMean"
     * @const
     */
    "AunzUriPaymentMean": "AunzUriPaymentMean"
};



export default PurchaseInvoicePaymentMeans;

