/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';

/**
 * The DeliveryDeliveryLocation model module.
 * @module model/DeliveryDeliveryLocation
 * @version 2.0.1
 */
class DeliveryDeliveryLocation {
    /**
     * Constructs a new <code>DeliveryDeliveryLocation</code>.
     * @alias module:model/DeliveryDeliveryLocation
     */
    constructor() { 
        
        DeliveryDeliveryLocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeliveryDeliveryLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeliveryDeliveryLocation} obj Optional instance to populate.
     * @return {module:model/DeliveryDeliveryLocation} The populated <code>DeliveryDeliveryLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeliveryDeliveryLocation();

            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('locationName')) {
                obj['locationName'] = ApiClient.convertToType(data['locationName'], 'String');
            }
            if (data.hasOwnProperty('schemeAgencyId')) {
                obj['schemeAgencyId'] = ApiClient.convertToType(data['schemeAgencyId'], 'String');
            }
            if (data.hasOwnProperty('schemeId')) {
                obj['schemeId'] = ApiClient.convertToType(data['schemeId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeliveryDeliveryLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeliveryDeliveryLocation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['locationName'] && !(typeof data['locationName'] === 'string' || data['locationName'] instanceof String)) {
            throw new Error("Expected the field `locationName` to be a primitive type in the JSON string but got " + data['locationName']);
        }
        // ensure the json data is a string
        if (data['schemeAgencyId'] && !(typeof data['schemeAgencyId'] === 'string' || data['schemeAgencyId'] instanceof String)) {
            throw new Error("Expected the field `schemeAgencyId` to be a primitive type in the JSON string but got " + data['schemeAgencyId']);
        }
        // ensure the json data is a string
        if (data['schemeId'] && !(typeof data['schemeId'] === 'string' || data['schemeId'] instanceof String)) {
            throw new Error("Expected the field `schemeId` to be a primitive type in the JSON string but got " + data['schemeId']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address} address
 */
DeliveryDeliveryLocation.prototype['address'] = undefined;

/**
 * The location identifier.
 * @member {String} id
 */
DeliveryDeliveryLocation.prototype['id'] = undefined;

/**
 * The name of the delivery location. Only used for DocumentOrder.
 * @member {String} locationName
 */
DeliveryDeliveryLocation.prototype['locationName'] = undefined;

/**
 * DEPRECATED. The schemeAgencyId of the location identifier (e.g. 'ZZZ')
 * @member {String} schemeAgencyId
 */
DeliveryDeliveryLocation.prototype['schemeAgencyId'] = undefined;

/**
 * The schemeId of the location identifier (e.g. 'EAN')
 * @member {String} schemeId
 */
DeliveryDeliveryLocation.prototype['schemeId'] = undefined;






export default DeliveryDeliveryLocation;

