/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Location model module.
 * @module model/Location
 * @version 2.0.1
 */
class Location {
    /**
     * Constructs a new <code>Location</code>.
     * The location the goods/services were delivered to.
     * @alias module:model/Location
     */
    constructor() { 
        
        Location.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Location} obj Optional instance to populate.
     * @return {module:model/Location} The populated <code>Location</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Location();

            if (data.hasOwnProperty('building_number')) {
                obj['building_number'] = ApiClient.convertToType(data['building_number'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = ApiClient.convertToType(data['county'], 'String');
            }
            if (data.hasOwnProperty('department')) {
                obj['department'] = ApiClient.convertToType(data['department'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('line1')) {
                obj['line1'] = ApiClient.convertToType(data['line1'], 'String');
            }
            if (data.hasOwnProperty('line2')) {
                obj['line2'] = ApiClient.convertToType(data['line2'], 'String');
            }
            if (data.hasOwnProperty('neighborhood')) {
                obj['neighborhood'] = ApiClient.convertToType(data['neighborhood'], 'String');
            }
            if (data.hasOwnProperty('scheme_id')) {
                obj['scheme_id'] = ApiClient.convertToType(data['scheme_id'], 'String');
            }
            if (data.hasOwnProperty('secondary_number')) {
                obj['secondary_number'] = ApiClient.convertToType(data['secondary_number'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Location</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Location</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['building_number'] && !(typeof data['building_number'] === 'string' || data['building_number'] instanceof String)) {
            throw new Error("Expected the field `building_number` to be a primitive type in the JSON string but got " + data['building_number']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['county'] && !(typeof data['county'] === 'string' || data['county'] instanceof String)) {
            throw new Error("Expected the field `county` to be a primitive type in the JSON string but got " + data['county']);
        }
        // ensure the json data is a string
        if (data['department'] && !(typeof data['department'] === 'string' || data['department'] instanceof String)) {
            throw new Error("Expected the field `department` to be a primitive type in the JSON string but got " + data['department']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['line1'] && !(typeof data['line1'] === 'string' || data['line1'] instanceof String)) {
            throw new Error("Expected the field `line1` to be a primitive type in the JSON string but got " + data['line1']);
        }
        // ensure the json data is a string
        if (data['line2'] && !(typeof data['line2'] === 'string' || data['line2'] instanceof String)) {
            throw new Error("Expected the field `line2` to be a primitive type in the JSON string but got " + data['line2']);
        }
        // ensure the json data is a string
        if (data['neighborhood'] && !(typeof data['neighborhood'] === 'string' || data['neighborhood'] instanceof String)) {
            throw new Error("Expected the field `neighborhood` to be a primitive type in the JSON string but got " + data['neighborhood']);
        }
        // ensure the json data is a string
        if (data['scheme_id'] && !(typeof data['scheme_id'] === 'string' || data['scheme_id'] instanceof String)) {
            throw new Error("Expected the field `scheme_id` to be a primitive type in the JSON string but got " + data['scheme_id']);
        }
        // ensure the json data is a string
        if (data['secondary_number'] && !(typeof data['secondary_number'] === 'string' || data['secondary_number'] instanceof String)) {
            throw new Error("Expected the field `secondary_number` to be a primitive type in the JSON string but got " + data['secondary_number']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }

        return true;
    }


}



/**
 * The building number. Used in SA.
 * @member {String} building_number
 */
Location.prototype['building_number'] = undefined;

/**
 * Address city.
 * @member {String} city
 */
Location.prototype['city'] = undefined;

/**
 * Address country.
 * @member {String} country
 */
Location.prototype['country'] = undefined;

/**
 * Address county.
 * @member {String} county
 */
Location.prototype['county'] = undefined;

/**
 * Department name.
 * @member {String} department
 */
Location.prototype['department'] = undefined;

/**
 * The id of the location.
 * @member {String} id
 */
Location.prototype['id'] = undefined;

/**
 * Address line 1.
 * @member {String} line1
 */
Location.prototype['line1'] = undefined;

/**
 * Address line 2.
 * @member {String} line2
 */
Location.prototype['line2'] = undefined;

/**
 * The neighborhood. Used in SA.
 * @member {String} neighborhood
 */
Location.prototype['neighborhood'] = undefined;

/**
 * The scheme id for the id of the location.
 * @member {String} scheme_id
 */
Location.prototype['scheme_id'] = undefined;

/**
 * The secondary number. Used in SA.
 * @member {String} secondary_number
 */
Location.prototype['secondary_number'] = undefined;

/**
 * Address zip code
 * @member {String} zip
 */
Location.prototype['zip'] = undefined;






export default Location;

