/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalTaxIdentifier from './AdditionalTaxIdentifier';
import Country from './Country';
import LegalEntityUpdate from './LegalEntityUpdate';
import PeppolIdentifier from './PeppolIdentifier';
import Rea from './Rea';

/**
 * The LegalEntity model module.
 * @module model/LegalEntity
 * @version 2.0.1
 */
class LegalEntity {
    /**
     * Constructs a new <code>LegalEntity</code>.
     * @alias module:model/LegalEntity
     * @implements module:model/LegalEntityUpdate
     */
    constructor() { 
        LegalEntityUpdate.initialize(this);
        LegalEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['public'] = true;
    }

    /**
     * Constructs a <code>LegalEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LegalEntity} obj Optional instance to populate.
     * @return {module:model/LegalEntity} The populated <code>LegalEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LegalEntity();
            LegalEntityUpdate.constructFromObject(data, obj);

            if (data.hasOwnProperty('advertisements')) {
                obj['advertisements'] = ApiClient.convertToType(data['advertisements'], ['String']);
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = Country.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = ApiClient.convertToType(data['county'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('line1')) {
                obj['line1'] = ApiClient.convertToType(data['line1'], 'String');
            }
            if (data.hasOwnProperty('line2')) {
                obj['line2'] = ApiClient.convertToType(data['line2'], 'String');
            }
            if (data.hasOwnProperty('party_name')) {
                obj['party_name'] = ApiClient.convertToType(data['party_name'], 'String');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('rea')) {
                obj['rea'] = Rea.constructFromObject(data['rea']);
            }
            if (data.hasOwnProperty('smart_inbox')) {
                obj['smart_inbox'] = ApiClient.convertToType(data['smart_inbox'], 'String');
            }
            if (data.hasOwnProperty('tenant_id')) {
                obj['tenant_id'] = ApiClient.convertToType(data['tenant_id'], 'String');
            }
            if (data.hasOwnProperty('third_party_password')) {
                obj['third_party_password'] = ApiClient.convertToType(data['third_party_password'], 'String');
            }
            if (data.hasOwnProperty('third_party_username')) {
                obj['third_party_username'] = ApiClient.convertToType(data['third_party_username'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
            if (data.hasOwnProperty('peppol_identifiers')) {
                obj['peppol_identifiers'] = ApiClient.convertToType(data['peppol_identifiers'], [PeppolIdentifier]);
            }
            if (data.hasOwnProperty('additional_tax_identifiers')) {
                obj['additional_tax_identifiers'] = ApiClient.convertToType(data['additional_tax_identifiers'], [AdditionalTaxIdentifier]);
            }
            if (data.hasOwnProperty('api_keys')) {
                obj['api_keys'] = ApiClient.convertToType(data['api_keys'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LegalEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LegalEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['advertisements'])) {
            throw new Error("Expected the field `advertisements` to be an array in the JSON data but got " + data['advertisements']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['county'] && !(typeof data['county'] === 'string' || data['county'] instanceof String)) {
            throw new Error("Expected the field `county` to be a primitive type in the JSON string but got " + data['county']);
        }
        // ensure the json data is a string
        if (data['line1'] && !(typeof data['line1'] === 'string' || data['line1'] instanceof String)) {
            throw new Error("Expected the field `line1` to be a primitive type in the JSON string but got " + data['line1']);
        }
        // ensure the json data is a string
        if (data['line2'] && !(typeof data['line2'] === 'string' || data['line2'] instanceof String)) {
            throw new Error("Expected the field `line2` to be a primitive type in the JSON string but got " + data['line2']);
        }
        // ensure the json data is a string
        if (data['party_name'] && !(typeof data['party_name'] === 'string' || data['party_name'] instanceof String)) {
            throw new Error("Expected the field `party_name` to be a primitive type in the JSON string but got " + data['party_name']);
        }
        // validate the optional field `rea`
        if (data['rea']) { // data not null
          Rea.validateJSON(data['rea']);
        }
        // ensure the json data is a string
        if (data['smart_inbox'] && !(typeof data['smart_inbox'] === 'string' || data['smart_inbox'] instanceof String)) {
            throw new Error("Expected the field `smart_inbox` to be a primitive type in the JSON string but got " + data['smart_inbox']);
        }
        // ensure the json data is a string
        if (data['tenant_id'] && !(typeof data['tenant_id'] === 'string' || data['tenant_id'] instanceof String)) {
            throw new Error("Expected the field `tenant_id` to be a primitive type in the JSON string but got " + data['tenant_id']);
        }
        // ensure the json data is a string
        if (data['third_party_password'] && !(typeof data['third_party_password'] === 'string' || data['third_party_password'] instanceof String)) {
            throw new Error("Expected the field `third_party_password` to be a primitive type in the JSON string but got " + data['third_party_password']);
        }
        // ensure the json data is a string
        if (data['third_party_username'] && !(typeof data['third_party_username'] === 'string' || data['third_party_username'] instanceof String)) {
            throw new Error("Expected the field `third_party_username` to be a primitive type in the JSON string but got " + data['third_party_username']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }
        if (data['peppol_identifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['peppol_identifiers'])) {
                throw new Error("Expected the field `peppol_identifiers` to be an array in the JSON data but got " + data['peppol_identifiers']);
            }
            // validate the optional field `peppol_identifiers` (array)
            for (const item of data['peppol_identifiers']) {
                PeppolIdentifier.validateJSON(item);
            };
        }
        if (data['additional_tax_identifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additional_tax_identifiers'])) {
                throw new Error("Expected the field `additional_tax_identifiers` to be an array in the JSON data but got " + data['additional_tax_identifiers']);
            }
            // validate the optional field `additional_tax_identifiers` (array)
            for (const item of data['additional_tax_identifiers']) {
                AdditionalTaxIdentifier.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['api_keys'])) {
            throw new Error("Expected the field `api_keys` to be an array in the JSON data but got " + data['api_keys']);
        }

        return true;
    }


}



/**
 * A list of document types to advertise. Use if this LegalEntity needs the ability to receive more than only invoice documents.
 * @member {Array.<module:model/LegalEntity.AdvertisementsEnum>} advertisements
 */
LegalEntity.prototype['advertisements'] = undefined;

/**
 * The city.
 * @member {String} city
 */
LegalEntity.prototype['city'] = undefined;

/**
 * @member {module:model/Country} country
 */
LegalEntity.prototype['country'] = undefined;

/**
 * County, if applicable
 * @member {String} county
 */
LegalEntity.prototype['county'] = undefined;

/**
 * The Storecove assigned id for the LegalEntity.
 * @member {Number} id
 */
LegalEntity.prototype['id'] = undefined;

/**
 * The first address line.
 * @member {String} line1
 */
LegalEntity.prototype['line1'] = undefined;

/**
 * The second address line, if applicable
 * @member {String} line2
 */
LegalEntity.prototype['line2'] = undefined;

/**
 * The name of the company.
 * @member {String} party_name
 */
LegalEntity.prototype['party_name'] = undefined;

/**
 * Whether or not this LegalEntity is public. Public means it will be listed in the PEPPOL directory at https://directory.peppol.eu/ which is normally what you want. If you have a good reason to not want the LegalEntity listed, provide false. This property is ignored when for country SG, where it is always true.
 * @member {Boolean} public
 * @default true
 */
LegalEntity.prototype['public'] = true;

/**
 * @member {module:model/Rea} rea
 */
LegalEntity.prototype['rea'] = undefined;

/**
 * DEPRECATED. Use the <<_openapi_receiveddocuments_resource>> endpoint. The email address of the Smart Inbox for this LegalEntity.
 * @member {String} smart_inbox
 */
LegalEntity.prototype['smart_inbox'] = undefined;

/**
 * The id of the tenant, to be used in case of multi-tenant solutions. This property will included in webhook events.
 * @member {String} tenant_id
 */
LegalEntity.prototype['tenant_id'] = undefined;

/**
 * The password to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN LegalEntity.
 * @member {String} third_party_password
 */
LegalEntity.prototype['third_party_password'] = undefined;

/**
 * The username to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN LegalEntity.
 * @member {String} third_party_username
 */
LegalEntity.prototype['third_party_username'] = undefined;

/**
 * The zipcode.
 * @member {String} zip
 */
LegalEntity.prototype['zip'] = undefined;

/**
 * @member {Array.<module:model/PeppolIdentifier>} peppol_identifiers
 */
LegalEntity.prototype['peppol_identifiers'] = undefined;

/**
 * @member {Array.<module:model/AdditionalTaxIdentifier>} additional_tax_identifiers
 */
LegalEntity.prototype['additional_tax_identifiers'] = undefined;

/**
 * @member {Array.<String>} api_keys
 */
LegalEntity.prototype['api_keys'] = undefined;


// Implement LegalEntityUpdate interface:
/**
 * A list of document types to advertise. Use if this LegalEntity needs the ability to receive more than only invoice documents.
 * @member {Array.<module:model/LegalEntityUpdate.AdvertisementsEnum>} advertisements
 */
LegalEntityUpdate.prototype['advertisements'] = undefined;
/**
 * The city.
 * @member {String} city
 */
LegalEntityUpdate.prototype['city'] = undefined;
/**
 * @member {module:model/Country} country
 */
LegalEntityUpdate.prototype['country'] = undefined;
/**
 * County, if applicable
 * @member {String} county
 */
LegalEntityUpdate.prototype['county'] = undefined;
/**
 * The Storecove assigned id for the LegalEntity.
 * @member {Number} id
 */
LegalEntityUpdate.prototype['id'] = undefined;
/**
 * The first address line.
 * @member {String} line1
 */
LegalEntityUpdate.prototype['line1'] = undefined;
/**
 * The second address line, if applicable
 * @member {String} line2
 */
LegalEntityUpdate.prototype['line2'] = undefined;
/**
 * The name of the company.
 * @member {String} party_name
 */
LegalEntityUpdate.prototype['party_name'] = undefined;
/**
 * Whether or not this LegalEntity is public. Public means it will be listed in the PEPPOL directory at https://directory.peppol.eu/ which is normally what you want. If you have a good reason to not want the LegalEntity listed, provide false. This property is ignored when for country SG, where it is always true.
 * @member {Boolean} public
 * @default true
 */
LegalEntityUpdate.prototype['public'] = true;
/**
 * @member {module:model/Rea} rea
 */
LegalEntityUpdate.prototype['rea'] = undefined;
/**
 * DEPRECATED. Use the <<_openapi_receiveddocuments_resource>> endpoint. The email address of the Smart Inbox for this LegalEntity.
 * @member {String} smart_inbox
 */
LegalEntityUpdate.prototype['smart_inbox'] = undefined;
/**
 * The id of the tenant, to be used in case of multi-tenant solutions. This property will included in webhook events.
 * @member {String} tenant_id
 */
LegalEntityUpdate.prototype['tenant_id'] = undefined;
/**
 * The password to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN LegalEntity.
 * @member {String} third_party_password
 */
LegalEntityUpdate.prototype['third_party_password'] = undefined;
/**
 * The username to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN LegalEntity.
 * @member {String} third_party_username
 */
LegalEntityUpdate.prototype['third_party_username'] = undefined;
/**
 * The zipcode.
 * @member {String} zip
 */
LegalEntityUpdate.prototype['zip'] = undefined;



/**
 * Allowed values for the <code>advertisements</code> property.
 * @enum {String}
 * @readonly
 */
LegalEntity['AdvertisementsEnum'] = {

    /**
     * value: "invoice"
     * @const
     */
    "invoice": "invoice",

    /**
     * value: "invoice_response"
     * @const
     */
    "invoice_response": "invoice_response",

    /**
     * value: "order"
     * @const
     */
    "order": "order",

    /**
     * value: "ordering"
     * @const
     */
    "ordering": "ordering",

    /**
     * value: "order_response"
     * @const
     */
    "order_response": "order_response"
};



export default LegalEntity;

