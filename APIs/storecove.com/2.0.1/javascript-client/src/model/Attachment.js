/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Attachment model module.
 * @module model/Attachment
 * @version 2.0.1
 */
class Attachment {
    /**
     * Constructs a new <code>Attachment</code>.
     * A document attachment to the invoice.
     * @alias module:model/Attachment
     * @param document {String} The base64 encoded version of the document attachment.
     * @param mimeType {module:model/Attachment.MimeTypeEnum} The document attachment mime type. Currently only application/pdf is allowed.
     */
    constructor(document, mimeType) { 
        
        Attachment.initialize(this, document, mimeType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, document, mimeType) { 
        obj['document'] = document;
        obj['mimeType'] = mimeType;
        obj['primaryImage'] = false;
    }

    /**
     * Constructs a <code>Attachment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attachment} obj Optional instance to populate.
     * @return {module:model/Attachment} The populated <code>Attachment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attachment();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = ApiClient.convertToType(data['document'], 'String');
            }
            if (data.hasOwnProperty('documentId')) {
                obj['documentId'] = ApiClient.convertToType(data['documentId'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('primaryImage')) {
                obj['primaryImage'] = ApiClient.convertToType(data['primaryImage'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attachment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attachment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Attachment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['document'] && !(typeof data['document'] === 'string' || data['document'] instanceof String)) {
            throw new Error("Expected the field `document` to be a primitive type in the JSON string but got " + data['document']);
        }
        // ensure the json data is a string
        if (data['documentId'] && !(typeof data['documentId'] === 'string' || data['documentId'] instanceof String)) {
            throw new Error("Expected the field `documentId` to be a primitive type in the JSON string but got " + data['documentId']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }

        return true;
    }


}

Attachment.RequiredProperties = ["document", "mimeType"];

/**
 * A description for the file attachment.
 * @member {String} description
 */
Attachment.prototype['description'] = undefined;

/**
 * The base64 encoded version of the document attachment.
 * @member {String} document
 */
Attachment.prototype['document'] = undefined;

/**
 * An id for the file attachment.
 * @member {String} documentId
 */
Attachment.prototype['documentId'] = undefined;

/**
 * The name of the file attachment.
 * @member {String} filename
 */
Attachment.prototype['filename'] = undefined;

/**
 * The document attachment mime type. Currently only application/pdf is allowed.
 * @member {module:model/Attachment.MimeTypeEnum} mimeType
 */
Attachment.prototype['mimeType'] = undefined;

/**
 * Whether or not this document is a visual representation of the invoice data. Note that although this property is not yet deprecated, using value 'true' is discouraged, since the invoice data itself is leading, not the image, and including an image may lead to confusion. Peppol no longer allows including primary images.
 * @member {Boolean} primaryImage
 * @default false
 */
Attachment.prototype['primaryImage'] = false;





/**
 * Allowed values for the <code>mimeType</code> property.
 * @enum {String}
 * @readonly
 */
Attachment['MimeTypeEnum'] = {

    /**
     * value: "application/pdf"
     * @const
     */
    "application/pdf": "application/pdf"
};



export default Attachment;

