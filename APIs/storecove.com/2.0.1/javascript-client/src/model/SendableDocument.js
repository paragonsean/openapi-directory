/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentInvoiceResponse from './DocumentInvoiceResponse';
import DocumentOrder from './DocumentOrder';
import Invoice from './Invoice';
import RawDocumentData from './RawDocumentData';

/**
 * The SendableDocument model module.
 * @module model/SendableDocument
 * @version 2.0.1
 */
class SendableDocument {
    /**
     * Constructs a new <code>SendableDocument</code>.
     * The document to send.
     * @alias module:model/SendableDocument
     * @param documentType {module:model/SendableDocument.DocumentTypeEnum} The type of document to be sent.
     */
    constructor(documentType) { 
        
        SendableDocument.initialize(this, documentType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documentType) { 
        obj['documentType'] = documentType;
    }

    /**
     * Constructs a <code>SendableDocument</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendableDocument} obj Optional instance to populate.
     * @return {module:model/SendableDocument} The populated <code>SendableDocument</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendableDocument();

            if (data.hasOwnProperty('documentType')) {
                obj['documentType'] = ApiClient.convertToType(data['documentType'], 'String');
            }
            if (data.hasOwnProperty('invoice')) {
                obj['invoice'] = Invoice.constructFromObject(data['invoice']);
            }
            if (data.hasOwnProperty('invoiceResponse')) {
                obj['invoiceResponse'] = DocumentInvoiceResponse.constructFromObject(data['invoiceResponse']);
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = DocumentOrder.constructFromObject(data['order']);
            }
            if (data.hasOwnProperty('rawDocumentData')) {
                obj['rawDocumentData'] = RawDocumentData.constructFromObject(data['rawDocumentData']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendableDocument</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendableDocument</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SendableDocument.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['documentType'] && !(typeof data['documentType'] === 'string' || data['documentType'] instanceof String)) {
            throw new Error("Expected the field `documentType` to be a primitive type in the JSON string but got " + data['documentType']);
        }
        // validate the optional field `invoice`
        if (data['invoice']) { // data not null
          Invoice.validateJSON(data['invoice']);
        }
        // validate the optional field `invoiceResponse`
        if (data['invoiceResponse']) { // data not null
          DocumentInvoiceResponse.validateJSON(data['invoiceResponse']);
        }
        // validate the optional field `order`
        if (data['order']) { // data not null
          DocumentOrder.validateJSON(data['order']);
        }
        // validate the optional field `rawDocumentData`
        if (data['rawDocumentData']) { // data not null
          RawDocumentData.validateJSON(data['rawDocumentData']);
        }

        return true;
    }


}

SendableDocument.RequiredProperties = ["documentType"];

/**
 * The type of document to be sent.
 * @member {module:model/SendableDocument.DocumentTypeEnum} documentType
 */
SendableDocument.prototype['documentType'] = undefined;

/**
 * @member {module:model/Invoice} invoice
 */
SendableDocument.prototype['invoice'] = undefined;

/**
 * @member {module:model/DocumentInvoiceResponse} invoiceResponse
 */
SendableDocument.prototype['invoiceResponse'] = undefined;

/**
 * @member {module:model/DocumentOrder} order
 */
SendableDocument.prototype['order'] = undefined;

/**
 * @member {module:model/RawDocumentData} rawDocumentData
 */
SendableDocument.prototype['rawDocumentData'] = undefined;





/**
 * Allowed values for the <code>documentType</code> property.
 * @enum {String}
 * @readonly
 */
SendableDocument['DocumentTypeEnum'] = {

    /**
     * value: "invoice"
     * @const
     */
    "invoice": "invoice",

    /**
     * value: "invoice_response"
     * @const
     */
    "invoice_response": "invoice_response",

    /**
     * value: "order"
     * @const
     */
    "order": "order"
};



export default SendableDocument;

