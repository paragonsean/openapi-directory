/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DocumentSubmissionEvidenceDocument model module.
 * @module model/DocumentSubmissionEvidenceDocument
 * @version 2.0.1
 */
class DocumentSubmissionEvidenceDocument {
    /**
     * Constructs a new <code>DocumentSubmissionEvidenceDocument</code>.
     * @alias module:model/DocumentSubmissionEvidenceDocument
     */
    constructor() { 
        
        DocumentSubmissionEvidenceDocument.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentSubmissionEvidenceDocument</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentSubmissionEvidenceDocument} obj Optional instance to populate.
     * @return {module:model/DocumentSubmissionEvidenceDocument} The populated <code>DocumentSubmissionEvidenceDocument</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentSubmissionEvidenceDocument();

            if (data.hasOwnProperty('document')) {
                obj['document'] = ApiClient.convertToType(data['document'], 'String');
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'String');
            }
            if (data.hasOwnProperty('mime_type')) {
                obj['mime_type'] = ApiClient.convertToType(data['mime_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentSubmissionEvidenceDocument</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentSubmissionEvidenceDocument</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['document'] && !(typeof data['document'] === 'string' || data['document'] instanceof String)) {
            throw new Error("Expected the field `document` to be a primitive type in the JSON string but got " + data['document']);
        }
        // ensure the json data is a string
        if (data['expires_at'] && !(typeof data['expires_at'] === 'string' || data['expires_at'] instanceof String)) {
            throw new Error("Expected the field `expires_at` to be a primitive type in the JSON string but got " + data['expires_at']);
        }
        // ensure the json data is a string
        if (data['mime_type'] && !(typeof data['mime_type'] === 'string' || data['mime_type'] instanceof String)) {
            throw new Error("Expected the field `mime_type` to be a primitive type in the JSON string but got " + data['mime_type']);
        }

        return true;
    }


}



/**
 * The URL where the document can be retrieved.
 * @member {String} document
 */
DocumentSubmissionEvidenceDocument.prototype['document'] = undefined;

/**
 * The datetime the URL expires. Format: 'YYYY-MM-DD HH:mm:ss.'
 * @member {String} expires_at
 */
DocumentSubmissionEvidenceDocument.prototype['expires_at'] = undefined;

/**
 * The mime type of the document.
 * @member {module:model/DocumentSubmissionEvidenceDocument.MimeTypeEnum} mime_type
 */
DocumentSubmissionEvidenceDocument.prototype['mime_type'] = undefined;





/**
 * Allowed values for the <code>mime_type</code> property.
 * @enum {String}
 * @readonly
 */
DocumentSubmissionEvidenceDocument['MimeTypeEnum'] = {

    /**
     * value: "message/rfc822"
     * @const
     */
    "message/rfc822": "message/rfc822",

    /**
     * value: "application/xml"
     * @const
     */
    "application/xml": "application/xml",

    /**
     * value: "application/json"
     * @const
     */
    "application/json": "application/json",

    /**
     * value: "application/pdf"
     * @const
     */
    "application/pdf": "application/pdf"
};



export default DocumentSubmissionEvidenceDocument;

