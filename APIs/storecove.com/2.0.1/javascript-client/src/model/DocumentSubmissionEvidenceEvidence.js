/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DocumentSubmissionEvidenceEvidence model module.
 * @module model/DocumentSubmissionEvidenceEvidence
 * @version 2.0.1
 */
class DocumentSubmissionEvidenceEvidence {
    /**
     * Constructs a new <code>DocumentSubmissionEvidenceEvidence</code>.
     * @alias module:model/DocumentSubmissionEvidenceEvidence
     */
    constructor() { 
        
        DocumentSubmissionEvidenceEvidence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentSubmissionEvidenceEvidence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentSubmissionEvidenceEvidence} obj Optional instance to populate.
     * @return {module:model/DocumentSubmissionEvidenceEvidence} The populated <code>DocumentSubmissionEvidenceEvidence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentSubmissionEvidenceEvidence();

            if (data.hasOwnProperty('message_id')) {
                obj['message_id'] = ApiClient.convertToType(data['message_id'], 'String');
            }
            if (data.hasOwnProperty('receiving_accesspoint')) {
                obj['receiving_accesspoint'] = ApiClient.convertToType(data['receiving_accesspoint'], 'String');
            }
            if (data.hasOwnProperty('remote_mta_ip')) {
                obj['remote_mta_ip'] = ApiClient.convertToType(data['remote_mta_ip'], 'String');
            }
            if (data.hasOwnProperty('reporting_mta')) {
                obj['reporting_mta'] = ApiClient.convertToType(data['reporting_mta'], 'String');
            }
            if (data.hasOwnProperty('smtp_response')) {
                obj['smtp_response'] = ApiClient.convertToType(data['smtp_response'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('transmission_id')) {
                obj['transmission_id'] = ApiClient.convertToType(data['transmission_id'], 'String');
            }
            if (data.hasOwnProperty('xml')) {
                obj['xml'] = ApiClient.convertToType(data['xml'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentSubmissionEvidenceEvidence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentSubmissionEvidenceEvidence</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message_id'] && !(typeof data['message_id'] === 'string' || data['message_id'] instanceof String)) {
            throw new Error("Expected the field `message_id` to be a primitive type in the JSON string but got " + data['message_id']);
        }
        // ensure the json data is a string
        if (data['receiving_accesspoint'] && !(typeof data['receiving_accesspoint'] === 'string' || data['receiving_accesspoint'] instanceof String)) {
            throw new Error("Expected the field `receiving_accesspoint` to be a primitive type in the JSON string but got " + data['receiving_accesspoint']);
        }
        // ensure the json data is a string
        if (data['remote_mta_ip'] && !(typeof data['remote_mta_ip'] === 'string' || data['remote_mta_ip'] instanceof String)) {
            throw new Error("Expected the field `remote_mta_ip` to be a primitive type in the JSON string but got " + data['remote_mta_ip']);
        }
        // ensure the json data is a string
        if (data['reporting_mta'] && !(typeof data['reporting_mta'] === 'string' || data['reporting_mta'] instanceof String)) {
            throw new Error("Expected the field `reporting_mta` to be a primitive type in the JSON string but got " + data['reporting_mta']);
        }
        // ensure the json data is a string
        if (data['smtp_response'] && !(typeof data['smtp_response'] === 'string' || data['smtp_response'] instanceof String)) {
            throw new Error("Expected the field `smtp_response` to be a primitive type in the JSON string but got " + data['smtp_response']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // ensure the json data is a string
        if (data['transmission_id'] && !(typeof data['transmission_id'] === 'string' || data['transmission_id'] instanceof String)) {
            throw new Error("Expected the field `transmission_id` to be a primitive type in the JSON string but got " + data['transmission_id']);
        }
        // ensure the json data is a string
        if (data['xml'] && !(typeof data['xml'] === 'string' || data['xml'] instanceof String)) {
            throw new Error("Expected the field `xml` to be a primitive type in the JSON string but got " + data['xml']);
        }

        return true;
    }


}



/**
 * The unique message id used in the OpenPeppol SBDH.
 * @member {String} message_id
 */
DocumentSubmissionEvidenceEvidence.prototype['message_id'] = undefined;

/**
 * An identification of the OpenPeppol accesspoint that the invoice was sent to.
 * @member {String} receiving_accesspoint
 */
DocumentSubmissionEvidenceEvidence.prototype['receiving_accesspoint'] = undefined;

/**
 * The IP address of the sending SMTP server.
 * @member {String} remote_mta_ip
 */
DocumentSubmissionEvidenceEvidence.prototype['remote_mta_ip'] = undefined;

/**
 * An identification for the sending SMTP.
 * @member {String} reporting_mta
 */
DocumentSubmissionEvidenceEvidence.prototype['reporting_mta'] = undefined;

/**
 * The response of the receiving SMTP server.
 * @member {String} smtp_response
 */
DocumentSubmissionEvidenceEvidence.prototype['smtp_response'] = undefined;

/**
 * The timestamp of the delivery to the receiving SMTP server.
 * @member {String} timestamp
 */
DocumentSubmissionEvidenceEvidence.prototype['timestamp'] = undefined;

/**
 * The unique id for this OpenPeppol transmission.
 * @member {String} transmission_id
 */
DocumentSubmissionEvidenceEvidence.prototype['transmission_id'] = undefined;

/**
 * The XML evidence for the transmission. This is the XML returned by the receiving OpenPeppol accesspoint.
 * @member {String} xml
 */
DocumentSubmissionEvidenceEvidence.prototype['xml'] = undefined;






export default DocumentSubmissionEvidenceEvidence;

