/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeliveryDeliveryLocation from './DeliveryDeliveryLocation';
import DeliveryParty from './DeliveryParty';

/**
 * The Delivery model module.
 * @module model/Delivery
 * @version 2.0.1
 */
class Delivery {
    /**
     * Constructs a new <code>Delivery</code>.
     * @alias module:model/Delivery
     */
    constructor() { 
        
        Delivery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['quantity'] = 1;
    }

    /**
     * Constructs a <code>Delivery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Delivery} obj Optional instance to populate.
     * @return {module:model/Delivery} The populated <code>Delivery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Delivery();

            if (data.hasOwnProperty('actualDate')) {
                obj['actualDate'] = ApiClient.convertToType(data['actualDate'], 'String');
            }
            if (data.hasOwnProperty('deliveryLocation')) {
                obj['deliveryLocation'] = DeliveryDeliveryLocation.constructFromObject(data['deliveryLocation']);
            }
            if (data.hasOwnProperty('deliveryParty')) {
                obj['deliveryParty'] = DeliveryParty.constructFromObject(data['deliveryParty']);
            }
            if (data.hasOwnProperty('deliveryPartyName')) {
                obj['deliveryPartyName'] = ApiClient.convertToType(data['deliveryPartyName'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('requestedDeliveryPeriod')) {
                obj['requestedDeliveryPeriod'] = ApiClient.convertToType(data['requestedDeliveryPeriod'], 'String');
            }
            if (data.hasOwnProperty('shippingMarks')) {
                obj['shippingMarks'] = ApiClient.convertToType(data['shippingMarks'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Delivery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Delivery</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actualDate'] && !(typeof data['actualDate'] === 'string' || data['actualDate'] instanceof String)) {
            throw new Error("Expected the field `actualDate` to be a primitive type in the JSON string but got " + data['actualDate']);
        }
        // validate the optional field `deliveryLocation`
        if (data['deliveryLocation']) { // data not null
          DeliveryDeliveryLocation.validateJSON(data['deliveryLocation']);
        }
        // validate the optional field `deliveryParty`
        if (data['deliveryParty']) { // data not null
          DeliveryParty.validateJSON(data['deliveryParty']);
        }
        // ensure the json data is a string
        if (data['deliveryPartyName'] && !(typeof data['deliveryPartyName'] === 'string' || data['deliveryPartyName'] instanceof String)) {
            throw new Error("Expected the field `deliveryPartyName` to be a primitive type in the JSON string but got " + data['deliveryPartyName']);
        }
        // ensure the json data is a string
        if (data['requestedDeliveryPeriod'] && !(typeof data['requestedDeliveryPeriod'] === 'string' || data['requestedDeliveryPeriod'] instanceof String)) {
            throw new Error("Expected the field `requestedDeliveryPeriod` to be a primitive type in the JSON string but got " + data['requestedDeliveryPeriod']);
        }
        // ensure the json data is a string
        if (data['shippingMarks'] && !(typeof data['shippingMarks'] === 'string' || data['shippingMarks'] instanceof String)) {
            throw new Error("Expected the field `shippingMarks` to be a primitive type in the JSON string but got " + data['shippingMarks']);
        }

        return true;
    }


}



/**
 * The actual date of the delivery. Used only for Invoice
 * @member {String} actualDate
 */
Delivery.prototype['actualDate'] = undefined;

/**
 * @member {module:model/DeliveryDeliveryLocation} deliveryLocation
 */
Delivery.prototype['deliveryLocation'] = undefined;

/**
 * @member {module:model/DeliveryParty} deliveryParty
 */
Delivery.prototype['deliveryParty'] = undefined;

/**
 * Use deliveryParty. The name of the party that took delivery. Used only for Invoice
 * @member {String} deliveryPartyName
 */
Delivery.prototype['deliveryPartyName'] = undefined;

/**
 * The quantity of the delivery. Used only for Invoice
 * @member {Number} quantity
 * @default 1
 */
Delivery.prototype['quantity'] = 1;

/**
 * The requested delivery period. Used only for DocumentOrder.
 * @member {String} requestedDeliveryPeriod
 */
Delivery.prototype['requestedDeliveryPeriod'] = undefined;

/**
 * A text that the buyer requests to be printed on the packing labels. Used only for DocumentOrder.
 * @member {String} shippingMarks
 */
Delivery.prototype['shippingMarks'] = undefined;






export default Delivery;

