/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Country from './Country';

/**
 * The Tax model module.
 * @module model/Tax
 * @version 2.0.1
 */
class Tax {
    /**
     * Constructs a new <code>Tax</code>.
     * @alias module:model/Tax
     * @param country {module:model/Country} 
     */
    constructor(country) { 
        
        Tax.initialize(this, country);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country) { 
        obj['country'] = country;
    }

    /**
     * Constructs a <code>Tax</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tax} obj Optional instance to populate.
     * @return {module:model/Tax} The populated <code>Tax</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tax();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = Country.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('percentage')) {
                obj['percentage'] = ApiClient.convertToType(data['percentage'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tax</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tax</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Tax.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }

        return true;
    }


}

Tax.RequiredProperties = ["country"];

/**
 * The amount of tax. Mandatory if taxSystem == 'tax_line_amounts'. However, it is best to use taxSystem tax_line_percentages and provide only the percentage, not the actual amount. The amount is then provided at the invoice level, in the taxSubtotals element.
 * @member {Number} amount
 */
Tax.prototype['amount'] = undefined;

/**
 * The allowed values depend on the country of the tax: ++++ <ul>    <li>        AU:        <ul>            <li>standard (10%, 5.5%)</li>            <li>zero_rated (0%)</li>            <li>export (0%)</li>            <li>exempt (0%)</li>            <li>outside_scope (0%)</li>        </ul>    </li>    <li>        EU:        <ul>            <li>standard (percentages country dependent)</li>            <li>zero_rated (0%)</li>            <li>reverse_charge (0%)</li>            <li>intra_community (0%)</li>            <li>export (0%)</li>            <li>exempt (0%)</li>            <li>outside_scope (0%)</li>        </ul>    </li>    <li>        IN:        <ul>            <li>igst (28%, 18%, 12%, 5%, 3%, 0.25%)</li>            <li>sgst (14%, 9%, 6%, 2.5%, 1.5%</li>            <li>cgst (14%, 9%, 6%, 2.5%, 1.5%</li>            <li>cess (any percentage)</li>            <li>state_cess (any percentage)</li>            <li>reverse_charge (0%)</li>            <li>export (0%)</li>            <li>exempt (0%)</li>            <li>outside_scope (0%)</li>            <li>zero_rated (0%)</li>        </ul>    </li>    <li>        JP:        <ul>            <li>standard (10%, 8%)</li>            <li>export (0%)</li>            <li>exempt (0%)</li>            <li>outside_scope (0%)</li>        </ul>    </li>    <li>        MY:        <ul>            <li>standard (10%, 6%, 5%)</li>            <li>zero_rated (0%)</li>        </ul>    </li>    <li>        NZ:        <ul>            <li>standard (15%)</li>            <li>zero_rated (0%)</li>            <li>export (0%)</li>            <li>exempt (0%)</li>            <li>outside_scope (0%)</li>        </ul>    </li>    <li>        SG:        <ul>            <li>standard (7%; 8% from 2023-01-01; 9% from 2024-01-01)</li>            <li>deemed_supply (7%; 8% from 2023-01-01; 9% from 2024-01-01)</li>            <li>srca_c (7%; 8% from 2023-01-01; 9% from 2024-01-01)</li>            <li>srovr (7%; NOT to be used from 2023-01-01)</li>            <li>srovr_rs (8% from 2023-01-01; 9% from 2024-01-01)</li>            <li>srovr_lvg (8% from 2023-01-01; 9% from 2024-01-01)</li>            <li>srlvg (8% from 2023-01-01; 9% from 2024-01-01)</li>            <li>srca_s (0%)</li>            <li>outside_scope (0%)</li>            <li>not_registered (0%)</li>            <li>zero_rated (0%)</li>            <li>regulation33_exempt (0%)</li>            <li>nonregulation33_exempt (0%)</li>            <li>export (0%)</li>        </ul>    </li>    <li>        US:        <ul>            <li>standard (any percentage)</li>            <li>export (0%)</li>            <li>exempt (0%)</li>            <li>outside_scope (0%)</li>        </ul>    </li></ul> ++++
 * @member {module:model/Tax.CategoryEnum} category
 */
Tax.prototype['category'] = undefined;

/**
 * @member {module:model/Country} country
 */
Tax.prototype['country'] = undefined;

/**
 * The percentage Tax. This should be a valid Tax percentage in the country at the time of the issueDate of this invoice. Mandatory if taxSystem == 'tax_line_percentages'
 * @member {Number} percentage
 */
Tax.prototype['percentage'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
Tax['CategoryEnum'] = {

    /**
     * value: "standard"
     * @const
     */
    "standard": "standard",

    /**
     * value: "zero_rated"
     * @const
     */
    "zero_rated": "zero_rated",

    /**
     * value: "reverse_charge"
     * @const
     */
    "reverse_charge": "reverse_charge",

    /**
     * value: "intra_community"
     * @const
     */
    "intra_community": "intra_community",

    /**
     * value: "exempt"
     * @const
     */
    "exempt": "exempt",

    /**
     * value: "export"
     * @const
     */
    "export": "export",

    /**
     * value: "outside_scope"
     * @const
     */
    "outside_scope": "outside_scope",

    /**
     * value: "regulation33_exempt"
     * @const
     */
    "regulation33_exempt": "regulation33_exempt",

    /**
     * value: "nonregulation33_exempt"
     * @const
     */
    "nonregulation33_exempt": "nonregulation33_exempt",

    /**
     * value: "deemed_supply"
     * @const
     */
    "deemed_supply": "deemed_supply",

    /**
     * value: "srca_s"
     * @const
     */
    "srca_s": "srca_s",

    /**
     * value: "srca_c"
     * @const
     */
    "srca_c": "srca_c",

    /**
     * value: "not_registered"
     * @const
     */
    "not_registered": "not_registered",

    /**
     * value: "igst"
     * @const
     */
    "igst": "igst",

    /**
     * value: "cgst"
     * @const
     */
    "cgst": "cgst",

    /**
     * value: "sgst"
     * @const
     */
    "sgst": "sgst",

    /**
     * value: "cess"
     * @const
     */
    "cess": "cess",

    /**
     * value: "state_cess"
     * @const
     */
    "state_cess": "state_cess",

    /**
     * value: "srovr"
     * @const
     */
    "srovr": "srovr",

    /**
     * value: "srovr_rs"
     * @const
     */
    "srovr_rs": "srovr_rs",

    /**
     * value: "srovr_lvg"
     * @const
     */
    "srovr_lvg": "srovr_lvg",

    /**
     * value: "srlvg"
     * @const
     */
    "srlvg": "srlvg"
};



export default Tax;

