/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CountrySpecificationIdentifier model module.
 * @module model/CountrySpecificationIdentifier
 * @version 2.0.1
 */
class CountrySpecificationIdentifier {
    /**
     * Constructs a new <code>CountrySpecificationIdentifier</code>.
     * @alias module:model/CountrySpecificationIdentifier
     */
    constructor() { 
        
        CountrySpecificationIdentifier.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CountrySpecificationIdentifier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CountrySpecificationIdentifier} obj Optional instance to populate.
     * @return {module:model/CountrySpecificationIdentifier} The populated <code>CountrySpecificationIdentifier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CountrySpecificationIdentifier();

            if (data.hasOwnProperty('centalized_identifier_test')) {
                obj['centalized_identifier_test'] = ApiClient.convertToType(data['centalized_identifier_test'], 'String');
            }
            if (data.hasOwnProperty('centralized')) {
                obj['centralized'] = ApiClient.convertToType(data['centralized'], 'Boolean');
            }
            if (data.hasOwnProperty('centralized_identifier')) {
                obj['centralized_identifier'] = ApiClient.convertToType(data['centralized_identifier'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('scheme')) {
                obj['scheme'] = ApiClient.convertToType(data['scheme'], 'String');
            }
            if (data.hasOwnProperty('scheme_numercial')) {
                obj['scheme_numercial'] = ApiClient.convertToType(data['scheme_numercial'], 'String');
            }
            if (data.hasOwnProperty('scheme_type')) {
                obj['scheme_type'] = ApiClient.convertToType(data['scheme_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CountrySpecificationIdentifier</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CountrySpecificationIdentifier</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['centalized_identifier_test'] && !(typeof data['centalized_identifier_test'] === 'string' || data['centalized_identifier_test'] instanceof String)) {
            throw new Error("Expected the field `centalized_identifier_test` to be a primitive type in the JSON string but got " + data['centalized_identifier_test']);
        }
        // ensure the json data is a string
        if (data['centralized_identifier'] && !(typeof data['centralized_identifier'] === 'string' || data['centralized_identifier'] instanceof String)) {
            throw new Error("Expected the field `centralized_identifier` to be a primitive type in the JSON string but got " + data['centralized_identifier']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['scheme'] && !(typeof data['scheme'] === 'string' || data['scheme'] instanceof String)) {
            throw new Error("Expected the field `scheme` to be a primitive type in the JSON string but got " + data['scheme']);
        }
        // ensure the json data is a string
        if (data['scheme_numercial'] && !(typeof data['scheme_numercial'] === 'string' || data['scheme_numercial'] instanceof String)) {
            throw new Error("Expected the field `scheme_numercial` to be a primitive type in the JSON string but got " + data['scheme_numercial']);
        }
        // ensure the json data is a string
        if (data['scheme_type'] && !(typeof data['scheme_type'] === 'string' || data['scheme_type'] instanceof String)) {
            throw new Error("Expected the field `scheme_type` to be a primitive type in the JSON string but got " + data['scheme_type']);
        }

        return true;
    }


}



/**
 * The centralized identifier to use for routing in test cases, if the \"centralized\" proprerty is true. May not always be available depending on the country and network.
 * @member {String} centalized_identifier_test
 */
CountrySpecificationIdentifier.prototype['centalized_identifier_test'] = undefined;

/**
 * Whether or not the identifier represents a centralized routing identifier. This is used in SG, AT and FR where all government invoices are routed to a central accesspoint with a single identifier. This field can only be present for routing identifiers.
 * @member {Boolean} centralized
 */
CountrySpecificationIdentifier.prototype['centralized'] = undefined;

/**
 * The centralized identifier to use for routing, if the \"centralized\" proprerty is true.
 * @member {String} centralized_identifier
 */
CountrySpecificationIdentifier.prototype['centralized_identifier'] = undefined;

/**
 * Identifier description.
 * @member {String} description
 */
CountrySpecificationIdentifier.prototype['description'] = undefined;

/**
 * The scheme of the identifier
 * @member {String} scheme
 */
CountrySpecificationIdentifier.prototype['scheme'] = undefined;

/**
 * The numerical version of the scheme of the identifier
 * @member {String} scheme_numercial
 */
CountrySpecificationIdentifier.prototype['scheme_numercial'] = undefined;

/**
 * The scheme type of the identifier. Currently always \"iso6523-actorid-upis\"
 * @member {module:model/CountrySpecificationIdentifier.SchemeTypeEnum} scheme_type
 */
CountrySpecificationIdentifier.prototype['scheme_type'] = undefined;





/**
 * Allowed values for the <code>scheme_type</code> property.
 * @enum {String}
 * @readonly
 */
CountrySpecificationIdentifier['SchemeTypeEnum'] = {

    /**
     * value: "iso6523-actorid-upis"
     * @const
     */
    "iso6523-actorid-upis": "iso6523-actorid-upis"
};



export default CountrySpecificationIdentifier;

