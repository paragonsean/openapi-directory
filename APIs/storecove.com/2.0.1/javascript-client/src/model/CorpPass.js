/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CorpPass model module.
 * @module model/CorpPass
 * @version 2.0.1
 */
class CorpPass {
    /**
     * Constructs a new <code>CorpPass</code>.
     * @alias module:model/CorpPass
     */
    constructor() { 
        
        CorpPass.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['enabled'] = false;
        obj['simulate_corppass'] = false;
    }

    /**
     * Constructs a <code>CorpPass</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CorpPass} obj Optional instance to populate.
     * @return {module:model/CorpPass} The populated <code>CorpPass</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CorpPass();

            if (data.hasOwnProperty('client_redirect_fail_url')) {
                obj['client_redirect_fail_url'] = ApiClient.convertToType(data['client_redirect_fail_url'], 'String');
            }
            if (data.hasOwnProperty('client_redirect_success_url')) {
                obj['client_redirect_success_url'] = ApiClient.convertToType(data['client_redirect_success_url'], 'String');
            }
            if (data.hasOwnProperty('corppass_url')) {
                obj['corppass_url'] = ApiClient.convertToType(data['corppass_url'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('flow_type')) {
                obj['flow_type'] = ApiClient.convertToType(data['flow_type'], 'String');
            }
            if (data.hasOwnProperty('signer_email')) {
                obj['signer_email'] = ApiClient.convertToType(data['signer_email'], 'String');
            }
            if (data.hasOwnProperty('signer_name')) {
                obj['signer_name'] = ApiClient.convertToType(data['signer_name'], 'String');
            }
            if (data.hasOwnProperty('simulate_corppass')) {
                obj['simulate_corppass'] = ApiClient.convertToType(data['simulate_corppass'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CorpPass</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CorpPass</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['client_redirect_fail_url'] && !(typeof data['client_redirect_fail_url'] === 'string' || data['client_redirect_fail_url'] instanceof String)) {
            throw new Error("Expected the field `client_redirect_fail_url` to be a primitive type in the JSON string but got " + data['client_redirect_fail_url']);
        }
        // ensure the json data is a string
        if (data['client_redirect_success_url'] && !(typeof data['client_redirect_success_url'] === 'string' || data['client_redirect_success_url'] instanceof String)) {
            throw new Error("Expected the field `client_redirect_success_url` to be a primitive type in the JSON string but got " + data['client_redirect_success_url']);
        }
        // ensure the json data is a string
        if (data['corppass_url'] && !(typeof data['corppass_url'] === 'string' || data['corppass_url'] instanceof String)) {
            throw new Error("Expected the field `corppass_url` to be a primitive type in the JSON string but got " + data['corppass_url']);
        }
        // ensure the json data is a string
        if (data['flow_type'] && !(typeof data['flow_type'] === 'string' || data['flow_type'] instanceof String)) {
            throw new Error("Expected the field `flow_type` to be a primitive type in the JSON string but got " + data['flow_type']);
        }
        // ensure the json data is a string
        if (data['signer_email'] && !(typeof data['signer_email'] === 'string' || data['signer_email'] instanceof String)) {
            throw new Error("Expected the field `signer_email` to be a primitive type in the JSON string but got " + data['signer_email']);
        }
        // ensure the json data is a string
        if (data['signer_name'] && !(typeof data['signer_name'] === 'string' || data['signer_name'] instanceof String)) {
            throw new Error("Expected the field `signer_name` to be a primitive type in the JSON string but got " + data['signer_name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The URL the CorpPass system will redirect to in case of a failure to perform identity verfication.
 * @member {String} client_redirect_fail_url
 */
CorpPass.prototype['client_redirect_fail_url'] = undefined;

/**
 * The URL the CorpPass system will redirect to in case of successful identity verfication.
 * @member {String} client_redirect_success_url
 */
CorpPass.prototype['client_redirect_success_url'] = undefined;

/**
 * The CorpPass redirect URL.
 * @member {String} corppass_url
 */
CorpPass.prototype['corppass_url'] = undefined;

/**
 * Whether or not the CorpPass flow is enabled.
 * @member {Boolean} enabled
 * @default false
 */
CorpPass.prototype['enabled'] = false;

/**
 * The CorpPass flow type.
 * @member {module:model/CorpPass.FlowTypeEnum} flow_type
 */
CorpPass.prototype['flow_type'] = undefined;

/**
 * The email of the person who is going to perform the CorpPass process.
 * @member {String} signer_email
 */
CorpPass.prototype['signer_email'] = undefined;

/**
 * The name of the person who is going to perform the CorpPass process.
 * @member {String} signer_name
 */
CorpPass.prototype['signer_name'] = undefined;

/**
 * Whether or not CorpPass is being simulated.
 * @member {Boolean} simulate_corppass
 * @default false
 */
CorpPass.prototype['simulate_corppass'] = false;

/**
 * The status of the CorpPass process.
 * @member {module:model/CorpPass.StatusEnum} status
 */
CorpPass.prototype['status'] = undefined;





/**
 * Allowed values for the <code>flow_type</code> property.
 * @enum {String}
 * @readonly
 */
CorpPass['FlowTypeEnum'] = {

    /**
     * value: "corppass_flow_redirect"
     * @const
     */
    "redirect": "corppass_flow_redirect",

    /**
     * value: "corppass_flow_email"
     * @const
     */
    "email": "corppass_flow_email"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
CorpPass['StatusEnum'] = {

    /**
     * value: "corppass_no_status,"
     * @const
     */
    "no_status,": "corppass_no_status,",

    /**
     * value: "corppass_initiated,"
     * @const
     */
    "initiated,": "corppass_initiated,",

    /**
     * value: "corppass_cancelled,"
     * @const
     */
    "cancelled,": "corppass_cancelled,",

    /**
     * value: "corppass_failed,"
     * @const
     */
    "failed,": "corppass_failed,",

    /**
     * value: "corppass_succeeded"
     * @const
     */
    "succeeded": "corppass_succeeded"
};



export default CorpPass;

