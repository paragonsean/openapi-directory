/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdditionalTaxIdentifier model module.
 * @module model/AdditionalTaxIdentifier
 * @version 2.0.1
 */
class AdditionalTaxIdentifier {
    /**
     * Constructs a new <code>AdditionalTaxIdentifier</code>.
     * @alias module:model/AdditionalTaxIdentifier
     */
    constructor() { 
        
        AdditionalTaxIdentifier.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdditionalTaxIdentifier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdditionalTaxIdentifier} obj Optional instance to populate.
     * @return {module:model/AdditionalTaxIdentifier} The populated <code>AdditionalTaxIdentifier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdditionalTaxIdentifier();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = ApiClient.convertToType(data['county'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('scheme')) {
                obj['scheme'] = ApiClient.convertToType(data['scheme'], 'String');
            }
            if (data.hasOwnProperty('superscheme')) {
                obj['superscheme'] = ApiClient.convertToType(data['superscheme'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdditionalTaxIdentifier</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdditionalTaxIdentifier</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['county'] && !(typeof data['county'] === 'string' || data['county'] instanceof String)) {
            throw new Error("Expected the field `county` to be a primitive type in the JSON string but got " + data['county']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['scheme'] && !(typeof data['scheme'] === 'string' || data['scheme'] instanceof String)) {
            throw new Error("Expected the field `scheme` to be a primitive type in the JSON string but got " + data['scheme']);
        }
        // ensure the json data is a string
        if (data['superscheme'] && !(typeof data['superscheme'] === 'string' || data['superscheme'] instanceof String)) {
            throw new Error("Expected the field `superscheme` to be a primitive type in the JSON string but got " + data['superscheme']);
        }

        return true;
    }


}



/**
 * The ISO3166 country code to use this identifier for in case of consumerTaxMode.
 * @member {String} country
 */
AdditionalTaxIdentifier.prototype['country'] = undefined;

/**
 * The county/state inside the country code to use this identifier for in case of consumerTaxMode.
 * @member {String} county
 */
AdditionalTaxIdentifier.prototype['county'] = undefined;

/**
 * The Storecove assigned id for the AdditionalTaxIdentifier.
 * @member {Number} id
 */
AdditionalTaxIdentifier.prototype['id'] = undefined;

/**
 * The identifier.
 * @member {String} identifier
 */
AdditionalTaxIdentifier.prototype['identifier'] = undefined;

/**
 * The scheme of the identifier.
 * @member {String} scheme
 */
AdditionalTaxIdentifier.prototype['scheme'] = undefined;

/**
 * The superscheme of the identifier.
 * @member {String} superscheme
 */
AdditionalTaxIdentifier.prototype['superscheme'] = undefined;






export default AdditionalTaxIdentifier;

