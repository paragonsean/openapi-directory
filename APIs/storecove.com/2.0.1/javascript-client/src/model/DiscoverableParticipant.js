/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DiscoverableParticipant model module.
 * @module model/DiscoverableParticipant
 * @version 2.0.1
 */
class DiscoverableParticipant {
    /**
     * Constructs a new <code>DiscoverableParticipant</code>.
     * A participant to be discovered.
     * @alias module:model/DiscoverableParticipant
     * @param identifier {String} The actual identifier.
     * @param scheme {String} The scheme of the identifier. See <<_receiver_identifiers_list>> for a list.
     */
    constructor(identifier, scheme) { 
        
        DiscoverableParticipant.initialize(this, identifier, scheme);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, identifier, scheme) { 
        obj['identifier'] = identifier;
        obj['metaScheme'] = 'iso6523-actorid-upis';
        obj['network'] = 'peppol';
        obj['scheme'] = scheme;
    }

    /**
     * Constructs a <code>DiscoverableParticipant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiscoverableParticipant} obj Optional instance to populate.
     * @return {module:model/DiscoverableParticipant} The populated <code>DiscoverableParticipant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiscoverableParticipant();

            if (data.hasOwnProperty('documentTypes')) {
                obj['documentTypes'] = ApiClient.convertToType(data['documentTypes'], ['String']);
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('metaScheme')) {
                obj['metaScheme'] = ApiClient.convertToType(data['metaScheme'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('scheme')) {
                obj['scheme'] = ApiClient.convertToType(data['scheme'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiscoverableParticipant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiscoverableParticipant</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DiscoverableParticipant.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['documentTypes'])) {
            throw new Error("Expected the field `documentTypes` to be an array in the JSON data but got " + data['documentTypes']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['metaScheme'] && !(typeof data['metaScheme'] === 'string' || data['metaScheme'] instanceof String)) {
            throw new Error("Expected the field `metaScheme` to be a primitive type in the JSON string but got " + data['metaScheme']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['scheme'] && !(typeof data['scheme'] === 'string' || data['scheme'] instanceof String)) {
            throw new Error("Expected the field `scheme` to be a primitive type in the JSON string but got " + data['scheme']);
        }

        return true;
    }


}

DiscoverableParticipant.RequiredProperties = ["identifier", "scheme"];

/**
 * An array of document types to discover. The default is '[\"invoice\", \"creditnote\"]'. This is ignored when only checking existence.
 * @member {Array.<module:model/DiscoverableParticipant.DocumentTypesEnum>} documentTypes
 */
DiscoverableParticipant.prototype['documentTypes'] = undefined;

/**
 * The actual identifier.
 * @member {String} identifier
 */
DiscoverableParticipant.prototype['identifier'] = undefined;

/**
 * The meta scheme of the identifier. For Peppol this is always 'iso6523-actorid-upis'.
 * @member {String} metaScheme
 * @default 'iso6523-actorid-upis'
 */
DiscoverableParticipant.prototype['metaScheme'] = 'iso6523-actorid-upis';

/**
 * The network to check. Currently only 'peppol' is supported.
 * @member {String} network
 * @default 'peppol'
 */
DiscoverableParticipant.prototype['network'] = 'peppol';

/**
 * The scheme of the identifier. See <<_receiver_identifiers_list>> for a list.
 * @member {String} scheme
 */
DiscoverableParticipant.prototype['scheme'] = undefined;





/**
 * Allowed values for the <code>documentTypes</code> property.
 * @enum {String}
 * @readonly
 */
DiscoverableParticipant['DocumentTypesEnum'] = {

    /**
     * value: "invoice"
     * @const
     */
    "invoice": "invoice",

    /**
     * value: "creditnote"
     * @const
     */
    "creditnote": "creditnote",

    /**
     * value: "invoice_response"
     * @const
     */
    "invoice_response": "invoice_response",

    /**
     * value: "order"
     * @const
     */
    "order": "order",

    /**
     * value: "ordering"
     * @const
     */
    "ordering": "ordering",

    /**
     * value: "order_response"
     * @const
     */
    "order_response": "order_response"
};



export default DiscoverableParticipant;

