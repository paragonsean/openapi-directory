/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import InvoiceRecipientPreflight from '../model/InvoiceRecipientPreflight';
import InvoiceSubmission from '../model/InvoiceSubmission';
import InvoiceSubmissionEvidence from '../model/InvoiceSubmissionEvidence';
import InvoiceSubmissionResult from '../model/InvoiceSubmissionResult';
import PreflightInvoiceRecipientResult from '../model/PreflightInvoiceRecipientResult';

/**
* InvoiceSubmissions service.
* @module api/InvoiceSubmissionsApi
* @version 2.0.1
*/
export default class InvoiceSubmissionsApi {

    /**
    * Constructs a new InvoiceSubmissionsApi. 
    * @alias module:api/InvoiceSubmissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createInvoiceSubmission operation.
     * @callback module:api/InvoiceSubmissionsApi~createInvoiceSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceSubmissionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a new invoice
     * DEPRECATED. Use the new /document_submissions endpoint. Submit an invoice for delivery.
     * @param {module:model/InvoiceSubmission} invoiceSubmission Invoice to submit
     * @param {module:api/InvoiceSubmissionsApi~createInvoiceSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceSubmissionResult}
     */
    createInvoiceSubmission(invoiceSubmission, callback) {
      let postBody = invoiceSubmission;
      // verify the required parameter 'invoiceSubmission' is set
      if (invoiceSubmission === undefined || invoiceSubmission === null) {
        throw new Error("Missing the required parameter 'invoiceSubmission' when calling createInvoiceSubmission");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvoiceSubmissionResult;
      return this.apiClient.callApi(
        '/invoice_submissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the preflightInvoiceRecipient operation.
     * @callback module:api/InvoiceSubmissionsApi~preflightInvoiceRecipientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreflightInvoiceRecipientResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DEPRECATED. Preflight an invoice recipient
     * Deprecated. Use the new /discovery endpoint. Check whether Storecove can deliver an invoice for a list of ids.
     * @param {module:model/InvoiceRecipientPreflight} invoiceRecipientPreflight The invoice recipient to preflight
     * @param {module:api/InvoiceSubmissionsApi~preflightInvoiceRecipientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreflightInvoiceRecipientResult}
     */
    preflightInvoiceRecipient(invoiceRecipientPreflight, callback) {
      let postBody = invoiceRecipientPreflight;
      // verify the required parameter 'invoiceRecipientPreflight' is set
      if (invoiceRecipientPreflight === undefined || invoiceRecipientPreflight === null) {
        throw new Error("Missing the required parameter 'invoiceRecipientPreflight' when calling preflightInvoiceRecipient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PreflightInvoiceRecipientResult;
      return this.apiClient.callApi(
        '/invoice_submissions/preflight', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showInvoiceSubmissionEvidence operation.
     * @callback module:api/InvoiceSubmissionsApi~showInvoiceSubmissionEvidenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceSubmissionEvidence} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DEPRECATED. Get InvoiceSubmission Evidence
     * Deprecated. Use the new /document_submissions/{guid}/evidence endpoint. Get evidence for an InvoiceSubmission by GUID with corresponding status
     * @param {String} guid InvoiceSubmission GUID
     * @param {module:api/InvoiceSubmissionsApi~showInvoiceSubmissionEvidenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceSubmissionEvidence}
     */
    showInvoiceSubmissionEvidence(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling showInvoiceSubmissionEvidence");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InvoiceSubmissionEvidence;
      return this.apiClient.callApi(
        '/invoice_submissions/{guid}/evidence', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
