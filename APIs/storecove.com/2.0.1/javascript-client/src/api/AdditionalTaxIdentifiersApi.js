/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdditionalTaxIdentifier from '../model/AdditionalTaxIdentifier';
import AdditionalTaxIdentifierCreate from '../model/AdditionalTaxIdentifierCreate';
import AdditionalTaxIdentifierUpdate from '../model/AdditionalTaxIdentifierUpdate';
import ErrorModel from '../model/ErrorModel';

/**
* AdditionalTaxIdentifiers service.
* @module api/AdditionalTaxIdentifiersApi
* @version 2.0.1
*/
export default class AdditionalTaxIdentifiersApi {

    /**
    * Constructs a new AdditionalTaxIdentifiersApi. 
    * @alias module:api/AdditionalTaxIdentifiersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAdditionalTaxIdentifier operation.
     * @callback module:api/AdditionalTaxIdentifiersApi~createAdditionalTaxIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdditionalTaxIdentifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new AdditionalTaxIdentifier
     * Create a new AdditionalTaxIdentifier. An AdditionalTaxIdentifier is a seconday tax identifier that is used inside the EU when sending invoices to consumers. In that case, the VAT of the receiving country is used and if the sender has a local VAT identifier, that is used to identifiy the sender, instead of the sender's origin country VAT number. To use these identifiers, use the invoice.consumerTaxMode = true property.
     * @param {Number} legalEntityId The id of the LegalEntity for which to create the AdditionalTaxIdentifier
     * @param {module:model/AdditionalTaxIdentifierCreate} additionalTaxIdentifierCreate AdditionalTaxIdentifier to create
     * @param {module:api/AdditionalTaxIdentifiersApi~createAdditionalTaxIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdditionalTaxIdentifier}
     */
    createAdditionalTaxIdentifier(legalEntityId, additionalTaxIdentifierCreate, callback) {
      let postBody = additionalTaxIdentifierCreate;
      // verify the required parameter 'legalEntityId' is set
      if (legalEntityId === undefined || legalEntityId === null) {
        throw new Error("Missing the required parameter 'legalEntityId' when calling createAdditionalTaxIdentifier");
      }
      // verify the required parameter 'additionalTaxIdentifierCreate' is set
      if (additionalTaxIdentifierCreate === undefined || additionalTaxIdentifierCreate === null) {
        throw new Error("Missing the required parameter 'additionalTaxIdentifierCreate' when calling createAdditionalTaxIdentifier");
      }

      let pathParams = {
        'legal_entity_id': legalEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdditionalTaxIdentifier;
      return this.apiClient.callApi(
        '/legal_entities/{legal_entity_id}/additional_tax_identifiers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAdditionalTaxIdentifier operation.
     * @callback module:api/AdditionalTaxIdentifiersApi~deleteAdditionalTaxIdentifierCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete AdditionalTaxIdentifier
     * Delete an AdditionalTaxIdentifier
     * @param {Number} legalEntityId The id of the LegalEntity the AdditionalTaxIdentifier belongs to
     * @param {Number} id The id of the AdditionalTaxIdentifier
     * @param {module:api/AdditionalTaxIdentifiersApi~deleteAdditionalTaxIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAdditionalTaxIdentifier(legalEntityId, id, callback) {
      let postBody = null;
      // verify the required parameter 'legalEntityId' is set
      if (legalEntityId === undefined || legalEntityId === null) {
        throw new Error("Missing the required parameter 'legalEntityId' when calling deleteAdditionalTaxIdentifier");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAdditionalTaxIdentifier");
      }

      let pathParams = {
        'legal_entity_id': legalEntityId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/legal_entities/{legal_entity_id}/additional_tax_identifiers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAdditionalTaxIdentifier operation.
     * @callback module:api/AdditionalTaxIdentifiersApi~getAdditionalTaxIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdditionalTaxIdentifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get AdditionalTaxIdentifier
     * Get an AdditionalTaxIdentifier
     * @param {Number} legalEntityId The id of the LegalEntity the AdditionalTaxIdentifier belongs to
     * @param {Number} id The id of the AdditionalTaxIdentifier
     * @param {module:api/AdditionalTaxIdentifiersApi~getAdditionalTaxIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdditionalTaxIdentifier}
     */
    getAdditionalTaxIdentifier(legalEntityId, id, callback) {
      let postBody = null;
      // verify the required parameter 'legalEntityId' is set
      if (legalEntityId === undefined || legalEntityId === null) {
        throw new Error("Missing the required parameter 'legalEntityId' when calling getAdditionalTaxIdentifier");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAdditionalTaxIdentifier");
      }

      let pathParams = {
        'legal_entity_id': legalEntityId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdditionalTaxIdentifier;
      return this.apiClient.callApi(
        '/legal_entities/{legal_entity_id}/additional_tax_identifiers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAdditionalTaxIdentifier operation.
     * @callback module:api/AdditionalTaxIdentifiersApi~updateAdditionalTaxIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdditionalTaxIdentifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update AdditionalTaxIdentifier
     * Update an AdditionalTaxIdentifier
     * @param {Number} legalEntityId The id of the LegalEntity the AdditionalTaxIdentifier belongs to
     * @param {Number} id The id of the AdditionalTaxIdentifier to be updated
     * @param {module:model/AdditionalTaxIdentifierUpdate} additionalTaxIdentifierUpdate AdditionalTaxIdentifier to update
     * @param {module:api/AdditionalTaxIdentifiersApi~updateAdditionalTaxIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdditionalTaxIdentifier}
     */
    updateAdditionalTaxIdentifier(legalEntityId, id, additionalTaxIdentifierUpdate, callback) {
      let postBody = additionalTaxIdentifierUpdate;
      // verify the required parameter 'legalEntityId' is set
      if (legalEntityId === undefined || legalEntityId === null) {
        throw new Error("Missing the required parameter 'legalEntityId' when calling updateAdditionalTaxIdentifier");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAdditionalTaxIdentifier");
      }
      // verify the required parameter 'additionalTaxIdentifierUpdate' is set
      if (additionalTaxIdentifierUpdate === undefined || additionalTaxIdentifierUpdate === null) {
        throw new Error("Missing the required parameter 'additionalTaxIdentifierUpdate' when calling updateAdditionalTaxIdentifier");
      }

      let pathParams = {
        'legal_entity_id': legalEntityId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdditionalTaxIdentifier;
      return this.apiClient.callApi(
        '/legal_entities/{legal_entity_id}/additional_tax_identifiers/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
