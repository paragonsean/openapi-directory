/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import PeppolIdentifier from '../model/PeppolIdentifier';
import PeppolIdentifierCreate from '../model/PeppolIdentifierCreate';

/**
* PeppolIdentifiers service.
* @module api/PeppolIdentifiersApi
* @version 2.0.1
*/
export default class PeppolIdentifiersApi {

    /**
    * Constructs a new PeppolIdentifiersApi. 
    * @alias module:api/PeppolIdentifiersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPeppolIdentifier operation.
     * @callback module:api/PeppolIdentifiersApi~createPeppolIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeppolIdentifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new PeppolIdentifier
     * Create a brand new new PeppolIdentifier. For <<_sg_singapore>>, special rules apply.
     * @param {Number} legalEntityId The id of the LegalEntity for which to create the PeppolIdentifier
     * @param {module:model/PeppolIdentifierCreate} peppolIdentifierCreate PeppolIdentifier to create
     * @param {module:api/PeppolIdentifiersApi~createPeppolIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeppolIdentifier}
     */
    createPeppolIdentifier(legalEntityId, peppolIdentifierCreate, callback) {
      let postBody = peppolIdentifierCreate;
      // verify the required parameter 'legalEntityId' is set
      if (legalEntityId === undefined || legalEntityId === null) {
        throw new Error("Missing the required parameter 'legalEntityId' when calling createPeppolIdentifier");
      }
      // verify the required parameter 'peppolIdentifierCreate' is set
      if (peppolIdentifierCreate === undefined || peppolIdentifierCreate === null) {
        throw new Error("Missing the required parameter 'peppolIdentifierCreate' when calling createPeppolIdentifier");
      }

      let pathParams = {
        'legal_entity_id': legalEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PeppolIdentifier;
      return this.apiClient.callApi(
        '/legal_entities/{legal_entity_id}/peppol_identifiers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePeppolIdentifier operation.
     * @callback module:api/PeppolIdentifiersApi~deletePeppolIdentifierCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete PeppolIdentifier
     * Delete a PeppolIdentifier.
     * @param {Number} legalEntityId The id of the LegalEntity this PeppolIdentifier belongs to
     * @param {String} superscheme The superscheme of the identifier. Should always be \"iso6523-actorid-upis\".
     * @param {String} scheme PEPPOL identifier scheme id, e.g. \"DE:VAT\". For a full list see <<_receiver_identifiers_list>>.
     * @param {String} identifier PEPPOL identifier
     * @param {module:api/PeppolIdentifiersApi~deletePeppolIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePeppolIdentifier(legalEntityId, superscheme, scheme, identifier, callback) {
      let postBody = null;
      // verify the required parameter 'legalEntityId' is set
      if (legalEntityId === undefined || legalEntityId === null) {
        throw new Error("Missing the required parameter 'legalEntityId' when calling deletePeppolIdentifier");
      }
      // verify the required parameter 'superscheme' is set
      if (superscheme === undefined || superscheme === null) {
        throw new Error("Missing the required parameter 'superscheme' when calling deletePeppolIdentifier");
      }
      // verify the required parameter 'scheme' is set
      if (scheme === undefined || scheme === null) {
        throw new Error("Missing the required parameter 'scheme' when calling deletePeppolIdentifier");
      }
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling deletePeppolIdentifier");
      }

      let pathParams = {
        'legal_entity_id': legalEntityId,
        'superscheme': superscheme,
        'scheme': scheme,
        'identifier': identifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/legal_entities/{legal_entity_id}/peppol_identifiers/{superscheme}/{scheme}/{identifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
