/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import ReceivedDocument from '../model/ReceivedDocument';
import ReceivedDocumentCreate from '../model/ReceivedDocumentCreate';

/**
* ReceivedDocuments service.
* @module api/ReceivedDocumentsApi
* @version 2.0.1
*/
export default class ReceivedDocumentsApi {

    /**
    * Constructs a new ReceivedDocumentsApi. 
    * @alias module:api/ReceivedDocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getReceivedDocument operation.
     * @callback module:api/ReceivedDocumentsApi~getReceivedDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceivedDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a new ReceivedDocument
     * EXPERIMENTAL: use only for orders. Get a new ReceivedDocument.
     * @param {String} guid The guid of the document that was received. This is the \"document_guid\" property of the \"received_document\" webhook.
     * @param {module:model/String} syntax The syntax in which to receive the received document.
     * @param {String} format Automatically added
     * @param {module:api/ReceivedDocumentsApi~getReceivedDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceivedDocument}
     */
    getReceivedDocument(guid, syntax, format, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling getReceivedDocument");
      }
      // verify the required parameter 'syntax' is set
      if (syntax === undefined || syntax === null) {
        throw new Error("Missing the required parameter 'syntax' when calling getReceivedDocument");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getReceivedDocument");
      }

      let pathParams = {
        'guid': guid,
        'format': format
      };
      let queryParams = {
        'syntax': syntax
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReceivedDocument;
      return this.apiClient.callApi(
        '/received_documents/{guid}/{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the receiveDocument operation.
     * @callback module:api/ReceivedDocumentsApi~receiveDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceivedDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Receive a new Document
     * Receive a new Document.
     * @param {Number} legalEntityId The id of the LegalEntity for which the document was received.
     * @param {module:model/ReceivedDocumentCreate} receivedDocumentCreate Received document to process.
     * @param {module:api/ReceivedDocumentsApi~receiveDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceivedDocument}
     */
    receiveDocument(legalEntityId, receivedDocumentCreate, callback) {
      let postBody = receivedDocumentCreate;
      // verify the required parameter 'legalEntityId' is set
      if (legalEntityId === undefined || legalEntityId === null) {
        throw new Error("Missing the required parameter 'legalEntityId' when calling receiveDocument");
      }
      // verify the required parameter 'receivedDocumentCreate' is set
      if (receivedDocumentCreate === undefined || receivedDocumentCreate === null) {
        throw new Error("Missing the required parameter 'receivedDocumentCreate' when calling receiveDocument");
      }

      let pathParams = {
        'legal_entity_id': legalEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReceivedDocument;
      return this.apiClient.callApi(
        '/legal_entities/{legal_entity_id}/received_documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
