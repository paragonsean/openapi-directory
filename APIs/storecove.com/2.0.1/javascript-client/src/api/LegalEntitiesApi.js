/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import LegalEntity from '../model/LegalEntity';
import LegalEntityCreate from '../model/LegalEntityCreate';
import LegalEntityUpdate from '../model/LegalEntityUpdate';

/**
* LegalEntities service.
* @module api/LegalEntitiesApi
* @version 2.0.1
*/
export default class LegalEntitiesApi {

    /**
    * Constructs a new LegalEntitiesApi. 
    * @alias module:api/LegalEntitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLegalEntity operation.
     * @callback module:api/LegalEntitiesApi~createLegalEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LegalEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new LegalEntity
     * Create a new LegalEntity.
     * @param {module:model/LegalEntityCreate} legalEntityCreate LegalEntity to create
     * @param {module:api/LegalEntitiesApi~createLegalEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LegalEntity}
     */
    createLegalEntity(legalEntityCreate, callback) {
      let postBody = legalEntityCreate;
      // verify the required parameter 'legalEntityCreate' is set
      if (legalEntityCreate === undefined || legalEntityCreate === null) {
        throw new Error("Missing the required parameter 'legalEntityCreate' when calling createLegalEntity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LegalEntity;
      return this.apiClient.callApi(
        '/legal_entities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLegalEntity operation.
     * @callback module:api/LegalEntitiesApi~deleteLegalEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete LegalEntity
     * Delete a specific LegalEntity.
     * @param {Number} id legal_entity id
     * @param {module:api/LegalEntitiesApi~deleteLegalEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLegalEntity(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLegalEntity");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/legal_entities/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLegalEntity operation.
     * @callback module:api/LegalEntitiesApi~getLegalEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LegalEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get LegalEntity
     * Get a specific LegalEntity.
     * @param {Number} id legal_entity id
     * @param {module:api/LegalEntitiesApi~getLegalEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LegalEntity}
     */
    getLegalEntity(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLegalEntity");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LegalEntity;
      return this.apiClient.callApi(
        '/legal_entities/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLegalEntity operation.
     * @callback module:api/LegalEntitiesApi~updateLegalEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LegalEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update LegalEntity
     * Update a specific LegalEntity.
     * @param {Number} id legal_entity id
     * @param {module:model/LegalEntityUpdate} legalEntityUpdate LegalEntity updates
     * @param {module:api/LegalEntitiesApi~updateLegalEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LegalEntity}
     */
    updateLegalEntity(id, legalEntityUpdate, callback) {
      let postBody = legalEntityUpdate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateLegalEntity");
      }
      // verify the required parameter 'legalEntityUpdate' is set
      if (legalEntityUpdate === undefined || legalEntityUpdate === null) {
        throw new Error("Missing the required parameter 'legalEntityUpdate' when calling updateLegalEntity");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LegalEntity;
      return this.apiClient.callApi(
        '/legal_entities/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
