/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WebhookInstance from '../model/WebhookInstance';

/**
* WebhookInstances service.
* @module api/WebhookInstancesApi
* @version 2.0.1
*/
export default class WebhookInstancesApi {

    /**
    * Constructs a new WebhookInstancesApi. 
    * @alias module:api/WebhookInstancesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteWebhookInstance operation.
     * @callback module:api/WebhookInstancesApi~deleteWebhookInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE a WebhookInstance
     * DELETE a specific WebhookInstance
     * @param {String} guid WebhookInstance guid
     * @param {module:api/WebhookInstancesApi~deleteWebhookInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWebhookInstance(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling deleteWebhookInstance");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhook_instances/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebhookInstances operation.
     * @callback module:api/WebhookInstancesApi~getWebhookInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET a WebhookInstance
     * GET a WebhookInstance from the queue. After processing it successfully, DELETE it and GET the next one. When a 204 is received, the queue is empty and the polling process can sleep for a while.
     * @param {module:api/WebhookInstancesApi~getWebhookInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookInstance}
     */
    getWebhookInstances(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookInstance;
      return this.apiClient.callApi(
        '/webhook_instances/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
