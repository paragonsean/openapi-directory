/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DocumentSubmission from '../model/DocumentSubmission';
import DocumentSubmissionEvidence from '../model/DocumentSubmissionEvidence';
import DocumentSubmissionResult from '../model/DocumentSubmissionResult';
import ErrorModel from '../model/ErrorModel';

/**
* DocumentSubmissions service.
* @module api/DocumentSubmissionsApi
* @version 2.0.1
*/
export default class DocumentSubmissionsApi {

    /**
    * Constructs a new DocumentSubmissionsApi. 
    * @alias module:api/DocumentSubmissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDocumentSubmission operation.
     * @callback module:api/DocumentSubmissionsApi~createDocumentSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentSubmissionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a new document.
     * Submit a document for delivery. This endpoint will replaces the /invoice_submissions endpoint which will soon be deprecated.
     * @param {module:model/DocumentSubmission} documentSubmission Document to submit
     * @param {module:api/DocumentSubmissionsApi~createDocumentSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentSubmissionResult}
     */
    createDocumentSubmission(documentSubmission, callback) {
      let postBody = documentSubmission;
      // verify the required parameter 'documentSubmission' is set
      if (documentSubmission === undefined || documentSubmission === null) {
        throw new Error("Missing the required parameter 'documentSubmission' when calling createDocumentSubmission");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentSubmissionResult;
      return this.apiClient.callApi(
        '/document_submissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showDocumentSubmissionEvidence operation.
     * @callback module:api/DocumentSubmissionsApi~showDocumentSubmissionEvidenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentSubmissionEvidence} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get DocumentSubmission Evidence
     * Get evidence for a DocumentSubmission by GUID with corresponding status
     * @param {String} guid DocumentSubmission GUID
     * @param {module:model/String} evidenceType Type of evidence requested
     * @param {module:api/DocumentSubmissionsApi~showDocumentSubmissionEvidenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentSubmissionEvidence}
     */
    showDocumentSubmissionEvidence(guid, evidenceType, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling showDocumentSubmissionEvidence");
      }
      // verify the required parameter 'evidenceType' is set
      if (evidenceType === undefined || evidenceType === null) {
        throw new Error("Missing the required parameter 'evidenceType' when calling showDocumentSubmissionEvidence");
      }

      let pathParams = {
        'guid': guid,
        'evidence_type': evidenceType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentSubmissionEvidence;
      return this.apiClient.callApi(
        '/document_submissions/{guid}/evidence/{evidence_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
