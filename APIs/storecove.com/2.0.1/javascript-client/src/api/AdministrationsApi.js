/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Administration from '../model/Administration';
import AdministrationCreate from '../model/AdministrationCreate';
import AdministrationUpdate from '../model/AdministrationUpdate';
import ErrorModel from '../model/ErrorModel';

/**
* Administrations service.
* @module api/AdministrationsApi
* @version 2.0.1
*/
export default class AdministrationsApi {

    /**
    * Constructs a new AdministrationsApi. 
    * @alias module:api/AdministrationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAdministration operation.
     * @callback module:api/AdministrationsApi~createAdministrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Administration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Administration
     * Deprecated. Create a new Administration. An Administration is an email destination for purchase invoices.
     * @param {Number} legalEntityId The id of the LegalEntity for which to create the Administration
     * @param {module:model/AdministrationCreate} administrationCreate Administration to create
     * @param {module:api/AdministrationsApi~createAdministrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Administration}
     */
    createAdministration(legalEntityId, administrationCreate, callback) {
      let postBody = administrationCreate;
      // verify the required parameter 'legalEntityId' is set
      if (legalEntityId === undefined || legalEntityId === null) {
        throw new Error("Missing the required parameter 'legalEntityId' when calling createAdministration");
      }
      // verify the required parameter 'administrationCreate' is set
      if (administrationCreate === undefined || administrationCreate === null) {
        throw new Error("Missing the required parameter 'administrationCreate' when calling createAdministration");
      }

      let pathParams = {
        'legal_entity_id': legalEntityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Administration;
      return this.apiClient.callApi(
        '/legal_entities/{legal_entity_id}/administrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAdministration operation.
     * @callback module:api/AdministrationsApi~deleteAdministrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Administration
     * Deprecated. Delete an Administration
     * @param {Number} legalEntityId The id of the LegalEntity the Administration belongs to
     * @param {Number} id The id of the Administration
     * @param {module:api/AdministrationsApi~deleteAdministrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAdministration(legalEntityId, id, callback) {
      let postBody = null;
      // verify the required parameter 'legalEntityId' is set
      if (legalEntityId === undefined || legalEntityId === null) {
        throw new Error("Missing the required parameter 'legalEntityId' when calling deleteAdministration");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAdministration");
      }

      let pathParams = {
        'legal_entity_id': legalEntityId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/legal_entities/{legal_entity_id}/administrations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAdministration operation.
     * @callback module:api/AdministrationsApi~getAdministrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Administration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Administration
     * Deprecated. Get an Administration
     * @param {Number} legalEntityId The id of the LegalEntity the Administration belongs to
     * @param {Number} id The id of the Administration
     * @param {module:api/AdministrationsApi~getAdministrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Administration}
     */
    getAdministration(legalEntityId, id, callback) {
      let postBody = null;
      // verify the required parameter 'legalEntityId' is set
      if (legalEntityId === undefined || legalEntityId === null) {
        throw new Error("Missing the required parameter 'legalEntityId' when calling getAdministration");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAdministration");
      }

      let pathParams = {
        'legal_entity_id': legalEntityId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Administration;
      return this.apiClient.callApi(
        '/legal_entities/{legal_entity_id}/administrations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAdministration operation.
     * @callback module:api/AdministrationsApi~updateAdministrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Administration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Administration
     * Deprecated. Update an Administration
     * @param {Number} legalEntityId The id of the LegalEntity the Administration belongs to
     * @param {Number} id The id of the Administration to be updated
     * @param {module:model/AdministrationUpdate} administrationUpdate Administration to update
     * @param {module:api/AdministrationsApi~updateAdministrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Administration}
     */
    updateAdministration(legalEntityId, id, administrationUpdate, callback) {
      let postBody = administrationUpdate;
      // verify the required parameter 'legalEntityId' is set
      if (legalEntityId === undefined || legalEntityId === null) {
        throw new Error("Missing the required parameter 'legalEntityId' when calling updateAdministration");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAdministration");
      }
      // verify the required parameter 'administrationUpdate' is set
      if (administrationUpdate === undefined || administrationUpdate === null) {
        throw new Error("Missing the required parameter 'administrationUpdate' when calling updateAdministration");
      }

      let pathParams = {
        'legal_entity_id': legalEntityId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Administration;
      return this.apiClient.callApi(
        '/legal_entities/{legal_entity_id}/administrations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
