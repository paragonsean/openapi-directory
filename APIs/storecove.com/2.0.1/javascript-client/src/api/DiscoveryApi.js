/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CountrySpecifications from '../model/CountrySpecifications';
import DiscoverableParticipant from '../model/DiscoverableParticipant';
import DiscoveredParticipant from '../model/DiscoveredParticipant';
import ErrorModel from '../model/ErrorModel';

/**
* Discovery service.
* @module api/DiscoveryApi
* @version 2.0.1
*/
export default class DiscoveryApi {

    /**
    * Constructs a new DiscoveryApi. 
    * @alias module:api/DiscoveryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the discoveryExists operation.
     * @callback module:api/DiscoveryApi~discoveryExistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiscoveredParticipant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discover Network Participant Existence
     * Discover if a network participant exists.
     * @param {module:model/DiscoverableParticipant} discoverableParticipant The participant to check
     * @param {module:api/DiscoveryApi~discoveryExistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiscoveredParticipant}
     */
    discoveryExists(discoverableParticipant, callback) {
      let postBody = discoverableParticipant;
      // verify the required parameter 'discoverableParticipant' is set
      if (discoverableParticipant === undefined || discoverableParticipant === null) {
        throw new Error("Missing the required parameter 'discoverableParticipant' when calling discoveryExists");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DiscoveredParticipant;
      return this.apiClient.callApi(
        '/discovery/exists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the discoveryIdentifiers operation.
     * @callback module:api/DiscoveryApi~discoveryIdentifiersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountrySpecifications} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discover Country Identifiers ** EXPERIMENTAL
     * Discover the identifiers used in each country, for routing, for legal identification as well as for tax identification purposes. We are currently testing this endpoint with selected Customers. If you would like to participate, please contact us.
     * @param {module:api/DiscoveryApi~discoveryIdentifiersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountrySpecifications}
     */
    discoveryIdentifiers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountrySpecifications;
      return this.apiClient.callApi(
        '/discovery/identifiers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the discoveryReceives operation.
     * @callback module:api/DiscoveryApi~discoveryReceivesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiscoveredParticipant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disover Network Participant
     * Discover a network participant and capabilities.
     * @param {module:model/DiscoverableParticipant} discoverableParticipant The participant to check
     * @param {module:api/DiscoveryApi~discoveryReceivesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiscoveredParticipant}
     */
    discoveryReceives(discoverableParticipant, callback) {
      let postBody = discoverableParticipant;
      // verify the required parameter 'discoverableParticipant' is set
      if (discoverableParticipant === undefined || discoverableParticipant === null) {
        throw new Error("Missing the required parameter 'discoverableParticipant' when calling discoveryReceives");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DiscoveredParticipant;
      return this.apiClient.callApi(
        '/discovery/receives', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
