/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StorecoveApi);
  }
}(this, function(expect, StorecoveApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StorecoveApi.PurchaseInvoice();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PurchaseInvoice', function() {
    it('should create an instance of PurchaseInvoice', function() {
      // uncomment below and update the code to test PurchaseInvoice
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be.a(StorecoveApi.PurchaseInvoice);
    });

    it('should have the property accounting (base name: "accounting")', function() {
      // uncomment below and update the code to test the property accounting
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property accountingCost (base name: "accounting_cost")', function() {
      // uncomment below and update the code to test the property accountingCost
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property allowanceCharge (base name: "allowance_charge")', function() {
      // uncomment below and update the code to test the property allowanceCharge
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property allowanceCharges (base name: "allowance_charges")', function() {
      // uncomment below and update the code to test the property allowanceCharges
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property amountIncludingVat (base name: "amount_including_vat")', function() {
      // uncomment below and update the code to test the property amountIncludingVat
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property attachments (base name: "attachments")', function() {
      // uncomment below and update the code to test the property attachments
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property billingReference (base name: "billing_reference")', function() {
      // uncomment below and update the code to test the property billingReference
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property buyerReference (base name: "buyer_reference")', function() {
      // uncomment below and update the code to test the property buyerReference
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property contractDocumentReference (base name: "contract_document_reference")', function() {
      // uncomment below and update the code to test the property contractDocumentReference
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property delivery (base name: "delivery")', function() {
      // uncomment below and update the code to test the property delivery
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property document (base name: "document")', function() {
      // uncomment below and update the code to test the property document
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property documentCurrencyCode (base name: "document_currency_code")', function() {
      // uncomment below and update the code to test the property documentCurrencyCode
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property documentTotals (base name: "document_totals")', function() {
      // uncomment below and update the code to test the property documentTotals
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property documentType (base name: "document_type")', function() {
      // uncomment below and update the code to test the property documentType
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property dueDate (base name: "due_date")', function() {
      // uncomment below and update the code to test the property dueDate
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property externalKey (base name: "external_key")', function() {
      // uncomment below and update the code to test the property externalKey
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property externalUserId (base name: "external_user_id")', function() {
      // uncomment below and update the code to test the property externalUserId
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property guid (base name: "guid")', function() {
      // uncomment below and update the code to test the property guid
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property invoiceLines (base name: "invoice_lines")', function() {
      // uncomment below and update the code to test the property invoiceLines
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property invoiceNumber (base name: "invoice_number")', function() {
      // uncomment below and update the code to test the property invoiceNumber
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property invoiceType (base name: "invoice_type")', function() {
      // uncomment below and update the code to test the property invoiceType
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property issueDate (base name: "issue_date")', function() {
      // uncomment below and update the code to test the property issueDate
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property legalEntityId (base name: "legal_entity_id")', function() {
      // uncomment below and update the code to test the property legalEntityId
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property note (base name: "note")', function() {
      // uncomment below and update the code to test the property note
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property orderReference (base name: "order_reference")', function() {
      // uncomment below and update the code to test the property orderReference
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property paymentMeans (base name: "payment_means")', function() {
      // uncomment below and update the code to test the property paymentMeans
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property paymentMeansArray (base name: "payment_means_array")', function() {
      // uncomment below and update the code to test the property paymentMeansArray
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property paymentMeansPaymentId (base name: "payment_means_payment_id")', function() {
      // uncomment below and update the code to test the property paymentMeansPaymentId
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property paymentTermsNote (base name: "payment_terms_note")', function() {
      // uncomment below and update the code to test the property paymentTermsNote
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property periodEnd (base name: "period_end")', function() {
      // uncomment below and update the code to test the property periodEnd
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property periodStart (base name: "period_start")', function() {
      // uncomment below and update the code to test the property periodStart
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property projectReference (base name: "project_reference")', function() {
      // uncomment below and update the code to test the property projectReference
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property sender (base name: "sender")', function() {
      // uncomment below and update the code to test the property sender
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property subType (base name: "sub_type")', function() {
      // uncomment below and update the code to test the property subType
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property systemGeneratedPrimaryImage (base name: "system_generated_primary_image")', function() {
      // uncomment below and update the code to test the property systemGeneratedPrimaryImage
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property taxPointDate (base name: "tax_point_date")', function() {
      // uncomment below and update the code to test the property taxPointDate
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property taxSubtotals (base name: "tax_subtotals")', function() {
      // uncomment below and update the code to test the property taxSubtotals
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property taxSystem (base name: "tax_system")', function() {
      // uncomment below and update the code to test the property taxSystem
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

    it('should have the property vatReverseCharge (base name: "vat_reverse_charge")', function() {
      // uncomment below and update the code to test the property vatReverseCharge
      //var instance = new StorecoveApi.PurchaseInvoice();
      //expect(instance).to.be();
    });

  });

}));
