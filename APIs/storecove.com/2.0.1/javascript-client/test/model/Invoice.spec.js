/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StorecoveApi);
  }
}(this, function(expect, StorecoveApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StorecoveApi.Invoice();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Invoice', function() {
    it('should create an instance of Invoice', function() {
      // uncomment below and update the code to test Invoice
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be.a(StorecoveApi.Invoice);
    });

    it('should have the property accountingCost (base name: "accountingCost")', function() {
      // uncomment below and update the code to test the property accountingCost
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property accountingCurrencyTaxAmount (base name: "accountingCurrencyTaxAmount")', function() {
      // uncomment below and update the code to test the property accountingCurrencyTaxAmount
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property accountingCurrencyTaxAmountCurrency (base name: "accountingCurrencyTaxAmountCurrency")', function() {
      // uncomment below and update the code to test the property accountingCurrencyTaxAmountCurrency
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property accountingCustomerParty (base name: "accountingCustomerParty")', function() {
      // uncomment below and update the code to test the property accountingCustomerParty
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property accountingSupplierParty (base name: "accountingSupplierParty")', function() {
      // uncomment below and update the code to test the property accountingSupplierParty
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property allowanceCharges (base name: "allowanceCharges")', function() {
      // uncomment below and update the code to test the property allowanceCharges
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property amountIncludingVat (base name: "amountIncludingVat")', function() {
      // uncomment below and update the code to test the property amountIncludingVat
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property attachments (base name: "attachments")', function() {
      // uncomment below and update the code to test the property attachments
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property billingReference (base name: "billingReference")', function() {
      // uncomment below and update the code to test the property billingReference
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property buyerReference (base name: "buyerReference")', function() {
      // uncomment below and update the code to test the property buyerReference
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property consumerTaxMode (base name: "consumerTaxMode")', function() {
      // uncomment below and update the code to test the property consumerTaxMode
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property contractDocumentReference (base name: "contractDocumentReference")', function() {
      // uncomment below and update the code to test the property contractDocumentReference
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property delivery (base name: "delivery")', function() {
      // uncomment below and update the code to test the property delivery
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property documentCurrencyCode (base name: "documentCurrencyCode")', function() {
      // uncomment below and update the code to test the property documentCurrencyCode
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property dueDate (base name: "dueDate")', function() {
      // uncomment below and update the code to test the property dueDate
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property invoiceLines (base name: "invoiceLines")', function() {
      // uncomment below and update the code to test the property invoiceLines
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property invoiceNumber (base name: "invoiceNumber")', function() {
      // uncomment below and update the code to test the property invoiceNumber
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property invoicePeriod (base name: "invoicePeriod")', function() {
      // uncomment below and update the code to test the property invoicePeriod
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property invoiceType (base name: "invoiceType")', function() {
      // uncomment below and update the code to test the property invoiceType
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property issueDate (base name: "issueDate")', function() {
      // uncomment below and update the code to test the property issueDate
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property issueReasons (base name: "issueReasons")', function() {
      // uncomment below and update the code to test the property issueReasons
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property note (base name: "note")', function() {
      // uncomment below and update the code to test the property note
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property orderReference (base name: "orderReference")', function() {
      // uncomment below and update the code to test the property orderReference
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property paymentMeansArray (base name: "paymentMeansArray")', function() {
      // uncomment below and update the code to test the property paymentMeansArray
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property paymentMeansBic (base name: "paymentMeansBic")', function() {
      // uncomment below and update the code to test the property paymentMeansBic
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property paymentMeansCode (base name: "paymentMeansCode")', function() {
      // uncomment below and update the code to test the property paymentMeansCode
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property paymentMeansIban (base name: "paymentMeansIban")', function() {
      // uncomment below and update the code to test the property paymentMeansIban
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property paymentMeansPaymentId (base name: "paymentMeansPaymentId")', function() {
      // uncomment below and update the code to test the property paymentMeansPaymentId
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property paymentTerms (base name: "paymentTerms")', function() {
      // uncomment below and update the code to test the property paymentTerms
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property preferredInvoiceType (base name: "preferredInvoiceType")', function() {
      // uncomment below and update the code to test the property preferredInvoiceType
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property prepaidAmount (base name: "prepaidAmount")', function() {
      // uncomment below and update the code to test the property prepaidAmount
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property priceMode (base name: "priceMode")', function() {
      // uncomment below and update the code to test the property priceMode
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property projectReference (base name: "projectReference")', function() {
      // uncomment below and update the code to test the property projectReference
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property references (base name: "references")', function() {
      // uncomment below and update the code to test the property references
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property salesOrderId (base name: "salesOrderId")', function() {
      // uncomment below and update the code to test the property salesOrderId
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property selfBillingMode (base name: "selfBillingMode")', function() {
      // uncomment below and update the code to test the property selfBillingMode
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property taxExemptReason (base name: "taxExemptReason")', function() {
      // uncomment below and update the code to test the property taxExemptReason
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property taxPointDate (base name: "taxPointDate")', function() {
      // uncomment below and update the code to test the property taxPointDate
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property taxSubtotals (base name: "taxSubtotals")', function() {
      // uncomment below and update the code to test the property taxSubtotals
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property taxSystem (base name: "taxSystem")', function() {
      // uncomment below and update the code to test the property taxSystem
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property taxesDutiesFees (base name: "taxesDutiesFees")', function() {
      // uncomment below and update the code to test the property taxesDutiesFees
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property transactionType (base name: "transactionType")', function() {
      // uncomment below and update the code to test the property transactionType
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property ublExtensions (base name: "ublExtensions")', function() {
      // uncomment below and update the code to test the property ublExtensions
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property vatReverseCharge (base name: "vatReverseCharge")', function() {
      // uncomment below and update the code to test the property vatReverseCharge
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

    it('should have the property x2y (base name: "x2y")', function() {
      // uncomment below and update the code to test the property x2y
      //var instance = new StorecoveApi.Invoice();
      //expect(instance).to.be();
    });

  });

}));
