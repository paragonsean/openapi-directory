/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentOrder::OAIDocumentOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentOrder::OAIDocumentOrder() {
    this->initializeModel();
}

OAIDocumentOrder::~OAIDocumentOrder() {}

void OAIDocumentOrder::initializeModel() {

    m_accounting_cost_isSet = false;
    m_accounting_cost_isValid = false;

    m_allowance_charges_isSet = false;
    m_allowance_charges_isValid = false;

    m_amount_including_tax_isSet = false;
    m_amount_including_tax_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_delivery_isSet = false;
    m_delivery_isValid = false;

    m_delivery_terms_isSet = false;
    m_delivery_terms_isValid = false;

    m_document_currency_code_isSet = false;
    m_document_currency_code_isValid = false;

    m_document_number_isSet = false;
    m_document_number_isValid = false;

    m_issue_date_isSet = false;
    m_issue_date_isValid = false;

    m_issue_time_isSet = false;
    m_issue_time_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_lines_isSet = false;
    m_order_lines_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;

    m_payment_terms_isSet = false;
    m_payment_terms_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_seller_supplier_party_isSet = false;
    m_seller_supplier_party_isValid = false;

    m_tax_system_isSet = false;
    m_tax_system_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_validity_period_isSet = false;
    m_validity_period_isValid = false;
}

void OAIDocumentOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentOrder::fromJsonObject(QJsonObject json) {

    m_accounting_cost_isValid = ::OpenAPI::fromJsonValue(m_accounting_cost, json[QString("accountingCost")]);
    m_accounting_cost_isSet = !json[QString("accountingCost")].isNull() && m_accounting_cost_isValid;

    m_allowance_charges_isValid = ::OpenAPI::fromJsonValue(m_allowance_charges, json[QString("allowanceCharges")]);
    m_allowance_charges_isSet = !json[QString("allowanceCharges")].isNull() && m_allowance_charges_isValid;

    m_amount_including_tax_isValid = ::OpenAPI::fromJsonValue(m_amount_including_tax, json[QString("amountIncludingTax")]);
    m_amount_including_tax_isSet = !json[QString("amountIncludingTax")].isNull() && m_amount_including_tax_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_delivery_isValid = ::OpenAPI::fromJsonValue(m_delivery, json[QString("delivery")]);
    m_delivery_isSet = !json[QString("delivery")].isNull() && m_delivery_isValid;

    m_delivery_terms_isValid = ::OpenAPI::fromJsonValue(m_delivery_terms, json[QString("deliveryTerms")]);
    m_delivery_terms_isSet = !json[QString("deliveryTerms")].isNull() && m_delivery_terms_isValid;

    m_document_currency_code_isValid = ::OpenAPI::fromJsonValue(m_document_currency_code, json[QString("documentCurrencyCode")]);
    m_document_currency_code_isSet = !json[QString("documentCurrencyCode")].isNull() && m_document_currency_code_isValid;

    m_document_number_isValid = ::OpenAPI::fromJsonValue(m_document_number, json[QString("documentNumber")]);
    m_document_number_isSet = !json[QString("documentNumber")].isNull() && m_document_number_isValid;

    m_issue_date_isValid = ::OpenAPI::fromJsonValue(m_issue_date, json[QString("issueDate")]);
    m_issue_date_isSet = !json[QString("issueDate")].isNull() && m_issue_date_isValid;

    m_issue_time_isValid = ::OpenAPI::fromJsonValue(m_issue_time, json[QString("issueTime")]);
    m_issue_time_isSet = !json[QString("issueTime")].isNull() && m_issue_time_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_lines_isValid = ::OpenAPI::fromJsonValue(m_order_lines, json[QString("orderLines")]);
    m_order_lines_isSet = !json[QString("orderLines")].isNull() && m_order_lines_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("orderType")]);
    m_order_type_isSet = !json[QString("orderType")].isNull() && m_order_type_isValid;

    m_payment_terms_isValid = ::OpenAPI::fromJsonValue(m_payment_terms, json[QString("paymentTerms")]);
    m_payment_terms_isSet = !json[QString("paymentTerms")].isNull() && m_payment_terms_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;

    m_seller_supplier_party_isValid = ::OpenAPI::fromJsonValue(m_seller_supplier_party, json[QString("sellerSupplierParty")]);
    m_seller_supplier_party_isSet = !json[QString("sellerSupplierParty")].isNull() && m_seller_supplier_party_isValid;

    m_tax_system_isValid = ::OpenAPI::fromJsonValue(m_tax_system, json[QString("taxSystem")]);
    m_tax_system_isSet = !json[QString("taxSystem")].isNull() && m_tax_system_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_validity_period_isValid = ::OpenAPI::fromJsonValue(m_validity_period, json[QString("validityPeriod")]);
    m_validity_period_isSet = !json[QString("validityPeriod")].isNull() && m_validity_period_isValid;
}

QString OAIDocumentOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_accounting_cost_isSet) {
        obj.insert(QString("accountingCost"), ::OpenAPI::toJsonValue(m_accounting_cost));
    }
    if (m_allowance_charges.size() > 0) {
        obj.insert(QString("allowanceCharges"), ::OpenAPI::toJsonValue(m_allowance_charges));
    }
    if (m_amount_including_tax_isSet) {
        obj.insert(QString("amountIncludingTax"), ::OpenAPI::toJsonValue(m_amount_including_tax));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_delivery.isSet()) {
        obj.insert(QString("delivery"), ::OpenAPI::toJsonValue(m_delivery));
    }
    if (m_delivery_terms.isSet()) {
        obj.insert(QString("deliveryTerms"), ::OpenAPI::toJsonValue(m_delivery_terms));
    }
    if (m_document_currency_code.isSet()) {
        obj.insert(QString("documentCurrencyCode"), ::OpenAPI::toJsonValue(m_document_currency_code));
    }
    if (m_document_number_isSet) {
        obj.insert(QString("documentNumber"), ::OpenAPI::toJsonValue(m_document_number));
    }
    if (m_issue_date_isSet) {
        obj.insert(QString("issueDate"), ::OpenAPI::toJsonValue(m_issue_date));
    }
    if (m_issue_time_isSet) {
        obj.insert(QString("issueTime"), ::OpenAPI::toJsonValue(m_issue_time));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_lines.size() > 0) {
        obj.insert(QString("orderLines"), ::OpenAPI::toJsonValue(m_order_lines));
    }
    if (m_order_type_isSet) {
        obj.insert(QString("orderType"), ::OpenAPI::toJsonValue(m_order_type));
    }
    if (m_payment_terms.isSet()) {
        obj.insert(QString("paymentTerms"), ::OpenAPI::toJsonValue(m_payment_terms));
    }
    if (m_references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_seller_supplier_party.isSet()) {
        obj.insert(QString("sellerSupplierParty"), ::OpenAPI::toJsonValue(m_seller_supplier_party));
    }
    if (m_tax_system_isSet) {
        obj.insert(QString("taxSystem"), ::OpenAPI::toJsonValue(m_tax_system));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_validity_period_isSet) {
        obj.insert(QString("validityPeriod"), ::OpenAPI::toJsonValue(m_validity_period));
    }
    return obj;
}

QString OAIDocumentOrder::getAccountingCost() const {
    return m_accounting_cost;
}
void OAIDocumentOrder::setAccountingCost(const QString &accounting_cost) {
    m_accounting_cost = accounting_cost;
    m_accounting_cost_isSet = true;
}

bool OAIDocumentOrder::is_accounting_cost_Set() const{
    return m_accounting_cost_isSet;
}

bool OAIDocumentOrder::is_accounting_cost_Valid() const{
    return m_accounting_cost_isValid;
}

QList<OAIAllowanceCharge> OAIDocumentOrder::getAllowanceCharges() const {
    return m_allowance_charges;
}
void OAIDocumentOrder::setAllowanceCharges(const QList<OAIAllowanceCharge> &allowance_charges) {
    m_allowance_charges = allowance_charges;
    m_allowance_charges_isSet = true;
}

bool OAIDocumentOrder::is_allowance_charges_Set() const{
    return m_allowance_charges_isSet;
}

bool OAIDocumentOrder::is_allowance_charges_Valid() const{
    return m_allowance_charges_isValid;
}

double OAIDocumentOrder::getAmountIncludingTax() const {
    return m_amount_including_tax;
}
void OAIDocumentOrder::setAmountIncludingTax(const double &amount_including_tax) {
    m_amount_including_tax = amount_including_tax;
    m_amount_including_tax_isSet = true;
}

bool OAIDocumentOrder::is_amount_including_tax_Set() const{
    return m_amount_including_tax_isSet;
}

bool OAIDocumentOrder::is_amount_including_tax_Valid() const{
    return m_amount_including_tax_isValid;
}

QList<OAIAttachment> OAIDocumentOrder::getAttachments() const {
    return m_attachments;
}
void OAIDocumentOrder::setAttachments(const QList<OAIAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIDocumentOrder::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIDocumentOrder::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAIDelivery OAIDocumentOrder::getDelivery() const {
    return m_delivery;
}
void OAIDocumentOrder::setDelivery(const OAIDelivery &delivery) {
    m_delivery = delivery;
    m_delivery_isSet = true;
}

bool OAIDocumentOrder::is_delivery_Set() const{
    return m_delivery_isSet;
}

bool OAIDocumentOrder::is_delivery_Valid() const{
    return m_delivery_isValid;
}

OAIDeliveryTerms OAIDocumentOrder::getDeliveryTerms() const {
    return m_delivery_terms;
}
void OAIDocumentOrder::setDeliveryTerms(const OAIDeliveryTerms &delivery_terms) {
    m_delivery_terms = delivery_terms;
    m_delivery_terms_isSet = true;
}

bool OAIDocumentOrder::is_delivery_terms_Set() const{
    return m_delivery_terms_isSet;
}

bool OAIDocumentOrder::is_delivery_terms_Valid() const{
    return m_delivery_terms_isValid;
}

OAICurrencyCode OAIDocumentOrder::getDocumentCurrencyCode() const {
    return m_document_currency_code;
}
void OAIDocumentOrder::setDocumentCurrencyCode(const OAICurrencyCode &document_currency_code) {
    m_document_currency_code = document_currency_code;
    m_document_currency_code_isSet = true;
}

bool OAIDocumentOrder::is_document_currency_code_Set() const{
    return m_document_currency_code_isSet;
}

bool OAIDocumentOrder::is_document_currency_code_Valid() const{
    return m_document_currency_code_isValid;
}

QString OAIDocumentOrder::getDocumentNumber() const {
    return m_document_number;
}
void OAIDocumentOrder::setDocumentNumber(const QString &document_number) {
    m_document_number = document_number;
    m_document_number_isSet = true;
}

bool OAIDocumentOrder::is_document_number_Set() const{
    return m_document_number_isSet;
}

bool OAIDocumentOrder::is_document_number_Valid() const{
    return m_document_number_isValid;
}

QString OAIDocumentOrder::getIssueDate() const {
    return m_issue_date;
}
void OAIDocumentOrder::setIssueDate(const QString &issue_date) {
    m_issue_date = issue_date;
    m_issue_date_isSet = true;
}

bool OAIDocumentOrder::is_issue_date_Set() const{
    return m_issue_date_isSet;
}

bool OAIDocumentOrder::is_issue_date_Valid() const{
    return m_issue_date_isValid;
}

QString OAIDocumentOrder::getIssueTime() const {
    return m_issue_time;
}
void OAIDocumentOrder::setIssueTime(const QString &issue_time) {
    m_issue_time = issue_time;
    m_issue_time_isSet = true;
}

bool OAIDocumentOrder::is_issue_time_Set() const{
    return m_issue_time_isSet;
}

bool OAIDocumentOrder::is_issue_time_Valid() const{
    return m_issue_time_isValid;
}

QString OAIDocumentOrder::getNote() const {
    return m_note;
}
void OAIDocumentOrder::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIDocumentOrder::is_note_Set() const{
    return m_note_isSet;
}

bool OAIDocumentOrder::is_note_Valid() const{
    return m_note_isValid;
}

QList<OAIOrderLine> OAIDocumentOrder::getOrderLines() const {
    return m_order_lines;
}
void OAIDocumentOrder::setOrderLines(const QList<OAIOrderLine> &order_lines) {
    m_order_lines = order_lines;
    m_order_lines_isSet = true;
}

bool OAIDocumentOrder::is_order_lines_Set() const{
    return m_order_lines_isSet;
}

bool OAIDocumentOrder::is_order_lines_Valid() const{
    return m_order_lines_isValid;
}

QString OAIDocumentOrder::getOrderType() const {
    return m_order_type;
}
void OAIDocumentOrder::setOrderType(const QString &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAIDocumentOrder::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAIDocumentOrder::is_order_type_Valid() const{
    return m_order_type_isValid;
}

OAIPaymentTerms OAIDocumentOrder::getPaymentTerms() const {
    return m_payment_terms;
}
void OAIDocumentOrder::setPaymentTerms(const OAIPaymentTerms &payment_terms) {
    m_payment_terms = payment_terms;
    m_payment_terms_isSet = true;
}

bool OAIDocumentOrder::is_payment_terms_Set() const{
    return m_payment_terms_isSet;
}

bool OAIDocumentOrder::is_payment_terms_Valid() const{
    return m_payment_terms_isValid;
}

QList<OAIReference> OAIDocumentOrder::getReferences() const {
    return m_references;
}
void OAIDocumentOrder::setReferences(const QList<OAIReference> &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAIDocumentOrder::is_references_Set() const{
    return m_references_isSet;
}

bool OAIDocumentOrder::is_references_Valid() const{
    return m_references_isValid;
}

OAISellerSupplierParty OAIDocumentOrder::getSellerSupplierParty() const {
    return m_seller_supplier_party;
}
void OAIDocumentOrder::setSellerSupplierParty(const OAISellerSupplierParty &seller_supplier_party) {
    m_seller_supplier_party = seller_supplier_party;
    m_seller_supplier_party_isSet = true;
}

bool OAIDocumentOrder::is_seller_supplier_party_Set() const{
    return m_seller_supplier_party_isSet;
}

bool OAIDocumentOrder::is_seller_supplier_party_Valid() const{
    return m_seller_supplier_party_isValid;
}

QString OAIDocumentOrder::getTaxSystem() const {
    return m_tax_system;
}
void OAIDocumentOrder::setTaxSystem(const QString &tax_system) {
    m_tax_system = tax_system;
    m_tax_system_isSet = true;
}

bool OAIDocumentOrder::is_tax_system_Set() const{
    return m_tax_system_isSet;
}

bool OAIDocumentOrder::is_tax_system_Valid() const{
    return m_tax_system_isValid;
}

QString OAIDocumentOrder::getTimeZone() const {
    return m_time_zone;
}
void OAIDocumentOrder::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIDocumentOrder::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIDocumentOrder::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIDocumentOrder::getValidityPeriod() const {
    return m_validity_period;
}
void OAIDocumentOrder::setValidityPeriod(const QString &validity_period) {
    m_validity_period = validity_period;
    m_validity_period_isSet = true;
}

bool OAIDocumentOrder::is_validity_period_Set() const{
    return m_validity_period_isSet;
}

bool OAIDocumentOrder::is_validity_period_Valid() const{
    return m_validity_period_isValid;
}

bool OAIDocumentOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounting_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowance_charges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_including_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_currency_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_supplier_party.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_including_tax_isValid && m_document_number_isValid && m_issue_date_isValid && m_order_lines_isValid && m_seller_supplier_party_isValid && true;
}

} // namespace OpenAPI
