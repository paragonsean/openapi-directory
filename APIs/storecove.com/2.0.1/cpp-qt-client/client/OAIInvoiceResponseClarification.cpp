/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoiceResponseClarification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoiceResponseClarification::OAIInvoiceResponseClarification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoiceResponseClarification::OAIInvoiceResponseClarification() {
    this->initializeModel();
}

OAIInvoiceResponseClarification::~OAIInvoiceResponseClarification() {}

void OAIInvoiceResponseClarification::initializeModel() {

    m_clarification_isSet = false;
    m_clarification_isValid = false;

    m_clarification_code_isSet = false;
    m_clarification_code_isValid = false;

    m_clarification_code_type_isSet = false;
    m_clarification_code_type_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;
}

void OAIInvoiceResponseClarification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoiceResponseClarification::fromJsonObject(QJsonObject json) {

    m_clarification_isValid = ::OpenAPI::fromJsonValue(m_clarification, json[QString("clarification")]);
    m_clarification_isSet = !json[QString("clarification")].isNull() && m_clarification_isValid;

    m_clarification_code_isValid = ::OpenAPI::fromJsonValue(m_clarification_code, json[QString("clarificationCode")]);
    m_clarification_code_isSet = !json[QString("clarificationCode")].isNull() && m_clarification_code_isValid;

    m_clarification_code_type_isValid = ::OpenAPI::fromJsonValue(m_clarification_code_type, json[QString("clarificationCodeType")]);
    m_clarification_code_type_isSet = !json[QString("clarificationCodeType")].isNull() && m_clarification_code_type_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;
}

QString OAIInvoiceResponseClarification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoiceResponseClarification::asJsonObject() const {
    QJsonObject obj;
    if (m_clarification_isSet) {
        obj.insert(QString("clarification"), ::OpenAPI::toJsonValue(m_clarification));
    }
    if (m_clarification_code_isSet) {
        obj.insert(QString("clarificationCode"), ::OpenAPI::toJsonValue(m_clarification_code));
    }
    if (m_clarification_code_type_isSet) {
        obj.insert(QString("clarificationCodeType"), ::OpenAPI::toJsonValue(m_clarification_code_type));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    return obj;
}

QString OAIInvoiceResponseClarification::getClarification() const {
    return m_clarification;
}
void OAIInvoiceResponseClarification::setClarification(const QString &clarification) {
    m_clarification = clarification;
    m_clarification_isSet = true;
}

bool OAIInvoiceResponseClarification::is_clarification_Set() const{
    return m_clarification_isSet;
}

bool OAIInvoiceResponseClarification::is_clarification_Valid() const{
    return m_clarification_isValid;
}

QString OAIInvoiceResponseClarification::getClarificationCode() const {
    return m_clarification_code;
}
void OAIInvoiceResponseClarification::setClarificationCode(const QString &clarification_code) {
    m_clarification_code = clarification_code;
    m_clarification_code_isSet = true;
}

bool OAIInvoiceResponseClarification::is_clarification_code_Set() const{
    return m_clarification_code_isSet;
}

bool OAIInvoiceResponseClarification::is_clarification_code_Valid() const{
    return m_clarification_code_isValid;
}

QString OAIInvoiceResponseClarification::getClarificationCodeType() const {
    return m_clarification_code_type;
}
void OAIInvoiceResponseClarification::setClarificationCodeType(const QString &clarification_code_type) {
    m_clarification_code_type = clarification_code_type;
    m_clarification_code_type_isSet = true;
}

bool OAIInvoiceResponseClarification::is_clarification_code_type_Set() const{
    return m_clarification_code_type_isSet;
}

bool OAIInvoiceResponseClarification::is_clarification_code_type_Valid() const{
    return m_clarification_code_type_isValid;
}

QList<OAIInvoiceResponseCondition> OAIInvoiceResponseClarification::getConditions() const {
    return m_conditions;
}
void OAIInvoiceResponseClarification::setConditions(const QList<OAIInvoiceResponseCondition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIInvoiceResponseClarification::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIInvoiceResponseClarification::is_conditions_Valid() const{
    return m_conditions_isValid;
}

bool OAIInvoiceResponseClarification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clarification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clarification_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clarification_code_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoiceResponseClarification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
