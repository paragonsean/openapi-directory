/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILegalEntitiesApi_H
#define OAI_OAILegalEntitiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAILegalEntity.h"
#include "OAILegalEntityCreate.h"
#include "OAILegalEntityUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILegalEntitiesApi : public QObject {
    Q_OBJECT

public:
    OAILegalEntitiesApi(const int timeOut = 0);
    ~OAILegalEntitiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_legal_entity_create OAILegalEntityCreate [required]
    */
    virtual void createLegalEntity(const OAILegalEntityCreate &oai_legal_entity_create);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteLegalEntity(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getLegalEntity(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_legal_entity_update OAILegalEntityUpdate [required]
    */
    virtual void updateLegalEntity(const qint64 &id, const OAILegalEntityUpdate &oai_legal_entity_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createLegalEntityCallback(OAIHttpRequestWorker *worker);
    void deleteLegalEntityCallback(OAIHttpRequestWorker *worker);
    void getLegalEntityCallback(OAIHttpRequestWorker *worker);
    void updateLegalEntityCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createLegalEntitySignal(OAILegalEntity summary);
    void deleteLegalEntitySignal();
    void getLegalEntitySignal(OAILegalEntity summary);
    void updateLegalEntitySignal(OAILegalEntity summary);


    void createLegalEntitySignalFull(OAIHttpRequestWorker *worker, OAILegalEntity summary);
    void deleteLegalEntitySignalFull(OAIHttpRequestWorker *worker);
    void getLegalEntitySignalFull(OAIHttpRequestWorker *worker, OAILegalEntity summary);
    void updateLegalEntitySignalFull(OAIHttpRequestWorker *worker, OAILegalEntity summary);

    Q_DECL_DEPRECATED_X("Use createLegalEntitySignalError() instead")
    void createLegalEntitySignalE(OAILegalEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLegalEntitySignalError(OAILegalEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLegalEntitySignalError() instead")
    void deleteLegalEntitySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLegalEntitySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLegalEntitySignalError() instead")
    void getLegalEntitySignalE(OAILegalEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLegalEntitySignalError(OAILegalEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLegalEntitySignalError() instead")
    void updateLegalEntitySignalE(OAILegalEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLegalEntitySignalError(OAILegalEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createLegalEntitySignalErrorFull() instead")
    void createLegalEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLegalEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLegalEntitySignalErrorFull() instead")
    void deleteLegalEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLegalEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLegalEntitySignalErrorFull() instead")
    void getLegalEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLegalEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLegalEntitySignalErrorFull() instead")
    void updateLegalEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLegalEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
