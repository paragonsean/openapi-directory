/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseInvoiceInvoiceLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseInvoiceInvoiceLine::OAIPurchaseInvoiceInvoiceLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseInvoiceInvoiceLine::OAIPurchaseInvoiceInvoiceLine() {
    this->initializeModel();
}

OAIPurchaseInvoiceInvoiceLine::~OAIPurchaseInvoiceInvoiceLine() {}

void OAIPurchaseInvoiceInvoiceLine::initializeModel() {

    m_accounting_isSet = false;
    m_accounting_isValid = false;

    m_allowance_charge_isSet = false;
    m_allowance_charge_isValid = false;

    m_allowance_charge_array_isSet = false;
    m_allowance_charge_array_isValid = false;

    m_allowance_charges_isSet = false;
    m_allowance_charges_isValid = false;

    m_amount_excluding_tax_isSet = false;
    m_amount_excluding_tax_isValid = false;

    m_amount_excluding_vat_isSet = false;
    m_amount_excluding_vat_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_period_end_isSet = false;
    m_period_end_isValid = false;

    m_period_start_isSet = false;
    m_period_start_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;

    m_vat_isSet = false;
    m_vat_isValid = false;
}

void OAIPurchaseInvoiceInvoiceLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseInvoiceInvoiceLine::fromJsonObject(QJsonObject json) {

    m_accounting_isValid = ::OpenAPI::fromJsonValue(m_accounting, json[QString("accounting")]);
    m_accounting_isSet = !json[QString("accounting")].isNull() && m_accounting_isValid;

    m_allowance_charge_isValid = ::OpenAPI::fromJsonValue(m_allowance_charge, json[QString("allowance_charge")]);
    m_allowance_charge_isSet = !json[QString("allowance_charge")].isNull() && m_allowance_charge_isValid;

    m_allowance_charge_array_isValid = ::OpenAPI::fromJsonValue(m_allowance_charge_array, json[QString("allowance_charge_array")]);
    m_allowance_charge_array_isSet = !json[QString("allowance_charge_array")].isNull() && m_allowance_charge_array_isValid;

    m_allowance_charges_isValid = ::OpenAPI::fromJsonValue(m_allowance_charges, json[QString("allowance_charges")]);
    m_allowance_charges_isSet = !json[QString("allowance_charges")].isNull() && m_allowance_charges_isValid;

    m_amount_excluding_tax_isValid = ::OpenAPI::fromJsonValue(m_amount_excluding_tax, json[QString("amount_excluding_tax")]);
    m_amount_excluding_tax_isSet = !json[QString("amount_excluding_tax")].isNull() && m_amount_excluding_tax_isValid;

    m_amount_excluding_vat_isValid = ::OpenAPI::fromJsonValue(m_amount_excluding_vat, json[QString("amount_excluding_vat")]);
    m_amount_excluding_vat_isSet = !json[QString("amount_excluding_vat")].isNull() && m_amount_excluding_vat_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_period_end_isValid = ::OpenAPI::fromJsonValue(m_period_end, json[QString("period_end")]);
    m_period_end_isSet = !json[QString("period_end")].isNull() && m_period_end_isValid;

    m_period_start_isValid = ::OpenAPI::fromJsonValue(m_period_start, json[QString("period_start")]);
    m_period_start_isSet = !json[QString("period_start")].isNull() && m_period_start_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;

    m_vat_isValid = ::OpenAPI::fromJsonValue(m_vat, json[QString("vat")]);
    m_vat_isSet = !json[QString("vat")].isNull() && m_vat_isValid;
}

QString OAIPurchaseInvoiceInvoiceLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseInvoiceInvoiceLine::asJsonObject() const {
    QJsonObject obj;
    if (m_accounting.isSet()) {
        obj.insert(QString("accounting"), ::OpenAPI::toJsonValue(m_accounting));
    }
    if (m_allowance_charge_isSet) {
        obj.insert(QString("allowance_charge"), ::OpenAPI::toJsonValue(m_allowance_charge));
    }
    if (m_allowance_charge_array.size() > 0) {
        obj.insert(QString("allowance_charge_array"), ::OpenAPI::toJsonValue(m_allowance_charge_array));
    }
    if (m_allowance_charges.size() > 0) {
        obj.insert(QString("allowance_charges"), ::OpenAPI::toJsonValue(m_allowance_charges));
    }
    if (m_amount_excluding_tax_isSet) {
        obj.insert(QString("amount_excluding_tax"), ::OpenAPI::toJsonValue(m_amount_excluding_tax));
    }
    if (m_amount_excluding_vat_isSet) {
        obj.insert(QString("amount_excluding_vat"), ::OpenAPI::toJsonValue(m_amount_excluding_vat));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_period_end_isSet) {
        obj.insert(QString("period_end"), ::OpenAPI::toJsonValue(m_period_end));
    }
    if (m_period_start_isSet) {
        obj.insert(QString("period_start"), ::OpenAPI::toJsonValue(m_period_start));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_tax.isSet()) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_units.isSet()) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    if (m_vat.isSet()) {
        obj.insert(QString("vat"), ::OpenAPI::toJsonValue(m_vat));
    }
    return obj;
}

OAIPurchaseInvoiceAccountingDetails OAIPurchaseInvoiceInvoiceLine::getAccounting() const {
    return m_accounting;
}
void OAIPurchaseInvoiceInvoiceLine::setAccounting(const OAIPurchaseInvoiceAccountingDetails &accounting) {
    m_accounting = accounting;
    m_accounting_isSet = true;
}

bool OAIPurchaseInvoiceInvoiceLine::is_accounting_Set() const{
    return m_accounting_isSet;
}

bool OAIPurchaseInvoiceInvoiceLine::is_accounting_Valid() const{
    return m_accounting_isValid;
}

double OAIPurchaseInvoiceInvoiceLine::getAllowanceCharge() const {
    return m_allowance_charge;
}
void OAIPurchaseInvoiceInvoiceLine::setAllowanceCharge(const double &allowance_charge) {
    m_allowance_charge = allowance_charge;
    m_allowance_charge_isSet = true;
}

bool OAIPurchaseInvoiceInvoiceLine::is_allowance_charge_Set() const{
    return m_allowance_charge_isSet;
}

bool OAIPurchaseInvoiceInvoiceLine::is_allowance_charge_Valid() const{
    return m_allowance_charge_isValid;
}

QList<OAIPurchaseInvoiceInvoiceLineAllowanceCharge> OAIPurchaseInvoiceInvoiceLine::getAllowanceChargeArray() const {
    return m_allowance_charge_array;
}
void OAIPurchaseInvoiceInvoiceLine::setAllowanceChargeArray(const QList<OAIPurchaseInvoiceInvoiceLineAllowanceCharge> &allowance_charge_array) {
    m_allowance_charge_array = allowance_charge_array;
    m_allowance_charge_array_isSet = true;
}

bool OAIPurchaseInvoiceInvoiceLine::is_allowance_charge_array_Set() const{
    return m_allowance_charge_array_isSet;
}

bool OAIPurchaseInvoiceInvoiceLine::is_allowance_charge_array_Valid() const{
    return m_allowance_charge_array_isValid;
}

QList<double> OAIPurchaseInvoiceInvoiceLine::getAllowanceCharges() const {
    return m_allowance_charges;
}
void OAIPurchaseInvoiceInvoiceLine::setAllowanceCharges(const QList<double> &allowance_charges) {
    m_allowance_charges = allowance_charges;
    m_allowance_charges_isSet = true;
}

bool OAIPurchaseInvoiceInvoiceLine::is_allowance_charges_Set() const{
    return m_allowance_charges_isSet;
}

bool OAIPurchaseInvoiceInvoiceLine::is_allowance_charges_Valid() const{
    return m_allowance_charges_isValid;
}

double OAIPurchaseInvoiceInvoiceLine::getAmountExcludingTax() const {
    return m_amount_excluding_tax;
}
void OAIPurchaseInvoiceInvoiceLine::setAmountExcludingTax(const double &amount_excluding_tax) {
    m_amount_excluding_tax = amount_excluding_tax;
    m_amount_excluding_tax_isSet = true;
}

bool OAIPurchaseInvoiceInvoiceLine::is_amount_excluding_tax_Set() const{
    return m_amount_excluding_tax_isSet;
}

bool OAIPurchaseInvoiceInvoiceLine::is_amount_excluding_tax_Valid() const{
    return m_amount_excluding_tax_isValid;
}

double OAIPurchaseInvoiceInvoiceLine::getAmountExcludingVat() const {
    return m_amount_excluding_vat;
}
void OAIPurchaseInvoiceInvoiceLine::setAmountExcludingVat(const double &amount_excluding_vat) {
    m_amount_excluding_vat = amount_excluding_vat;
    m_amount_excluding_vat_isSet = true;
}

bool OAIPurchaseInvoiceInvoiceLine::is_amount_excluding_vat_Set() const{
    return m_amount_excluding_vat_isSet;
}

bool OAIPurchaseInvoiceInvoiceLine::is_amount_excluding_vat_Valid() const{
    return m_amount_excluding_vat_isValid;
}

QString OAIPurchaseInvoiceInvoiceLine::getDescription() const {
    return m_description;
}
void OAIPurchaseInvoiceInvoiceLine::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPurchaseInvoiceInvoiceLine::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPurchaseInvoiceInvoiceLine::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPurchaseInvoiceInvoiceLine::getName() const {
    return m_name;
}
void OAIPurchaseInvoiceInvoiceLine::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPurchaseInvoiceInvoiceLine::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPurchaseInvoiceInvoiceLine::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPurchaseInvoiceInvoiceLine::getPeriodEnd() const {
    return m_period_end;
}
void OAIPurchaseInvoiceInvoiceLine::setPeriodEnd(const QString &period_end) {
    m_period_end = period_end;
    m_period_end_isSet = true;
}

bool OAIPurchaseInvoiceInvoiceLine::is_period_end_Set() const{
    return m_period_end_isSet;
}

bool OAIPurchaseInvoiceInvoiceLine::is_period_end_Valid() const{
    return m_period_end_isValid;
}

QString OAIPurchaseInvoiceInvoiceLine::getPeriodStart() const {
    return m_period_start;
}
void OAIPurchaseInvoiceInvoiceLine::setPeriodStart(const QString &period_start) {
    m_period_start = period_start;
    m_period_start_isSet = true;
}

bool OAIPurchaseInvoiceInvoiceLine::is_period_start_Set() const{
    return m_period_start_isSet;
}

bool OAIPurchaseInvoiceInvoiceLine::is_period_start_Valid() const{
    return m_period_start_isValid;
}

OAIPurchaseInvoiceInvoiceLinePrice OAIPurchaseInvoiceInvoiceLine::getPrice() const {
    return m_price;
}
void OAIPurchaseInvoiceInvoiceLine::setPrice(const OAIPurchaseInvoiceInvoiceLinePrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIPurchaseInvoiceInvoiceLine::is_price_Set() const{
    return m_price_isSet;
}

bool OAIPurchaseInvoiceInvoiceLine::is_price_Valid() const{
    return m_price_isValid;
}

OAIPurchaseInvoiceTax OAIPurchaseInvoiceInvoiceLine::getTax() const {
    return m_tax;
}
void OAIPurchaseInvoiceInvoiceLine::setTax(const OAIPurchaseInvoiceTax &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIPurchaseInvoiceInvoiceLine::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIPurchaseInvoiceInvoiceLine::is_tax_Valid() const{
    return m_tax_isValid;
}

OAIPurchaseInvoiceInvoiceLineItem OAIPurchaseInvoiceInvoiceLine::getUnits() const {
    return m_units;
}
void OAIPurchaseInvoiceInvoiceLine::setUnits(const OAIPurchaseInvoiceInvoiceLineItem &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIPurchaseInvoiceInvoiceLine::is_units_Set() const{
    return m_units_isSet;
}

bool OAIPurchaseInvoiceInvoiceLine::is_units_Valid() const{
    return m_units_isValid;
}

OAIVAT_Details OAIPurchaseInvoiceInvoiceLine::getVat() const {
    return m_vat;
}
void OAIPurchaseInvoiceInvoiceLine::setVat(const OAIVAT_Details &vat) {
    m_vat = vat;
    m_vat_isSet = true;
}

bool OAIPurchaseInvoiceInvoiceLine::is_vat_Set() const{
    return m_vat_isSet;
}

bool OAIPurchaseInvoiceInvoiceLine::is_vat_Valid() const{
    return m_vat_isValid;
}

bool OAIPurchaseInvoiceInvoiceLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowance_charge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowance_charge_array.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowance_charges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_excluding_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_excluding_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_units.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseInvoiceInvoiceLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
