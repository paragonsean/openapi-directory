/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountrySpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountrySpecification::OAICountrySpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountrySpecification::OAICountrySpecification() {
    this->initializeModel();
}

OAICountrySpecification::~OAICountrySpecification() {}

void OAICountrySpecification::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_receiver_isSet = false;
    m_receiver_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;
}

void OAICountrySpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountrySpecification::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_receiver_isValid = ::OpenAPI::fromJsonValue(m_receiver, json[QString("receiver")]);
    m_receiver_isSet = !json[QString("receiver")].isNull() && m_receiver_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("sender")]);
    m_sender_isSet = !json[QString("sender")].isNull() && m_sender_isValid;
}

QString OAICountrySpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountrySpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_receiver.isSet()) {
        obj.insert(QString("receiver"), ::OpenAPI::toJsonValue(m_receiver));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_sender.isSet()) {
        obj.insert(QString("sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    return obj;
}

OAICountry OAICountrySpecification::getCountry() const {
    return m_country;
}
void OAICountrySpecification::setCountry(const OAICountry &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICountrySpecification::is_country_Set() const{
    return m_country_isSet;
}

bool OAICountrySpecification::is_country_Valid() const{
    return m_country_isValid;
}

OAIReceiver OAICountrySpecification::getReceiver() const {
    return m_receiver;
}
void OAICountrySpecification::setReceiver(const OAIReceiver &receiver) {
    m_receiver = receiver;
    m_receiver_isSet = true;
}

bool OAICountrySpecification::is_receiver_Set() const{
    return m_receiver_isSet;
}

bool OAICountrySpecification::is_receiver_Valid() const{
    return m_receiver_isValid;
}

QString OAICountrySpecification::getRegion() const {
    return m_region;
}
void OAICountrySpecification::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAICountrySpecification::is_region_Set() const{
    return m_region_isSet;
}

bool OAICountrySpecification::is_region_Valid() const{
    return m_region_isValid;
}

OAISender OAICountrySpecification::getSender() const {
    return m_sender;
}
void OAICountrySpecification::setSender(const OAISender &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAICountrySpecification::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAICountrySpecification::is_sender_Valid() const{
    return m_sender_isValid;
}

bool OAICountrySpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountrySpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
