/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdministrationsApi_H
#define OAI_OAIAdministrationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdministration.h"
#include "OAIAdministrationCreate.h"
#include "OAIAdministrationUpdate.h"
#include "OAIErrorModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAdministrationsApi : public QObject {
    Q_OBJECT

public:
    OAIAdministrationsApi(const int timeOut = 0);
    ~OAIAdministrationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  legal_entity_id qint64 [required]
    * @param[in]  oai_administration_create OAIAdministrationCreate [required]
    */
    virtual void createAdministration(const qint64 &legal_entity_id, const OAIAdministrationCreate &oai_administration_create);

    /**
    * @param[in]  legal_entity_id qint64 [required]
    * @param[in]  id qint64 [required]
    */
    virtual void deleteAdministration(const qint64 &legal_entity_id, const qint64 &id);

    /**
    * @param[in]  legal_entity_id qint64 [required]
    * @param[in]  id qint64 [required]
    */
    virtual void getAdministration(const qint64 &legal_entity_id, const qint64 &id);

    /**
    * @param[in]  legal_entity_id qint64 [required]
    * @param[in]  id qint64 [required]
    * @param[in]  oai_administration_update OAIAdministrationUpdate [required]
    */
    virtual void updateAdministration(const qint64 &legal_entity_id, const qint64 &id, const OAIAdministrationUpdate &oai_administration_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAdministrationCallback(OAIHttpRequestWorker *worker);
    void deleteAdministrationCallback(OAIHttpRequestWorker *worker);
    void getAdministrationCallback(OAIHttpRequestWorker *worker);
    void updateAdministrationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAdministrationSignal(OAIAdministration summary);
    void deleteAdministrationSignal();
    void getAdministrationSignal(OAIAdministration summary);
    void updateAdministrationSignal(OAIAdministration summary);


    void createAdministrationSignalFull(OAIHttpRequestWorker *worker, OAIAdministration summary);
    void deleteAdministrationSignalFull(OAIHttpRequestWorker *worker);
    void getAdministrationSignalFull(OAIHttpRequestWorker *worker, OAIAdministration summary);
    void updateAdministrationSignalFull(OAIHttpRequestWorker *worker, OAIAdministration summary);

    Q_DECL_DEPRECATED_X("Use createAdministrationSignalError() instead")
    void createAdministrationSignalE(OAIAdministration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAdministrationSignalError(OAIAdministration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAdministrationSignalError() instead")
    void deleteAdministrationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAdministrationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdministrationSignalError() instead")
    void getAdministrationSignalE(OAIAdministration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdministrationSignalError(OAIAdministration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAdministrationSignalError() instead")
    void updateAdministrationSignalE(OAIAdministration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAdministrationSignalError(OAIAdministration summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAdministrationSignalErrorFull() instead")
    void createAdministrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAdministrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAdministrationSignalErrorFull() instead")
    void deleteAdministrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAdministrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdministrationSignalErrorFull() instead")
    void getAdministrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdministrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAdministrationSignalErrorFull() instead")
    void updateAdministrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAdministrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
