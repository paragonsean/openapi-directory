/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoice::OAIInvoice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoice::OAIInvoice() {
    this->initializeModel();
}

OAIInvoice::~OAIInvoice() {}

void OAIInvoice::initializeModel() {

    m_accounting_cost_isSet = false;
    m_accounting_cost_isValid = false;

    m_accounting_currency_tax_amount_isSet = false;
    m_accounting_currency_tax_amount_isValid = false;

    m_accounting_currency_tax_amount_currency_isSet = false;
    m_accounting_currency_tax_amount_currency_isValid = false;

    m_accounting_customer_party_isSet = false;
    m_accounting_customer_party_isValid = false;

    m_accounting_supplier_party_isSet = false;
    m_accounting_supplier_party_isValid = false;

    m_allowance_charges_isSet = false;
    m_allowance_charges_isValid = false;

    m_amount_including_vat_isSet = false;
    m_amount_including_vat_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_billing_reference_isSet = false;
    m_billing_reference_isValid = false;

    m_buyer_reference_isSet = false;
    m_buyer_reference_isValid = false;

    m_consumer_tax_mode_isSet = false;
    m_consumer_tax_mode_isValid = false;

    m_contract_document_reference_isSet = false;
    m_contract_document_reference_isValid = false;

    m_delivery_isSet = false;
    m_delivery_isValid = false;

    m_document_currency_code_isSet = false;
    m_document_currency_code_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_invoice_lines_isSet = false;
    m_invoice_lines_isValid = false;

    m_invoice_number_isSet = false;
    m_invoice_number_isValid = false;

    m_invoice_period_isSet = false;
    m_invoice_period_isValid = false;

    m_invoice_type_isSet = false;
    m_invoice_type_isValid = false;

    m_issue_date_isSet = false;
    m_issue_date_isValid = false;

    m_issue_reasons_isSet = false;
    m_issue_reasons_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_reference_isSet = false;
    m_order_reference_isValid = false;

    m_payment_means_array_isSet = false;
    m_payment_means_array_isValid = false;

    m_payment_means_bic_isSet = false;
    m_payment_means_bic_isValid = false;

    m_payment_means_code_isSet = false;
    m_payment_means_code_isValid = false;

    m_payment_means_iban_isSet = false;
    m_payment_means_iban_isValid = false;

    m_payment_means_payment_id_isSet = false;
    m_payment_means_payment_id_isValid = false;

    m_payment_terms_isSet = false;
    m_payment_terms_isValid = false;

    m_preferred_invoice_type_isSet = false;
    m_preferred_invoice_type_isValid = false;

    m_prepaid_amount_isSet = false;
    m_prepaid_amount_isValid = false;

    m_price_mode_isSet = false;
    m_price_mode_isValid = false;

    m_project_reference_isSet = false;
    m_project_reference_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_sales_order_id_isSet = false;
    m_sales_order_id_isValid = false;

    m_self_billing_mode_isSet = false;
    m_self_billing_mode_isValid = false;

    m_tax_exempt_reason_isSet = false;
    m_tax_exempt_reason_isValid = false;

    m_tax_point_date_isSet = false;
    m_tax_point_date_isValid = false;

    m_tax_subtotals_isSet = false;
    m_tax_subtotals_isValid = false;

    m_tax_system_isSet = false;
    m_tax_system_isValid = false;

    m_taxes_duties_fees_isSet = false;
    m_taxes_duties_fees_isValid = false;

    m_transaction_type_isSet = false;
    m_transaction_type_isValid = false;

    m_ubl_extensions_isSet = false;
    m_ubl_extensions_isValid = false;

    m_vat_reverse_charge_isSet = false;
    m_vat_reverse_charge_isValid = false;

    m_x2y_isSet = false;
    m_x2y_isValid = false;
}

void OAIInvoice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoice::fromJsonObject(QJsonObject json) {

    m_accounting_cost_isValid = ::OpenAPI::fromJsonValue(m_accounting_cost, json[QString("accountingCost")]);
    m_accounting_cost_isSet = !json[QString("accountingCost")].isNull() && m_accounting_cost_isValid;

    m_accounting_currency_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_accounting_currency_tax_amount, json[QString("accountingCurrencyTaxAmount")]);
    m_accounting_currency_tax_amount_isSet = !json[QString("accountingCurrencyTaxAmount")].isNull() && m_accounting_currency_tax_amount_isValid;

    m_accounting_currency_tax_amount_currency_isValid = ::OpenAPI::fromJsonValue(m_accounting_currency_tax_amount_currency, json[QString("accountingCurrencyTaxAmountCurrency")]);
    m_accounting_currency_tax_amount_currency_isSet = !json[QString("accountingCurrencyTaxAmountCurrency")].isNull() && m_accounting_currency_tax_amount_currency_isValid;

    m_accounting_customer_party_isValid = ::OpenAPI::fromJsonValue(m_accounting_customer_party, json[QString("accountingCustomerParty")]);
    m_accounting_customer_party_isSet = !json[QString("accountingCustomerParty")].isNull() && m_accounting_customer_party_isValid;

    m_accounting_supplier_party_isValid = ::OpenAPI::fromJsonValue(m_accounting_supplier_party, json[QString("accountingSupplierParty")]);
    m_accounting_supplier_party_isSet = !json[QString("accountingSupplierParty")].isNull() && m_accounting_supplier_party_isValid;

    m_allowance_charges_isValid = ::OpenAPI::fromJsonValue(m_allowance_charges, json[QString("allowanceCharges")]);
    m_allowance_charges_isSet = !json[QString("allowanceCharges")].isNull() && m_allowance_charges_isValid;

    m_amount_including_vat_isValid = ::OpenAPI::fromJsonValue(m_amount_including_vat, json[QString("amountIncludingVat")]);
    m_amount_including_vat_isSet = !json[QString("amountIncludingVat")].isNull() && m_amount_including_vat_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_billing_reference_isValid = ::OpenAPI::fromJsonValue(m_billing_reference, json[QString("billingReference")]);
    m_billing_reference_isSet = !json[QString("billingReference")].isNull() && m_billing_reference_isValid;

    m_buyer_reference_isValid = ::OpenAPI::fromJsonValue(m_buyer_reference, json[QString("buyerReference")]);
    m_buyer_reference_isSet = !json[QString("buyerReference")].isNull() && m_buyer_reference_isValid;

    m_consumer_tax_mode_isValid = ::OpenAPI::fromJsonValue(m_consumer_tax_mode, json[QString("consumerTaxMode")]);
    m_consumer_tax_mode_isSet = !json[QString("consumerTaxMode")].isNull() && m_consumer_tax_mode_isValid;

    m_contract_document_reference_isValid = ::OpenAPI::fromJsonValue(m_contract_document_reference, json[QString("contractDocumentReference")]);
    m_contract_document_reference_isSet = !json[QString("contractDocumentReference")].isNull() && m_contract_document_reference_isValid;

    m_delivery_isValid = ::OpenAPI::fromJsonValue(m_delivery, json[QString("delivery")]);
    m_delivery_isSet = !json[QString("delivery")].isNull() && m_delivery_isValid;

    m_document_currency_code_isValid = ::OpenAPI::fromJsonValue(m_document_currency_code, json[QString("documentCurrencyCode")]);
    m_document_currency_code_isSet = !json[QString("documentCurrencyCode")].isNull() && m_document_currency_code_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_invoice_lines_isValid = ::OpenAPI::fromJsonValue(m_invoice_lines, json[QString("invoiceLines")]);
    m_invoice_lines_isSet = !json[QString("invoiceLines")].isNull() && m_invoice_lines_isValid;

    m_invoice_number_isValid = ::OpenAPI::fromJsonValue(m_invoice_number, json[QString("invoiceNumber")]);
    m_invoice_number_isSet = !json[QString("invoiceNumber")].isNull() && m_invoice_number_isValid;

    m_invoice_period_isValid = ::OpenAPI::fromJsonValue(m_invoice_period, json[QString("invoicePeriod")]);
    m_invoice_period_isSet = !json[QString("invoicePeriod")].isNull() && m_invoice_period_isValid;

    m_invoice_type_isValid = ::OpenAPI::fromJsonValue(m_invoice_type, json[QString("invoiceType")]);
    m_invoice_type_isSet = !json[QString("invoiceType")].isNull() && m_invoice_type_isValid;

    m_issue_date_isValid = ::OpenAPI::fromJsonValue(m_issue_date, json[QString("issueDate")]);
    m_issue_date_isSet = !json[QString("issueDate")].isNull() && m_issue_date_isValid;

    m_issue_reasons_isValid = ::OpenAPI::fromJsonValue(m_issue_reasons, json[QString("issueReasons")]);
    m_issue_reasons_isSet = !json[QString("issueReasons")].isNull() && m_issue_reasons_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_reference_isValid = ::OpenAPI::fromJsonValue(m_order_reference, json[QString("orderReference")]);
    m_order_reference_isSet = !json[QString("orderReference")].isNull() && m_order_reference_isValid;

    m_payment_means_array_isValid = ::OpenAPI::fromJsonValue(m_payment_means_array, json[QString("paymentMeansArray")]);
    m_payment_means_array_isSet = !json[QString("paymentMeansArray")].isNull() && m_payment_means_array_isValid;

    m_payment_means_bic_isValid = ::OpenAPI::fromJsonValue(m_payment_means_bic, json[QString("paymentMeansBic")]);
    m_payment_means_bic_isSet = !json[QString("paymentMeansBic")].isNull() && m_payment_means_bic_isValid;

    m_payment_means_code_isValid = ::OpenAPI::fromJsonValue(m_payment_means_code, json[QString("paymentMeansCode")]);
    m_payment_means_code_isSet = !json[QString("paymentMeansCode")].isNull() && m_payment_means_code_isValid;

    m_payment_means_iban_isValid = ::OpenAPI::fromJsonValue(m_payment_means_iban, json[QString("paymentMeansIban")]);
    m_payment_means_iban_isSet = !json[QString("paymentMeansIban")].isNull() && m_payment_means_iban_isValid;

    m_payment_means_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_means_payment_id, json[QString("paymentMeansPaymentId")]);
    m_payment_means_payment_id_isSet = !json[QString("paymentMeansPaymentId")].isNull() && m_payment_means_payment_id_isValid;

    m_payment_terms_isValid = ::OpenAPI::fromJsonValue(m_payment_terms, json[QString("paymentTerms")]);
    m_payment_terms_isSet = !json[QString("paymentTerms")].isNull() && m_payment_terms_isValid;

    m_preferred_invoice_type_isValid = ::OpenAPI::fromJsonValue(m_preferred_invoice_type, json[QString("preferredInvoiceType")]);
    m_preferred_invoice_type_isSet = !json[QString("preferredInvoiceType")].isNull() && m_preferred_invoice_type_isValid;

    m_prepaid_amount_isValid = ::OpenAPI::fromJsonValue(m_prepaid_amount, json[QString("prepaidAmount")]);
    m_prepaid_amount_isSet = !json[QString("prepaidAmount")].isNull() && m_prepaid_amount_isValid;

    m_price_mode_isValid = ::OpenAPI::fromJsonValue(m_price_mode, json[QString("priceMode")]);
    m_price_mode_isSet = !json[QString("priceMode")].isNull() && m_price_mode_isValid;

    m_project_reference_isValid = ::OpenAPI::fromJsonValue(m_project_reference, json[QString("projectReference")]);
    m_project_reference_isSet = !json[QString("projectReference")].isNull() && m_project_reference_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;

    m_sales_order_id_isValid = ::OpenAPI::fromJsonValue(m_sales_order_id, json[QString("salesOrderId")]);
    m_sales_order_id_isSet = !json[QString("salesOrderId")].isNull() && m_sales_order_id_isValid;

    m_self_billing_mode_isValid = ::OpenAPI::fromJsonValue(m_self_billing_mode, json[QString("selfBillingMode")]);
    m_self_billing_mode_isSet = !json[QString("selfBillingMode")].isNull() && m_self_billing_mode_isValid;

    m_tax_exempt_reason_isValid = ::OpenAPI::fromJsonValue(m_tax_exempt_reason, json[QString("taxExemptReason")]);
    m_tax_exempt_reason_isSet = !json[QString("taxExemptReason")].isNull() && m_tax_exempt_reason_isValid;

    m_tax_point_date_isValid = ::OpenAPI::fromJsonValue(m_tax_point_date, json[QString("taxPointDate")]);
    m_tax_point_date_isSet = !json[QString("taxPointDate")].isNull() && m_tax_point_date_isValid;

    m_tax_subtotals_isValid = ::OpenAPI::fromJsonValue(m_tax_subtotals, json[QString("taxSubtotals")]);
    m_tax_subtotals_isSet = !json[QString("taxSubtotals")].isNull() && m_tax_subtotals_isValid;

    m_tax_system_isValid = ::OpenAPI::fromJsonValue(m_tax_system, json[QString("taxSystem")]);
    m_tax_system_isSet = !json[QString("taxSystem")].isNull() && m_tax_system_isValid;

    m_taxes_duties_fees_isValid = ::OpenAPI::fromJsonValue(m_taxes_duties_fees, json[QString("taxesDutiesFees")]);
    m_taxes_duties_fees_isSet = !json[QString("taxesDutiesFees")].isNull() && m_taxes_duties_fees_isValid;

    m_transaction_type_isValid = ::OpenAPI::fromJsonValue(m_transaction_type, json[QString("transactionType")]);
    m_transaction_type_isSet = !json[QString("transactionType")].isNull() && m_transaction_type_isValid;

    m_ubl_extensions_isValid = ::OpenAPI::fromJsonValue(m_ubl_extensions, json[QString("ublExtensions")]);
    m_ubl_extensions_isSet = !json[QString("ublExtensions")].isNull() && m_ubl_extensions_isValid;

    m_vat_reverse_charge_isValid = ::OpenAPI::fromJsonValue(m_vat_reverse_charge, json[QString("vatReverseCharge")]);
    m_vat_reverse_charge_isSet = !json[QString("vatReverseCharge")].isNull() && m_vat_reverse_charge_isValid;

    m_x2y_isValid = ::OpenAPI::fromJsonValue(m_x2y, json[QString("x2y")]);
    m_x2y_isSet = !json[QString("x2y")].isNull() && m_x2y_isValid;
}

QString OAIInvoice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoice::asJsonObject() const {
    QJsonObject obj;
    if (m_accounting_cost_isSet) {
        obj.insert(QString("accountingCost"), ::OpenAPI::toJsonValue(m_accounting_cost));
    }
    if (m_accounting_currency_tax_amount_isSet) {
        obj.insert(QString("accountingCurrencyTaxAmount"), ::OpenAPI::toJsonValue(m_accounting_currency_tax_amount));
    }
    if (m_accounting_currency_tax_amount_currency.isSet()) {
        obj.insert(QString("accountingCurrencyTaxAmountCurrency"), ::OpenAPI::toJsonValue(m_accounting_currency_tax_amount_currency));
    }
    if (m_accounting_customer_party.isSet()) {
        obj.insert(QString("accountingCustomerParty"), ::OpenAPI::toJsonValue(m_accounting_customer_party));
    }
    if (m_accounting_supplier_party.isSet()) {
        obj.insert(QString("accountingSupplierParty"), ::OpenAPI::toJsonValue(m_accounting_supplier_party));
    }
    if (m_allowance_charges.size() > 0) {
        obj.insert(QString("allowanceCharges"), ::OpenAPI::toJsonValue(m_allowance_charges));
    }
    if (m_amount_including_vat_isSet) {
        obj.insert(QString("amountIncludingVat"), ::OpenAPI::toJsonValue(m_amount_including_vat));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_billing_reference_isSet) {
        obj.insert(QString("billingReference"), ::OpenAPI::toJsonValue(m_billing_reference));
    }
    if (m_buyer_reference_isSet) {
        obj.insert(QString("buyerReference"), ::OpenAPI::toJsonValue(m_buyer_reference));
    }
    if (m_consumer_tax_mode_isSet) {
        obj.insert(QString("consumerTaxMode"), ::OpenAPI::toJsonValue(m_consumer_tax_mode));
    }
    if (m_contract_document_reference_isSet) {
        obj.insert(QString("contractDocumentReference"), ::OpenAPI::toJsonValue(m_contract_document_reference));
    }
    if (m_delivery.isSet()) {
        obj.insert(QString("delivery"), ::OpenAPI::toJsonValue(m_delivery));
    }
    if (m_document_currency_code.isSet()) {
        obj.insert(QString("documentCurrencyCode"), ::OpenAPI::toJsonValue(m_document_currency_code));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_invoice_lines.size() > 0) {
        obj.insert(QString("invoiceLines"), ::OpenAPI::toJsonValue(m_invoice_lines));
    }
    if (m_invoice_number_isSet) {
        obj.insert(QString("invoiceNumber"), ::OpenAPI::toJsonValue(m_invoice_number));
    }
    if (m_invoice_period_isSet) {
        obj.insert(QString("invoicePeriod"), ::OpenAPI::toJsonValue(m_invoice_period));
    }
    if (m_invoice_type_isSet) {
        obj.insert(QString("invoiceType"), ::OpenAPI::toJsonValue(m_invoice_type));
    }
    if (m_issue_date_isSet) {
        obj.insert(QString("issueDate"), ::OpenAPI::toJsonValue(m_issue_date));
    }
    if (m_issue_reasons.size() > 0) {
        obj.insert(QString("issueReasons"), ::OpenAPI::toJsonValue(m_issue_reasons));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_reference_isSet) {
        obj.insert(QString("orderReference"), ::OpenAPI::toJsonValue(m_order_reference));
    }
    if (m_payment_means_array.size() > 0) {
        obj.insert(QString("paymentMeansArray"), ::OpenAPI::toJsonValue(m_payment_means_array));
    }
    if (m_payment_means_bic_isSet) {
        obj.insert(QString("paymentMeansBic"), ::OpenAPI::toJsonValue(m_payment_means_bic));
    }
    if (m_payment_means_code_isSet) {
        obj.insert(QString("paymentMeansCode"), ::OpenAPI::toJsonValue(m_payment_means_code));
    }
    if (m_payment_means_iban_isSet) {
        obj.insert(QString("paymentMeansIban"), ::OpenAPI::toJsonValue(m_payment_means_iban));
    }
    if (m_payment_means_payment_id_isSet) {
        obj.insert(QString("paymentMeansPaymentId"), ::OpenAPI::toJsonValue(m_payment_means_payment_id));
    }
    if (m_payment_terms.isSet()) {
        obj.insert(QString("paymentTerms"), ::OpenAPI::toJsonValue(m_payment_terms));
    }
    if (m_preferred_invoice_type_isSet) {
        obj.insert(QString("preferredInvoiceType"), ::OpenAPI::toJsonValue(m_preferred_invoice_type));
    }
    if (m_prepaid_amount_isSet) {
        obj.insert(QString("prepaidAmount"), ::OpenAPI::toJsonValue(m_prepaid_amount));
    }
    if (m_price_mode_isSet) {
        obj.insert(QString("priceMode"), ::OpenAPI::toJsonValue(m_price_mode));
    }
    if (m_project_reference_isSet) {
        obj.insert(QString("projectReference"), ::OpenAPI::toJsonValue(m_project_reference));
    }
    if (m_references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_sales_order_id_isSet) {
        obj.insert(QString("salesOrderId"), ::OpenAPI::toJsonValue(m_sales_order_id));
    }
    if (m_self_billing_mode_isSet) {
        obj.insert(QString("selfBillingMode"), ::OpenAPI::toJsonValue(m_self_billing_mode));
    }
    if (m_tax_exempt_reason_isSet) {
        obj.insert(QString("taxExemptReason"), ::OpenAPI::toJsonValue(m_tax_exempt_reason));
    }
    if (m_tax_point_date_isSet) {
        obj.insert(QString("taxPointDate"), ::OpenAPI::toJsonValue(m_tax_point_date));
    }
    if (m_tax_subtotals.size() > 0) {
        obj.insert(QString("taxSubtotals"), ::OpenAPI::toJsonValue(m_tax_subtotals));
    }
    if (m_tax_system_isSet) {
        obj.insert(QString("taxSystem"), ::OpenAPI::toJsonValue(m_tax_system));
    }
    if (m_taxes_duties_fees.size() > 0) {
        obj.insert(QString("taxesDutiesFees"), ::OpenAPI::toJsonValue(m_taxes_duties_fees));
    }
    if (m_transaction_type_isSet) {
        obj.insert(QString("transactionType"), ::OpenAPI::toJsonValue(m_transaction_type));
    }
    if (m_ubl_extensions.size() > 0) {
        obj.insert(QString("ublExtensions"), ::OpenAPI::toJsonValue(m_ubl_extensions));
    }
    if (m_vat_reverse_charge_isSet) {
        obj.insert(QString("vatReverseCharge"), ::OpenAPI::toJsonValue(m_vat_reverse_charge));
    }
    if (m_x2y_isSet) {
        obj.insert(QString("x2y"), ::OpenAPI::toJsonValue(m_x2y));
    }
    return obj;
}

QString OAIInvoice::getAccountingCost() const {
    return m_accounting_cost;
}
void OAIInvoice::setAccountingCost(const QString &accounting_cost) {
    m_accounting_cost = accounting_cost;
    m_accounting_cost_isSet = true;
}

bool OAIInvoice::is_accounting_cost_Set() const{
    return m_accounting_cost_isSet;
}

bool OAIInvoice::is_accounting_cost_Valid() const{
    return m_accounting_cost_isValid;
}

double OAIInvoice::getAccountingCurrencyTaxAmount() const {
    return m_accounting_currency_tax_amount;
}
void OAIInvoice::setAccountingCurrencyTaxAmount(const double &accounting_currency_tax_amount) {
    m_accounting_currency_tax_amount = accounting_currency_tax_amount;
    m_accounting_currency_tax_amount_isSet = true;
}

bool OAIInvoice::is_accounting_currency_tax_amount_Set() const{
    return m_accounting_currency_tax_amount_isSet;
}

bool OAIInvoice::is_accounting_currency_tax_amount_Valid() const{
    return m_accounting_currency_tax_amount_isValid;
}

OAICurrencyCode OAIInvoice::getAccountingCurrencyTaxAmountCurrency() const {
    return m_accounting_currency_tax_amount_currency;
}
void OAIInvoice::setAccountingCurrencyTaxAmountCurrency(const OAICurrencyCode &accounting_currency_tax_amount_currency) {
    m_accounting_currency_tax_amount_currency = accounting_currency_tax_amount_currency;
    m_accounting_currency_tax_amount_currency_isSet = true;
}

bool OAIInvoice::is_accounting_currency_tax_amount_currency_Set() const{
    return m_accounting_currency_tax_amount_currency_isSet;
}

bool OAIInvoice::is_accounting_currency_tax_amount_currency_Valid() const{
    return m_accounting_currency_tax_amount_currency_isValid;
}

OAIAccountingCustomerParty OAIInvoice::getAccountingCustomerParty() const {
    return m_accounting_customer_party;
}
void OAIInvoice::setAccountingCustomerParty(const OAIAccountingCustomerParty &accounting_customer_party) {
    m_accounting_customer_party = accounting_customer_party;
    m_accounting_customer_party_isSet = true;
}

bool OAIInvoice::is_accounting_customer_party_Set() const{
    return m_accounting_customer_party_isSet;
}

bool OAIInvoice::is_accounting_customer_party_Valid() const{
    return m_accounting_customer_party_isValid;
}

OAIAccountingSupplierParty OAIInvoice::getAccountingSupplierParty() const {
    return m_accounting_supplier_party;
}
void OAIInvoice::setAccountingSupplierParty(const OAIAccountingSupplierParty &accounting_supplier_party) {
    m_accounting_supplier_party = accounting_supplier_party;
    m_accounting_supplier_party_isSet = true;
}

bool OAIInvoice::is_accounting_supplier_party_Set() const{
    return m_accounting_supplier_party_isSet;
}

bool OAIInvoice::is_accounting_supplier_party_Valid() const{
    return m_accounting_supplier_party_isValid;
}

QList<OAIAllowanceCharge> OAIInvoice::getAllowanceCharges() const {
    return m_allowance_charges;
}
void OAIInvoice::setAllowanceCharges(const QList<OAIAllowanceCharge> &allowance_charges) {
    m_allowance_charges = allowance_charges;
    m_allowance_charges_isSet = true;
}

bool OAIInvoice::is_allowance_charges_Set() const{
    return m_allowance_charges_isSet;
}

bool OAIInvoice::is_allowance_charges_Valid() const{
    return m_allowance_charges_isValid;
}

double OAIInvoice::getAmountIncludingVat() const {
    return m_amount_including_vat;
}
void OAIInvoice::setAmountIncludingVat(const double &amount_including_vat) {
    m_amount_including_vat = amount_including_vat;
    m_amount_including_vat_isSet = true;
}

bool OAIInvoice::is_amount_including_vat_Set() const{
    return m_amount_including_vat_isSet;
}

bool OAIInvoice::is_amount_including_vat_Valid() const{
    return m_amount_including_vat_isValid;
}

QList<OAIAttachment> OAIInvoice::getAttachments() const {
    return m_attachments;
}
void OAIInvoice::setAttachments(const QList<OAIAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIInvoice::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIInvoice::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIInvoice::getBillingReference() const {
    return m_billing_reference;
}
void OAIInvoice::setBillingReference(const QString &billing_reference) {
    m_billing_reference = billing_reference;
    m_billing_reference_isSet = true;
}

bool OAIInvoice::is_billing_reference_Set() const{
    return m_billing_reference_isSet;
}

bool OAIInvoice::is_billing_reference_Valid() const{
    return m_billing_reference_isValid;
}

QString OAIInvoice::getBuyerReference() const {
    return m_buyer_reference;
}
void OAIInvoice::setBuyerReference(const QString &buyer_reference) {
    m_buyer_reference = buyer_reference;
    m_buyer_reference_isSet = true;
}

bool OAIInvoice::is_buyer_reference_Set() const{
    return m_buyer_reference_isSet;
}

bool OAIInvoice::is_buyer_reference_Valid() const{
    return m_buyer_reference_isValid;
}

bool OAIInvoice::isConsumerTaxMode() const {
    return m_consumer_tax_mode;
}
void OAIInvoice::setConsumerTaxMode(const bool &consumer_tax_mode) {
    m_consumer_tax_mode = consumer_tax_mode;
    m_consumer_tax_mode_isSet = true;
}

bool OAIInvoice::is_consumer_tax_mode_Set() const{
    return m_consumer_tax_mode_isSet;
}

bool OAIInvoice::is_consumer_tax_mode_Valid() const{
    return m_consumer_tax_mode_isValid;
}

QString OAIInvoice::getContractDocumentReference() const {
    return m_contract_document_reference;
}
void OAIInvoice::setContractDocumentReference(const QString &contract_document_reference) {
    m_contract_document_reference = contract_document_reference;
    m_contract_document_reference_isSet = true;
}

bool OAIInvoice::is_contract_document_reference_Set() const{
    return m_contract_document_reference_isSet;
}

bool OAIInvoice::is_contract_document_reference_Valid() const{
    return m_contract_document_reference_isValid;
}

OAIDelivery OAIInvoice::getDelivery() const {
    return m_delivery;
}
void OAIInvoice::setDelivery(const OAIDelivery &delivery) {
    m_delivery = delivery;
    m_delivery_isSet = true;
}

bool OAIInvoice::is_delivery_Set() const{
    return m_delivery_isSet;
}

bool OAIInvoice::is_delivery_Valid() const{
    return m_delivery_isValid;
}

OAICurrencyCode OAIInvoice::getDocumentCurrencyCode() const {
    return m_document_currency_code;
}
void OAIInvoice::setDocumentCurrencyCode(const OAICurrencyCode &document_currency_code) {
    m_document_currency_code = document_currency_code;
    m_document_currency_code_isSet = true;
}

bool OAIInvoice::is_document_currency_code_Set() const{
    return m_document_currency_code_isSet;
}

bool OAIInvoice::is_document_currency_code_Valid() const{
    return m_document_currency_code_isValid;
}

QString OAIInvoice::getDueDate() const {
    return m_due_date;
}
void OAIInvoice::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIInvoice::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIInvoice::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QList<OAIInvoiceLine> OAIInvoice::getInvoiceLines() const {
    return m_invoice_lines;
}
void OAIInvoice::setInvoiceLines(const QList<OAIInvoiceLine> &invoice_lines) {
    m_invoice_lines = invoice_lines;
    m_invoice_lines_isSet = true;
}

bool OAIInvoice::is_invoice_lines_Set() const{
    return m_invoice_lines_isSet;
}

bool OAIInvoice::is_invoice_lines_Valid() const{
    return m_invoice_lines_isValid;
}

QString OAIInvoice::getInvoiceNumber() const {
    return m_invoice_number;
}
void OAIInvoice::setInvoiceNumber(const QString &invoice_number) {
    m_invoice_number = invoice_number;
    m_invoice_number_isSet = true;
}

bool OAIInvoice::is_invoice_number_Set() const{
    return m_invoice_number_isSet;
}

bool OAIInvoice::is_invoice_number_Valid() const{
    return m_invoice_number_isValid;
}

QString OAIInvoice::getInvoicePeriod() const {
    return m_invoice_period;
}
void OAIInvoice::setInvoicePeriod(const QString &invoice_period) {
    m_invoice_period = invoice_period;
    m_invoice_period_isSet = true;
}

bool OAIInvoice::is_invoice_period_Set() const{
    return m_invoice_period_isSet;
}

bool OAIInvoice::is_invoice_period_Valid() const{
    return m_invoice_period_isValid;
}

QString OAIInvoice::getInvoiceType() const {
    return m_invoice_type;
}
void OAIInvoice::setInvoiceType(const QString &invoice_type) {
    m_invoice_type = invoice_type;
    m_invoice_type_isSet = true;
}

bool OAIInvoice::is_invoice_type_Set() const{
    return m_invoice_type_isSet;
}

bool OAIInvoice::is_invoice_type_Valid() const{
    return m_invoice_type_isValid;
}

QString OAIInvoice::getIssueDate() const {
    return m_issue_date;
}
void OAIInvoice::setIssueDate(const QString &issue_date) {
    m_issue_date = issue_date;
    m_issue_date_isSet = true;
}

bool OAIInvoice::is_issue_date_Set() const{
    return m_issue_date_isSet;
}

bool OAIInvoice::is_issue_date_Valid() const{
    return m_issue_date_isValid;
}

QList<QString> OAIInvoice::getIssueReasons() const {
    return m_issue_reasons;
}
void OAIInvoice::setIssueReasons(const QList<QString> &issue_reasons) {
    m_issue_reasons = issue_reasons;
    m_issue_reasons_isSet = true;
}

bool OAIInvoice::is_issue_reasons_Set() const{
    return m_issue_reasons_isSet;
}

bool OAIInvoice::is_issue_reasons_Valid() const{
    return m_issue_reasons_isValid;
}

QString OAIInvoice::getNote() const {
    return m_note;
}
void OAIInvoice::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIInvoice::is_note_Set() const{
    return m_note_isSet;
}

bool OAIInvoice::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIInvoice::getOrderReference() const {
    return m_order_reference;
}
void OAIInvoice::setOrderReference(const QString &order_reference) {
    m_order_reference = order_reference;
    m_order_reference_isSet = true;
}

bool OAIInvoice::is_order_reference_Set() const{
    return m_order_reference_isSet;
}

bool OAIInvoice::is_order_reference_Valid() const{
    return m_order_reference_isValid;
}

QList<OAIPaymentMeans> OAIInvoice::getPaymentMeansArray() const {
    return m_payment_means_array;
}
void OAIInvoice::setPaymentMeansArray(const QList<OAIPaymentMeans> &payment_means_array) {
    m_payment_means_array = payment_means_array;
    m_payment_means_array_isSet = true;
}

bool OAIInvoice::is_payment_means_array_Set() const{
    return m_payment_means_array_isSet;
}

bool OAIInvoice::is_payment_means_array_Valid() const{
    return m_payment_means_array_isValid;
}

QString OAIInvoice::getPaymentMeansBic() const {
    return m_payment_means_bic;
}
void OAIInvoice::setPaymentMeansBic(const QString &payment_means_bic) {
    m_payment_means_bic = payment_means_bic;
    m_payment_means_bic_isSet = true;
}

bool OAIInvoice::is_payment_means_bic_Set() const{
    return m_payment_means_bic_isSet;
}

bool OAIInvoice::is_payment_means_bic_Valid() const{
    return m_payment_means_bic_isValid;
}

QString OAIInvoice::getPaymentMeansCode() const {
    return m_payment_means_code;
}
void OAIInvoice::setPaymentMeansCode(const QString &payment_means_code) {
    m_payment_means_code = payment_means_code;
    m_payment_means_code_isSet = true;
}

bool OAIInvoice::is_payment_means_code_Set() const{
    return m_payment_means_code_isSet;
}

bool OAIInvoice::is_payment_means_code_Valid() const{
    return m_payment_means_code_isValid;
}

QString OAIInvoice::getPaymentMeansIban() const {
    return m_payment_means_iban;
}
void OAIInvoice::setPaymentMeansIban(const QString &payment_means_iban) {
    m_payment_means_iban = payment_means_iban;
    m_payment_means_iban_isSet = true;
}

bool OAIInvoice::is_payment_means_iban_Set() const{
    return m_payment_means_iban_isSet;
}

bool OAIInvoice::is_payment_means_iban_Valid() const{
    return m_payment_means_iban_isValid;
}

QString OAIInvoice::getPaymentMeansPaymentId() const {
    return m_payment_means_payment_id;
}
void OAIInvoice::setPaymentMeansPaymentId(const QString &payment_means_payment_id) {
    m_payment_means_payment_id = payment_means_payment_id;
    m_payment_means_payment_id_isSet = true;
}

bool OAIInvoice::is_payment_means_payment_id_Set() const{
    return m_payment_means_payment_id_isSet;
}

bool OAIInvoice::is_payment_means_payment_id_Valid() const{
    return m_payment_means_payment_id_isValid;
}

OAIPaymentTerms OAIInvoice::getPaymentTerms() const {
    return m_payment_terms;
}
void OAIInvoice::setPaymentTerms(const OAIPaymentTerms &payment_terms) {
    m_payment_terms = payment_terms;
    m_payment_terms_isSet = true;
}

bool OAIInvoice::is_payment_terms_Set() const{
    return m_payment_terms_isSet;
}

bool OAIInvoice::is_payment_terms_Valid() const{
    return m_payment_terms_isValid;
}

QString OAIInvoice::getPreferredInvoiceType() const {
    return m_preferred_invoice_type;
}
void OAIInvoice::setPreferredInvoiceType(const QString &preferred_invoice_type) {
    m_preferred_invoice_type = preferred_invoice_type;
    m_preferred_invoice_type_isSet = true;
}

bool OAIInvoice::is_preferred_invoice_type_Set() const{
    return m_preferred_invoice_type_isSet;
}

bool OAIInvoice::is_preferred_invoice_type_Valid() const{
    return m_preferred_invoice_type_isValid;
}

double OAIInvoice::getPrepaidAmount() const {
    return m_prepaid_amount;
}
void OAIInvoice::setPrepaidAmount(const double &prepaid_amount) {
    m_prepaid_amount = prepaid_amount;
    m_prepaid_amount_isSet = true;
}

bool OAIInvoice::is_prepaid_amount_Set() const{
    return m_prepaid_amount_isSet;
}

bool OAIInvoice::is_prepaid_amount_Valid() const{
    return m_prepaid_amount_isValid;
}

QString OAIInvoice::getPriceMode() const {
    return m_price_mode;
}
void OAIInvoice::setPriceMode(const QString &price_mode) {
    m_price_mode = price_mode;
    m_price_mode_isSet = true;
}

bool OAIInvoice::is_price_mode_Set() const{
    return m_price_mode_isSet;
}

bool OAIInvoice::is_price_mode_Valid() const{
    return m_price_mode_isValid;
}

QString OAIInvoice::getProjectReference() const {
    return m_project_reference;
}
void OAIInvoice::setProjectReference(const QString &project_reference) {
    m_project_reference = project_reference;
    m_project_reference_isSet = true;
}

bool OAIInvoice::is_project_reference_Set() const{
    return m_project_reference_isSet;
}

bool OAIInvoice::is_project_reference_Valid() const{
    return m_project_reference_isValid;
}

QList<OAIReference> OAIInvoice::getReferences() const {
    return m_references;
}
void OAIInvoice::setReferences(const QList<OAIReference> &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAIInvoice::is_references_Set() const{
    return m_references_isSet;
}

bool OAIInvoice::is_references_Valid() const{
    return m_references_isValid;
}

QString OAIInvoice::getSalesOrderId() const {
    return m_sales_order_id;
}
void OAIInvoice::setSalesOrderId(const QString &sales_order_id) {
    m_sales_order_id = sales_order_id;
    m_sales_order_id_isSet = true;
}

bool OAIInvoice::is_sales_order_id_Set() const{
    return m_sales_order_id_isSet;
}

bool OAIInvoice::is_sales_order_id_Valid() const{
    return m_sales_order_id_isValid;
}

bool OAIInvoice::isSelfBillingMode() const {
    return m_self_billing_mode;
}
void OAIInvoice::setSelfBillingMode(const bool &self_billing_mode) {
    m_self_billing_mode = self_billing_mode;
    m_self_billing_mode_isSet = true;
}

bool OAIInvoice::is_self_billing_mode_Set() const{
    return m_self_billing_mode_isSet;
}

bool OAIInvoice::is_self_billing_mode_Valid() const{
    return m_self_billing_mode_isValid;
}

QString OAIInvoice::getTaxExemptReason() const {
    return m_tax_exempt_reason;
}
void OAIInvoice::setTaxExemptReason(const QString &tax_exempt_reason) {
    m_tax_exempt_reason = tax_exempt_reason;
    m_tax_exempt_reason_isSet = true;
}

bool OAIInvoice::is_tax_exempt_reason_Set() const{
    return m_tax_exempt_reason_isSet;
}

bool OAIInvoice::is_tax_exempt_reason_Valid() const{
    return m_tax_exempt_reason_isValid;
}

QString OAIInvoice::getTaxPointDate() const {
    return m_tax_point_date;
}
void OAIInvoice::setTaxPointDate(const QString &tax_point_date) {
    m_tax_point_date = tax_point_date;
    m_tax_point_date_isSet = true;
}

bool OAIInvoice::is_tax_point_date_Set() const{
    return m_tax_point_date_isSet;
}

bool OAIInvoice::is_tax_point_date_Valid() const{
    return m_tax_point_date_isValid;
}

QList<OAITaxSubtotal> OAIInvoice::getTaxSubtotals() const {
    return m_tax_subtotals;
}
void OAIInvoice::setTaxSubtotals(const QList<OAITaxSubtotal> &tax_subtotals) {
    m_tax_subtotals = tax_subtotals;
    m_tax_subtotals_isSet = true;
}

bool OAIInvoice::is_tax_subtotals_Set() const{
    return m_tax_subtotals_isSet;
}

bool OAIInvoice::is_tax_subtotals_Valid() const{
    return m_tax_subtotals_isValid;
}

QString OAIInvoice::getTaxSystem() const {
    return m_tax_system;
}
void OAIInvoice::setTaxSystem(const QString &tax_system) {
    m_tax_system = tax_system;
    m_tax_system_isSet = true;
}

bool OAIInvoice::is_tax_system_Set() const{
    return m_tax_system_isSet;
}

bool OAIInvoice::is_tax_system_Valid() const{
    return m_tax_system_isValid;
}

QList<OAITax> OAIInvoice::getTaxesDutiesFees() const {
    return m_taxes_duties_fees;
}
void OAIInvoice::setTaxesDutiesFees(const QList<OAITax> &taxes_duties_fees) {
    m_taxes_duties_fees = taxes_duties_fees;
    m_taxes_duties_fees_isSet = true;
}

bool OAIInvoice::is_taxes_duties_fees_Set() const{
    return m_taxes_duties_fees_isSet;
}

bool OAIInvoice::is_taxes_duties_fees_Valid() const{
    return m_taxes_duties_fees_isValid;
}

QString OAIInvoice::getTransactionType() const {
    return m_transaction_type;
}
void OAIInvoice::setTransactionType(const QString &transaction_type) {
    m_transaction_type = transaction_type;
    m_transaction_type_isSet = true;
}

bool OAIInvoice::is_transaction_type_Set() const{
    return m_transaction_type_isSet;
}

bool OAIInvoice::is_transaction_type_Valid() const{
    return m_transaction_type_isValid;
}

QList<QString> OAIInvoice::getUblExtensions() const {
    return m_ubl_extensions;
}
void OAIInvoice::setUblExtensions(const QList<QString> &ubl_extensions) {
    m_ubl_extensions = ubl_extensions;
    m_ubl_extensions_isSet = true;
}

bool OAIInvoice::is_ubl_extensions_Set() const{
    return m_ubl_extensions_isSet;
}

bool OAIInvoice::is_ubl_extensions_Valid() const{
    return m_ubl_extensions_isValid;
}

bool OAIInvoice::isVatReverseCharge() const {
    return m_vat_reverse_charge;
}
void OAIInvoice::setVatReverseCharge(const bool &vat_reverse_charge) {
    m_vat_reverse_charge = vat_reverse_charge;
    m_vat_reverse_charge_isSet = true;
}

bool OAIInvoice::is_vat_reverse_charge_Set() const{
    return m_vat_reverse_charge_isSet;
}

bool OAIInvoice::is_vat_reverse_charge_Valid() const{
    return m_vat_reverse_charge_isValid;
}

QString OAIInvoice::getX2y() const {
    return m_x2y;
}
void OAIInvoice::setX2y(const QString &x2y) {
    m_x2y = x2y;
    m_x2y_isSet = true;
}

bool OAIInvoice::is_x2y_Set() const{
    return m_x2y_isSet;
}

bool OAIInvoice::is_x2y_Valid() const{
    return m_x2y_isValid;
}

bool OAIInvoice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounting_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounting_currency_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounting_currency_tax_amount_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounting_customer_party.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounting_supplier_party.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowance_charges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_including_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_tax_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_document_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_currency_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_means_array.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_means_bic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_means_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_means_iban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_means_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_invoice_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepaid_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_billing_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_exempt_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_point_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_subtotals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes_duties_fees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ubl_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_reverse_charge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x2y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accounting_customer_party_isValid && m_amount_including_vat_isValid && m_invoice_lines_isValid && m_invoice_number_isValid && m_issue_date_isValid && true;
}

} // namespace OpenAPI
