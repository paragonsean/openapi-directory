/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountrySpecificationIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountrySpecificationIdentifier::OAICountrySpecificationIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountrySpecificationIdentifier::OAICountrySpecificationIdentifier() {
    this->initializeModel();
}

OAICountrySpecificationIdentifier::~OAICountrySpecificationIdentifier() {}

void OAICountrySpecificationIdentifier::initializeModel() {

    m_centalized_identifier_test_isSet = false;
    m_centalized_identifier_test_isValid = false;

    m_centralized_isSet = false;
    m_centralized_isValid = false;

    m_centralized_identifier_isSet = false;
    m_centralized_identifier_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;

    m_scheme_numercial_isSet = false;
    m_scheme_numercial_isValid = false;

    m_scheme_type_isSet = false;
    m_scheme_type_isValid = false;
}

void OAICountrySpecificationIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountrySpecificationIdentifier::fromJsonObject(QJsonObject json) {

    m_centalized_identifier_test_isValid = ::OpenAPI::fromJsonValue(m_centalized_identifier_test, json[QString("centalized_identifier_test")]);
    m_centalized_identifier_test_isSet = !json[QString("centalized_identifier_test")].isNull() && m_centalized_identifier_test_isValid;

    m_centralized_isValid = ::OpenAPI::fromJsonValue(m_centralized, json[QString("centralized")]);
    m_centralized_isSet = !json[QString("centralized")].isNull() && m_centralized_isValid;

    m_centralized_identifier_isValid = ::OpenAPI::fromJsonValue(m_centralized_identifier, json[QString("centralized_identifier")]);
    m_centralized_identifier_isSet = !json[QString("centralized_identifier")].isNull() && m_centralized_identifier_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("scheme")]);
    m_scheme_isSet = !json[QString("scheme")].isNull() && m_scheme_isValid;

    m_scheme_numercial_isValid = ::OpenAPI::fromJsonValue(m_scheme_numercial, json[QString("scheme_numercial")]);
    m_scheme_numercial_isSet = !json[QString("scheme_numercial")].isNull() && m_scheme_numercial_isValid;

    m_scheme_type_isValid = ::OpenAPI::fromJsonValue(m_scheme_type, json[QString("scheme_type")]);
    m_scheme_type_isSet = !json[QString("scheme_type")].isNull() && m_scheme_type_isValid;
}

QString OAICountrySpecificationIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountrySpecificationIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_centalized_identifier_test_isSet) {
        obj.insert(QString("centalized_identifier_test"), ::OpenAPI::toJsonValue(m_centalized_identifier_test));
    }
    if (m_centralized_isSet) {
        obj.insert(QString("centralized"), ::OpenAPI::toJsonValue(m_centralized));
    }
    if (m_centralized_identifier_isSet) {
        obj.insert(QString("centralized_identifier"), ::OpenAPI::toJsonValue(m_centralized_identifier));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_scheme_isSet) {
        obj.insert(QString("scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    if (m_scheme_numercial_isSet) {
        obj.insert(QString("scheme_numercial"), ::OpenAPI::toJsonValue(m_scheme_numercial));
    }
    if (m_scheme_type_isSet) {
        obj.insert(QString("scheme_type"), ::OpenAPI::toJsonValue(m_scheme_type));
    }
    return obj;
}

QString OAICountrySpecificationIdentifier::getCentalizedIdentifierTest() const {
    return m_centalized_identifier_test;
}
void OAICountrySpecificationIdentifier::setCentalizedIdentifierTest(const QString &centalized_identifier_test) {
    m_centalized_identifier_test = centalized_identifier_test;
    m_centalized_identifier_test_isSet = true;
}

bool OAICountrySpecificationIdentifier::is_centalized_identifier_test_Set() const{
    return m_centalized_identifier_test_isSet;
}

bool OAICountrySpecificationIdentifier::is_centalized_identifier_test_Valid() const{
    return m_centalized_identifier_test_isValid;
}

bool OAICountrySpecificationIdentifier::isCentralized() const {
    return m_centralized;
}
void OAICountrySpecificationIdentifier::setCentralized(const bool &centralized) {
    m_centralized = centralized;
    m_centralized_isSet = true;
}

bool OAICountrySpecificationIdentifier::is_centralized_Set() const{
    return m_centralized_isSet;
}

bool OAICountrySpecificationIdentifier::is_centralized_Valid() const{
    return m_centralized_isValid;
}

QString OAICountrySpecificationIdentifier::getCentralizedIdentifier() const {
    return m_centralized_identifier;
}
void OAICountrySpecificationIdentifier::setCentralizedIdentifier(const QString &centralized_identifier) {
    m_centralized_identifier = centralized_identifier;
    m_centralized_identifier_isSet = true;
}

bool OAICountrySpecificationIdentifier::is_centralized_identifier_Set() const{
    return m_centralized_identifier_isSet;
}

bool OAICountrySpecificationIdentifier::is_centralized_identifier_Valid() const{
    return m_centralized_identifier_isValid;
}

QString OAICountrySpecificationIdentifier::getDescription() const {
    return m_description;
}
void OAICountrySpecificationIdentifier::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICountrySpecificationIdentifier::is_description_Set() const{
    return m_description_isSet;
}

bool OAICountrySpecificationIdentifier::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICountrySpecificationIdentifier::getScheme() const {
    return m_scheme;
}
void OAICountrySpecificationIdentifier::setScheme(const QString &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAICountrySpecificationIdentifier::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAICountrySpecificationIdentifier::is_scheme_Valid() const{
    return m_scheme_isValid;
}

QString OAICountrySpecificationIdentifier::getSchemeNumercial() const {
    return m_scheme_numercial;
}
void OAICountrySpecificationIdentifier::setSchemeNumercial(const QString &scheme_numercial) {
    m_scheme_numercial = scheme_numercial;
    m_scheme_numercial_isSet = true;
}

bool OAICountrySpecificationIdentifier::is_scheme_numercial_Set() const{
    return m_scheme_numercial_isSet;
}

bool OAICountrySpecificationIdentifier::is_scheme_numercial_Valid() const{
    return m_scheme_numercial_isValid;
}

QString OAICountrySpecificationIdentifier::getSchemeType() const {
    return m_scheme_type;
}
void OAICountrySpecificationIdentifier::setSchemeType(const QString &scheme_type) {
    m_scheme_type = scheme_type;
    m_scheme_type_isSet = true;
}

bool OAICountrySpecificationIdentifier::is_scheme_type_Set() const{
    return m_scheme_type_isSet;
}

bool OAICountrySpecificationIdentifier::is_scheme_type_Valid() const{
    return m_scheme_type_isValid;
}

bool OAICountrySpecificationIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_centalized_identifier_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_centralized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_centralized_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_numercial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountrySpecificationIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
