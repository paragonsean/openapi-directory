/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoiceLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoiceLine::OAIInvoiceLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoiceLine::OAIInvoiceLine() {
    this->initializeModel();
}

OAIInvoiceLine::~OAIInvoiceLine() {}

void OAIInvoiceLine::initializeModel() {

    m_accounting_cost_isSet = false;
    m_accounting_cost_isValid = false;

    m_additional_item_properties_isSet = false;
    m_additional_item_properties_isValid = false;

    m_allowance_charge_isSet = false;
    m_allowance_charge_isValid = false;

    m_allowance_charges_isSet = false;
    m_allowance_charges_isValid = false;

    m_amount_excluding_tax_isSet = false;
    m_amount_excluding_tax_isValid = false;

    m_amount_excluding_vat_isSet = false;
    m_amount_excluding_vat_isValid = false;

    m_amount_including_tax_isSet = false;
    m_amount_including_tax_isValid = false;

    m_buyers_item_identification_isSet = false;
    m_buyers_item_identification_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_invoice_period_isSet = false;
    m_invoice_period_isValid = false;

    m_item_price_isSet = false;
    m_item_price_isValid = false;

    m_line_id_isSet = false;
    m_line_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_line_reference_line_id_isSet = false;
    m_order_line_reference_line_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_quantity_unit_code_isSet = false;
    m_quantity_unit_code_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_sellers_item_identification_isSet = false;
    m_sellers_item_identification_isValid = false;

    m_standard_item_identification_isSet = false;
    m_standard_item_identification_isValid = false;

    m_standard_item_identification_scheme_agency_id_isSet = false;
    m_standard_item_identification_scheme_agency_id_isValid = false;

    m_standard_item_identification_scheme_id_isSet = false;
    m_standard_item_identification_scheme_id_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_taxes_duties_fees_isSet = false;
    m_taxes_duties_fees_isValid = false;
}

void OAIInvoiceLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoiceLine::fromJsonObject(QJsonObject json) {

    m_accounting_cost_isValid = ::OpenAPI::fromJsonValue(m_accounting_cost, json[QString("accountingCost")]);
    m_accounting_cost_isSet = !json[QString("accountingCost")].isNull() && m_accounting_cost_isValid;

    m_additional_item_properties_isValid = ::OpenAPI::fromJsonValue(m_additional_item_properties, json[QString("additionalItemProperties")]);
    m_additional_item_properties_isSet = !json[QString("additionalItemProperties")].isNull() && m_additional_item_properties_isValid;

    m_allowance_charge_isValid = ::OpenAPI::fromJsonValue(m_allowance_charge, json[QString("allowanceCharge")]);
    m_allowance_charge_isSet = !json[QString("allowanceCharge")].isNull() && m_allowance_charge_isValid;

    m_allowance_charges_isValid = ::OpenAPI::fromJsonValue(m_allowance_charges, json[QString("allowanceCharges")]);
    m_allowance_charges_isSet = !json[QString("allowanceCharges")].isNull() && m_allowance_charges_isValid;

    m_amount_excluding_tax_isValid = ::OpenAPI::fromJsonValue(m_amount_excluding_tax, json[QString("amountExcludingTax")]);
    m_amount_excluding_tax_isSet = !json[QString("amountExcludingTax")].isNull() && m_amount_excluding_tax_isValid;

    m_amount_excluding_vat_isValid = ::OpenAPI::fromJsonValue(m_amount_excluding_vat, json[QString("amountExcludingVat")]);
    m_amount_excluding_vat_isSet = !json[QString("amountExcludingVat")].isNull() && m_amount_excluding_vat_isValid;

    m_amount_including_tax_isValid = ::OpenAPI::fromJsonValue(m_amount_including_tax, json[QString("amountIncludingTax")]);
    m_amount_including_tax_isSet = !json[QString("amountIncludingTax")].isNull() && m_amount_including_tax_isValid;

    m_buyers_item_identification_isValid = ::OpenAPI::fromJsonValue(m_buyers_item_identification, json[QString("buyersItemIdentification")]);
    m_buyers_item_identification_isSet = !json[QString("buyersItemIdentification")].isNull() && m_buyers_item_identification_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_invoice_period_isValid = ::OpenAPI::fromJsonValue(m_invoice_period, json[QString("invoicePeriod")]);
    m_invoice_period_isSet = !json[QString("invoicePeriod")].isNull() && m_invoice_period_isValid;

    m_item_price_isValid = ::OpenAPI::fromJsonValue(m_item_price, json[QString("itemPrice")]);
    m_item_price_isSet = !json[QString("itemPrice")].isNull() && m_item_price_isValid;

    m_line_id_isValid = ::OpenAPI::fromJsonValue(m_line_id, json[QString("lineId")]);
    m_line_id_isSet = !json[QString("lineId")].isNull() && m_line_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_line_reference_line_id_isValid = ::OpenAPI::fromJsonValue(m_order_line_reference_line_id, json[QString("orderLineReferenceLineId")]);
    m_order_line_reference_line_id_isSet = !json[QString("orderLineReferenceLineId")].isNull() && m_order_line_reference_line_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_quantity_unit_code_isValid = ::OpenAPI::fromJsonValue(m_quantity_unit_code, json[QString("quantityUnitCode")]);
    m_quantity_unit_code_isSet = !json[QString("quantityUnitCode")].isNull() && m_quantity_unit_code_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;

    m_sellers_item_identification_isValid = ::OpenAPI::fromJsonValue(m_sellers_item_identification, json[QString("sellersItemIdentification")]);
    m_sellers_item_identification_isSet = !json[QString("sellersItemIdentification")].isNull() && m_sellers_item_identification_isValid;

    m_standard_item_identification_isValid = ::OpenAPI::fromJsonValue(m_standard_item_identification, json[QString("standardItemIdentification")]);
    m_standard_item_identification_isSet = !json[QString("standardItemIdentification")].isNull() && m_standard_item_identification_isValid;

    m_standard_item_identification_scheme_agency_id_isValid = ::OpenAPI::fromJsonValue(m_standard_item_identification_scheme_agency_id, json[QString("standardItemIdentificationSchemeAgencyId")]);
    m_standard_item_identification_scheme_agency_id_isSet = !json[QString("standardItemIdentificationSchemeAgencyId")].isNull() && m_standard_item_identification_scheme_agency_id_isValid;

    m_standard_item_identification_scheme_id_isValid = ::OpenAPI::fromJsonValue(m_standard_item_identification_scheme_id, json[QString("standardItemIdentificationSchemeId")]);
    m_standard_item_identification_scheme_id_isSet = !json[QString("standardItemIdentificationSchemeId")].isNull() && m_standard_item_identification_scheme_id_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_taxes_duties_fees_isValid = ::OpenAPI::fromJsonValue(m_taxes_duties_fees, json[QString("taxesDutiesFees")]);
    m_taxes_duties_fees_isSet = !json[QString("taxesDutiesFees")].isNull() && m_taxes_duties_fees_isValid;
}

QString OAIInvoiceLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoiceLine::asJsonObject() const {
    QJsonObject obj;
    if (m_accounting_cost_isSet) {
        obj.insert(QString("accountingCost"), ::OpenAPI::toJsonValue(m_accounting_cost));
    }
    if (m_additional_item_properties.size() > 0) {
        obj.insert(QString("additionalItemProperties"), ::OpenAPI::toJsonValue(m_additional_item_properties));
    }
    if (m_allowance_charge_isSet) {
        obj.insert(QString("allowanceCharge"), ::OpenAPI::toJsonValue(m_allowance_charge));
    }
    if (m_allowance_charges.size() > 0) {
        obj.insert(QString("allowanceCharges"), ::OpenAPI::toJsonValue(m_allowance_charges));
    }
    if (m_amount_excluding_tax_isSet) {
        obj.insert(QString("amountExcludingTax"), ::OpenAPI::toJsonValue(m_amount_excluding_tax));
    }
    if (m_amount_excluding_vat_isSet) {
        obj.insert(QString("amountExcludingVat"), ::OpenAPI::toJsonValue(m_amount_excluding_vat));
    }
    if (m_amount_including_tax_isSet) {
        obj.insert(QString("amountIncludingTax"), ::OpenAPI::toJsonValue(m_amount_including_tax));
    }
    if (m_buyers_item_identification_isSet) {
        obj.insert(QString("buyersItemIdentification"), ::OpenAPI::toJsonValue(m_buyers_item_identification));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_invoice_period_isSet) {
        obj.insert(QString("invoicePeriod"), ::OpenAPI::toJsonValue(m_invoice_period));
    }
    if (m_item_price_isSet) {
        obj.insert(QString("itemPrice"), ::OpenAPI::toJsonValue(m_item_price));
    }
    if (m_line_id_isSet) {
        obj.insert(QString("lineId"), ::OpenAPI::toJsonValue(m_line_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_line_reference_line_id_isSet) {
        obj.insert(QString("orderLineReferenceLineId"), ::OpenAPI::toJsonValue(m_order_line_reference_line_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_quantity_unit_code_isSet) {
        obj.insert(QString("quantityUnitCode"), ::OpenAPI::toJsonValue(m_quantity_unit_code));
    }
    if (m_references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_sellers_item_identification_isSet) {
        obj.insert(QString("sellersItemIdentification"), ::OpenAPI::toJsonValue(m_sellers_item_identification));
    }
    if (m_standard_item_identification_isSet) {
        obj.insert(QString("standardItemIdentification"), ::OpenAPI::toJsonValue(m_standard_item_identification));
    }
    if (m_standard_item_identification_scheme_agency_id_isSet) {
        obj.insert(QString("standardItemIdentificationSchemeAgencyId"), ::OpenAPI::toJsonValue(m_standard_item_identification_scheme_agency_id));
    }
    if (m_standard_item_identification_scheme_id_isSet) {
        obj.insert(QString("standardItemIdentificationSchemeId"), ::OpenAPI::toJsonValue(m_standard_item_identification_scheme_id));
    }
    if (m_tax.isSet()) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_taxes_duties_fees.size() > 0) {
        obj.insert(QString("taxesDutiesFees"), ::OpenAPI::toJsonValue(m_taxes_duties_fees));
    }
    return obj;
}

QString OAIInvoiceLine::getAccountingCost() const {
    return m_accounting_cost;
}
void OAIInvoiceLine::setAccountingCost(const QString &accounting_cost) {
    m_accounting_cost = accounting_cost;
    m_accounting_cost_isSet = true;
}

bool OAIInvoiceLine::is_accounting_cost_Set() const{
    return m_accounting_cost_isSet;
}

bool OAIInvoiceLine::is_accounting_cost_Valid() const{
    return m_accounting_cost_isValid;
}

QList<OAIAdditionalItemProperty> OAIInvoiceLine::getAdditionalItemProperties() const {
    return m_additional_item_properties;
}
void OAIInvoiceLine::setAdditionalItemProperties(const QList<OAIAdditionalItemProperty> &additional_item_properties) {
    m_additional_item_properties = additional_item_properties;
    m_additional_item_properties_isSet = true;
}

bool OAIInvoiceLine::is_additional_item_properties_Set() const{
    return m_additional_item_properties_isSet;
}

bool OAIInvoiceLine::is_additional_item_properties_Valid() const{
    return m_additional_item_properties_isValid;
}

double OAIInvoiceLine::getAllowanceCharge() const {
    return m_allowance_charge;
}
void OAIInvoiceLine::setAllowanceCharge(const double &allowance_charge) {
    m_allowance_charge = allowance_charge;
    m_allowance_charge_isSet = true;
}

bool OAIInvoiceLine::is_allowance_charge_Set() const{
    return m_allowance_charge_isSet;
}

bool OAIInvoiceLine::is_allowance_charge_Valid() const{
    return m_allowance_charge_isValid;
}

QList<OAILineAllowanceCharge> OAIInvoiceLine::getAllowanceCharges() const {
    return m_allowance_charges;
}
void OAIInvoiceLine::setAllowanceCharges(const QList<OAILineAllowanceCharge> &allowance_charges) {
    m_allowance_charges = allowance_charges;
    m_allowance_charges_isSet = true;
}

bool OAIInvoiceLine::is_allowance_charges_Set() const{
    return m_allowance_charges_isSet;
}

bool OAIInvoiceLine::is_allowance_charges_Valid() const{
    return m_allowance_charges_isValid;
}

double OAIInvoiceLine::getAmountExcludingTax() const {
    return m_amount_excluding_tax;
}
void OAIInvoiceLine::setAmountExcludingTax(const double &amount_excluding_tax) {
    m_amount_excluding_tax = amount_excluding_tax;
    m_amount_excluding_tax_isSet = true;
}

bool OAIInvoiceLine::is_amount_excluding_tax_Set() const{
    return m_amount_excluding_tax_isSet;
}

bool OAIInvoiceLine::is_amount_excluding_tax_Valid() const{
    return m_amount_excluding_tax_isValid;
}

double OAIInvoiceLine::getAmountExcludingVat() const {
    return m_amount_excluding_vat;
}
void OAIInvoiceLine::setAmountExcludingVat(const double &amount_excluding_vat) {
    m_amount_excluding_vat = amount_excluding_vat;
    m_amount_excluding_vat_isSet = true;
}

bool OAIInvoiceLine::is_amount_excluding_vat_Set() const{
    return m_amount_excluding_vat_isSet;
}

bool OAIInvoiceLine::is_amount_excluding_vat_Valid() const{
    return m_amount_excluding_vat_isValid;
}

double OAIInvoiceLine::getAmountIncludingTax() const {
    return m_amount_including_tax;
}
void OAIInvoiceLine::setAmountIncludingTax(const double &amount_including_tax) {
    m_amount_including_tax = amount_including_tax;
    m_amount_including_tax_isSet = true;
}

bool OAIInvoiceLine::is_amount_including_tax_Set() const{
    return m_amount_including_tax_isSet;
}

bool OAIInvoiceLine::is_amount_including_tax_Valid() const{
    return m_amount_including_tax_isValid;
}

QString OAIInvoiceLine::getBuyersItemIdentification() const {
    return m_buyers_item_identification;
}
void OAIInvoiceLine::setBuyersItemIdentification(const QString &buyers_item_identification) {
    m_buyers_item_identification = buyers_item_identification;
    m_buyers_item_identification_isSet = true;
}

bool OAIInvoiceLine::is_buyers_item_identification_Set() const{
    return m_buyers_item_identification_isSet;
}

bool OAIInvoiceLine::is_buyers_item_identification_Valid() const{
    return m_buyers_item_identification_isValid;
}

QString OAIInvoiceLine::getDescription() const {
    return m_description;
}
void OAIInvoiceLine::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInvoiceLine::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInvoiceLine::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIInvoiceLine::getInvoicePeriod() const {
    return m_invoice_period;
}
void OAIInvoiceLine::setInvoicePeriod(const QString &invoice_period) {
    m_invoice_period = invoice_period;
    m_invoice_period_isSet = true;
}

bool OAIInvoiceLine::is_invoice_period_Set() const{
    return m_invoice_period_isSet;
}

bool OAIInvoiceLine::is_invoice_period_Valid() const{
    return m_invoice_period_isValid;
}

double OAIInvoiceLine::getItemPrice() const {
    return m_item_price;
}
void OAIInvoiceLine::setItemPrice(const double &item_price) {
    m_item_price = item_price;
    m_item_price_isSet = true;
}

bool OAIInvoiceLine::is_item_price_Set() const{
    return m_item_price_isSet;
}

bool OAIInvoiceLine::is_item_price_Valid() const{
    return m_item_price_isValid;
}

QString OAIInvoiceLine::getLineId() const {
    return m_line_id;
}
void OAIInvoiceLine::setLineId(const QString &line_id) {
    m_line_id = line_id;
    m_line_id_isSet = true;
}

bool OAIInvoiceLine::is_line_id_Set() const{
    return m_line_id_isSet;
}

bool OAIInvoiceLine::is_line_id_Valid() const{
    return m_line_id_isValid;
}

QString OAIInvoiceLine::getName() const {
    return m_name;
}
void OAIInvoiceLine::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInvoiceLine::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInvoiceLine::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInvoiceLine::getNote() const {
    return m_note;
}
void OAIInvoiceLine::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIInvoiceLine::is_note_Set() const{
    return m_note_isSet;
}

bool OAIInvoiceLine::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIInvoiceLine::getOrderLineReferenceLineId() const {
    return m_order_line_reference_line_id;
}
void OAIInvoiceLine::setOrderLineReferenceLineId(const QString &order_line_reference_line_id) {
    m_order_line_reference_line_id = order_line_reference_line_id;
    m_order_line_reference_line_id_isSet = true;
}

bool OAIInvoiceLine::is_order_line_reference_line_id_Set() const{
    return m_order_line_reference_line_id_isSet;
}

bool OAIInvoiceLine::is_order_line_reference_line_id_Valid() const{
    return m_order_line_reference_line_id_isValid;
}

double OAIInvoiceLine::getQuantity() const {
    return m_quantity;
}
void OAIInvoiceLine::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIInvoiceLine::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIInvoiceLine::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIInvoiceLine::getQuantityUnitCode() const {
    return m_quantity_unit_code;
}
void OAIInvoiceLine::setQuantityUnitCode(const QString &quantity_unit_code) {
    m_quantity_unit_code = quantity_unit_code;
    m_quantity_unit_code_isSet = true;
}

bool OAIInvoiceLine::is_quantity_unit_code_Set() const{
    return m_quantity_unit_code_isSet;
}

bool OAIInvoiceLine::is_quantity_unit_code_Valid() const{
    return m_quantity_unit_code_isValid;
}

QList<OAIReference> OAIInvoiceLine::getReferences() const {
    return m_references;
}
void OAIInvoiceLine::setReferences(const QList<OAIReference> &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAIInvoiceLine::is_references_Set() const{
    return m_references_isSet;
}

bool OAIInvoiceLine::is_references_Valid() const{
    return m_references_isValid;
}

QString OAIInvoiceLine::getSellersItemIdentification() const {
    return m_sellers_item_identification;
}
void OAIInvoiceLine::setSellersItemIdentification(const QString &sellers_item_identification) {
    m_sellers_item_identification = sellers_item_identification;
    m_sellers_item_identification_isSet = true;
}

bool OAIInvoiceLine::is_sellers_item_identification_Set() const{
    return m_sellers_item_identification_isSet;
}

bool OAIInvoiceLine::is_sellers_item_identification_Valid() const{
    return m_sellers_item_identification_isValid;
}

QString OAIInvoiceLine::getStandardItemIdentification() const {
    return m_standard_item_identification;
}
void OAIInvoiceLine::setStandardItemIdentification(const QString &standard_item_identification) {
    m_standard_item_identification = standard_item_identification;
    m_standard_item_identification_isSet = true;
}

bool OAIInvoiceLine::is_standard_item_identification_Set() const{
    return m_standard_item_identification_isSet;
}

bool OAIInvoiceLine::is_standard_item_identification_Valid() const{
    return m_standard_item_identification_isValid;
}

QString OAIInvoiceLine::getStandardItemIdentificationSchemeAgencyId() const {
    return m_standard_item_identification_scheme_agency_id;
}
void OAIInvoiceLine::setStandardItemIdentificationSchemeAgencyId(const QString &standard_item_identification_scheme_agency_id) {
    m_standard_item_identification_scheme_agency_id = standard_item_identification_scheme_agency_id;
    m_standard_item_identification_scheme_agency_id_isSet = true;
}

bool OAIInvoiceLine::is_standard_item_identification_scheme_agency_id_Set() const{
    return m_standard_item_identification_scheme_agency_id_isSet;
}

bool OAIInvoiceLine::is_standard_item_identification_scheme_agency_id_Valid() const{
    return m_standard_item_identification_scheme_agency_id_isValid;
}

QString OAIInvoiceLine::getStandardItemIdentificationSchemeId() const {
    return m_standard_item_identification_scheme_id;
}
void OAIInvoiceLine::setStandardItemIdentificationSchemeId(const QString &standard_item_identification_scheme_id) {
    m_standard_item_identification_scheme_id = standard_item_identification_scheme_id;
    m_standard_item_identification_scheme_id_isSet = true;
}

bool OAIInvoiceLine::is_standard_item_identification_scheme_id_Set() const{
    return m_standard_item_identification_scheme_id_isSet;
}

bool OAIInvoiceLine::is_standard_item_identification_scheme_id_Valid() const{
    return m_standard_item_identification_scheme_id_isValid;
}

OAITax OAIInvoiceLine::getTax() const {
    return m_tax;
}
void OAIInvoiceLine::setTax(const OAITax &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIInvoiceLine::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIInvoiceLine::is_tax_Valid() const{
    return m_tax_isValid;
}

QList<OAITax> OAIInvoiceLine::getTaxesDutiesFees() const {
    return m_taxes_duties_fees;
}
void OAIInvoiceLine::setTaxesDutiesFees(const QList<OAITax> &taxes_duties_fees) {
    m_taxes_duties_fees = taxes_duties_fees;
    m_taxes_duties_fees_isSet = true;
}

bool OAIInvoiceLine::is_taxes_duties_fees_Set() const{
    return m_taxes_duties_fees_isSet;
}

bool OAIInvoiceLine::is_taxes_duties_fees_Valid() const{
    return m_taxes_duties_fees_isValid;
}

bool OAIInvoiceLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounting_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_item_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowance_charge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowance_charges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_excluding_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_excluding_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_including_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyers_item_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_line_reference_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_unit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sellers_item_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_item_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_item_identification_scheme_agency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_item_identification_scheme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes_duties_fees.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoiceLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
