/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRouting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRouting::OAIRouting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRouting::OAIRouting() {
    this->initializeModel();
}

OAIRouting::~OAIRouting() {}

void OAIRouting::initializeModel() {

    m_clear_without_sending_isSet = false;
    m_clear_without_sending_isValid = false;

    m_e_identifiers_isSet = false;
    m_e_identifiers_isValid = false;

    m_emails_isSet = false;
    m_emails_isValid = false;
}

void OAIRouting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRouting::fromJsonObject(QJsonObject json) {

    m_clear_without_sending_isValid = ::OpenAPI::fromJsonValue(m_clear_without_sending, json[QString("clearWithoutSending")]);
    m_clear_without_sending_isSet = !json[QString("clearWithoutSending")].isNull() && m_clear_without_sending_isValid;

    m_e_identifiers_isValid = ::OpenAPI::fromJsonValue(m_e_identifiers, json[QString("eIdentifiers")]);
    m_e_identifiers_isSet = !json[QString("eIdentifiers")].isNull() && m_e_identifiers_isValid;

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;
}

QString OAIRouting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRouting::asJsonObject() const {
    QJsonObject obj;
    if (m_clear_without_sending_isSet) {
        obj.insert(QString("clearWithoutSending"), ::OpenAPI::toJsonValue(m_clear_without_sending));
    }
    if (m_e_identifiers.size() > 0) {
        obj.insert(QString("eIdentifiers"), ::OpenAPI::toJsonValue(m_e_identifiers));
    }
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    return obj;
}

bool OAIRouting::isClearWithoutSending() const {
    return m_clear_without_sending;
}
void OAIRouting::setClearWithoutSending(const bool &clear_without_sending) {
    m_clear_without_sending = clear_without_sending;
    m_clear_without_sending_isSet = true;
}

bool OAIRouting::is_clear_without_sending_Set() const{
    return m_clear_without_sending_isSet;
}

bool OAIRouting::is_clear_without_sending_Valid() const{
    return m_clear_without_sending_isValid;
}

QList<OAIRoutingIdentifier> OAIRouting::getEIdentifiers() const {
    return m_e_identifiers;
}
void OAIRouting::setEIdentifiers(const QList<OAIRoutingIdentifier> &e_identifiers) {
    m_e_identifiers = e_identifiers;
    m_e_identifiers_isSet = true;
}

bool OAIRouting::is_e_identifiers_Set() const{
    return m_e_identifiers_isSet;
}

bool OAIRouting::is_e_identifiers_Valid() const{
    return m_e_identifiers_isValid;
}

QList<QString> OAIRouting::getEmails() const {
    return m_emails;
}
void OAIRouting::setEmails(const QList<QString> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIRouting::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIRouting::is_emails_Valid() const{
    return m_emails_isValid;
}

bool OAIRouting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clear_without_sending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_identifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRouting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
