/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoiceSubmissionEvidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoiceSubmissionEvidence::OAIInvoiceSubmissionEvidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoiceSubmissionEvidence::OAIInvoiceSubmissionEvidence() {
    this->initializeModel();
}

OAIInvoiceSubmissionEvidence::~OAIInvoiceSubmissionEvidence() {}

void OAIInvoiceSubmissionEvidence::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIInvoiceSubmissionEvidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoiceSubmissionEvidence::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIInvoiceSubmissionEvidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoiceSubmissionEvidence::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<OAIInvoiceSubmissionActionEvidence> OAIInvoiceSubmissionEvidence::getActions() const {
    return m_actions;
}
void OAIInvoiceSubmissionEvidence::setActions(const QList<OAIInvoiceSubmissionActionEvidence> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIInvoiceSubmissionEvidence::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIInvoiceSubmissionEvidence::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAIInvoiceSubmissionEvidence::getGuid() const {
    return m_guid;
}
void OAIInvoiceSubmissionEvidence::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIInvoiceSubmissionEvidence::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIInvoiceSubmissionEvidence::is_guid_Valid() const{
    return m_guid_isValid;
}

QString OAIInvoiceSubmissionEvidence::getStatus() const {
    return m_status;
}
void OAIInvoiceSubmissionEvidence::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInvoiceSubmissionEvidence::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInvoiceSubmissionEvidence::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIInvoiceSubmissionEvidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoiceSubmissionEvidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
