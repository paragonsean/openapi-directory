/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeppolIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeppolIdentifier::OAIPeppolIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeppolIdentifier::OAIPeppolIdentifier() {
    this->initializeModel();
}

OAIPeppolIdentifier::~OAIPeppolIdentifier() {}

void OAIPeppolIdentifier::initializeModel() {

    m_corppass_isSet = false;
    m_corppass_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;

    m_superscheme_isSet = false;
    m_superscheme_isValid = false;
}

void OAIPeppolIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeppolIdentifier::fromJsonObject(QJsonObject json) {

    m_corppass_isValid = ::OpenAPI::fromJsonValue(m_corppass, json[QString("corppass")]);
    m_corppass_isSet = !json[QString("corppass")].isNull() && m_corppass_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("scheme")]);
    m_scheme_isSet = !json[QString("scheme")].isNull() && m_scheme_isValid;

    m_superscheme_isValid = ::OpenAPI::fromJsonValue(m_superscheme, json[QString("superscheme")]);
    m_superscheme_isSet = !json[QString("superscheme")].isNull() && m_superscheme_isValid;
}

QString OAIPeppolIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeppolIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_corppass.isSet()) {
        obj.insert(QString("corppass"), ::OpenAPI::toJsonValue(m_corppass));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_scheme_isSet) {
        obj.insert(QString("scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    if (m_superscheme_isSet) {
        obj.insert(QString("superscheme"), ::OpenAPI::toJsonValue(m_superscheme));
    }
    return obj;
}

OAICorpPass OAIPeppolIdentifier::getCorppass() const {
    return m_corppass;
}
void OAIPeppolIdentifier::setCorppass(const OAICorpPass &corppass) {
    m_corppass = corppass;
    m_corppass_isSet = true;
}

bool OAIPeppolIdentifier::is_corppass_Set() const{
    return m_corppass_isSet;
}

bool OAIPeppolIdentifier::is_corppass_Valid() const{
    return m_corppass_isValid;
}

QString OAIPeppolIdentifier::getIdentifier() const {
    return m_identifier;
}
void OAIPeppolIdentifier::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIPeppolIdentifier::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIPeppolIdentifier::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIPeppolIdentifier::getScheme() const {
    return m_scheme;
}
void OAIPeppolIdentifier::setScheme(const QString &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAIPeppolIdentifier::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAIPeppolIdentifier::is_scheme_Valid() const{
    return m_scheme_isValid;
}

QString OAIPeppolIdentifier::getSuperscheme() const {
    return m_superscheme;
}
void OAIPeppolIdentifier::setSuperscheme(const QString &superscheme) {
    m_superscheme = superscheme;
    m_superscheme_isSet = true;
}

bool OAIPeppolIdentifier::is_superscheme_Set() const{
    return m_superscheme_isSet;
}

bool OAIPeppolIdentifier::is_superscheme_Valid() const{
    return m_superscheme_isValid;
}

bool OAIPeppolIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_corppass.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_superscheme_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeppolIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
