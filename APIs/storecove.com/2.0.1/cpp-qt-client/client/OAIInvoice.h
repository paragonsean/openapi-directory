/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInvoice.h
 *
 * The invoice to send. Provide either invoice, or invoiceData, but not both.
 */

#ifndef OAIInvoice_H
#define OAIInvoice_H

#include <QJsonObject>

#include "OAIAccountingCustomerParty.h"
#include "OAIAccountingSupplierParty.h"
#include "OAIAllowanceCharge.h"
#include "OAIAttachment.h"
#include "OAICurrencyCode.h"
#include "OAIDelivery.h"
#include "OAIInvoiceLine.h"
#include "OAIPaymentMeans.h"
#include "OAIPaymentTerms.h"
#include "OAIReference.h"
#include "OAITax.h"
#include "OAITaxSubtotal.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccountingCustomerParty;
class OAIAccountingSupplierParty;
class OAIAllowanceCharge;
class OAIAttachment;
class OAIDelivery;
class OAIInvoiceLine;
class OAIPaymentMeans;
class OAIPaymentTerms;
class OAIReference;
class OAITaxSubtotal;
class OAITax;

class OAIInvoice : public OAIObject {
public:
    OAIInvoice();
    OAIInvoice(QString json);
    ~OAIInvoice() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountingCost() const;
    void setAccountingCost(const QString &accounting_cost);
    bool is_accounting_cost_Set() const;
    bool is_accounting_cost_Valid() const;

    double getAccountingCurrencyTaxAmount() const;
    void setAccountingCurrencyTaxAmount(const double &accounting_currency_tax_amount);
    bool is_accounting_currency_tax_amount_Set() const;
    bool is_accounting_currency_tax_amount_Valid() const;

    OAICurrencyCode getAccountingCurrencyTaxAmountCurrency() const;
    void setAccountingCurrencyTaxAmountCurrency(const OAICurrencyCode &accounting_currency_tax_amount_currency);
    bool is_accounting_currency_tax_amount_currency_Set() const;
    bool is_accounting_currency_tax_amount_currency_Valid() const;

    OAIAccountingCustomerParty getAccountingCustomerParty() const;
    void setAccountingCustomerParty(const OAIAccountingCustomerParty &accounting_customer_party);
    bool is_accounting_customer_party_Set() const;
    bool is_accounting_customer_party_Valid() const;

    OAIAccountingSupplierParty getAccountingSupplierParty() const;
    void setAccountingSupplierParty(const OAIAccountingSupplierParty &accounting_supplier_party);
    bool is_accounting_supplier_party_Set() const;
    bool is_accounting_supplier_party_Valid() const;

    QList<OAIAllowanceCharge> getAllowanceCharges() const;
    void setAllowanceCharges(const QList<OAIAllowanceCharge> &allowance_charges);
    bool is_allowance_charges_Set() const;
    bool is_allowance_charges_Valid() const;

    double getAmountIncludingVat() const;
    void setAmountIncludingVat(const double &amount_including_vat);
    bool is_amount_including_vat_Set() const;
    bool is_amount_including_vat_Valid() const;

    QList<OAIAttachment> getAttachments() const;
    void setAttachments(const QList<OAIAttachment> &attachments);
    bool is_attachments_Set() const;
    bool is_attachments_Valid() const;

    QString getBillingReference() const;
    void setBillingReference(const QString &billing_reference);
    bool is_billing_reference_Set() const;
    bool is_billing_reference_Valid() const;

    QString getBuyerReference() const;
    void setBuyerReference(const QString &buyer_reference);
    bool is_buyer_reference_Set() const;
    bool is_buyer_reference_Valid() const;

    bool isConsumerTaxMode() const;
    void setConsumerTaxMode(const bool &consumer_tax_mode);
    bool is_consumer_tax_mode_Set() const;
    bool is_consumer_tax_mode_Valid() const;

    QString getContractDocumentReference() const;
    void setContractDocumentReference(const QString &contract_document_reference);
    bool is_contract_document_reference_Set() const;
    bool is_contract_document_reference_Valid() const;

    OAIDelivery getDelivery() const;
    void setDelivery(const OAIDelivery &delivery);
    bool is_delivery_Set() const;
    bool is_delivery_Valid() const;

    OAICurrencyCode getDocumentCurrencyCode() const;
    void setDocumentCurrencyCode(const OAICurrencyCode &document_currency_code);
    bool is_document_currency_code_Set() const;
    bool is_document_currency_code_Valid() const;

    QString getDueDate() const;
    void setDueDate(const QString &due_date);
    bool is_due_date_Set() const;
    bool is_due_date_Valid() const;

    QList<OAIInvoiceLine> getInvoiceLines() const;
    void setInvoiceLines(const QList<OAIInvoiceLine> &invoice_lines);
    bool is_invoice_lines_Set() const;
    bool is_invoice_lines_Valid() const;

    QString getInvoiceNumber() const;
    void setInvoiceNumber(const QString &invoice_number);
    bool is_invoice_number_Set() const;
    bool is_invoice_number_Valid() const;

    QString getInvoicePeriod() const;
    void setInvoicePeriod(const QString &invoice_period);
    bool is_invoice_period_Set() const;
    bool is_invoice_period_Valid() const;

    QString getInvoiceType() const;
    void setInvoiceType(const QString &invoice_type);
    bool is_invoice_type_Set() const;
    bool is_invoice_type_Valid() const;

    QString getIssueDate() const;
    void setIssueDate(const QString &issue_date);
    bool is_issue_date_Set() const;
    bool is_issue_date_Valid() const;

    QList<QString> getIssueReasons() const;
    void setIssueReasons(const QList<QString> &issue_reasons);
    bool is_issue_reasons_Set() const;
    bool is_issue_reasons_Valid() const;

    QString getNote() const;
    void setNote(const QString &note);
    bool is_note_Set() const;
    bool is_note_Valid() const;

    QString getOrderReference() const;
    void setOrderReference(const QString &order_reference);
    bool is_order_reference_Set() const;
    bool is_order_reference_Valid() const;

    QList<OAIPaymentMeans> getPaymentMeansArray() const;
    void setPaymentMeansArray(const QList<OAIPaymentMeans> &payment_means_array);
    bool is_payment_means_array_Set() const;
    bool is_payment_means_array_Valid() const;

    QString getPaymentMeansBic() const;
    void setPaymentMeansBic(const QString &payment_means_bic);
    bool is_payment_means_bic_Set() const;
    bool is_payment_means_bic_Valid() const;

    QString getPaymentMeansCode() const;
    void setPaymentMeansCode(const QString &payment_means_code);
    bool is_payment_means_code_Set() const;
    bool is_payment_means_code_Valid() const;

    QString getPaymentMeansIban() const;
    void setPaymentMeansIban(const QString &payment_means_iban);
    bool is_payment_means_iban_Set() const;
    bool is_payment_means_iban_Valid() const;

    QString getPaymentMeansPaymentId() const;
    void setPaymentMeansPaymentId(const QString &payment_means_payment_id);
    bool is_payment_means_payment_id_Set() const;
    bool is_payment_means_payment_id_Valid() const;

    OAIPaymentTerms getPaymentTerms() const;
    void setPaymentTerms(const OAIPaymentTerms &payment_terms);
    bool is_payment_terms_Set() const;
    bool is_payment_terms_Valid() const;

    QString getPreferredInvoiceType() const;
    void setPreferredInvoiceType(const QString &preferred_invoice_type);
    bool is_preferred_invoice_type_Set() const;
    bool is_preferred_invoice_type_Valid() const;

    double getPrepaidAmount() const;
    void setPrepaidAmount(const double &prepaid_amount);
    bool is_prepaid_amount_Set() const;
    bool is_prepaid_amount_Valid() const;

    QString getPriceMode() const;
    void setPriceMode(const QString &price_mode);
    bool is_price_mode_Set() const;
    bool is_price_mode_Valid() const;

    QString getProjectReference() const;
    void setProjectReference(const QString &project_reference);
    bool is_project_reference_Set() const;
    bool is_project_reference_Valid() const;

    QList<OAIReference> getReferences() const;
    void setReferences(const QList<OAIReference> &references);
    bool is_references_Set() const;
    bool is_references_Valid() const;

    QString getSalesOrderId() const;
    void setSalesOrderId(const QString &sales_order_id);
    bool is_sales_order_id_Set() const;
    bool is_sales_order_id_Valid() const;

    bool isSelfBillingMode() const;
    void setSelfBillingMode(const bool &self_billing_mode);
    bool is_self_billing_mode_Set() const;
    bool is_self_billing_mode_Valid() const;

    QString getTaxExemptReason() const;
    void setTaxExemptReason(const QString &tax_exempt_reason);
    bool is_tax_exempt_reason_Set() const;
    bool is_tax_exempt_reason_Valid() const;

    QString getTaxPointDate() const;
    void setTaxPointDate(const QString &tax_point_date);
    bool is_tax_point_date_Set() const;
    bool is_tax_point_date_Valid() const;

    QList<OAITaxSubtotal> getTaxSubtotals() const;
    void setTaxSubtotals(const QList<OAITaxSubtotal> &tax_subtotals);
    bool is_tax_subtotals_Set() const;
    bool is_tax_subtotals_Valid() const;

    QString getTaxSystem() const;
    void setTaxSystem(const QString &tax_system);
    bool is_tax_system_Set() const;
    bool is_tax_system_Valid() const;

    QList<OAITax> getTaxesDutiesFees() const;
    void setTaxesDutiesFees(const QList<OAITax> &taxes_duties_fees);
    bool is_taxes_duties_fees_Set() const;
    bool is_taxes_duties_fees_Valid() const;

    QString getTransactionType() const;
    void setTransactionType(const QString &transaction_type);
    bool is_transaction_type_Set() const;
    bool is_transaction_type_Valid() const;

    QList<QString> getUblExtensions() const;
    void setUblExtensions(const QList<QString> &ubl_extensions);
    bool is_ubl_extensions_Set() const;
    bool is_ubl_extensions_Valid() const;

    bool isVatReverseCharge() const;
    void setVatReverseCharge(const bool &vat_reverse_charge);
    bool is_vat_reverse_charge_Set() const;
    bool is_vat_reverse_charge_Valid() const;

    QString getX2y() const;
    void setX2y(const QString &x2y);
    bool is_x2y_Set() const;
    bool is_x2y_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_accounting_cost;
    bool m_accounting_cost_isSet;
    bool m_accounting_cost_isValid;

    double m_accounting_currency_tax_amount;
    bool m_accounting_currency_tax_amount_isSet;
    bool m_accounting_currency_tax_amount_isValid;

    OAICurrencyCode m_accounting_currency_tax_amount_currency;
    bool m_accounting_currency_tax_amount_currency_isSet;
    bool m_accounting_currency_tax_amount_currency_isValid;

    OAIAccountingCustomerParty m_accounting_customer_party;
    bool m_accounting_customer_party_isSet;
    bool m_accounting_customer_party_isValid;

    OAIAccountingSupplierParty m_accounting_supplier_party;
    bool m_accounting_supplier_party_isSet;
    bool m_accounting_supplier_party_isValid;

    QList<OAIAllowanceCharge> m_allowance_charges;
    bool m_allowance_charges_isSet;
    bool m_allowance_charges_isValid;

    double m_amount_including_vat;
    bool m_amount_including_vat_isSet;
    bool m_amount_including_vat_isValid;

    QList<OAIAttachment> m_attachments;
    bool m_attachments_isSet;
    bool m_attachments_isValid;

    QString m_billing_reference;
    bool m_billing_reference_isSet;
    bool m_billing_reference_isValid;

    QString m_buyer_reference;
    bool m_buyer_reference_isSet;
    bool m_buyer_reference_isValid;

    bool m_consumer_tax_mode;
    bool m_consumer_tax_mode_isSet;
    bool m_consumer_tax_mode_isValid;

    QString m_contract_document_reference;
    bool m_contract_document_reference_isSet;
    bool m_contract_document_reference_isValid;

    OAIDelivery m_delivery;
    bool m_delivery_isSet;
    bool m_delivery_isValid;

    OAICurrencyCode m_document_currency_code;
    bool m_document_currency_code_isSet;
    bool m_document_currency_code_isValid;

    QString m_due_date;
    bool m_due_date_isSet;
    bool m_due_date_isValid;

    QList<OAIInvoiceLine> m_invoice_lines;
    bool m_invoice_lines_isSet;
    bool m_invoice_lines_isValid;

    QString m_invoice_number;
    bool m_invoice_number_isSet;
    bool m_invoice_number_isValid;

    QString m_invoice_period;
    bool m_invoice_period_isSet;
    bool m_invoice_period_isValid;

    QString m_invoice_type;
    bool m_invoice_type_isSet;
    bool m_invoice_type_isValid;

    QString m_issue_date;
    bool m_issue_date_isSet;
    bool m_issue_date_isValid;

    QList<QString> m_issue_reasons;
    bool m_issue_reasons_isSet;
    bool m_issue_reasons_isValid;

    QString m_note;
    bool m_note_isSet;
    bool m_note_isValid;

    QString m_order_reference;
    bool m_order_reference_isSet;
    bool m_order_reference_isValid;

    QList<OAIPaymentMeans> m_payment_means_array;
    bool m_payment_means_array_isSet;
    bool m_payment_means_array_isValid;

    QString m_payment_means_bic;
    bool m_payment_means_bic_isSet;
    bool m_payment_means_bic_isValid;

    QString m_payment_means_code;
    bool m_payment_means_code_isSet;
    bool m_payment_means_code_isValid;

    QString m_payment_means_iban;
    bool m_payment_means_iban_isSet;
    bool m_payment_means_iban_isValid;

    QString m_payment_means_payment_id;
    bool m_payment_means_payment_id_isSet;
    bool m_payment_means_payment_id_isValid;

    OAIPaymentTerms m_payment_terms;
    bool m_payment_terms_isSet;
    bool m_payment_terms_isValid;

    QString m_preferred_invoice_type;
    bool m_preferred_invoice_type_isSet;
    bool m_preferred_invoice_type_isValid;

    double m_prepaid_amount;
    bool m_prepaid_amount_isSet;
    bool m_prepaid_amount_isValid;

    QString m_price_mode;
    bool m_price_mode_isSet;
    bool m_price_mode_isValid;

    QString m_project_reference;
    bool m_project_reference_isSet;
    bool m_project_reference_isValid;

    QList<OAIReference> m_references;
    bool m_references_isSet;
    bool m_references_isValid;

    QString m_sales_order_id;
    bool m_sales_order_id_isSet;
    bool m_sales_order_id_isValid;

    bool m_self_billing_mode;
    bool m_self_billing_mode_isSet;
    bool m_self_billing_mode_isValid;

    QString m_tax_exempt_reason;
    bool m_tax_exempt_reason_isSet;
    bool m_tax_exempt_reason_isValid;

    QString m_tax_point_date;
    bool m_tax_point_date_isSet;
    bool m_tax_point_date_isValid;

    QList<OAITaxSubtotal> m_tax_subtotals;
    bool m_tax_subtotals_isSet;
    bool m_tax_subtotals_isValid;

    QString m_tax_system;
    bool m_tax_system_isSet;
    bool m_tax_system_isValid;

    QList<OAITax> m_taxes_duties_fees;
    bool m_taxes_duties_fees_isSet;
    bool m_taxes_duties_fees_isValid;

    QString m_transaction_type;
    bool m_transaction_type_isSet;
    bool m_transaction_type_isValid;

    QList<QString> m_ubl_extensions;
    bool m_ubl_extensions_isSet;
    bool m_ubl_extensions_isValid;

    bool m_vat_reverse_charge;
    bool m_vat_reverse_charge_isSet;
    bool m_vat_reverse_charge_isValid;

    QString m_x2y;
    bool m_x2y_isSet;
    bool m_x2y_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInvoice)

#endif // OAIInvoice_H
