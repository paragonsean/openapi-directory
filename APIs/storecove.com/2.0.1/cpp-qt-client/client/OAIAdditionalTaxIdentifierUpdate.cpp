/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalTaxIdentifierUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalTaxIdentifierUpdate::OAIAdditionalTaxIdentifierUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalTaxIdentifierUpdate::OAIAdditionalTaxIdentifierUpdate() {
    this->initializeModel();
}

OAIAdditionalTaxIdentifierUpdate::~OAIAdditionalTaxIdentifierUpdate() {}

void OAIAdditionalTaxIdentifierUpdate::initializeModel() {

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_third_party_password_isSet = false;
    m_third_party_password_isValid = false;

    m_third_party_username_isSet = false;
    m_third_party_username_isValid = false;
}

void OAIAdditionalTaxIdentifierUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalTaxIdentifierUpdate::fromJsonObject(QJsonObject json) {

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_third_party_password_isValid = ::OpenAPI::fromJsonValue(m_third_party_password, json[QString("third_party_password")]);
    m_third_party_password_isSet = !json[QString("third_party_password")].isNull() && m_third_party_password_isValid;

    m_third_party_username_isValid = ::OpenAPI::fromJsonValue(m_third_party_username, json[QString("third_party_username")]);
    m_third_party_username_isSet = !json[QString("third_party_username")].isNull() && m_third_party_username_isValid;
}

QString OAIAdditionalTaxIdentifierUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalTaxIdentifierUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_third_party_password_isSet) {
        obj.insert(QString("third_party_password"), ::OpenAPI::toJsonValue(m_third_party_password));
    }
    if (m_third_party_username_isSet) {
        obj.insert(QString("third_party_username"), ::OpenAPI::toJsonValue(m_third_party_username));
    }
    return obj;
}

QString OAIAdditionalTaxIdentifierUpdate::getIdentifier() const {
    return m_identifier;
}
void OAIAdditionalTaxIdentifierUpdate::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIAdditionalTaxIdentifierUpdate::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIAdditionalTaxIdentifierUpdate::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIAdditionalTaxIdentifierUpdate::getThirdPartyPassword() const {
    return m_third_party_password;
}
void OAIAdditionalTaxIdentifierUpdate::setThirdPartyPassword(const QString &third_party_password) {
    m_third_party_password = third_party_password;
    m_third_party_password_isSet = true;
}

bool OAIAdditionalTaxIdentifierUpdate::is_third_party_password_Set() const{
    return m_third_party_password_isSet;
}

bool OAIAdditionalTaxIdentifierUpdate::is_third_party_password_Valid() const{
    return m_third_party_password_isValid;
}

QString OAIAdditionalTaxIdentifierUpdate::getThirdPartyUsername() const {
    return m_third_party_username;
}
void OAIAdditionalTaxIdentifierUpdate::setThirdPartyUsername(const QString &third_party_username) {
    m_third_party_username = third_party_username;
    m_third_party_username_isSet = true;
}

bool OAIAdditionalTaxIdentifierUpdate::is_third_party_username_Set() const{
    return m_third_party_username_isSet;
}

bool OAIAdditionalTaxIdentifierUpdate::is_third_party_username_Valid() const{
    return m_third_party_username_isValid;
}

bool OAIAdditionalTaxIdentifierUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalTaxIdentifierUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifier_isValid && true;
}

} // namespace OpenAPI
