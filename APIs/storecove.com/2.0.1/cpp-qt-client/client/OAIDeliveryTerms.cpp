/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryTerms.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryTerms::OAIDeliveryTerms(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryTerms::OAIDeliveryTerms() {
    this->initializeModel();
}

OAIDeliveryTerms::~OAIDeliveryTerms() {}

void OAIDeliveryTerms::initializeModel() {

    m_delivery_location_id_isSet = false;
    m_delivery_location_id_isValid = false;

    m_incoterms_isSet = false;
    m_incoterms_isValid = false;

    m_special_terms_isSet = false;
    m_special_terms_isValid = false;
}

void OAIDeliveryTerms::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryTerms::fromJsonObject(QJsonObject json) {

    m_delivery_location_id_isValid = ::OpenAPI::fromJsonValue(m_delivery_location_id, json[QString("deliveryLocationId")]);
    m_delivery_location_id_isSet = !json[QString("deliveryLocationId")].isNull() && m_delivery_location_id_isValid;

    m_incoterms_isValid = ::OpenAPI::fromJsonValue(m_incoterms, json[QString("incoterms")]);
    m_incoterms_isSet = !json[QString("incoterms")].isNull() && m_incoterms_isValid;

    m_special_terms_isValid = ::OpenAPI::fromJsonValue(m_special_terms, json[QString("specialTerms")]);
    m_special_terms_isSet = !json[QString("specialTerms")].isNull() && m_special_terms_isValid;
}

QString OAIDeliveryTerms::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryTerms::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_location_id_isSet) {
        obj.insert(QString("deliveryLocationId"), ::OpenAPI::toJsonValue(m_delivery_location_id));
    }
    if (m_incoterms_isSet) {
        obj.insert(QString("incoterms"), ::OpenAPI::toJsonValue(m_incoterms));
    }
    if (m_special_terms_isSet) {
        obj.insert(QString("specialTerms"), ::OpenAPI::toJsonValue(m_special_terms));
    }
    return obj;
}

QString OAIDeliveryTerms::getDeliveryLocationId() const {
    return m_delivery_location_id;
}
void OAIDeliveryTerms::setDeliveryLocationId(const QString &delivery_location_id) {
    m_delivery_location_id = delivery_location_id;
    m_delivery_location_id_isSet = true;
}

bool OAIDeliveryTerms::is_delivery_location_id_Set() const{
    return m_delivery_location_id_isSet;
}

bool OAIDeliveryTerms::is_delivery_location_id_Valid() const{
    return m_delivery_location_id_isValid;
}

QString OAIDeliveryTerms::getIncoterms() const {
    return m_incoterms;
}
void OAIDeliveryTerms::setIncoterms(const QString &incoterms) {
    m_incoterms = incoterms;
    m_incoterms_isSet = true;
}

bool OAIDeliveryTerms::is_incoterms_Set() const{
    return m_incoterms_isSet;
}

bool OAIDeliveryTerms::is_incoterms_Valid() const{
    return m_incoterms_isValid;
}

QString OAIDeliveryTerms::getSpecialTerms() const {
    return m_special_terms;
}
void OAIDeliveryTerms::setSpecialTerms(const QString &special_terms) {
    m_special_terms = special_terms;
    m_special_terms_isSet = true;
}

bool OAIDeliveryTerms::is_special_terms_Set() const{
    return m_special_terms_isSet;
}

bool OAIDeliveryTerms::is_special_terms_Valid() const{
    return m_special_terms_isValid;
}

bool OAIDeliveryTerms::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incoterms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_terms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryTerms::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
