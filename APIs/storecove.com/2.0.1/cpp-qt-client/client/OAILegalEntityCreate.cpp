/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILegalEntityCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILegalEntityCreate::OAILegalEntityCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILegalEntityCreate::OAILegalEntityCreate() {
    this->initializeModel();
}

OAILegalEntityCreate::~OAILegalEntityCreate() {}

void OAILegalEntityCreate::initializeModel() {

    m_advertisements_isSet = false;
    m_advertisements_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_line1_isSet = false;
    m_line1_isValid = false;

    m_line2_isSet = false;
    m_line2_isValid = false;

    m_party_name_isSet = false;
    m_party_name_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_rea_isSet = false;
    m_rea_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_third_party_password_isSet = false;
    m_third_party_password_isValid = false;

    m_third_party_username_isSet = false;
    m_third_party_username_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAILegalEntityCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILegalEntityCreate::fromJsonObject(QJsonObject json) {

    m_advertisements_isValid = ::OpenAPI::fromJsonValue(m_advertisements, json[QString("advertisements")]);
    m_advertisements_isSet = !json[QString("advertisements")].isNull() && m_advertisements_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_line1_isValid = ::OpenAPI::fromJsonValue(m_line1, json[QString("line1")]);
    m_line1_isSet = !json[QString("line1")].isNull() && m_line1_isValid;

    m_line2_isValid = ::OpenAPI::fromJsonValue(m_line2, json[QString("line2")]);
    m_line2_isSet = !json[QString("line2")].isNull() && m_line2_isValid;

    m_party_name_isValid = ::OpenAPI::fromJsonValue(m_party_name, json[QString("party_name")]);
    m_party_name_isSet = !json[QString("party_name")].isNull() && m_party_name_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_rea_isValid = ::OpenAPI::fromJsonValue(m_rea, json[QString("rea")]);
    m_rea_isSet = !json[QString("rea")].isNull() && m_rea_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenant_id")]);
    m_tenant_id_isSet = !json[QString("tenant_id")].isNull() && m_tenant_id_isValid;

    m_third_party_password_isValid = ::OpenAPI::fromJsonValue(m_third_party_password, json[QString("third_party_password")]);
    m_third_party_password_isSet = !json[QString("third_party_password")].isNull() && m_third_party_password_isValid;

    m_third_party_username_isValid = ::OpenAPI::fromJsonValue(m_third_party_username, json[QString("third_party_username")]);
    m_third_party_username_isSet = !json[QString("third_party_username")].isNull() && m_third_party_username_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAILegalEntityCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILegalEntityCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_advertisements.size() > 0) {
        obj.insert(QString("advertisements"), ::OpenAPI::toJsonValue(m_advertisements));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_county_isSet) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_line1_isSet) {
        obj.insert(QString("line1"), ::OpenAPI::toJsonValue(m_line1));
    }
    if (m_line2_isSet) {
        obj.insert(QString("line2"), ::OpenAPI::toJsonValue(m_line2));
    }
    if (m_party_name_isSet) {
        obj.insert(QString("party_name"), ::OpenAPI::toJsonValue(m_party_name));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_rea.isSet()) {
        obj.insert(QString("rea"), ::OpenAPI::toJsonValue(m_rea));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenant_id"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_third_party_password_isSet) {
        obj.insert(QString("third_party_password"), ::OpenAPI::toJsonValue(m_third_party_password));
    }
    if (m_third_party_username_isSet) {
        obj.insert(QString("third_party_username"), ::OpenAPI::toJsonValue(m_third_party_username));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QList<QString> OAILegalEntityCreate::getAdvertisements() const {
    return m_advertisements;
}
void OAILegalEntityCreate::setAdvertisements(const QList<QString> &advertisements) {
    m_advertisements = advertisements;
    m_advertisements_isSet = true;
}

bool OAILegalEntityCreate::is_advertisements_Set() const{
    return m_advertisements_isSet;
}

bool OAILegalEntityCreate::is_advertisements_Valid() const{
    return m_advertisements_isValid;
}

QString OAILegalEntityCreate::getCity() const {
    return m_city;
}
void OAILegalEntityCreate::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAILegalEntityCreate::is_city_Set() const{
    return m_city_isSet;
}

bool OAILegalEntityCreate::is_city_Valid() const{
    return m_city_isValid;
}

OAICountry OAILegalEntityCreate::getCountry() const {
    return m_country;
}
void OAILegalEntityCreate::setCountry(const OAICountry &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAILegalEntityCreate::is_country_Set() const{
    return m_country_isSet;
}

bool OAILegalEntityCreate::is_country_Valid() const{
    return m_country_isValid;
}

QString OAILegalEntityCreate::getCounty() const {
    return m_county;
}
void OAILegalEntityCreate::setCounty(const QString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAILegalEntityCreate::is_county_Set() const{
    return m_county_isSet;
}

bool OAILegalEntityCreate::is_county_Valid() const{
    return m_county_isValid;
}

QString OAILegalEntityCreate::getLine1() const {
    return m_line1;
}
void OAILegalEntityCreate::setLine1(const QString &line1) {
    m_line1 = line1;
    m_line1_isSet = true;
}

bool OAILegalEntityCreate::is_line1_Set() const{
    return m_line1_isSet;
}

bool OAILegalEntityCreate::is_line1_Valid() const{
    return m_line1_isValid;
}

QString OAILegalEntityCreate::getLine2() const {
    return m_line2;
}
void OAILegalEntityCreate::setLine2(const QString &line2) {
    m_line2 = line2;
    m_line2_isSet = true;
}

bool OAILegalEntityCreate::is_line2_Set() const{
    return m_line2_isSet;
}

bool OAILegalEntityCreate::is_line2_Valid() const{
    return m_line2_isValid;
}

QString OAILegalEntityCreate::getPartyName() const {
    return m_party_name;
}
void OAILegalEntityCreate::setPartyName(const QString &party_name) {
    m_party_name = party_name;
    m_party_name_isSet = true;
}

bool OAILegalEntityCreate::is_party_name_Set() const{
    return m_party_name_isSet;
}

bool OAILegalEntityCreate::is_party_name_Valid() const{
    return m_party_name_isValid;
}

bool OAILegalEntityCreate::isRPublic() const {
    return m_r_public;
}
void OAILegalEntityCreate::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAILegalEntityCreate::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAILegalEntityCreate::is_r_public_Valid() const{
    return m_r_public_isValid;
}

OAIRea OAILegalEntityCreate::getRea() const {
    return m_rea;
}
void OAILegalEntityCreate::setRea(const OAIRea &rea) {
    m_rea = rea;
    m_rea_isSet = true;
}

bool OAILegalEntityCreate::is_rea_Set() const{
    return m_rea_isSet;
}

bool OAILegalEntityCreate::is_rea_Valid() const{
    return m_rea_isValid;
}

QString OAILegalEntityCreate::getTenantId() const {
    return m_tenant_id;
}
void OAILegalEntityCreate::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAILegalEntityCreate::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAILegalEntityCreate::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAILegalEntityCreate::getThirdPartyPassword() const {
    return m_third_party_password;
}
void OAILegalEntityCreate::setThirdPartyPassword(const QString &third_party_password) {
    m_third_party_password = third_party_password;
    m_third_party_password_isSet = true;
}

bool OAILegalEntityCreate::is_third_party_password_Set() const{
    return m_third_party_password_isSet;
}

bool OAILegalEntityCreate::is_third_party_password_Valid() const{
    return m_third_party_password_isValid;
}

QString OAILegalEntityCreate::getThirdPartyUsername() const {
    return m_third_party_username;
}
void OAILegalEntityCreate::setThirdPartyUsername(const QString &third_party_username) {
    m_third_party_username = third_party_username;
    m_third_party_username_isSet = true;
}

bool OAILegalEntityCreate::is_third_party_username_Set() const{
    return m_third_party_username_isSet;
}

bool OAILegalEntityCreate::is_third_party_username_Valid() const{
    return m_third_party_username_isValid;
}

QString OAILegalEntityCreate::getZip() const {
    return m_zip;
}
void OAILegalEntityCreate::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAILegalEntityCreate::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAILegalEntityCreate::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAILegalEntityCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertisements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rea.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILegalEntityCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_city_isValid && m_country_isValid && m_line1_isValid && m_party_name_isValid && m_zip_isValid && true;
}

} // namespace OpenAPI
