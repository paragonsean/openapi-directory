/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxSubtotal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxSubtotal::OAITaxSubtotal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxSubtotal::OAITaxSubtotal() {
    this->initializeModel();
}

OAITaxSubtotal::~OAITaxSubtotal() {}

void OAITaxSubtotal::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_taxable_amount_isSet = false;
    m_taxable_amount_isValid = false;
}

void OAITaxSubtotal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaxSubtotal::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("taxAmount")]);
    m_tax_amount_isSet = !json[QString("taxAmount")].isNull() && m_tax_amount_isValid;

    m_taxable_amount_isValid = ::OpenAPI::fromJsonValue(m_taxable_amount, json[QString("taxableAmount")]);
    m_taxable_amount_isSet = !json[QString("taxableAmount")].isNull() && m_taxable_amount_isValid;
}

QString OAITaxSubtotal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaxSubtotal::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("taxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_taxable_amount_isSet) {
        obj.insert(QString("taxableAmount"), ::OpenAPI::toJsonValue(m_taxable_amount));
    }
    return obj;
}

QString OAITaxSubtotal::getCategory() const {
    return m_category;
}
void OAITaxSubtotal::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITaxSubtotal::is_category_Set() const{
    return m_category_isSet;
}

bool OAITaxSubtotal::is_category_Valid() const{
    return m_category_isValid;
}

OAICountry OAITaxSubtotal::getCountry() const {
    return m_country;
}
void OAITaxSubtotal::setCountry(const OAICountry &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAITaxSubtotal::is_country_Set() const{
    return m_country_isSet;
}

bool OAITaxSubtotal::is_country_Valid() const{
    return m_country_isValid;
}

double OAITaxSubtotal::getPercentage() const {
    return m_percentage;
}
void OAITaxSubtotal::setPercentage(const double &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAITaxSubtotal::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAITaxSubtotal::is_percentage_Valid() const{
    return m_percentage_isValid;
}

double OAITaxSubtotal::getTaxAmount() const {
    return m_tax_amount;
}
void OAITaxSubtotal::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAITaxSubtotal::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAITaxSubtotal::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

double OAITaxSubtotal::getTaxableAmount() const {
    return m_taxable_amount;
}
void OAITaxSubtotal::setTaxableAmount(const double &taxable_amount) {
    m_taxable_amount = taxable_amount;
    m_taxable_amount_isSet = true;
}

bool OAITaxSubtotal::is_taxable_amount_Set() const{
    return m_taxable_amount_isSet;
}

bool OAITaxSubtotal::is_taxable_amount_Valid() const{
    return m_taxable_amount_isValid;
}

bool OAITaxSubtotal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxable_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaxSubtotal::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && m_percentage_isValid && m_tax_amount_isValid && m_taxable_amount_isValid && true;
}

} // namespace OpenAPI
