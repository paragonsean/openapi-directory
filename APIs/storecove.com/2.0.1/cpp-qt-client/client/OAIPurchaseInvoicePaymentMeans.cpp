/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseInvoicePaymentMeans.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseInvoicePaymentMeans::OAIPurchaseInvoicePaymentMeans(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseInvoicePaymentMeans::OAIPurchaseInvoicePaymentMeans() {
    this->initializeModel();
}

OAIPurchaseInvoicePaymentMeans::~OAIPurchaseInvoicePaymentMeans() {}

void OAIPurchaseInvoicePaymentMeans::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_branch_code_isSet = false;
    m_branch_code_isValid = false;

    m_holder_isSet = false;
    m_holder_isValid = false;

    m_mandate_isSet = false;
    m_mandate_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPurchaseInvoicePaymentMeans::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseInvoicePaymentMeans::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_branch_code_isValid = ::OpenAPI::fromJsonValue(m_branch_code, json[QString("branch_code")]);
    m_branch_code_isSet = !json[QString("branch_code")].isNull() && m_branch_code_isValid;

    m_holder_isValid = ::OpenAPI::fromJsonValue(m_holder, json[QString("holder")]);
    m_holder_isSet = !json[QString("holder")].isNull() && m_holder_isValid;

    m_mandate_isValid = ::OpenAPI::fromJsonValue(m_mandate, json[QString("mandate")]);
    m_mandate_isSet = !json[QString("mandate")].isNull() && m_mandate_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("payment_id")]);
    m_payment_id_isSet = !json[QString("payment_id")].isNull() && m_payment_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPurchaseInvoicePaymentMeans::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseInvoicePaymentMeans::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_branch_code_isSet) {
        obj.insert(QString("branch_code"), ::OpenAPI::toJsonValue(m_branch_code));
    }
    if (m_holder_isSet) {
        obj.insert(QString("holder"), ::OpenAPI::toJsonValue(m_holder));
    }
    if (m_mandate_isSet) {
        obj.insert(QString("mandate"), ::OpenAPI::toJsonValue(m_mandate));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("payment_id"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPurchaseInvoicePaymentMeans::getAccount() const {
    return m_account;
}
void OAIPurchaseInvoicePaymentMeans::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIPurchaseInvoicePaymentMeans::is_account_Set() const{
    return m_account_isSet;
}

bool OAIPurchaseInvoicePaymentMeans::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIPurchaseInvoicePaymentMeans::getBranchCode() const {
    return m_branch_code;
}
void OAIPurchaseInvoicePaymentMeans::setBranchCode(const QString &branch_code) {
    m_branch_code = branch_code;
    m_branch_code_isSet = true;
}

bool OAIPurchaseInvoicePaymentMeans::is_branch_code_Set() const{
    return m_branch_code_isSet;
}

bool OAIPurchaseInvoicePaymentMeans::is_branch_code_Valid() const{
    return m_branch_code_isValid;
}

QString OAIPurchaseInvoicePaymentMeans::getHolder() const {
    return m_holder;
}
void OAIPurchaseInvoicePaymentMeans::setHolder(const QString &holder) {
    m_holder = holder;
    m_holder_isSet = true;
}

bool OAIPurchaseInvoicePaymentMeans::is_holder_Set() const{
    return m_holder_isSet;
}

bool OAIPurchaseInvoicePaymentMeans::is_holder_Valid() const{
    return m_holder_isValid;
}

QString OAIPurchaseInvoicePaymentMeans::getMandate() const {
    return m_mandate;
}
void OAIPurchaseInvoicePaymentMeans::setMandate(const QString &mandate) {
    m_mandate = mandate;
    m_mandate_isSet = true;
}

bool OAIPurchaseInvoicePaymentMeans::is_mandate_Set() const{
    return m_mandate_isSet;
}

bool OAIPurchaseInvoicePaymentMeans::is_mandate_Valid() const{
    return m_mandate_isValid;
}

QString OAIPurchaseInvoicePaymentMeans::getNetwork() const {
    return m_network;
}
void OAIPurchaseInvoicePaymentMeans::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIPurchaseInvoicePaymentMeans::is_network_Set() const{
    return m_network_isSet;
}

bool OAIPurchaseInvoicePaymentMeans::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIPurchaseInvoicePaymentMeans::getPaymentId() const {
    return m_payment_id;
}
void OAIPurchaseInvoicePaymentMeans::setPaymentId(const QString &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAIPurchaseInvoicePaymentMeans::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAIPurchaseInvoicePaymentMeans::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

QString OAIPurchaseInvoicePaymentMeans::getType() const {
    return m_type;
}
void OAIPurchaseInvoicePaymentMeans::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPurchaseInvoicePaymentMeans::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPurchaseInvoicePaymentMeans::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPurchaseInvoicePaymentMeans::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseInvoicePaymentMeans::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
