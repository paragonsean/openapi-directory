/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalTaxIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalTaxIdentifier::OAIAdditionalTaxIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalTaxIdentifier::OAIAdditionalTaxIdentifier() {
    this->initializeModel();
}

OAIAdditionalTaxIdentifier::~OAIAdditionalTaxIdentifier() {}

void OAIAdditionalTaxIdentifier::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;

    m_superscheme_isSet = false;
    m_superscheme_isValid = false;
}

void OAIAdditionalTaxIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalTaxIdentifier::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("scheme")]);
    m_scheme_isSet = !json[QString("scheme")].isNull() && m_scheme_isValid;

    m_superscheme_isValid = ::OpenAPI::fromJsonValue(m_superscheme, json[QString("superscheme")]);
    m_superscheme_isSet = !json[QString("superscheme")].isNull() && m_superscheme_isValid;
}

QString OAIAdditionalTaxIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalTaxIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_county_isSet) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_scheme_isSet) {
        obj.insert(QString("scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    if (m_superscheme_isSet) {
        obj.insert(QString("superscheme"), ::OpenAPI::toJsonValue(m_superscheme));
    }
    return obj;
}

QString OAIAdditionalTaxIdentifier::getCountry() const {
    return m_country;
}
void OAIAdditionalTaxIdentifier::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAdditionalTaxIdentifier::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAdditionalTaxIdentifier::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAdditionalTaxIdentifier::getCounty() const {
    return m_county;
}
void OAIAdditionalTaxIdentifier::setCounty(const QString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAIAdditionalTaxIdentifier::is_county_Set() const{
    return m_county_isSet;
}

bool OAIAdditionalTaxIdentifier::is_county_Valid() const{
    return m_county_isValid;
}

qint64 OAIAdditionalTaxIdentifier::getId() const {
    return m_id;
}
void OAIAdditionalTaxIdentifier::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdditionalTaxIdentifier::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdditionalTaxIdentifier::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAdditionalTaxIdentifier::getIdentifier() const {
    return m_identifier;
}
void OAIAdditionalTaxIdentifier::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIAdditionalTaxIdentifier::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIAdditionalTaxIdentifier::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIAdditionalTaxIdentifier::getScheme() const {
    return m_scheme;
}
void OAIAdditionalTaxIdentifier::setScheme(const QString &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAIAdditionalTaxIdentifier::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAIAdditionalTaxIdentifier::is_scheme_Valid() const{
    return m_scheme_isValid;
}

QString OAIAdditionalTaxIdentifier::getSuperscheme() const {
    return m_superscheme;
}
void OAIAdditionalTaxIdentifier::setSuperscheme(const QString &superscheme) {
    m_superscheme = superscheme;
    m_superscheme_isSet = true;
}

bool OAIAdditionalTaxIdentifier::is_superscheme_Set() const{
    return m_superscheme_isSet;
}

bool OAIAdditionalTaxIdentifier::is_superscheme_Valid() const{
    return m_superscheme_isValid;
}

bool OAIAdditionalTaxIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_superscheme_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalTaxIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
