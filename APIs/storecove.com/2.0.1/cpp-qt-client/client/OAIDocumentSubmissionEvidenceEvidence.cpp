/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentSubmissionEvidenceEvidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentSubmissionEvidenceEvidence::OAIDocumentSubmissionEvidenceEvidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentSubmissionEvidenceEvidence::OAIDocumentSubmissionEvidenceEvidence() {
    this->initializeModel();
}

OAIDocumentSubmissionEvidenceEvidence::~OAIDocumentSubmissionEvidenceEvidence() {}

void OAIDocumentSubmissionEvidenceEvidence::initializeModel() {

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_receiving_accesspoint_isSet = false;
    m_receiving_accesspoint_isValid = false;

    m_remote_mta_ip_isSet = false;
    m_remote_mta_ip_isValid = false;

    m_reporting_mta_isSet = false;
    m_reporting_mta_isValid = false;

    m_smtp_response_isSet = false;
    m_smtp_response_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_transmission_id_isSet = false;
    m_transmission_id_isValid = false;

    m_xml_isSet = false;
    m_xml_isValid = false;
}

void OAIDocumentSubmissionEvidenceEvidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentSubmissionEvidenceEvidence::fromJsonObject(QJsonObject json) {

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("message_id")]);
    m_message_id_isSet = !json[QString("message_id")].isNull() && m_message_id_isValid;

    m_receiving_accesspoint_isValid = ::OpenAPI::fromJsonValue(m_receiving_accesspoint, json[QString("receiving_accesspoint")]);
    m_receiving_accesspoint_isSet = !json[QString("receiving_accesspoint")].isNull() && m_receiving_accesspoint_isValid;

    m_remote_mta_ip_isValid = ::OpenAPI::fromJsonValue(m_remote_mta_ip, json[QString("remote_mta_ip")]);
    m_remote_mta_ip_isSet = !json[QString("remote_mta_ip")].isNull() && m_remote_mta_ip_isValid;

    m_reporting_mta_isValid = ::OpenAPI::fromJsonValue(m_reporting_mta, json[QString("reporting_mta")]);
    m_reporting_mta_isSet = !json[QString("reporting_mta")].isNull() && m_reporting_mta_isValid;

    m_smtp_response_isValid = ::OpenAPI::fromJsonValue(m_smtp_response, json[QString("smtp_response")]);
    m_smtp_response_isSet = !json[QString("smtp_response")].isNull() && m_smtp_response_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_transmission_id_isValid = ::OpenAPI::fromJsonValue(m_transmission_id, json[QString("transmission_id")]);
    m_transmission_id_isSet = !json[QString("transmission_id")].isNull() && m_transmission_id_isValid;

    m_xml_isValid = ::OpenAPI::fromJsonValue(m_xml, json[QString("xml")]);
    m_xml_isSet = !json[QString("xml")].isNull() && m_xml_isValid;
}

QString OAIDocumentSubmissionEvidenceEvidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentSubmissionEvidenceEvidence::asJsonObject() const {
    QJsonObject obj;
    if (m_message_id_isSet) {
        obj.insert(QString("message_id"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_receiving_accesspoint_isSet) {
        obj.insert(QString("receiving_accesspoint"), ::OpenAPI::toJsonValue(m_receiving_accesspoint));
    }
    if (m_remote_mta_ip_isSet) {
        obj.insert(QString("remote_mta_ip"), ::OpenAPI::toJsonValue(m_remote_mta_ip));
    }
    if (m_reporting_mta_isSet) {
        obj.insert(QString("reporting_mta"), ::OpenAPI::toJsonValue(m_reporting_mta));
    }
    if (m_smtp_response_isSet) {
        obj.insert(QString("smtp_response"), ::OpenAPI::toJsonValue(m_smtp_response));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_transmission_id_isSet) {
        obj.insert(QString("transmission_id"), ::OpenAPI::toJsonValue(m_transmission_id));
    }
    if (m_xml_isSet) {
        obj.insert(QString("xml"), ::OpenAPI::toJsonValue(m_xml));
    }
    return obj;
}

QString OAIDocumentSubmissionEvidenceEvidence::getMessageId() const {
    return m_message_id;
}
void OAIDocumentSubmissionEvidenceEvidence::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIDocumentSubmissionEvidenceEvidence::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIDocumentSubmissionEvidenceEvidence::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIDocumentSubmissionEvidenceEvidence::getReceivingAccesspoint() const {
    return m_receiving_accesspoint;
}
void OAIDocumentSubmissionEvidenceEvidence::setReceivingAccesspoint(const QString &receiving_accesspoint) {
    m_receiving_accesspoint = receiving_accesspoint;
    m_receiving_accesspoint_isSet = true;
}

bool OAIDocumentSubmissionEvidenceEvidence::is_receiving_accesspoint_Set() const{
    return m_receiving_accesspoint_isSet;
}

bool OAIDocumentSubmissionEvidenceEvidence::is_receiving_accesspoint_Valid() const{
    return m_receiving_accesspoint_isValid;
}

QString OAIDocumentSubmissionEvidenceEvidence::getRemoteMtaIp() const {
    return m_remote_mta_ip;
}
void OAIDocumentSubmissionEvidenceEvidence::setRemoteMtaIp(const QString &remote_mta_ip) {
    m_remote_mta_ip = remote_mta_ip;
    m_remote_mta_ip_isSet = true;
}

bool OAIDocumentSubmissionEvidenceEvidence::is_remote_mta_ip_Set() const{
    return m_remote_mta_ip_isSet;
}

bool OAIDocumentSubmissionEvidenceEvidence::is_remote_mta_ip_Valid() const{
    return m_remote_mta_ip_isValid;
}

QString OAIDocumentSubmissionEvidenceEvidence::getReportingMta() const {
    return m_reporting_mta;
}
void OAIDocumentSubmissionEvidenceEvidence::setReportingMta(const QString &reporting_mta) {
    m_reporting_mta = reporting_mta;
    m_reporting_mta_isSet = true;
}

bool OAIDocumentSubmissionEvidenceEvidence::is_reporting_mta_Set() const{
    return m_reporting_mta_isSet;
}

bool OAIDocumentSubmissionEvidenceEvidence::is_reporting_mta_Valid() const{
    return m_reporting_mta_isValid;
}

QString OAIDocumentSubmissionEvidenceEvidence::getSmtpResponse() const {
    return m_smtp_response;
}
void OAIDocumentSubmissionEvidenceEvidence::setSmtpResponse(const QString &smtp_response) {
    m_smtp_response = smtp_response;
    m_smtp_response_isSet = true;
}

bool OAIDocumentSubmissionEvidenceEvidence::is_smtp_response_Set() const{
    return m_smtp_response_isSet;
}

bool OAIDocumentSubmissionEvidenceEvidence::is_smtp_response_Valid() const{
    return m_smtp_response_isValid;
}

QString OAIDocumentSubmissionEvidenceEvidence::getTimestamp() const {
    return m_timestamp;
}
void OAIDocumentSubmissionEvidenceEvidence::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIDocumentSubmissionEvidenceEvidence::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIDocumentSubmissionEvidenceEvidence::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIDocumentSubmissionEvidenceEvidence::getTransmissionId() const {
    return m_transmission_id;
}
void OAIDocumentSubmissionEvidenceEvidence::setTransmissionId(const QString &transmission_id) {
    m_transmission_id = transmission_id;
    m_transmission_id_isSet = true;
}

bool OAIDocumentSubmissionEvidenceEvidence::is_transmission_id_Set() const{
    return m_transmission_id_isSet;
}

bool OAIDocumentSubmissionEvidenceEvidence::is_transmission_id_Valid() const{
    return m_transmission_id_isValid;
}

QString OAIDocumentSubmissionEvidenceEvidence::getXml() const {
    return m_xml;
}
void OAIDocumentSubmissionEvidenceEvidence::setXml(const QString &xml) {
    m_xml = xml;
    m_xml_isSet = true;
}

bool OAIDocumentSubmissionEvidenceEvidence::is_xml_Set() const{
    return m_xml_isSet;
}

bool OAIDocumentSubmissionEvidenceEvidence::is_xml_Valid() const{
    return m_xml_isValid;
}

bool OAIDocumentSubmissionEvidenceEvidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_accesspoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_mta_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_mta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xml_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentSubmissionEvidenceEvidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
