/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRawDocumentData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRawDocumentData::OAIRawDocumentData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRawDocumentData::OAIRawDocumentData() {
    this->initializeModel();
}

OAIRawDocumentData::~OAIRawDocumentData() {}

void OAIRawDocumentData::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;

    m_document_type_id_isSet = false;
    m_document_type_id_isValid = false;

    m_parse_isSet = false;
    m_parse_isValid = false;

    m_parse_strategy_isSet = false;
    m_parse_strategy_isValid = false;

    m_process_id_isSet = false;
    m_process_id_isValid = false;
}

void OAIRawDocumentData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRawDocumentData::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_document_type_id_isValid = ::OpenAPI::fromJsonValue(m_document_type_id, json[QString("documentTypeId")]);
    m_document_type_id_isSet = !json[QString("documentTypeId")].isNull() && m_document_type_id_isValid;

    m_parse_isValid = ::OpenAPI::fromJsonValue(m_parse, json[QString("parse")]);
    m_parse_isSet = !json[QString("parse")].isNull() && m_parse_isValid;

    m_parse_strategy_isValid = ::OpenAPI::fromJsonValue(m_parse_strategy, json[QString("parseStrategy")]);
    m_parse_strategy_isSet = !json[QString("parseStrategy")].isNull() && m_parse_strategy_isValid;

    m_process_id_isValid = ::OpenAPI::fromJsonValue(m_process_id, json[QString("processId")]);
    m_process_id_isSet = !json[QString("processId")].isNull() && m_process_id_isValid;
}

QString OAIRawDocumentData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRawDocumentData::asJsonObject() const {
    QJsonObject obj;
    if (m_document_isSet) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_document_type_id_isSet) {
        obj.insert(QString("documentTypeId"), ::OpenAPI::toJsonValue(m_document_type_id));
    }
    if (m_parse_isSet) {
        obj.insert(QString("parse"), ::OpenAPI::toJsonValue(m_parse));
    }
    if (m_parse_strategy_isSet) {
        obj.insert(QString("parseStrategy"), ::OpenAPI::toJsonValue(m_parse_strategy));
    }
    if (m_process_id_isSet) {
        obj.insert(QString("processId"), ::OpenAPI::toJsonValue(m_process_id));
    }
    return obj;
}

QString OAIRawDocumentData::getDocument() const {
    return m_document;
}
void OAIRawDocumentData::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIRawDocumentData::is_document_Set() const{
    return m_document_isSet;
}

bool OAIRawDocumentData::is_document_Valid() const{
    return m_document_isValid;
}

QString OAIRawDocumentData::getDocumentTypeId() const {
    return m_document_type_id;
}
void OAIRawDocumentData::setDocumentTypeId(const QString &document_type_id) {
    m_document_type_id = document_type_id;
    m_document_type_id_isSet = true;
}

bool OAIRawDocumentData::is_document_type_id_Set() const{
    return m_document_type_id_isSet;
}

bool OAIRawDocumentData::is_document_type_id_Valid() const{
    return m_document_type_id_isValid;
}

bool OAIRawDocumentData::isParse() const {
    return m_parse;
}
void OAIRawDocumentData::setParse(const bool &parse) {
    m_parse = parse;
    m_parse_isSet = true;
}

bool OAIRawDocumentData::is_parse_Set() const{
    return m_parse_isSet;
}

bool OAIRawDocumentData::is_parse_Valid() const{
    return m_parse_isValid;
}

QString OAIRawDocumentData::getParseStrategy() const {
    return m_parse_strategy;
}
void OAIRawDocumentData::setParseStrategy(const QString &parse_strategy) {
    m_parse_strategy = parse_strategy;
    m_parse_strategy_isSet = true;
}

bool OAIRawDocumentData::is_parse_strategy_Set() const{
    return m_parse_strategy_isSet;
}

bool OAIRawDocumentData::is_parse_strategy_Valid() const{
    return m_parse_strategy_isValid;
}

QString OAIRawDocumentData::getProcessId() const {
    return m_process_id;
}
void OAIRawDocumentData::setProcessId(const QString &process_id) {
    m_process_id = process_id;
    m_process_id_isSet = true;
}

bool OAIRawDocumentData::is_process_id_Set() const{
    return m_process_id_isSet;
}

bool OAIRawDocumentData::is_process_id_Valid() const{
    return m_process_id_isValid;
}

bool OAIRawDocumentData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parse_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parse_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRawDocumentData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_isValid && true;
}

} // namespace OpenAPI
