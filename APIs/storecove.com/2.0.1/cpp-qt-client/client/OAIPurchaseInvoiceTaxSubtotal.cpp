/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseInvoiceTaxSubtotal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseInvoiceTaxSubtotal::OAIPurchaseInvoiceTaxSubtotal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseInvoiceTaxSubtotal::OAIPurchaseInvoiceTaxSubtotal() {
    this->initializeModel();
}

OAIPurchaseInvoiceTaxSubtotal::~OAIPurchaseInvoiceTaxSubtotal() {}

void OAIPurchaseInvoiceTaxSubtotal::initializeModel() {

    m_amount_excluding_tax_isSet = false;
    m_amount_excluding_tax_isValid = false;

    m_amount_excluding_vat_isSet = false;
    m_amount_excluding_vat_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_vat_isSet = false;
    m_vat_isValid = false;
}

void OAIPurchaseInvoiceTaxSubtotal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseInvoiceTaxSubtotal::fromJsonObject(QJsonObject json) {

    m_amount_excluding_tax_isValid = ::OpenAPI::fromJsonValue(m_amount_excluding_tax, json[QString("amount_excluding_tax")]);
    m_amount_excluding_tax_isSet = !json[QString("amount_excluding_tax")].isNull() && m_amount_excluding_tax_isValid;

    m_amount_excluding_vat_isValid = ::OpenAPI::fromJsonValue(m_amount_excluding_vat, json[QString("amount_excluding_vat")]);
    m_amount_excluding_vat_isSet = !json[QString("amount_excluding_vat")].isNull() && m_amount_excluding_vat_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_vat_isValid = ::OpenAPI::fromJsonValue(m_vat, json[QString("vat")]);
    m_vat_isSet = !json[QString("vat")].isNull() && m_vat_isValid;
}

QString OAIPurchaseInvoiceTaxSubtotal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseInvoiceTaxSubtotal::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_excluding_tax_isSet) {
        obj.insert(QString("amount_excluding_tax"), ::OpenAPI::toJsonValue(m_amount_excluding_tax));
    }
    if (m_amount_excluding_vat_isSet) {
        obj.insert(QString("amount_excluding_vat"), ::OpenAPI::toJsonValue(m_amount_excluding_vat));
    }
    if (m_tax.isSet()) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_vat.isSet()) {
        obj.insert(QString("vat"), ::OpenAPI::toJsonValue(m_vat));
    }
    return obj;
}

double OAIPurchaseInvoiceTaxSubtotal::getAmountExcludingTax() const {
    return m_amount_excluding_tax;
}
void OAIPurchaseInvoiceTaxSubtotal::setAmountExcludingTax(const double &amount_excluding_tax) {
    m_amount_excluding_tax = amount_excluding_tax;
    m_amount_excluding_tax_isSet = true;
}

bool OAIPurchaseInvoiceTaxSubtotal::is_amount_excluding_tax_Set() const{
    return m_amount_excluding_tax_isSet;
}

bool OAIPurchaseInvoiceTaxSubtotal::is_amount_excluding_tax_Valid() const{
    return m_amount_excluding_tax_isValid;
}

QString OAIPurchaseInvoiceTaxSubtotal::getAmountExcludingVat() const {
    return m_amount_excluding_vat;
}
void OAIPurchaseInvoiceTaxSubtotal::setAmountExcludingVat(const QString &amount_excluding_vat) {
    m_amount_excluding_vat = amount_excluding_vat;
    m_amount_excluding_vat_isSet = true;
}

bool OAIPurchaseInvoiceTaxSubtotal::is_amount_excluding_vat_Set() const{
    return m_amount_excluding_vat_isSet;
}

bool OAIPurchaseInvoiceTaxSubtotal::is_amount_excluding_vat_Valid() const{
    return m_amount_excluding_vat_isValid;
}

OAIPurchaseInvoiceTax OAIPurchaseInvoiceTaxSubtotal::getTax() const {
    return m_tax;
}
void OAIPurchaseInvoiceTaxSubtotal::setTax(const OAIPurchaseInvoiceTax &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIPurchaseInvoiceTaxSubtotal::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIPurchaseInvoiceTaxSubtotal::is_tax_Valid() const{
    return m_tax_isValid;
}

OAIPurchaseInvoiceVat OAIPurchaseInvoiceTaxSubtotal::getVat() const {
    return m_vat;
}
void OAIPurchaseInvoiceTaxSubtotal::setVat(const OAIPurchaseInvoiceVat &vat) {
    m_vat = vat;
    m_vat_isSet = true;
}

bool OAIPurchaseInvoiceTaxSubtotal::is_vat_Set() const{
    return m_vat_isSet;
}

bool OAIPurchaseInvoiceTaxSubtotal::is_vat_Valid() const{
    return m_vat_isValid;
}

bool OAIPurchaseInvoiceTaxSubtotal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_excluding_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_excluding_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseInvoiceTaxSubtotal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
