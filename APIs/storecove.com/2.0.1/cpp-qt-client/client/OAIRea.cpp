/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRea.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRea::OAIRea(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRea::OAIRea() {
    this->initializeModel();
}

OAIRea::~OAIRea() {}

void OAIRea::initializeModel() {

    m_capital_isSet = false;
    m_capital_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_liquidation_status_isSet = false;
    m_liquidation_status_isValid = false;

    m_partners_isSet = false;
    m_partners_isValid = false;

    m_province_isSet = false;
    m_province_isValid = false;
}

void OAIRea::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRea::fromJsonObject(QJsonObject json) {

    m_capital_isValid = ::OpenAPI::fromJsonValue(m_capital, json[QString("capital")]);
    m_capital_isSet = !json[QString("capital")].isNull() && m_capital_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_liquidation_status_isValid = ::OpenAPI::fromJsonValue(m_liquidation_status, json[QString("liquidation_status")]);
    m_liquidation_status_isSet = !json[QString("liquidation_status")].isNull() && m_liquidation_status_isValid;

    m_partners_isValid = ::OpenAPI::fromJsonValue(m_partners, json[QString("partners")]);
    m_partners_isSet = !json[QString("partners")].isNull() && m_partners_isValid;

    m_province_isValid = ::OpenAPI::fromJsonValue(m_province, json[QString("province")]);
    m_province_isSet = !json[QString("province")].isNull() && m_province_isValid;
}

QString OAIRea::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRea::asJsonObject() const {
    QJsonObject obj;
    if (m_capital_isSet) {
        obj.insert(QString("capital"), ::OpenAPI::toJsonValue(m_capital));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_liquidation_status_isSet) {
        obj.insert(QString("liquidation_status"), ::OpenAPI::toJsonValue(m_liquidation_status));
    }
    if (m_partners_isSet) {
        obj.insert(QString("partners"), ::OpenAPI::toJsonValue(m_partners));
    }
    if (m_province_isSet) {
        obj.insert(QString("province"), ::OpenAPI::toJsonValue(m_province));
    }
    return obj;
}

double OAIRea::getCapital() const {
    return m_capital;
}
void OAIRea::setCapital(const double &capital) {
    m_capital = capital;
    m_capital_isSet = true;
}

bool OAIRea::is_capital_Set() const{
    return m_capital_isSet;
}

bool OAIRea::is_capital_Valid() const{
    return m_capital_isValid;
}

QString OAIRea::getIdentifier() const {
    return m_identifier;
}
void OAIRea::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIRea::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIRea::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIRea::getLiquidationStatus() const {
    return m_liquidation_status;
}
void OAIRea::setLiquidationStatus(const QString &liquidation_status) {
    m_liquidation_status = liquidation_status;
    m_liquidation_status_isSet = true;
}

bool OAIRea::is_liquidation_status_Set() const{
    return m_liquidation_status_isSet;
}

bool OAIRea::is_liquidation_status_Valid() const{
    return m_liquidation_status_isValid;
}

QString OAIRea::getPartners() const {
    return m_partners;
}
void OAIRea::setPartners(const QString &partners) {
    m_partners = partners;
    m_partners_isSet = true;
}

bool OAIRea::is_partners_Set() const{
    return m_partners_isSet;
}

bool OAIRea::is_partners_Valid() const{
    return m_partners_isValid;
}

QString OAIRea::getProvince() const {
    return m_province;
}
void OAIRea::setProvince(const QString &province) {
    m_province = province;
    m_province_isSet = true;
}

bool OAIRea::is_province_Set() const{
    return m_province_isSet;
}

bool OAIRea::is_province_Valid() const{
    return m_province_isValid;
}

bool OAIRea::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capital_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liquidation_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partners_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_province_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRea::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
