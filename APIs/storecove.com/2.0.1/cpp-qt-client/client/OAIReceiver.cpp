/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceiver.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceiver::OAIReceiver(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceiver::OAIReceiver() {
    this->initializeModel();
}

OAIReceiver::~OAIReceiver() {}

void OAIReceiver::initializeModel() {

    m_business_isSet = false;
    m_business_isValid = false;

    m_consumer_isSet = false;
    m_consumer_isValid = false;

    m_government_isSet = false;
    m_government_isValid = false;
}

void OAIReceiver::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceiver::fromJsonObject(QJsonObject json) {

    m_business_isValid = ::OpenAPI::fromJsonValue(m_business, json[QString("business")]);
    m_business_isSet = !json[QString("business")].isNull() && m_business_isValid;

    m_consumer_isValid = ::OpenAPI::fromJsonValue(m_consumer, json[QString("consumer")]);
    m_consumer_isSet = !json[QString("consumer")].isNull() && m_consumer_isValid;

    m_government_isValid = ::OpenAPI::fromJsonValue(m_government, json[QString("government")]);
    m_government_isSet = !json[QString("government")].isNull() && m_government_isValid;
}

QString OAIReceiver::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceiver::asJsonObject() const {
    QJsonObject obj;
    if (m_business.isSet()) {
        obj.insert(QString("business"), ::OpenAPI::toJsonValue(m_business));
    }
    if (m_consumer.isSet()) {
        obj.insert(QString("consumer"), ::OpenAPI::toJsonValue(m_consumer));
    }
    if (m_government.isSet()) {
        obj.insert(QString("government"), ::OpenAPI::toJsonValue(m_government));
    }
    return obj;
}

OAIBusiness_Receiver OAIReceiver::getBusiness() const {
    return m_business;
}
void OAIReceiver::setBusiness(const OAIBusiness_Receiver &business) {
    m_business = business;
    m_business_isSet = true;
}

bool OAIReceiver::is_business_Set() const{
    return m_business_isSet;
}

bool OAIReceiver::is_business_Valid() const{
    return m_business_isValid;
}

OAIConsumer_Receiver OAIReceiver::getConsumer() const {
    return m_consumer;
}
void OAIReceiver::setConsumer(const OAIConsumer_Receiver &consumer) {
    m_consumer = consumer;
    m_consumer_isSet = true;
}

bool OAIReceiver::is_consumer_Set() const{
    return m_consumer_isSet;
}

bool OAIReceiver::is_consumer_Valid() const{
    return m_consumer_isValid;
}

OAIGovernment_Receiver OAIReceiver::getGovernment() const {
    return m_government;
}
void OAIReceiver::setGovernment(const OAIGovernment_Receiver &government) {
    m_government = government;
    m_government_isSet = true;
}

bool OAIReceiver::is_government_Set() const{
    return m_government_isSet;
}

bool OAIReceiver::is_government_Valid() const{
    return m_government_isValid;
}

bool OAIReceiver::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_government.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceiver::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
