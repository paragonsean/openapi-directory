/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAllowanceCharge.h
 *
 * 
 */

#ifndef OAIAllowanceCharge_H
#define OAIAllowanceCharge_H

#include <QJsonObject>

#include "OAITax.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITax;

class OAIAllowanceCharge : public OAIObject {
public:
    OAIAllowanceCharge();
    OAIAllowanceCharge(QString json);
    ~OAIAllowanceCharge() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAmountExcludingTax() const;
    void setAmountExcludingTax(const double &amount_excluding_tax);
    bool is_amount_excluding_tax_Set() const;
    bool is_amount_excluding_tax_Valid() const;

    double getAmountExcludingVat() const;
    void setAmountExcludingVat(const double &amount_excluding_vat);
    bool is_amount_excluding_vat_Set() const;
    bool is_amount_excluding_vat_Valid() const;

    double getAmountIncludingTax() const;
    void setAmountIncludingTax(const double &amount_including_tax);
    bool is_amount_including_tax_Set() const;
    bool is_amount_including_tax_Valid() const;

    double getBaseAmountExcludingTax() const;
    void setBaseAmountExcludingTax(const double &base_amount_excluding_tax);
    bool is_base_amount_excluding_tax_Set() const;
    bool is_base_amount_excluding_tax_Valid() const;

    double getBaseAmountIncludingTax() const;
    void setBaseAmountIncludingTax(const double &base_amount_including_tax);
    bool is_base_amount_including_tax_Set() const;
    bool is_base_amount_including_tax_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    QString getReasonCode() const;
    void setReasonCode(const QString &reason_code);
    bool is_reason_code_Set() const;
    bool is_reason_code_Valid() const;

    OAITax getTax() const;
    void setTax(const OAITax &tax);
    bool is_tax_Set() const;
    bool is_tax_Valid() const;

    QList<OAITax> getTaxesDutiesFees() const;
    void setTaxesDutiesFees(const QList<OAITax> &taxes_duties_fees);
    bool is_taxes_duties_fees_Set() const;
    bool is_taxes_duties_fees_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_amount_excluding_tax;
    bool m_amount_excluding_tax_isSet;
    bool m_amount_excluding_tax_isValid;

    double m_amount_excluding_vat;
    bool m_amount_excluding_vat_isSet;
    bool m_amount_excluding_vat_isValid;

    double m_amount_including_tax;
    bool m_amount_including_tax_isSet;
    bool m_amount_including_tax_isValid;

    double m_base_amount_excluding_tax;
    bool m_base_amount_excluding_tax_isSet;
    bool m_base_amount_excluding_tax_isValid;

    double m_base_amount_including_tax;
    bool m_base_amount_including_tax_isSet;
    bool m_base_amount_including_tax_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    QString m_reason_code;
    bool m_reason_code_isSet;
    bool m_reason_code_isValid;

    OAITax m_tax;
    bool m_tax_isSet;
    bool m_tax_isValid;

    QList<OAITax> m_taxes_duties_fees;
    bool m_taxes_duties_fees_isSet;
    bool m_taxes_duties_fees_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAllowanceCharge)

#endif // OAIAllowanceCharge_H
