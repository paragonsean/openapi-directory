/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderLine::OAIOrderLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderLine::OAIOrderLine() {
    this->initializeModel();
}

OAIOrderLine::~OAIOrderLine() {}

void OAIOrderLine::initializeModel() {

    m_accounting_cost_isSet = false;
    m_accounting_cost_isValid = false;

    m_additional_item_properties_isSet = false;
    m_additional_item_properties_isValid = false;

    m_allow_partial_delivery_isSet = false;
    m_allow_partial_delivery_isValid = false;

    m_allowance_charges_isSet = false;
    m_allowance_charges_isValid = false;

    m_amount_excluding_tax_isSet = false;
    m_amount_excluding_tax_isValid = false;

    m_base_quantity_isSet = false;
    m_base_quantity_isValid = false;

    m_delivery_isSet = false;
    m_delivery_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_item_price_isSet = false;
    m_item_price_isValid = false;

    m_line_id_isSet = false;
    m_line_id_isValid = false;

    m_lot_number_ids_isSet = false;
    m_lot_number_ids_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_quantity_unit_code_isSet = false;
    m_quantity_unit_code_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_taxes_duties_fees_isSet = false;
    m_taxes_duties_fees_isValid = false;
}

void OAIOrderLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderLine::fromJsonObject(QJsonObject json) {

    m_accounting_cost_isValid = ::OpenAPI::fromJsonValue(m_accounting_cost, json[QString("accountingCost")]);
    m_accounting_cost_isSet = !json[QString("accountingCost")].isNull() && m_accounting_cost_isValid;

    m_additional_item_properties_isValid = ::OpenAPI::fromJsonValue(m_additional_item_properties, json[QString("additionalItemProperties")]);
    m_additional_item_properties_isSet = !json[QString("additionalItemProperties")].isNull() && m_additional_item_properties_isValid;

    m_allow_partial_delivery_isValid = ::OpenAPI::fromJsonValue(m_allow_partial_delivery, json[QString("allowPartialDelivery")]);
    m_allow_partial_delivery_isSet = !json[QString("allowPartialDelivery")].isNull() && m_allow_partial_delivery_isValid;

    m_allowance_charges_isValid = ::OpenAPI::fromJsonValue(m_allowance_charges, json[QString("allowanceCharges")]);
    m_allowance_charges_isSet = !json[QString("allowanceCharges")].isNull() && m_allowance_charges_isValid;

    m_amount_excluding_tax_isValid = ::OpenAPI::fromJsonValue(m_amount_excluding_tax, json[QString("amountExcludingTax")]);
    m_amount_excluding_tax_isSet = !json[QString("amountExcludingTax")].isNull() && m_amount_excluding_tax_isValid;

    m_base_quantity_isValid = ::OpenAPI::fromJsonValue(m_base_quantity, json[QString("baseQuantity")]);
    m_base_quantity_isSet = !json[QString("baseQuantity")].isNull() && m_base_quantity_isValid;

    m_delivery_isValid = ::OpenAPI::fromJsonValue(m_delivery, json[QString("delivery")]);
    m_delivery_isSet = !json[QString("delivery")].isNull() && m_delivery_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_item_price_isValid = ::OpenAPI::fromJsonValue(m_item_price, json[QString("itemPrice")]);
    m_item_price_isSet = !json[QString("itemPrice")].isNull() && m_item_price_isValid;

    m_line_id_isValid = ::OpenAPI::fromJsonValue(m_line_id, json[QString("lineId")]);
    m_line_id_isSet = !json[QString("lineId")].isNull() && m_line_id_isValid;

    m_lot_number_ids_isValid = ::OpenAPI::fromJsonValue(m_lot_number_ids, json[QString("lotNumberIds")]);
    m_lot_number_ids_isSet = !json[QString("lotNumberIds")].isNull() && m_lot_number_ids_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_quantity_unit_code_isValid = ::OpenAPI::fromJsonValue(m_quantity_unit_code, json[QString("quantityUnitCode")]);
    m_quantity_unit_code_isSet = !json[QString("quantityUnitCode")].isNull() && m_quantity_unit_code_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;

    m_taxes_duties_fees_isValid = ::OpenAPI::fromJsonValue(m_taxes_duties_fees, json[QString("taxesDutiesFees")]);
    m_taxes_duties_fees_isSet = !json[QString("taxesDutiesFees")].isNull() && m_taxes_duties_fees_isValid;
}

QString OAIOrderLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderLine::asJsonObject() const {
    QJsonObject obj;
    if (m_accounting_cost_isSet) {
        obj.insert(QString("accountingCost"), ::OpenAPI::toJsonValue(m_accounting_cost));
    }
    if (m_additional_item_properties.size() > 0) {
        obj.insert(QString("additionalItemProperties"), ::OpenAPI::toJsonValue(m_additional_item_properties));
    }
    if (m_allow_partial_delivery_isSet) {
        obj.insert(QString("allowPartialDelivery"), ::OpenAPI::toJsonValue(m_allow_partial_delivery));
    }
    if (m_allowance_charges.size() > 0) {
        obj.insert(QString("allowanceCharges"), ::OpenAPI::toJsonValue(m_allowance_charges));
    }
    if (m_amount_excluding_tax_isSet) {
        obj.insert(QString("amountExcludingTax"), ::OpenAPI::toJsonValue(m_amount_excluding_tax));
    }
    if (m_base_quantity_isSet) {
        obj.insert(QString("baseQuantity"), ::OpenAPI::toJsonValue(m_base_quantity));
    }
    if (m_delivery.isSet()) {
        obj.insert(QString("delivery"), ::OpenAPI::toJsonValue(m_delivery));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_item_price_isSet) {
        obj.insert(QString("itemPrice"), ::OpenAPI::toJsonValue(m_item_price));
    }
    if (m_line_id_isSet) {
        obj.insert(QString("lineId"), ::OpenAPI::toJsonValue(m_line_id));
    }
    if (m_lot_number_ids.size() > 0) {
        obj.insert(QString("lotNumberIds"), ::OpenAPI::toJsonValue(m_lot_number_ids));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_quantity_unit_code_isSet) {
        obj.insert(QString("quantityUnitCode"), ::OpenAPI::toJsonValue(m_quantity_unit_code));
    }
    if (m_references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_taxes_duties_fees.size() > 0) {
        obj.insert(QString("taxesDutiesFees"), ::OpenAPI::toJsonValue(m_taxes_duties_fees));
    }
    return obj;
}

QString OAIOrderLine::getAccountingCost() const {
    return m_accounting_cost;
}
void OAIOrderLine::setAccountingCost(const QString &accounting_cost) {
    m_accounting_cost = accounting_cost;
    m_accounting_cost_isSet = true;
}

bool OAIOrderLine::is_accounting_cost_Set() const{
    return m_accounting_cost_isSet;
}

bool OAIOrderLine::is_accounting_cost_Valid() const{
    return m_accounting_cost_isValid;
}

QList<OAIAdditionalItemProperty> OAIOrderLine::getAdditionalItemProperties() const {
    return m_additional_item_properties;
}
void OAIOrderLine::setAdditionalItemProperties(const QList<OAIAdditionalItemProperty> &additional_item_properties) {
    m_additional_item_properties = additional_item_properties;
    m_additional_item_properties_isSet = true;
}

bool OAIOrderLine::is_additional_item_properties_Set() const{
    return m_additional_item_properties_isSet;
}

bool OAIOrderLine::is_additional_item_properties_Valid() const{
    return m_additional_item_properties_isValid;
}

bool OAIOrderLine::isAllowPartialDelivery() const {
    return m_allow_partial_delivery;
}
void OAIOrderLine::setAllowPartialDelivery(const bool &allow_partial_delivery) {
    m_allow_partial_delivery = allow_partial_delivery;
    m_allow_partial_delivery_isSet = true;
}

bool OAIOrderLine::is_allow_partial_delivery_Set() const{
    return m_allow_partial_delivery_isSet;
}

bool OAIOrderLine::is_allow_partial_delivery_Valid() const{
    return m_allow_partial_delivery_isValid;
}

QList<OAILineAllowanceCharge> OAIOrderLine::getAllowanceCharges() const {
    return m_allowance_charges;
}
void OAIOrderLine::setAllowanceCharges(const QList<OAILineAllowanceCharge> &allowance_charges) {
    m_allowance_charges = allowance_charges;
    m_allowance_charges_isSet = true;
}

bool OAIOrderLine::is_allowance_charges_Set() const{
    return m_allowance_charges_isSet;
}

bool OAIOrderLine::is_allowance_charges_Valid() const{
    return m_allowance_charges_isValid;
}

double OAIOrderLine::getAmountExcludingTax() const {
    return m_amount_excluding_tax;
}
void OAIOrderLine::setAmountExcludingTax(const double &amount_excluding_tax) {
    m_amount_excluding_tax = amount_excluding_tax;
    m_amount_excluding_tax_isSet = true;
}

bool OAIOrderLine::is_amount_excluding_tax_Set() const{
    return m_amount_excluding_tax_isSet;
}

bool OAIOrderLine::is_amount_excluding_tax_Valid() const{
    return m_amount_excluding_tax_isValid;
}

double OAIOrderLine::getBaseQuantity() const {
    return m_base_quantity;
}
void OAIOrderLine::setBaseQuantity(const double &base_quantity) {
    m_base_quantity = base_quantity;
    m_base_quantity_isSet = true;
}

bool OAIOrderLine::is_base_quantity_Set() const{
    return m_base_quantity_isSet;
}

bool OAIOrderLine::is_base_quantity_Valid() const{
    return m_base_quantity_isValid;
}

OAILineDelivery OAIOrderLine::getDelivery() const {
    return m_delivery;
}
void OAIOrderLine::setDelivery(const OAILineDelivery &delivery) {
    m_delivery = delivery;
    m_delivery_isSet = true;
}

bool OAIOrderLine::is_delivery_Set() const{
    return m_delivery_isSet;
}

bool OAIOrderLine::is_delivery_Valid() const{
    return m_delivery_isValid;
}

QString OAIOrderLine::getDescription() const {
    return m_description;
}
void OAIOrderLine::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOrderLine::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOrderLine::is_description_Valid() const{
    return m_description_isValid;
}

double OAIOrderLine::getItemPrice() const {
    return m_item_price;
}
void OAIOrderLine::setItemPrice(const double &item_price) {
    m_item_price = item_price;
    m_item_price_isSet = true;
}

bool OAIOrderLine::is_item_price_Set() const{
    return m_item_price_isSet;
}

bool OAIOrderLine::is_item_price_Valid() const{
    return m_item_price_isValid;
}

QString OAIOrderLine::getLineId() const {
    return m_line_id;
}
void OAIOrderLine::setLineId(const QString &line_id) {
    m_line_id = line_id;
    m_line_id_isSet = true;
}

bool OAIOrderLine::is_line_id_Set() const{
    return m_line_id_isSet;
}

bool OAIOrderLine::is_line_id_Valid() const{
    return m_line_id_isValid;
}

QList<QString> OAIOrderLine::getLotNumberIds() const {
    return m_lot_number_ids;
}
void OAIOrderLine::setLotNumberIds(const QList<QString> &lot_number_ids) {
    m_lot_number_ids = lot_number_ids;
    m_lot_number_ids_isSet = true;
}

bool OAIOrderLine::is_lot_number_ids_Set() const{
    return m_lot_number_ids_isSet;
}

bool OAIOrderLine::is_lot_number_ids_Valid() const{
    return m_lot_number_ids_isValid;
}

QString OAIOrderLine::getName() const {
    return m_name;
}
void OAIOrderLine::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrderLine::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrderLine::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrderLine::getNote() const {
    return m_note;
}
void OAIOrderLine::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIOrderLine::is_note_Set() const{
    return m_note_isSet;
}

bool OAIOrderLine::is_note_Valid() const{
    return m_note_isValid;
}

double OAIOrderLine::getQuantity() const {
    return m_quantity;
}
void OAIOrderLine::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIOrderLine::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIOrderLine::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIOrderLine::getQuantityUnitCode() const {
    return m_quantity_unit_code;
}
void OAIOrderLine::setQuantityUnitCode(const QString &quantity_unit_code) {
    m_quantity_unit_code = quantity_unit_code;
    m_quantity_unit_code_isSet = true;
}

bool OAIOrderLine::is_quantity_unit_code_Set() const{
    return m_quantity_unit_code_isSet;
}

bool OAIOrderLine::is_quantity_unit_code_Valid() const{
    return m_quantity_unit_code_isValid;
}

QList<OAIReference> OAIOrderLine::getReferences() const {
    return m_references;
}
void OAIOrderLine::setReferences(const QList<OAIReference> &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAIOrderLine::is_references_Set() const{
    return m_references_isSet;
}

bool OAIOrderLine::is_references_Valid() const{
    return m_references_isValid;
}

QList<OAITax> OAIOrderLine::getTaxesDutiesFees() const {
    return m_taxes_duties_fees;
}
void OAIOrderLine::setTaxesDutiesFees(const QList<OAITax> &taxes_duties_fees) {
    m_taxes_duties_fees = taxes_duties_fees;
    m_taxes_duties_fees_isSet = true;
}

bool OAIOrderLine::is_taxes_duties_fees_Set() const{
    return m_taxes_duties_fees_isSet;
}

bool OAIOrderLine::is_taxes_duties_fees_Valid() const{
    return m_taxes_duties_fees_isValid;
}

bool OAIOrderLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounting_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_item_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_partial_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowance_charges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_excluding_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_number_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_unit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes_duties_fees.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_excluding_tax_isValid && m_line_id_isValid && m_quantity_isValid && m_quantity_unit_code_isValid && true;
}

} // namespace OpenAPI
