/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseInvoiceTaxElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseInvoiceTaxElement::OAIPurchaseInvoiceTaxElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseInvoiceTaxElement::OAIPurchaseInvoiceTaxElement() {
    this->initializeModel();
}

OAIPurchaseInvoiceTaxElement::~OAIPurchaseInvoiceTaxElement() {}

void OAIPurchaseInvoiceTaxElement::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_category_code_isSet = false;
    m_category_code_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPurchaseInvoiceTaxElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseInvoiceTaxElement::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_category_code_isValid = ::OpenAPI::fromJsonValue(m_category_code, json[QString("category_code")]);
    m_category_code_isSet = !json[QString("category_code")].isNull() && m_category_code_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPurchaseInvoiceTaxElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseInvoiceTaxElement::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_category_code_isSet) {
        obj.insert(QString("category_code"), ::OpenAPI::toJsonValue(m_category_code));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

double OAIPurchaseInvoiceTaxElement::getAmount() const {
    return m_amount;
}
void OAIPurchaseInvoiceTaxElement::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPurchaseInvoiceTaxElement::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPurchaseInvoiceTaxElement::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIPurchaseInvoiceTaxElement::getCategory() const {
    return m_category;
}
void OAIPurchaseInvoiceTaxElement::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIPurchaseInvoiceTaxElement::is_category_Set() const{
    return m_category_isSet;
}

bool OAIPurchaseInvoiceTaxElement::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIPurchaseInvoiceTaxElement::getCategoryCode() const {
    return m_category_code;
}
void OAIPurchaseInvoiceTaxElement::setCategoryCode(const QString &category_code) {
    m_category_code = category_code;
    m_category_code_isSet = true;
}

bool OAIPurchaseInvoiceTaxElement::is_category_code_Set() const{
    return m_category_code_isSet;
}

bool OAIPurchaseInvoiceTaxElement::is_category_code_Valid() const{
    return m_category_code_isValid;
}

QString OAIPurchaseInvoiceTaxElement::getCountry() const {
    return m_country;
}
void OAIPurchaseInvoiceTaxElement::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPurchaseInvoiceTaxElement::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPurchaseInvoiceTaxElement::is_country_Valid() const{
    return m_country_isValid;
}

double OAIPurchaseInvoiceTaxElement::getPercentage() const {
    return m_percentage;
}
void OAIPurchaseInvoiceTaxElement::setPercentage(const double &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIPurchaseInvoiceTaxElement::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIPurchaseInvoiceTaxElement::is_percentage_Valid() const{
    return m_percentage_isValid;
}

QString OAIPurchaseInvoiceTaxElement::getType() const {
    return m_type;
}
void OAIPurchaseInvoiceTaxElement::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPurchaseInvoiceTaxElement::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPurchaseInvoiceTaxElement::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPurchaseInvoiceTaxElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseInvoiceTaxElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
