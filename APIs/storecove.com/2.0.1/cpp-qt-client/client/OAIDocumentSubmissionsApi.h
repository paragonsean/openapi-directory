/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDocumentSubmissionsApi_H
#define OAI_OAIDocumentSubmissionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDocumentSubmission.h"
#include "OAIDocumentSubmissionEvidence.h"
#include "OAIDocumentSubmissionResult.h"
#include "OAIErrorModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDocumentSubmissionsApi : public QObject {
    Q_OBJECT

public:
    OAIDocumentSubmissionsApi(const int timeOut = 0);
    ~OAIDocumentSubmissionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_document_submission OAIDocumentSubmission [required]
    */
    virtual void createDocumentSubmission(const OAIDocumentSubmission &oai_document_submission);

    /**
    * @param[in]  guid QString [required]
    * @param[in]  evidence_type QString [required]
    */
    virtual void showDocumentSubmissionEvidence(const QString &guid, const QString &evidence_type);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createDocumentSubmissionCallback(OAIHttpRequestWorker *worker);
    void showDocumentSubmissionEvidenceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createDocumentSubmissionSignal(OAIDocumentSubmissionResult summary);
    void showDocumentSubmissionEvidenceSignal(OAIDocumentSubmissionEvidence summary);


    void createDocumentSubmissionSignalFull(OAIHttpRequestWorker *worker, OAIDocumentSubmissionResult summary);
    void showDocumentSubmissionEvidenceSignalFull(OAIHttpRequestWorker *worker, OAIDocumentSubmissionEvidence summary);

    Q_DECL_DEPRECATED_X("Use createDocumentSubmissionSignalError() instead")
    void createDocumentSubmissionSignalE(OAIDocumentSubmissionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDocumentSubmissionSignalError(OAIDocumentSubmissionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showDocumentSubmissionEvidenceSignalError() instead")
    void showDocumentSubmissionEvidenceSignalE(OAIDocumentSubmissionEvidence summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showDocumentSubmissionEvidenceSignalError(OAIDocumentSubmissionEvidence summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createDocumentSubmissionSignalErrorFull() instead")
    void createDocumentSubmissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDocumentSubmissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showDocumentSubmissionEvidenceSignalErrorFull() instead")
    void showDocumentSubmissionEvidenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showDocumentSubmissionEvidenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
