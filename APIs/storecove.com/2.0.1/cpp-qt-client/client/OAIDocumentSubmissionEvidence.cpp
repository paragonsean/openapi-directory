/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentSubmissionEvidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentSubmissionEvidence::OAIDocumentSubmissionEvidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentSubmissionEvidence::OAIDocumentSubmissionEvidence() {
    this->initializeModel();
}

OAIDocumentSubmissionEvidence::~OAIDocumentSubmissionEvidence() {}

void OAIDocumentSubmissionEvidence::initializeModel() {

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_evidence_isSet = false;
    m_evidence_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_receiver_isSet = false;
    m_receiver_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;
}

void OAIDocumentSubmissionEvidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentSubmissionEvidence::fromJsonObject(QJsonObject json) {

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_evidence_isValid = ::OpenAPI::fromJsonValue(m_evidence, json[QString("evidence")]);
    m_evidence_isSet = !json[QString("evidence")].isNull() && m_evidence_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_receiver_isValid = ::OpenAPI::fromJsonValue(m_receiver, json[QString("receiver")]);
    m_receiver_isSet = !json[QString("receiver")].isNull() && m_receiver_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("sender")]);
    m_sender_isSet = !json[QString("sender")].isNull() && m_sender_isValid;
}

QString OAIDocumentSubmissionEvidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentSubmissionEvidence::asJsonObject() const {
    QJsonObject obj;
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_evidence.isSet()) {
        obj.insert(QString("evidence"), ::OpenAPI::toJsonValue(m_evidence));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_receiver_isSet) {
        obj.insert(QString("receiver"), ::OpenAPI::toJsonValue(m_receiver));
    }
    if (m_sender_isSet) {
        obj.insert(QString("sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    return obj;
}

QList<OAIDocumentSubmissionEvidenceDocument> OAIDocumentSubmissionEvidence::getDocuments() const {
    return m_documents;
}
void OAIDocumentSubmissionEvidence::setDocuments(const QList<OAIDocumentSubmissionEvidenceDocument> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIDocumentSubmissionEvidence::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIDocumentSubmissionEvidence::is_documents_Valid() const{
    return m_documents_isValid;
}

OAIDocumentSubmissionEvidenceEvidence OAIDocumentSubmissionEvidence::getEvidence() const {
    return m_evidence;
}
void OAIDocumentSubmissionEvidence::setEvidence(const OAIDocumentSubmissionEvidenceEvidence &evidence) {
    m_evidence = evidence;
    m_evidence_isSet = true;
}

bool OAIDocumentSubmissionEvidence::is_evidence_Set() const{
    return m_evidence_isSet;
}

bool OAIDocumentSubmissionEvidence::is_evidence_Valid() const{
    return m_evidence_isValid;
}

QString OAIDocumentSubmissionEvidence::getNetwork() const {
    return m_network;
}
void OAIDocumentSubmissionEvidence::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIDocumentSubmissionEvidence::is_network_Set() const{
    return m_network_isSet;
}

bool OAIDocumentSubmissionEvidence::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIDocumentSubmissionEvidence::getReceiver() const {
    return m_receiver;
}
void OAIDocumentSubmissionEvidence::setReceiver(const QString &receiver) {
    m_receiver = receiver;
    m_receiver_isSet = true;
}

bool OAIDocumentSubmissionEvidence::is_receiver_Set() const{
    return m_receiver_isSet;
}

bool OAIDocumentSubmissionEvidence::is_receiver_Valid() const{
    return m_receiver_isValid;
}

QString OAIDocumentSubmissionEvidence::getSender() const {
    return m_sender;
}
void OAIDocumentSubmissionEvidence::setSender(const QString &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIDocumentSubmissionEvidence::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIDocumentSubmissionEvidence::is_sender_Valid() const{
    return m_sender_isValid;
}

bool OAIDocumentSubmissionEvidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentSubmissionEvidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
