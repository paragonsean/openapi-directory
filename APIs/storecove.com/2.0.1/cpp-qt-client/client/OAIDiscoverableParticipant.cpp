/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscoverableParticipant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscoverableParticipant::OAIDiscoverableParticipant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscoverableParticipant::OAIDiscoverableParticipant() {
    this->initializeModel();
}

OAIDiscoverableParticipant::~OAIDiscoverableParticipant() {}

void OAIDiscoverableParticipant::initializeModel() {

    m_document_types_isSet = false;
    m_document_types_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_meta_scheme_isSet = false;
    m_meta_scheme_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;
}

void OAIDiscoverableParticipant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscoverableParticipant::fromJsonObject(QJsonObject json) {

    m_document_types_isValid = ::OpenAPI::fromJsonValue(m_document_types, json[QString("documentTypes")]);
    m_document_types_isSet = !json[QString("documentTypes")].isNull() && m_document_types_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_meta_scheme_isValid = ::OpenAPI::fromJsonValue(m_meta_scheme, json[QString("metaScheme")]);
    m_meta_scheme_isSet = !json[QString("metaScheme")].isNull() && m_meta_scheme_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("scheme")]);
    m_scheme_isSet = !json[QString("scheme")].isNull() && m_scheme_isValid;
}

QString OAIDiscoverableParticipant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscoverableParticipant::asJsonObject() const {
    QJsonObject obj;
    if (m_document_types.size() > 0) {
        obj.insert(QString("documentTypes"), ::OpenAPI::toJsonValue(m_document_types));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_meta_scheme_isSet) {
        obj.insert(QString("metaScheme"), ::OpenAPI::toJsonValue(m_meta_scheme));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_scheme_isSet) {
        obj.insert(QString("scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    return obj;
}

QList<QString> OAIDiscoverableParticipant::getDocumentTypes() const {
    return m_document_types;
}
void OAIDiscoverableParticipant::setDocumentTypes(const QList<QString> &document_types) {
    m_document_types = document_types;
    m_document_types_isSet = true;
}

bool OAIDiscoverableParticipant::is_document_types_Set() const{
    return m_document_types_isSet;
}

bool OAIDiscoverableParticipant::is_document_types_Valid() const{
    return m_document_types_isValid;
}

QString OAIDiscoverableParticipant::getIdentifier() const {
    return m_identifier;
}
void OAIDiscoverableParticipant::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIDiscoverableParticipant::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIDiscoverableParticipant::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIDiscoverableParticipant::getMetaScheme() const {
    return m_meta_scheme;
}
void OAIDiscoverableParticipant::setMetaScheme(const QString &meta_scheme) {
    m_meta_scheme = meta_scheme;
    m_meta_scheme_isSet = true;
}

bool OAIDiscoverableParticipant::is_meta_scheme_Set() const{
    return m_meta_scheme_isSet;
}

bool OAIDiscoverableParticipant::is_meta_scheme_Valid() const{
    return m_meta_scheme_isValid;
}

QString OAIDiscoverableParticipant::getNetwork() const {
    return m_network;
}
void OAIDiscoverableParticipant::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIDiscoverableParticipant::is_network_Set() const{
    return m_network_isSet;
}

bool OAIDiscoverableParticipant::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIDiscoverableParticipant::getScheme() const {
    return m_scheme;
}
void OAIDiscoverableParticipant::setScheme(const QString &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAIDiscoverableParticipant::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAIDiscoverableParticipant::is_scheme_Valid() const{
    return m_scheme_isValid;
}

bool OAIDiscoverableParticipant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscoverableParticipant::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifier_isValid && m_scheme_isValid && true;
}

} // namespace OpenAPI
