/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDelivery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDelivery::OAIDelivery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDelivery::OAIDelivery() {
    this->initializeModel();
}

OAIDelivery::~OAIDelivery() {}

void OAIDelivery::initializeModel() {

    m_actual_date_isSet = false;
    m_actual_date_isValid = false;

    m_delivery_location_isSet = false;
    m_delivery_location_isValid = false;

    m_delivery_party_isSet = false;
    m_delivery_party_isValid = false;

    m_delivery_party_name_isSet = false;
    m_delivery_party_name_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_requested_delivery_period_isSet = false;
    m_requested_delivery_period_isValid = false;

    m_shipping_marks_isSet = false;
    m_shipping_marks_isValid = false;
}

void OAIDelivery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDelivery::fromJsonObject(QJsonObject json) {

    m_actual_date_isValid = ::OpenAPI::fromJsonValue(m_actual_date, json[QString("actualDate")]);
    m_actual_date_isSet = !json[QString("actualDate")].isNull() && m_actual_date_isValid;

    m_delivery_location_isValid = ::OpenAPI::fromJsonValue(m_delivery_location, json[QString("deliveryLocation")]);
    m_delivery_location_isSet = !json[QString("deliveryLocation")].isNull() && m_delivery_location_isValid;

    m_delivery_party_isValid = ::OpenAPI::fromJsonValue(m_delivery_party, json[QString("deliveryParty")]);
    m_delivery_party_isSet = !json[QString("deliveryParty")].isNull() && m_delivery_party_isValid;

    m_delivery_party_name_isValid = ::OpenAPI::fromJsonValue(m_delivery_party_name, json[QString("deliveryPartyName")]);
    m_delivery_party_name_isSet = !json[QString("deliveryPartyName")].isNull() && m_delivery_party_name_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_requested_delivery_period_isValid = ::OpenAPI::fromJsonValue(m_requested_delivery_period, json[QString("requestedDeliveryPeriod")]);
    m_requested_delivery_period_isSet = !json[QString("requestedDeliveryPeriod")].isNull() && m_requested_delivery_period_isValid;

    m_shipping_marks_isValid = ::OpenAPI::fromJsonValue(m_shipping_marks, json[QString("shippingMarks")]);
    m_shipping_marks_isSet = !json[QString("shippingMarks")].isNull() && m_shipping_marks_isValid;
}

QString OAIDelivery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDelivery::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_date_isSet) {
        obj.insert(QString("actualDate"), ::OpenAPI::toJsonValue(m_actual_date));
    }
    if (m_delivery_location.isSet()) {
        obj.insert(QString("deliveryLocation"), ::OpenAPI::toJsonValue(m_delivery_location));
    }
    if (m_delivery_party.isSet()) {
        obj.insert(QString("deliveryParty"), ::OpenAPI::toJsonValue(m_delivery_party));
    }
    if (m_delivery_party_name_isSet) {
        obj.insert(QString("deliveryPartyName"), ::OpenAPI::toJsonValue(m_delivery_party_name));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_requested_delivery_period_isSet) {
        obj.insert(QString("requestedDeliveryPeriod"), ::OpenAPI::toJsonValue(m_requested_delivery_period));
    }
    if (m_shipping_marks_isSet) {
        obj.insert(QString("shippingMarks"), ::OpenAPI::toJsonValue(m_shipping_marks));
    }
    return obj;
}

QString OAIDelivery::getActualDate() const {
    return m_actual_date;
}
void OAIDelivery::setActualDate(const QString &actual_date) {
    m_actual_date = actual_date;
    m_actual_date_isSet = true;
}

bool OAIDelivery::is_actual_date_Set() const{
    return m_actual_date_isSet;
}

bool OAIDelivery::is_actual_date_Valid() const{
    return m_actual_date_isValid;
}

OAIDelivery_deliveryLocation OAIDelivery::getDeliveryLocation() const {
    return m_delivery_location;
}
void OAIDelivery::setDeliveryLocation(const OAIDelivery_deliveryLocation &delivery_location) {
    m_delivery_location = delivery_location;
    m_delivery_location_isSet = true;
}

bool OAIDelivery::is_delivery_location_Set() const{
    return m_delivery_location_isSet;
}

bool OAIDelivery::is_delivery_location_Valid() const{
    return m_delivery_location_isValid;
}

OAIDeliveryParty OAIDelivery::getDeliveryParty() const {
    return m_delivery_party;
}
void OAIDelivery::setDeliveryParty(const OAIDeliveryParty &delivery_party) {
    m_delivery_party = delivery_party;
    m_delivery_party_isSet = true;
}

bool OAIDelivery::is_delivery_party_Set() const{
    return m_delivery_party_isSet;
}

bool OAIDelivery::is_delivery_party_Valid() const{
    return m_delivery_party_isValid;
}

QString OAIDelivery::getDeliveryPartyName() const {
    return m_delivery_party_name;
}
void OAIDelivery::setDeliveryPartyName(const QString &delivery_party_name) {
    m_delivery_party_name = delivery_party_name;
    m_delivery_party_name_isSet = true;
}

bool OAIDelivery::is_delivery_party_name_Set() const{
    return m_delivery_party_name_isSet;
}

bool OAIDelivery::is_delivery_party_name_Valid() const{
    return m_delivery_party_name_isValid;
}

double OAIDelivery::getQuantity() const {
    return m_quantity;
}
void OAIDelivery::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIDelivery::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIDelivery::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIDelivery::getRequestedDeliveryPeriod() const {
    return m_requested_delivery_period;
}
void OAIDelivery::setRequestedDeliveryPeriod(const QString &requested_delivery_period) {
    m_requested_delivery_period = requested_delivery_period;
    m_requested_delivery_period_isSet = true;
}

bool OAIDelivery::is_requested_delivery_period_Set() const{
    return m_requested_delivery_period_isSet;
}

bool OAIDelivery::is_requested_delivery_period_Valid() const{
    return m_requested_delivery_period_isValid;
}

QString OAIDelivery::getShippingMarks() const {
    return m_shipping_marks;
}
void OAIDelivery::setShippingMarks(const QString &shipping_marks) {
    m_shipping_marks = shipping_marks;
    m_shipping_marks_isSet = true;
}

bool OAIDelivery::is_shipping_marks_Set() const{
    return m_shipping_marks_isSet;
}

bool OAIDelivery::is_shipping_marks_Valid() const{
    return m_shipping_marks_isValid;
}

bool OAIDelivery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_party.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_party_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_delivery_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_marks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDelivery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
