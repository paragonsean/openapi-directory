/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdministrationCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdministrationCreate::OAIAdministrationCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdministrationCreate::OAIAdministrationCreate() {
    this->initializeModel();
}

OAIAdministrationCreate::~OAIAdministrationCreate() {}

void OAIAdministrationCreate::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_legal_entity_id_isSet = false;
    m_legal_entity_id_isValid = false;

    m_package_version_isSet = false;
    m_package_version_isValid = false;

    m_packaging_isSet = false;
    m_packaging_isValid = false;

    m_sender_email_identity_id_isSet = false;
    m_sender_email_identity_id_isValid = false;
}

void OAIAdministrationCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdministrationCreate::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_legal_entity_id_isValid = ::OpenAPI::fromJsonValue(m_legal_entity_id, json[QString("legal_entity_id")]);
    m_legal_entity_id_isSet = !json[QString("legal_entity_id")].isNull() && m_legal_entity_id_isValid;

    m_package_version_isValid = ::OpenAPI::fromJsonValue(m_package_version, json[QString("package_version")]);
    m_package_version_isSet = !json[QString("package_version")].isNull() && m_package_version_isValid;

    m_packaging_isValid = ::OpenAPI::fromJsonValue(m_packaging, json[QString("packaging")]);
    m_packaging_isSet = !json[QString("packaging")].isNull() && m_packaging_isValid;

    m_sender_email_identity_id_isValid = ::OpenAPI::fromJsonValue(m_sender_email_identity_id, json[QString("sender_email_identity_id")]);
    m_sender_email_identity_id_isSet = !json[QString("sender_email_identity_id")].isNull() && m_sender_email_identity_id_isValid;
}

QString OAIAdministrationCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdministrationCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_legal_entity_id_isSet) {
        obj.insert(QString("legal_entity_id"), ::OpenAPI::toJsonValue(m_legal_entity_id));
    }
    if (m_package_version_isSet) {
        obj.insert(QString("package_version"), ::OpenAPI::toJsonValue(m_package_version));
    }
    if (m_packaging_isSet) {
        obj.insert(QString("packaging"), ::OpenAPI::toJsonValue(m_packaging));
    }
    if (m_sender_email_identity_id_isSet) {
        obj.insert(QString("sender_email_identity_id"), ::OpenAPI::toJsonValue(m_sender_email_identity_id));
    }
    return obj;
}

QString OAIAdministrationCreate::getEmail() const {
    return m_email;
}
void OAIAdministrationCreate::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAdministrationCreate::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAdministrationCreate::is_email_Valid() const{
    return m_email_isValid;
}

qint64 OAIAdministrationCreate::getLegalEntityId() const {
    return m_legal_entity_id;
}
void OAIAdministrationCreate::setLegalEntityId(const qint64 &legal_entity_id) {
    m_legal_entity_id = legal_entity_id;
    m_legal_entity_id_isSet = true;
}

bool OAIAdministrationCreate::is_legal_entity_id_Set() const{
    return m_legal_entity_id_isSet;
}

bool OAIAdministrationCreate::is_legal_entity_id_Valid() const{
    return m_legal_entity_id_isValid;
}

QString OAIAdministrationCreate::getPackageVersion() const {
    return m_package_version;
}
void OAIAdministrationCreate::setPackageVersion(const QString &package_version) {
    m_package_version = package_version;
    m_package_version_isSet = true;
}

bool OAIAdministrationCreate::is_package_version_Set() const{
    return m_package_version_isSet;
}

bool OAIAdministrationCreate::is_package_version_Valid() const{
    return m_package_version_isValid;
}

QString OAIAdministrationCreate::getPackaging() const {
    return m_packaging;
}
void OAIAdministrationCreate::setPackaging(const QString &packaging) {
    m_packaging = packaging;
    m_packaging_isSet = true;
}

bool OAIAdministrationCreate::is_packaging_Set() const{
    return m_packaging_isSet;
}

bool OAIAdministrationCreate::is_packaging_Valid() const{
    return m_packaging_isValid;
}

qint64 OAIAdministrationCreate::getSenderEmailIdentityId() const {
    return m_sender_email_identity_id;
}
void OAIAdministrationCreate::setSenderEmailIdentityId(const qint64 &sender_email_identity_id) {
    m_sender_email_identity_id = sender_email_identity_id;
    m_sender_email_identity_id_isSet = true;
}

bool OAIAdministrationCreate::is_sender_email_identity_id_Set() const{
    return m_sender_email_identity_id_isSet;
}

bool OAIAdministrationCreate::is_sender_email_identity_id_Valid() const{
    return m_sender_email_identity_id_isValid;
}

bool OAIAdministrationCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packaging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_email_identity_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdministrationCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
