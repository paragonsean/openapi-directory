/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseInvoiceDocumentTotals.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseInvoiceDocumentTotals::OAIPurchaseInvoiceDocumentTotals(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseInvoiceDocumentTotals::OAIPurchaseInvoiceDocumentTotals() {
    this->initializeModel();
}

OAIPurchaseInvoiceDocumentTotals::~OAIPurchaseInvoiceDocumentTotals() {}

void OAIPurchaseInvoiceDocumentTotals::initializeModel() {

    m_payable_isSet = false;
    m_payable_isValid = false;

    m_prepaid_isSet = false;
    m_prepaid_isValid = false;

    m_rounding_isSet = false;
    m_rounding_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIPurchaseInvoiceDocumentTotals::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseInvoiceDocumentTotals::fromJsonObject(QJsonObject json) {

    m_payable_isValid = ::OpenAPI::fromJsonValue(m_payable, json[QString("payable")]);
    m_payable_isSet = !json[QString("payable")].isNull() && m_payable_isValid;

    m_prepaid_isValid = ::OpenAPI::fromJsonValue(m_prepaid, json[QString("prepaid")]);
    m_prepaid_isSet = !json[QString("prepaid")].isNull() && m_prepaid_isValid;

    m_rounding_isValid = ::OpenAPI::fromJsonValue(m_rounding, json[QString("rounding")]);
    m_rounding_isSet = !json[QString("rounding")].isNull() && m_rounding_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIPurchaseInvoiceDocumentTotals::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseInvoiceDocumentTotals::asJsonObject() const {
    QJsonObject obj;
    if (m_payable_isSet) {
        obj.insert(QString("payable"), ::OpenAPI::toJsonValue(m_payable));
    }
    if (m_prepaid_isSet) {
        obj.insert(QString("prepaid"), ::OpenAPI::toJsonValue(m_prepaid));
    }
    if (m_rounding_isSet) {
        obj.insert(QString("rounding"), ::OpenAPI::toJsonValue(m_rounding));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

double OAIPurchaseInvoiceDocumentTotals::getPayable() const {
    return m_payable;
}
void OAIPurchaseInvoiceDocumentTotals::setPayable(const double &payable) {
    m_payable = payable;
    m_payable_isSet = true;
}

bool OAIPurchaseInvoiceDocumentTotals::is_payable_Set() const{
    return m_payable_isSet;
}

bool OAIPurchaseInvoiceDocumentTotals::is_payable_Valid() const{
    return m_payable_isValid;
}

double OAIPurchaseInvoiceDocumentTotals::getPrepaid() const {
    return m_prepaid;
}
void OAIPurchaseInvoiceDocumentTotals::setPrepaid(const double &prepaid) {
    m_prepaid = prepaid;
    m_prepaid_isSet = true;
}

bool OAIPurchaseInvoiceDocumentTotals::is_prepaid_Set() const{
    return m_prepaid_isSet;
}

bool OAIPurchaseInvoiceDocumentTotals::is_prepaid_Valid() const{
    return m_prepaid_isValid;
}

double OAIPurchaseInvoiceDocumentTotals::getRounding() const {
    return m_rounding;
}
void OAIPurchaseInvoiceDocumentTotals::setRounding(const double &rounding) {
    m_rounding = rounding;
    m_rounding_isSet = true;
}

bool OAIPurchaseInvoiceDocumentTotals::is_rounding_Set() const{
    return m_rounding_isSet;
}

bool OAIPurchaseInvoiceDocumentTotals::is_rounding_Valid() const{
    return m_rounding_isValid;
}

double OAIPurchaseInvoiceDocumentTotals::getTotal() const {
    return m_total;
}
void OAIPurchaseInvoiceDocumentTotals::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPurchaseInvoiceDocumentTotals::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPurchaseInvoiceDocumentTotals::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIPurchaseInvoiceDocumentTotals::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_payable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepaid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseInvoiceDocumentTotals::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
