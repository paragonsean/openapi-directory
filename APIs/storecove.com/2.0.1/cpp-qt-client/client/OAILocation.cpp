/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_building_number_isSet = false;
    m_building_number_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_department_isSet = false;
    m_department_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_line1_isSet = false;
    m_line1_isValid = false;

    m_line2_isSet = false;
    m_line2_isValid = false;

    m_neighborhood_isSet = false;
    m_neighborhood_isValid = false;

    m_scheme_id_isSet = false;
    m_scheme_id_isValid = false;

    m_secondary_number_isSet = false;
    m_secondary_number_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_building_number_isValid = ::OpenAPI::fromJsonValue(m_building_number, json[QString("building_number")]);
    m_building_number_isSet = !json[QString("building_number")].isNull() && m_building_number_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_department_isValid = ::OpenAPI::fromJsonValue(m_department, json[QString("department")]);
    m_department_isSet = !json[QString("department")].isNull() && m_department_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_line1_isValid = ::OpenAPI::fromJsonValue(m_line1, json[QString("line1")]);
    m_line1_isSet = !json[QString("line1")].isNull() && m_line1_isValid;

    m_line2_isValid = ::OpenAPI::fromJsonValue(m_line2, json[QString("line2")]);
    m_line2_isSet = !json[QString("line2")].isNull() && m_line2_isValid;

    m_neighborhood_isValid = ::OpenAPI::fromJsonValue(m_neighborhood, json[QString("neighborhood")]);
    m_neighborhood_isSet = !json[QString("neighborhood")].isNull() && m_neighborhood_isValid;

    m_scheme_id_isValid = ::OpenAPI::fromJsonValue(m_scheme_id, json[QString("scheme_id")]);
    m_scheme_id_isSet = !json[QString("scheme_id")].isNull() && m_scheme_id_isValid;

    m_secondary_number_isValid = ::OpenAPI::fromJsonValue(m_secondary_number, json[QString("secondary_number")]);
    m_secondary_number_isSet = !json[QString("secondary_number")].isNull() && m_secondary_number_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_building_number_isSet) {
        obj.insert(QString("building_number"), ::OpenAPI::toJsonValue(m_building_number));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_county_isSet) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_department_isSet) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(m_department));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_line1_isSet) {
        obj.insert(QString("line1"), ::OpenAPI::toJsonValue(m_line1));
    }
    if (m_line2_isSet) {
        obj.insert(QString("line2"), ::OpenAPI::toJsonValue(m_line2));
    }
    if (m_neighborhood_isSet) {
        obj.insert(QString("neighborhood"), ::OpenAPI::toJsonValue(m_neighborhood));
    }
    if (m_scheme_id_isSet) {
        obj.insert(QString("scheme_id"), ::OpenAPI::toJsonValue(m_scheme_id));
    }
    if (m_secondary_number_isSet) {
        obj.insert(QString("secondary_number"), ::OpenAPI::toJsonValue(m_secondary_number));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAILocation::getBuildingNumber() const {
    return m_building_number;
}
void OAILocation::setBuildingNumber(const QString &building_number) {
    m_building_number = building_number;
    m_building_number_isSet = true;
}

bool OAILocation::is_building_number_Set() const{
    return m_building_number_isSet;
}

bool OAILocation::is_building_number_Valid() const{
    return m_building_number_isValid;
}

QString OAILocation::getCity() const {
    return m_city;
}
void OAILocation::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAILocation::is_city_Set() const{
    return m_city_isSet;
}

bool OAILocation::is_city_Valid() const{
    return m_city_isValid;
}

QString OAILocation::getCountry() const {
    return m_country;
}
void OAILocation::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAILocation::is_country_Set() const{
    return m_country_isSet;
}

bool OAILocation::is_country_Valid() const{
    return m_country_isValid;
}

QString OAILocation::getCounty() const {
    return m_county;
}
void OAILocation::setCounty(const QString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAILocation::is_county_Set() const{
    return m_county_isSet;
}

bool OAILocation::is_county_Valid() const{
    return m_county_isValid;
}

QString OAILocation::getDepartment() const {
    return m_department;
}
void OAILocation::setDepartment(const QString &department) {
    m_department = department;
    m_department_isSet = true;
}

bool OAILocation::is_department_Set() const{
    return m_department_isSet;
}

bool OAILocation::is_department_Valid() const{
    return m_department_isValid;
}

QString OAILocation::getId() const {
    return m_id;
}
void OAILocation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILocation::is_id_Set() const{
    return m_id_isSet;
}

bool OAILocation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILocation::getLine1() const {
    return m_line1;
}
void OAILocation::setLine1(const QString &line1) {
    m_line1 = line1;
    m_line1_isSet = true;
}

bool OAILocation::is_line1_Set() const{
    return m_line1_isSet;
}

bool OAILocation::is_line1_Valid() const{
    return m_line1_isValid;
}

QString OAILocation::getLine2() const {
    return m_line2;
}
void OAILocation::setLine2(const QString &line2) {
    m_line2 = line2;
    m_line2_isSet = true;
}

bool OAILocation::is_line2_Set() const{
    return m_line2_isSet;
}

bool OAILocation::is_line2_Valid() const{
    return m_line2_isValid;
}

QString OAILocation::getNeighborhood() const {
    return m_neighborhood;
}
void OAILocation::setNeighborhood(const QString &neighborhood) {
    m_neighborhood = neighborhood;
    m_neighborhood_isSet = true;
}

bool OAILocation::is_neighborhood_Set() const{
    return m_neighborhood_isSet;
}

bool OAILocation::is_neighborhood_Valid() const{
    return m_neighborhood_isValid;
}

QString OAILocation::getSchemeId() const {
    return m_scheme_id;
}
void OAILocation::setSchemeId(const QString &scheme_id) {
    m_scheme_id = scheme_id;
    m_scheme_id_isSet = true;
}

bool OAILocation::is_scheme_id_Set() const{
    return m_scheme_id_isSet;
}

bool OAILocation::is_scheme_id_Valid() const{
    return m_scheme_id_isValid;
}

QString OAILocation::getSecondaryNumber() const {
    return m_secondary_number;
}
void OAILocation::setSecondaryNumber(const QString &secondary_number) {
    m_secondary_number = secondary_number;
    m_secondary_number_isSet = true;
}

bool OAILocation::is_secondary_number_Set() const{
    return m_secondary_number_isSet;
}

bool OAILocation::is_secondary_number_Valid() const{
    return m_secondary_number_isValid;
}

QString OAILocation::getZip() const {
    return m_zip;
}
void OAILocation::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAILocation::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAILocation::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_building_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighborhood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
