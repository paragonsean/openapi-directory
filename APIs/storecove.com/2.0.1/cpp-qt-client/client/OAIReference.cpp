/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReference::OAIReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReference::OAIReference() {
    this->initializeModel();
}

OAIReference::~OAIReference() {}

void OAIReference::initializeModel() {

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_issue_date_isSet = false;
    m_issue_date_isValid = false;

    m_line_id_isSet = false;
    m_line_id_isValid = false;
}

void OAIReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReference::fromJsonObject(QJsonObject json) {

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("documentId")]);
    m_document_id_isSet = !json[QString("documentId")].isNull() && m_document_id_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("documentType")]);
    m_document_type_isSet = !json[QString("documentType")].isNull() && m_document_type_isValid;

    m_issue_date_isValid = ::OpenAPI::fromJsonValue(m_issue_date, json[QString("issueDate")]);
    m_issue_date_isSet = !json[QString("issueDate")].isNull() && m_issue_date_isValid;

    m_line_id_isValid = ::OpenAPI::fromJsonValue(m_line_id, json[QString("lineId")]);
    m_line_id_isSet = !json[QString("lineId")].isNull() && m_line_id_isValid;
}

QString OAIReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReference::asJsonObject() const {
    QJsonObject obj;
    if (m_document_id_isSet) {
        obj.insert(QString("documentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("documentType"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_issue_date_isSet) {
        obj.insert(QString("issueDate"), ::OpenAPI::toJsonValue(m_issue_date));
    }
    if (m_line_id_isSet) {
        obj.insert(QString("lineId"), ::OpenAPI::toJsonValue(m_line_id));
    }
    return obj;
}

QString OAIReference::getDocumentId() const {
    return m_document_id;
}
void OAIReference::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIReference::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIReference::is_document_id_Valid() const{
    return m_document_id_isValid;
}

QString OAIReference::getDocumentType() const {
    return m_document_type;
}
void OAIReference::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAIReference::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAIReference::is_document_type_Valid() const{
    return m_document_type_isValid;
}

QString OAIReference::getIssueDate() const {
    return m_issue_date;
}
void OAIReference::setIssueDate(const QString &issue_date) {
    m_issue_date = issue_date;
    m_issue_date_isSet = true;
}

bool OAIReference::is_issue_date_Set() const{
    return m_issue_date_isSet;
}

bool OAIReference::is_issue_date_Valid() const{
    return m_issue_date_isValid;
}

QString OAIReference::getLineId() const {
    return m_line_id;
}
void OAIReference::setLineId(const QString &line_id) {
    m_line_id = line_id;
    m_line_id_isSet = true;
}

bool OAIReference::is_line_id_Set() const{
    return m_line_id_isSet;
}

bool OAIReference::is_line_id_Valid() const{
    return m_line_id_isValid;
}

bool OAIReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_type_isValid && true;
}

} // namespace OpenAPI
