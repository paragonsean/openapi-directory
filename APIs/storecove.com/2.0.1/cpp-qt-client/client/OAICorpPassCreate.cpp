/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICorpPassCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICorpPassCreate::OAICorpPassCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICorpPassCreate::OAICorpPassCreate() {
    this->initializeModel();
}

OAICorpPassCreate::~OAICorpPassCreate() {}

void OAICorpPassCreate::initializeModel() {

    m_client_redirect_fail_url_isSet = false;
    m_client_redirect_fail_url_isValid = false;

    m_client_redirect_success_url_isSet = false;
    m_client_redirect_success_url_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_flow_type_isSet = false;
    m_flow_type_isValid = false;

    m_signer_email_isSet = false;
    m_signer_email_isValid = false;

    m_signer_name_isSet = false;
    m_signer_name_isValid = false;

    m_simulate_corppass_isSet = false;
    m_simulate_corppass_isValid = false;
}

void OAICorpPassCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICorpPassCreate::fromJsonObject(QJsonObject json) {

    m_client_redirect_fail_url_isValid = ::OpenAPI::fromJsonValue(m_client_redirect_fail_url, json[QString("client_redirect_fail_url")]);
    m_client_redirect_fail_url_isSet = !json[QString("client_redirect_fail_url")].isNull() && m_client_redirect_fail_url_isValid;

    m_client_redirect_success_url_isValid = ::OpenAPI::fromJsonValue(m_client_redirect_success_url, json[QString("client_redirect_success_url")]);
    m_client_redirect_success_url_isSet = !json[QString("client_redirect_success_url")].isNull() && m_client_redirect_success_url_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_flow_type_isValid = ::OpenAPI::fromJsonValue(m_flow_type, json[QString("flow_type")]);
    m_flow_type_isSet = !json[QString("flow_type")].isNull() && m_flow_type_isValid;

    m_signer_email_isValid = ::OpenAPI::fromJsonValue(m_signer_email, json[QString("signer_email")]);
    m_signer_email_isSet = !json[QString("signer_email")].isNull() && m_signer_email_isValid;

    m_signer_name_isValid = ::OpenAPI::fromJsonValue(m_signer_name, json[QString("signer_name")]);
    m_signer_name_isSet = !json[QString("signer_name")].isNull() && m_signer_name_isValid;

    m_simulate_corppass_isValid = ::OpenAPI::fromJsonValue(m_simulate_corppass, json[QString("simulate_corppass")]);
    m_simulate_corppass_isSet = !json[QString("simulate_corppass")].isNull() && m_simulate_corppass_isValid;
}

QString OAICorpPassCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICorpPassCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_client_redirect_fail_url_isSet) {
        obj.insert(QString("client_redirect_fail_url"), ::OpenAPI::toJsonValue(m_client_redirect_fail_url));
    }
    if (m_client_redirect_success_url_isSet) {
        obj.insert(QString("client_redirect_success_url"), ::OpenAPI::toJsonValue(m_client_redirect_success_url));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_flow_type_isSet) {
        obj.insert(QString("flow_type"), ::OpenAPI::toJsonValue(m_flow_type));
    }
    if (m_signer_email_isSet) {
        obj.insert(QString("signer_email"), ::OpenAPI::toJsonValue(m_signer_email));
    }
    if (m_signer_name_isSet) {
        obj.insert(QString("signer_name"), ::OpenAPI::toJsonValue(m_signer_name));
    }
    if (m_simulate_corppass_isSet) {
        obj.insert(QString("simulate_corppass"), ::OpenAPI::toJsonValue(m_simulate_corppass));
    }
    return obj;
}

QString OAICorpPassCreate::getClientRedirectFailUrl() const {
    return m_client_redirect_fail_url;
}
void OAICorpPassCreate::setClientRedirectFailUrl(const QString &client_redirect_fail_url) {
    m_client_redirect_fail_url = client_redirect_fail_url;
    m_client_redirect_fail_url_isSet = true;
}

bool OAICorpPassCreate::is_client_redirect_fail_url_Set() const{
    return m_client_redirect_fail_url_isSet;
}

bool OAICorpPassCreate::is_client_redirect_fail_url_Valid() const{
    return m_client_redirect_fail_url_isValid;
}

QString OAICorpPassCreate::getClientRedirectSuccessUrl() const {
    return m_client_redirect_success_url;
}
void OAICorpPassCreate::setClientRedirectSuccessUrl(const QString &client_redirect_success_url) {
    m_client_redirect_success_url = client_redirect_success_url;
    m_client_redirect_success_url_isSet = true;
}

bool OAICorpPassCreate::is_client_redirect_success_url_Set() const{
    return m_client_redirect_success_url_isSet;
}

bool OAICorpPassCreate::is_client_redirect_success_url_Valid() const{
    return m_client_redirect_success_url_isValid;
}

bool OAICorpPassCreate::isEnabled() const {
    return m_enabled;
}
void OAICorpPassCreate::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICorpPassCreate::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICorpPassCreate::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAICorpPassCreate::getFlowType() const {
    return m_flow_type;
}
void OAICorpPassCreate::setFlowType(const QString &flow_type) {
    m_flow_type = flow_type;
    m_flow_type_isSet = true;
}

bool OAICorpPassCreate::is_flow_type_Set() const{
    return m_flow_type_isSet;
}

bool OAICorpPassCreate::is_flow_type_Valid() const{
    return m_flow_type_isValid;
}

QString OAICorpPassCreate::getSignerEmail() const {
    return m_signer_email;
}
void OAICorpPassCreate::setSignerEmail(const QString &signer_email) {
    m_signer_email = signer_email;
    m_signer_email_isSet = true;
}

bool OAICorpPassCreate::is_signer_email_Set() const{
    return m_signer_email_isSet;
}

bool OAICorpPassCreate::is_signer_email_Valid() const{
    return m_signer_email_isValid;
}

QString OAICorpPassCreate::getSignerName() const {
    return m_signer_name;
}
void OAICorpPassCreate::setSignerName(const QString &signer_name) {
    m_signer_name = signer_name;
    m_signer_name_isSet = true;
}

bool OAICorpPassCreate::is_signer_name_Set() const{
    return m_signer_name_isSet;
}

bool OAICorpPassCreate::is_signer_name_Valid() const{
    return m_signer_name_isValid;
}

bool OAICorpPassCreate::isSimulateCorppass() const {
    return m_simulate_corppass;
}
void OAICorpPassCreate::setSimulateCorppass(const bool &simulate_corppass) {
    m_simulate_corppass = simulate_corppass;
    m_simulate_corppass_isSet = true;
}

bool OAICorpPassCreate::is_simulate_corppass_Set() const{
    return m_simulate_corppass_isSet;
}

bool OAICorpPassCreate::is_simulate_corppass_Valid() const{
    return m_simulate_corppass_isValid;
}

bool OAICorpPassCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_redirect_fail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_redirect_success_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signer_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulate_corppass_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICorpPassCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_flow_type_isValid && true;
}

} // namespace OpenAPI
