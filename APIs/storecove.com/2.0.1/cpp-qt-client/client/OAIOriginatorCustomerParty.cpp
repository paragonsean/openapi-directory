/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOriginatorCustomerParty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOriginatorCustomerParty::OAIOriginatorCustomerParty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOriginatorCustomerParty::OAIOriginatorCustomerParty() {
    this->initializeModel();
}

OAIOriginatorCustomerParty::~OAIOriginatorCustomerParty() {}

void OAIOriginatorCustomerParty::initializeModel() {

    m_party_isSet = false;
    m_party_isValid = false;
}

void OAIOriginatorCustomerParty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOriginatorCustomerParty::fromJsonObject(QJsonObject json) {

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;
}

QString OAIOriginatorCustomerParty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOriginatorCustomerParty::asJsonObject() const {
    QJsonObject obj;
    if (m_party.isSet()) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    return obj;
}

OAIParty OAIOriginatorCustomerParty::getParty() const {
    return m_party;
}
void OAIOriginatorCustomerParty::setParty(const OAIParty &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAIOriginatorCustomerParty::is_party_Set() const{
    return m_party_isSet;
}

bool OAIOriginatorCustomerParty::is_party_Valid() const{
    return m_party_isValid;
}

bool OAIOriginatorCustomerParty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_party.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOriginatorCustomerParty::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_party_isValid && true;
}

} // namespace OpenAPI
