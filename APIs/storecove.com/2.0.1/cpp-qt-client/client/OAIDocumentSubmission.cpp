/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentSubmission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentSubmission::OAIDocumentSubmission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentSubmission::OAIDocumentSubmission() {
    this->initializeModel();
}

OAIDocumentSubmission::~OAIDocumentSubmission() {}

void OAIDocumentSubmission::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_create_primary_image_isSet = false;
    m_create_primary_image_isValid = false;

    m_document_isSet = false;
    m_document_isValid = false;

    m_idempotency_guid_isSet = false;
    m_idempotency_guid_isValid = false;

    m_legal_entity_id_isSet = false;
    m_legal_entity_id_isValid = false;

    m_receive_guid_isSet = false;
    m_receive_guid_isValid = false;

    m_routing_isSet = false;
    m_routing_isValid = false;
}

void OAIDocumentSubmission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentSubmission::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_create_primary_image_isValid = ::OpenAPI::fromJsonValue(m_create_primary_image, json[QString("createPrimaryImage")]);
    m_create_primary_image_isSet = !json[QString("createPrimaryImage")].isNull() && m_create_primary_image_isValid;

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_idempotency_guid_isValid = ::OpenAPI::fromJsonValue(m_idempotency_guid, json[QString("idempotencyGuid")]);
    m_idempotency_guid_isSet = !json[QString("idempotencyGuid")].isNull() && m_idempotency_guid_isValid;

    m_legal_entity_id_isValid = ::OpenAPI::fromJsonValue(m_legal_entity_id, json[QString("legalEntityId")]);
    m_legal_entity_id_isSet = !json[QString("legalEntityId")].isNull() && m_legal_entity_id_isValid;

    m_receive_guid_isValid = ::OpenAPI::fromJsonValue(m_receive_guid, json[QString("receiveGuid")]);
    m_receive_guid_isSet = !json[QString("receiveGuid")].isNull() && m_receive_guid_isValid;

    m_routing_isValid = ::OpenAPI::fromJsonValue(m_routing, json[QString("routing")]);
    m_routing_isSet = !json[QString("routing")].isNull() && m_routing_isValid;
}

QString OAIDocumentSubmission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentSubmission::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_create_primary_image_isSet) {
        obj.insert(QString("createPrimaryImage"), ::OpenAPI::toJsonValue(m_create_primary_image));
    }
    if (m_document.isSet()) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_idempotency_guid_isSet) {
        obj.insert(QString("idempotencyGuid"), ::OpenAPI::toJsonValue(m_idempotency_guid));
    }
    if (m_legal_entity_id_isSet) {
        obj.insert(QString("legalEntityId"), ::OpenAPI::toJsonValue(m_legal_entity_id));
    }
    if (m_receive_guid_isSet) {
        obj.insert(QString("receiveGuid"), ::OpenAPI::toJsonValue(m_receive_guid));
    }
    if (m_routing.isSet()) {
        obj.insert(QString("routing"), ::OpenAPI::toJsonValue(m_routing));
    }
    return obj;
}

QList<OAIAttachment> OAIDocumentSubmission::getAttachments() const {
    return m_attachments;
}
void OAIDocumentSubmission::setAttachments(const QList<OAIAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIDocumentSubmission::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIDocumentSubmission::is_attachments_Valid() const{
    return m_attachments_isValid;
}

bool OAIDocumentSubmission::isCreatePrimaryImage() const {
    return m_create_primary_image;
}
void OAIDocumentSubmission::setCreatePrimaryImage(const bool &create_primary_image) {
    m_create_primary_image = create_primary_image;
    m_create_primary_image_isSet = true;
}

bool OAIDocumentSubmission::is_create_primary_image_Set() const{
    return m_create_primary_image_isSet;
}

bool OAIDocumentSubmission::is_create_primary_image_Valid() const{
    return m_create_primary_image_isValid;
}

OAISendableDocument OAIDocumentSubmission::getDocument() const {
    return m_document;
}
void OAIDocumentSubmission::setDocument(const OAISendableDocument &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIDocumentSubmission::is_document_Set() const{
    return m_document_isSet;
}

bool OAIDocumentSubmission::is_document_Valid() const{
    return m_document_isValid;
}

QString OAIDocumentSubmission::getIdempotencyGuid() const {
    return m_idempotency_guid;
}
void OAIDocumentSubmission::setIdempotencyGuid(const QString &idempotency_guid) {
    m_idempotency_guid = idempotency_guid;
    m_idempotency_guid_isSet = true;
}

bool OAIDocumentSubmission::is_idempotency_guid_Set() const{
    return m_idempotency_guid_isSet;
}

bool OAIDocumentSubmission::is_idempotency_guid_Valid() const{
    return m_idempotency_guid_isValid;
}

qint32 OAIDocumentSubmission::getLegalEntityId() const {
    return m_legal_entity_id;
}
void OAIDocumentSubmission::setLegalEntityId(const qint32 &legal_entity_id) {
    m_legal_entity_id = legal_entity_id;
    m_legal_entity_id_isSet = true;
}

bool OAIDocumentSubmission::is_legal_entity_id_Set() const{
    return m_legal_entity_id_isSet;
}

bool OAIDocumentSubmission::is_legal_entity_id_Valid() const{
    return m_legal_entity_id_isValid;
}

QString OAIDocumentSubmission::getReceiveGuid() const {
    return m_receive_guid;
}
void OAIDocumentSubmission::setReceiveGuid(const QString &receive_guid) {
    m_receive_guid = receive_guid;
    m_receive_guid_isSet = true;
}

bool OAIDocumentSubmission::is_receive_guid_Set() const{
    return m_receive_guid_isSet;
}

bool OAIDocumentSubmission::is_receive_guid_Valid() const{
    return m_receive_guid_isValid;
}

OAIRouting OAIDocumentSubmission::getRouting() const {
    return m_routing;
}
void OAIDocumentSubmission::setRouting(const OAIRouting &routing) {
    m_routing = routing;
    m_routing_isSet = true;
}

bool OAIDocumentSubmission::is_routing_Set() const{
    return m_routing_isSet;
}

bool OAIDocumentSubmission::is_routing_Valid() const{
    return m_routing_isValid;
}

bool OAIDocumentSubmission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_primary_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receive_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentSubmission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
