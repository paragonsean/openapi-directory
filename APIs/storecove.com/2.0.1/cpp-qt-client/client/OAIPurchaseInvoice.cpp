/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseInvoice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseInvoice::OAIPurchaseInvoice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseInvoice::OAIPurchaseInvoice() {
    this->initializeModel();
}

OAIPurchaseInvoice::~OAIPurchaseInvoice() {}

void OAIPurchaseInvoice::initializeModel() {

    m_accounting_isSet = false;
    m_accounting_isValid = false;

    m_accounting_cost_isSet = false;
    m_accounting_cost_isValid = false;

    m_allowance_charge_isSet = false;
    m_allowance_charge_isValid = false;

    m_allowance_charges_isSet = false;
    m_allowance_charges_isValid = false;

    m_amount_including_vat_isSet = false;
    m_amount_including_vat_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_billing_reference_isSet = false;
    m_billing_reference_isValid = false;

    m_buyer_reference_isSet = false;
    m_buyer_reference_isValid = false;

    m_contract_document_reference_isSet = false;
    m_contract_document_reference_isValid = false;

    m_delivery_isSet = false;
    m_delivery_isValid = false;

    m_document_isSet = false;
    m_document_isValid = false;

    m_document_currency_code_isSet = false;
    m_document_currency_code_isValid = false;

    m_document_totals_isSet = false;
    m_document_totals_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_external_key_isSet = false;
    m_external_key_isValid = false;

    m_external_user_id_isSet = false;
    m_external_user_id_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_invoice_lines_isSet = false;
    m_invoice_lines_isValid = false;

    m_invoice_number_isSet = false;
    m_invoice_number_isValid = false;

    m_invoice_type_isSet = false;
    m_invoice_type_isValid = false;

    m_issue_date_isSet = false;
    m_issue_date_isValid = false;

    m_legal_entity_id_isSet = false;
    m_legal_entity_id_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_reference_isSet = false;
    m_order_reference_isValid = false;

    m_payment_means_isSet = false;
    m_payment_means_isValid = false;

    m_payment_means_array_isSet = false;
    m_payment_means_array_isValid = false;

    m_payment_means_payment_id_isSet = false;
    m_payment_means_payment_id_isValid = false;

    m_payment_terms_note_isSet = false;
    m_payment_terms_note_isValid = false;

    m_period_end_isSet = false;
    m_period_end_isValid = false;

    m_period_start_isSet = false;
    m_period_start_isValid = false;

    m_project_reference_isSet = false;
    m_project_reference_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;

    m_system_generated_primary_image_isSet = false;
    m_system_generated_primary_image_isValid = false;

    m_tax_point_date_isSet = false;
    m_tax_point_date_isValid = false;

    m_tax_subtotals_isSet = false;
    m_tax_subtotals_isValid = false;

    m_tax_system_isSet = false;
    m_tax_system_isValid = false;

    m_vat_reverse_charge_isSet = false;
    m_vat_reverse_charge_isValid = false;
}

void OAIPurchaseInvoice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseInvoice::fromJsonObject(QJsonObject json) {

    m_accounting_isValid = ::OpenAPI::fromJsonValue(m_accounting, json[QString("accounting")]);
    m_accounting_isSet = !json[QString("accounting")].isNull() && m_accounting_isValid;

    m_accounting_cost_isValid = ::OpenAPI::fromJsonValue(m_accounting_cost, json[QString("accounting_cost")]);
    m_accounting_cost_isSet = !json[QString("accounting_cost")].isNull() && m_accounting_cost_isValid;

    m_allowance_charge_isValid = ::OpenAPI::fromJsonValue(m_allowance_charge, json[QString("allowance_charge")]);
    m_allowance_charge_isSet = !json[QString("allowance_charge")].isNull() && m_allowance_charge_isValid;

    m_allowance_charges_isValid = ::OpenAPI::fromJsonValue(m_allowance_charges, json[QString("allowance_charges")]);
    m_allowance_charges_isSet = !json[QString("allowance_charges")].isNull() && m_allowance_charges_isValid;

    m_amount_including_vat_isValid = ::OpenAPI::fromJsonValue(m_amount_including_vat, json[QString("amount_including_vat")]);
    m_amount_including_vat_isSet = !json[QString("amount_including_vat")].isNull() && m_amount_including_vat_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_billing_reference_isValid = ::OpenAPI::fromJsonValue(m_billing_reference, json[QString("billing_reference")]);
    m_billing_reference_isSet = !json[QString("billing_reference")].isNull() && m_billing_reference_isValid;

    m_buyer_reference_isValid = ::OpenAPI::fromJsonValue(m_buyer_reference, json[QString("buyer_reference")]);
    m_buyer_reference_isSet = !json[QString("buyer_reference")].isNull() && m_buyer_reference_isValid;

    m_contract_document_reference_isValid = ::OpenAPI::fromJsonValue(m_contract_document_reference, json[QString("contract_document_reference")]);
    m_contract_document_reference_isSet = !json[QString("contract_document_reference")].isNull() && m_contract_document_reference_isValid;

    m_delivery_isValid = ::OpenAPI::fromJsonValue(m_delivery, json[QString("delivery")]);
    m_delivery_isSet = !json[QString("delivery")].isNull() && m_delivery_isValid;

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_document_currency_code_isValid = ::OpenAPI::fromJsonValue(m_document_currency_code, json[QString("document_currency_code")]);
    m_document_currency_code_isSet = !json[QString("document_currency_code")].isNull() && m_document_currency_code_isValid;

    m_document_totals_isValid = ::OpenAPI::fromJsonValue(m_document_totals, json[QString("document_totals")]);
    m_document_totals_isSet = !json[QString("document_totals")].isNull() && m_document_totals_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("document_type")]);
    m_document_type_isSet = !json[QString("document_type")].isNull() && m_document_type_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("due_date")]);
    m_due_date_isSet = !json[QString("due_date")].isNull() && m_due_date_isValid;

    m_external_key_isValid = ::OpenAPI::fromJsonValue(m_external_key, json[QString("external_key")]);
    m_external_key_isSet = !json[QString("external_key")].isNull() && m_external_key_isValid;

    m_external_user_id_isValid = ::OpenAPI::fromJsonValue(m_external_user_id, json[QString("external_user_id")]);
    m_external_user_id_isSet = !json[QString("external_user_id")].isNull() && m_external_user_id_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_invoice_lines_isValid = ::OpenAPI::fromJsonValue(m_invoice_lines, json[QString("invoice_lines")]);
    m_invoice_lines_isSet = !json[QString("invoice_lines")].isNull() && m_invoice_lines_isValid;

    m_invoice_number_isValid = ::OpenAPI::fromJsonValue(m_invoice_number, json[QString("invoice_number")]);
    m_invoice_number_isSet = !json[QString("invoice_number")].isNull() && m_invoice_number_isValid;

    m_invoice_type_isValid = ::OpenAPI::fromJsonValue(m_invoice_type, json[QString("invoice_type")]);
    m_invoice_type_isSet = !json[QString("invoice_type")].isNull() && m_invoice_type_isValid;

    m_issue_date_isValid = ::OpenAPI::fromJsonValue(m_issue_date, json[QString("issue_date")]);
    m_issue_date_isSet = !json[QString("issue_date")].isNull() && m_issue_date_isValid;

    m_legal_entity_id_isValid = ::OpenAPI::fromJsonValue(m_legal_entity_id, json[QString("legal_entity_id")]);
    m_legal_entity_id_isSet = !json[QString("legal_entity_id")].isNull() && m_legal_entity_id_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_reference_isValid = ::OpenAPI::fromJsonValue(m_order_reference, json[QString("order_reference")]);
    m_order_reference_isSet = !json[QString("order_reference")].isNull() && m_order_reference_isValid;

    m_payment_means_isValid = ::OpenAPI::fromJsonValue(m_payment_means, json[QString("payment_means")]);
    m_payment_means_isSet = !json[QString("payment_means")].isNull() && m_payment_means_isValid;

    m_payment_means_array_isValid = ::OpenAPI::fromJsonValue(m_payment_means_array, json[QString("payment_means_array")]);
    m_payment_means_array_isSet = !json[QString("payment_means_array")].isNull() && m_payment_means_array_isValid;

    m_payment_means_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_means_payment_id, json[QString("payment_means_payment_id")]);
    m_payment_means_payment_id_isSet = !json[QString("payment_means_payment_id")].isNull() && m_payment_means_payment_id_isValid;

    m_payment_terms_note_isValid = ::OpenAPI::fromJsonValue(m_payment_terms_note, json[QString("payment_terms_note")]);
    m_payment_terms_note_isSet = !json[QString("payment_terms_note")].isNull() && m_payment_terms_note_isValid;

    m_period_end_isValid = ::OpenAPI::fromJsonValue(m_period_end, json[QString("period_end")]);
    m_period_end_isSet = !json[QString("period_end")].isNull() && m_period_end_isValid;

    m_period_start_isValid = ::OpenAPI::fromJsonValue(m_period_start, json[QString("period_start")]);
    m_period_start_isSet = !json[QString("period_start")].isNull() && m_period_start_isValid;

    m_project_reference_isValid = ::OpenAPI::fromJsonValue(m_project_reference, json[QString("project_reference")]);
    m_project_reference_isSet = !json[QString("project_reference")].isNull() && m_project_reference_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("sender")]);
    m_sender_isSet = !json[QString("sender")].isNull() && m_sender_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_sub_type_isValid = ::OpenAPI::fromJsonValue(m_sub_type, json[QString("sub_type")]);
    m_sub_type_isSet = !json[QString("sub_type")].isNull() && m_sub_type_isValid;

    m_system_generated_primary_image_isValid = ::OpenAPI::fromJsonValue(m_system_generated_primary_image, json[QString("system_generated_primary_image")]);
    m_system_generated_primary_image_isSet = !json[QString("system_generated_primary_image")].isNull() && m_system_generated_primary_image_isValid;

    m_tax_point_date_isValid = ::OpenAPI::fromJsonValue(m_tax_point_date, json[QString("tax_point_date")]);
    m_tax_point_date_isSet = !json[QString("tax_point_date")].isNull() && m_tax_point_date_isValid;

    m_tax_subtotals_isValid = ::OpenAPI::fromJsonValue(m_tax_subtotals, json[QString("tax_subtotals")]);
    m_tax_subtotals_isSet = !json[QString("tax_subtotals")].isNull() && m_tax_subtotals_isValid;

    m_tax_system_isValid = ::OpenAPI::fromJsonValue(m_tax_system, json[QString("tax_system")]);
    m_tax_system_isSet = !json[QString("tax_system")].isNull() && m_tax_system_isValid;

    m_vat_reverse_charge_isValid = ::OpenAPI::fromJsonValue(m_vat_reverse_charge, json[QString("vat_reverse_charge")]);
    m_vat_reverse_charge_isSet = !json[QString("vat_reverse_charge")].isNull() && m_vat_reverse_charge_isValid;
}

QString OAIPurchaseInvoice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseInvoice::asJsonObject() const {
    QJsonObject obj;
    if (m_accounting.isSet()) {
        obj.insert(QString("accounting"), ::OpenAPI::toJsonValue(m_accounting));
    }
    if (m_accounting_cost_isSet) {
        obj.insert(QString("accounting_cost"), ::OpenAPI::toJsonValue(m_accounting_cost));
    }
    if (m_allowance_charge_isSet) {
        obj.insert(QString("allowance_charge"), ::OpenAPI::toJsonValue(m_allowance_charge));
    }
    if (m_allowance_charges.size() > 0) {
        obj.insert(QString("allowance_charges"), ::OpenAPI::toJsonValue(m_allowance_charges));
    }
    if (m_amount_including_vat_isSet) {
        obj.insert(QString("amount_including_vat"), ::OpenAPI::toJsonValue(m_amount_including_vat));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_billing_reference_isSet) {
        obj.insert(QString("billing_reference"), ::OpenAPI::toJsonValue(m_billing_reference));
    }
    if (m_buyer_reference_isSet) {
        obj.insert(QString("buyer_reference"), ::OpenAPI::toJsonValue(m_buyer_reference));
    }
    if (m_contract_document_reference_isSet) {
        obj.insert(QString("contract_document_reference"), ::OpenAPI::toJsonValue(m_contract_document_reference));
    }
    if (m_delivery.isSet()) {
        obj.insert(QString("delivery"), ::OpenAPI::toJsonValue(m_delivery));
    }
    if (m_document_isSet) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_document_currency_code_isSet) {
        obj.insert(QString("document_currency_code"), ::OpenAPI::toJsonValue(m_document_currency_code));
    }
    if (m_document_totals.isSet()) {
        obj.insert(QString("document_totals"), ::OpenAPI::toJsonValue(m_document_totals));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("document_type"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("due_date"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_external_key_isSet) {
        obj.insert(QString("external_key"), ::OpenAPI::toJsonValue(m_external_key));
    }
    if (m_external_user_id_isSet) {
        obj.insert(QString("external_user_id"), ::OpenAPI::toJsonValue(m_external_user_id));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_invoice_lines.size() > 0) {
        obj.insert(QString("invoice_lines"), ::OpenAPI::toJsonValue(m_invoice_lines));
    }
    if (m_invoice_number_isSet) {
        obj.insert(QString("invoice_number"), ::OpenAPI::toJsonValue(m_invoice_number));
    }
    if (m_invoice_type_isSet) {
        obj.insert(QString("invoice_type"), ::OpenAPI::toJsonValue(m_invoice_type));
    }
    if (m_issue_date_isSet) {
        obj.insert(QString("issue_date"), ::OpenAPI::toJsonValue(m_issue_date));
    }
    if (m_legal_entity_id_isSet) {
        obj.insert(QString("legal_entity_id"), ::OpenAPI::toJsonValue(m_legal_entity_id));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_reference_isSet) {
        obj.insert(QString("order_reference"), ::OpenAPI::toJsonValue(m_order_reference));
    }
    if (m_payment_means.isSet()) {
        obj.insert(QString("payment_means"), ::OpenAPI::toJsonValue(m_payment_means));
    }
    if (m_payment_means_array.size() > 0) {
        obj.insert(QString("payment_means_array"), ::OpenAPI::toJsonValue(m_payment_means_array));
    }
    if (m_payment_means_payment_id_isSet) {
        obj.insert(QString("payment_means_payment_id"), ::OpenAPI::toJsonValue(m_payment_means_payment_id));
    }
    if (m_payment_terms_note_isSet) {
        obj.insert(QString("payment_terms_note"), ::OpenAPI::toJsonValue(m_payment_terms_note));
    }
    if (m_period_end_isSet) {
        obj.insert(QString("period_end"), ::OpenAPI::toJsonValue(m_period_end));
    }
    if (m_period_start_isSet) {
        obj.insert(QString("period_start"), ::OpenAPI::toJsonValue(m_period_start));
    }
    if (m_project_reference_isSet) {
        obj.insert(QString("project_reference"), ::OpenAPI::toJsonValue(m_project_reference));
    }
    if (m_sender.isSet()) {
        obj.insert(QString("sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_sub_type_isSet) {
        obj.insert(QString("sub_type"), ::OpenAPI::toJsonValue(m_sub_type));
    }
    if (m_system_generated_primary_image_isSet) {
        obj.insert(QString("system_generated_primary_image"), ::OpenAPI::toJsonValue(m_system_generated_primary_image));
    }
    if (m_tax_point_date_isSet) {
        obj.insert(QString("tax_point_date"), ::OpenAPI::toJsonValue(m_tax_point_date));
    }
    if (m_tax_subtotals.size() > 0) {
        obj.insert(QString("tax_subtotals"), ::OpenAPI::toJsonValue(m_tax_subtotals));
    }
    if (m_tax_system_isSet) {
        obj.insert(QString("tax_system"), ::OpenAPI::toJsonValue(m_tax_system));
    }
    if (m_vat_reverse_charge_isSet) {
        obj.insert(QString("vat_reverse_charge"), ::OpenAPI::toJsonValue(m_vat_reverse_charge));
    }
    return obj;
}

OAIPurchaseInvoiceAccountingDetails OAIPurchaseInvoice::getAccounting() const {
    return m_accounting;
}
void OAIPurchaseInvoice::setAccounting(const OAIPurchaseInvoiceAccountingDetails &accounting) {
    m_accounting = accounting;
    m_accounting_isSet = true;
}

bool OAIPurchaseInvoice::is_accounting_Set() const{
    return m_accounting_isSet;
}

bool OAIPurchaseInvoice::is_accounting_Valid() const{
    return m_accounting_isValid;
}

QString OAIPurchaseInvoice::getAccountingCost() const {
    return m_accounting_cost;
}
void OAIPurchaseInvoice::setAccountingCost(const QString &accounting_cost) {
    m_accounting_cost = accounting_cost;
    m_accounting_cost_isSet = true;
}

bool OAIPurchaseInvoice::is_accounting_cost_Set() const{
    return m_accounting_cost_isSet;
}

bool OAIPurchaseInvoice::is_accounting_cost_Valid() const{
    return m_accounting_cost_isValid;
}

double OAIPurchaseInvoice::getAllowanceCharge() const {
    return m_allowance_charge;
}
void OAIPurchaseInvoice::setAllowanceCharge(const double &allowance_charge) {
    m_allowance_charge = allowance_charge;
    m_allowance_charge_isSet = true;
}

bool OAIPurchaseInvoice::is_allowance_charge_Set() const{
    return m_allowance_charge_isSet;
}

bool OAIPurchaseInvoice::is_allowance_charge_Valid() const{
    return m_allowance_charge_isValid;
}

QList<OAIPurchaseInvoiceAllowanceCharge> OAIPurchaseInvoice::getAllowanceCharges() const {
    return m_allowance_charges;
}
void OAIPurchaseInvoice::setAllowanceCharges(const QList<OAIPurchaseInvoiceAllowanceCharge> &allowance_charges) {
    m_allowance_charges = allowance_charges;
    m_allowance_charges_isSet = true;
}

bool OAIPurchaseInvoice::is_allowance_charges_Set() const{
    return m_allowance_charges_isSet;
}

bool OAIPurchaseInvoice::is_allowance_charges_Valid() const{
    return m_allowance_charges_isValid;
}

double OAIPurchaseInvoice::getAmountIncludingVat() const {
    return m_amount_including_vat;
}
void OAIPurchaseInvoice::setAmountIncludingVat(const double &amount_including_vat) {
    m_amount_including_vat = amount_including_vat;
    m_amount_including_vat_isSet = true;
}

bool OAIPurchaseInvoice::is_amount_including_vat_Set() const{
    return m_amount_including_vat_isSet;
}

bool OAIPurchaseInvoice::is_amount_including_vat_Valid() const{
    return m_amount_including_vat_isValid;
}

QList<OAIPurchaseInvoiceAttachment> OAIPurchaseInvoice::getAttachments() const {
    return m_attachments;
}
void OAIPurchaseInvoice::setAttachments(const QList<OAIPurchaseInvoiceAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIPurchaseInvoice::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIPurchaseInvoice::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIPurchaseInvoice::getBillingReference() const {
    return m_billing_reference;
}
void OAIPurchaseInvoice::setBillingReference(const QString &billing_reference) {
    m_billing_reference = billing_reference;
    m_billing_reference_isSet = true;
}

bool OAIPurchaseInvoice::is_billing_reference_Set() const{
    return m_billing_reference_isSet;
}

bool OAIPurchaseInvoice::is_billing_reference_Valid() const{
    return m_billing_reference_isValid;
}

QString OAIPurchaseInvoice::getBuyerReference() const {
    return m_buyer_reference;
}
void OAIPurchaseInvoice::setBuyerReference(const QString &buyer_reference) {
    m_buyer_reference = buyer_reference;
    m_buyer_reference_isSet = true;
}

bool OAIPurchaseInvoice::is_buyer_reference_Set() const{
    return m_buyer_reference_isSet;
}

bool OAIPurchaseInvoice::is_buyer_reference_Valid() const{
    return m_buyer_reference_isValid;
}

QString OAIPurchaseInvoice::getContractDocumentReference() const {
    return m_contract_document_reference;
}
void OAIPurchaseInvoice::setContractDocumentReference(const QString &contract_document_reference) {
    m_contract_document_reference = contract_document_reference;
    m_contract_document_reference_isSet = true;
}

bool OAIPurchaseInvoice::is_contract_document_reference_Set() const{
    return m_contract_document_reference_isSet;
}

bool OAIPurchaseInvoice::is_contract_document_reference_Valid() const{
    return m_contract_document_reference_isValid;
}

OAIPurchaseInvoice_Delivery OAIPurchaseInvoice::getDelivery() const {
    return m_delivery;
}
void OAIPurchaseInvoice::setDelivery(const OAIPurchaseInvoice_Delivery &delivery) {
    m_delivery = delivery;
    m_delivery_isSet = true;
}

bool OAIPurchaseInvoice::is_delivery_Set() const{
    return m_delivery_isSet;
}

bool OAIPurchaseInvoice::is_delivery_Valid() const{
    return m_delivery_isValid;
}

QString OAIPurchaseInvoice::getDocument() const {
    return m_document;
}
void OAIPurchaseInvoice::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIPurchaseInvoice::is_document_Set() const{
    return m_document_isSet;
}

bool OAIPurchaseInvoice::is_document_Valid() const{
    return m_document_isValid;
}

QString OAIPurchaseInvoice::getDocumentCurrencyCode() const {
    return m_document_currency_code;
}
void OAIPurchaseInvoice::setDocumentCurrencyCode(const QString &document_currency_code) {
    m_document_currency_code = document_currency_code;
    m_document_currency_code_isSet = true;
}

bool OAIPurchaseInvoice::is_document_currency_code_Set() const{
    return m_document_currency_code_isSet;
}

bool OAIPurchaseInvoice::is_document_currency_code_Valid() const{
    return m_document_currency_code_isValid;
}

OAIPurchaseInvoiceDocumentTotals OAIPurchaseInvoice::getDocumentTotals() const {
    return m_document_totals;
}
void OAIPurchaseInvoice::setDocumentTotals(const OAIPurchaseInvoiceDocumentTotals &document_totals) {
    m_document_totals = document_totals;
    m_document_totals_isSet = true;
}

bool OAIPurchaseInvoice::is_document_totals_Set() const{
    return m_document_totals_isSet;
}

bool OAIPurchaseInvoice::is_document_totals_Valid() const{
    return m_document_totals_isValid;
}

QString OAIPurchaseInvoice::getDocumentType() const {
    return m_document_type;
}
void OAIPurchaseInvoice::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAIPurchaseInvoice::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAIPurchaseInvoice::is_document_type_Valid() const{
    return m_document_type_isValid;
}

QString OAIPurchaseInvoice::getDueDate() const {
    return m_due_date;
}
void OAIPurchaseInvoice::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIPurchaseInvoice::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIPurchaseInvoice::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAIPurchaseInvoice::getExternalKey() const {
    return m_external_key;
}
void OAIPurchaseInvoice::setExternalKey(const QString &external_key) {
    m_external_key = external_key;
    m_external_key_isSet = true;
}

bool OAIPurchaseInvoice::is_external_key_Set() const{
    return m_external_key_isSet;
}

bool OAIPurchaseInvoice::is_external_key_Valid() const{
    return m_external_key_isValid;
}

QString OAIPurchaseInvoice::getExternalUserId() const {
    return m_external_user_id;
}
void OAIPurchaseInvoice::setExternalUserId(const QString &external_user_id) {
    m_external_user_id = external_user_id;
    m_external_user_id_isSet = true;
}

bool OAIPurchaseInvoice::is_external_user_id_Set() const{
    return m_external_user_id_isSet;
}

bool OAIPurchaseInvoice::is_external_user_id_Valid() const{
    return m_external_user_id_isValid;
}

QString OAIPurchaseInvoice::getGuid() const {
    return m_guid;
}
void OAIPurchaseInvoice::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIPurchaseInvoice::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIPurchaseInvoice::is_guid_Valid() const{
    return m_guid_isValid;
}

QList<OAIPurchaseInvoiceInvoiceLine> OAIPurchaseInvoice::getInvoiceLines() const {
    return m_invoice_lines;
}
void OAIPurchaseInvoice::setInvoiceLines(const QList<OAIPurchaseInvoiceInvoiceLine> &invoice_lines) {
    m_invoice_lines = invoice_lines;
    m_invoice_lines_isSet = true;
}

bool OAIPurchaseInvoice::is_invoice_lines_Set() const{
    return m_invoice_lines_isSet;
}

bool OAIPurchaseInvoice::is_invoice_lines_Valid() const{
    return m_invoice_lines_isValid;
}

QString OAIPurchaseInvoice::getInvoiceNumber() const {
    return m_invoice_number;
}
void OAIPurchaseInvoice::setInvoiceNumber(const QString &invoice_number) {
    m_invoice_number = invoice_number;
    m_invoice_number_isSet = true;
}

bool OAIPurchaseInvoice::is_invoice_number_Set() const{
    return m_invoice_number_isSet;
}

bool OAIPurchaseInvoice::is_invoice_number_Valid() const{
    return m_invoice_number_isValid;
}

QString OAIPurchaseInvoice::getInvoiceType() const {
    return m_invoice_type;
}
void OAIPurchaseInvoice::setInvoiceType(const QString &invoice_type) {
    m_invoice_type = invoice_type;
    m_invoice_type_isSet = true;
}

bool OAIPurchaseInvoice::is_invoice_type_Set() const{
    return m_invoice_type_isSet;
}

bool OAIPurchaseInvoice::is_invoice_type_Valid() const{
    return m_invoice_type_isValid;
}

QString OAIPurchaseInvoice::getIssueDate() const {
    return m_issue_date;
}
void OAIPurchaseInvoice::setIssueDate(const QString &issue_date) {
    m_issue_date = issue_date;
    m_issue_date_isSet = true;
}

bool OAIPurchaseInvoice::is_issue_date_Set() const{
    return m_issue_date_isSet;
}

bool OAIPurchaseInvoice::is_issue_date_Valid() const{
    return m_issue_date_isValid;
}

qint64 OAIPurchaseInvoice::getLegalEntityId() const {
    return m_legal_entity_id;
}
void OAIPurchaseInvoice::setLegalEntityId(const qint64 &legal_entity_id) {
    m_legal_entity_id = legal_entity_id;
    m_legal_entity_id_isSet = true;
}

bool OAIPurchaseInvoice::is_legal_entity_id_Set() const{
    return m_legal_entity_id_isSet;
}

bool OAIPurchaseInvoice::is_legal_entity_id_Valid() const{
    return m_legal_entity_id_isValid;
}

QString OAIPurchaseInvoice::getNote() const {
    return m_note;
}
void OAIPurchaseInvoice::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIPurchaseInvoice::is_note_Set() const{
    return m_note_isSet;
}

bool OAIPurchaseInvoice::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIPurchaseInvoice::getOrderReference() const {
    return m_order_reference;
}
void OAIPurchaseInvoice::setOrderReference(const QString &order_reference) {
    m_order_reference = order_reference;
    m_order_reference_isSet = true;
}

bool OAIPurchaseInvoice::is_order_reference_Set() const{
    return m_order_reference_isSet;
}

bool OAIPurchaseInvoice::is_order_reference_Valid() const{
    return m_order_reference_isValid;
}

OAIPayment_Means___DEPRECATED OAIPurchaseInvoice::getPaymentMeans() const {
    return m_payment_means;
}
void OAIPurchaseInvoice::setPaymentMeans(const OAIPayment_Means___DEPRECATED &payment_means) {
    m_payment_means = payment_means;
    m_payment_means_isSet = true;
}

bool OAIPurchaseInvoice::is_payment_means_Set() const{
    return m_payment_means_isSet;
}

bool OAIPurchaseInvoice::is_payment_means_Valid() const{
    return m_payment_means_isValid;
}

QList<OAIPurchaseInvoicePaymentMeans> OAIPurchaseInvoice::getPaymentMeansArray() const {
    return m_payment_means_array;
}
void OAIPurchaseInvoice::setPaymentMeansArray(const QList<OAIPurchaseInvoicePaymentMeans> &payment_means_array) {
    m_payment_means_array = payment_means_array;
    m_payment_means_array_isSet = true;
}

bool OAIPurchaseInvoice::is_payment_means_array_Set() const{
    return m_payment_means_array_isSet;
}

bool OAIPurchaseInvoice::is_payment_means_array_Valid() const{
    return m_payment_means_array_isValid;
}

QString OAIPurchaseInvoice::getPaymentMeansPaymentId() const {
    return m_payment_means_payment_id;
}
void OAIPurchaseInvoice::setPaymentMeansPaymentId(const QString &payment_means_payment_id) {
    m_payment_means_payment_id = payment_means_payment_id;
    m_payment_means_payment_id_isSet = true;
}

bool OAIPurchaseInvoice::is_payment_means_payment_id_Set() const{
    return m_payment_means_payment_id_isSet;
}

bool OAIPurchaseInvoice::is_payment_means_payment_id_Valid() const{
    return m_payment_means_payment_id_isValid;
}

QString OAIPurchaseInvoice::getPaymentTermsNote() const {
    return m_payment_terms_note;
}
void OAIPurchaseInvoice::setPaymentTermsNote(const QString &payment_terms_note) {
    m_payment_terms_note = payment_terms_note;
    m_payment_terms_note_isSet = true;
}

bool OAIPurchaseInvoice::is_payment_terms_note_Set() const{
    return m_payment_terms_note_isSet;
}

bool OAIPurchaseInvoice::is_payment_terms_note_Valid() const{
    return m_payment_terms_note_isValid;
}

QString OAIPurchaseInvoice::getPeriodEnd() const {
    return m_period_end;
}
void OAIPurchaseInvoice::setPeriodEnd(const QString &period_end) {
    m_period_end = period_end;
    m_period_end_isSet = true;
}

bool OAIPurchaseInvoice::is_period_end_Set() const{
    return m_period_end_isSet;
}

bool OAIPurchaseInvoice::is_period_end_Valid() const{
    return m_period_end_isValid;
}

QString OAIPurchaseInvoice::getPeriodStart() const {
    return m_period_start;
}
void OAIPurchaseInvoice::setPeriodStart(const QString &period_start) {
    m_period_start = period_start;
    m_period_start_isSet = true;
}

bool OAIPurchaseInvoice::is_period_start_Set() const{
    return m_period_start_isSet;
}

bool OAIPurchaseInvoice::is_period_start_Valid() const{
    return m_period_start_isValid;
}

QString OAIPurchaseInvoice::getProjectReference() const {
    return m_project_reference;
}
void OAIPurchaseInvoice::setProjectReference(const QString &project_reference) {
    m_project_reference = project_reference;
    m_project_reference_isSet = true;
}

bool OAIPurchaseInvoice::is_project_reference_Set() const{
    return m_project_reference_isSet;
}

bool OAIPurchaseInvoice::is_project_reference_Valid() const{
    return m_project_reference_isValid;
}

OAIPurchaseInvoiceSender OAIPurchaseInvoice::getSender() const {
    return m_sender;
}
void OAIPurchaseInvoice::setSender(const OAIPurchaseInvoiceSender &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIPurchaseInvoice::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIPurchaseInvoice::is_sender_Valid() const{
    return m_sender_isValid;
}

QString OAIPurchaseInvoice::getSource() const {
    return m_source;
}
void OAIPurchaseInvoice::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIPurchaseInvoice::is_source_Set() const{
    return m_source_isSet;
}

bool OAIPurchaseInvoice::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIPurchaseInvoice::getSubType() const {
    return m_sub_type;
}
void OAIPurchaseInvoice::setSubType(const QString &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool OAIPurchaseInvoice::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool OAIPurchaseInvoice::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

bool OAIPurchaseInvoice::isSystemGeneratedPrimaryImage() const {
    return m_system_generated_primary_image;
}
void OAIPurchaseInvoice::setSystemGeneratedPrimaryImage(const bool &system_generated_primary_image) {
    m_system_generated_primary_image = system_generated_primary_image;
    m_system_generated_primary_image_isSet = true;
}

bool OAIPurchaseInvoice::is_system_generated_primary_image_Set() const{
    return m_system_generated_primary_image_isSet;
}

bool OAIPurchaseInvoice::is_system_generated_primary_image_Valid() const{
    return m_system_generated_primary_image_isValid;
}

QString OAIPurchaseInvoice::getTaxPointDate() const {
    return m_tax_point_date;
}
void OAIPurchaseInvoice::setTaxPointDate(const QString &tax_point_date) {
    m_tax_point_date = tax_point_date;
    m_tax_point_date_isSet = true;
}

bool OAIPurchaseInvoice::is_tax_point_date_Set() const{
    return m_tax_point_date_isSet;
}

bool OAIPurchaseInvoice::is_tax_point_date_Valid() const{
    return m_tax_point_date_isValid;
}

QList<OAIPurchaseInvoiceTaxSubtotal> OAIPurchaseInvoice::getTaxSubtotals() const {
    return m_tax_subtotals;
}
void OAIPurchaseInvoice::setTaxSubtotals(const QList<OAIPurchaseInvoiceTaxSubtotal> &tax_subtotals) {
    m_tax_subtotals = tax_subtotals;
    m_tax_subtotals_isSet = true;
}

bool OAIPurchaseInvoice::is_tax_subtotals_Set() const{
    return m_tax_subtotals_isSet;
}

bool OAIPurchaseInvoice::is_tax_subtotals_Valid() const{
    return m_tax_subtotals_isValid;
}

QString OAIPurchaseInvoice::getTaxSystem() const {
    return m_tax_system;
}
void OAIPurchaseInvoice::setTaxSystem(const QString &tax_system) {
    m_tax_system = tax_system;
    m_tax_system_isSet = true;
}

bool OAIPurchaseInvoice::is_tax_system_Set() const{
    return m_tax_system_isSet;
}

bool OAIPurchaseInvoice::is_tax_system_Valid() const{
    return m_tax_system_isValid;
}

bool OAIPurchaseInvoice::isVatReverseCharge() const {
    return m_vat_reverse_charge;
}
void OAIPurchaseInvoice::setVatReverseCharge(const bool &vat_reverse_charge) {
    m_vat_reverse_charge = vat_reverse_charge;
    m_vat_reverse_charge_isSet = true;
}

bool OAIPurchaseInvoice::is_vat_reverse_charge_Set() const{
    return m_vat_reverse_charge_isSet;
}

bool OAIPurchaseInvoice::is_vat_reverse_charge_Valid() const{
    return m_vat_reverse_charge_isValid;
}

bool OAIPurchaseInvoice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounting_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowance_charge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowance_charges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_including_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_document_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_totals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_means.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_means_array.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_means_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_terms_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_generated_primary_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_point_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_subtotals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_reverse_charge_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseInvoice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
