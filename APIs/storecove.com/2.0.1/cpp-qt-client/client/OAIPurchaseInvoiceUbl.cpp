/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseInvoiceUbl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseInvoiceUbl::OAIPurchaseInvoiceUbl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseInvoiceUbl::OAIPurchaseInvoiceUbl() {
    this->initializeModel();
}

OAIPurchaseInvoiceUbl::~OAIPurchaseInvoiceUbl() {}

void OAIPurchaseInvoiceUbl::initializeModel() {

    m_external_key_isSet = false;
    m_external_key_isValid = false;

    m_external_user_id_isSet = false;
    m_external_user_id_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_legal_entity_id_isSet = false;
    m_legal_entity_id_isValid = false;

    m_system_generated_primary_image_isSet = false;
    m_system_generated_primary_image_isValid = false;

    m_tax_system_isSet = false;
    m_tax_system_isValid = false;

    m_ubl_isSet = false;
    m_ubl_isValid = false;
}

void OAIPurchaseInvoiceUbl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseInvoiceUbl::fromJsonObject(QJsonObject json) {

    m_external_key_isValid = ::OpenAPI::fromJsonValue(m_external_key, json[QString("external_key")]);
    m_external_key_isSet = !json[QString("external_key")].isNull() && m_external_key_isValid;

    m_external_user_id_isValid = ::OpenAPI::fromJsonValue(m_external_user_id, json[QString("external_user_id")]);
    m_external_user_id_isSet = !json[QString("external_user_id")].isNull() && m_external_user_id_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_legal_entity_id_isValid = ::OpenAPI::fromJsonValue(m_legal_entity_id, json[QString("legal_entity_id")]);
    m_legal_entity_id_isSet = !json[QString("legal_entity_id")].isNull() && m_legal_entity_id_isValid;

    m_system_generated_primary_image_isValid = ::OpenAPI::fromJsonValue(m_system_generated_primary_image, json[QString("system_generated_primary_image")]);
    m_system_generated_primary_image_isSet = !json[QString("system_generated_primary_image")].isNull() && m_system_generated_primary_image_isValid;

    m_tax_system_isValid = ::OpenAPI::fromJsonValue(m_tax_system, json[QString("tax_system")]);
    m_tax_system_isSet = !json[QString("tax_system")].isNull() && m_tax_system_isValid;

    m_ubl_isValid = ::OpenAPI::fromJsonValue(m_ubl, json[QString("ubl")]);
    m_ubl_isSet = !json[QString("ubl")].isNull() && m_ubl_isValid;
}

QString OAIPurchaseInvoiceUbl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseInvoiceUbl::asJsonObject() const {
    QJsonObject obj;
    if (m_external_key_isSet) {
        obj.insert(QString("external_key"), ::OpenAPI::toJsonValue(m_external_key));
    }
    if (m_external_user_id_isSet) {
        obj.insert(QString("external_user_id"), ::OpenAPI::toJsonValue(m_external_user_id));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_legal_entity_id_isSet) {
        obj.insert(QString("legal_entity_id"), ::OpenAPI::toJsonValue(m_legal_entity_id));
    }
    if (m_system_generated_primary_image_isSet) {
        obj.insert(QString("system_generated_primary_image"), ::OpenAPI::toJsonValue(m_system_generated_primary_image));
    }
    if (m_tax_system_isSet) {
        obj.insert(QString("tax_system"), ::OpenAPI::toJsonValue(m_tax_system));
    }
    if (m_ubl_isSet) {
        obj.insert(QString("ubl"), ::OpenAPI::toJsonValue(m_ubl));
    }
    return obj;
}

QString OAIPurchaseInvoiceUbl::getExternalKey() const {
    return m_external_key;
}
void OAIPurchaseInvoiceUbl::setExternalKey(const QString &external_key) {
    m_external_key = external_key;
    m_external_key_isSet = true;
}

bool OAIPurchaseInvoiceUbl::is_external_key_Set() const{
    return m_external_key_isSet;
}

bool OAIPurchaseInvoiceUbl::is_external_key_Valid() const{
    return m_external_key_isValid;
}

QString OAIPurchaseInvoiceUbl::getExternalUserId() const {
    return m_external_user_id;
}
void OAIPurchaseInvoiceUbl::setExternalUserId(const QString &external_user_id) {
    m_external_user_id = external_user_id;
    m_external_user_id_isSet = true;
}

bool OAIPurchaseInvoiceUbl::is_external_user_id_Set() const{
    return m_external_user_id_isSet;
}

bool OAIPurchaseInvoiceUbl::is_external_user_id_Valid() const{
    return m_external_user_id_isValid;
}

QString OAIPurchaseInvoiceUbl::getGuid() const {
    return m_guid;
}
void OAIPurchaseInvoiceUbl::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIPurchaseInvoiceUbl::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIPurchaseInvoiceUbl::is_guid_Valid() const{
    return m_guid_isValid;
}

qint64 OAIPurchaseInvoiceUbl::getLegalEntityId() const {
    return m_legal_entity_id;
}
void OAIPurchaseInvoiceUbl::setLegalEntityId(const qint64 &legal_entity_id) {
    m_legal_entity_id = legal_entity_id;
    m_legal_entity_id_isSet = true;
}

bool OAIPurchaseInvoiceUbl::is_legal_entity_id_Set() const{
    return m_legal_entity_id_isSet;
}

bool OAIPurchaseInvoiceUbl::is_legal_entity_id_Valid() const{
    return m_legal_entity_id_isValid;
}

bool OAIPurchaseInvoiceUbl::isSystemGeneratedPrimaryImage() const {
    return m_system_generated_primary_image;
}
void OAIPurchaseInvoiceUbl::setSystemGeneratedPrimaryImage(const bool &system_generated_primary_image) {
    m_system_generated_primary_image = system_generated_primary_image;
    m_system_generated_primary_image_isSet = true;
}

bool OAIPurchaseInvoiceUbl::is_system_generated_primary_image_Set() const{
    return m_system_generated_primary_image_isSet;
}

bool OAIPurchaseInvoiceUbl::is_system_generated_primary_image_Valid() const{
    return m_system_generated_primary_image_isValid;
}

QString OAIPurchaseInvoiceUbl::getTaxSystem() const {
    return m_tax_system;
}
void OAIPurchaseInvoiceUbl::setTaxSystem(const QString &tax_system) {
    m_tax_system = tax_system;
    m_tax_system_isSet = true;
}

bool OAIPurchaseInvoiceUbl::is_tax_system_Set() const{
    return m_tax_system_isSet;
}

bool OAIPurchaseInvoiceUbl::is_tax_system_Valid() const{
    return m_tax_system_isValid;
}

QString OAIPurchaseInvoiceUbl::getUbl() const {
    return m_ubl;
}
void OAIPurchaseInvoiceUbl::setUbl(const QString &ubl) {
    m_ubl = ubl;
    m_ubl_isSet = true;
}

bool OAIPurchaseInvoiceUbl::is_ubl_Set() const{
    return m_ubl_isSet;
}

bool OAIPurchaseInvoiceUbl::is_ubl_Valid() const{
    return m_ubl_isValid;
}

bool OAIPurchaseInvoiceUbl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_generated_primary_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ubl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseInvoiceUbl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
