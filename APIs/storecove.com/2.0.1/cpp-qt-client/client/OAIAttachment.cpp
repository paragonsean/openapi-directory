/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachment::OAIAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachment::OAIAttachment() {
    this->initializeModel();
}

OAIAttachment::~OAIAttachment() {}

void OAIAttachment::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_document_isSet = false;
    m_document_isValid = false;

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_primary_image_isSet = false;
    m_primary_image_isValid = false;
}

void OAIAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachment::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("documentId")]);
    m_document_id_isSet = !json[QString("documentId")].isNull() && m_document_id_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_primary_image_isValid = ::OpenAPI::fromJsonValue(m_primary_image, json[QString("primaryImage")]);
    m_primary_image_isSet = !json[QString("primaryImage")].isNull() && m_primary_image_isValid;
}

QString OAIAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_document_isSet) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_document_id_isSet) {
        obj.insert(QString("documentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_primary_image_isSet) {
        obj.insert(QString("primaryImage"), ::OpenAPI::toJsonValue(m_primary_image));
    }
    return obj;
}

QString OAIAttachment::getDescription() const {
    return m_description;
}
void OAIAttachment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAttachment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAttachment::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAttachment::getDocument() const {
    return m_document;
}
void OAIAttachment::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIAttachment::is_document_Set() const{
    return m_document_isSet;
}

bool OAIAttachment::is_document_Valid() const{
    return m_document_isValid;
}

QString OAIAttachment::getDocumentId() const {
    return m_document_id;
}
void OAIAttachment::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIAttachment::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIAttachment::is_document_id_Valid() const{
    return m_document_id_isValid;
}

QString OAIAttachment::getFilename() const {
    return m_filename;
}
void OAIAttachment::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIAttachment::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIAttachment::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAIAttachment::getMimeType() const {
    return m_mime_type;
}
void OAIAttachment::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIAttachment::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIAttachment::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

bool OAIAttachment::isPrimaryImage() const {
    return m_primary_image;
}
void OAIAttachment::setPrimaryImage(const bool &primary_image) {
    m_primary_image = primary_image;
    m_primary_image_isSet = true;
}

bool OAIAttachment::is_primary_image_Set() const{
    return m_primary_image_isSet;
}

bool OAIAttachment::is_primary_image_Valid() const{
    return m_primary_image_isValid;
}

bool OAIAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_image_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_isValid && m_mime_type_isValid && true;
}

} // namespace OpenAPI
