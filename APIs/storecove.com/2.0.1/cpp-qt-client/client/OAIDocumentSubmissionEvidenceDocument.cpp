/**
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentSubmissionEvidenceDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentSubmissionEvidenceDocument::OAIDocumentSubmissionEvidenceDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentSubmissionEvidenceDocument::OAIDocumentSubmissionEvidenceDocument() {
    this->initializeModel();
}

OAIDocumentSubmissionEvidenceDocument::~OAIDocumentSubmissionEvidenceDocument() {}

void OAIDocumentSubmissionEvidenceDocument::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;
}

void OAIDocumentSubmissionEvidenceDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentSubmissionEvidenceDocument::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mime_type")]);
    m_mime_type_isSet = !json[QString("mime_type")].isNull() && m_mime_type_isValid;
}

QString OAIDocumentSubmissionEvidenceDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentSubmissionEvidenceDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_document_isSet) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mime_type"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    return obj;
}

QString OAIDocumentSubmissionEvidenceDocument::getDocument() const {
    return m_document;
}
void OAIDocumentSubmissionEvidenceDocument::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIDocumentSubmissionEvidenceDocument::is_document_Set() const{
    return m_document_isSet;
}

bool OAIDocumentSubmissionEvidenceDocument::is_document_Valid() const{
    return m_document_isValid;
}

QString OAIDocumentSubmissionEvidenceDocument::getExpiresAt() const {
    return m_expires_at;
}
void OAIDocumentSubmissionEvidenceDocument::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIDocumentSubmissionEvidenceDocument::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIDocumentSubmissionEvidenceDocument::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAIDocumentSubmissionEvidenceDocument::getMimeType() const {
    return m_mime_type;
}
void OAIDocumentSubmissionEvidenceDocument::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIDocumentSubmissionEvidenceDocument::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIDocumentSubmissionEvidenceDocument::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

bool OAIDocumentSubmissionEvidenceDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentSubmissionEvidenceDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
