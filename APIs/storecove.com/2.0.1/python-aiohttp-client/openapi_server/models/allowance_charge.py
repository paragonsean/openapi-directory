# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tax import Tax
from openapi_server import util


class AllowanceCharge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_excluding_tax: float=None, amount_excluding_vat: float=None, amount_including_tax: float=None, base_amount_excluding_tax: float=None, base_amount_including_tax: float=None, reason: str='Agreed settlement', reason_code: str=None, tax: Tax=None, taxes_duties_fees: List[Tax]=None):
        """AllowanceCharge - a model defined in OpenAPI

        :param amount_excluding_tax: The amount_excluding_tax of this AllowanceCharge.
        :param amount_excluding_vat: The amount_excluding_vat of this AllowanceCharge.
        :param amount_including_tax: The amount_including_tax of this AllowanceCharge.
        :param base_amount_excluding_tax: The base_amount_excluding_tax of this AllowanceCharge.
        :param base_amount_including_tax: The base_amount_including_tax of this AllowanceCharge.
        :param reason: The reason of this AllowanceCharge.
        :param reason_code: The reason_code of this AllowanceCharge.
        :param tax: The tax of this AllowanceCharge.
        :param taxes_duties_fees: The taxes_duties_fees of this AllowanceCharge.
        """
        self.openapi_types = {
            'amount_excluding_tax': float,
            'amount_excluding_vat': float,
            'amount_including_tax': float,
            'base_amount_excluding_tax': float,
            'base_amount_including_tax': float,
            'reason': str,
            'reason_code': str,
            'tax': Tax,
            'taxes_duties_fees': List[Tax]
        }

        self.attribute_map = {
            'amount_excluding_tax': 'amountExcludingTax',
            'amount_excluding_vat': 'amountExcludingVat',
            'amount_including_tax': 'amountIncludingTax',
            'base_amount_excluding_tax': 'baseAmountExcludingTax',
            'base_amount_including_tax': 'baseAmountIncludingTax',
            'reason': 'reason',
            'reason_code': 'reasonCode',
            'tax': 'tax',
            'taxes_duties_fees': 'taxesDutiesFees'
        }

        self._amount_excluding_tax = amount_excluding_tax
        self._amount_excluding_vat = amount_excluding_vat
        self._amount_including_tax = amount_including_tax
        self._base_amount_excluding_tax = base_amount_excluding_tax
        self._base_amount_including_tax = base_amount_including_tax
        self._reason = reason
        self._reason_code = reason_code
        self._tax = tax
        self._taxes_duties_fees = taxes_duties_fees

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AllowanceCharge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AllowanceCharge of this AllowanceCharge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_excluding_tax(self):
        """Gets the amount_excluding_tax of this AllowanceCharge.

        The amount for the allowance or charge, excluding tax.

        :return: The amount_excluding_tax of this AllowanceCharge.
        :rtype: float
        """
        return self._amount_excluding_tax

    @amount_excluding_tax.setter
    def amount_excluding_tax(self, amount_excluding_tax):
        """Sets the amount_excluding_tax of this AllowanceCharge.

        The amount for the allowance or charge, excluding tax.

        :param amount_excluding_tax: The amount_excluding_tax of this AllowanceCharge.
        :type amount_excluding_tax: float
        """

        self._amount_excluding_tax = amount_excluding_tax

    @property
    def amount_excluding_vat(self):
        """Gets the amount_excluding_vat of this AllowanceCharge.

        DEPRECATED. Use amountExcludingTax. The amount for the allowance or charge, excluding VAT.

        :return: The amount_excluding_vat of this AllowanceCharge.
        :rtype: float
        """
        return self._amount_excluding_vat

    @amount_excluding_vat.setter
    def amount_excluding_vat(self, amount_excluding_vat):
        """Sets the amount_excluding_vat of this AllowanceCharge.

        DEPRECATED. Use amountExcludingTax. The amount for the allowance or charge, excluding VAT.

        :param amount_excluding_vat: The amount_excluding_vat of this AllowanceCharge.
        :type amount_excluding_vat: float
        """

        self._amount_excluding_vat = amount_excluding_vat

    @property
    def amount_including_tax(self):
        """Gets the amount_including_tax of this AllowanceCharge.

        The amount for the allowance or charge, including tax.

        :return: The amount_including_tax of this AllowanceCharge.
        :rtype: float
        """
        return self._amount_including_tax

    @amount_including_tax.setter
    def amount_including_tax(self, amount_including_tax):
        """Sets the amount_including_tax of this AllowanceCharge.

        The amount for the allowance or charge, including tax.

        :param amount_including_tax: The amount_including_tax of this AllowanceCharge.
        :type amount_including_tax: float
        """

        self._amount_including_tax = amount_including_tax

    @property
    def base_amount_excluding_tax(self):
        """Gets the base_amount_excluding_tax of this AllowanceCharge.

        The base amount for the allowance or charge, excluding tax.

        :return: The base_amount_excluding_tax of this AllowanceCharge.
        :rtype: float
        """
        return self._base_amount_excluding_tax

    @base_amount_excluding_tax.setter
    def base_amount_excluding_tax(self, base_amount_excluding_tax):
        """Sets the base_amount_excluding_tax of this AllowanceCharge.

        The base amount for the allowance or charge, excluding tax.

        :param base_amount_excluding_tax: The base_amount_excluding_tax of this AllowanceCharge.
        :type base_amount_excluding_tax: float
        """

        self._base_amount_excluding_tax = base_amount_excluding_tax

    @property
    def base_amount_including_tax(self):
        """Gets the base_amount_including_tax of this AllowanceCharge.

        The base amount for the allowance or charge, including tax.

        :return: The base_amount_including_tax of this AllowanceCharge.
        :rtype: float
        """
        return self._base_amount_including_tax

    @base_amount_including_tax.setter
    def base_amount_including_tax(self, base_amount_including_tax):
        """Sets the base_amount_including_tax of this AllowanceCharge.

        The base amount for the allowance or charge, including tax.

        :param base_amount_including_tax: The base_amount_including_tax of this AllowanceCharge.
        :type base_amount_including_tax: float
        """

        self._base_amount_including_tax = base_amount_including_tax

    @property
    def reason(self):
        """Gets the reason of this AllowanceCharge.

        The reason for the allowance or charge, free text

        :return: The reason of this AllowanceCharge.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this AllowanceCharge.

        The reason for the allowance or charge, free text

        :param reason: The reason of this AllowanceCharge.
        :type reason: str
        """

        self._reason = reason

    @property
    def reason_code(self):
        """Gets the reason_code of this AllowanceCharge.

        Do not use. Contact Storecove first if you want to use this field.

        :return: The reason_code of this AllowanceCharge.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this AllowanceCharge.

        Do not use. Contact Storecove first if you want to use this field.

        :param reason_code: The reason_code of this AllowanceCharge.
        :type reason_code: str
        """

        self._reason_code = reason_code

    @property
    def tax(self):
        """Gets the tax of this AllowanceCharge.


        :return: The tax of this AllowanceCharge.
        :rtype: Tax
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this AllowanceCharge.


        :param tax: The tax of this AllowanceCharge.
        :type tax: Tax
        """

        self._tax = tax

    @property
    def taxes_duties_fees(self):
        """Gets the taxes_duties_fees of this AllowanceCharge.

        An array of taxes, duties and fees for this invoice line. At this moment, multiple Tax items is allowed only for IN (India) and US (USA) taxes. All other countries can only have a single Tax item in this array.

        :return: The taxes_duties_fees of this AllowanceCharge.
        :rtype: List[Tax]
        """
        return self._taxes_duties_fees

    @taxes_duties_fees.setter
    def taxes_duties_fees(self, taxes_duties_fees):
        """Sets the taxes_duties_fees of this AllowanceCharge.

        An array of taxes, duties and fees for this invoice line. At this moment, multiple Tax items is allowed only for IN (India) and US (USA) taxes. All other countries can only have a single Tax item in this array.

        :param taxes_duties_fees: The taxes_duties_fees of this AllowanceCharge.
        :type taxes_duties_fees: List[Tax]
        """
        if taxes_duties_fees is not None and len(taxes_duties_fees) < 0:
            raise ValueError("Invalid value for `taxes_duties_fees`, number of items must be greater than or equal to `0`")

        self._taxes_duties_fees = taxes_duties_fees
