# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.invoice import Invoice
from openapi_server.models.invoice_data import InvoiceData
from openapi_server.models.invoice_recipient import InvoiceRecipient
from openapi_server.models.routing import Routing
from openapi_server import util


class InvoiceSubmission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[Attachment]=None, create_primary_image: bool=None, document: str=None, document_url: str=None, idempotency_guid: str=None, invoice: Invoice=None, invoice_data: InvoiceData=None, invoice_recipient: InvoiceRecipient=None, legal_entity_id: int=None, legal_supplier_id: int=None, mode: str=None, routing: Routing=None, supplier_id: int=None):
        """InvoiceSubmission - a model defined in OpenAPI

        :param attachments: The attachments of this InvoiceSubmission.
        :param create_primary_image: The create_primary_image of this InvoiceSubmission.
        :param document: The document of this InvoiceSubmission.
        :param document_url: The document_url of this InvoiceSubmission.
        :param idempotency_guid: The idempotency_guid of this InvoiceSubmission.
        :param invoice: The invoice of this InvoiceSubmission.
        :param invoice_data: The invoice_data of this InvoiceSubmission.
        :param invoice_recipient: The invoice_recipient of this InvoiceSubmission.
        :param legal_entity_id: The legal_entity_id of this InvoiceSubmission.
        :param legal_supplier_id: The legal_supplier_id of this InvoiceSubmission.
        :param mode: The mode of this InvoiceSubmission.
        :param routing: The routing of this InvoiceSubmission.
        :param supplier_id: The supplier_id of this InvoiceSubmission.
        """
        self.openapi_types = {
            'attachments': List[Attachment],
            'create_primary_image': bool,
            'document': str,
            'document_url': str,
            'idempotency_guid': str,
            'invoice': Invoice,
            'invoice_data': InvoiceData,
            'invoice_recipient': InvoiceRecipient,
            'legal_entity_id': int,
            'legal_supplier_id': int,
            'mode': str,
            'routing': Routing,
            'supplier_id': int
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'create_primary_image': 'createPrimaryImage',
            'document': 'document',
            'document_url': 'documentUrl',
            'idempotency_guid': 'idempotencyGuid',
            'invoice': 'invoice',
            'invoice_data': 'invoiceData',
            'invoice_recipient': 'invoiceRecipient',
            'legal_entity_id': 'legalEntityId',
            'legal_supplier_id': 'legalSupplierId',
            'mode': 'mode',
            'routing': 'routing',
            'supplier_id': 'supplierId'
        }

        self._attachments = attachments
        self._create_primary_image = create_primary_image
        self._document = document
        self._document_url = document_url
        self._idempotency_guid = idempotency_guid
        self._invoice = invoice
        self._invoice_data = invoice_data
        self._invoice_recipient = invoice_recipient
        self._legal_entity_id = legal_entity_id
        self._legal_supplier_id = legal_supplier_id
        self._mode = mode
        self._routing = routing
        self._supplier_id = supplier_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceSubmission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceSubmission of this InvoiceSubmission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this InvoiceSubmission.

        An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.

        :return: The attachments of this InvoiceSubmission.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this InvoiceSubmission.

        An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.

        :param attachments: The attachments of this InvoiceSubmission.
        :type attachments: List[Attachment]
        """
        if attachments is not None and len(attachments) > 10:
            raise ValueError("Invalid value for `attachments`, number of items must be less than or equal to `10`")

        self._attachments = attachments

    @property
    def create_primary_image(self):
        """Gets the create_primary_image of this InvoiceSubmission.

        DEPRECATED. In the future we will no longer support creating PDF invoices. Whether or not to create a primary image (PDF) if one is not provided. For customers who started from December 1st 2022, the default is false. For customers who started before that, the default is true.

        :return: The create_primary_image of this InvoiceSubmission.
        :rtype: bool
        """
        return self._create_primary_image

    @create_primary_image.setter
    def create_primary_image(self, create_primary_image):
        """Sets the create_primary_image of this InvoiceSubmission.

        DEPRECATED. In the future we will no longer support creating PDF invoices. Whether or not to create a primary image (PDF) if one is not provided. For customers who started from December 1st 2022, the default is false. For customers who started before that, the default is true.

        :param create_primary_image: The create_primary_image of this InvoiceSubmission.
        :type create_primary_image: bool
        """

        self._create_primary_image = create_primary_image

    @property
    def document(self):
        """Gets the document of this InvoiceSubmission.

        DEPRECATED. Use attachments.

        :return: The document of this InvoiceSubmission.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this InvoiceSubmission.

        DEPRECATED. Use attachments.

        :param document: The document of this InvoiceSubmission.
        :type document: str
        """

        self._document = document

    @property
    def document_url(self):
        """Gets the document_url of this InvoiceSubmission.

        DEPRECATED. Use attachments.

        :return: The document_url of this InvoiceSubmission.
        :rtype: str
        """
        return self._document_url

    @document_url.setter
    def document_url(self, document_url):
        """Sets the document_url of this InvoiceSubmission.

        DEPRECATED. Use attachments.

        :param document_url: The document_url of this InvoiceSubmission.
        :type document_url: str
        """

        self._document_url = document_url

    @property
    def idempotency_guid(self):
        """Gets the idempotency_guid of this InvoiceSubmission.

        A guid that you generated for this InvoiceSubmission to achieve idempotency. If you submit multiple documents with the same idempotencyGuid, only the first one will be processed.

        :return: The idempotency_guid of this InvoiceSubmission.
        :rtype: str
        """
        return self._idempotency_guid

    @idempotency_guid.setter
    def idempotency_guid(self, idempotency_guid):
        """Sets the idempotency_guid of this InvoiceSubmission.

        A guid that you generated for this InvoiceSubmission to achieve idempotency. If you submit multiple documents with the same idempotencyGuid, only the first one will be processed.

        :param idempotency_guid: The idempotency_guid of this InvoiceSubmission.
        :type idempotency_guid: str
        """
        if idempotency_guid is not None and len(idempotency_guid) > 36:
            raise ValueError("Invalid value for `idempotency_guid`, length must be less than or equal to `36`")
        if idempotency_guid is not None and len(idempotency_guid) < 36:
            raise ValueError("Invalid value for `idempotency_guid`, length must be greater than or equal to `36`")

        self._idempotency_guid = idempotency_guid

    @property
    def invoice(self):
        """Gets the invoice of this InvoiceSubmission.


        :return: The invoice of this InvoiceSubmission.
        :rtype: Invoice
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this InvoiceSubmission.


        :param invoice: The invoice of this InvoiceSubmission.
        :type invoice: Invoice
        """

        self._invoice = invoice

    @property
    def invoice_data(self):
        """Gets the invoice_data of this InvoiceSubmission.


        :return: The invoice_data of this InvoiceSubmission.
        :rtype: InvoiceData
        """
        return self._invoice_data

    @invoice_data.setter
    def invoice_data(self, invoice_data):
        """Sets the invoice_data of this InvoiceSubmission.


        :param invoice_data: The invoice_data of this InvoiceSubmission.
        :type invoice_data: InvoiceData
        """

        self._invoice_data = invoice_data

    @property
    def invoice_recipient(self):
        """Gets the invoice_recipient of this InvoiceSubmission.


        :return: The invoice_recipient of this InvoiceSubmission.
        :rtype: InvoiceRecipient
        """
        return self._invoice_recipient

    @invoice_recipient.setter
    def invoice_recipient(self, invoice_recipient):
        """Sets the invoice_recipient of this InvoiceSubmission.


        :param invoice_recipient: The invoice_recipient of this InvoiceSubmission.
        :type invoice_recipient: InvoiceRecipient
        """

        self._invoice_recipient = invoice_recipient

    @property
    def legal_entity_id(self):
        """Gets the legal_entity_id of this InvoiceSubmission.

        The id of the LegalEntity this invoice should be sent for.

        :return: The legal_entity_id of this InvoiceSubmission.
        :rtype: int
        """
        return self._legal_entity_id

    @legal_entity_id.setter
    def legal_entity_id(self, legal_entity_id):
        """Sets the legal_entity_id of this InvoiceSubmission.

        The id of the LegalEntity this invoice should be sent for.

        :param legal_entity_id: The legal_entity_id of this InvoiceSubmission.
        :type legal_entity_id: int
        """

        self._legal_entity_id = legal_entity_id

    @property
    def legal_supplier_id(self):
        """Gets the legal_supplier_id of this InvoiceSubmission.

        DEPRECATED. Use legalEntityId

        :return: The legal_supplier_id of this InvoiceSubmission.
        :rtype: int
        """
        return self._legal_supplier_id

    @legal_supplier_id.setter
    def legal_supplier_id(self, legal_supplier_id):
        """Sets the legal_supplier_id of this InvoiceSubmission.

        DEPRECATED. Use legalEntityId

        :param legal_supplier_id: The legal_supplier_id of this InvoiceSubmission.
        :type legal_supplier_id: int
        """

        self._legal_supplier_id = legal_supplier_id

    @property
    def mode(self):
        """Gets the mode of this InvoiceSubmission.

        DEPRECATED.

        :return: The mode of this InvoiceSubmission.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this InvoiceSubmission.

        DEPRECATED.

        :param mode: The mode of this InvoiceSubmission.
        :type mode: str
        """
        allowed_values = ["direct"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def routing(self):
        """Gets the routing of this InvoiceSubmission.


        :return: The routing of this InvoiceSubmission.
        :rtype: Routing
        """
        return self._routing

    @routing.setter
    def routing(self, routing):
        """Sets the routing of this InvoiceSubmission.


        :param routing: The routing of this InvoiceSubmission.
        :type routing: Routing
        """

        self._routing = routing

    @property
    def supplier_id(self):
        """Gets the supplier_id of this InvoiceSubmission.

        DEPRECATED.

        :return: The supplier_id of this InvoiceSubmission.
        :rtype: int
        """
        return self._supplier_id

    @supplier_id.setter
    def supplier_id(self, supplier_id):
        """Sets the supplier_id of this InvoiceSubmission.

        DEPRECATED.

        :param supplier_id: The supplier_id of this InvoiceSubmission.
        :type supplier_id: int
        """

        self._supplier_id = supplier_id
