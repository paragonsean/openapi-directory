# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PurchaseInvoicePaymentMeans(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, branch_code: str=None, holder: str=None, mandate: str=None, network: str=None, payment_id: str=None, type: str=None):
        """PurchaseInvoicePaymentMeans - a model defined in OpenAPI

        :param account: The account of this PurchaseInvoicePaymentMeans.
        :param branch_code: The branch_code of this PurchaseInvoicePaymentMeans.
        :param holder: The holder of this PurchaseInvoicePaymentMeans.
        :param mandate: The mandate of this PurchaseInvoicePaymentMeans.
        :param network: The network of this PurchaseInvoicePaymentMeans.
        :param payment_id: The payment_id of this PurchaseInvoicePaymentMeans.
        :param type: The type of this PurchaseInvoicePaymentMeans.
        """
        self.openapi_types = {
            'account': str,
            'branch_code': str,
            'holder': str,
            'mandate': str,
            'network': str,
            'payment_id': str,
            'type': str
        }

        self.attribute_map = {
            'account': 'account',
            'branch_code': 'branch_code',
            'holder': 'holder',
            'mandate': 'mandate',
            'network': 'network',
            'payment_id': 'payment_id',
            'type': 'type'
        }

        self._account = account
        self._branch_code = branch_code
        self._holder = holder
        self._mandate = mandate
        self._network = network
        self._payment_id = payment_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseInvoicePaymentMeans':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurchaseInvoicePaymentMeans of this PurchaseInvoicePaymentMeans.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this PurchaseInvoicePaymentMeans.

        The account number to which to transfer.

        :return: The account of this PurchaseInvoicePaymentMeans.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this PurchaseInvoicePaymentMeans.

        The account number to which to transfer.

        :param account: The account of this PurchaseInvoicePaymentMeans.
        :type account: str
        """

        self._account = account

    @property
    def branch_code(self):
        """Gets the branch_code of this PurchaseInvoicePaymentMeans.

        The code identifying the bank branch. May contain a BIC/SWIFT or something appropriate for the payment method, such as \"NPP\" for type NppPaymentMean.

        :return: The branch_code of this PurchaseInvoicePaymentMeans.
        :rtype: str
        """
        return self._branch_code

    @branch_code.setter
    def branch_code(self, branch_code):
        """Sets the branch_code of this PurchaseInvoicePaymentMeans.

        The code identifying the bank branch. May contain a BIC/SWIFT or something appropriate for the payment method, such as \"NPP\" for type NppPaymentMean.

        :param branch_code: The branch_code of this PurchaseInvoicePaymentMeans.
        :type branch_code: str
        """

        self._branch_code = branch_code

    @property
    def holder(self):
        """Gets the holder of this PurchaseInvoicePaymentMeans.

        The account holder name to which to transfer.

        :return: The holder of this PurchaseInvoicePaymentMeans.
        :rtype: str
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this PurchaseInvoicePaymentMeans.

        The account holder name to which to transfer.

        :param holder: The holder of this PurchaseInvoicePaymentMeans.
        :type holder: str
        """

        self._holder = holder

    @property
    def mandate(self):
        """Gets the mandate of this PurchaseInvoicePaymentMeans.

        The mandate, used only for type DirectDebitPaymentMean.

        :return: The mandate of this PurchaseInvoicePaymentMeans.
        :rtype: str
        """
        return self._mandate

    @mandate.setter
    def mandate(self, mandate):
        """Sets the mandate of this PurchaseInvoicePaymentMeans.

        The mandate, used only for type DirectDebitPaymentMean.

        :param mandate: The mandate of this PurchaseInvoicePaymentMeans.
        :type mandate: str
        """

        self._mandate = mandate

    @property
    def network(self):
        """Gets the network of this PurchaseInvoicePaymentMeans.

        The payment network. Used only for type CardPaymentType.

        :return: The network of this PurchaseInvoicePaymentMeans.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this PurchaseInvoicePaymentMeans.

        The payment network. Used only for type CardPaymentType.

        :param network: The network of this PurchaseInvoicePaymentMeans.
        :type network: str
        """

        self._network = network

    @property
    def payment_id(self):
        """Gets the payment_id of this PurchaseInvoicePaymentMeans.

        The payment id to use when making the payment. The invoice sender will use this to match the received funds to the invoice.

        :return: The payment_id of this PurchaseInvoicePaymentMeans.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PurchaseInvoicePaymentMeans.

        The payment id to use when making the payment. The invoice sender will use this to match the received funds to the invoice.

        :param payment_id: The payment_id of this PurchaseInvoicePaymentMeans.
        :type payment_id: str
        """

        self._payment_id = payment_id

    @property
    def type(self):
        """Gets the type of this PurchaseInvoicePaymentMeans.

        The type of payment means. Which type are returned is determined by the &pmv= query parameter. For details see documentation for that field.

        :return: The type of this PurchaseInvoicePaymentMeans.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PurchaseInvoicePaymentMeans.

        The type of payment means. Which type are returned is determined by the &pmv= query parameter. For details see documentation for that field.

        :param type: The type of this PurchaseInvoicePaymentMeans.
        :type type: str
        """
        allowed_values = ["BankPaymentMean", "DirectDebitPaymentMean", "CardPaymentMean", "NppPaymentMean", "SeBankGiroPaymentMean", "SePlusgiroPaymentMean", "SgCardPaymentMean", "SgGiroPaymentMean", "SgPaynowPaymentMean", "CreditTransferPaymentMean", "CreditCardPaymentMean", "SeBankgiroPaymentMean", "AunzNppPayidPaymentMean", "OnlinePaymentServicePaymentMean", "StandingAgreementPaymentMean", "AunzNppPaytoPaymentMean", "AunzBpayPaymentMean", "AunzPostbillpayPaymentMean", "AunzUriPaymentMean"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
