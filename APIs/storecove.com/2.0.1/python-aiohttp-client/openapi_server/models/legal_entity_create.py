# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country import Country
from openapi_server.models.rea import Rea
from openapi_server import util


class LegalEntityCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertisements: List[str]=["invoice"], city: str=None, country: Country=None, county: str=None, line1: str=None, line2: str=None, party_name: str=None, public: bool=True, rea: Rea=None, tenant_id: str=None, third_party_password: str=None, third_party_username: str=None, zip: str=None):
        """LegalEntityCreate - a model defined in OpenAPI

        :param advertisements: The advertisements of this LegalEntityCreate.
        :param city: The city of this LegalEntityCreate.
        :param country: The country of this LegalEntityCreate.
        :param county: The county of this LegalEntityCreate.
        :param line1: The line1 of this LegalEntityCreate.
        :param line2: The line2 of this LegalEntityCreate.
        :param party_name: The party_name of this LegalEntityCreate.
        :param public: The public of this LegalEntityCreate.
        :param rea: The rea of this LegalEntityCreate.
        :param tenant_id: The tenant_id of this LegalEntityCreate.
        :param third_party_password: The third_party_password of this LegalEntityCreate.
        :param third_party_username: The third_party_username of this LegalEntityCreate.
        :param zip: The zip of this LegalEntityCreate.
        """
        self.openapi_types = {
            'advertisements': List[str],
            'city': str,
            'country': Country,
            'county': str,
            'line1': str,
            'line2': str,
            'party_name': str,
            'public': bool,
            'rea': Rea,
            'tenant_id': str,
            'third_party_password': str,
            'third_party_username': str,
            'zip': str
        }

        self.attribute_map = {
            'advertisements': 'advertisements',
            'city': 'city',
            'country': 'country',
            'county': 'county',
            'line1': 'line1',
            'line2': 'line2',
            'party_name': 'party_name',
            'public': 'public',
            'rea': 'rea',
            'tenant_id': 'tenant_id',
            'third_party_password': 'third_party_password',
            'third_party_username': 'third_party_username',
            'zip': 'zip'
        }

        self._advertisements = advertisements
        self._city = city
        self._country = country
        self._county = county
        self._line1 = line1
        self._line2 = line2
        self._party_name = party_name
        self._public = public
        self._rea = rea
        self._tenant_id = tenant_id
        self._third_party_password = third_party_password
        self._third_party_username = third_party_username
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegalEntityCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegalEntityCreate of this LegalEntityCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertisements(self):
        """Gets the advertisements of this LegalEntityCreate.

        A list of document types to advertise. Use if this LegalEntity needs the ability to receive more than only invoice documents.

        :return: The advertisements of this LegalEntityCreate.
        :rtype: List[str]
        """
        return self._advertisements

    @advertisements.setter
    def advertisements(self, advertisements):
        """Sets the advertisements of this LegalEntityCreate.

        A list of document types to advertise. Use if this LegalEntity needs the ability to receive more than only invoice documents.

        :param advertisements: The advertisements of this LegalEntityCreate.
        :type advertisements: List[str]
        """
        allowed_values = ["invoice", "invoice_response", "order", "ordering", "order_response"]  # noqa: E501
        if not set(advertisements).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `advertisements` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(advertisements) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._advertisements = advertisements

    @property
    def city(self):
        """Gets the city of this LegalEntityCreate.

        The city.

        :return: The city of this LegalEntityCreate.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this LegalEntityCreate.

        The city.

        :param city: The city of this LegalEntityCreate.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")
        if city is not None and len(city) > 64:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `64`")
        if city is not None and len(city) < 2:
            raise ValueError("Invalid value for `city`, length must be greater than or equal to `2`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this LegalEntityCreate.


        :return: The country of this LegalEntityCreate.
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this LegalEntityCreate.


        :param country: The country of this LegalEntityCreate.
        :type country: Country
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def county(self):
        """Gets the county of this LegalEntityCreate.

        County, if applicable

        :return: The county of this LegalEntityCreate.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this LegalEntityCreate.

        County, if applicable

        :param county: The county of this LegalEntityCreate.
        :type county: str
        """
        if county is not None and len(county) > 64:
            raise ValueError("Invalid value for `county`, length must be less than or equal to `64`")

        self._county = county

    @property
    def line1(self):
        """Gets the line1 of this LegalEntityCreate.

        The first address line.

        :return: The line1 of this LegalEntityCreate.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this LegalEntityCreate.

        The first address line.

        :param line1: The line1 of this LegalEntityCreate.
        :type line1: str
        """
        if line1 is None:
            raise ValueError("Invalid value for `line1`, must not be `None`")
        if line1 is not None and len(line1) > 192:
            raise ValueError("Invalid value for `line1`, length must be less than or equal to `192`")
        if line1 is not None and len(line1) < 2:
            raise ValueError("Invalid value for `line1`, length must be greater than or equal to `2`")

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this LegalEntityCreate.

        The second address line, if applicable

        :return: The line2 of this LegalEntityCreate.
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this LegalEntityCreate.

        The second address line, if applicable

        :param line2: The line2 of this LegalEntityCreate.
        :type line2: str
        """
        if line2 is not None and len(line2) > 192:
            raise ValueError("Invalid value for `line2`, length must be less than or equal to `192`")

        self._line2 = line2

    @property
    def party_name(self):
        """Gets the party_name of this LegalEntityCreate.

        The name of the company.

        :return: The party_name of this LegalEntityCreate.
        :rtype: str
        """
        return self._party_name

    @party_name.setter
    def party_name(self, party_name):
        """Sets the party_name of this LegalEntityCreate.

        The name of the company.

        :param party_name: The party_name of this LegalEntityCreate.
        :type party_name: str
        """
        if party_name is None:
            raise ValueError("Invalid value for `party_name`, must not be `None`")
        if party_name is not None and len(party_name) > 64:
            raise ValueError("Invalid value for `party_name`, length must be less than or equal to `64`")
        if party_name is not None and len(party_name) < 2:
            raise ValueError("Invalid value for `party_name`, length must be greater than or equal to `2`")

        self._party_name = party_name

    @property
    def public(self):
        """Gets the public of this LegalEntityCreate.

        Whether or not this LegalEntity is public. Public means it will be entered into the PEPPOL directory at https://directory.peppol.eu/

        :return: The public of this LegalEntityCreate.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this LegalEntityCreate.

        Whether or not this LegalEntity is public. Public means it will be entered into the PEPPOL directory at https://directory.peppol.eu/

        :param public: The public of this LegalEntityCreate.
        :type public: bool
        """

        self._public = public

    @property
    def rea(self):
        """Gets the rea of this LegalEntityCreate.


        :return: The rea of this LegalEntityCreate.
        :rtype: Rea
        """
        return self._rea

    @rea.setter
    def rea(self, rea):
        """Sets the rea of this LegalEntityCreate.


        :param rea: The rea of this LegalEntityCreate.
        :type rea: Rea
        """

        self._rea = rea

    @property
    def tenant_id(self):
        """Gets the tenant_id of this LegalEntityCreate.

        The id of the tenant, to be used in case of single-tenant solutions that share webhook URLs. This property will included in webhook events.

        :return: The tenant_id of this LegalEntityCreate.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this LegalEntityCreate.

        The id of the tenant, to be used in case of single-tenant solutions that share webhook URLs. This property will included in webhook events.

        :param tenant_id: The tenant_id of this LegalEntityCreate.
        :type tenant_id: str
        """
        if tenant_id is not None and len(tenant_id) > 64:
            raise ValueError("Invalid value for `tenant_id`, length must be less than or equal to `64`")

        self._tenant_id = tenant_id

    @property
    def third_party_password(self):
        """Gets the third_party_password of this LegalEntityCreate.

        The password to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN LegalEntity.

        :return: The third_party_password of this LegalEntityCreate.
        :rtype: str
        """
        return self._third_party_password

    @third_party_password.setter
    def third_party_password(self, third_party_password):
        """Sets the third_party_password of this LegalEntityCreate.

        The password to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN LegalEntity.

        :param third_party_password: The third_party_password of this LegalEntityCreate.
        :type third_party_password: str
        """
        if third_party_password is not None and len(third_party_password) > 64:
            raise ValueError("Invalid value for `third_party_password`, length must be less than or equal to `64`")
        if third_party_password is not None and len(third_party_password) < 2:
            raise ValueError("Invalid value for `third_party_password`, length must be greater than or equal to `2`")

        self._third_party_password = third_party_password

    @property
    def third_party_username(self):
        """Gets the third_party_username of this LegalEntityCreate.

        The username to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN LegalEntity.

        :return: The third_party_username of this LegalEntityCreate.
        :rtype: str
        """
        return self._third_party_username

    @third_party_username.setter
    def third_party_username(self, third_party_username):
        """Sets the third_party_username of this LegalEntityCreate.

        The username to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN LegalEntity.

        :param third_party_username: The third_party_username of this LegalEntityCreate.
        :type third_party_username: str
        """
        if third_party_username is not None and len(third_party_username) > 64:
            raise ValueError("Invalid value for `third_party_username`, length must be less than or equal to `64`")
        if third_party_username is not None and len(third_party_username) < 2:
            raise ValueError("Invalid value for `third_party_username`, length must be greater than or equal to `2`")

        self._third_party_username = third_party_username

    @property
    def zip(self):
        """Gets the zip of this LegalEntityCreate.

        The zipcode.

        :return: The zip of this LegalEntityCreate.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this LegalEntityCreate.

        The zipcode.

        :param zip: The zip of this LegalEntityCreate.
        :type zip: str
        """
        if zip is None:
            raise ValueError("Invalid value for `zip`, must not be `None`")
        if zip is not None and len(zip) > 32:
            raise ValueError("Invalid value for `zip`, length must be less than or equal to `32`")
        if zip is not None and len(zip) < 2:
            raise ValueError("Invalid value for `zip`, length must be greater than or equal to `2`")

        self._zip = zip
