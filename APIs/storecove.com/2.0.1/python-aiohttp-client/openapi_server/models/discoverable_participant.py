# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiscoverableParticipant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_types: List[str]=None, identifier: str=None, meta_scheme: str='iso6523-actorid-upis', network: str='peppol', scheme: str=None):
        """DiscoverableParticipant - a model defined in OpenAPI

        :param document_types: The document_types of this DiscoverableParticipant.
        :param identifier: The identifier of this DiscoverableParticipant.
        :param meta_scheme: The meta_scheme of this DiscoverableParticipant.
        :param network: The network of this DiscoverableParticipant.
        :param scheme: The scheme of this DiscoverableParticipant.
        """
        self.openapi_types = {
            'document_types': List[str],
            'identifier': str,
            'meta_scheme': str,
            'network': str,
            'scheme': str
        }

        self.attribute_map = {
            'document_types': 'documentTypes',
            'identifier': 'identifier',
            'meta_scheme': 'metaScheme',
            'network': 'network',
            'scheme': 'scheme'
        }

        self._document_types = document_types
        self._identifier = identifier
        self._meta_scheme = meta_scheme
        self._network = network
        self._scheme = scheme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscoverableParticipant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiscoverableParticipant of this DiscoverableParticipant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_types(self):
        """Gets the document_types of this DiscoverableParticipant.

        An array of document types to discover. The default is '[\"invoice\", \"creditnote\"]'. This is ignored when only checking existence.

        :return: The document_types of this DiscoverableParticipant.
        :rtype: List[str]
        """
        return self._document_types

    @document_types.setter
    def document_types(self, document_types):
        """Sets the document_types of this DiscoverableParticipant.

        An array of document types to discover. The default is '[\"invoice\", \"creditnote\"]'. This is ignored when only checking existence.

        :param document_types: The document_types of this DiscoverableParticipant.
        :type document_types: List[str]
        """
        allowed_values = ["invoice", "creditnote", "invoice_response", "order", "ordering", "order_response"]  # noqa: E501
        if not set(document_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `document_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(document_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._document_types = document_types

    @property
    def identifier(self):
        """Gets the identifier of this DiscoverableParticipant.

        The actual identifier.

        :return: The identifier of this DiscoverableParticipant.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this DiscoverableParticipant.

        The actual identifier.

        :param identifier: The identifier of this DiscoverableParticipant.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")
        if identifier is not None and len(identifier) < 1:
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `1`")

        self._identifier = identifier

    @property
    def meta_scheme(self):
        """Gets the meta_scheme of this DiscoverableParticipant.

        The meta scheme of the identifier. For Peppol this is always 'iso6523-actorid-upis'.

        :return: The meta_scheme of this DiscoverableParticipant.
        :rtype: str
        """
        return self._meta_scheme

    @meta_scheme.setter
    def meta_scheme(self, meta_scheme):
        """Sets the meta_scheme of this DiscoverableParticipant.

        The meta scheme of the identifier. For Peppol this is always 'iso6523-actorid-upis'.

        :param meta_scheme: The meta_scheme of this DiscoverableParticipant.
        :type meta_scheme: str
        """
        if meta_scheme is not None and len(meta_scheme) < 3:
            raise ValueError("Invalid value for `meta_scheme`, length must be greater than or equal to `3`")

        self._meta_scheme = meta_scheme

    @property
    def network(self):
        """Gets the network of this DiscoverableParticipant.

        The network to check. Currently only 'peppol' is supported.

        :return: The network of this DiscoverableParticipant.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this DiscoverableParticipant.

        The network to check. Currently only 'peppol' is supported.

        :param network: The network of this DiscoverableParticipant.
        :type network: str
        """
        if network is not None and len(network) < 3:
            raise ValueError("Invalid value for `network`, length must be greater than or equal to `3`")

        self._network = network

    @property
    def scheme(self):
        """Gets the scheme of this DiscoverableParticipant.

        The scheme of the identifier. See <<_receiver_identifiers_list>> for a list.

        :return: The scheme of this DiscoverableParticipant.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this DiscoverableParticipant.

        The scheme of the identifier. See <<_receiver_identifiers_list>> for a list.

        :param scheme: The scheme of this DiscoverableParticipant.
        :type scheme: str
        """
        if scheme is None:
            raise ValueError("Invalid value for `scheme`, must not be `None`")
        if scheme is not None and len(scheme) < 3:
            raise ValueError("Invalid value for `scheme`, length must be greater than or equal to `3`")

        self._scheme = scheme
