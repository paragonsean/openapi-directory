# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvoiceResponseCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_code: str=None, field_value: str=None):
        """InvoiceResponseCondition - a model defined in OpenAPI

        :param field_code: The field_code of this InvoiceResponseCondition.
        :param field_value: The field_value of this InvoiceResponseCondition.
        """
        self.openapi_types = {
            'field_code': str,
            'field_value': str
        }

        self.attribute_map = {
            'field_code': 'fieldCode',
            'field_value': 'fieldValue'
        }

        self._field_code = field_code
        self._field_value = field_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceResponseCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceResponseCondition of this InvoiceResponseCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_code(self):
        """Gets the field_code of this InvoiceResponseCondition.

        The code of the field with the error. Find the element here: https://docs.peppol.eu/poacc/billing/3.0/syntax/ubl-invoice/ and then get the field's Business term.

        :return: The field_code of this InvoiceResponseCondition.
        :rtype: str
        """
        return self._field_code

    @field_code.setter
    def field_code(self, field_code):
        """Sets the field_code of this InvoiceResponseCondition.

        The code of the field with the error. Find the element here: https://docs.peppol.eu/poacc/billing/3.0/syntax/ubl-invoice/ and then get the field's Business term.

        :param field_code: The field_code of this InvoiceResponseCondition.
        :type field_code: str
        """
        if field_code is None:
            raise ValueError("Invalid value for `field_code`, must not be `None`")

        self._field_code = field_code

    @property
    def field_value(self):
        """Gets the field_value of this InvoiceResponseCondition.

        The (error) value of the field.

        :return: The field_value of this InvoiceResponseCondition.
        :rtype: str
        """
        return self._field_value

    @field_value.setter
    def field_value(self, field_value):
        """Sets the field_value of this InvoiceResponseCondition.

        The (error) value of the field.

        :param field_value: The field_value of this InvoiceResponseCondition.
        :type field_value: str
        """
        if field_value is None:
            raise ValueError("Invalid value for `field_value`, must not be `None`")

        self._field_value = field_value
