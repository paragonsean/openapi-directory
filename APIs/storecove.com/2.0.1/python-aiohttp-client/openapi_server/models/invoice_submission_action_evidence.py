# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvoiceSubmissionActionEvidence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, receiver_response: str=None, transmission_datetime: str=None, transmission_result: str=None, transmission_type: str=None, transmitted_document: str=None):
        """InvoiceSubmissionActionEvidence - a model defined in OpenAPI

        :param receiver_response: The receiver_response of this InvoiceSubmissionActionEvidence.
        :param transmission_datetime: The transmission_datetime of this InvoiceSubmissionActionEvidence.
        :param transmission_result: The transmission_result of this InvoiceSubmissionActionEvidence.
        :param transmission_type: The transmission_type of this InvoiceSubmissionActionEvidence.
        :param transmitted_document: The transmitted_document of this InvoiceSubmissionActionEvidence.
        """
        self.openapi_types = {
            'receiver_response': str,
            'transmission_datetime': str,
            'transmission_result': str,
            'transmission_type': str,
            'transmitted_document': str
        }

        self.attribute_map = {
            'receiver_response': 'receiver_response',
            'transmission_datetime': 'transmission_datetime',
            'transmission_result': 'transmission_result',
            'transmission_type': 'transmission_type',
            'transmitted_document': 'transmitted_document'
        }

        self._receiver_response = receiver_response
        self._transmission_datetime = transmission_datetime
        self._transmission_result = transmission_result
        self._transmission_type = transmission_type
        self._transmitted_document = transmitted_document

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceSubmissionActionEvidence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceSubmissionActionEvidence of this InvoiceSubmissionActionEvidence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def receiver_response(self):
        """Gets the receiver_response of this InvoiceSubmissionActionEvidence.

        The response the receiver sent.

        :return: The receiver_response of this InvoiceSubmissionActionEvidence.
        :rtype: str
        """
        return self._receiver_response

    @receiver_response.setter
    def receiver_response(self, receiver_response):
        """Sets the receiver_response of this InvoiceSubmissionActionEvidence.

        The response the receiver sent.

        :param receiver_response: The receiver_response of this InvoiceSubmissionActionEvidence.
        :type receiver_response: str
        """

        self._receiver_response = receiver_response

    @property
    def transmission_datetime(self):
        """Gets the transmission_datetime of this InvoiceSubmissionActionEvidence.

        The DateTime of the transmission, as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z.

        :return: The transmission_datetime of this InvoiceSubmissionActionEvidence.
        :rtype: str
        """
        return self._transmission_datetime

    @transmission_datetime.setter
    def transmission_datetime(self, transmission_datetime):
        """Sets the transmission_datetime of this InvoiceSubmissionActionEvidence.

        The DateTime of the transmission, as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z.

        :param transmission_datetime: The transmission_datetime of this InvoiceSubmissionActionEvidence.
        :type transmission_datetime: str
        """

        self._transmission_datetime = transmission_datetime

    @property
    def transmission_result(self):
        """Gets the transmission_result of this InvoiceSubmissionActionEvidence.

        The result of this transmission.

        :return: The transmission_result of this InvoiceSubmissionActionEvidence.
        :rtype: str
        """
        return self._transmission_result

    @transmission_result.setter
    def transmission_result(self, transmission_result):
        """Sets the transmission_result of this InvoiceSubmissionActionEvidence.

        The result of this transmission.

        :param transmission_result: The transmission_result of this InvoiceSubmissionActionEvidence.
        :type transmission_result: str
        """
        allowed_values = ["unknown", "accepted", "rejected", "send_error", "internal_error"]  # noqa: E501
        if transmission_result not in allowed_values:
            raise ValueError(
                "Invalid value for `transmission_result` ({0}), must be one of {1}"
                .format(transmission_result, allowed_values)
            )

        self._transmission_result = transmission_result

    @property
    def transmission_type(self):
        """Gets the transmission_type of this InvoiceSubmissionActionEvidence.

        How the document was transmitted.

        :return: The transmission_type of this InvoiceSubmissionActionEvidence.
        :rtype: str
        """
        return self._transmission_type

    @transmission_type.setter
    def transmission_type(self, transmission_type):
        """Sets the transmission_type of this InvoiceSubmissionActionEvidence.

        How the document was transmitted.

        :param transmission_type: The transmission_type of this InvoiceSubmissionActionEvidence.
        :type transmission_type: str
        """
        allowed_values = ["email", "edi", "as2", "peppol", "sandbox"]  # noqa: E501
        if transmission_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transmission_type` ({0}), must be one of {1}"
                .format(transmission_type, allowed_values)
            )

        self._transmission_type = transmission_type

    @property
    def transmitted_document(self):
        """Gets the transmitted_document of this InvoiceSubmissionActionEvidence.

        The document that was transmitted.

        :return: The transmitted_document of this InvoiceSubmissionActionEvidence.
        :rtype: str
        """
        return self._transmitted_document

    @transmitted_document.setter
    def transmitted_document(self, transmitted_document):
        """Sets the transmitted_document of this InvoiceSubmissionActionEvidence.

        The document that was transmitted.

        :param transmitted_document: The transmitted_document of this InvoiceSubmissionActionEvidence.
        :type transmitted_document: str
        """

        self._transmitted_document = transmitted_document
