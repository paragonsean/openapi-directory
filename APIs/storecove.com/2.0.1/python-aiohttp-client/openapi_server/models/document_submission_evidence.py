# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_submission_evidence_document import DocumentSubmissionEvidenceDocument
from openapi_server.models.document_submission_evidence_evidence import DocumentSubmissionEvidenceEvidence
from openapi_server import util


class DocumentSubmissionEvidence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, documents: List[DocumentSubmissionEvidenceDocument]=None, evidence: DocumentSubmissionEvidenceEvidence=None, network: str=None, receiver: str=None, sender: str=None):
        """DocumentSubmissionEvidence - a model defined in OpenAPI

        :param documents: The documents of this DocumentSubmissionEvidence.
        :param evidence: The evidence of this DocumentSubmissionEvidence.
        :param network: The network of this DocumentSubmissionEvidence.
        :param receiver: The receiver of this DocumentSubmissionEvidence.
        :param sender: The sender of this DocumentSubmissionEvidence.
        """
        self.openapi_types = {
            'documents': List[DocumentSubmissionEvidenceDocument],
            'evidence': DocumentSubmissionEvidenceEvidence,
            'network': str,
            'receiver': str,
            'sender': str
        }

        self.attribute_map = {
            'documents': 'documents',
            'evidence': 'evidence',
            'network': 'network',
            'receiver': 'receiver',
            'sender': 'sender'
        }

        self._documents = documents
        self._evidence = evidence
        self._network = network
        self._receiver = receiver
        self._sender = sender

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentSubmissionEvidence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentSubmissionEvidence of this DocumentSubmissionEvidence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def documents(self):
        """Gets the documents of this DocumentSubmissionEvidence.

        An array of documents that were sent. For OpenPeppol, this is always a single document (it may contain a PDF inside). For Email, the number of documents depends on the number of attachments, which in turn depends on the country of the receiver. For email, the raw email in RFC822 format is also included.

        :return: The documents of this DocumentSubmissionEvidence.
        :rtype: List[DocumentSubmissionEvidenceDocument]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this DocumentSubmissionEvidence.

        An array of documents that were sent. For OpenPeppol, this is always a single document (it may contain a PDF inside). For Email, the number of documents depends on the number of attachments, which in turn depends on the country of the receiver. For email, the raw email in RFC822 format is also included.

        :param documents: The documents of this DocumentSubmissionEvidence.
        :type documents: List[DocumentSubmissionEvidenceDocument]
        """

        self._documents = documents

    @property
    def evidence(self):
        """Gets the evidence of this DocumentSubmissionEvidence.


        :return: The evidence of this DocumentSubmissionEvidence.
        :rtype: DocumentSubmissionEvidenceEvidence
        """
        return self._evidence

    @evidence.setter
    def evidence(self, evidence):
        """Sets the evidence of this DocumentSubmissionEvidence.


        :param evidence: The evidence of this DocumentSubmissionEvidence.
        :type evidence: DocumentSubmissionEvidenceEvidence
        """

        self._evidence = evidence

    @property
    def network(self):
        """Gets the network of this DocumentSubmissionEvidence.

        The exchange network that was used to send the document

        :return: The network of this DocumentSubmissionEvidence.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this DocumentSubmissionEvidence.

        The exchange network that was used to send the document

        :param network: The network of this DocumentSubmissionEvidence.
        :type network: str
        """
        allowed_values = ["as2", "email", "peppol", "sdi"]  # noqa: E501
        if network not in allowed_values:
            raise ValueError(
                "Invalid value for `network` ({0}), must be one of {1}"
                .format(network, allowed_values)
            )

        self._network = network

    @property
    def receiver(self):
        """Gets the receiver of this DocumentSubmissionEvidence.

        The legal identifier of the receiver, or the tax identifier if there is no legal identifier.

        :return: The receiver of this DocumentSubmissionEvidence.
        :rtype: str
        """
        return self._receiver

    @receiver.setter
    def receiver(self, receiver):
        """Sets the receiver of this DocumentSubmissionEvidence.

        The legal identifier of the receiver, or the tax identifier if there is no legal identifier.

        :param receiver: The receiver of this DocumentSubmissionEvidence.
        :type receiver: str
        """

        self._receiver = receiver

    @property
    def sender(self):
        """Gets the sender of this DocumentSubmissionEvidence.

        The legal identifier of the sender, or the tax identifier if there is no legal identifier.

        :return: The sender of this DocumentSubmissionEvidence.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this DocumentSubmissionEvidence.

        The legal identifier of the sender, or the tax identifier if there is no legal identifier.

        :param sender: The sender of this DocumentSubmissionEvidence.
        :type sender: str
        """

        self._sender = sender
