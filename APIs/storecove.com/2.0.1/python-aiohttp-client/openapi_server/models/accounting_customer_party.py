# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.party import Party
from openapi_server.models.public_identifier import PublicIdentifier
from openapi_server import util


class AccountingCustomerParty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, party: Party=None, public_identifiers: List[PublicIdentifier]=None):
        """AccountingCustomerParty - a model defined in OpenAPI

        :param party: The party of this AccountingCustomerParty.
        :param public_identifiers: The public_identifiers of this AccountingCustomerParty.
        """
        self.openapi_types = {
            'party': Party,
            'public_identifiers': List[PublicIdentifier]
        }

        self.attribute_map = {
            'party': 'party',
            'public_identifiers': 'publicIdentifiers'
        }

        self._party = party
        self._public_identifiers = public_identifiers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountingCustomerParty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountingCustomerParty of this AccountingCustomerParty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def party(self):
        """Gets the party of this AccountingCustomerParty.


        :return: The party of this AccountingCustomerParty.
        :rtype: Party
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this AccountingCustomerParty.


        :param party: The party of this AccountingCustomerParty.
        :type party: Party
        """
        if party is None:
            raise ValueError("Invalid value for `party`, must not be `None`")

        self._party = party

    @property
    def public_identifiers(self):
        """Gets the public_identifiers of this AccountingCustomerParty.

        A list of legal and tax identifiers for this customer.

        :return: The public_identifiers of this AccountingCustomerParty.
        :rtype: List[PublicIdentifier]
        """
        return self._public_identifiers

    @public_identifiers.setter
    def public_identifiers(self, public_identifiers):
        """Sets the public_identifiers of this AccountingCustomerParty.

        A list of legal and tax identifiers for this customer.

        :param public_identifiers: The public_identifiers of this AccountingCustomerParty.
        :type public_identifiers: List[PublicIdentifier]
        """

        self._public_identifiers = public_identifiers
