# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RawDocumentData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document: str=None, document_type_id: str=None, parse: bool=True, parse_strategy: str=None, process_id: str=None):
        """RawDocumentData - a model defined in OpenAPI

        :param document: The document of this RawDocumentData.
        :param document_type_id: The document_type_id of this RawDocumentData.
        :param parse: The parse of this RawDocumentData.
        :param parse_strategy: The parse_strategy of this RawDocumentData.
        :param process_id: The process_id of this RawDocumentData.
        """
        self.openapi_types = {
            'document': str,
            'document_type_id': str,
            'parse': bool,
            'parse_strategy': str,
            'process_id': str
        }

        self.attribute_map = {
            'document': 'document',
            'document_type_id': 'documentTypeId',
            'parse': 'parse',
            'parse_strategy': 'parseStrategy',
            'process_id': 'processId'
        }

        self._document = document
        self._document_type_id = document_type_id
        self._parse = parse
        self._parse_strategy = parse_strategy
        self._process_id = process_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RawDocumentData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RawDocumentData of this RawDocumentData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document(self):
        """Gets the document of this RawDocumentData.

        The base64 encoded version of the document.

        :return: The document of this RawDocumentData.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this RawDocumentData.

        The base64 encoded version of the document.

        :param document: The document of this RawDocumentData.
        :type document: str
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")
        if document is not None and len(document) < 5:
            raise ValueError("Invalid value for `document`, length must be greater than or equal to `5`")

        self._document = document

    @property
    def document_type_id(self):
        """Gets the document_type_id of this RawDocumentData.

        The document type id of the document. Required when parse == false.

        :return: The document_type_id of this RawDocumentData.
        :rtype: str
        """
        return self._document_type_id

    @document_type_id.setter
    def document_type_id(self, document_type_id):
        """Sets the document_type_id of this RawDocumentData.

        The document type id of the document. Required when parse == false.

        :param document_type_id: The document_type_id of this RawDocumentData.
        :type document_type_id: str
        """

        self._document_type_id = document_type_id

    @property
    def parse(self):
        """Gets the parse of this RawDocumentData.

        *** NOTE: only parse == true is currently supported *** *** NOTE: parsing is only supported for documentType == 'invoice' *** Whether or not to parse the document. If true, the data will be extracted from the document and used to construct a new document. If false, the document will be sent as is. In this case, you must ensure the document validates without any errors against the relevant validation artifacts for that processId/documentTypeId. We automatically apply updates of the validation artificats, respecting the grace period provided by the issuer. During that period, documents that validate against either the old as well as against the new artifacts are accepted. After the grace period, your document must validate against the new artifacts. You are also responsible for making sure your receiver is able to receive the updated document.

        :return: The parse of this RawDocumentData.
        :rtype: bool
        """
        return self._parse

    @parse.setter
    def parse(self, parse):
        """Sets the parse of this RawDocumentData.

        *** NOTE: only parse == true is currently supported *** *** NOTE: parsing is only supported for documentType == 'invoice' *** Whether or not to parse the document. If true, the data will be extracted from the document and used to construct a new document. If false, the document will be sent as is. In this case, you must ensure the document validates without any errors against the relevant validation artifacts for that processId/documentTypeId. We automatically apply updates of the validation artificats, respecting the grace period provided by the issuer. During that period, documents that validate against either the old as well as against the new artifacts are accepted. After the grace period, your document must validate against the new artifacts. You are also responsible for making sure your receiver is able to receive the updated document.

        :param parse: The parse of this RawDocumentData.
        :type parse: bool
        """

        self._parse = parse

    @property
    def parse_strategy(self):
        """Gets the parse_strategy of this RawDocumentData.

        How to parse the document. Only needed when parse == true.

        :return: The parse_strategy of this RawDocumentData.
        :rtype: str
        """
        return self._parse_strategy

    @parse_strategy.setter
    def parse_strategy(self, parse_strategy):
        """Sets the parse_strategy of this RawDocumentData.

        How to parse the document. Only needed when parse == true.

        :param parse_strategy: The parse_strategy of this RawDocumentData.
        :type parse_strategy: str
        """
        allowed_values = ["ubl", "cii", "idoc"]  # noqa: E501
        if parse_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `parse_strategy` ({0}), must be one of {1}"
                .format(parse_strategy, allowed_values)
            )

        self._parse_strategy = parse_strategy

    @property
    def process_id(self):
        """Gets the process_id of this RawDocumentData.

        The process id of the document. Required when parse == false.

        :return: The process_id of this RawDocumentData.
        :rtype: str
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """Sets the process_id of this RawDocumentData.

        The process id of the document. Required when parse == false.

        :param process_id: The process_id of this RawDocumentData.
        :type process_id: str
        """

        self._process_id = process_id
