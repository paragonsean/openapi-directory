# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, building_number: str=None, city: str=None, country: str=None, county: str=None, department: str=None, id: str=None, line1: str=None, line2: str=None, neighborhood: str=None, scheme_id: str=None, secondary_number: str=None, zip: str=None):
        """Location - a model defined in OpenAPI

        :param building_number: The building_number of this Location.
        :param city: The city of this Location.
        :param country: The country of this Location.
        :param county: The county of this Location.
        :param department: The department of this Location.
        :param id: The id of this Location.
        :param line1: The line1 of this Location.
        :param line2: The line2 of this Location.
        :param neighborhood: The neighborhood of this Location.
        :param scheme_id: The scheme_id of this Location.
        :param secondary_number: The secondary_number of this Location.
        :param zip: The zip of this Location.
        """
        self.openapi_types = {
            'building_number': str,
            'city': str,
            'country': str,
            'county': str,
            'department': str,
            'id': str,
            'line1': str,
            'line2': str,
            'neighborhood': str,
            'scheme_id': str,
            'secondary_number': str,
            'zip': str
        }

        self.attribute_map = {
            'building_number': 'building_number',
            'city': 'city',
            'country': 'country',
            'county': 'county',
            'department': 'department',
            'id': 'id',
            'line1': 'line1',
            'line2': 'line2',
            'neighborhood': 'neighborhood',
            'scheme_id': 'scheme_id',
            'secondary_number': 'secondary_number',
            'zip': 'zip'
        }

        self._building_number = building_number
        self._city = city
        self._country = country
        self._county = county
        self._department = department
        self._id = id
        self._line1 = line1
        self._line2 = line2
        self._neighborhood = neighborhood
        self._scheme_id = scheme_id
        self._secondary_number = secondary_number
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def building_number(self):
        """Gets the building_number of this Location.

        The building number. Used in SA.

        :return: The building_number of this Location.
        :rtype: str
        """
        return self._building_number

    @building_number.setter
    def building_number(self, building_number):
        """Sets the building_number of this Location.

        The building number. Used in SA.

        :param building_number: The building_number of this Location.
        :type building_number: str
        """

        self._building_number = building_number

    @property
    def city(self):
        """Gets the city of this Location.

        Address city.

        :return: The city of this Location.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Location.

        Address city.

        :param city: The city of this Location.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Location.

        Address country.

        :return: The country of this Location.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Location.

        Address country.

        :param country: The country of this Location.
        :type country: str
        """

        self._country = country

    @property
    def county(self):
        """Gets the county of this Location.

        Address county.

        :return: The county of this Location.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this Location.

        Address county.

        :param county: The county of this Location.
        :type county: str
        """

        self._county = county

    @property
    def department(self):
        """Gets the department of this Location.

        Department name.

        :return: The department of this Location.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Location.

        Department name.

        :param department: The department of this Location.
        :type department: str
        """

        self._department = department

    @property
    def id(self):
        """Gets the id of this Location.

        The id of the location.

        :return: The id of this Location.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Location.

        The id of the location.

        :param id: The id of this Location.
        :type id: str
        """

        self._id = id

    @property
    def line1(self):
        """Gets the line1 of this Location.

        Address line 1.

        :return: The line1 of this Location.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this Location.

        Address line 1.

        :param line1: The line1 of this Location.
        :type line1: str
        """

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this Location.

        Address line 2.

        :return: The line2 of this Location.
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this Location.

        Address line 2.

        :param line2: The line2 of this Location.
        :type line2: str
        """

        self._line2 = line2

    @property
    def neighborhood(self):
        """Gets the neighborhood of this Location.

        The neighborhood. Used in SA.

        :return: The neighborhood of this Location.
        :rtype: str
        """
        return self._neighborhood

    @neighborhood.setter
    def neighborhood(self, neighborhood):
        """Sets the neighborhood of this Location.

        The neighborhood. Used in SA.

        :param neighborhood: The neighborhood of this Location.
        :type neighborhood: str
        """

        self._neighborhood = neighborhood

    @property
    def scheme_id(self):
        """Gets the scheme_id of this Location.

        The scheme id for the id of the location.

        :return: The scheme_id of this Location.
        :rtype: str
        """
        return self._scheme_id

    @scheme_id.setter
    def scheme_id(self, scheme_id):
        """Sets the scheme_id of this Location.

        The scheme id for the id of the location.

        :param scheme_id: The scheme_id of this Location.
        :type scheme_id: str
        """

        self._scheme_id = scheme_id

    @property
    def secondary_number(self):
        """Gets the secondary_number of this Location.

        The secondary number. Used in SA.

        :return: The secondary_number of this Location.
        :rtype: str
        """
        return self._secondary_number

    @secondary_number.setter
    def secondary_number(self, secondary_number):
        """Sets the secondary_number of this Location.

        The secondary number. Used in SA.

        :param secondary_number: The secondary_number of this Location.
        :type secondary_number: str
        """

        self._secondary_number = secondary_number

    @property
    def zip(self):
        """Gets the zip of this Location.

        Address zip code

        :return: The zip of this Location.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Location.

        Address zip code

        :param zip: The zip of this Location.
        :type zip: str
        """

        self._zip = zip
