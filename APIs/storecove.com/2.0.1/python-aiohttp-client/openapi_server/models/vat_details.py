# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VATDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, country: str=None, percentage: float=None):
        """VATDetails - a model defined in OpenAPI

        :param amount: The amount of this VATDetails.
        :param country: The country of this VATDetails.
        :param percentage: The percentage of this VATDetails.
        """
        self.openapi_types = {
            'amount': float,
            'country': str,
            'percentage': float
        }

        self.attribute_map = {
            'amount': 'amount',
            'country': 'country',
            'percentage': 'percentage'
        }

        self._amount = amount
        self._country = country
        self._percentage = percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VATDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VAT_Details of this VATDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this VATDetails.

        The amount of VAT for the invoice line.

        :return: The amount of this VATDetails.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this VATDetails.

        The amount of VAT for the invoice line.

        :param amount: The amount of this VATDetails.
        :type amount: float
        """

        self._amount = amount

    @property
    def country(self):
        """Gets the country of this VATDetails.

        The ISO 3166 country of the VAT for the invoice line.

        :return: The country of this VATDetails.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this VATDetails.

        The ISO 3166 country of the VAT for the invoice line.

        :param country: The country of this VATDetails.
        :type country: str
        """

        self._country = country

    @property
    def percentage(self):
        """Gets the percentage of this VATDetails.

        The percentage of VAT for the invoice line.

        :return: The percentage of this VATDetails.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this VATDetails.

        The percentage of VAT for the invoice line.

        :param percentage: The percentage of this VATDetails.
        :type percentage: float
        """

        self._percentage = percentage
