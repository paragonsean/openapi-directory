# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvoiceData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conversion_strategy: str=None, document: str=None):
        """InvoiceData - a model defined in OpenAPI

        :param conversion_strategy: The conversion_strategy of this InvoiceData.
        :param document: The document of this InvoiceData.
        """
        self.openapi_types = {
            'conversion_strategy': str,
            'document': str
        }

        self.attribute_map = {
            'conversion_strategy': 'conversionStrategy',
            'document': 'document'
        }

        self._conversion_strategy = conversion_strategy
        self._document = document

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceData of this InvoiceData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conversion_strategy(self):
        """Gets the conversion_strategy of this InvoiceData.

        How to interpret the document.

        :return: The conversion_strategy of this InvoiceData.
        :rtype: str
        """
        return self._conversion_strategy

    @conversion_strategy.setter
    def conversion_strategy(self, conversion_strategy):
        """Sets the conversion_strategy of this InvoiceData.

        How to interpret the document.

        :param conversion_strategy: The conversion_strategy of this InvoiceData.
        :type conversion_strategy: str
        """
        allowed_values = ["ubl", "cii", "idoc"]  # noqa: E501
        if conversion_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `conversion_strategy` ({0}), must be one of {1}"
                .format(conversion_strategy, allowed_values)
            )

        self._conversion_strategy = conversion_strategy

    @property
    def document(self):
        """Gets the document of this InvoiceData.

        The base64 encoded version of the document.

        :return: The document of this InvoiceData.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this InvoiceData.

        The base64 encoded version of the document.

        :param document: The document of this InvoiceData.
        :type document: str
        """
        if document is not None and len(document) < 5:
            raise ValueError("Invalid value for `document`, length must be greater than or equal to `5`")

        self._document = document
