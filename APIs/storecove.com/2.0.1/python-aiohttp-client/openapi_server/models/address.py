# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country import Country
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: Country=None, county: str=None, street1: str=None, street2: str=None, zip: str=None):
        """Address - a model defined in OpenAPI

        :param city: The city of this Address.
        :param country: The country of this Address.
        :param county: The county of this Address.
        :param street1: The street1 of this Address.
        :param street2: The street2 of this Address.
        :param zip: The zip of this Address.
        """
        self.openapi_types = {
            'city': str,
            'country': Country,
            'county': str,
            'street1': str,
            'street2': str,
            'zip': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'county': 'county',
            'street1': 'street1',
            'street2': 'street2',
            'zip': 'zip'
        }

        self._city = city
        self._country = country
        self._county = county
        self._street1 = street1
        self._street2 = street2
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Address.

        The name of the city. Mandatory in most countries.

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        The name of the city. Mandatory in most countries.

        :param city: The city of this Address.
        :type city: str
        """
        if city is not None and len(city) < 2:
            raise ValueError("Invalid value for `city`, length must be greater than or equal to `2`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this Address.


        :return: The country of this Address.
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.


        :param country: The country of this Address.
        :type country: Country
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def county(self):
        """Gets the county of this Address.

        An optional county name.

        :return: The county of this Address.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this Address.

        An optional county name.

        :param county: The county of this Address.
        :type county: str
        """

        self._county = county

    @property
    def street1(self):
        """Gets the street1 of this Address.

        The street name and number. Mandatory in most countries.

        :return: The street1 of this Address.
        :rtype: str
        """
        return self._street1

    @street1.setter
    def street1(self, street1):
        """Sets the street1 of this Address.

        The street name and number. Mandatory in most countries.

        :param street1: The street1 of this Address.
        :type street1: str
        """
        if street1 is not None and len(street1) < 2:
            raise ValueError("Invalid value for `street1`, length must be greater than or equal to `2`")

        self._street1 = street1

    @property
    def street2(self):
        """Gets the street2 of this Address.

        The second street field. Use this if you used the first field for the building name.

        :return: The street2 of this Address.
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """Sets the street2 of this Address.

        The second street field. Use this if you used the first field for the building name.

        :param street2: The street2 of this Address.
        :type street2: str
        """

        self._street2 = street2

    @property
    def zip(self):
        """Gets the zip of this Address.

        The zipcode/postalzone. Mandatory unless the country does not have zip codes.

        :return: The zip of this Address.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Address.

        The zipcode/postalzone. Mandatory unless the country does not have zip codes.

        :param zip: The zip of this Address.
        :type zip: str
        """
        if zip is not None and len(zip) < 2:
            raise ValueError("Invalid value for `zip`, length must be greater than or equal to `2`")

        self._zip = zip
