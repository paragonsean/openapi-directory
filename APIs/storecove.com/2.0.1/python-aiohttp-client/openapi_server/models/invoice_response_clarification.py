# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invoice_response_condition import InvoiceResponseCondition
from openapi_server import util


class InvoiceResponseClarification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clarification: str=None, clarification_code: str=None, clarification_code_type: str=None, conditions: List[InvoiceResponseCondition]=None):
        """InvoiceResponseClarification - a model defined in OpenAPI

        :param clarification: The clarification of this InvoiceResponseClarification.
        :param clarification_code: The clarification_code of this InvoiceResponseClarification.
        :param clarification_code_type: The clarification_code_type of this InvoiceResponseClarification.
        :param conditions: The conditions of this InvoiceResponseClarification.
        """
        self.openapi_types = {
            'clarification': str,
            'clarification_code': str,
            'clarification_code_type': str,
            'conditions': List[InvoiceResponseCondition]
        }

        self.attribute_map = {
            'clarification': 'clarification',
            'clarification_code': 'clarificationCode',
            'clarification_code_type': 'clarificationCodeType',
            'conditions': 'conditions'
        }

        self._clarification = clarification
        self._clarification_code = clarification_code
        self._clarification_code_type = clarification_code_type
        self._conditions = conditions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceResponseClarification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceResponseClarification of this InvoiceResponseClarification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clarification(self):
        """Gets the clarification of this InvoiceResponseClarification.

        A textual description of the clarification

        :return: The clarification of this InvoiceResponseClarification.
        :rtype: str
        """
        return self._clarification

    @clarification.setter
    def clarification(self, clarification):
        """Sets the clarification of this InvoiceResponseClarification.

        A textual description of the clarification

        :param clarification: The clarification of this InvoiceResponseClarification.
        :type clarification: str
        """

        self._clarification = clarification

    @property
    def clarification_code(self):
        """Gets the clarification_code of this InvoiceResponseClarification.

        The code for the clarification. For details see https://docs.peppol.eu/poacc/upgrade-3/codelist/OPStatusReason/ and https://docs.peppol.eu/poacc/upgrade-3/codelist/OPStatusAction/

        :return: The clarification_code of this InvoiceResponseClarification.
        :rtype: str
        """
        return self._clarification_code

    @clarification_code.setter
    def clarification_code(self, clarification_code):
        """Sets the clarification_code of this InvoiceResponseClarification.

        The code for the clarification. For details see https://docs.peppol.eu/poacc/upgrade-3/codelist/OPStatusReason/ and https://docs.peppol.eu/poacc/upgrade-3/codelist/OPStatusAction/

        :param clarification_code: The clarification_code of this InvoiceResponseClarification.
        :type clarification_code: str
        """
        allowed_values = ["NON", "REF", "LEG", "REC", "QUA", "DEL", "PRI", "QTY", "ITM", "PAY", "UNR", "FIN", "PPD", "OTH", "NOA", "PIN", "NIN", "CNF", "CNP", "CNA"]  # noqa: E501
        if clarification_code not in allowed_values:
            raise ValueError(
                "Invalid value for `clarification_code` ({0}), must be one of {1}"
                .format(clarification_code, allowed_values)
            )

        self._clarification_code = clarification_code

    @property
    def clarification_code_type(self):
        """Gets the clarification_code_type of this InvoiceResponseClarification.

        The type of the clarification.

        :return: The clarification_code_type of this InvoiceResponseClarification.
        :rtype: str
        """
        return self._clarification_code_type

    @clarification_code_type.setter
    def clarification_code_type(self, clarification_code_type):
        """Sets the clarification_code_type of this InvoiceResponseClarification.

        The type of the clarification.

        :param clarification_code_type: The clarification_code_type of this InvoiceResponseClarification.
        :type clarification_code_type: str
        """
        allowed_values = ["OPStatusReason", "OPStatusAction"]  # noqa: E501
        if clarification_code_type not in allowed_values:
            raise ValueError(
                "Invalid value for `clarification_code_type` ({0}), must be one of {1}"
                .format(clarification_code_type, allowed_values)
            )

        self._clarification_code_type = clarification_code_type

    @property
    def conditions(self):
        """Gets the conditions of this InvoiceResponseClarification.

        A list of conditions that triggered the error. This is only included for receiving in webhooks. You cannot currently send these conditions.

        :return: The conditions of this InvoiceResponseClarification.
        :rtype: List[InvoiceResponseCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this InvoiceResponseClarification.

        A list of conditions that triggered the error. This is only included for receiving in webhooks. You cannot currently send these conditions.

        :param conditions: The conditions of this InvoiceResponseClarification.
        :type conditions: List[InvoiceResponseCondition]
        """
        if conditions is not None and len(conditions) < 0:
            raise ValueError("Invalid value for `conditions`, number of items must be greater than or equal to `0`")

        self._conditions = conditions
