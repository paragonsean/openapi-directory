# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Contact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str=None, id: str=None, last_name: str=None, phone: str=None):
        """Contact - a model defined in OpenAPI

        :param email: The email of this Contact.
        :param first_name: The first_name of this Contact.
        :param id: The id of this Contact.
        :param last_name: The last_name of this Contact.
        :param phone: The phone of this Contact.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'id': str,
            'last_name': str,
            'phone': str
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'firstName',
            'id': 'id',
            'last_name': 'lastName',
            'phone': 'phone'
        }

        self._email = email
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact of this Contact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Contact.


        :return: The email of this Contact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Contact.


        :param email: The email of this Contact.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Contact.


        :return: The first_name of this Contact.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Contact.


        :param first_name: The first_name of this Contact.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Contact.

        Only supported for AccountingCustomerParty.

        :return: The id of this Contact.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Contact.

        Only supported for AccountingCustomerParty.

        :param id: The id of this Contact.
        :type id: str
        """
        if id is not None and len(id) > 20:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `20`")

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this Contact.


        :return: The last_name of this Contact.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Contact.


        :param last_name: The last_name of this Contact.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this Contact.


        :return: The phone of this Contact.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Contact.


        :param phone: The phone of this Contact.
        :type phone: str
        """
        if phone is not None and len(phone) > 24:
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `24`")

        self._phone = phone
