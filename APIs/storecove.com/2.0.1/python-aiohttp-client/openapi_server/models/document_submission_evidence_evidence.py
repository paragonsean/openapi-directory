# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocumentSubmissionEvidenceEvidence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_id: str=None, receiving_accesspoint: str=None, remote_mta_ip: str=None, reporting_mta: str=None, smtp_response: str=None, timestamp: str=None, transmission_id: str=None, xml: str=None):
        """DocumentSubmissionEvidenceEvidence - a model defined in OpenAPI

        :param message_id: The message_id of this DocumentSubmissionEvidenceEvidence.
        :param receiving_accesspoint: The receiving_accesspoint of this DocumentSubmissionEvidenceEvidence.
        :param remote_mta_ip: The remote_mta_ip of this DocumentSubmissionEvidenceEvidence.
        :param reporting_mta: The reporting_mta of this DocumentSubmissionEvidenceEvidence.
        :param smtp_response: The smtp_response of this DocumentSubmissionEvidenceEvidence.
        :param timestamp: The timestamp of this DocumentSubmissionEvidenceEvidence.
        :param transmission_id: The transmission_id of this DocumentSubmissionEvidenceEvidence.
        :param xml: The xml of this DocumentSubmissionEvidenceEvidence.
        """
        self.openapi_types = {
            'message_id': str,
            'receiving_accesspoint': str,
            'remote_mta_ip': str,
            'reporting_mta': str,
            'smtp_response': str,
            'timestamp': str,
            'transmission_id': str,
            'xml': str
        }

        self.attribute_map = {
            'message_id': 'message_id',
            'receiving_accesspoint': 'receiving_accesspoint',
            'remote_mta_ip': 'remote_mta_ip',
            'reporting_mta': 'reporting_mta',
            'smtp_response': 'smtp_response',
            'timestamp': 'timestamp',
            'transmission_id': 'transmission_id',
            'xml': 'xml'
        }

        self._message_id = message_id
        self._receiving_accesspoint = receiving_accesspoint
        self._remote_mta_ip = remote_mta_ip
        self._reporting_mta = reporting_mta
        self._smtp_response = smtp_response
        self._timestamp = timestamp
        self._transmission_id = transmission_id
        self._xml = xml

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentSubmissionEvidenceEvidence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentSubmissionEvidenceEvidence of this DocumentSubmissionEvidenceEvidence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_id(self):
        """Gets the message_id of this DocumentSubmissionEvidenceEvidence.

        The unique message id used in the OpenPeppol SBDH.

        :return: The message_id of this DocumentSubmissionEvidenceEvidence.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this DocumentSubmissionEvidenceEvidence.

        The unique message id used in the OpenPeppol SBDH.

        :param message_id: The message_id of this DocumentSubmissionEvidenceEvidence.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def receiving_accesspoint(self):
        """Gets the receiving_accesspoint of this DocumentSubmissionEvidenceEvidence.

        An identification of the OpenPeppol accesspoint that the invoice was sent to.

        :return: The receiving_accesspoint of this DocumentSubmissionEvidenceEvidence.
        :rtype: str
        """
        return self._receiving_accesspoint

    @receiving_accesspoint.setter
    def receiving_accesspoint(self, receiving_accesspoint):
        """Sets the receiving_accesspoint of this DocumentSubmissionEvidenceEvidence.

        An identification of the OpenPeppol accesspoint that the invoice was sent to.

        :param receiving_accesspoint: The receiving_accesspoint of this DocumentSubmissionEvidenceEvidence.
        :type receiving_accesspoint: str
        """

        self._receiving_accesspoint = receiving_accesspoint

    @property
    def remote_mta_ip(self):
        """Gets the remote_mta_ip of this DocumentSubmissionEvidenceEvidence.

        The IP address of the sending SMTP server.

        :return: The remote_mta_ip of this DocumentSubmissionEvidenceEvidence.
        :rtype: str
        """
        return self._remote_mta_ip

    @remote_mta_ip.setter
    def remote_mta_ip(self, remote_mta_ip):
        """Sets the remote_mta_ip of this DocumentSubmissionEvidenceEvidence.

        The IP address of the sending SMTP server.

        :param remote_mta_ip: The remote_mta_ip of this DocumentSubmissionEvidenceEvidence.
        :type remote_mta_ip: str
        """

        self._remote_mta_ip = remote_mta_ip

    @property
    def reporting_mta(self):
        """Gets the reporting_mta of this DocumentSubmissionEvidenceEvidence.

        An identification for the sending SMTP.

        :return: The reporting_mta of this DocumentSubmissionEvidenceEvidence.
        :rtype: str
        """
        return self._reporting_mta

    @reporting_mta.setter
    def reporting_mta(self, reporting_mta):
        """Sets the reporting_mta of this DocumentSubmissionEvidenceEvidence.

        An identification for the sending SMTP.

        :param reporting_mta: The reporting_mta of this DocumentSubmissionEvidenceEvidence.
        :type reporting_mta: str
        """

        self._reporting_mta = reporting_mta

    @property
    def smtp_response(self):
        """Gets the smtp_response of this DocumentSubmissionEvidenceEvidence.

        The response of the receiving SMTP server.

        :return: The smtp_response of this DocumentSubmissionEvidenceEvidence.
        :rtype: str
        """
        return self._smtp_response

    @smtp_response.setter
    def smtp_response(self, smtp_response):
        """Sets the smtp_response of this DocumentSubmissionEvidenceEvidence.

        The response of the receiving SMTP server.

        :param smtp_response: The smtp_response of this DocumentSubmissionEvidenceEvidence.
        :type smtp_response: str
        """

        self._smtp_response = smtp_response

    @property
    def timestamp(self):
        """Gets the timestamp of this DocumentSubmissionEvidenceEvidence.

        The timestamp of the delivery to the receiving SMTP server.

        :return: The timestamp of this DocumentSubmissionEvidenceEvidence.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DocumentSubmissionEvidenceEvidence.

        The timestamp of the delivery to the receiving SMTP server.

        :param timestamp: The timestamp of this DocumentSubmissionEvidenceEvidence.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def transmission_id(self):
        """Gets the transmission_id of this DocumentSubmissionEvidenceEvidence.

        The unique id for this OpenPeppol transmission.

        :return: The transmission_id of this DocumentSubmissionEvidenceEvidence.
        :rtype: str
        """
        return self._transmission_id

    @transmission_id.setter
    def transmission_id(self, transmission_id):
        """Sets the transmission_id of this DocumentSubmissionEvidenceEvidence.

        The unique id for this OpenPeppol transmission.

        :param transmission_id: The transmission_id of this DocumentSubmissionEvidenceEvidence.
        :type transmission_id: str
        """

        self._transmission_id = transmission_id

    @property
    def xml(self):
        """Gets the xml of this DocumentSubmissionEvidenceEvidence.

        The XML evidence for the transmission. This is the XML returned by the receiving OpenPeppol accesspoint.

        :return: The xml of this DocumentSubmissionEvidenceEvidence.
        :rtype: str
        """
        return self._xml

    @xml.setter
    def xml(self, xml):
        """Sets the xml of this DocumentSubmissionEvidenceEvidence.

        The XML evidence for the transmission. This is the XML returned by the receiving OpenPeppol accesspoint.

        :param xml: The xml of this DocumentSubmissionEvidenceEvidence.
        :type xml: str
        """

        self._xml = xml
