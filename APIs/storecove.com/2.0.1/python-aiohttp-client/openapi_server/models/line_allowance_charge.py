# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LineAllowanceCharge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_excluding_tax: float=None, base_amount_excluding_tax: float=None, reason: str=None, reason_code: str=None):
        """LineAllowanceCharge - a model defined in OpenAPI

        :param amount_excluding_tax: The amount_excluding_tax of this LineAllowanceCharge.
        :param base_amount_excluding_tax: The base_amount_excluding_tax of this LineAllowanceCharge.
        :param reason: The reason of this LineAllowanceCharge.
        :param reason_code: The reason_code of this LineAllowanceCharge.
        """
        self.openapi_types = {
            'amount_excluding_tax': float,
            'base_amount_excluding_tax': float,
            'reason': str,
            'reason_code': str
        }

        self.attribute_map = {
            'amount_excluding_tax': 'amountExcludingTax',
            'base_amount_excluding_tax': 'baseAmountExcludingTax',
            'reason': 'reason',
            'reason_code': 'reasonCode'
        }

        self._amount_excluding_tax = amount_excluding_tax
        self._base_amount_excluding_tax = base_amount_excluding_tax
        self._reason = reason
        self._reason_code = reason_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LineAllowanceCharge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LineAllowanceCharge of this LineAllowanceCharge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_excluding_tax(self):
        """Gets the amount_excluding_tax of this LineAllowanceCharge.

        The amount for the allowance or charge, excluding tax.

        :return: The amount_excluding_tax of this LineAllowanceCharge.
        :rtype: float
        """
        return self._amount_excluding_tax

    @amount_excluding_tax.setter
    def amount_excluding_tax(self, amount_excluding_tax):
        """Sets the amount_excluding_tax of this LineAllowanceCharge.

        The amount for the allowance or charge, excluding tax.

        :param amount_excluding_tax: The amount_excluding_tax of this LineAllowanceCharge.
        :type amount_excluding_tax: float
        """
        if amount_excluding_tax is None:
            raise ValueError("Invalid value for `amount_excluding_tax`, must not be `None`")

        self._amount_excluding_tax = amount_excluding_tax

    @property
    def base_amount_excluding_tax(self):
        """Gets the base_amount_excluding_tax of this LineAllowanceCharge.

        The base amount for the allowance or charge, excluding tax.

        :return: The base_amount_excluding_tax of this LineAllowanceCharge.
        :rtype: float
        """
        return self._base_amount_excluding_tax

    @base_amount_excluding_tax.setter
    def base_amount_excluding_tax(self, base_amount_excluding_tax):
        """Sets the base_amount_excluding_tax of this LineAllowanceCharge.

        The base amount for the allowance or charge, excluding tax.

        :param base_amount_excluding_tax: The base_amount_excluding_tax of this LineAllowanceCharge.
        :type base_amount_excluding_tax: float
        """

        self._base_amount_excluding_tax = base_amount_excluding_tax

    @property
    def reason(self):
        """Gets the reason of this LineAllowanceCharge.

        The reason for the allowance or charge, free text

        :return: The reason of this LineAllowanceCharge.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this LineAllowanceCharge.

        The reason for the allowance or charge, free text

        :param reason: The reason of this LineAllowanceCharge.
        :type reason: str
        """

        self._reason = reason

    @property
    def reason_code(self):
        """Gets the reason_code of this LineAllowanceCharge.

        Do not use. Contact Storecove first if you want to use this field.

        :return: The reason_code of this LineAllowanceCharge.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this LineAllowanceCharge.

        Do not use. Contact Storecove first if you want to use this field.

        :param reason_code: The reason_code of this LineAllowanceCharge.
        :type reason_code: str
        """

        self._reason_code = reason_code
