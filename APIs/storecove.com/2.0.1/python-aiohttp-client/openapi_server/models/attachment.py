# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Attachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, document: str=None, document_id: str=None, filename: str=None, mime_type: str=None, primary_image: bool=False):
        """Attachment - a model defined in OpenAPI

        :param description: The description of this Attachment.
        :param document: The document of this Attachment.
        :param document_id: The document_id of this Attachment.
        :param filename: The filename of this Attachment.
        :param mime_type: The mime_type of this Attachment.
        :param primary_image: The primary_image of this Attachment.
        """
        self.openapi_types = {
            'description': str,
            'document': str,
            'document_id': str,
            'filename': str,
            'mime_type': str,
            'primary_image': bool
        }

        self.attribute_map = {
            'description': 'description',
            'document': 'document',
            'document_id': 'documentId',
            'filename': 'filename',
            'mime_type': 'mimeType',
            'primary_image': 'primaryImage'
        }

        self._description = description
        self._document = document
        self._document_id = document_id
        self._filename = filename
        self._mime_type = mime_type
        self._primary_image = primary_image

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attachment of this Attachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Attachment.

        A description for the file attachment.

        :return: The description of this Attachment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Attachment.

        A description for the file attachment.

        :param description: The description of this Attachment.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")

        self._description = description

    @property
    def document(self):
        """Gets the document of this Attachment.

        The base64 encoded version of the document attachment.

        :return: The document of this Attachment.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this Attachment.

        The base64 encoded version of the document attachment.

        :param document: The document of this Attachment.
        :type document: str
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")
        if document is not None and len(document) < 5:
            raise ValueError("Invalid value for `document`, length must be greater than or equal to `5`")

        self._document = document

    @property
    def document_id(self):
        """Gets the document_id of this Attachment.

        An id for the file attachment.

        :return: The document_id of this Attachment.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this Attachment.

        An id for the file attachment.

        :param document_id: The document_id of this Attachment.
        :type document_id: str
        """
        if document_id is not None and len(document_id) > 64:
            raise ValueError("Invalid value for `document_id`, length must be less than or equal to `64`")

        self._document_id = document_id

    @property
    def filename(self):
        """Gets the filename of this Attachment.

        The name of the file attachment.

        :return: The filename of this Attachment.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Attachment.

        The name of the file attachment.

        :param filename: The filename of this Attachment.
        :type filename: str
        """
        if filename is not None and not re.search(r'^[a-zA-Z0-9]([a-zA-Z0-9._-]*[a-zA-Z0-9])?\.[a-zA-Z0-9_-]+$', filename):
            raise ValueError("Invalid value for `filename`, must be a follow pattern or equal to `/^[a-zA-Z0-9]([a-zA-Z0-9._-]*[a-zA-Z0-9])?\.[a-zA-Z0-9_-]+$/`")

        self._filename = filename

    @property
    def mime_type(self):
        """Gets the mime_type of this Attachment.

        The document attachment mime type. Currently only application/pdf is allowed.

        :return: The mime_type of this Attachment.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Attachment.

        The document attachment mime type. Currently only application/pdf is allowed.

        :param mime_type: The mime_type of this Attachment.
        :type mime_type: str
        """
        allowed_values = ["application/pdf"]  # noqa: E501
        if mime_type not in allowed_values:
            raise ValueError(
                "Invalid value for `mime_type` ({0}), must be one of {1}"
                .format(mime_type, allowed_values)
            )

        self._mime_type = mime_type

    @property
    def primary_image(self):
        """Gets the primary_image of this Attachment.

        Whether or not this document is a visual representation of the invoice data. Note that although this property is not yet deprecated, using value 'true' is discouraged, since the invoice data itself is leading, not the image, and including an image may lead to confusion. Peppol no longer allows including primary images.

        :return: The primary_image of this Attachment.
        :rtype: bool
        """
        return self._primary_image

    @primary_image.setter
    def primary_image(self, primary_image):
        """Sets the primary_image of this Attachment.

        Whether or not this document is a visual representation of the invoice data. Note that although this property is not yet deprecated, using value 'true' is discouraged, since the invoice data itself is leading, not the image, and including an image may lead to confusion. Peppol no longer allows including primary images.

        :param primary_image: The primary_image of this Attachment.
        :type primary_image: bool
        """

        self._primary_image = primary_image
