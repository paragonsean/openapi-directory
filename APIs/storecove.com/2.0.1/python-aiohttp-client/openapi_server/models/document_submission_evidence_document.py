# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocumentSubmissionEvidenceDocument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document: str=None, expires_at: str=None, mime_type: str=None):
        """DocumentSubmissionEvidenceDocument - a model defined in OpenAPI

        :param document: The document of this DocumentSubmissionEvidenceDocument.
        :param expires_at: The expires_at of this DocumentSubmissionEvidenceDocument.
        :param mime_type: The mime_type of this DocumentSubmissionEvidenceDocument.
        """
        self.openapi_types = {
            'document': str,
            'expires_at': str,
            'mime_type': str
        }

        self.attribute_map = {
            'document': 'document',
            'expires_at': 'expires_at',
            'mime_type': 'mime_type'
        }

        self._document = document
        self._expires_at = expires_at
        self._mime_type = mime_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentSubmissionEvidenceDocument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentSubmissionEvidenceDocument of this DocumentSubmissionEvidenceDocument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document(self):
        """Gets the document of this DocumentSubmissionEvidenceDocument.

        The URL where the document can be retrieved.

        :return: The document of this DocumentSubmissionEvidenceDocument.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this DocumentSubmissionEvidenceDocument.

        The URL where the document can be retrieved.

        :param document: The document of this DocumentSubmissionEvidenceDocument.
        :type document: str
        """

        self._document = document

    @property
    def expires_at(self):
        """Gets the expires_at of this DocumentSubmissionEvidenceDocument.

        The datetime the URL expires. Format: 'YYYY-MM-DD HH:mm:ss.'

        :return: The expires_at of this DocumentSubmissionEvidenceDocument.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this DocumentSubmissionEvidenceDocument.

        The datetime the URL expires. Format: 'YYYY-MM-DD HH:mm:ss.'

        :param expires_at: The expires_at of this DocumentSubmissionEvidenceDocument.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def mime_type(self):
        """Gets the mime_type of this DocumentSubmissionEvidenceDocument.

        The mime type of the document.

        :return: The mime_type of this DocumentSubmissionEvidenceDocument.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this DocumentSubmissionEvidenceDocument.

        The mime type of the document.

        :param mime_type: The mime_type of this DocumentSubmissionEvidenceDocument.
        :type mime_type: str
        """
        allowed_values = ["message/rfc822", "application/xml", "application/json", "application/pdf"]  # noqa: E501
        if mime_type not in allowed_values:
            raise ValueError(
                "Invalid value for `mime_type` ({0}), must be one of {1}"
                .format(mime_type, allowed_values)
            )

        self._mime_type = mime_type
