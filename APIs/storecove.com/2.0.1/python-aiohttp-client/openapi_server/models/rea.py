# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Rea(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capital: float=None, identifier: str=None, liquidation_status: str=None, partners: str=None, province: str=None):
        """Rea - a model defined in OpenAPI

        :param capital: The capital of this Rea.
        :param identifier: The identifier of this Rea.
        :param liquidation_status: The liquidation_status of this Rea.
        :param partners: The partners of this Rea.
        :param province: The province of this Rea.
        """
        self.openapi_types = {
            'capital': float,
            'identifier': str,
            'liquidation_status': str,
            'partners': str,
            'province': str
        }

        self.attribute_map = {
            'capital': 'capital',
            'identifier': 'identifier',
            'liquidation_status': 'liquidation_status',
            'partners': 'partners',
            'province': 'province'
        }

        self._capital = capital
        self._identifier = identifier
        self._liquidation_status = liquidation_status
        self._partners = partners
        self._province = province

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rea':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rea of this Rea.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capital(self):
        """Gets the capital of this Rea.

        The captial for the company.

        :return: The capital of this Rea.
        :rtype: float
        """
        return self._capital

    @capital.setter
    def capital(self, capital):
        """Sets the capital of this Rea.

        The captial for the company.

        :param capital: The capital of this Rea.
        :type capital: float
        """

        self._capital = capital

    @property
    def identifier(self):
        """Gets the identifier of this Rea.

        The identifier.

        :return: The identifier of this Rea.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Rea.

        The identifier.

        :param identifier: The identifier of this Rea.
        :type identifier: str
        """
        if identifier is not None and len(identifier) > 20:
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `20`")
        if identifier is not None and len(identifier) < 2:
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `2`")

        self._identifier = identifier

    @property
    def liquidation_status(self):
        """Gets the liquidation_status of this Rea.

        The liquidation status of the company.

        :return: The liquidation_status of this Rea.
        :rtype: str
        """
        return self._liquidation_status

    @liquidation_status.setter
    def liquidation_status(self, liquidation_status):
        """Sets the liquidation_status of this Rea.

        The liquidation status of the company.

        :param liquidation_status: The liquidation_status of this Rea.
        :type liquidation_status: str
        """
        allowed_values = ["LN", "LS"]  # noqa: E501
        if liquidation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `liquidation_status` ({0}), must be one of {1}"
                .format(liquidation_status, allowed_values)
            )

        self._liquidation_status = liquidation_status

    @property
    def partners(self):
        """Gets the partners of this Rea.

        The number of partners.

        :return: The partners of this Rea.
        :rtype: str
        """
        return self._partners

    @partners.setter
    def partners(self, partners):
        """Sets the partners of this Rea.

        The number of partners.

        :param partners: The partners of this Rea.
        :type partners: str
        """
        allowed_values = ["SU", "SM"]  # noqa: E501
        if partners not in allowed_values:
            raise ValueError(
                "Invalid value for `partners` ({0}), must be one of {1}"
                .format(partners, allowed_values)
            )

        self._partners = partners

    @property
    def province(self):
        """Gets the province of this Rea.

        The provincia of the ufficio that issued the identifier.

        :return: The province of this Rea.
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this Rea.

        The provincia of the ufficio that issued the identifier.

        :param province: The province of this Rea.
        :type province: str
        """
        allowed_values = ["AG", "AL", "AN", "AO", "AQ", "AR", "AP", "AT", "AV", "BA", "BT", "BL", "BN", "BG", "BI", "BO", "BZ", "BS", "BR", "CA", "CL", "CB", "CI", "CE", "CT", "CZ", "CH", "CO", "CS", "CR", "KR", "CN", "EN", "FM", "FE", "FI", "FG", "FC", "FR", "GE", "GO", "GR", "IM", "IS", "SP", "LT", "LE", "LC", "LI", "LO", "LU", "MC", "MN", "MS", "MT", "VS", "ME", "MI", "MO", "MB", "NA", "false", "NU", "OG", "OT", "OR", "PD", "PA", "PR", "PV", "PG", "PU", "PE", "PC", "PI", "PT", "PN", "PZ", "PO", "RG", "RA", "RC", "RE", "RI", "RN", "RO", "SA", "SS", "SV", "SI", "SR", "SO", "TA", "TE", "TR", "TO", "TP", "TN", "TV", "TS", "UD", "VA", "VE", "VB", "VC", "VR", "VV", "VI", "VT"]  # noqa: E501
        if province not in allowed_values:
            raise ValueError(
                "Invalid value for `province` ({0}), must be one of {1}"
                .format(province, allowed_values)
            )

        self._province = province
