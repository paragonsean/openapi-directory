# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicIdentifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, scheme: str=None):
        """PublicIdentifier - a model defined in OpenAPI

        :param id: The id of this PublicIdentifier.
        :param scheme: The scheme of this PublicIdentifier.
        """
        self.openapi_types = {
            'id': str,
            'scheme': str
        }

        self.attribute_map = {
            'id': 'id',
            'scheme': 'scheme'
        }

        self._id = id
        self._scheme = scheme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicIdentifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicIdentifier of this PublicIdentifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PublicIdentifier.

        The actual identifier.

        :return: The id of this PublicIdentifier.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublicIdentifier.

        The actual identifier.

        :param id: The id of this PublicIdentifier.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def scheme(self):
        """Gets the scheme of this PublicIdentifier.

        The scheme of the identifier. See <<_receiver_identifiers_list>> for a list.

        :return: The scheme of this PublicIdentifier.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this PublicIdentifier.

        The scheme of the identifier. See <<_receiver_identifiers_list>> for a list.

        :param scheme: The scheme of this PublicIdentifier.
        :type scheme: str
        """
        if scheme is None:
            raise ValueError("Invalid value for `scheme`, must not be `None`")
        if scheme is not None and len(scheme) < 3:
            raise ValueError("Invalid value for `scheme`, length must be greater than or equal to `3`")

        self._scheme = scheme
