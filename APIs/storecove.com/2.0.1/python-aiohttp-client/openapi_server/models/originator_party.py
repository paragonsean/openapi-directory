# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OriginatorParty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, party: object=None):
        """OriginatorParty - a model defined in OpenAPI

        :param party: The party of this OriginatorParty.
        """
        self.openapi_types = {
            'party': object
        }

        self.attribute_map = {
            'party': 'party'
        }

        self._party = party

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OriginatorParty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OriginatorParty of this OriginatorParty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def party(self):
        """Gets the party of this OriginatorParty.

        

        :return: The party of this OriginatorParty.
        :rtype: object
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this OriginatorParty.

        

        :param party: The party of this OriginatorParty.
        :type party: object
        """
        if party is None:
            raise ValueError("Invalid value for `party`, must not be `None`")

        self._party = party
