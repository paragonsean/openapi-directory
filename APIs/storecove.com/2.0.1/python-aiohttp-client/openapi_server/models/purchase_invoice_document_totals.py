# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PurchaseInvoiceDocumentTotals(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payable: float=None, prepaid: float=None, rounding: float=None, total: float=None):
        """PurchaseInvoiceDocumentTotals - a model defined in OpenAPI

        :param payable: The payable of this PurchaseInvoiceDocumentTotals.
        :param prepaid: The prepaid of this PurchaseInvoiceDocumentTotals.
        :param rounding: The rounding of this PurchaseInvoiceDocumentTotals.
        :param total: The total of this PurchaseInvoiceDocumentTotals.
        """
        self.openapi_types = {
            'payable': float,
            'prepaid': float,
            'rounding': float,
            'total': float
        }

        self.attribute_map = {
            'payable': 'payable',
            'prepaid': 'prepaid',
            'rounding': 'rounding',
            'total': 'total'
        }

        self._payable = payable
        self._prepaid = prepaid
        self._rounding = rounding
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseInvoiceDocumentTotals':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurchaseInvoiceDocumentTotals of this PurchaseInvoiceDocumentTotals.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payable(self):
        """Gets the payable of this PurchaseInvoiceDocumentTotals.

        The total invoice amount payable including tax.

        :return: The payable of this PurchaseInvoiceDocumentTotals.
        :rtype: float
        """
        return self._payable

    @payable.setter
    def payable(self, payable):
        """Sets the payable of this PurchaseInvoiceDocumentTotals.

        The total invoice amount payable including tax.

        :param payable: The payable of this PurchaseInvoiceDocumentTotals.
        :type payable: float
        """

        self._payable = payable

    @property
    def prepaid(self):
        """Gets the prepaid of this PurchaseInvoiceDocumentTotals.

        The amount already paid.

        :return: The prepaid of this PurchaseInvoiceDocumentTotals.
        :rtype: float
        """
        return self._prepaid

    @prepaid.setter
    def prepaid(self, prepaid):
        """Sets the prepaid of this PurchaseInvoiceDocumentTotals.

        The amount already paid.

        :param prepaid: The prepaid of this PurchaseInvoiceDocumentTotals.
        :type prepaid: float
        """

        self._prepaid = prepaid

    @property
    def rounding(self):
        """Gets the rounding of this PurchaseInvoiceDocumentTotals.

        The difference between the payable amount and the total invoice amount including tax.

        :return: The rounding of this PurchaseInvoiceDocumentTotals.
        :rtype: float
        """
        return self._rounding

    @rounding.setter
    def rounding(self, rounding):
        """Sets the rounding of this PurchaseInvoiceDocumentTotals.

        The difference between the payable amount and the total invoice amount including tax.

        :param rounding: The rounding of this PurchaseInvoiceDocumentTotals.
        :type rounding: float
        """

        self._rounding = rounding

    @property
    def total(self):
        """Gets the total of this PurchaseInvoiceDocumentTotals.

        The total invoice amount, including tax. This is equal to the sum of the invoice_lines (amount_excluding_tax + tax.amount) and the allowances and charges.

        :return: The total of this PurchaseInvoiceDocumentTotals.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PurchaseInvoiceDocumentTotals.

        The total invoice amount, including tax. This is equal to the sum of the invoice_lines (amount_excluding_tax + tax.amount) and the allowances and charges.

        :param total: The total of this PurchaseInvoiceDocumentTotals.
        :type total: float
        """

        self._total = total
