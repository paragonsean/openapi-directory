# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delivery_delivery_location import DeliveryDeliveryLocation
from openapi_server.models.delivery_party import DeliveryParty
import re
from openapi_server import util


class Delivery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actual_date: str=None, delivery_location: DeliveryDeliveryLocation=None, delivery_party: DeliveryParty=None, delivery_party_name: str=None, quantity: float=1, requested_delivery_period: str=None, shipping_marks: str=None):
        """Delivery - a model defined in OpenAPI

        :param actual_date: The actual_date of this Delivery.
        :param delivery_location: The delivery_location of this Delivery.
        :param delivery_party: The delivery_party of this Delivery.
        :param delivery_party_name: The delivery_party_name of this Delivery.
        :param quantity: The quantity of this Delivery.
        :param requested_delivery_period: The requested_delivery_period of this Delivery.
        :param shipping_marks: The shipping_marks of this Delivery.
        """
        self.openapi_types = {
            'actual_date': str,
            'delivery_location': DeliveryDeliveryLocation,
            'delivery_party': DeliveryParty,
            'delivery_party_name': str,
            'quantity': float,
            'requested_delivery_period': str,
            'shipping_marks': str
        }

        self.attribute_map = {
            'actual_date': 'actualDate',
            'delivery_location': 'deliveryLocation',
            'delivery_party': 'deliveryParty',
            'delivery_party_name': 'deliveryPartyName',
            'quantity': 'quantity',
            'requested_delivery_period': 'requestedDeliveryPeriod',
            'shipping_marks': 'shippingMarks'
        }

        self._actual_date = actual_date
        self._delivery_location = delivery_location
        self._delivery_party = delivery_party
        self._delivery_party_name = delivery_party_name
        self._quantity = quantity
        self._requested_delivery_period = requested_delivery_period
        self._shipping_marks = shipping_marks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Delivery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Delivery of this Delivery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actual_date(self):
        """Gets the actual_date of this Delivery.

        The actual date of the delivery. Used only for Invoice

        :return: The actual_date of this Delivery.
        :rtype: str
        """
        return self._actual_date

    @actual_date.setter
    def actual_date(self, actual_date):
        """Sets the actual_date of this Delivery.

        The actual date of the delivery. Used only for Invoice

        :param actual_date: The actual_date of this Delivery.
        :type actual_date: str
        """
        if actual_date is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$', actual_date):
            raise ValueError("Invalid value for `actual_date`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/`")

        self._actual_date = actual_date

    @property
    def delivery_location(self):
        """Gets the delivery_location of this Delivery.


        :return: The delivery_location of this Delivery.
        :rtype: DeliveryDeliveryLocation
        """
        return self._delivery_location

    @delivery_location.setter
    def delivery_location(self, delivery_location):
        """Sets the delivery_location of this Delivery.


        :param delivery_location: The delivery_location of this Delivery.
        :type delivery_location: DeliveryDeliveryLocation
        """

        self._delivery_location = delivery_location

    @property
    def delivery_party(self):
        """Gets the delivery_party of this Delivery.


        :return: The delivery_party of this Delivery.
        :rtype: DeliveryParty
        """
        return self._delivery_party

    @delivery_party.setter
    def delivery_party(self, delivery_party):
        """Sets the delivery_party of this Delivery.


        :param delivery_party: The delivery_party of this Delivery.
        :type delivery_party: DeliveryParty
        """

        self._delivery_party = delivery_party

    @property
    def delivery_party_name(self):
        """Gets the delivery_party_name of this Delivery.

        Use deliveryParty. The name of the party that took delivery. Used only for Invoice

        :return: The delivery_party_name of this Delivery.
        :rtype: str
        """
        return self._delivery_party_name

    @delivery_party_name.setter
    def delivery_party_name(self, delivery_party_name):
        """Sets the delivery_party_name of this Delivery.

        Use deliveryParty. The name of the party that took delivery. Used only for Invoice

        :param delivery_party_name: The delivery_party_name of this Delivery.
        :type delivery_party_name: str
        """

        self._delivery_party_name = delivery_party_name

    @property
    def quantity(self):
        """Gets the quantity of this Delivery.

        The quantity of the delivery. Used only for Invoice

        :return: The quantity of this Delivery.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Delivery.

        The quantity of the delivery. Used only for Invoice

        :param quantity: The quantity of this Delivery.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def requested_delivery_period(self):
        """Gets the requested_delivery_period of this Delivery.

        The requested delivery period. Used only for DocumentOrder.

        :return: The requested_delivery_period of this Delivery.
        :rtype: str
        """
        return self._requested_delivery_period

    @requested_delivery_period.setter
    def requested_delivery_period(self, requested_delivery_period):
        """Sets the requested_delivery_period of this Delivery.

        The requested delivery period. Used only for DocumentOrder.

        :param requested_delivery_period: The requested_delivery_period of this Delivery.
        :type requested_delivery_period: str
        """
        if requested_delivery_period is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$', requested_delivery_period):
            raise ValueError("Invalid value for `requested_delivery_period`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$/`")

        self._requested_delivery_period = requested_delivery_period

    @property
    def shipping_marks(self):
        """Gets the shipping_marks of this Delivery.

        A text that the buyer requests to be printed on the packing labels. Used only for DocumentOrder.

        :return: The shipping_marks of this Delivery.
        :rtype: str
        """
        return self._shipping_marks

    @shipping_marks.setter
    def shipping_marks(self, shipping_marks):
        """Sets the shipping_marks of this Delivery.

        A text that the buyer requests to be printed on the packing labels. Used only for DocumentOrder.

        :param shipping_marks: The shipping_marks of this Delivery.
        :type shipping_marks: str
        """
        if shipping_marks is not None and len(shipping_marks) > 128:
            raise ValueError("Invalid value for `shipping_marks`, length must be less than or equal to `128`")

        self._shipping_marks = shipping_marks
