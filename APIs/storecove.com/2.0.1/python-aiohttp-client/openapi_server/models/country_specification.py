# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country import Country
from openapi_server.models.receiver import Receiver
from openapi_server.models.sender import Sender
from openapi_server import util


class CountrySpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: Country=None, receiver: Receiver=None, region: str=None, sender: Sender=None):
        """CountrySpecification - a model defined in OpenAPI

        :param country: The country of this CountrySpecification.
        :param receiver: The receiver of this CountrySpecification.
        :param region: The region of this CountrySpecification.
        :param sender: The sender of this CountrySpecification.
        """
        self.openapi_types = {
            'country': Country,
            'receiver': Receiver,
            'region': str,
            'sender': Sender
        }

        self.attribute_map = {
            'country': 'country',
            'receiver': 'receiver',
            'region': 'region',
            'sender': 'sender'
        }

        self._country = country
        self._receiver = receiver
        self._region = region
        self._sender = sender

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountrySpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CountrySpecification of this CountrySpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this CountrySpecification.


        :return: The country of this CountrySpecification.
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CountrySpecification.


        :param country: The country of this CountrySpecification.
        :type country: Country
        """

        self._country = country

    @property
    def receiver(self):
        """Gets the receiver of this CountrySpecification.


        :return: The receiver of this CountrySpecification.
        :rtype: Receiver
        """
        return self._receiver

    @receiver.setter
    def receiver(self, receiver):
        """Sets the receiver of this CountrySpecification.


        :param receiver: The receiver of this CountrySpecification.
        :type receiver: Receiver
        """

        self._receiver = receiver

    @property
    def region(self):
        """Gets the region of this CountrySpecification.

        The region this country belongs to. Within this region exchanging invoices is well defined. Between regions some care needs to be taken and Storecove may help in automatically converting some items. Contact us for details of inter-regional document exchange.

        :return: The region of this CountrySpecification.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CountrySpecification.

        The region this country belongs to. Within this region exchanging invoices is well defined. Between regions some care needs to be taken and Storecove may help in automatically converting some items. Contact us for details of inter-regional document exchange.

        :param region: The region of this CountrySpecification.
        :type region: str
        """
        allowed_values = ["eu_eea", "sg", "aunz", "in", "world"]  # noqa: E501
        if region not in allowed_values:
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"
                .format(region, allowed_values)
            )

        self._region = region

    @property
    def sender(self):
        """Gets the sender of this CountrySpecification.


        :return: The sender of this CountrySpecification.
        :rtype: Sender
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this CountrySpecification.


        :param sender: The sender of this CountrySpecification.
        :type sender: Sender
        """

        self._sender = sender
