# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_means_deprecated import PaymentMeansDEPRECATED
from openapi_server.models.purchase_invoice_accounting_details import PurchaseInvoiceAccountingDetails
from openapi_server.models.purchase_invoice_allowance_charge import PurchaseInvoiceAllowanceCharge
from openapi_server.models.purchase_invoice_attachment import PurchaseInvoiceAttachment
from openapi_server.models.purchase_invoice_delivery import PurchaseInvoiceDelivery
from openapi_server.models.purchase_invoice_document_totals import PurchaseInvoiceDocumentTotals
from openapi_server.models.purchase_invoice_invoice_line import PurchaseInvoiceInvoiceLine
from openapi_server.models.purchase_invoice_payment_means import PurchaseInvoicePaymentMeans
from openapi_server.models.purchase_invoice_sender import PurchaseInvoiceSender
from openapi_server.models.purchase_invoice_tax_subtotal import PurchaseInvoiceTaxSubtotal
from openapi_server import util


class PurchaseInvoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounting: PurchaseInvoiceAccountingDetails=None, accounting_cost: str=None, allowance_charge: float=None, allowance_charges: List[PurchaseInvoiceAllowanceCharge]=None, amount_including_vat: float=None, attachments: List[PurchaseInvoiceAttachment]=None, billing_reference: str=None, buyer_reference: str=None, contract_document_reference: str=None, delivery: PurchaseInvoiceDelivery=None, document: str=None, document_currency_code: str=None, document_totals: PurchaseInvoiceDocumentTotals=None, document_type: str=None, due_date: str=None, external_key: str=None, external_user_id: str=None, guid: str=None, invoice_lines: List[PurchaseInvoiceInvoiceLine]=None, invoice_number: str=None, invoice_type: str=None, issue_date: str=None, legal_entity_id: int=None, note: str=None, order_reference: str=None, payment_means: PaymentMeansDEPRECATED=None, payment_means_array: List[PurchaseInvoicePaymentMeans]=None, payment_means_payment_id: str=None, payment_terms_note: str=None, period_end: str=None, period_start: str=None, project_reference: str=None, sender: PurchaseInvoiceSender=None, source: str=None, sub_type: str=None, system_generated_primary_image: bool=None, tax_point_date: str=None, tax_subtotals: List[PurchaseInvoiceTaxSubtotal]=None, tax_system: str=None, vat_reverse_charge: bool=None):
        """PurchaseInvoice - a model defined in OpenAPI

        :param accounting: The accounting of this PurchaseInvoice.
        :param accounting_cost: The accounting_cost of this PurchaseInvoice.
        :param allowance_charge: The allowance_charge of this PurchaseInvoice.
        :param allowance_charges: The allowance_charges of this PurchaseInvoice.
        :param amount_including_vat: The amount_including_vat of this PurchaseInvoice.
        :param attachments: The attachments of this PurchaseInvoice.
        :param billing_reference: The billing_reference of this PurchaseInvoice.
        :param buyer_reference: The buyer_reference of this PurchaseInvoice.
        :param contract_document_reference: The contract_document_reference of this PurchaseInvoice.
        :param delivery: The delivery of this PurchaseInvoice.
        :param document: The document of this PurchaseInvoice.
        :param document_currency_code: The document_currency_code of this PurchaseInvoice.
        :param document_totals: The document_totals of this PurchaseInvoice.
        :param document_type: The document_type of this PurchaseInvoice.
        :param due_date: The due_date of this PurchaseInvoice.
        :param external_key: The external_key of this PurchaseInvoice.
        :param external_user_id: The external_user_id of this PurchaseInvoice.
        :param guid: The guid of this PurchaseInvoice.
        :param invoice_lines: The invoice_lines of this PurchaseInvoice.
        :param invoice_number: The invoice_number of this PurchaseInvoice.
        :param invoice_type: The invoice_type of this PurchaseInvoice.
        :param issue_date: The issue_date of this PurchaseInvoice.
        :param legal_entity_id: The legal_entity_id of this PurchaseInvoice.
        :param note: The note of this PurchaseInvoice.
        :param order_reference: The order_reference of this PurchaseInvoice.
        :param payment_means: The payment_means of this PurchaseInvoice.
        :param payment_means_array: The payment_means_array of this PurchaseInvoice.
        :param payment_means_payment_id: The payment_means_payment_id of this PurchaseInvoice.
        :param payment_terms_note: The payment_terms_note of this PurchaseInvoice.
        :param period_end: The period_end of this PurchaseInvoice.
        :param period_start: The period_start of this PurchaseInvoice.
        :param project_reference: The project_reference of this PurchaseInvoice.
        :param sender: The sender of this PurchaseInvoice.
        :param source: The source of this PurchaseInvoice.
        :param sub_type: The sub_type of this PurchaseInvoice.
        :param system_generated_primary_image: The system_generated_primary_image of this PurchaseInvoice.
        :param tax_point_date: The tax_point_date of this PurchaseInvoice.
        :param tax_subtotals: The tax_subtotals of this PurchaseInvoice.
        :param tax_system: The tax_system of this PurchaseInvoice.
        :param vat_reverse_charge: The vat_reverse_charge of this PurchaseInvoice.
        """
        self.openapi_types = {
            'accounting': PurchaseInvoiceAccountingDetails,
            'accounting_cost': str,
            'allowance_charge': float,
            'allowance_charges': List[PurchaseInvoiceAllowanceCharge],
            'amount_including_vat': float,
            'attachments': List[PurchaseInvoiceAttachment],
            'billing_reference': str,
            'buyer_reference': str,
            'contract_document_reference': str,
            'delivery': PurchaseInvoiceDelivery,
            'document': str,
            'document_currency_code': str,
            'document_totals': PurchaseInvoiceDocumentTotals,
            'document_type': str,
            'due_date': str,
            'external_key': str,
            'external_user_id': str,
            'guid': str,
            'invoice_lines': List[PurchaseInvoiceInvoiceLine],
            'invoice_number': str,
            'invoice_type': str,
            'issue_date': str,
            'legal_entity_id': int,
            'note': str,
            'order_reference': str,
            'payment_means': PaymentMeansDEPRECATED,
            'payment_means_array': List[PurchaseInvoicePaymentMeans],
            'payment_means_payment_id': str,
            'payment_terms_note': str,
            'period_end': str,
            'period_start': str,
            'project_reference': str,
            'sender': PurchaseInvoiceSender,
            'source': str,
            'sub_type': str,
            'system_generated_primary_image': bool,
            'tax_point_date': str,
            'tax_subtotals': List[PurchaseInvoiceTaxSubtotal],
            'tax_system': str,
            'vat_reverse_charge': bool
        }

        self.attribute_map = {
            'accounting': 'accounting',
            'accounting_cost': 'accounting_cost',
            'allowance_charge': 'allowance_charge',
            'allowance_charges': 'allowance_charges',
            'amount_including_vat': 'amount_including_vat',
            'attachments': 'attachments',
            'billing_reference': 'billing_reference',
            'buyer_reference': 'buyer_reference',
            'contract_document_reference': 'contract_document_reference',
            'delivery': 'delivery',
            'document': 'document',
            'document_currency_code': 'document_currency_code',
            'document_totals': 'document_totals',
            'document_type': 'document_type',
            'due_date': 'due_date',
            'external_key': 'external_key',
            'external_user_id': 'external_user_id',
            'guid': 'guid',
            'invoice_lines': 'invoice_lines',
            'invoice_number': 'invoice_number',
            'invoice_type': 'invoice_type',
            'issue_date': 'issue_date',
            'legal_entity_id': 'legal_entity_id',
            'note': 'note',
            'order_reference': 'order_reference',
            'payment_means': 'payment_means',
            'payment_means_array': 'payment_means_array',
            'payment_means_payment_id': 'payment_means_payment_id',
            'payment_terms_note': 'payment_terms_note',
            'period_end': 'period_end',
            'period_start': 'period_start',
            'project_reference': 'project_reference',
            'sender': 'sender',
            'source': 'source',
            'sub_type': 'sub_type',
            'system_generated_primary_image': 'system_generated_primary_image',
            'tax_point_date': 'tax_point_date',
            'tax_subtotals': 'tax_subtotals',
            'tax_system': 'tax_system',
            'vat_reverse_charge': 'vat_reverse_charge'
        }

        self._accounting = accounting
        self._accounting_cost = accounting_cost
        self._allowance_charge = allowance_charge
        self._allowance_charges = allowance_charges
        self._amount_including_vat = amount_including_vat
        self._attachments = attachments
        self._billing_reference = billing_reference
        self._buyer_reference = buyer_reference
        self._contract_document_reference = contract_document_reference
        self._delivery = delivery
        self._document = document
        self._document_currency_code = document_currency_code
        self._document_totals = document_totals
        self._document_type = document_type
        self._due_date = due_date
        self._external_key = external_key
        self._external_user_id = external_user_id
        self._guid = guid
        self._invoice_lines = invoice_lines
        self._invoice_number = invoice_number
        self._invoice_type = invoice_type
        self._issue_date = issue_date
        self._legal_entity_id = legal_entity_id
        self._note = note
        self._order_reference = order_reference
        self._payment_means = payment_means
        self._payment_means_array = payment_means_array
        self._payment_means_payment_id = payment_means_payment_id
        self._payment_terms_note = payment_terms_note
        self._period_end = period_end
        self._period_start = period_start
        self._project_reference = project_reference
        self._sender = sender
        self._source = source
        self._sub_type = sub_type
        self._system_generated_primary_image = system_generated_primary_image
        self._tax_point_date = tax_point_date
        self._tax_subtotals = tax_subtotals
        self._tax_system = tax_system
        self._vat_reverse_charge = vat_reverse_charge

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseInvoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurchaseInvoice of this PurchaseInvoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounting(self):
        """Gets the accounting of this PurchaseInvoice.


        :return: The accounting of this PurchaseInvoice.
        :rtype: PurchaseInvoiceAccountingDetails
        """
        return self._accounting

    @accounting.setter
    def accounting(self, accounting):
        """Sets the accounting of this PurchaseInvoice.


        :param accounting: The accounting of this PurchaseInvoice.
        :type accounting: PurchaseInvoiceAccountingDetails
        """

        self._accounting = accounting

    @property
    def accounting_cost(self):
        """Gets the accounting_cost of this PurchaseInvoice.

        The accounting cost code.

        :return: The accounting_cost of this PurchaseInvoice.
        :rtype: str
        """
        return self._accounting_cost

    @accounting_cost.setter
    def accounting_cost(self, accounting_cost):
        """Sets the accounting_cost of this PurchaseInvoice.

        The accounting cost code.

        :param accounting_cost: The accounting_cost of this PurchaseInvoice.
        :type accounting_cost: str
        """

        self._accounting_cost = accounting_cost

    @property
    def allowance_charge(self):
        """Gets the allowance_charge of this PurchaseInvoice.

        DEPRECATED - Use the allowance_charges array.

        :return: The allowance_charge of this PurchaseInvoice.
        :rtype: float
        """
        return self._allowance_charge

    @allowance_charge.setter
    def allowance_charge(self, allowance_charge):
        """Sets the allowance_charge of this PurchaseInvoice.

        DEPRECATED - Use the allowance_charges array.

        :param allowance_charge: The allowance_charge of this PurchaseInvoice.
        :type allowance_charge: float
        """

        self._allowance_charge = allowance_charge

    @property
    def allowance_charges(self):
        """Gets the allowance_charges of this PurchaseInvoice.


        :return: The allowance_charges of this PurchaseInvoice.
        :rtype: List[PurchaseInvoiceAllowanceCharge]
        """
        return self._allowance_charges

    @allowance_charges.setter
    def allowance_charges(self, allowance_charges):
        """Sets the allowance_charges of this PurchaseInvoice.


        :param allowance_charges: The allowance_charges of this PurchaseInvoice.
        :type allowance_charges: List[PurchaseInvoiceAllowanceCharge]
        """

        self._allowance_charges = allowance_charges

    @property
    def amount_including_vat(self):
        """Gets the amount_including_vat of this PurchaseInvoice.

        DEPRECATED - Use amount_including_tax.

        :return: The amount_including_vat of this PurchaseInvoice.
        :rtype: float
        """
        return self._amount_including_vat

    @amount_including_vat.setter
    def amount_including_vat(self, amount_including_vat):
        """Sets the amount_including_vat of this PurchaseInvoice.

        DEPRECATED - Use amount_including_tax.

        :param amount_including_vat: The amount_including_vat of this PurchaseInvoice.
        :type amount_including_vat: float
        """

        self._amount_including_vat = amount_including_vat

    @property
    def attachments(self):
        """Gets the attachments of this PurchaseInvoice.


        :return: The attachments of this PurchaseInvoice.
        :rtype: List[PurchaseInvoiceAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this PurchaseInvoice.


        :param attachments: The attachments of this PurchaseInvoice.
        :type attachments: List[PurchaseInvoiceAttachment]
        """

        self._attachments = attachments

    @property
    def billing_reference(self):
        """Gets the billing_reference of this PurchaseInvoice.

        Reference to the previous invoice this invoice relates to.

        :return: The billing_reference of this PurchaseInvoice.
        :rtype: str
        """
        return self._billing_reference

    @billing_reference.setter
    def billing_reference(self, billing_reference):
        """Sets the billing_reference of this PurchaseInvoice.

        Reference to the previous invoice this invoice relates to.

        :param billing_reference: The billing_reference of this PurchaseInvoice.
        :type billing_reference: str
        """

        self._billing_reference = billing_reference

    @property
    def buyer_reference(self):
        """Gets the buyer_reference of this PurchaseInvoice.

        Reference provided by the buyer. Used for routing.

        :return: The buyer_reference of this PurchaseInvoice.
        :rtype: str
        """
        return self._buyer_reference

    @buyer_reference.setter
    def buyer_reference(self, buyer_reference):
        """Sets the buyer_reference of this PurchaseInvoice.

        Reference provided by the buyer. Used for routing.

        :param buyer_reference: The buyer_reference of this PurchaseInvoice.
        :type buyer_reference: str
        """

        self._buyer_reference = buyer_reference

    @property
    def contract_document_reference(self):
        """Gets the contract_document_reference of this PurchaseInvoice.

        Reference to the contract.

        :return: The contract_document_reference of this PurchaseInvoice.
        :rtype: str
        """
        return self._contract_document_reference

    @contract_document_reference.setter
    def contract_document_reference(self, contract_document_reference):
        """Sets the contract_document_reference of this PurchaseInvoice.

        Reference to the contract.

        :param contract_document_reference: The contract_document_reference of this PurchaseInvoice.
        :type contract_document_reference: str
        """

        self._contract_document_reference = contract_document_reference

    @property
    def delivery(self):
        """Gets the delivery of this PurchaseInvoice.


        :return: The delivery of this PurchaseInvoice.
        :rtype: PurchaseInvoiceDelivery
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this PurchaseInvoice.


        :param delivery: The delivery of this PurchaseInvoice.
        :type delivery: PurchaseInvoiceDelivery
        """

        self._delivery = delivery

    @property
    def document(self):
        """Gets the document of this PurchaseInvoice.

        DEPRECATED. Use the new atatchments array.

        :return: The document of this PurchaseInvoice.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this PurchaseInvoice.

        DEPRECATED. Use the new atatchments array.

        :param document: The document of this PurchaseInvoice.
        :type document: str
        """

        self._document = document

    @property
    def document_currency_code(self):
        """Gets the document_currency_code of this PurchaseInvoice.

        The ISO 4217 currency for the invoice.

        :return: The document_currency_code of this PurchaseInvoice.
        :rtype: str
        """
        return self._document_currency_code

    @document_currency_code.setter
    def document_currency_code(self, document_currency_code):
        """Sets the document_currency_code of this PurchaseInvoice.

        The ISO 4217 currency for the invoice.

        :param document_currency_code: The document_currency_code of this PurchaseInvoice.
        :type document_currency_code: str
        """

        self._document_currency_code = document_currency_code

    @property
    def document_totals(self):
        """Gets the document_totals of this PurchaseInvoice.


        :return: The document_totals of this PurchaseInvoice.
        :rtype: PurchaseInvoiceDocumentTotals
        """
        return self._document_totals

    @document_totals.setter
    def document_totals(self, document_totals):
        """Sets the document_totals of this PurchaseInvoice.


        :param document_totals: The document_totals of this PurchaseInvoice.
        :type document_totals: PurchaseInvoiceDocumentTotals
        """

        self._document_totals = document_totals

    @property
    def document_type(self):
        """Gets the document_type of this PurchaseInvoice.

        The type of document. Only \"invoice\" for now.

        :return: The document_type of this PurchaseInvoice.
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this PurchaseInvoice.

        The type of document. Only \"invoice\" for now.

        :param document_type: The document_type of this PurchaseInvoice.
        :type document_type: str
        """
        allowed_values = ["invoice"]  # noqa: E501
        if document_type not in allowed_values:
            raise ValueError(
                "Invalid value for `document_type` ({0}), must be one of {1}"
                .format(document_type, allowed_values)
            )

        self._document_type = document_type

    @property
    def due_date(self):
        """Gets the due_date of this PurchaseInvoice.

        The date the invoice must be payed by. Format \"YYYY-MM-DD\".

        :return: The due_date of this PurchaseInvoice.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this PurchaseInvoice.

        The date the invoice must be payed by. Format \"YYYY-MM-DD\".

        :param due_date: The due_date of this PurchaseInvoice.
        :type due_date: str
        """

        self._due_date = due_date

    @property
    def external_key(self):
        """Gets the external_key of this PurchaseInvoice.

        Deprecated. Used for accountants. The id you specified for the organization.

        :return: The external_key of this PurchaseInvoice.
        :rtype: str
        """
        return self._external_key

    @external_key.setter
    def external_key(self, external_key):
        """Sets the external_key of this PurchaseInvoice.

        Deprecated. Used for accountants. The id you specified for the organization.

        :param external_key: The external_key of this PurchaseInvoice.
        :type external_key: str
        """

        self._external_key = external_key

    @property
    def external_user_id(self):
        """Gets the external_user_id of this PurchaseInvoice.

        Deprecated. Used for the embedded portal retrieval service. The external_user_id you provided when the ShopAccount was created.

        :return: The external_user_id of this PurchaseInvoice.
        :rtype: str
        """
        return self._external_user_id

    @external_user_id.setter
    def external_user_id(self, external_user_id):
        """Sets the external_user_id of this PurchaseInvoice.

        Deprecated. Used for the embedded portal retrieval service. The external_user_id you provided when the ShopAccount was created.

        :param external_user_id: The external_user_id of this PurchaseInvoice.
        :type external_user_id: str
        """

        self._external_user_id = external_user_id

    @property
    def guid(self):
        """Gets the guid of this PurchaseInvoice.

        The GUID of the invoice

        :return: The guid of this PurchaseInvoice.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this PurchaseInvoice.

        The GUID of the invoice

        :param guid: The guid of this PurchaseInvoice.
        :type guid: str
        """

        self._guid = guid

    @property
    def invoice_lines(self):
        """Gets the invoice_lines of this PurchaseInvoice.


        :return: The invoice_lines of this PurchaseInvoice.
        :rtype: List[PurchaseInvoiceInvoiceLine]
        """
        return self._invoice_lines

    @invoice_lines.setter
    def invoice_lines(self, invoice_lines):
        """Sets the invoice_lines of this PurchaseInvoice.


        :param invoice_lines: The invoice_lines of this PurchaseInvoice.
        :type invoice_lines: List[PurchaseInvoiceInvoiceLine]
        """

        self._invoice_lines = invoice_lines

    @property
    def invoice_number(self):
        """Gets the invoice_number of this PurchaseInvoice.

        The invoicenumber.

        :return: The invoice_number of this PurchaseInvoice.
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this PurchaseInvoice.

        The invoicenumber.

        :param invoice_number: The invoice_number of this PurchaseInvoice.
        :type invoice_number: str
        """

        self._invoice_number = invoice_number

    @property
    def invoice_type(self):
        """Gets the invoice_type of this PurchaseInvoice.

        The type of invoice.

        :return: The invoice_type of this PurchaseInvoice.
        :rtype: str
        """
        return self._invoice_type

    @invoice_type.setter
    def invoice_type(self, invoice_type):
        """Sets the invoice_type of this PurchaseInvoice.

        The type of invoice.

        :param invoice_type: The invoice_type of this PurchaseInvoice.
        :type invoice_type: str
        """
        allowed_values = ["invoice", "creditnote", "correctioninvoice"]  # noqa: E501
        if invoice_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoice_type` ({0}), must be one of {1}"
                .format(invoice_type, allowed_values)
            )

        self._invoice_type = invoice_type

    @property
    def issue_date(self):
        """Gets the issue_date of this PurchaseInvoice.

        The date the invoice was issued. Format \"YYYY-MM-DD\".

        :return: The issue_date of this PurchaseInvoice.
        :rtype: str
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this PurchaseInvoice.

        The date the invoice was issued. Format \"YYYY-MM-DD\".

        :param issue_date: The issue_date of this PurchaseInvoice.
        :type issue_date: str
        """

        self._issue_date = issue_date

    @property
    def legal_entity_id(self):
        """Gets the legal_entity_id of this PurchaseInvoice.

        The id of the LegalEntity the invoice was received for.

        :return: The legal_entity_id of this PurchaseInvoice.
        :rtype: int
        """
        return self._legal_entity_id

    @legal_entity_id.setter
    def legal_entity_id(self, legal_entity_id):
        """Sets the legal_entity_id of this PurchaseInvoice.

        The id of the LegalEntity the invoice was received for.

        :param legal_entity_id: The legal_entity_id of this PurchaseInvoice.
        :type legal_entity_id: int
        """

        self._legal_entity_id = legal_entity_id

    @property
    def note(self):
        """Gets the note of this PurchaseInvoice.

        The invoice level note.

        :return: The note of this PurchaseInvoice.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this PurchaseInvoice.

        The invoice level note.

        :param note: The note of this PurchaseInvoice.
        :type note: str
        """

        self._note = note

    @property
    def order_reference(self):
        """Gets the order_reference of this PurchaseInvoice.

        Reference to the order. Used for matching the invoice to an order.

        :return: The order_reference of this PurchaseInvoice.
        :rtype: str
        """
        return self._order_reference

    @order_reference.setter
    def order_reference(self, order_reference):
        """Sets the order_reference of this PurchaseInvoice.

        Reference to the order. Used for matching the invoice to an order.

        :param order_reference: The order_reference of this PurchaseInvoice.
        :type order_reference: str
        """

        self._order_reference = order_reference

    @property
    def payment_means(self):
        """Gets the payment_means of this PurchaseInvoice.


        :return: The payment_means of this PurchaseInvoice.
        :rtype: PaymentMeansDEPRECATED
        """
        return self._payment_means

    @payment_means.setter
    def payment_means(self, payment_means):
        """Sets the payment_means of this PurchaseInvoice.


        :param payment_means: The payment_means of this PurchaseInvoice.
        :type payment_means: PaymentMeansDEPRECATED
        """

        self._payment_means = payment_means

    @property
    def payment_means_array(self):
        """Gets the payment_means_array of this PurchaseInvoice.

        The different payment means that can be used to pay the invoice.

        :return: The payment_means_array of this PurchaseInvoice.
        :rtype: List[PurchaseInvoicePaymentMeans]
        """
        return self._payment_means_array

    @payment_means_array.setter
    def payment_means_array(self, payment_means_array):
        """Sets the payment_means_array of this PurchaseInvoice.

        The different payment means that can be used to pay the invoice.

        :param payment_means_array: The payment_means_array of this PurchaseInvoice.
        :type payment_means_array: List[PurchaseInvoicePaymentMeans]
        """

        self._payment_means_array = payment_means_array

    @property
    def payment_means_payment_id(self):
        """Gets the payment_means_payment_id of this PurchaseInvoice.

        DEPRECATED - use the payment_id property in the payment_means_array

        :return: The payment_means_payment_id of this PurchaseInvoice.
        :rtype: str
        """
        return self._payment_means_payment_id

    @payment_means_payment_id.setter
    def payment_means_payment_id(self, payment_means_payment_id):
        """Sets the payment_means_payment_id of this PurchaseInvoice.

        DEPRECATED - use the payment_id property in the payment_means_array

        :param payment_means_payment_id: The payment_means_payment_id of this PurchaseInvoice.
        :type payment_means_payment_id: str
        """

        self._payment_means_payment_id = payment_means_payment_id

    @property
    def payment_terms_note(self):
        """Gets the payment_terms_note of this PurchaseInvoice.

        A textual description of the payment terms.

        :return: The payment_terms_note of this PurchaseInvoice.
        :rtype: str
        """
        return self._payment_terms_note

    @payment_terms_note.setter
    def payment_terms_note(self, payment_terms_note):
        """Sets the payment_terms_note of this PurchaseInvoice.

        A textual description of the payment terms.

        :param payment_terms_note: The payment_terms_note of this PurchaseInvoice.
        :type payment_terms_note: str
        """

        self._payment_terms_note = payment_terms_note

    @property
    def period_end(self):
        """Gets the period_end of this PurchaseInvoice.

        The end date of the period this invoice relates to. Format \"YYYY-MM-DD\".

        :return: The period_end of this PurchaseInvoice.
        :rtype: str
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this PurchaseInvoice.

        The end date of the period this invoice relates to. Format \"YYYY-MM-DD\".

        :param period_end: The period_end of this PurchaseInvoice.
        :type period_end: str
        """

        self._period_end = period_end

    @property
    def period_start(self):
        """Gets the period_start of this PurchaseInvoice.

        The start date of the period this invoice relates to. Format \"YYYY-MM-DD\".

        :return: The period_start of this PurchaseInvoice.
        :rtype: str
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this PurchaseInvoice.

        The start date of the period this invoice relates to. Format \"YYYY-MM-DD\".

        :param period_start: The period_start of this PurchaseInvoice.
        :type period_start: str
        """

        self._period_start = period_start

    @property
    def project_reference(self):
        """Gets the project_reference of this PurchaseInvoice.

        Reference to the project.

        :return: The project_reference of this PurchaseInvoice.
        :rtype: str
        """
        return self._project_reference

    @project_reference.setter
    def project_reference(self, project_reference):
        """Sets the project_reference of this PurchaseInvoice.

        Reference to the project.

        :param project_reference: The project_reference of this PurchaseInvoice.
        :type project_reference: str
        """

        self._project_reference = project_reference

    @property
    def sender(self):
        """Gets the sender of this PurchaseInvoice.


        :return: The sender of this PurchaseInvoice.
        :rtype: PurchaseInvoiceSender
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this PurchaseInvoice.


        :param sender: The sender of this PurchaseInvoice.
        :type sender: PurchaseInvoiceSender
        """

        self._sender = sender

    @property
    def source(self):
        """Gets the source of this PurchaseInvoice.

        The source the invoice was received from.

        :return: The source of this PurchaseInvoice.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PurchaseInvoice.

        The source the invoice was received from.

        :param source: The source of this PurchaseInvoice.
        :type source: str
        """
        allowed_values = ["peppol", "script", "supplier", "email"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def sub_type(self):
        """Gets the sub_type of this PurchaseInvoice.

        The subtype of document.

        :return: The sub_type of this PurchaseInvoice.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this PurchaseInvoice.

        The subtype of document.

        :param sub_type: The sub_type of this PurchaseInvoice.
        :type sub_type: str
        """
        allowed_values = ["invoice", "creditnote", "correctioninvoice"]  # noqa: E501
        if sub_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_type` ({0}), must be one of {1}"
                .format(sub_type, allowed_values)
            )

        self._sub_type = sub_type

    @property
    def system_generated_primary_image(self):
        """Gets the system_generated_primary_image of this PurchaseInvoice.

        Whether or not the document image (PDF) was generated by Storecove. If true, it means the invoice was received without any attachments and Storecove generated one for you. If false, the invoice will contain at least one attachment, which was received from the invoice sender.

        :return: The system_generated_primary_image of this PurchaseInvoice.
        :rtype: bool
        """
        return self._system_generated_primary_image

    @system_generated_primary_image.setter
    def system_generated_primary_image(self, system_generated_primary_image):
        """Sets the system_generated_primary_image of this PurchaseInvoice.

        Whether or not the document image (PDF) was generated by Storecove. If true, it means the invoice was received without any attachments and Storecove generated one for you. If false, the invoice will contain at least one attachment, which was received from the invoice sender.

        :param system_generated_primary_image: The system_generated_primary_image of this PurchaseInvoice.
        :type system_generated_primary_image: bool
        """

        self._system_generated_primary_image = system_generated_primary_image

    @property
    def tax_point_date(self):
        """Gets the tax_point_date of this PurchaseInvoice.

        The date the invoice was issued for tax purposes. In most countries MUST match the issue_date. Format \"YYYY-MM-DD\".

        :return: The tax_point_date of this PurchaseInvoice.
        :rtype: str
        """
        return self._tax_point_date

    @tax_point_date.setter
    def tax_point_date(self, tax_point_date):
        """Sets the tax_point_date of this PurchaseInvoice.

        The date the invoice was issued for tax purposes. In most countries MUST match the issue_date. Format \"YYYY-MM-DD\".

        :param tax_point_date: The tax_point_date of this PurchaseInvoice.
        :type tax_point_date: str
        """

        self._tax_point_date = tax_point_date

    @property
    def tax_subtotals(self):
        """Gets the tax_subtotals of this PurchaseInvoice.


        :return: The tax_subtotals of this PurchaseInvoice.
        :rtype: List[PurchaseInvoiceTaxSubtotal]
        """
        return self._tax_subtotals

    @tax_subtotals.setter
    def tax_subtotals(self, tax_subtotals):
        """Sets the tax_subtotals of this PurchaseInvoice.


        :param tax_subtotals: The tax_subtotals of this PurchaseInvoice.
        :type tax_subtotals: List[PurchaseInvoiceTaxSubtotal]
        """

        self._tax_subtotals = tax_subtotals

    @property
    def tax_system(self):
        """Gets the tax_system of this PurchaseInvoice.

        The tax system of the invoice. Either tax_line_percentages or tax_line_amounts. The first tax system means the invoice lines contain only the tax percentages and the tax amounts are included only in the tax subtotals at the invoice level and so are only calculated at the invoice level. The tax system tax_line_amounts means that in addition to the percentage, each invoice line also contains the tax amount. The tax subtotals at the invoice level are calculated as the sum of the tax of the invoice lines. The distinction between the two tax systems has has implications for rounding.

        :return: The tax_system of this PurchaseInvoice.
        :rtype: str
        """
        return self._tax_system

    @tax_system.setter
    def tax_system(self, tax_system):
        """Sets the tax_system of this PurchaseInvoice.

        The tax system of the invoice. Either tax_line_percentages or tax_line_amounts. The first tax system means the invoice lines contain only the tax percentages and the tax amounts are included only in the tax subtotals at the invoice level and so are only calculated at the invoice level. The tax system tax_line_amounts means that in addition to the percentage, each invoice line also contains the tax amount. The tax subtotals at the invoice level are calculated as the sum of the tax of the invoice lines. The distinction between the two tax systems has has implications for rounding.

        :param tax_system: The tax_system of this PurchaseInvoice.
        :type tax_system: str
        """

        self._tax_system = tax_system

    @property
    def vat_reverse_charge(self):
        """Gets the vat_reverse_charge of this PurchaseInvoice.

        DEPRECATED - This is now part of each invoice line.

        :return: The vat_reverse_charge of this PurchaseInvoice.
        :rtype: bool
        """
        return self._vat_reverse_charge

    @vat_reverse_charge.setter
    def vat_reverse_charge(self, vat_reverse_charge):
        """Sets the vat_reverse_charge of this PurchaseInvoice.

        DEPRECATED - This is now part of each invoice line.

        :param vat_reverse_charge: The vat_reverse_charge of this PurchaseInvoice.
        :type vat_reverse_charge: bool
        """

        self._vat_reverse_charge = vat_reverse_charge
