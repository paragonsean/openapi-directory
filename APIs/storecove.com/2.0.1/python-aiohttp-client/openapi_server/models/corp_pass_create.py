# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CorpPassCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_redirect_fail_url: str=None, client_redirect_success_url: str=None, enabled: bool=True, flow_type: str=None, signer_email: str=None, signer_name: str=None, simulate_corppass: bool=False):
        """CorpPassCreate - a model defined in OpenAPI

        :param client_redirect_fail_url: The client_redirect_fail_url of this CorpPassCreate.
        :param client_redirect_success_url: The client_redirect_success_url of this CorpPassCreate.
        :param enabled: The enabled of this CorpPassCreate.
        :param flow_type: The flow_type of this CorpPassCreate.
        :param signer_email: The signer_email of this CorpPassCreate.
        :param signer_name: The signer_name of this CorpPassCreate.
        :param simulate_corppass: The simulate_corppass of this CorpPassCreate.
        """
        self.openapi_types = {
            'client_redirect_fail_url': str,
            'client_redirect_success_url': str,
            'enabled': bool,
            'flow_type': str,
            'signer_email': str,
            'signer_name': str,
            'simulate_corppass': bool
        }

        self.attribute_map = {
            'client_redirect_fail_url': 'client_redirect_fail_url',
            'client_redirect_success_url': 'client_redirect_success_url',
            'enabled': 'enabled',
            'flow_type': 'flow_type',
            'signer_email': 'signer_email',
            'signer_name': 'signer_name',
            'simulate_corppass': 'simulate_corppass'
        }

        self._client_redirect_fail_url = client_redirect_fail_url
        self._client_redirect_success_url = client_redirect_success_url
        self._enabled = enabled
        self._flow_type = flow_type
        self._signer_email = signer_email
        self._signer_name = signer_name
        self._simulate_corppass = simulate_corppass

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CorpPassCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CorpPassCreate of this CorpPassCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_redirect_fail_url(self):
        """Gets the client_redirect_fail_url of this CorpPassCreate.

        The URL the CorpPass system will redirect to in case of a failure to perform identity verfication. Mandatory for flow_type=\"corppass_flow_redirect\"

        :return: The client_redirect_fail_url of this CorpPassCreate.
        :rtype: str
        """
        return self._client_redirect_fail_url

    @client_redirect_fail_url.setter
    def client_redirect_fail_url(self, client_redirect_fail_url):
        """Sets the client_redirect_fail_url of this CorpPassCreate.

        The URL the CorpPass system will redirect to in case of a failure to perform identity verfication. Mandatory for flow_type=\"corppass_flow_redirect\"

        :param client_redirect_fail_url: The client_redirect_fail_url of this CorpPassCreate.
        :type client_redirect_fail_url: str
        """
        if client_redirect_fail_url is not None and len(client_redirect_fail_url) > 255:
            raise ValueError("Invalid value for `client_redirect_fail_url`, length must be less than or equal to `255`")
        if client_redirect_fail_url is not None and len(client_redirect_fail_url) < 11:
            raise ValueError("Invalid value for `client_redirect_fail_url`, length must be greater than or equal to `11`")

        self._client_redirect_fail_url = client_redirect_fail_url

    @property
    def client_redirect_success_url(self):
        """Gets the client_redirect_success_url of this CorpPassCreate.

        The URL the CorpPass system will redirect to in case of successful identity verfication. Mandatory for flow_type=\"corppass_flow_redirect\"

        :return: The client_redirect_success_url of this CorpPassCreate.
        :rtype: str
        """
        return self._client_redirect_success_url

    @client_redirect_success_url.setter
    def client_redirect_success_url(self, client_redirect_success_url):
        """Sets the client_redirect_success_url of this CorpPassCreate.

        The URL the CorpPass system will redirect to in case of successful identity verfication. Mandatory for flow_type=\"corppass_flow_redirect\"

        :param client_redirect_success_url: The client_redirect_success_url of this CorpPassCreate.
        :type client_redirect_success_url: str
        """
        if client_redirect_success_url is not None and len(client_redirect_success_url) > 255:
            raise ValueError("Invalid value for `client_redirect_success_url`, length must be less than or equal to `255`")
        if client_redirect_success_url is not None and len(client_redirect_success_url) < 11:
            raise ValueError("Invalid value for `client_redirect_success_url`, length must be greater than or equal to `11`")

        self._client_redirect_success_url = client_redirect_success_url

    @property
    def enabled(self):
        """Gets the enabled of this CorpPassCreate.

        DEPRECATED. Whether or not to enable the CorpPass flow. Must be true if provided.

        :return: The enabled of this CorpPassCreate.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CorpPassCreate.

        DEPRECATED. Whether or not to enable the CorpPass flow. Must be true if provided.

        :param enabled: The enabled of this CorpPassCreate.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def flow_type(self):
        """Gets the flow_type of this CorpPassCreate.

        The CorpPass flow type.

        :return: The flow_type of this CorpPassCreate.
        :rtype: str
        """
        return self._flow_type

    @flow_type.setter
    def flow_type(self, flow_type):
        """Sets the flow_type of this CorpPassCreate.

        The CorpPass flow type.

        :param flow_type: The flow_type of this CorpPassCreate.
        :type flow_type: str
        """
        allowed_values = ["corppass_flow_redirect", "corppass_flow_email"]  # noqa: E501
        if flow_type not in allowed_values:
            raise ValueError(
                "Invalid value for `flow_type` ({0}), must be one of {1}"
                .format(flow_type, allowed_values)
            )

        self._flow_type = flow_type

    @property
    def signer_email(self):
        """Gets the signer_email of this CorpPassCreate.

        The email of the person who is going to perform the CorpPass process. Mandatory for flow_type=\"corppass_flow_email\"

        :return: The signer_email of this CorpPassCreate.
        :rtype: str
        """
        return self._signer_email

    @signer_email.setter
    def signer_email(self, signer_email):
        """Sets the signer_email of this CorpPassCreate.

        The email of the person who is going to perform the CorpPass process. Mandatory for flow_type=\"corppass_flow_email\"

        :param signer_email: The signer_email of this CorpPassCreate.
        :type signer_email: str
        """
        if signer_email is not None and len(signer_email) > 128:
            raise ValueError("Invalid value for `signer_email`, length must be less than or equal to `128`")
        if signer_email is not None and len(signer_email) < 2:
            raise ValueError("Invalid value for `signer_email`, length must be greater than or equal to `2`")

        self._signer_email = signer_email

    @property
    def signer_name(self):
        """Gets the signer_name of this CorpPassCreate.

        The name of the person who is going to perform the CorpPass process. Mandatory for flow_type=\"corppass_flow_email\"

        :return: The signer_name of this CorpPassCreate.
        :rtype: str
        """
        return self._signer_name

    @signer_name.setter
    def signer_name(self, signer_name):
        """Sets the signer_name of this CorpPassCreate.

        The name of the person who is going to perform the CorpPass process. Mandatory for flow_type=\"corppass_flow_email\"

        :param signer_name: The signer_name of this CorpPassCreate.
        :type signer_name: str
        """
        if signer_name is not None and len(signer_name) > 64:
            raise ValueError("Invalid value for `signer_name`, length must be less than or equal to `64`")
        if signer_name is not None and len(signer_name) < 2:
            raise ValueError("Invalid value for `signer_name`, length must be greater than or equal to `2`")

        self._signer_name = signer_name

    @property
    def simulate_corppass(self):
        """Gets the simulate_corppass of this CorpPassCreate.

        Whether or not to simulate CorpPass. Instead of redirecting to a CorpPass URL, you will receive a redirect to a Storecove URL which will show a page with two buttons: success and fail. This makes development without having test CorpPass credentials possible. Note this only works in sandbox, not in the production environment.

        :return: The simulate_corppass of this CorpPassCreate.
        :rtype: bool
        """
        return self._simulate_corppass

    @simulate_corppass.setter
    def simulate_corppass(self, simulate_corppass):
        """Sets the simulate_corppass of this CorpPassCreate.

        Whether or not to simulate CorpPass. Instead of redirecting to a CorpPass URL, you will receive a redirect to a Storecove URL which will show a page with two buttons: success and fail. This makes development without having test CorpPass credentials possible. Note this only works in sandbox, not in the production environment.

        :param simulate_corppass: The simulate_corppass of this CorpPassCreate.
        :type simulate_corppass: bool
        """

        self._simulate_corppass = simulate_corppass
