# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.contact import Contact
from openapi_server import util


class Party(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, company_name: str=None, contact: Contact=None):
        """Party - a model defined in OpenAPI

        :param address: The address of this Party.
        :param company_name: The company_name of this Party.
        :param contact: The contact of this Party.
        """
        self.openapi_types = {
            'address': Address,
            'company_name': str,
            'contact': Contact
        }

        self.attribute_map = {
            'address': 'address',
            'company_name': 'companyName',
            'contact': 'contact'
        }

        self._address = address
        self._company_name = company_name
        self._contact = contact

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Party':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Party of this Party.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Party.


        :return: The address of this Party.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Party.


        :param address: The address of this Party.
        :type address: Address
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def company_name(self):
        """Gets the company_name of this Party.

        The name of the company receiving the invoice

        :return: The company_name of this Party.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Party.

        The name of the company receiving the invoice

        :param company_name: The company_name of this Party.
        :type company_name: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")
        if company_name is not None and len(company_name) < 2:
            raise ValueError("Invalid value for `company_name`, length must be greater than or equal to `2`")

        self._company_name = company_name

    @property
    def contact(self):
        """Gets the contact of this Party.


        :return: The contact of this Party.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Party.


        :param contact: The contact of this Party.
        :type contact: Contact
        """

        self._contact = contact
