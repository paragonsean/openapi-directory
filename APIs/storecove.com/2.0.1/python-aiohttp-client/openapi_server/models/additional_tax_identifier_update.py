# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdditionalTaxIdentifierUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier: str=None, third_party_password: str=None, third_party_username: str=None):
        """AdditionalTaxIdentifierUpdate - a model defined in OpenAPI

        :param identifier: The identifier of this AdditionalTaxIdentifierUpdate.
        :param third_party_password: The third_party_password of this AdditionalTaxIdentifierUpdate.
        :param third_party_username: The third_party_username of this AdditionalTaxIdentifierUpdate.
        """
        self.openapi_types = {
            'identifier': str,
            'third_party_password': str,
            'third_party_username': str
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'third_party_password': 'third_party_password',
            'third_party_username': 'third_party_username'
        }

        self._identifier = identifier
        self._third_party_password = third_party_password
        self._third_party_username = third_party_username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalTaxIdentifierUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalTaxIdentifierUpdate of this AdditionalTaxIdentifierUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self):
        """Gets the identifier of this AdditionalTaxIdentifierUpdate.

        The identifier.

        :return: The identifier of this AdditionalTaxIdentifierUpdate.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AdditionalTaxIdentifierUpdate.

        The identifier.

        :param identifier: The identifier of this AdditionalTaxIdentifierUpdate.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def third_party_password(self):
        """Gets the third_party_password of this AdditionalTaxIdentifierUpdate.

        The password to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN tax identifier.

        :return: The third_party_password of this AdditionalTaxIdentifierUpdate.
        :rtype: str
        """
        return self._third_party_password

    @third_party_password.setter
    def third_party_password(self, third_party_password):
        """Sets the third_party_password of this AdditionalTaxIdentifierUpdate.

        The password to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN tax identifier.

        :param third_party_password: The third_party_password of this AdditionalTaxIdentifierUpdate.
        :type third_party_password: str
        """
        if third_party_password is not None and len(third_party_password) > 64:
            raise ValueError("Invalid value for `third_party_password`, length must be less than or equal to `64`")
        if third_party_password is not None and len(third_party_password) < 2:
            raise ValueError("Invalid value for `third_party_password`, length must be greater than or equal to `2`")

        self._third_party_password = third_party_password

    @property
    def third_party_username(self):
        """Gets the third_party_username of this AdditionalTaxIdentifierUpdate.

        The username to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN tax identifier.

        :return: The third_party_username of this AdditionalTaxIdentifierUpdate.
        :rtype: str
        """
        return self._third_party_username

    @third_party_username.setter
    def third_party_username(self, third_party_username):
        """Sets the third_party_username of this AdditionalTaxIdentifierUpdate.

        The username to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN tax identifier.

        :param third_party_username: The third_party_username of this AdditionalTaxIdentifierUpdate.
        :type third_party_username: str
        """
        if third_party_username is not None and len(third_party_username) > 64:
            raise ValueError("Invalid value for `third_party_username`, length must be less than or equal to `64`")
        if third_party_username is not None and len(third_party_username) < 2:
            raise ValueError("Invalid value for `third_party_username`, length must be greater than or equal to `2`")

        self._third_party_username = third_party_username
