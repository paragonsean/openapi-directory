# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdditionalTaxIdentifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, county: str=None, id: int=None, identifier: str=None, scheme: str=None, superscheme: str=None):
        """AdditionalTaxIdentifier - a model defined in OpenAPI

        :param country: The country of this AdditionalTaxIdentifier.
        :param county: The county of this AdditionalTaxIdentifier.
        :param id: The id of this AdditionalTaxIdentifier.
        :param identifier: The identifier of this AdditionalTaxIdentifier.
        :param scheme: The scheme of this AdditionalTaxIdentifier.
        :param superscheme: The superscheme of this AdditionalTaxIdentifier.
        """
        self.openapi_types = {
            'country': str,
            'county': str,
            'id': int,
            'identifier': str,
            'scheme': str,
            'superscheme': str
        }

        self.attribute_map = {
            'country': 'country',
            'county': 'county',
            'id': 'id',
            'identifier': 'identifier',
            'scheme': 'scheme',
            'superscheme': 'superscheme'
        }

        self._country = country
        self._county = county
        self._id = id
        self._identifier = identifier
        self._scheme = scheme
        self._superscheme = superscheme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalTaxIdentifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalTaxIdentifier of this AdditionalTaxIdentifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this AdditionalTaxIdentifier.

        The ISO3166 country code to use this identifier for in case of consumerTaxMode.

        :return: The country of this AdditionalTaxIdentifier.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AdditionalTaxIdentifier.

        The ISO3166 country code to use this identifier for in case of consumerTaxMode.

        :param country: The country of this AdditionalTaxIdentifier.
        :type country: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")
        if country is not None and len(country) < 2:
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `2`")

        self._country = country

    @property
    def county(self):
        """Gets the county of this AdditionalTaxIdentifier.

        The county/state inside the country code to use this identifier for in case of consumerTaxMode.

        :return: The county of this AdditionalTaxIdentifier.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this AdditionalTaxIdentifier.

        The county/state inside the country code to use this identifier for in case of consumerTaxMode.

        :param county: The county of this AdditionalTaxIdentifier.
        :type county: str
        """
        if county is not None and len(county) > 2:
            raise ValueError("Invalid value for `county`, length must be less than or equal to `2`")
        if county is not None and len(county) < 2:
            raise ValueError("Invalid value for `county`, length must be greater than or equal to `2`")

        self._county = county

    @property
    def id(self):
        """Gets the id of this AdditionalTaxIdentifier.

        The Storecove assigned id for the AdditionalTaxIdentifier.

        :return: The id of this AdditionalTaxIdentifier.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AdditionalTaxIdentifier.

        The Storecove assigned id for the AdditionalTaxIdentifier.

        :param id: The id of this AdditionalTaxIdentifier.
        :type id: int
        """

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this AdditionalTaxIdentifier.

        The identifier.

        :return: The identifier of this AdditionalTaxIdentifier.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AdditionalTaxIdentifier.

        The identifier.

        :param identifier: The identifier of this AdditionalTaxIdentifier.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def scheme(self):
        """Gets the scheme of this AdditionalTaxIdentifier.

        The scheme of the identifier.

        :return: The scheme of this AdditionalTaxIdentifier.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this AdditionalTaxIdentifier.

        The scheme of the identifier.

        :param scheme: The scheme of this AdditionalTaxIdentifier.
        :type scheme: str
        """
        if scheme is not None and len(scheme) > 64:
            raise ValueError("Invalid value for `scheme`, length must be less than or equal to `64`")
        if scheme is not None and len(scheme) < 2:
            raise ValueError("Invalid value for `scheme`, length must be greater than or equal to `2`")

        self._scheme = scheme

    @property
    def superscheme(self):
        """Gets the superscheme of this AdditionalTaxIdentifier.

        The superscheme of the identifier.

        :return: The superscheme of this AdditionalTaxIdentifier.
        :rtype: str
        """
        return self._superscheme

    @superscheme.setter
    def superscheme(self, superscheme):
        """Sets the superscheme of this AdditionalTaxIdentifier.

        The superscheme of the identifier.

        :param superscheme: The superscheme of this AdditionalTaxIdentifier.
        :type superscheme: str
        """
        if superscheme is not None and len(superscheme) > 64:
            raise ValueError("Invalid value for `superscheme`, length must be less than or equal to `64`")
        if superscheme is not None and len(superscheme) < 2:
            raise ValueError("Invalid value for `superscheme`, length must be greater than or equal to `2`")

        self._superscheme = superscheme
