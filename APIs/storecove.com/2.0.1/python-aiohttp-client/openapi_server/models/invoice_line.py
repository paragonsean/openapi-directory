# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_item_property import AdditionalItemProperty
from openapi_server.models.line_allowance_charge import LineAllowanceCharge
from openapi_server.models.reference import Reference
from openapi_server.models.tax import Tax
import re
from openapi_server import util


class InvoiceLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounting_cost: str=None, additional_item_properties: List[AdditionalItemProperty]=None, allowance_charge: float=None, allowance_charges: List[LineAllowanceCharge]=None, amount_excluding_tax: float=None, amount_excluding_vat: float=None, amount_including_tax: float=None, buyers_item_identification: str=None, description: str=None, invoice_period: str=None, item_price: float=1, line_id: str=None, name: str=None, note: str=None, order_line_reference_line_id: str=None, quantity: float=1, quantity_unit_code: str='C62', references: List[Reference]=None, sellers_item_identification: str=None, standard_item_identification: str=None, standard_item_identification_scheme_agency_id: str='9', standard_item_identification_scheme_id: str='GTIN', tax: Tax=None, taxes_duties_fees: List[Tax]=None):
        """InvoiceLine - a model defined in OpenAPI

        :param accounting_cost: The accounting_cost of this InvoiceLine.
        :param additional_item_properties: The additional_item_properties of this InvoiceLine.
        :param allowance_charge: The allowance_charge of this InvoiceLine.
        :param allowance_charges: The allowance_charges of this InvoiceLine.
        :param amount_excluding_tax: The amount_excluding_tax of this InvoiceLine.
        :param amount_excluding_vat: The amount_excluding_vat of this InvoiceLine.
        :param amount_including_tax: The amount_including_tax of this InvoiceLine.
        :param buyers_item_identification: The buyers_item_identification of this InvoiceLine.
        :param description: The description of this InvoiceLine.
        :param invoice_period: The invoice_period of this InvoiceLine.
        :param item_price: The item_price of this InvoiceLine.
        :param line_id: The line_id of this InvoiceLine.
        :param name: The name of this InvoiceLine.
        :param note: The note of this InvoiceLine.
        :param order_line_reference_line_id: The order_line_reference_line_id of this InvoiceLine.
        :param quantity: The quantity of this InvoiceLine.
        :param quantity_unit_code: The quantity_unit_code of this InvoiceLine.
        :param references: The references of this InvoiceLine.
        :param sellers_item_identification: The sellers_item_identification of this InvoiceLine.
        :param standard_item_identification: The standard_item_identification of this InvoiceLine.
        :param standard_item_identification_scheme_agency_id: The standard_item_identification_scheme_agency_id of this InvoiceLine.
        :param standard_item_identification_scheme_id: The standard_item_identification_scheme_id of this InvoiceLine.
        :param tax: The tax of this InvoiceLine.
        :param taxes_duties_fees: The taxes_duties_fees of this InvoiceLine.
        """
        self.openapi_types = {
            'accounting_cost': str,
            'additional_item_properties': List[AdditionalItemProperty],
            'allowance_charge': float,
            'allowance_charges': List[LineAllowanceCharge],
            'amount_excluding_tax': float,
            'amount_excluding_vat': float,
            'amount_including_tax': float,
            'buyers_item_identification': str,
            'description': str,
            'invoice_period': str,
            'item_price': float,
            'line_id': str,
            'name': str,
            'note': str,
            'order_line_reference_line_id': str,
            'quantity': float,
            'quantity_unit_code': str,
            'references': List[Reference],
            'sellers_item_identification': str,
            'standard_item_identification': str,
            'standard_item_identification_scheme_agency_id': str,
            'standard_item_identification_scheme_id': str,
            'tax': Tax,
            'taxes_duties_fees': List[Tax]
        }

        self.attribute_map = {
            'accounting_cost': 'accountingCost',
            'additional_item_properties': 'additionalItemProperties',
            'allowance_charge': 'allowanceCharge',
            'allowance_charges': 'allowanceCharges',
            'amount_excluding_tax': 'amountExcludingTax',
            'amount_excluding_vat': 'amountExcludingVat',
            'amount_including_tax': 'amountIncludingTax',
            'buyers_item_identification': 'buyersItemIdentification',
            'description': 'description',
            'invoice_period': 'invoicePeriod',
            'item_price': 'itemPrice',
            'line_id': 'lineId',
            'name': 'name',
            'note': 'note',
            'order_line_reference_line_id': 'orderLineReferenceLineId',
            'quantity': 'quantity',
            'quantity_unit_code': 'quantityUnitCode',
            'references': 'references',
            'sellers_item_identification': 'sellersItemIdentification',
            'standard_item_identification': 'standardItemIdentification',
            'standard_item_identification_scheme_agency_id': 'standardItemIdentificationSchemeAgencyId',
            'standard_item_identification_scheme_id': 'standardItemIdentificationSchemeId',
            'tax': 'tax',
            'taxes_duties_fees': 'taxesDutiesFees'
        }

        self._accounting_cost = accounting_cost
        self._additional_item_properties = additional_item_properties
        self._allowance_charge = allowance_charge
        self._allowance_charges = allowance_charges
        self._amount_excluding_tax = amount_excluding_tax
        self._amount_excluding_vat = amount_excluding_vat
        self._amount_including_tax = amount_including_tax
        self._buyers_item_identification = buyers_item_identification
        self._description = description
        self._invoice_period = invoice_period
        self._item_price = item_price
        self._line_id = line_id
        self._name = name
        self._note = note
        self._order_line_reference_line_id = order_line_reference_line_id
        self._quantity = quantity
        self._quantity_unit_code = quantity_unit_code
        self._references = references
        self._sellers_item_identification = sellers_item_identification
        self._standard_item_identification = standard_item_identification
        self._standard_item_identification_scheme_agency_id = standard_item_identification_scheme_agency_id
        self._standard_item_identification_scheme_id = standard_item_identification_scheme_id
        self._tax = tax
        self._taxes_duties_fees = taxes_duties_fees

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceLine of this InvoiceLine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounting_cost(self):
        """Gets the accounting_cost of this InvoiceLine.

        The buyer's accounting cost centre for this invoice line, expressed as text.

        :return: The accounting_cost of this InvoiceLine.
        :rtype: str
        """
        return self._accounting_cost

    @accounting_cost.setter
    def accounting_cost(self, accounting_cost):
        """Sets the accounting_cost of this InvoiceLine.

        The buyer's accounting cost centre for this invoice line, expressed as text.

        :param accounting_cost: The accounting_cost of this InvoiceLine.
        :type accounting_cost: str
        """
        if accounting_cost is not None and len(accounting_cost) < 1:
            raise ValueError("Invalid value for `accounting_cost`, length must be greater than or equal to `1`")

        self._accounting_cost = accounting_cost

    @property
    def additional_item_properties(self):
        """Gets the additional_item_properties of this InvoiceLine.

        An array of additional item properties.

        :return: The additional_item_properties of this InvoiceLine.
        :rtype: List[AdditionalItemProperty]
        """
        return self._additional_item_properties

    @additional_item_properties.setter
    def additional_item_properties(self, additional_item_properties):
        """Sets the additional_item_properties of this InvoiceLine.

        An array of additional item properties.

        :param additional_item_properties: The additional_item_properties of this InvoiceLine.
        :type additional_item_properties: List[AdditionalItemProperty]
        """
        if additional_item_properties is not None and len(additional_item_properties) < 0:
            raise ValueError("Invalid value for `additional_item_properties`, number of items must be greater than or equal to `0`")

        self._additional_item_properties = additional_item_properties

    @property
    def allowance_charge(self):
        """Gets the allowance_charge of this InvoiceLine.

        The discount or surcharge on this item. Should be negative for discounts

        :return: The allowance_charge of this InvoiceLine.
        :rtype: float
        """
        return self._allowance_charge

    @allowance_charge.setter
    def allowance_charge(self, allowance_charge):
        """Sets the allowance_charge of this InvoiceLine.

        The discount or surcharge on this item. Should be negative for discounts

        :param allowance_charge: The allowance_charge of this InvoiceLine.
        :type allowance_charge: float
        """

        self._allowance_charge = allowance_charge

    @property
    def allowance_charges(self):
        """Gets the allowance_charges of this InvoiceLine.

        An array of allowance charges. NOTE: this is currently supported only when sending from/to Italy.

        :return: The allowance_charges of this InvoiceLine.
        :rtype: List[LineAllowanceCharge]
        """
        return self._allowance_charges

    @allowance_charges.setter
    def allowance_charges(self, allowance_charges):
        """Sets the allowance_charges of this InvoiceLine.

        An array of allowance charges. NOTE: this is currently supported only when sending from/to Italy.

        :param allowance_charges: The allowance_charges of this InvoiceLine.
        :type allowance_charges: List[LineAllowanceCharge]
        """
        if allowance_charges is not None and len(allowance_charges) < 0:
            raise ValueError("Invalid value for `allowance_charges`, number of items must be greater than or equal to `0`")

        self._allowance_charges = allowance_charges

    @property
    def amount_excluding_tax(self):
        """Gets the amount_excluding_tax of this InvoiceLine.

        The amount excluding tax. EXPERIMENTAL. Use amountExcludingVat.

        :return: The amount_excluding_tax of this InvoiceLine.
        :rtype: float
        """
        return self._amount_excluding_tax

    @amount_excluding_tax.setter
    def amount_excluding_tax(self, amount_excluding_tax):
        """Sets the amount_excluding_tax of this InvoiceLine.

        The amount excluding tax. EXPERIMENTAL. Use amountExcludingVat.

        :param amount_excluding_tax: The amount_excluding_tax of this InvoiceLine.
        :type amount_excluding_tax: float
        """

        self._amount_excluding_tax = amount_excluding_tax

    @property
    def amount_excluding_vat(self):
        """Gets the amount_excluding_vat of this InvoiceLine.

        The amount excluding VAT. Should equal quantity x itemPrice + allowanceCharge.

        :return: The amount_excluding_vat of this InvoiceLine.
        :rtype: float
        """
        return self._amount_excluding_vat

    @amount_excluding_vat.setter
    def amount_excluding_vat(self, amount_excluding_vat):
        """Sets the amount_excluding_vat of this InvoiceLine.

        The amount excluding VAT. Should equal quantity x itemPrice + allowanceCharge.

        :param amount_excluding_vat: The amount_excluding_vat of this InvoiceLine.
        :type amount_excluding_vat: float
        """

        self._amount_excluding_vat = amount_excluding_vat

    @property
    def amount_including_tax(self):
        """Gets the amount_including_tax of this InvoiceLine.

        The amount including tax. Can only be used for \"priceMode\": \"price_mode_gross\". Use either this property or amountExcludingTax (amountExcludingVat).

        :return: The amount_including_tax of this InvoiceLine.
        :rtype: float
        """
        return self._amount_including_tax

    @amount_including_tax.setter
    def amount_including_tax(self, amount_including_tax):
        """Sets the amount_including_tax of this InvoiceLine.

        The amount including tax. Can only be used for \"priceMode\": \"price_mode_gross\". Use either this property or amountExcludingTax (amountExcludingVat).

        :param amount_including_tax: The amount_including_tax of this InvoiceLine.
        :type amount_including_tax: float
        """

        self._amount_including_tax = amount_including_tax

    @property
    def buyers_item_identification(self):
        """Gets the buyers_item_identification of this InvoiceLine.

        DEPRECATED. Use the references array with 'line_buyers_item_identification' documentType. The ID the buyer assigned to this item.

        :return: The buyers_item_identification of this InvoiceLine.
        :rtype: str
        """
        return self._buyers_item_identification

    @buyers_item_identification.setter
    def buyers_item_identification(self, buyers_item_identification):
        """Sets the buyers_item_identification of this InvoiceLine.

        DEPRECATED. Use the references array with 'line_buyers_item_identification' documentType. The ID the buyer assigned to this item.

        :param buyers_item_identification: The buyers_item_identification of this InvoiceLine.
        :type buyers_item_identification: str
        """
        if buyers_item_identification is not None and len(buyers_item_identification) < 1:
            raise ValueError("Invalid value for `buyers_item_identification`, length must be greater than or equal to `1`")

        self._buyers_item_identification = buyers_item_identification

    @property
    def description(self):
        """Gets the description of this InvoiceLine.

        The description for this invoice line.

        :return: The description of this InvoiceLine.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InvoiceLine.

        The description for this invoice line.

        :param description: The description of this InvoiceLine.
        :type description: str
        """
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def invoice_period(self):
        """Gets the invoice_period of this InvoiceLine.

        The period (or specific date) to which the invoice line applies. Format: yyyy-mm-dd - yyyy-mm-dd.

        :return: The invoice_period of this InvoiceLine.
        :rtype: str
        """
        return self._invoice_period

    @invoice_period.setter
    def invoice_period(self, invoice_period):
        """Sets the invoice_period of this InvoiceLine.

        The period (or specific date) to which the invoice line applies. Format: yyyy-mm-dd - yyyy-mm-dd.

        :param invoice_period: The invoice_period of this InvoiceLine.
        :type invoice_period: str
        """
        if invoice_period is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$', invoice_period):
            raise ValueError("Invalid value for `invoice_period`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$/`")

        self._invoice_period = invoice_period

    @property
    def item_price(self):
        """Gets the item_price of this InvoiceLine.

        The price per item (may be fractional)

        :return: The item_price of this InvoiceLine.
        :rtype: float
        """
        return self._item_price

    @item_price.setter
    def item_price(self, item_price):
        """Sets the item_price of this InvoiceLine.

        The price per item (may be fractional)

        :param item_price: The item_price of this InvoiceLine.
        :type item_price: float
        """

        self._item_price = item_price

    @property
    def line_id(self):
        """Gets the line_id of this InvoiceLine.

        The id for this invoice line.

        :return: The line_id of this InvoiceLine.
        :rtype: str
        """
        return self._line_id

    @line_id.setter
    def line_id(self, line_id):
        """Sets the line_id of this InvoiceLine.

        The id for this invoice line.

        :param line_id: The line_id of this InvoiceLine.
        :type line_id: str
        """
        if line_id is not None and len(line_id) < 1:
            raise ValueError("Invalid value for `line_id`, length must be greater than or equal to `1`")

        self._line_id = line_id

    @property
    def name(self):
        """Gets the name of this InvoiceLine.

        A short name for this invoice line. If not provided, it will be taken from description and description will be set to an emtpy string.

        :return: The name of this InvoiceLine.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InvoiceLine.

        A short name for this invoice line. If not provided, it will be taken from description and description will be set to an emtpy string.

        :param name: The name of this InvoiceLine.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def note(self):
        """Gets the note of this InvoiceLine.

        A note to add to the document line

        :return: The note of this InvoiceLine.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this InvoiceLine.

        A note to add to the document line

        :param note: The note of this InvoiceLine.
        :type note: str
        """

        self._note = note

    @property
    def order_line_reference_line_id(self):
        """Gets the order_line_reference_line_id of this InvoiceLine.

        A reference to the LineID of the order. The order itself is specified as the orderReference at the invoice level. It is not possible to specify an orderReference at the invoice line level. An invoice MUST at this time be for a single order only.

        :return: The order_line_reference_line_id of this InvoiceLine.
        :rtype: str
        """
        return self._order_line_reference_line_id

    @order_line_reference_line_id.setter
    def order_line_reference_line_id(self, order_line_reference_line_id):
        """Sets the order_line_reference_line_id of this InvoiceLine.

        A reference to the LineID of the order. The order itself is specified as the orderReference at the invoice level. It is not possible to specify an orderReference at the invoice line level. An invoice MUST at this time be for a single order only.

        :param order_line_reference_line_id: The order_line_reference_line_id of this InvoiceLine.
        :type order_line_reference_line_id: str
        """
        if order_line_reference_line_id is not None and len(order_line_reference_line_id) < 1:
            raise ValueError("Invalid value for `order_line_reference_line_id`, length must be greater than or equal to `1`")

        self._order_line_reference_line_id = order_line_reference_line_id

    @property
    def quantity(self):
        """Gets the quantity of this InvoiceLine.

        The number of items (may be fractional).

        :return: The quantity of this InvoiceLine.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InvoiceLine.

        The number of items (may be fractional).

        :param quantity: The quantity of this InvoiceLine.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def quantity_unit_code(self):
        """Gets the quantity_unit_code of this InvoiceLine.

        The unit of measure that applies to the invoiced quantity. Codes for unit of packaging from UNECE Recommendation No. 21 can be used in accordance with the descriptions in the \"Intro\" section of UN/ECE Recommendation 20, Revision 11 (2015): The 2 character alphanumeric code values in UNECE Recommendation 21 shall be used. To avoid duplication with existing code values in UNECE Recommendation No. 20, each code value from UNECE Recommendation 21 shall be prefixed with an “X”, resulting in a 3 alphanumeric code when used as a unit of measure. Note that the following additionally allowed codes are deprecated and will be converted to C62: 04, 05, 08, 16, 17, 18, 19, 26, 29, 30, 31, 32, 36, 43, 44, 45, 46, 47, 48, 53, 54, 62, 63, 64, 66, 69, 71, 72, 73, 76, 78, 84, 90, 92, 93, 94, 95, 96, 97, 98, 1A, 1B, 1C, 1D, 1E, 1F, 1G, 1H, 1J, 1K, 1L, 1M, 1X, 2V, 2W, 3E, 3G, 3H, 3I, 4A, 4B, 4E, 5C, 5F, 5G, 5H, 5I, 5K, 5P, 5Q, A1, A25, A50, A51, A52, A57, A58, A60, A61, A62, A63, A64, A65, A66, A67, A77, A78, A79, A80, A81, A82, A83, AJ, AM, AP, AR, ARE, ATT, AV, AW, B0, B2, B36, B37, B38, B39, B40, B5, B51, B6, B65, B9, BD, BE, BG, BH, BJ, BK, BL, BO, BR, BT, BW, BX, BZ, C1, C2, C4, C5, C6, C77, C98, CA, CH, CJ, CK, CL, CO, CQ, CR, CS, CT, CU, CV, CY, CZ, D14, D28, D35, D37, D38, D39, D40, D64, D66, D67, D7, D70, D71, D72, D75, D76, D79, D8, D9, D90, D92, D96, D97, D98, D99, DC, DE, DI, DQ, DR, DRM, DS, DU, DX, DY, E2, E3, E5, EC, EP, EV, F1, F9, FB, FD, FE, FG, FM, G7, GC, GD, GH, GK, GN, GRT, GT, GW, GY, GZ, H1, H2, HAR, HD, HE, HF, HI, HJ, HK, HL, HN, HO, HP, HS, HT, HY, IC, IF, II, IL, IM, IP, IT, JB, JG, JO, JR, K5, KD, KF, KG, KS, KTM, LC, LE, LI, LJ, LX, M0, MA, MF, MK, MQ, MT, MV, N2, NB, NBB, NC, ND, NE, NG, NH, NI, NJ, NN, NPL, NPR, NQ, NR, NRL, NTT, NV, NY, OP, OZ, P0, P3, P4, P6, P7, P8, P9, PA, PB, PE, PF, PG, PK, PL, PM, PN, PT, PU, PV, PW, PY, PZ, QD, QH, QK, QT, R4, RA, RD, RG, RK, RL, RN, RO, RS, RU, S5, S6, S7, S8, SA, SD, SE, SHT, SK, SL, SN, SO, SP, SS, SST, ST, SV, T1, T4, T5, T6, T7, T8, TA, TC, TD, TE, TF, TJ, TK, TL, TN, TQ, TR, TS, TSD, TSH, TT, TU, TV, TW, TY, UA, UD, UE, UF, UH, UM, VI, VQ, VS, W4, WH, WI, WR, WW, YL, YT, Z1, Z2, Z3, Z4, Z5, Z6, Z8

        :return: The quantity_unit_code of this InvoiceLine.
        :rtype: str
        """
        return self._quantity_unit_code

    @quantity_unit_code.setter
    def quantity_unit_code(self, quantity_unit_code):
        """Sets the quantity_unit_code of this InvoiceLine.

        The unit of measure that applies to the invoiced quantity. Codes for unit of packaging from UNECE Recommendation No. 21 can be used in accordance with the descriptions in the \"Intro\" section of UN/ECE Recommendation 20, Revision 11 (2015): The 2 character alphanumeric code values in UNECE Recommendation 21 shall be used. To avoid duplication with existing code values in UNECE Recommendation No. 20, each code value from UNECE Recommendation 21 shall be prefixed with an “X”, resulting in a 3 alphanumeric code when used as a unit of measure. Note that the following additionally allowed codes are deprecated and will be converted to C62: 04, 05, 08, 16, 17, 18, 19, 26, 29, 30, 31, 32, 36, 43, 44, 45, 46, 47, 48, 53, 54, 62, 63, 64, 66, 69, 71, 72, 73, 76, 78, 84, 90, 92, 93, 94, 95, 96, 97, 98, 1A, 1B, 1C, 1D, 1E, 1F, 1G, 1H, 1J, 1K, 1L, 1M, 1X, 2V, 2W, 3E, 3G, 3H, 3I, 4A, 4B, 4E, 5C, 5F, 5G, 5H, 5I, 5K, 5P, 5Q, A1, A25, A50, A51, A52, A57, A58, A60, A61, A62, A63, A64, A65, A66, A67, A77, A78, A79, A80, A81, A82, A83, AJ, AM, AP, AR, ARE, ATT, AV, AW, B0, B2, B36, B37, B38, B39, B40, B5, B51, B6, B65, B9, BD, BE, BG, BH, BJ, BK, BL, BO, BR, BT, BW, BX, BZ, C1, C2, C4, C5, C6, C77, C98, CA, CH, CJ, CK, CL, CO, CQ, CR, CS, CT, CU, CV, CY, CZ, D14, D28, D35, D37, D38, D39, D40, D64, D66, D67, D7, D70, D71, D72, D75, D76, D79, D8, D9, D90, D92, D96, D97, D98, D99, DC, DE, DI, DQ, DR, DRM, DS, DU, DX, DY, E2, E3, E5, EC, EP, EV, F1, F9, FB, FD, FE, FG, FM, G7, GC, GD, GH, GK, GN, GRT, GT, GW, GY, GZ, H1, H2, HAR, HD, HE, HF, HI, HJ, HK, HL, HN, HO, HP, HS, HT, HY, IC, IF, II, IL, IM, IP, IT, JB, JG, JO, JR, K5, KD, KF, KG, KS, KTM, LC, LE, LI, LJ, LX, M0, MA, MF, MK, MQ, MT, MV, N2, NB, NBB, NC, ND, NE, NG, NH, NI, NJ, NN, NPL, NPR, NQ, NR, NRL, NTT, NV, NY, OP, OZ, P0, P3, P4, P6, P7, P8, P9, PA, PB, PE, PF, PG, PK, PL, PM, PN, PT, PU, PV, PW, PY, PZ, QD, QH, QK, QT, R4, RA, RD, RG, RK, RL, RN, RO, RS, RU, S5, S6, S7, S8, SA, SD, SE, SHT, SK, SL, SN, SO, SP, SS, SST, ST, SV, T1, T4, T5, T6, T7, T8, TA, TC, TD, TE, TF, TJ, TK, TL, TN, TQ, TR, TS, TSD, TSH, TT, TU, TV, TW, TY, UA, UD, UE, UF, UH, UM, VI, VQ, VS, W4, WH, WI, WR, WW, YL, YT, Z1, Z2, Z3, Z4, Z5, Z6, Z8

        :param quantity_unit_code: The quantity_unit_code of this InvoiceLine.
        :type quantity_unit_code: str
        """
        allowed_values = ["10", "11", "13", "14", "15", "20", "21", "22", "23", "24", "25", "27", "28", "33", "34", "35", "37", "38", "40", "41", "56", "57", "58", "59", "60", "61", "74", "77", "80", "81", "85", "87", "89", "91", "1I", "2A", "2B", "2C", "2G", "2H", "2I", "2J", "2K", "2L", "2M", "2N", "2P", "2Q", "2R", "2U", "2X", "2Y", "2Z", "3B", "3C", "4C", "4G", "4H", "4K", "4L", "4M", "4N", "4O", "4P", "4Q", "4R", "4T", "4U", "4W", "4X", "5A", "5B", "5E", "5J", "A10", "A11", "A12", "A13", "A14", "A15", "A16", "A17", "A18", "A19", "A2", "A20", "A21", "A22", "A23", "A24", "A26", "A27", "A28", "A29", "A3", "A30", "A31", "A32", "A33", "A34", "A35", "A36", "A37", "A38", "A39", "A4", "A40", "A41", "A42", "A43", "A44", "A45", "A47", "A48", "A49", "A5", "A53", "A54", "A55", "A56", "A59", "A6", "A68", "A69", "A7", "A70", "A71", "A73", "A74", "A75", "A76", "A8", "A84", "A85", "A86", "A87", "A88", "A89", "A9", "A90", "A91", "A93", "A94", "A95", "A96", "A97", "A98", "A99", "AA", "AB", "ACR", "ACT", "AD", "AE", "AH", "AI", "AK", "AL", "AMH", "AMP", "ANN", "APZ", "AQ", "AS", "ASM", "ASU", "ATM", "AWG", "AY", "AZ", "B1", "B10", "B11", "B12", "B13", "B14", "B15", "B16", "B17", "B18", "B19", "B20", "B21", "B22", "B23", "B24", "B25", "B26", "B27", "B28", "B29", "B3", "B30", "B31", "B32", "B33", "B34", "B35", "B4", "B41", "B42", "B43", "B44", "B45", "B46", "B47", "B48", "B49", "B50", "B52", "B53", "B54", "B55", "B56", "B57", "B58", "B59", "B60", "B61", "B62", "B63", "B64", "B66", "B67", "B68", "B69", "B7", "B70", "B71", "B72", "B73", "B74", "B75", "B76", "B77", "B78", "B79", "B8", "B80", "B81", "B82", "B83", "B84", "B85", "B86", "B87", "B88", "B89", "B90", "B91", "B92", "B93", "B94", "B95", "B96", "B97", "B98", "B99", "BAR", "BB", "BFT", "BHP", "BIL", "BLD", "BLL", "BP", "BPM", "BQL", "BTU", "BUA", "BUI", "C0", "C10", "C11", "C12", "C13", "C14", "C15", "C16", "C17", "C18", "C19", "C20", "C21", "C22", "C23", "C24", "C25", "C26", "C27", "C28", "C29", "C3", "C30", "C31", "C32", "C33", "C34", "C35", "C36", "C37", "C38", "C39", "C40", "C41", "C42", "C43", "C44", "C45", "C46", "C47", "C48", "C49", "C50", "C51", "C52", "C53", "C54", "C55", "C56", "C57", "C58", "C59", "C60", "C61", "C62", "C63", "C64", "C65", "C66", "C67", "C68", "C69", "C7", "C70", "C71", "C72", "C73", "C74", "C75", "C76", "C78", "C79", "C8", "C80", "C81", "C82", "C83", "C84", "C85", "C86", "C87", "C88", "C89", "C9", "C90", "C91", "C92", "C93", "C94", "C95", "C96", "C97", "C99", "CCT", "CDL", "CEL", "CEN", "CG", "CGM", "CKG", "CLF", "CLT", "CMK", "CMQ", "CMT", "CNP", "CNT", "COU", "CTG", "CTM", "CTN", "CUR", "CWA", "CWI", "D03", "D04", "D1", "D10", "D11", "D12", "D13", "D15", "D16", "D17", "D18", "D19", "D2", "D20", "D21", "D22", "D23", "D24", "D25", "D26", "D27", "D29", "D30", "D31", "D32", "D33", "D34", "D36", "D41", "D42", "D43", "D44", "D45", "D46", "D47", "D48", "D49", "D5", "D50", "D51", "D52", "D53", "D54", "D55", "D56", "D57", "D58", "D59", "D6", "D60", "D61", "D62", "D63", "D65", "D68", "D69", "D73", "D74", "D77", "D78", "D80", "D81", "D82", "D83", "D85", "D86", "D87", "D88", "D89", "D91", "D93", "D94", "D95", "DAA", "DAD", "DAY", "DB", "DD", "DEC", "DG", "DJ", "DLT", "DMA", "DMK", "DMO", "DMQ", "DMT", "DN", "DPC", "DPR", "DPT", "DRA", "DRI", "DRL", "DT", "DTN", "DWT", "DZN", "DZP", "E01", "E07", "E08", "E09", "E10", "E12", "E14", "E15", "E16", "E17", "E18", "E19", "E20", "E21", "E22", "E23", "E25", "E27", "E28", "E30", "E31", "E32", "E33", "E34", "E35", "E36", "E37", "E38", "E39", "E4", "E40", "E41", "E42", "E43", "E44", "E45", "E46", "E47", "E48", "E49", "E50", "E51", "E52", "E53", "E54", "E55", "E56", "E57", "E58", "E59", "E60", "E61", "E62", "E63", "E64", "E65", "E66", "E67", "E68", "E69", "E70", "E71", "E72", "E73", "E74", "E75", "E76", "E77", "E78", "E79", "E80", "E81", "E82", "E83", "E84", "E85", "E86", "E87", "E88", "E89", "E90", "E91", "E92", "E93", "E94", "E95", "E96", "E97", "E98", "E99", "EA", "EB", "EQ", "F01", "F02", "F03", "F04", "F05", "F06", "F07", "F08", "F10", "F11", "F12", "F13", "F14", "F15", "F16", "F17", "F18", "F19", "F20", "F21", "F22", "F23", "F24", "F25", "F26", "F27", "F28", "F29", "F30", "F31", "F32", "F33", "F34", "F35", "F36", "F37", "F38", "F39", "F40", "F41", "F42", "F43", "F44", "F45", "F46", "F47", "F48", "F49", "F50", "F51", "F52", "F53", "F54", "F55", "F56", "F57", "F58", "F59", "F60", "F61", "F62", "F63", "F64", "F65", "F66", "F67", "F68", "F69", "F70", "F71", "F72", "F73", "F74", "F75", "F76", "F77", "F78", "F79", "F80", "F81", "F82", "F83", "F84", "F85", "F86", "F87", "F88", "F89", "F90", "F91", "F92", "F93", "F94", "F95", "F96", "F97", "F98", "F99", "FAH", "FAR", "FBM", "FC", "FF", "FH", "FIT", "FL", "FOT", "FP", "FR", "FS", "FTK", "FTQ", "G01", "G04", "G05", "G06", "G08", "G09", "G10", "G11", "G12", "G13", "G14", "G15", "G16", "G17", "G18", "G19", "G2", "G20", "G21", "G23", "G24", "G25", "G26", "G27", "G28", "G29", "G3", "G30", "G31", "G32", "G33", "G34", "G35", "G36", "G37", "G38", "G39", "G40", "G41", "G42", "G43", "G44", "G45", "G46", "G47", "G48", "G49", "G50", "G51", "G52", "G53", "G54", "G55", "G56", "G57", "G58", "G59", "G60", "G61", "G62", "G63", "G64", "G65", "G66", "G67", "G68", "G69", "G70", "G71", "G72", "G73", "G74", "G75", "G76", "G77", "G78", "G79", "G80", "G81", "G82", "G83", "G84", "G85", "G86", "G87", "G88", "G89", "G90", "G91", "G92", "G93", "G94", "G95", "G96", "G97", "G98", "G99", "GB", "GBQ", "GDW", "GE", "GF", "GFI", "GGR", "GIA", "GIC", "GII", "GIP", "GJ", "GL", "GLD", "GLI", "GLL", "GM", "GO", "GP", "GQ", "GRM", "GRN", "GRO", "GV", "GWH", "H03", "H04", "H05", "H06", "H07", "H08", "H09", "H10", "H11", "H12", "H13", "H14", "H15", "H16", "H18", "H19", "H20", "H21", "H22", "H23", "H24", "H25", "H26", "H27", "H28", "H29", "H30", "H31", "H32", "H33", "H34", "H35", "H36", "H37", "H38", "H39", "H40", "H41", "H42", "H43", "H44", "H45", "H46", "H47", "H48", "H49", "H50", "H51", "H52", "H53", "H54", "H55", "H56", "H57", "H58", "H59", "H60", "H61", "H62", "H63", "H64", "H65", "H66", "H67", "H68", "H69", "H70", "H71", "H72", "H73", "H74", "H75", "H76", "H77", "H79", "H80", "H81", "H82", "H83", "H84", "H85", "H87", "H88", "H89", "H90", "H91", "H92", "H93", "H94", "H95", "H96", "H98", "H99", "HA", "HBA", "HBX", "HC", "HDW", "HEA", "HGM", "HH", "HIU", "HKM", "HLT", "HM", "HMQ", "HMT", "HPA", "HTZ", "HUR", "IA", "IE", "INH", "INK", "INQ", "ISD", "IU", "IV", "J10", "J12", "J13", "J14", "J15", "J16", "J17", "J18", "J19", "J2", "J20", "J21", "J22", "J23", "J24", "J25", "J26", "J27", "J28", "J29", "J30", "J31", "J32", "J33", "J34", "J35", "J36", "J38", "J39", "J40", "J41", "J42", "J43", "J44", "J45", "J46", "J47", "J48", "J49", "J50", "J51", "J52", "J53", "J54", "J55", "J56", "J57", "J58", "J59", "J60", "J61", "J62", "J63", "J64", "J65", "J66", "J67", "J68", "J69", "J70", "J71", "J72", "J73", "J74", "J75", "J76", "J78", "J79", "J81", "J82", "J83", "J84", "J85", "J87", "J90", "J91", "J92", "J93", "J95", "J96", "J97", "J98", "J99", "JE", "JK", "JM", "JNT", "JOU", "JPS", "JWL", "K1", "K10", "K11", "K12", "K13", "K14", "K15", "K16", "K17", "K18", "K19", "K2", "K20", "K21", "K22", "K23", "K26", "K27", "K28", "K3", "K30", "K31", "K32", "K33", "K34", "K35", "K36", "K37", "K38", "K39", "K40", "K41", "K42", "K43", "K45", "K46", "K47", "K48", "K49", "K50", "K51", "K52", "K53", "K54", "K55", "K58", "K59", "K6", "K60", "K61", "K62", "K63", "K64", "K65", "K66", "K67", "K68", "K69", "K70", "K71", "K73", "K74", "K75", "K76", "K77", "K78", "K79", "K80", "K81", "K82", "K83", "K84", "K85", "K86", "K87", "K88", "K89", "K90", "K91", "K92", "K93", "K94", "K95", "K96", "K97", "K98", "K99", "KA", "KAT", "KB", "KBA", "KCC", "KDW", "KEL", "KGM", "KGS", "KHY", "KHZ", "KI", "KIC", "KIP", "KJ", "KJO", "KL", "KLK", "KLX", "KMA", "KMH", "KMK", "KMQ", "KMT", "KNI", "KNM", "KNS", "KNT", "KO", "KPA", "KPH", "KPO", "KPP", "KR", "KSD", "KSH", "KT", "KTN", "KUR", "KVA", "KVR", "KVT", "KW", "KWH", "KWO", "KWT", "KX", "L10", "L11", "L12", "L13", "L14", "L15", "L16", "L17", "L18", "L19", "L2", "L20", "L21", "L23", "L24", "L25", "L26", "L27", "L28", "L29", "L30", "L31", "L32", "L33", "L34", "L35", "L36", "L37", "L38", "L39", "L40", "L41", "L42", "L43", "L44", "L45", "L46", "L47", "L48", "L49", "L50", "L51", "L52", "L53", "L54", "L55", "L56", "L57", "L58", "L59", "L60", "L63", "L64", "L65", "L66", "L67", "L68", "L69", "L70", "L71", "L72", "L73", "L74", "L75", "L76", "L77", "L78", "L79", "L80", "L81", "L82", "L83", "L84", "L85", "L86", "L87", "L88", "L89", "L90", "L91", "L92", "L93", "L94", "L95", "L96", "L98", "L99", "LA", "LAC", "LBR", "LBT", "LD", "LEF", "LF", "LH", "LK", "LM", "LN", "LO", "LP", "LPA", "LR", "LS", "LTN", "LTR", "LUB", "LUM", "LUX", "LY", "M1", "M10", "M11", "M12", "M13", "M14", "M15", "M16", "M17", "M18", "M19", "M20", "M21", "M22", "M23", "M24", "M25", "M26", "M27", "M29", "M30", "M31", "M32", "M33", "M34", "M35", "M36", "M37", "M38", "M39", "M4", "M40", "M41", "M42", "M43", "M44", "M45", "M46", "M47", "M48", "M49", "M5", "M50", "M51", "M52", "M53", "M55", "M56", "M57", "M58", "M59", "M60", "M61", "M62", "M63", "M64", "M65", "M66", "M67", "M68", "M69", "M7", "M70", "M71", "M72", "M73", "M74", "M75", "M76", "M77", "M78", "M79", "M80", "M81", "M82", "M83", "M84", "M85", "M86", "M87", "M88", "M89", "M9", "M90", "M91", "M92", "M93", "M94", "M95", "M96", "M97", "M98", "M99", "MAH", "MAL", "MAM", "MAR", "MAW", "MBE", "MBF", "MBR", "MC", "MCU", "MD", "MGM", "MHZ", "MIK", "MIL", "MIN", "MIO", "MIU", "MLD", "MLT", "MMK", "MMQ", "MMT", "MND", "MON", "MPA", "MQH", "MQS", "MSK", "MTK", "MTQ", "MTR", "MTS", "MVA", "MWH", "N1", "N10", "N11", "N12", "N13", "N14", "N15", "N16", "N17", "N18", "N19", "N20", "N21", "N22", "N23", "N24", "N25", "N26", "N27", "N28", "N29", "N3", "N30", "N31", "N32", "N33", "N34", "N35", "N36", "N37", "N38", "N39", "N40", "N41", "N42", "N43", "N44", "N45", "N46", "N47", "N48", "N49", "N50", "N51", "N52", "N53", "N54", "N55", "N56", "N57", "N58", "N59", "N60", "N61", "N62", "N63", "N64", "N65", "N66", "N67", "N68", "N69", "N70", "N71", "N72", "N73", "N74", "N75", "N76", "N77", "N78", "N79", "N80", "N81", "N82", "N83", "N84", "N85", "N86", "N87", "N88", "N89", "N90", "N91", "N92", "N93", "N94", "N95", "N96", "N97", "N98", "N99", "NA", "NAR", "NCL", "NEW", "NF", "NIL", "NIU", "NL", "NM3", "NMI", "NMP", "NPT", "NT", "NU", "NX", "OA", "ODE", "OHM", "true", "ONZ", "OPM", "OT", "OZA", "OZI", "P1", "P10", "P11", "P12", "P13", "P14", "P15", "P16", "P17", "P18", "P19", "P2", "P20", "P21", "P22", "P23", "P24", "P25", "P26", "P27", "P28", "P29", "P30", "P31", "P32", "P33", "P34", "P35", "P36", "P37", "P38", "P39", "P40", "P41", "P42", "P43", "P44", "P45", "P46", "P47", "P48", "P49", "P5", "P50", "P51", "P52", "P53", "P54", "P55", "P56", "P57", "P58", "P59", "P60", "P61", "P62", "P63", "P64", "P65", "P66", "P67", "P68", "P69", "P70", "P71", "P72", "P73", "P74", "P75", "P76", "P77", "P78", "P79", "P80", "P81", "P82", "P83", "P84", "P85", "P86", "P87", "P88", "P89", "P90", "P91", "P92", "P93", "P94", "P95", "P96", "P97", "P98", "P99", "PAL", "PD", "PFL", "PGL", "PI", "PLA", "PO", "PQ", "PR", "PS", "PTD", "PTI", "PTL", "PTN", "Q10", "Q11", "Q12", "Q13", "Q14", "Q15", "Q16", "Q17", "Q18", "Q19", "Q20", "Q21", "Q22", "Q23", "Q24", "Q25", "Q26", "Q27", "Q28", "Q29", "Q30", "Q31", "Q32", "Q33", "Q34", "Q35", "Q36", "Q37", "Q38", "Q39", "Q40", "Q3", "QA", "QAN", "QB", "QR", "QTD", "QTI", "QTL", "QTR", "R1", "R9", "RH", "RM", "ROM", "RP", "RPM", "RPS", "RT", "S3", "S4", "SAN", "SCO", "SCR", "SEC", "SET", "SG", "SIE", "SM3", "SMI", "SQ", "SQR", "SR", "STC", "STI", "STK", "STL", "STN", "STW", "SW", "SX", "SYR", "T0", "T3", "TAH", "TAN", "TI", "TIC", "TIP", "TKM", "TMS", "TNE", "TP", "TPI", "TPR", "TQD", "TRL", "TST", "TTS", "U1", "U2", "UB", "UC", "VA", "VLT", "VP", "W2", "WA", "WB", "WCD", "WE", "WEB", "WEE", "WG", "WHR", "WM", "WSD", "WTT", "X1", "YDK", "YDQ", "YRD", "Z11", "ZP", "ZZ", "X1A", "X1B", "X1D", "X1F", "X1G", "X1W", "X2C", "X3A", "X3H", "X43", "X44", "X4A", "X4B", "X4C", "X4D", "X4F", "X4G", "X4H", "X5H", "X5L", "X5M", "X6H", "X6P", "X7A", "X7B", "X8A", "X8B", "X8C", "XAA", "XAB", "XAC", "XAD", "XAE", "XAF", "XAG", "XAH", "XAI", "XAJ", "XAL", "XAM", "XAP", "XAT", "XAV", "XB4", "XBA", "XBB", "XBC", "XBD", "XBE", "XBF", "XBG", "XBH", "XBI", "XBJ", "XBK", "XBL", "XBM", "XBN", "XBO", "XBP", "XBQ", "XBR", "XBS", "XBT", "XBU", "XBV", "XBW", "XBX", "XBY", "XBZ", "XCA", "XCB", "XCC", "XCD", "XCE", "XCF", "XCG", "XCH", "XCI", "XCJ", "XCK", "XCL", "XCM", "XCN", "XCO", "XCP", "XCQ", "XCR", "XCS", "XCT", "XCU", "XCV", "XCW", "XCX", "XCY", "XCZ", "XDA", "XDB", "XDC", "XDG", "XDH", "XDI", "XDJ", "XDK", "XDL", "XDM", "XDN", "XDP", "XDR", "XDS", "XDT", "XDU", "XDV", "XDW", "XDX", "XDY", "XEC", "XED", "XEE", "XEF", "XEG", "XEH", "XEI", "XEN", "XFB", "XFC", "XFD", "XFE", "XFI", "XFL", "XFO", "XFP", "XFR", "XFT", "XFW", "XFX", "XGB", "XGI", "XGL", "XGR", "XGU", "XGY", "XGZ", "XHA", "XHB", "XHC", "XHG", "XHN", "XHR", "XIA", "XIB", "XIC", "XID", "XIE", "XIF", "XIG", "XIH", "XIK", "XIL", "XIN", "XIZ", "XJB", "XJC", "XJG", "XJR", "XJT", "XJY", "XKG", "XKI", "XLE", "XLG", "XLT", "XLU", "XLV", "XLZ", "XMA", "XMB", "XMC", "XME", "XMR", "XMS", "XMT", "XMW", "XMX", "XNA", "XNE", "XNF", "XNG", "XNS", "XNT", "XNU", "XNV", "XOA", "XOB", "XOC", "XOD", "XOE", "XOF", "XOK", "XOT", "XOU", "XP2", "XPA", "XPB", "XPC", "XPD", "XPE", "XPF", "XPG", "XPH", "XPI", "XPJ", "XPK", "XPL", "XPN", "XPO", "XPP", "XPR", "XPT", "XPU", "XPV", "XPX", "XPY", "XPZ", "XQA", "XQB", "XQC", "XQD", "XQF", "XQG", "XQH", "XQJ", "XQK", "XQL", "XQM", "XQN", "XQP", "XQQ", "XQR", "XQS", "XRD", "XRG", "XRJ", "XRK", "XRL", "XRO", "XRT", "XRZ", "XSA", "XSB", "XSC", "XSD", "XSE", "XSH", "XSI", "XSK", "XSL", "XSM", "XSO", "XSP", "XSS", "XST", "XSU", "XSV", "XSW", "XSY", "XSZ", "XT1", "XTB", "XTC", "XTD", "XTE", "XTG", "XTI", "XTK", "XTL", "XTN", "XTO", "XTR", "XTS", "XTT", "XTU", "XTV", "XTW", "XTY", "XTZ", "XUC", "XUN", "XVA", "XVG", "XVI", "XVK", "XVL", "XVO", "XVP", "XVQ", "XVN", "XVR", "XVS", "XVY", "XWA", "XWB", "XWC", "XWD", "XWF", "XWG", "XWH", "XWJ", "XWK", "XWL", "XWM", "XWN", "XWP", "XWQ", "XWR", "XWS", "XWT", "XWU", "XWV", "XWW", "XWX", "XWY", "XWZ", "XXA", "XXB", "XXC", "XXD", "XXF", "XXG", "XXH", "XXJ", "XXK", "XYA", "XYB", "XYC", "XYD", "XYF", "XYG", "XYH", "XYJ", "XYK", "XYL", "XYM", "XYN", "XYP", "XYQ", "XYR", "XYS", "XYT", "XYV", "XYW", "XYX", "XYY", "XYZ", "XZA", "XZB", "XZC", "XZD", "XZF", "XZG", "XZH", "XZJ", "XZK", "XZL", "XZM", "XZN", "XZP", "XZQ", "XZR", "XZS", "XZT", "XZU", "XZV", "XZW", "XZX", "XZY", "XZZ", "04", "05", "08", "16", "17", "18", "19", "26", "29", "30", "31", "32", "36", "43", "44", "45", "46", "47", "48", "53", "54", "62", "63", "64", "66", "69", "71", "72", "73", "76", "78", "84", "90", "92", "93", "94", "95", "96", "97", "98", "1A", "1B", "1C", "1D", "1E", "1F", "1G", "1H", "1J", "1K", "1L", "1M", "1X", "2V", "2W", "3E", "3G", "3H", "3I", "4A", "4B", "4E", "5C", "5F", "5G", "5H", "5I", "5K", "5P", "5Q", "A1", "A25", "A50", "A51", "A52", "A57", "A58", "A60", "A61", "A62", "A63", "A64", "A65", "A66", "A67", "A77", "A78", "A79", "A80", "A81", "A82", "A83", "AJ", "AM", "AP", "AR", "ARE", "ATT", "AV", "AW", "B0", "B2", "B36", "B37", "B38", "B39", "B40", "B5", "B51", "B6", "B65", "B9", "BD", "BE", "BG", "BH", "BJ", "BK", "BL", "BO", "BR", "BT", "BW", "BX", "BZ", "C1", "C2", "C4", "C5", "C6", "C77", "C98", "CA", "CH", "CJ", "CK", "CL", "CO", "CQ", "CR", "CS", "CT", "CU", "CV", "CY", "CZ", "D14", "D28", "D35", "D37", "D38", "D39", "D40", "D64", "D66", "D67", "D7", "D70", "D71", "D72", "D75", "D76", "D79", "D8", "D9", "D90", "D92", "D96", "D97", "D98", "D99", "DC", "DE", "DI", "DQ", "DR", "DRM", "DS", "DU", "DX", "DY", "E2", "E3", "E5", "EC", "EP", "EV", "F1", "F9", "FB", "FD", "FE", "FG", "FM", "G7", "GC", "GD", "GH", "GK", "GN", "GRT", "GT", "GW", "GY", "GZ", "H1", "H2", "HAR", "HD", "HE", "HF", "HI", "HJ", "HK", "HL", "HN", "HO", "HP", "HS", "HT", "HY", "IC", "IF", "II", "IL", "IM", "IP", "IT", "JB", "JG", "JO", "JR", "K5", "KD", "KF", "KG", "KS", "KTM", "LC", "LE", "LI", "LJ", "LX", "M0", "MA", "MF", "MK", "MQ", "MT", "MV", "N2", "NB", "NBB", "NC", "ND", "NE", "NG", "NH", "NI", "NJ", "NN", "NPL", "NPR", "NQ", "NR", "NRL", "NTT", "NV", "NY", "OP", "OZ", "P0", "P3", "P4", "P6", "P7", "P8", "P9", "PA", "PB", "PE", "PF", "PG", "PK", "PL", "PM", "PN", "PT", "PU", "PV", "PW", "PY", "PZ", "QD", "QH", "QK", "QT", "R4", "RA", "RD", "RG", "RK", "RL", "RN", "RO", "RS", "RU", "S5", "S6", "S7", "S8", "SA", "SD", "SE", "SHT", "SK", "SL", "SN", "SO", "SP", "SS", "SST", "ST", "SV", "T1", "T4", "T5", "T6", "T7", "T8", "TA", "TC", "TD", "TE", "TF", "TJ", "TK", "TL", "TN", "TQ", "TR", "TS", "TSD", "TSH", "TT", "TU", "TV", "TW", "TY", "UA", "UD", "UE", "UF", "UH", "UM", "VI", "VQ", "VS", "W4", "WH", "WI", "WR", "WW", "YL", "YT", "Z1", "Z2", "Z3", "Z4", "Z5", "Z6", "Z8"]  # noqa: E501
        if quantity_unit_code not in allowed_values:
            raise ValueError(
                "Invalid value for `quantity_unit_code` ({0}), must be one of {1}"
                .format(quantity_unit_code, allowed_values)
            )

        self._quantity_unit_code = quantity_unit_code

    @property
    def references(self):
        """Gets the references of this InvoiceLine.

        An array of references to other documents or codes. Note that many syntaxes do not support multiple references of the same type in which case they will be concatenated with ','. Also, not all syntaxes support all documentTypes.

        :return: The references of this InvoiceLine.
        :rtype: List[Reference]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this InvoiceLine.

        An array of references to other documents or codes. Note that many syntaxes do not support multiple references of the same type in which case they will be concatenated with ','. Also, not all syntaxes support all documentTypes.

        :param references: The references of this InvoiceLine.
        :type references: List[Reference]
        """
        if references is not None and len(references) < 0:
            raise ValueError("Invalid value for `references`, number of items must be greater than or equal to `0`")

        self._references = references

    @property
    def sellers_item_identification(self):
        """Gets the sellers_item_identification of this InvoiceLine.

        DEPRECATED. Use the references array with 'line_sellers_item_identification' documentType. The ID the seller assigned to this item.

        :return: The sellers_item_identification of this InvoiceLine.
        :rtype: str
        """
        return self._sellers_item_identification

    @sellers_item_identification.setter
    def sellers_item_identification(self, sellers_item_identification):
        """Sets the sellers_item_identification of this InvoiceLine.

        DEPRECATED. Use the references array with 'line_sellers_item_identification' documentType. The ID the seller assigned to this item.

        :param sellers_item_identification: The sellers_item_identification of this InvoiceLine.
        :type sellers_item_identification: str
        """
        if sellers_item_identification is not None and len(sellers_item_identification) < 1:
            raise ValueError("Invalid value for `sellers_item_identification`, length must be greater than or equal to `1`")

        self._sellers_item_identification = sellers_item_identification

    @property
    def standard_item_identification(self):
        """Gets the standard_item_identification of this InvoiceLine.

        Standardized ID for the item.

        :return: The standard_item_identification of this InvoiceLine.
        :rtype: str
        """
        return self._standard_item_identification

    @standard_item_identification.setter
    def standard_item_identification(self, standard_item_identification):
        """Sets the standard_item_identification of this InvoiceLine.

        Standardized ID for the item.

        :param standard_item_identification: The standard_item_identification of this InvoiceLine.
        :type standard_item_identification: str
        """
        if standard_item_identification is not None and len(standard_item_identification) < 1:
            raise ValueError("Invalid value for `standard_item_identification`, length must be greater than or equal to `1`")

        self._standard_item_identification = standard_item_identification

    @property
    def standard_item_identification_scheme_agency_id(self):
        """Gets the standard_item_identification_scheme_agency_id of this InvoiceLine.

        DEPRECATED. Use the references array with 'line_standard_item_identification' documentType. The scheme agency for the standardized ID for the item.

        :return: The standard_item_identification_scheme_agency_id of this InvoiceLine.
        :rtype: str
        """
        return self._standard_item_identification_scheme_agency_id

    @standard_item_identification_scheme_agency_id.setter
    def standard_item_identification_scheme_agency_id(self, standard_item_identification_scheme_agency_id):
        """Sets the standard_item_identification_scheme_agency_id of this InvoiceLine.

        DEPRECATED. Use the references array with 'line_standard_item_identification' documentType. The scheme agency for the standardized ID for the item.

        :param standard_item_identification_scheme_agency_id: The standard_item_identification_scheme_agency_id of this InvoiceLine.
        :type standard_item_identification_scheme_agency_id: str
        """
        if standard_item_identification_scheme_agency_id is not None and len(standard_item_identification_scheme_agency_id) < 1:
            raise ValueError("Invalid value for `standard_item_identification_scheme_agency_id`, length must be greater than or equal to `1`")

        self._standard_item_identification_scheme_agency_id = standard_item_identification_scheme_agency_id

    @property
    def standard_item_identification_scheme_id(self):
        """Gets the standard_item_identification_scheme_id of this InvoiceLine.

        DEPRECATED. Use the references array with 'line_standard_item_identification' documentType. The scheme for the standardized ID for the item.

        :return: The standard_item_identification_scheme_id of this InvoiceLine.
        :rtype: str
        """
        return self._standard_item_identification_scheme_id

    @standard_item_identification_scheme_id.setter
    def standard_item_identification_scheme_id(self, standard_item_identification_scheme_id):
        """Sets the standard_item_identification_scheme_id of this InvoiceLine.

        DEPRECATED. Use the references array with 'line_standard_item_identification' documentType. The scheme for the standardized ID for the item.

        :param standard_item_identification_scheme_id: The standard_item_identification_scheme_id of this InvoiceLine.
        :type standard_item_identification_scheme_id: str
        """
        if standard_item_identification_scheme_id is not None and len(standard_item_identification_scheme_id) < 1:
            raise ValueError("Invalid value for `standard_item_identification_scheme_id`, length must be greater than or equal to `1`")

        self._standard_item_identification_scheme_id = standard_item_identification_scheme_id

    @property
    def tax(self):
        """Gets the tax of this InvoiceLine.


        :return: The tax of this InvoiceLine.
        :rtype: Tax
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this InvoiceLine.


        :param tax: The tax of this InvoiceLine.
        :type tax: Tax
        """

        self._tax = tax

    @property
    def taxes_duties_fees(self):
        """Gets the taxes_duties_fees of this InvoiceLine.

        An array of taxes, duties and fees for this invoice line. Multiple taxesDutiesFees items is allowed only for IN (India) and US (USA) taxes. All other countries can only have a single Tax item in this array.

        :return: The taxes_duties_fees of this InvoiceLine.
        :rtype: List[Tax]
        """
        return self._taxes_duties_fees

    @taxes_duties_fees.setter
    def taxes_duties_fees(self, taxes_duties_fees):
        """Sets the taxes_duties_fees of this InvoiceLine.

        An array of taxes, duties and fees for this invoice line. Multiple taxesDutiesFees items is allowed only for IN (India) and US (USA) taxes. All other countries can only have a single Tax item in this array.

        :param taxes_duties_fees: The taxes_duties_fees of this InvoiceLine.
        :type taxes_duties_fees: List[Tax]
        """
        if taxes_duties_fees is not None and len(taxes_duties_fees) < 0:
            raise ValueError("Invalid value for `taxes_duties_fees`, number of items must be greater than or equal to `0`")

        self._taxes_duties_fees = taxes_duties_fees
