# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.accounting_customer_party import AccountingCustomerParty
from openapi_server.models.accounting_supplier_party import AccountingSupplierParty
from openapi_server.models.allowance_charge import AllowanceCharge
from openapi_server.models.attachment import Attachment
from openapi_server.models.currency_code import CurrencyCode
from openapi_server.models.delivery import Delivery
from openapi_server.models.invoice_line import InvoiceLine
from openapi_server.models.payment_means import PaymentMeans
from openapi_server.models.payment_terms import PaymentTerms
from openapi_server.models.reference import Reference
from openapi_server.models.tax import Tax
from openapi_server.models.tax_subtotal import TaxSubtotal
import re
from openapi_server import util


class Invoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounting_cost: str=None, accounting_currency_tax_amount: float=None, accounting_currency_tax_amount_currency: CurrencyCode=None, accounting_customer_party: AccountingCustomerParty=None, accounting_supplier_party: AccountingSupplierParty=None, allowance_charges: List[AllowanceCharge]=None, amount_including_vat: float=None, attachments: List[Attachment]=None, billing_reference: str=None, buyer_reference: str=None, consumer_tax_mode: bool=False, contract_document_reference: str=None, delivery: Delivery=None, document_currency_code: CurrencyCode=None, due_date: str=None, invoice_lines: List[InvoiceLine]=None, invoice_number: str=None, invoice_period: str=None, invoice_type: str='380', issue_date: str=None, issue_reasons: List[str]=None, note: str=None, order_reference: str=None, payment_means_array: List[PaymentMeans]=None, payment_means_bic: str=None, payment_means_code: str=None, payment_means_iban: str=None, payment_means_payment_id: str=None, payment_terms: PaymentTerms=None, preferred_invoice_type: str='autodetect', prepaid_amount: float=None, price_mode: str='net', project_reference: str=None, references: List[Reference]=None, sales_order_id: str=None, self_billing_mode: bool=False, tax_exempt_reason: str=None, tax_point_date: str=None, tax_subtotals: List[TaxSubtotal]=None, tax_system: str='amounts', taxes_duties_fees: List[Tax]=None, transaction_type: str=None, ubl_extensions: List[str]=None, vat_reverse_charge: bool=False, x2y: str='b2b'):
        """Invoice - a model defined in OpenAPI

        :param accounting_cost: The accounting_cost of this Invoice.
        :param accounting_currency_tax_amount: The accounting_currency_tax_amount of this Invoice.
        :param accounting_currency_tax_amount_currency: The accounting_currency_tax_amount_currency of this Invoice.
        :param accounting_customer_party: The accounting_customer_party of this Invoice.
        :param accounting_supplier_party: The accounting_supplier_party of this Invoice.
        :param allowance_charges: The allowance_charges of this Invoice.
        :param amount_including_vat: The amount_including_vat of this Invoice.
        :param attachments: The attachments of this Invoice.
        :param billing_reference: The billing_reference of this Invoice.
        :param buyer_reference: The buyer_reference of this Invoice.
        :param consumer_tax_mode: The consumer_tax_mode of this Invoice.
        :param contract_document_reference: The contract_document_reference of this Invoice.
        :param delivery: The delivery of this Invoice.
        :param document_currency_code: The document_currency_code of this Invoice.
        :param due_date: The due_date of this Invoice.
        :param invoice_lines: The invoice_lines of this Invoice.
        :param invoice_number: The invoice_number of this Invoice.
        :param invoice_period: The invoice_period of this Invoice.
        :param invoice_type: The invoice_type of this Invoice.
        :param issue_date: The issue_date of this Invoice.
        :param issue_reasons: The issue_reasons of this Invoice.
        :param note: The note of this Invoice.
        :param order_reference: The order_reference of this Invoice.
        :param payment_means_array: The payment_means_array of this Invoice.
        :param payment_means_bic: The payment_means_bic of this Invoice.
        :param payment_means_code: The payment_means_code of this Invoice.
        :param payment_means_iban: The payment_means_iban of this Invoice.
        :param payment_means_payment_id: The payment_means_payment_id of this Invoice.
        :param payment_terms: The payment_terms of this Invoice.
        :param preferred_invoice_type: The preferred_invoice_type of this Invoice.
        :param prepaid_amount: The prepaid_amount of this Invoice.
        :param price_mode: The price_mode of this Invoice.
        :param project_reference: The project_reference of this Invoice.
        :param references: The references of this Invoice.
        :param sales_order_id: The sales_order_id of this Invoice.
        :param self_billing_mode: The self_billing_mode of this Invoice.
        :param tax_exempt_reason: The tax_exempt_reason of this Invoice.
        :param tax_point_date: The tax_point_date of this Invoice.
        :param tax_subtotals: The tax_subtotals of this Invoice.
        :param tax_system: The tax_system of this Invoice.
        :param taxes_duties_fees: The taxes_duties_fees of this Invoice.
        :param transaction_type: The transaction_type of this Invoice.
        :param ubl_extensions: The ubl_extensions of this Invoice.
        :param vat_reverse_charge: The vat_reverse_charge of this Invoice.
        :param x2y: The x2y of this Invoice.
        """
        self.openapi_types = {
            'accounting_cost': str,
            'accounting_currency_tax_amount': float,
            'accounting_currency_tax_amount_currency': CurrencyCode,
            'accounting_customer_party': AccountingCustomerParty,
            'accounting_supplier_party': AccountingSupplierParty,
            'allowance_charges': List[AllowanceCharge],
            'amount_including_vat': float,
            'attachments': List[Attachment],
            'billing_reference': str,
            'buyer_reference': str,
            'consumer_tax_mode': bool,
            'contract_document_reference': str,
            'delivery': Delivery,
            'document_currency_code': CurrencyCode,
            'due_date': str,
            'invoice_lines': List[InvoiceLine],
            'invoice_number': str,
            'invoice_period': str,
            'invoice_type': str,
            'issue_date': str,
            'issue_reasons': List[str],
            'note': str,
            'order_reference': str,
            'payment_means_array': List[PaymentMeans],
            'payment_means_bic': str,
            'payment_means_code': str,
            'payment_means_iban': str,
            'payment_means_payment_id': str,
            'payment_terms': PaymentTerms,
            'preferred_invoice_type': str,
            'prepaid_amount': float,
            'price_mode': str,
            'project_reference': str,
            'references': List[Reference],
            'sales_order_id': str,
            'self_billing_mode': bool,
            'tax_exempt_reason': str,
            'tax_point_date': str,
            'tax_subtotals': List[TaxSubtotal],
            'tax_system': str,
            'taxes_duties_fees': List[Tax],
            'transaction_type': str,
            'ubl_extensions': List[str],
            'vat_reverse_charge': bool,
            'x2y': str
        }

        self.attribute_map = {
            'accounting_cost': 'accountingCost',
            'accounting_currency_tax_amount': 'accountingCurrencyTaxAmount',
            'accounting_currency_tax_amount_currency': 'accountingCurrencyTaxAmountCurrency',
            'accounting_customer_party': 'accountingCustomerParty',
            'accounting_supplier_party': 'accountingSupplierParty',
            'allowance_charges': 'allowanceCharges',
            'amount_including_vat': 'amountIncludingVat',
            'attachments': 'attachments',
            'billing_reference': 'billingReference',
            'buyer_reference': 'buyerReference',
            'consumer_tax_mode': 'consumerTaxMode',
            'contract_document_reference': 'contractDocumentReference',
            'delivery': 'delivery',
            'document_currency_code': 'documentCurrencyCode',
            'due_date': 'dueDate',
            'invoice_lines': 'invoiceLines',
            'invoice_number': 'invoiceNumber',
            'invoice_period': 'invoicePeriod',
            'invoice_type': 'invoiceType',
            'issue_date': 'issueDate',
            'issue_reasons': 'issueReasons',
            'note': 'note',
            'order_reference': 'orderReference',
            'payment_means_array': 'paymentMeansArray',
            'payment_means_bic': 'paymentMeansBic',
            'payment_means_code': 'paymentMeansCode',
            'payment_means_iban': 'paymentMeansIban',
            'payment_means_payment_id': 'paymentMeansPaymentId',
            'payment_terms': 'paymentTerms',
            'preferred_invoice_type': 'preferredInvoiceType',
            'prepaid_amount': 'prepaidAmount',
            'price_mode': 'priceMode',
            'project_reference': 'projectReference',
            'references': 'references',
            'sales_order_id': 'salesOrderId',
            'self_billing_mode': 'selfBillingMode',
            'tax_exempt_reason': 'taxExemptReason',
            'tax_point_date': 'taxPointDate',
            'tax_subtotals': 'taxSubtotals',
            'tax_system': 'taxSystem',
            'taxes_duties_fees': 'taxesDutiesFees',
            'transaction_type': 'transactionType',
            'ubl_extensions': 'ublExtensions',
            'vat_reverse_charge': 'vatReverseCharge',
            'x2y': 'x2y'
        }

        self._accounting_cost = accounting_cost
        self._accounting_currency_tax_amount = accounting_currency_tax_amount
        self._accounting_currency_tax_amount_currency = accounting_currency_tax_amount_currency
        self._accounting_customer_party = accounting_customer_party
        self._accounting_supplier_party = accounting_supplier_party
        self._allowance_charges = allowance_charges
        self._amount_including_vat = amount_including_vat
        self._attachments = attachments
        self._billing_reference = billing_reference
        self._buyer_reference = buyer_reference
        self._consumer_tax_mode = consumer_tax_mode
        self._contract_document_reference = contract_document_reference
        self._delivery = delivery
        self._document_currency_code = document_currency_code
        self._due_date = due_date
        self._invoice_lines = invoice_lines
        self._invoice_number = invoice_number
        self._invoice_period = invoice_period
        self._invoice_type = invoice_type
        self._issue_date = issue_date
        self._issue_reasons = issue_reasons
        self._note = note
        self._order_reference = order_reference
        self._payment_means_array = payment_means_array
        self._payment_means_bic = payment_means_bic
        self._payment_means_code = payment_means_code
        self._payment_means_iban = payment_means_iban
        self._payment_means_payment_id = payment_means_payment_id
        self._payment_terms = payment_terms
        self._preferred_invoice_type = preferred_invoice_type
        self._prepaid_amount = prepaid_amount
        self._price_mode = price_mode
        self._project_reference = project_reference
        self._references = references
        self._sales_order_id = sales_order_id
        self._self_billing_mode = self_billing_mode
        self._tax_exempt_reason = tax_exempt_reason
        self._tax_point_date = tax_point_date
        self._tax_subtotals = tax_subtotals
        self._tax_system = tax_system
        self._taxes_duties_fees = taxes_duties_fees
        self._transaction_type = transaction_type
        self._ubl_extensions = ubl_extensions
        self._vat_reverse_charge = vat_reverse_charge
        self._x2y = x2y

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Invoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Invoice of this Invoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounting_cost(self):
        """Gets the accounting_cost of this Invoice.

        The buyer's accounting cost centre for this invoice, expressed as text.

        :return: The accounting_cost of this Invoice.
        :rtype: str
        """
        return self._accounting_cost

    @accounting_cost.setter
    def accounting_cost(self, accounting_cost):
        """Sets the accounting_cost of this Invoice.

        The buyer's accounting cost centre for this invoice, expressed as text.

        :param accounting_cost: The accounting_cost of this Invoice.
        :type accounting_cost: str
        """
        if accounting_cost is not None and len(accounting_cost) < 1:
            raise ValueError("Invalid value for `accounting_cost`, length must be greater than or equal to `1`")

        self._accounting_cost = accounting_cost

    @property
    def accounting_currency_tax_amount(self):
        """Gets the accounting_currency_tax_amount of this Invoice.

        The total amount of tax in the accounting currency. If included, must be non-zero.

        :return: The accounting_currency_tax_amount of this Invoice.
        :rtype: float
        """
        return self._accounting_currency_tax_amount

    @accounting_currency_tax_amount.setter
    def accounting_currency_tax_amount(self, accounting_currency_tax_amount):
        """Sets the accounting_currency_tax_amount of this Invoice.

        The total amount of tax in the accounting currency. If included, must be non-zero.

        :param accounting_currency_tax_amount: The accounting_currency_tax_amount of this Invoice.
        :type accounting_currency_tax_amount: float
        """

        self._accounting_currency_tax_amount = accounting_currency_tax_amount

    @property
    def accounting_currency_tax_amount_currency(self):
        """Gets the accounting_currency_tax_amount_currency of this Invoice.


        :return: The accounting_currency_tax_amount_currency of this Invoice.
        :rtype: CurrencyCode
        """
        return self._accounting_currency_tax_amount_currency

    @accounting_currency_tax_amount_currency.setter
    def accounting_currency_tax_amount_currency(self, accounting_currency_tax_amount_currency):
        """Sets the accounting_currency_tax_amount_currency of this Invoice.


        :param accounting_currency_tax_amount_currency: The accounting_currency_tax_amount_currency of this Invoice.
        :type accounting_currency_tax_amount_currency: CurrencyCode
        """

        self._accounting_currency_tax_amount_currency = accounting_currency_tax_amount_currency

    @property
    def accounting_customer_party(self):
        """Gets the accounting_customer_party of this Invoice.


        :return: The accounting_customer_party of this Invoice.
        :rtype: AccountingCustomerParty
        """
        return self._accounting_customer_party

    @accounting_customer_party.setter
    def accounting_customer_party(self, accounting_customer_party):
        """Sets the accounting_customer_party of this Invoice.


        :param accounting_customer_party: The accounting_customer_party of this Invoice.
        :type accounting_customer_party: AccountingCustomerParty
        """
        if accounting_customer_party is None:
            raise ValueError("Invalid value for `accounting_customer_party`, must not be `None`")

        self._accounting_customer_party = accounting_customer_party

    @property
    def accounting_supplier_party(self):
        """Gets the accounting_supplier_party of this Invoice.


        :return: The accounting_supplier_party of this Invoice.
        :rtype: AccountingSupplierParty
        """
        return self._accounting_supplier_party

    @accounting_supplier_party.setter
    def accounting_supplier_party(self, accounting_supplier_party):
        """Sets the accounting_supplier_party of this Invoice.


        :param accounting_supplier_party: The accounting_supplier_party of this Invoice.
        :type accounting_supplier_party: AccountingSupplierParty
        """

        self._accounting_supplier_party = accounting_supplier_party

    @property
    def allowance_charges(self):
        """Gets the allowance_charges of this Invoice.

        An array of allowance charges.

        :return: The allowance_charges of this Invoice.
        :rtype: List[AllowanceCharge]
        """
        return self._allowance_charges

    @allowance_charges.setter
    def allowance_charges(self, allowance_charges):
        """Sets the allowance_charges of this Invoice.

        An array of allowance charges.

        :param allowance_charges: The allowance_charges of this Invoice.
        :type allowance_charges: List[AllowanceCharge]
        """
        if allowance_charges is not None and len(allowance_charges) < 0:
            raise ValueError("Invalid value for `allowance_charges`, number of items must be greater than or equal to `0`")

        self._allowance_charges = allowance_charges

    @property
    def amount_including_vat(self):
        """Gets the amount_including_vat of this Invoice.

        amountIncludingVat is important because of rounding differences. In many invoices, the sum of the line item amounts excluding VAT and the VAT amounts is not equal to first summing the line items without VAT, and then applying VAT. The difference is automatically calculated and included in the electronic invoice, so the receiving accounting package can process the electronic invoice without problems.

        :return: The amount_including_vat of this Invoice.
        :rtype: float
        """
        return self._amount_including_vat

    @amount_including_vat.setter
    def amount_including_vat(self, amount_including_vat):
        """Sets the amount_including_vat of this Invoice.

        amountIncludingVat is important because of rounding differences. In many invoices, the sum of the line item amounts excluding VAT and the VAT amounts is not equal to first summing the line items without VAT, and then applying VAT. The difference is automatically calculated and included in the electronic invoice, so the receiving accounting package can process the electronic invoice without problems.

        :param amount_including_vat: The amount_including_vat of this Invoice.
        :type amount_including_vat: float
        """
        if amount_including_vat is None:
            raise ValueError("Invalid value for `amount_including_vat`, must not be `None`")

        self._amount_including_vat = amount_including_vat

    @property
    def attachments(self):
        """Gets the attachments of this Invoice.

        An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.

        :return: The attachments of this Invoice.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Invoice.

        An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.

        :param attachments: The attachments of this Invoice.
        :type attachments: List[Attachment]
        """
        if attachments is not None and len(attachments) > 10:
            raise ValueError("Invalid value for `attachments`, number of items must be less than or equal to `10`")

        self._attachments = attachments

    @property
    def billing_reference(self):
        """Gets the billing_reference of this Invoice.

        DEPRECATED. Use a reference object with a documentType 'billing'. A reference to a commercial invoice or corrective invoice of which the current invoice is a correction. This field is mandatory when sending invoiceType 384.

        :return: The billing_reference of this Invoice.
        :rtype: str
        """
        return self._billing_reference

    @billing_reference.setter
    def billing_reference(self, billing_reference):
        """Sets the billing_reference of this Invoice.

        DEPRECATED. Use a reference object with a documentType 'billing'. A reference to a commercial invoice or corrective invoice of which the current invoice is a correction. This field is mandatory when sending invoiceType 384.

        :param billing_reference: The billing_reference of this Invoice.
        :type billing_reference: str
        """

        self._billing_reference = billing_reference

    @property
    def buyer_reference(self):
        """Gets the buyer_reference of this Invoice.

        DEPRECATED. Use a reference object with a documentType 'buyer_reference'. A reference provided by the buyer used for internal routing of the document.

        :return: The buyer_reference of this Invoice.
        :rtype: str
        """
        return self._buyer_reference

    @buyer_reference.setter
    def buyer_reference(self, buyer_reference):
        """Sets the buyer_reference of this Invoice.

        DEPRECATED. Use a reference object with a documentType 'buyer_reference'. A reference provided by the buyer used for internal routing of the document.

        :param buyer_reference: The buyer_reference of this Invoice.
        :type buyer_reference: str
        """

        self._buyer_reference = buyer_reference

    @property
    def consumer_tax_mode(self):
        """Gets the consumer_tax_mode of this Invoice.

        Whether or not to process the invoice in consumer tax mode. In this mode, the VAT identifier of the sender will not be the default VAT identifier, but the one that matches with the country of the receiving consumer, if that additional VAT identifier for that country is available. These additional VAT identifiers need to be added to the sending LegalEntity by Storecove, so if you need to send invoices in this mode, please contact us.

        :return: The consumer_tax_mode of this Invoice.
        :rtype: bool
        """
        return self._consumer_tax_mode

    @consumer_tax_mode.setter
    def consumer_tax_mode(self, consumer_tax_mode):
        """Sets the consumer_tax_mode of this Invoice.

        Whether or not to process the invoice in consumer tax mode. In this mode, the VAT identifier of the sender will not be the default VAT identifier, but the one that matches with the country of the receiving consumer, if that additional VAT identifier for that country is available. These additional VAT identifiers need to be added to the sending LegalEntity by Storecove, so if you need to send invoices in this mode, please contact us.

        :param consumer_tax_mode: The consumer_tax_mode of this Invoice.
        :type consumer_tax_mode: bool
        """

        self._consumer_tax_mode = consumer_tax_mode

    @property
    def contract_document_reference(self):
        """Gets the contract_document_reference of this Invoice.

        DEPRECATED. Use a reference object with a documentType 'contract'. A reference to a contract or framework agreement that this invoice relates to.

        :return: The contract_document_reference of this Invoice.
        :rtype: str
        """
        return self._contract_document_reference

    @contract_document_reference.setter
    def contract_document_reference(self, contract_document_reference):
        """Sets the contract_document_reference of this Invoice.

        DEPRECATED. Use a reference object with a documentType 'contract'. A reference to a contract or framework agreement that this invoice relates to.

        :param contract_document_reference: The contract_document_reference of this Invoice.
        :type contract_document_reference: str
        """

        self._contract_document_reference = contract_document_reference

    @property
    def delivery(self):
        """Gets the delivery of this Invoice.


        :return: The delivery of this Invoice.
        :rtype: Delivery
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this Invoice.


        :param delivery: The delivery of this Invoice.
        :type delivery: Delivery
        """

        self._delivery = delivery

    @property
    def document_currency_code(self):
        """Gets the document_currency_code of this Invoice.


        :return: The document_currency_code of this Invoice.
        :rtype: CurrencyCode
        """
        return self._document_currency_code

    @document_currency_code.setter
    def document_currency_code(self, document_currency_code):
        """Sets the document_currency_code of this Invoice.


        :param document_currency_code: The document_currency_code of this Invoice.
        :type document_currency_code: CurrencyCode
        """

        self._document_currency_code = document_currency_code

    @property
    def due_date(self):
        """Gets the due_date of this Invoice.

        Format: yyyy-mm-dd.

        :return: The due_date of this Invoice.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Invoice.

        Format: yyyy-mm-dd.

        :param due_date: The due_date of this Invoice.
        :type due_date: str
        """
        if due_date is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$', due_date):
            raise ValueError("Invalid value for `due_date`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/`")

        self._due_date = due_date

    @property
    def invoice_lines(self):
        """Gets the invoice_lines of this Invoice.

        An array of invoice lines.

        :return: The invoice_lines of this Invoice.
        :rtype: List[InvoiceLine]
        """
        return self._invoice_lines

    @invoice_lines.setter
    def invoice_lines(self, invoice_lines):
        """Sets the invoice_lines of this Invoice.

        An array of invoice lines.

        :param invoice_lines: The invoice_lines of this Invoice.
        :type invoice_lines: List[InvoiceLine]
        """
        if invoice_lines is None:
            raise ValueError("Invalid value for `invoice_lines`, must not be `None`")
        if invoice_lines is not None and len(invoice_lines) < 1:
            raise ValueError("Invalid value for `invoice_lines`, number of items must be greater than or equal to `1`")

        self._invoice_lines = invoice_lines

    @property
    def invoice_number(self):
        """Gets the invoice_number of this Invoice.

        The invoice number you assigned to the invoice. The invoiceNumber should be unique for the legalEntityId and year of the issueDate. This means invoice numbers can be reused in different years, as is customary in some countries.

        :return: The invoice_number of this Invoice.
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this Invoice.

        The invoice number you assigned to the invoice. The invoiceNumber should be unique for the legalEntityId and year of the issueDate. This means invoice numbers can be reused in different years, as is customary in some countries.

        :param invoice_number: The invoice_number of this Invoice.
        :type invoice_number: str
        """
        if invoice_number is None:
            raise ValueError("Invalid value for `invoice_number`, must not be `None`")
        if invoice_number is not None and len(invoice_number) < 1:
            raise ValueError("Invalid value for `invoice_number`, length must be greater than or equal to `1`")

        self._invoice_number = invoice_number

    @property
    def invoice_period(self):
        """Gets the invoice_period of this Invoice.

        The period (or specific date) to which the invoice applies. Format: yyyy-mm-dd - yyyy-mm-dd.

        :return: The invoice_period of this Invoice.
        :rtype: str
        """
        return self._invoice_period

    @invoice_period.setter
    def invoice_period(self, invoice_period):
        """Sets the invoice_period of this Invoice.

        The period (or specific date) to which the invoice applies. Format: yyyy-mm-dd - yyyy-mm-dd.

        :param invoice_period: The invoice_period of this Invoice.
        :type invoice_period: str
        """
        if invoice_period is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$', invoice_period):
            raise ValueError("Invalid value for `invoice_period`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$/`")

        self._invoice_period = invoice_period

    @property
    def invoice_type(self):
        """Gets the invoice_type of this Invoice.

        DEPRECATED. Do not use. This field is available for legacy reasons only. If you want to send a regular invoice (aka UBL type '380'), make sure you have a positive invoice amount. For a credit note (aka UBL type '381'), simply provide a negative invoice amount. If you, in addition to a negative invoice amount, also specify a billingReferences, your invoice will become a corrective invoice (aka UBL type '384'). If your invoice is not sent in the UBL syntax, Storecove will provide the appropriate type for the syntax the invoice is sent in.

        :return: The invoice_type of this Invoice.
        :rtype: str
        """
        return self._invoice_type

    @invoice_type.setter
    def invoice_type(self, invoice_type):
        """Sets the invoice_type of this Invoice.

        DEPRECATED. Do not use. This field is available for legacy reasons only. If you want to send a regular invoice (aka UBL type '380'), make sure you have a positive invoice amount. For a credit note (aka UBL type '381'), simply provide a negative invoice amount. If you, in addition to a negative invoice amount, also specify a billingReferences, your invoice will become a corrective invoice (aka UBL type '384'). If your invoice is not sent in the UBL syntax, Storecove will provide the appropriate type for the syntax the invoice is sent in.

        :param invoice_type: The invoice_type of this Invoice.
        :type invoice_type: str
        """
        allowed_values = ["380", "381", "384"]  # noqa: E501
        if invoice_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoice_type` ({0}), must be one of {1}"
                .format(invoice_type, allowed_values)
            )

        self._invoice_type = invoice_type

    @property
    def issue_date(self):
        """Gets the issue_date of this Invoice.

        Format: yyyy-mm-dd.

        :return: The issue_date of this Invoice.
        :rtype: str
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this Invoice.

        Format: yyyy-mm-dd.

        :param issue_date: The issue_date of this Invoice.
        :type issue_date: str
        """
        if issue_date is None:
            raise ValueError("Invalid value for `issue_date`, must not be `None`")
        if issue_date is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$', issue_date):
            raise ValueError("Invalid value for `issue_date`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/`")

        self._issue_date = issue_date

    @property
    def issue_reasons(self):
        """Gets the issue_reasons of this Invoice.

        An array reasons for issuing the invoice.

        :return: The issue_reasons of this Invoice.
        :rtype: List[str]
        """
        return self._issue_reasons

    @issue_reasons.setter
    def issue_reasons(self, issue_reasons):
        """Sets the issue_reasons of this Invoice.

        An array reasons for issuing the invoice.

        :param issue_reasons: The issue_reasons of this Invoice.
        :type issue_reasons: List[str]
        """

        self._issue_reasons = issue_reasons

    @property
    def note(self):
        """Gets the note of this Invoice.

        A note to add to the invoice

        :return: The note of this Invoice.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Invoice.

        A note to add to the invoice

        :param note: The note of this Invoice.
        :type note: str
        """

        self._note = note

    @property
    def order_reference(self):
        """Gets the order_reference of this Invoice.

        DEPRECATED. Use a reference object with a documentType 'purchase_order'. A reference to an order for this invoice, assigned by the buyer. Note that this often is a key field, since many receivers of invoices will use this field to automatically match the invoice to an order they placed. Many receivers refuse invoices that cannot be automatically matched, in particular government agencies. So it is highly recommended to fill this field whenever possible.

        :return: The order_reference of this Invoice.
        :rtype: str
        """
        return self._order_reference

    @order_reference.setter
    def order_reference(self, order_reference):
        """Sets the order_reference of this Invoice.

        DEPRECATED. Use a reference object with a documentType 'purchase_order'. A reference to an order for this invoice, assigned by the buyer. Note that this often is a key field, since many receivers of invoices will use this field to automatically match the invoice to an order they placed. Many receivers refuse invoices that cannot be automatically matched, in particular government agencies. So it is highly recommended to fill this field whenever possible.

        :param order_reference: The order_reference of this Invoice.
        :type order_reference: str
        """

        self._order_reference = order_reference

    @property
    def payment_means_array(self):
        """Gets the payment_means_array of this Invoice.

        An array of payment means (ways to pay the invoice).

        :return: The payment_means_array of this Invoice.
        :rtype: List[PaymentMeans]
        """
        return self._payment_means_array

    @payment_means_array.setter
    def payment_means_array(self, payment_means_array):
        """Sets the payment_means_array of this Invoice.

        An array of payment means (ways to pay the invoice).

        :param payment_means_array: The payment_means_array of this Invoice.
        :type payment_means_array: List[PaymentMeans]
        """

        self._payment_means_array = payment_means_array

    @property
    def payment_means_bic(self):
        """Gets the payment_means_bic of this Invoice.

        DEPRECATED. Use paymentMeansArray. The BIC (Swift) of the bank where the amount payable should be transferred to

        :return: The payment_means_bic of this Invoice.
        :rtype: str
        """
        return self._payment_means_bic

    @payment_means_bic.setter
    def payment_means_bic(self, payment_means_bic):
        """Sets the payment_means_bic of this Invoice.

        DEPRECATED. Use paymentMeansArray. The BIC (Swift) of the bank where the amount payable should be transferred to

        :param payment_means_bic: The payment_means_bic of this Invoice.
        :type payment_means_bic: str
        """
        if payment_means_bic is not None and not re.search(r'^[A-Z]{6}[2-9A-Z][0-9A-NP-Z]([A-Z0-9]{3}|X{3})?$', payment_means_bic):
            raise ValueError("Invalid value for `payment_means_bic`, must be a follow pattern or equal to `/^[A-Z]{6}[2-9A-Z][0-9A-NP-Z]([A-Z0-9]{3}|X{3})?$/`")

        self._payment_means_bic = payment_means_bic

    @property
    def payment_means_code(self):
        """Gets the payment_means_code of this Invoice.

        DEPRECATED. Use paymentMeansArray. How the invoice has been / will be paid. Use only online_payment_service (payment will be made or has been made by an online payment service), bank_card (e.g. debit card, credit card), direct_debit (the amount has been / will be taken out of the client's bank account), standing_agreement (an unspecified payment means known to both buyer and seller) or credit_transfer (the buyer will do / has done a bank transfer). The numeric codes are for legacy purposes, they should not be used.

        :return: The payment_means_code of this Invoice.
        :rtype: str
        """
        return self._payment_means_code

    @payment_means_code.setter
    def payment_means_code(self, payment_means_code):
        """Sets the payment_means_code of this Invoice.

        DEPRECATED. Use paymentMeansArray. How the invoice has been / will be paid. Use only online_payment_service (payment will be made or has been made by an online payment service), bank_card (e.g. debit card, credit card), direct_debit (the amount has been / will be taken out of the client's bank account), standing_agreement (an unspecified payment means known to both buyer and seller) or credit_transfer (the buyer will do / has done a bank transfer). The numeric codes are for legacy purposes, they should not be used.

        :param payment_means_code: The payment_means_code of this Invoice.
        :type payment_means_code: str
        """
        allowed_values = ["online_payment_service", "bank_card", "direct_debit", "standing_agreement", "credit_transfer", "se_bankgiro", "se_plusgiro", "aunz_npp", "", "1", "30", "31", "42", "48", "49", "57", "58"]  # noqa: E501
        if payment_means_code not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_means_code` ({0}), must be one of {1}"
                .format(payment_means_code, allowed_values)
            )

        self._payment_means_code = payment_means_code

    @property
    def payment_means_iban(self):
        """Gets the payment_means_iban of this Invoice.

        DEPRECATED. Use paymentMeansArray. The IBAN the amount payable should be transferred to

        :return: The payment_means_iban of this Invoice.
        :rtype: str
        """
        return self._payment_means_iban

    @payment_means_iban.setter
    def payment_means_iban(self, payment_means_iban):
        """Sets the payment_means_iban of this Invoice.

        DEPRECATED. Use paymentMeansArray. The IBAN the amount payable should be transferred to

        :param payment_means_iban: The payment_means_iban of this Invoice.
        :type payment_means_iban: str
        """

        self._payment_means_iban = payment_means_iban

    @property
    def payment_means_payment_id(self):
        """Gets the payment_means_payment_id of this Invoice.

        DEPRECATED. Use the paymentId in the individual PaymentMeans object. The payment id that you will use to match the payment against the invoice.

        :return: The payment_means_payment_id of this Invoice.
        :rtype: str
        """
        return self._payment_means_payment_id

    @payment_means_payment_id.setter
    def payment_means_payment_id(self, payment_means_payment_id):
        """Sets the payment_means_payment_id of this Invoice.

        DEPRECATED. Use the paymentId in the individual PaymentMeans object. The payment id that you will use to match the payment against the invoice.

        :param payment_means_payment_id: The payment_means_payment_id of this Invoice.
        :type payment_means_payment_id: str
        """

        self._payment_means_payment_id = payment_means_payment_id

    @property
    def payment_terms(self):
        """Gets the payment_terms of this Invoice.


        :return: The payment_terms of this Invoice.
        :rtype: PaymentTerms
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """Sets the payment_terms of this Invoice.


        :param payment_terms: The payment_terms of this Invoice.
        :type payment_terms: PaymentTerms
        """

        self._payment_terms = payment_terms

    @property
    def preferred_invoice_type(self):
        """Gets the preferred_invoice_type of this Invoice.

        In auto mode, the choice between invoice or creditnote is made by Storecove based on what is appropriate for the receiver and the receiver country, in combination with the invoice amount sign. If you wish to state a preference, use this field. It is not guaranteed that the preference will be used, since it depends also on the receiver's document capabilities.

        :return: The preferred_invoice_type of this Invoice.
        :rtype: str
        """
        return self._preferred_invoice_type

    @preferred_invoice_type.setter
    def preferred_invoice_type(self, preferred_invoice_type):
        """Sets the preferred_invoice_type of this Invoice.

        In auto mode, the choice between invoice or creditnote is made by Storecove based on what is appropriate for the receiver and the receiver country, in combination with the invoice amount sign. If you wish to state a preference, use this field. It is not guaranteed that the preference will be used, since it depends also on the receiver's document capabilities.

        :param preferred_invoice_type: The preferred_invoice_type of this Invoice.
        :type preferred_invoice_type: str
        """
        allowed_values = ["prefer_autodetect", "prefer_invoice", "prefer_creditnote"]  # noqa: E501
        if preferred_invoice_type not in allowed_values:
            raise ValueError(
                "Invalid value for `preferred_invoice_type` ({0}), must be one of {1}"
                .format(preferred_invoice_type, allowed_values)
            )

        self._preferred_invoice_type = preferred_invoice_type

    @property
    def prepaid_amount(self):
        """Gets the prepaid_amount of this Invoice.

        The amount already paid.

        :return: The prepaid_amount of this Invoice.
        :rtype: float
        """
        return self._prepaid_amount

    @prepaid_amount.setter
    def prepaid_amount(self, prepaid_amount):
        """Sets the prepaid_amount of this Invoice.

        The amount already paid.

        :param prepaid_amount: The prepaid_amount of this Invoice.
        :type prepaid_amount: float
        """

        self._prepaid_amount = prepaid_amount

    @property
    def price_mode(self):
        """Gets the price_mode of this Invoice.

        The price mode. This is used to determine whether the prices are net or gross. Price Mode 'price_mode_gross' can only be used for \"x2y\": \"b2c\", sender countries ES, IT and PT, \"clearWithoutSending\": true and \"taxSystem\": \"tax_line_percentages\"

        :return: The price_mode of this Invoice.
        :rtype: str
        """
        return self._price_mode

    @price_mode.setter
    def price_mode(self, price_mode):
        """Sets the price_mode of this Invoice.

        The price mode. This is used to determine whether the prices are net or gross. Price Mode 'price_mode_gross' can only be used for \"x2y\": \"b2c\", sender countries ES, IT and PT, \"clearWithoutSending\": true and \"taxSystem\": \"tax_line_percentages\"

        :param price_mode: The price_mode of this Invoice.
        :type price_mode: str
        """
        allowed_values = ["price_mode_net", "price_mode_gross"]  # noqa: E501
        if price_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `price_mode` ({0}), must be one of {1}"
                .format(price_mode, allowed_values)
            )

        self._price_mode = price_mode

    @property
    def project_reference(self):
        """Gets the project_reference of this Invoice.

        DEPRECATED. Information about the project this invoice relates to.

        :return: The project_reference of this Invoice.
        :rtype: str
        """
        return self._project_reference

    @project_reference.setter
    def project_reference(self, project_reference):
        """Sets the project_reference of this Invoice.

        DEPRECATED. Information about the project this invoice relates to.

        :param project_reference: The project_reference of this Invoice.
        :type project_reference: str
        """

        self._project_reference = project_reference

    @property
    def references(self):
        """Gets the references of this Invoice.

        An array of references to other documents. Note that many syntaxes do not support multiple references of the same type in which case they will be concatenated with ','. Also, not all syntaxes support all documentTypes.

        :return: The references of this Invoice.
        :rtype: List[Reference]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this Invoice.

        An array of references to other documents. Note that many syntaxes do not support multiple references of the same type in which case they will be concatenated with ','. Also, not all syntaxes support all documentTypes.

        :param references: The references of this Invoice.
        :type references: List[Reference]
        """
        if references is not None and len(references) < 0:
            raise ValueError("Invalid value for `references`, number of items must be greater than or equal to `0`")

        self._references = references

    @property
    def sales_order_id(self):
        """Gets the sales_order_id of this Invoice.

        DEPRECATED. Use a reference object with a documentType 'sales_order'. A reference to an order for this invoice, assigned by the seller.

        :return: The sales_order_id of this Invoice.
        :rtype: str
        """
        return self._sales_order_id

    @sales_order_id.setter
    def sales_order_id(self, sales_order_id):
        """Sets the sales_order_id of this Invoice.

        DEPRECATED. Use a reference object with a documentType 'sales_order'. A reference to an order for this invoice, assigned by the seller.

        :param sales_order_id: The sales_order_id of this Invoice.
        :type sales_order_id: str
        """

        self._sales_order_id = sales_order_id

    @property
    def self_billing_mode(self):
        """Gets the self_billing_mode of this Invoice.

        In self billing mode, the AccountingCustomerParty and the AccountingSupplierParty are be switched. Such an invoice can only be sent via email. Also, your account will need to allow the use of this mode, so before trying to use this please first contact Storecove.

        :return: The self_billing_mode of this Invoice.
        :rtype: bool
        """
        return self._self_billing_mode

    @self_billing_mode.setter
    def self_billing_mode(self, self_billing_mode):
        """Sets the self_billing_mode of this Invoice.

        In self billing mode, the AccountingCustomerParty and the AccountingSupplierParty are be switched. Such an invoice can only be sent via email. Also, your account will need to allow the use of this mode, so before trying to use this please first contact Storecove.

        :param self_billing_mode: The self_billing_mode of this Invoice.
        :type self_billing_mode: bool
        """

        self._self_billing_mode = self_billing_mode

    @property
    def tax_exempt_reason(self):
        """Gets the tax_exempt_reason of this Invoice.

        DEPRECATED. Use Tax/category and specify this per invoice line. If you do specify this field, it will be applied to all invoice lines and it is an error to specify a Tax/category at the invoice line level. This field holds the reason no tax is present in the invoice. Note that this is an invoice level field and you cannot specify it per invoice line. This field is mandatory unless tax is present in the invoice.

        :return: The tax_exempt_reason of this Invoice.
        :rtype: str
        """
        return self._tax_exempt_reason

    @tax_exempt_reason.setter
    def tax_exempt_reason(self, tax_exempt_reason):
        """Sets the tax_exempt_reason of this Invoice.

        DEPRECATED. Use Tax/category and specify this per invoice line. If you do specify this field, it will be applied to all invoice lines and it is an error to specify a Tax/category at the invoice line level. This field holds the reason no tax is present in the invoice. Note that this is an invoice level field and you cannot specify it per invoice line. This field is mandatory unless tax is present in the invoice.

        :param tax_exempt_reason: The tax_exempt_reason of this Invoice.
        :type tax_exempt_reason: str
        """
        allowed_values = ["export", "reverse_charge", "zero_rated", "exempt", "outside_scope", "intra_community"]  # noqa: E501
        if tax_exempt_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_exempt_reason` ({0}), must be one of {1}"
                .format(tax_exempt_reason, allowed_values)
            )

        self._tax_exempt_reason = tax_exempt_reason

    @property
    def tax_point_date(self):
        """Gets the tax_point_date of this Invoice.

        The tax date is the date on which the supply of goods or of services was made or completed or the date on which the payment on account was made insofar as that date can be determined and differs from the date of the issue of the invoice. EU 2006-112 Article 226 Point 7. Note: For the Dutch TAX authorities the tac date should be the same as the issue date.

        :return: The tax_point_date of this Invoice.
        :rtype: str
        """
        return self._tax_point_date

    @tax_point_date.setter
    def tax_point_date(self, tax_point_date):
        """Sets the tax_point_date of this Invoice.

        The tax date is the date on which the supply of goods or of services was made or completed or the date on which the payment on account was made insofar as that date can be determined and differs from the date of the issue of the invoice. EU 2006-112 Article 226 Point 7. Note: For the Dutch TAX authorities the tac date should be the same as the issue date.

        :param tax_point_date: The tax_point_date of this Invoice.
        :type tax_point_date: str
        """
        if tax_point_date is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$', tax_point_date):
            raise ValueError("Invalid value for `tax_point_date`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/`")

        self._tax_point_date = tax_point_date

    @property
    def tax_subtotals(self):
        """Gets the tax_subtotals of this Invoice.

        An array of tax subtotals. This element is mandatory for taxSystem 'tax_line_percentages'.

        :return: The tax_subtotals of this Invoice.
        :rtype: List[TaxSubtotal]
        """
        return self._tax_subtotals

    @tax_subtotals.setter
    def tax_subtotals(self, tax_subtotals):
        """Sets the tax_subtotals of this Invoice.

        An array of tax subtotals. This element is mandatory for taxSystem 'tax_line_percentages'.

        :param tax_subtotals: The tax_subtotals of this Invoice.
        :type tax_subtotals: List[TaxSubtotal]
        """
        if tax_subtotals is not None and len(tax_subtotals) < 0:
            raise ValueError("Invalid value for `tax_subtotals`, number of items must be greater than or equal to `0`")

        self._tax_subtotals = tax_subtotals

    @property
    def tax_system(self):
        """Gets the tax_system of this Invoice.

        The tax system used for the invoice. The system 'tax_line_percentages' is preferred, but for historic purposes 'tax_line_amounts' is supported and the default. Since not all invoice formats that we are required to send support 'tax_line_amounts' we will need to convert the invoice to the 'tax_line_percentags' system if we are forced to send the invoice in that tax system. Note that an invoice must always contain tax information, even if that is 0% or an item or sender is exempt or tax is completely outside scope. In that case, use the correct tax categories (see <<_openapi_tax>>)

        :return: The tax_system of this Invoice.
        :rtype: str
        """
        return self._tax_system

    @tax_system.setter
    def tax_system(self, tax_system):
        """Sets the tax_system of this Invoice.

        The tax system used for the invoice. The system 'tax_line_percentages' is preferred, but for historic purposes 'tax_line_amounts' is supported and the default. Since not all invoice formats that we are required to send support 'tax_line_amounts' we will need to convert the invoice to the 'tax_line_percentags' system if we are forced to send the invoice in that tax system. Note that an invoice must always contain tax information, even if that is 0% or an item or sender is exempt or tax is completely outside scope. In that case, use the correct tax categories (see <<_openapi_tax>>)

        :param tax_system: The tax_system of this Invoice.
        :type tax_system: str
        """
        allowed_values = ["tax_line_amounts", "tax_line_percentages"]  # noqa: E501
        if tax_system not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_system` ({0}), must be one of {1}"
                .format(tax_system, allowed_values)
            )

        self._tax_system = tax_system

    @property
    def taxes_duties_fees(self):
        """Gets the taxes_duties_fees of this Invoice.

        An array of taxes, duties and fees for this invoice. At this moment, the only invoice level tax allowed is the Italian '€2 bollo virtuale'

        :return: The taxes_duties_fees of this Invoice.
        :rtype: List[Tax]
        """
        return self._taxes_duties_fees

    @taxes_duties_fees.setter
    def taxes_duties_fees(self, taxes_duties_fees):
        """Sets the taxes_duties_fees of this Invoice.

        An array of taxes, duties and fees for this invoice. At this moment, the only invoice level tax allowed is the Italian '€2 bollo virtuale'

        :param taxes_duties_fees: The taxes_duties_fees of this Invoice.
        :type taxes_duties_fees: List[Tax]
        """
        if taxes_duties_fees is not None and len(taxes_duties_fees) > 1:
            raise ValueError("Invalid value for `taxes_duties_fees`, number of items must be less than or equal to `1`")
        if taxes_duties_fees is not None and len(taxes_duties_fees) < 0:
            raise ValueError("Invalid value for `taxes_duties_fees`, number of items must be greater than or equal to `0`")

        self._taxes_duties_fees = taxes_duties_fees

    @property
    def transaction_type(self):
        """Gets the transaction_type of this Invoice.

        The type of transaction. Currently used only for India.

        :return: The transaction_type of this Invoice.
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this Invoice.

        The type of transaction. Currently used only for India.

        :param transaction_type: The transaction_type of this Invoice.
        :type transaction_type: str
        """
        allowed_values = ["b2b", "sezwp", "sezwop", "expwp", "expwop", "dexp"]  # noqa: E501
        if transaction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type

    @property
    def ubl_extensions(self):
        """Gets the ubl_extensions of this Invoice.

        An array of ubl extensions.

        :return: The ubl_extensions of this Invoice.
        :rtype: List[str]
        """
        return self._ubl_extensions

    @ubl_extensions.setter
    def ubl_extensions(self, ubl_extensions):
        """Sets the ubl_extensions of this Invoice.

        An array of ubl extensions.

        :param ubl_extensions: The ubl_extensions of this Invoice.
        :type ubl_extensions: List[str]
        """

        self._ubl_extensions = ubl_extensions

    @property
    def vat_reverse_charge(self):
        """Gets the vat_reverse_charge of this Invoice.

        DEPRECATED. Use taxExemptReason.

        :return: The vat_reverse_charge of this Invoice.
        :rtype: bool
        """
        return self._vat_reverse_charge

    @vat_reverse_charge.setter
    def vat_reverse_charge(self, vat_reverse_charge):
        """Sets the vat_reverse_charge of this Invoice.

        DEPRECATED. Use taxExemptReason.

        :param vat_reverse_charge: The vat_reverse_charge of this Invoice.
        :type vat_reverse_charge: bool
        """

        self._vat_reverse_charge = vat_reverse_charge

    @property
    def x2y(self):
        """Gets the x2y of this Invoice.

        The type of entities the document is sent from/to: b2b (business-to-business), b2g (business-to-government) or b2c (business-to-consumer). This field does not have a default, but it in mose cases it will be treated as b2b. Only when you explicitly specify b2g or b2c OR when it is clear from the context will a different value be used. For instance, when we see the document is being routed to DE:LWID or NL:OINO number, this tells us it is b2g. But in many cases we are unable to determine this and so it is best to always specify this field. Note that b2b_sez is for use inside India only.

        :return: The x2y of this Invoice.
        :rtype: str
        """
        return self._x2y

    @x2y.setter
    def x2y(self, x2y):
        """Sets the x2y of this Invoice.

        The type of entities the document is sent from/to: b2b (business-to-business), b2g (business-to-government) or b2c (business-to-consumer). This field does not have a default, but it in mose cases it will be treated as b2b. Only when you explicitly specify b2g or b2c OR when it is clear from the context will a different value be used. For instance, when we see the document is being routed to DE:LWID or NL:OINO number, this tells us it is b2g. But in many cases we are unable to determine this and so it is best to always specify this field. Note that b2b_sez is for use inside India only.

        :param x2y: The x2y of this Invoice.
        :type x2y: str
        """
        allowed_values = ["b2b", "b2g", "b2c", "b2b_sez"]  # noqa: E501
        if x2y not in allowed_values:
            raise ValueError(
                "Invalid value for `x2y` ({0}), must be one of {1}"
                .format(x2y, allowed_values)
            )

        self._x2y = x2y
