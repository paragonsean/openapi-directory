# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invoice_response_clarification import InvoiceResponseClarification
import re
from openapi_server import util


class DocumentInvoiceResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clarifications: List[InvoiceResponseClarification]=None, effective_date: str=None, note: str=None, response_code: str=None):
        """DocumentInvoiceResponse - a model defined in OpenAPI

        :param clarifications: The clarifications of this DocumentInvoiceResponse.
        :param effective_date: The effective_date of this DocumentInvoiceResponse.
        :param note: The note of this DocumentInvoiceResponse.
        :param response_code: The response_code of this DocumentInvoiceResponse.
        """
        self.openapi_types = {
            'clarifications': List[InvoiceResponseClarification],
            'effective_date': str,
            'note': str,
            'response_code': str
        }

        self.attribute_map = {
            'clarifications': 'clarifications',
            'effective_date': 'effectiveDate',
            'note': 'note',
            'response_code': 'responseCode'
        }

        self._clarifications = clarifications
        self._effective_date = effective_date
        self._note = note
        self._response_code = response_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentInvoiceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentInvoiceResponse of this DocumentInvoiceResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clarifications(self):
        """Gets the clarifications of this DocumentInvoiceResponse.

        A list of clarifications why a received invoice was rejected (RE) or under query (UQ) and what action to take.

        :return: The clarifications of this DocumentInvoiceResponse.
        :rtype: List[InvoiceResponseClarification]
        """
        return self._clarifications

    @clarifications.setter
    def clarifications(self, clarifications):
        """Sets the clarifications of this DocumentInvoiceResponse.

        A list of clarifications why a received invoice was rejected (RE) or under query (UQ) and what action to take.

        :param clarifications: The clarifications of this DocumentInvoiceResponse.
        :type clarifications: List[InvoiceResponseClarification]
        """
        if clarifications is not None and len(clarifications) < 0:
            raise ValueError("Invalid value for `clarifications`, number of items must be greater than or equal to `0`")

        self._clarifications = clarifications

    @property
    def effective_date(self):
        """Gets the effective_date of this DocumentInvoiceResponse.

        The date when the status became effective. Format: yyyy-mm-dd.

        :return: The effective_date of this DocumentInvoiceResponse.
        :rtype: str
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this DocumentInvoiceResponse.

        The date when the status became effective. Format: yyyy-mm-dd.

        :param effective_date: The effective_date of this DocumentInvoiceResponse.
        :type effective_date: str
        """
        if effective_date is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$', effective_date):
            raise ValueError("Invalid value for `effective_date`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/`")

        self._effective_date = effective_date

    @property
    def note(self):
        """Gets the note of this DocumentInvoiceResponse.

        A note to add to the invoice reponse

        :return: The note of this DocumentInvoiceResponse.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this DocumentInvoiceResponse.

        A note to add to the invoice reponse

        :param note: The note of this DocumentInvoiceResponse.
        :type note: str
        """

        self._note = note

    @property
    def response_code(self):
        """Gets the response_code of this DocumentInvoiceResponse.

        The response code. For details see https://docs.peppol.eu/poacc/upgrade-3/codelist/UNCL4343-T111/

        :return: The response_code of this DocumentInvoiceResponse.
        :rtype: str
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this DocumentInvoiceResponse.

        The response code. For details see https://docs.peppol.eu/poacc/upgrade-3/codelist/UNCL4343-T111/

        :param response_code: The response_code of this DocumentInvoiceResponse.
        :type response_code: str
        """
        allowed_values = ["AB", "IP", "UQ", "CA", "RE", "AP", "PD"]  # noqa: E501
        if response_code not in allowed_values:
            raise ValueError(
                "Invalid value for `response_code` ({0}), must be one of {1}"
                .format(response_code, allowed_values)
            )

        self._response_code = response_code
