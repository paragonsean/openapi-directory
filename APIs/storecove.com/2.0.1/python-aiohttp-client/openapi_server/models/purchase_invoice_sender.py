# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.peppol_identifier import PeppolIdentifier
from openapi_server.models.purchase_invoice_sender_billing_contact import PurchaseInvoiceSenderBillingContact
from openapi_server import util


class PurchaseInvoiceSender(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_contact: PurchaseInvoiceSenderBillingContact=None, building_number: str=None, city: str=None, country: str=None, county: str=None, department: str=None, identifiers: List[PeppolIdentifier]=None, legal_name: str=None, line1: str=None, line2: str=None, neighborhood: str=None, party_name: str=None, peppol_identifiers: PeppolIdentifier=None, secondary_number: str=None, zip: str=None):
        """PurchaseInvoiceSender - a model defined in OpenAPI

        :param billing_contact: The billing_contact of this PurchaseInvoiceSender.
        :param building_number: The building_number of this PurchaseInvoiceSender.
        :param city: The city of this PurchaseInvoiceSender.
        :param country: The country of this PurchaseInvoiceSender.
        :param county: The county of this PurchaseInvoiceSender.
        :param department: The department of this PurchaseInvoiceSender.
        :param identifiers: The identifiers of this PurchaseInvoiceSender.
        :param legal_name: The legal_name of this PurchaseInvoiceSender.
        :param line1: The line1 of this PurchaseInvoiceSender.
        :param line2: The line2 of this PurchaseInvoiceSender.
        :param neighborhood: The neighborhood of this PurchaseInvoiceSender.
        :param party_name: The party_name of this PurchaseInvoiceSender.
        :param peppol_identifiers: The peppol_identifiers of this PurchaseInvoiceSender.
        :param secondary_number: The secondary_number of this PurchaseInvoiceSender.
        :param zip: The zip of this PurchaseInvoiceSender.
        """
        self.openapi_types = {
            'billing_contact': PurchaseInvoiceSenderBillingContact,
            'building_number': str,
            'city': str,
            'country': str,
            'county': str,
            'department': str,
            'identifiers': List[PeppolIdentifier],
            'legal_name': str,
            'line1': str,
            'line2': str,
            'neighborhood': str,
            'party_name': str,
            'peppol_identifiers': PeppolIdentifier,
            'secondary_number': str,
            'zip': str
        }

        self.attribute_map = {
            'billing_contact': 'billing_contact',
            'building_number': 'building_number',
            'city': 'city',
            'country': 'country',
            'county': 'county',
            'department': 'department',
            'identifiers': 'identifiers',
            'legal_name': 'legal_name',
            'line1': 'line1',
            'line2': 'line2',
            'neighborhood': 'neighborhood',
            'party_name': 'party_name',
            'peppol_identifiers': 'peppol_identifiers',
            'secondary_number': 'secondary_number',
            'zip': 'zip'
        }

        self._billing_contact = billing_contact
        self._building_number = building_number
        self._city = city
        self._country = country
        self._county = county
        self._department = department
        self._identifiers = identifiers
        self._legal_name = legal_name
        self._line1 = line1
        self._line2 = line2
        self._neighborhood = neighborhood
        self._party_name = party_name
        self._peppol_identifiers = peppol_identifiers
        self._secondary_number = secondary_number
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseInvoiceSender':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurchaseInvoiceSender of this PurchaseInvoiceSender.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_contact(self):
        """Gets the billing_contact of this PurchaseInvoiceSender.


        :return: The billing_contact of this PurchaseInvoiceSender.
        :rtype: PurchaseInvoiceSenderBillingContact
        """
        return self._billing_contact

    @billing_contact.setter
    def billing_contact(self, billing_contact):
        """Sets the billing_contact of this PurchaseInvoiceSender.


        :param billing_contact: The billing_contact of this PurchaseInvoiceSender.
        :type billing_contact: PurchaseInvoiceSenderBillingContact
        """

        self._billing_contact = billing_contact

    @property
    def building_number(self):
        """Gets the building_number of this PurchaseInvoiceSender.

        The building number. Used in SA.

        :return: The building_number of this PurchaseInvoiceSender.
        :rtype: str
        """
        return self._building_number

    @building_number.setter
    def building_number(self, building_number):
        """Sets the building_number of this PurchaseInvoiceSender.

        The building number. Used in SA.

        :param building_number: The building_number of this PurchaseInvoiceSender.
        :type building_number: str
        """

        self._building_number = building_number

    @property
    def city(self):
        """Gets the city of this PurchaseInvoiceSender.

        The city.

        :return: The city of this PurchaseInvoiceSender.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this PurchaseInvoiceSender.

        The city.

        :param city: The city of this PurchaseInvoiceSender.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this PurchaseInvoiceSender.

        The country.

        :return: The country of this PurchaseInvoiceSender.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PurchaseInvoiceSender.

        The country.

        :param country: The country of this PurchaseInvoiceSender.
        :type country: str
        """

        self._country = country

    @property
    def county(self):
        """Gets the county of this PurchaseInvoiceSender.

        The county.

        :return: The county of this PurchaseInvoiceSender.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this PurchaseInvoiceSender.

        The county.

        :param county: The county of this PurchaseInvoiceSender.
        :type county: str
        """

        self._county = county

    @property
    def department(self):
        """Gets the department of this PurchaseInvoiceSender.

        The department who sent the invoice.

        :return: The department of this PurchaseInvoiceSender.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this PurchaseInvoiceSender.

        The department who sent the invoice.

        :param department: The department of this PurchaseInvoiceSender.
        :type department: str
        """

        self._department = department

    @property
    def identifiers(self):
        """Gets the identifiers of this PurchaseInvoiceSender.

        The array of identifiers for this sender.

        :return: The identifiers of this PurchaseInvoiceSender.
        :rtype: List[PeppolIdentifier]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this PurchaseInvoiceSender.

        The array of identifiers for this sender.

        :param identifiers: The identifiers of this PurchaseInvoiceSender.
        :type identifiers: List[PeppolIdentifier]
        """

        self._identifiers = identifiers

    @property
    def legal_name(self):
        """Gets the legal_name of this PurchaseInvoiceSender.

        The legal name of the party who sent the invoice.

        :return: The legal_name of this PurchaseInvoiceSender.
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this PurchaseInvoiceSender.

        The legal name of the party who sent the invoice.

        :param legal_name: The legal_name of this PurchaseInvoiceSender.
        :type legal_name: str
        """

        self._legal_name = legal_name

    @property
    def line1(self):
        """Gets the line1 of this PurchaseInvoiceSender.

        The address

        :return: The line1 of this PurchaseInvoiceSender.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this PurchaseInvoiceSender.

        The address

        :param line1: The line1 of this PurchaseInvoiceSender.
        :type line1: str
        """

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this PurchaseInvoiceSender.

        The address, line 2

        :return: The line2 of this PurchaseInvoiceSender.
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this PurchaseInvoiceSender.

        The address, line 2

        :param line2: The line2 of this PurchaseInvoiceSender.
        :type line2: str
        """

        self._line2 = line2

    @property
    def neighborhood(self):
        """Gets the neighborhood of this PurchaseInvoiceSender.

        The neighborhood. Used in SA.

        :return: The neighborhood of this PurchaseInvoiceSender.
        :rtype: str
        """
        return self._neighborhood

    @neighborhood.setter
    def neighborhood(self, neighborhood):
        """Sets the neighborhood of this PurchaseInvoiceSender.

        The neighborhood. Used in SA.

        :param neighborhood: The neighborhood of this PurchaseInvoiceSender.
        :type neighborhood: str
        """

        self._neighborhood = neighborhood

    @property
    def party_name(self):
        """Gets the party_name of this PurchaseInvoiceSender.

        The party who sent the invoice.

        :return: The party_name of this PurchaseInvoiceSender.
        :rtype: str
        """
        return self._party_name

    @party_name.setter
    def party_name(self, party_name):
        """Sets the party_name of this PurchaseInvoiceSender.

        The party who sent the invoice.

        :param party_name: The party_name of this PurchaseInvoiceSender.
        :type party_name: str
        """

        self._party_name = party_name

    @property
    def peppol_identifiers(self):
        """Gets the peppol_identifiers of this PurchaseInvoiceSender.


        :return: The peppol_identifiers of this PurchaseInvoiceSender.
        :rtype: PeppolIdentifier
        """
        return self._peppol_identifiers

    @peppol_identifiers.setter
    def peppol_identifiers(self, peppol_identifiers):
        """Sets the peppol_identifiers of this PurchaseInvoiceSender.


        :param peppol_identifiers: The peppol_identifiers of this PurchaseInvoiceSender.
        :type peppol_identifiers: PeppolIdentifier
        """

        self._peppol_identifiers = peppol_identifiers

    @property
    def secondary_number(self):
        """Gets the secondary_number of this PurchaseInvoiceSender.

        The secondary number. Used in SA.

        :return: The secondary_number of this PurchaseInvoiceSender.
        :rtype: str
        """
        return self._secondary_number

    @secondary_number.setter
    def secondary_number(self, secondary_number):
        """Sets the secondary_number of this PurchaseInvoiceSender.

        The secondary number. Used in SA.

        :param secondary_number: The secondary_number of this PurchaseInvoiceSender.
        :type secondary_number: str
        """

        self._secondary_number = secondary_number

    @property
    def zip(self):
        """Gets the zip of this PurchaseInvoiceSender.

        The zip code.

        :return: The zip of this PurchaseInvoiceSender.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this PurchaseInvoiceSender.

        The zip code.

        :param zip: The zip of this PurchaseInvoiceSender.
        :type zip: str
        """

        self._zip = zip
