# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdministrationUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, package_version: str=None, packaging: str=None, sender_email_identity_id: int=None):
        """AdministrationUpdate - a model defined in OpenAPI

        :param email: The email of this AdministrationUpdate.
        :param package_version: The package_version of this AdministrationUpdate.
        :param packaging: The packaging of this AdministrationUpdate.
        :param sender_email_identity_id: The sender_email_identity_id of this AdministrationUpdate.
        """
        self.openapi_types = {
            'email': str,
            'package_version': str,
            'packaging': str,
            'sender_email_identity_id': int
        }

        self.attribute_map = {
            'email': 'email',
            'package_version': 'package_version',
            'packaging': 'packaging',
            'sender_email_identity_id': 'sender_email_identity_id'
        }

        self._email = email
        self._package_version = package_version
        self._packaging = packaging
        self._sender_email_identity_id = sender_email_identity_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdministrationUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdministrationUpdate of this AdministrationUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this AdministrationUpdate.

        The email address to send the received document to

        :return: The email of this AdministrationUpdate.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AdministrationUpdate.

        The email address to send the received document to

        :param email: The email of this AdministrationUpdate.
        :type email: str
        """
        if email is not None and len(email) > 128:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `128`")
        if email is not None and len(email) < 5:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `5`")

        self._email = email

    @property
    def package_version(self):
        """Gets the package_version of this AdministrationUpdate.

        The version of the package.

        :return: The package_version of this AdministrationUpdate.
        :rtype: str
        """
        return self._package_version

    @package_version.setter
    def package_version(self, package_version):
        """Sets the package_version of this AdministrationUpdate.

        The version of the package.

        :param package_version: The package_version of this AdministrationUpdate.
        :type package_version: str
        """
        allowed_values = ["peppol_bis_v3", "aunz", "sg"]  # noqa: E501
        if package_version not in allowed_values:
            raise ValueError(
                "Invalid value for `package_version` ({0}), must be one of {1}"
                .format(package_version, allowed_values)
            )

        self._package_version = package_version

    @property
    def packaging(self):
        """Gets the packaging of this AdministrationUpdate.

        How to package the purchase invoice.

        :return: The packaging of this AdministrationUpdate.
        :rtype: str
        """
        return self._packaging

    @packaging.setter
    def packaging(self, packaging):
        """Sets the packaging of this AdministrationUpdate.

        How to package the purchase invoice.

        :param packaging: The packaging of this AdministrationUpdate.
        :type packaging: str
        """
        allowed_values = ["ubl"]  # noqa: E501
        if packaging not in allowed_values:
            raise ValueError(
                "Invalid value for `packaging` ({0}), must be one of {1}"
                .format(packaging, allowed_values)
            )

        self._packaging = packaging

    @property
    def sender_email_identity_id(self):
        """Gets the sender_email_identity_id of this AdministrationUpdate.

        The id of the SenderEmailIdentity. If not provided, the Storecove default sender will be used

        :return: The sender_email_identity_id of this AdministrationUpdate.
        :rtype: int
        """
        return self._sender_email_identity_id

    @sender_email_identity_id.setter
    def sender_email_identity_id(self, sender_email_identity_id):
        """Sets the sender_email_identity_id of this AdministrationUpdate.

        The id of the SenderEmailIdentity. If not provided, the Storecove default sender will be used

        :param sender_email_identity_id: The sender_email_identity_id of this AdministrationUpdate.
        :type sender_email_identity_id: int
        """

        self._sender_email_identity_id = sender_email_identity_id
