# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CountrySpecificationIdentifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, centalized_identifier_test: str=None, centralized: bool=None, centralized_identifier: str=None, description: str=None, scheme: str=None, scheme_numercial: str=None, scheme_type: str=None):
        """CountrySpecificationIdentifier - a model defined in OpenAPI

        :param centalized_identifier_test: The centalized_identifier_test of this CountrySpecificationIdentifier.
        :param centralized: The centralized of this CountrySpecificationIdentifier.
        :param centralized_identifier: The centralized_identifier of this CountrySpecificationIdentifier.
        :param description: The description of this CountrySpecificationIdentifier.
        :param scheme: The scheme of this CountrySpecificationIdentifier.
        :param scheme_numercial: The scheme_numercial of this CountrySpecificationIdentifier.
        :param scheme_type: The scheme_type of this CountrySpecificationIdentifier.
        """
        self.openapi_types = {
            'centalized_identifier_test': str,
            'centralized': bool,
            'centralized_identifier': str,
            'description': str,
            'scheme': str,
            'scheme_numercial': str,
            'scheme_type': str
        }

        self.attribute_map = {
            'centalized_identifier_test': 'centalized_identifier_test',
            'centralized': 'centralized',
            'centralized_identifier': 'centralized_identifier',
            'description': 'description',
            'scheme': 'scheme',
            'scheme_numercial': 'scheme_numercial',
            'scheme_type': 'scheme_type'
        }

        self._centalized_identifier_test = centalized_identifier_test
        self._centralized = centralized
        self._centralized_identifier = centralized_identifier
        self._description = description
        self._scheme = scheme
        self._scheme_numercial = scheme_numercial
        self._scheme_type = scheme_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountrySpecificationIdentifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CountrySpecificationIdentifier of this CountrySpecificationIdentifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def centalized_identifier_test(self):
        """Gets the centalized_identifier_test of this CountrySpecificationIdentifier.

        The centralized identifier to use for routing in test cases, if the \"centralized\" proprerty is true. May not always be available depending on the country and network.

        :return: The centalized_identifier_test of this CountrySpecificationIdentifier.
        :rtype: str
        """
        return self._centalized_identifier_test

    @centalized_identifier_test.setter
    def centalized_identifier_test(self, centalized_identifier_test):
        """Sets the centalized_identifier_test of this CountrySpecificationIdentifier.

        The centralized identifier to use for routing in test cases, if the \"centralized\" proprerty is true. May not always be available depending on the country and network.

        :param centalized_identifier_test: The centalized_identifier_test of this CountrySpecificationIdentifier.
        :type centalized_identifier_test: str
        """

        self._centalized_identifier_test = centalized_identifier_test

    @property
    def centralized(self):
        """Gets the centralized of this CountrySpecificationIdentifier.

        Whether or not the identifier represents a centralized routing identifier. This is used in SG, AT and FR where all government invoices are routed to a central accesspoint with a single identifier. This field can only be present for routing identifiers.

        :return: The centralized of this CountrySpecificationIdentifier.
        :rtype: bool
        """
        return self._centralized

    @centralized.setter
    def centralized(self, centralized):
        """Sets the centralized of this CountrySpecificationIdentifier.

        Whether or not the identifier represents a centralized routing identifier. This is used in SG, AT and FR where all government invoices are routed to a central accesspoint with a single identifier. This field can only be present for routing identifiers.

        :param centralized: The centralized of this CountrySpecificationIdentifier.
        :type centralized: bool
        """

        self._centralized = centralized

    @property
    def centralized_identifier(self):
        """Gets the centralized_identifier of this CountrySpecificationIdentifier.

        The centralized identifier to use for routing, if the \"centralized\" proprerty is true.

        :return: The centralized_identifier of this CountrySpecificationIdentifier.
        :rtype: str
        """
        return self._centralized_identifier

    @centralized_identifier.setter
    def centralized_identifier(self, centralized_identifier):
        """Sets the centralized_identifier of this CountrySpecificationIdentifier.

        The centralized identifier to use for routing, if the \"centralized\" proprerty is true.

        :param centralized_identifier: The centralized_identifier of this CountrySpecificationIdentifier.
        :type centralized_identifier: str
        """

        self._centralized_identifier = centralized_identifier

    @property
    def description(self):
        """Gets the description of this CountrySpecificationIdentifier.

        Identifier description.

        :return: The description of this CountrySpecificationIdentifier.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CountrySpecificationIdentifier.

        Identifier description.

        :param description: The description of this CountrySpecificationIdentifier.
        :type description: str
        """

        self._description = description

    @property
    def scheme(self):
        """Gets the scheme of this CountrySpecificationIdentifier.

        The scheme of the identifier

        :return: The scheme of this CountrySpecificationIdentifier.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this CountrySpecificationIdentifier.

        The scheme of the identifier

        :param scheme: The scheme of this CountrySpecificationIdentifier.
        :type scheme: str
        """

        self._scheme = scheme

    @property
    def scheme_numercial(self):
        """Gets the scheme_numercial of this CountrySpecificationIdentifier.

        The numerical version of the scheme of the identifier

        :return: The scheme_numercial of this CountrySpecificationIdentifier.
        :rtype: str
        """
        return self._scheme_numercial

    @scheme_numercial.setter
    def scheme_numercial(self, scheme_numercial):
        """Sets the scheme_numercial of this CountrySpecificationIdentifier.

        The numerical version of the scheme of the identifier

        :param scheme_numercial: The scheme_numercial of this CountrySpecificationIdentifier.
        :type scheme_numercial: str
        """

        self._scheme_numercial = scheme_numercial

    @property
    def scheme_type(self):
        """Gets the scheme_type of this CountrySpecificationIdentifier.

        The scheme type of the identifier. Currently always \"iso6523-actorid-upis\"

        :return: The scheme_type of this CountrySpecificationIdentifier.
        :rtype: str
        """
        return self._scheme_type

    @scheme_type.setter
    def scheme_type(self, scheme_type):
        """Sets the scheme_type of this CountrySpecificationIdentifier.

        The scheme type of the identifier. Currently always \"iso6523-actorid-upis\"

        :param scheme_type: The scheme_type of this CountrySpecificationIdentifier.
        :type scheme_type: str
        """
        allowed_values = ["iso6523-actorid-upis"]  # noqa: E501
        if scheme_type not in allowed_values:
            raise ValueError(
                "Invalid value for `scheme_type` ({0}), must be one of {1}"
                .format(scheme_type, allowed_values)
            )

        self._scheme_type = scheme_type
