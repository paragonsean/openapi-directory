# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.routing_identifier import RoutingIdentifier
from openapi_server import util


class Routing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clear_without_sending: bool=False, e_identifiers: List[RoutingIdentifier]=None, emails: List[str]=None):
        """Routing - a model defined in OpenAPI

        :param clear_without_sending: The clear_without_sending of this Routing.
        :param e_identifiers: The e_identifiers of this Routing.
        :param emails: The emails of this Routing.
        """
        self.openapi_types = {
            'clear_without_sending': bool,
            'e_identifiers': List[RoutingIdentifier],
            'emails': List[str]
        }

        self.attribute_map = {
            'clear_without_sending': 'clearWithoutSending',
            'e_identifiers': 'eIdentifiers',
            'emails': 'emails'
        }

        self._clear_without_sending = clear_without_sending
        self._e_identifiers = e_identifiers
        self._emails = emails

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Routing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Routing of this Routing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clear_without_sending(self):
        """Gets the clear_without_sending of this Routing.

        If you wish to send the document yourself in a Y-flow, use this flag. Wait for the 'cleared' webhook and use the <<_openapi_show_document_submission_evidence>> endpoint to retrieve the clearing evidence. This will include a sendable document.

        :return: The clear_without_sending of this Routing.
        :rtype: bool
        """
        return self._clear_without_sending

    @clear_without_sending.setter
    def clear_without_sending(self, clear_without_sending):
        """Sets the clear_without_sending of this Routing.

        If you wish to send the document yourself in a Y-flow, use this flag. Wait for the 'cleared' webhook and use the <<_openapi_show_document_submission_evidence>> endpoint to retrieve the clearing evidence. This will include a sendable document.

        :param clear_without_sending: The clear_without_sending of this Routing.
        :type clear_without_sending: bool
        """

        self._clear_without_sending = clear_without_sending

    @property
    def e_identifiers(self):
        """Gets the e_identifiers of this Routing.

        A list of electronic routing identifiers. These are the identifiers used on the Peppol network or for other destinations.

        :return: The e_identifiers of this Routing.
        :rtype: List[RoutingIdentifier]
        """
        return self._e_identifiers

    @e_identifiers.setter
    def e_identifiers(self, e_identifiers):
        """Sets the e_identifiers of this Routing.

        A list of electronic routing identifiers. These are the identifiers used on the Peppol network or for other destinations.

        :param e_identifiers: The e_identifiers of this Routing.
        :type e_identifiers: List[RoutingIdentifier]
        """

        self._e_identifiers = e_identifiers

    @property
    def emails(self):
        """Gets the emails of this Routing.

        The email addresses the invoice should be sent to if none of the other identifiers can be used

        :return: The emails of this Routing.
        :rtype: List[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Routing.

        The email addresses the invoice should be sent to if none of the other identifiers can be used

        :param emails: The emails of this Routing.
        :type emails: List[str]
        """

        self._emails = emails
