# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allowance_charge import AllowanceCharge
from openapi_server.models.attachment import Attachment
from openapi_server.models.currency_code import CurrencyCode
from openapi_server.models.delivery import Delivery
from openapi_server.models.delivery_terms import DeliveryTerms
from openapi_server.models.order_line import OrderLine
from openapi_server.models.payment_terms import PaymentTerms
from openapi_server.models.reference import Reference
from openapi_server.models.seller_supplier_party import SellerSupplierParty
import re
from openapi_server import util


class DocumentOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounting_cost: str=None, allowance_charges: List[AllowanceCharge]=None, amount_including_tax: float=None, attachments: List[Attachment]=None, delivery: Delivery=None, delivery_terms: DeliveryTerms=None, document_currency_code: CurrencyCode=None, document_number: str=None, issue_date: str=None, issue_time: str=None, note: str=None, order_lines: List[OrderLine]=None, order_type: str='regular', payment_terms: PaymentTerms=None, references: List[Reference]=None, seller_supplier_party: SellerSupplierParty=None, tax_system: str='tax_line_percentages', time_zone: str=None, validity_period: str=None):
        """DocumentOrder - a model defined in OpenAPI

        :param accounting_cost: The accounting_cost of this DocumentOrder.
        :param allowance_charges: The allowance_charges of this DocumentOrder.
        :param amount_including_tax: The amount_including_tax of this DocumentOrder.
        :param attachments: The attachments of this DocumentOrder.
        :param delivery: The delivery of this DocumentOrder.
        :param delivery_terms: The delivery_terms of this DocumentOrder.
        :param document_currency_code: The document_currency_code of this DocumentOrder.
        :param document_number: The document_number of this DocumentOrder.
        :param issue_date: The issue_date of this DocumentOrder.
        :param issue_time: The issue_time of this DocumentOrder.
        :param note: The note of this DocumentOrder.
        :param order_lines: The order_lines of this DocumentOrder.
        :param order_type: The order_type of this DocumentOrder.
        :param payment_terms: The payment_terms of this DocumentOrder.
        :param references: The references of this DocumentOrder.
        :param seller_supplier_party: The seller_supplier_party of this DocumentOrder.
        :param tax_system: The tax_system of this DocumentOrder.
        :param time_zone: The time_zone of this DocumentOrder.
        :param validity_period: The validity_period of this DocumentOrder.
        """
        self.openapi_types = {
            'accounting_cost': str,
            'allowance_charges': List[AllowanceCharge],
            'amount_including_tax': float,
            'attachments': List[Attachment],
            'delivery': Delivery,
            'delivery_terms': DeliveryTerms,
            'document_currency_code': CurrencyCode,
            'document_number': str,
            'issue_date': str,
            'issue_time': str,
            'note': str,
            'order_lines': List[OrderLine],
            'order_type': str,
            'payment_terms': PaymentTerms,
            'references': List[Reference],
            'seller_supplier_party': SellerSupplierParty,
            'tax_system': str,
            'time_zone': str,
            'validity_period': str
        }

        self.attribute_map = {
            'accounting_cost': 'accountingCost',
            'allowance_charges': 'allowanceCharges',
            'amount_including_tax': 'amountIncludingTax',
            'attachments': 'attachments',
            'delivery': 'delivery',
            'delivery_terms': 'deliveryTerms',
            'document_currency_code': 'documentCurrencyCode',
            'document_number': 'documentNumber',
            'issue_date': 'issueDate',
            'issue_time': 'issueTime',
            'note': 'note',
            'order_lines': 'orderLines',
            'order_type': 'orderType',
            'payment_terms': 'paymentTerms',
            'references': 'references',
            'seller_supplier_party': 'sellerSupplierParty',
            'tax_system': 'taxSystem',
            'time_zone': 'timeZone',
            'validity_period': 'validityPeriod'
        }

        self._accounting_cost = accounting_cost
        self._allowance_charges = allowance_charges
        self._amount_including_tax = amount_including_tax
        self._attachments = attachments
        self._delivery = delivery
        self._delivery_terms = delivery_terms
        self._document_currency_code = document_currency_code
        self._document_number = document_number
        self._issue_date = issue_date
        self._issue_time = issue_time
        self._note = note
        self._order_lines = order_lines
        self._order_type = order_type
        self._payment_terms = payment_terms
        self._references = references
        self._seller_supplier_party = seller_supplier_party
        self._tax_system = tax_system
        self._time_zone = time_zone
        self._validity_period = validity_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentOrder of this DocumentOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounting_cost(self):
        """Gets the accounting_cost of this DocumentOrder.

        The buyer's accounting cost centre for this document.

        :return: The accounting_cost of this DocumentOrder.
        :rtype: str
        """
        return self._accounting_cost

    @accounting_cost.setter
    def accounting_cost(self, accounting_cost):
        """Sets the accounting_cost of this DocumentOrder.

        The buyer's accounting cost centre for this document.

        :param accounting_cost: The accounting_cost of this DocumentOrder.
        :type accounting_cost: str
        """
        if accounting_cost is not None and len(accounting_cost) < 1:
            raise ValueError("Invalid value for `accounting_cost`, length must be greater than or equal to `1`")

        self._accounting_cost = accounting_cost

    @property
    def allowance_charges(self):
        """Gets the allowance_charges of this DocumentOrder.

        An array of allowance charges.

        :return: The allowance_charges of this DocumentOrder.
        :rtype: List[AllowanceCharge]
        """
        return self._allowance_charges

    @allowance_charges.setter
    def allowance_charges(self, allowance_charges):
        """Sets the allowance_charges of this DocumentOrder.

        An array of allowance charges.

        :param allowance_charges: The allowance_charges of this DocumentOrder.
        :type allowance_charges: List[AllowanceCharge]
        """
        if allowance_charges is not None and len(allowance_charges) < 0:
            raise ValueError("Invalid value for `allowance_charges`, number of items must be greater than or equal to `0`")

        self._allowance_charges = allowance_charges

    @property
    def amount_including_tax(self):
        """Gets the amount_including_tax of this DocumentOrder.

        Total amount including Tax.

        :return: The amount_including_tax of this DocumentOrder.
        :rtype: float
        """
        return self._amount_including_tax

    @amount_including_tax.setter
    def amount_including_tax(self, amount_including_tax):
        """Sets the amount_including_tax of this DocumentOrder.

        Total amount including Tax.

        :param amount_including_tax: The amount_including_tax of this DocumentOrder.
        :type amount_including_tax: float
        """
        if amount_including_tax is None:
            raise ValueError("Invalid value for `amount_including_tax`, must not be `None`")

        self._amount_including_tax = amount_including_tax

    @property
    def attachments(self):
        """Gets the attachments of this DocumentOrder.

        An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.

        :return: The attachments of this DocumentOrder.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this DocumentOrder.

        An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.

        :param attachments: The attachments of this DocumentOrder.
        :type attachments: List[Attachment]
        """
        if attachments is not None and len(attachments) > 10:
            raise ValueError("Invalid value for `attachments`, number of items must be less than or equal to `10`")

        self._attachments = attachments

    @property
    def delivery(self):
        """Gets the delivery of this DocumentOrder.


        :return: The delivery of this DocumentOrder.
        :rtype: Delivery
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this DocumentOrder.


        :param delivery: The delivery of this DocumentOrder.
        :type delivery: Delivery
        """

        self._delivery = delivery

    @property
    def delivery_terms(self):
        """Gets the delivery_terms of this DocumentOrder.


        :return: The delivery_terms of this DocumentOrder.
        :rtype: DeliveryTerms
        """
        return self._delivery_terms

    @delivery_terms.setter
    def delivery_terms(self, delivery_terms):
        """Sets the delivery_terms of this DocumentOrder.


        :param delivery_terms: The delivery_terms of this DocumentOrder.
        :type delivery_terms: DeliveryTerms
        """

        self._delivery_terms = delivery_terms

    @property
    def document_currency_code(self):
        """Gets the document_currency_code of this DocumentOrder.


        :return: The document_currency_code of this DocumentOrder.
        :rtype: CurrencyCode
        """
        return self._document_currency_code

    @document_currency_code.setter
    def document_currency_code(self, document_currency_code):
        """Sets the document_currency_code of this DocumentOrder.


        :param document_currency_code: The document_currency_code of this DocumentOrder.
        :type document_currency_code: CurrencyCode
        """

        self._document_currency_code = document_currency_code

    @property
    def document_number(self):
        """Gets the document_number of this DocumentOrder.

        The number you assigned to the document.

        :return: The document_number of this DocumentOrder.
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this DocumentOrder.

        The number you assigned to the document.

        :param document_number: The document_number of this DocumentOrder.
        :type document_number: str
        """
        if document_number is None:
            raise ValueError("Invalid value for `document_number`, must not be `None`")
        if document_number is not None and len(document_number) < 1:
            raise ValueError("Invalid value for `document_number`, length must be greater than or equal to `1`")

        self._document_number = document_number

    @property
    def issue_date(self):
        """Gets the issue_date of this DocumentOrder.

        Format: yyyy-mm-dd.

        :return: The issue_date of this DocumentOrder.
        :rtype: str
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this DocumentOrder.

        Format: yyyy-mm-dd.

        :param issue_date: The issue_date of this DocumentOrder.
        :type issue_date: str
        """
        if issue_date is None:
            raise ValueError("Invalid value for `issue_date`, must not be `None`")
        if issue_date is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$', issue_date):
            raise ValueError("Invalid value for `issue_date`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/`")

        self._issue_date = issue_date

    @property
    def issue_time(self):
        """Gets the issue_time of this DocumentOrder.

        Format: hh:mm:ss±zzzz 

        :return: The issue_time of this DocumentOrder.
        :rtype: str
        """
        return self._issue_time

    @issue_time.setter
    def issue_time(self, issue_time):
        """Sets the issue_time of this DocumentOrder.

        Format: hh:mm:ss±zzzz 

        :param issue_time: The issue_time of this DocumentOrder.
        :type issue_time: str
        """
        if issue_time is not None and not re.search(r'^[0-9]{2}:[0-9]{2}:[0-9]{2}$', issue_time):
            raise ValueError("Invalid value for `issue_time`, must be a follow pattern or equal to `/^[0-9]{2}:[0-9]{2}:[0-9]{2}$/`")

        self._issue_time = issue_time

    @property
    def note(self):
        """Gets the note of this DocumentOrder.

        A note to add to the document

        :return: The note of this DocumentOrder.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this DocumentOrder.

        A note to add to the document

        :param note: The note of this DocumentOrder.
        :type note: str
        """
        if note is not None and len(note) > 255:
            raise ValueError("Invalid value for `note`, length must be less than or equal to `255`")

        self._note = note

    @property
    def order_lines(self):
        """Gets the order_lines of this DocumentOrder.

        An array of order lines.

        :return: The order_lines of this DocumentOrder.
        :rtype: List[OrderLine]
        """
        return self._order_lines

    @order_lines.setter
    def order_lines(self, order_lines):
        """Sets the order_lines of this DocumentOrder.

        An array of order lines.

        :param order_lines: The order_lines of this DocumentOrder.
        :type order_lines: List[OrderLine]
        """
        if order_lines is None:
            raise ValueError("Invalid value for `order_lines`, must not be `None`")
        if order_lines is not None and len(order_lines) < 1:
            raise ValueError("Invalid value for `order_lines`, number of items must be greater than or equal to `1`")

        self._order_lines = order_lines

    @property
    def order_type(self):
        """Gets the order_type of this DocumentOrder.

        The type of this order.

        :return: The order_type of this DocumentOrder.
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this DocumentOrder.

        The type of this order.

        :param order_type: The order_type of this DocumentOrder.
        :type order_type: str
        """
        allowed_values = ["regular", "consignment"]  # noqa: E501
        if order_type not in allowed_values:
            raise ValueError(
                "Invalid value for `order_type` ({0}), must be one of {1}"
                .format(order_type, allowed_values)
            )

        self._order_type = order_type

    @property
    def payment_terms(self):
        """Gets the payment_terms of this DocumentOrder.


        :return: The payment_terms of this DocumentOrder.
        :rtype: PaymentTerms
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """Sets the payment_terms of this DocumentOrder.


        :param payment_terms: The payment_terms of this DocumentOrder.
        :type payment_terms: PaymentTerms
        """

        self._payment_terms = payment_terms

    @property
    def references(self):
        """Gets the references of this DocumentOrder.

        An array of references to other documents. Note that many syntaxes do not support multiple references of the same type in which case they will be concatenated with ','. Also, not all syntaxes and doucments support all documentTypes.

        :return: The references of this DocumentOrder.
        :rtype: List[Reference]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this DocumentOrder.

        An array of references to other documents. Note that many syntaxes do not support multiple references of the same type in which case they will be concatenated with ','. Also, not all syntaxes and doucments support all documentTypes.

        :param references: The references of this DocumentOrder.
        :type references: List[Reference]
        """
        if references is not None and len(references) < 0:
            raise ValueError("Invalid value for `references`, number of items must be greater than or equal to `0`")

        self._references = references

    @property
    def seller_supplier_party(self):
        """Gets the seller_supplier_party of this DocumentOrder.


        :return: The seller_supplier_party of this DocumentOrder.
        :rtype: SellerSupplierParty
        """
        return self._seller_supplier_party

    @seller_supplier_party.setter
    def seller_supplier_party(self, seller_supplier_party):
        """Sets the seller_supplier_party of this DocumentOrder.


        :param seller_supplier_party: The seller_supplier_party of this DocumentOrder.
        :type seller_supplier_party: SellerSupplierParty
        """
        if seller_supplier_party is None:
            raise ValueError("Invalid value for `seller_supplier_party`, must not be `None`")

        self._seller_supplier_party = seller_supplier_party

    @property
    def tax_system(self):
        """Gets the tax_system of this DocumentOrder.

        The tax system used for the invoice. The system 'tax_line_percentages' is the only one currently supported.

        :return: The tax_system of this DocumentOrder.
        :rtype: str
        """
        return self._tax_system

    @tax_system.setter
    def tax_system(self, tax_system):
        """Sets the tax_system of this DocumentOrder.

        The tax system used for the invoice. The system 'tax_line_percentages' is the only one currently supported.

        :param tax_system: The tax_system of this DocumentOrder.
        :type tax_system: str
        """
        allowed_values = ["tax_line_percentages"]  # noqa: E501
        if tax_system not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_system` ({0}), must be one of {1}"
                .format(tax_system, allowed_values)
            )

        self._tax_system = tax_system

    @property
    def time_zone(self):
        """Gets the time_zone of this DocumentOrder.

        Format: ±zzzz, where ±zzzz is the difference from UTC, e.g. +0100 or -0900 etc. The timezone will also apply to the document issue date if this field is provided.

        :return: The time_zone of this DocumentOrder.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this DocumentOrder.

        Format: ±zzzz, where ±zzzz is the difference from UTC, e.g. +0100 or -0900 etc. The timezone will also apply to the document issue date if this field is provided.

        :param time_zone: The time_zone of this DocumentOrder.
        :type time_zone: str
        """
        if time_zone is not None and not re.search(r'^[+-]\d{4}$', time_zone):
            raise ValueError("Invalid value for `time_zone`, must be a follow pattern or equal to `/^[+-]\d{4}$/`")

        self._time_zone = time_zone

    @property
    def validity_period(self):
        """Gets the validity_period of this DocumentOrder.

        The period (or specific date) to which the invoice applies. Format: yyyy-mm-dd - yyyy-mm-dd.

        :return: The validity_period of this DocumentOrder.
        :rtype: str
        """
        return self._validity_period

    @validity_period.setter
    def validity_period(self, validity_period):
        """Sets the validity_period of this DocumentOrder.

        The period (or specific date) to which the invoice applies. Format: yyyy-mm-dd - yyyy-mm-dd.

        :param validity_period: The validity_period of this DocumentOrder.
        :type validity_period: str
        """
        if validity_period is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$', validity_period):
            raise ValueError("Invalid value for `validity_period`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2} - [0-9]{4}-[0-9]{2}-[0-9]{2}$/`")

        self._validity_period = validity_period
