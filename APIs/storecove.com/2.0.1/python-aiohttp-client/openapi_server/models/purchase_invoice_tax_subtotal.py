# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.purchase_invoice_tax import PurchaseInvoiceTax
from openapi_server.models.purchase_invoice_vat import PurchaseInvoiceVat
from openapi_server import util


class PurchaseInvoiceTaxSubtotal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_excluding_tax: float=None, amount_excluding_vat: str=None, tax: PurchaseInvoiceTax=None, vat: PurchaseInvoiceVat=None):
        """PurchaseInvoiceTaxSubtotal - a model defined in OpenAPI

        :param amount_excluding_tax: The amount_excluding_tax of this PurchaseInvoiceTaxSubtotal.
        :param amount_excluding_vat: The amount_excluding_vat of this PurchaseInvoiceTaxSubtotal.
        :param tax: The tax of this PurchaseInvoiceTaxSubtotal.
        :param vat: The vat of this PurchaseInvoiceTaxSubtotal.
        """
        self.openapi_types = {
            'amount_excluding_tax': float,
            'amount_excluding_vat': str,
            'tax': PurchaseInvoiceTax,
            'vat': PurchaseInvoiceVat
        }

        self.attribute_map = {
            'amount_excluding_tax': 'amount_excluding_tax',
            'amount_excluding_vat': 'amount_excluding_vat',
            'tax': 'tax',
            'vat': 'vat'
        }

        self._amount_excluding_tax = amount_excluding_tax
        self._amount_excluding_vat = amount_excluding_vat
        self._tax = tax
        self._vat = vat

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseInvoiceTaxSubtotal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurchaseInvoiceTaxSubtotal of this PurchaseInvoiceTaxSubtotal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_excluding_tax(self):
        """Gets the amount_excluding_tax of this PurchaseInvoiceTaxSubtotal.

        The amount excluding tax.

        :return: The amount_excluding_tax of this PurchaseInvoiceTaxSubtotal.
        :rtype: float
        """
        return self._amount_excluding_tax

    @amount_excluding_tax.setter
    def amount_excluding_tax(self, amount_excluding_tax):
        """Sets the amount_excluding_tax of this PurchaseInvoiceTaxSubtotal.

        The amount excluding tax.

        :param amount_excluding_tax: The amount_excluding_tax of this PurchaseInvoiceTaxSubtotal.
        :type amount_excluding_tax: float
        """

        self._amount_excluding_tax = amount_excluding_tax

    @property
    def amount_excluding_vat(self):
        """Gets the amount_excluding_vat of this PurchaseInvoiceTaxSubtotal.

        DEPRECATED - use amount_excluding_tax.

        :return: The amount_excluding_vat of this PurchaseInvoiceTaxSubtotal.
        :rtype: str
        """
        return self._amount_excluding_vat

    @amount_excluding_vat.setter
    def amount_excluding_vat(self, amount_excluding_vat):
        """Sets the amount_excluding_vat of this PurchaseInvoiceTaxSubtotal.

        DEPRECATED - use amount_excluding_tax.

        :param amount_excluding_vat: The amount_excluding_vat of this PurchaseInvoiceTaxSubtotal.
        :type amount_excluding_vat: str
        """

        self._amount_excluding_vat = amount_excluding_vat

    @property
    def tax(self):
        """Gets the tax of this PurchaseInvoiceTaxSubtotal.


        :return: The tax of this PurchaseInvoiceTaxSubtotal.
        :rtype: PurchaseInvoiceTax
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this PurchaseInvoiceTaxSubtotal.


        :param tax: The tax of this PurchaseInvoiceTaxSubtotal.
        :type tax: PurchaseInvoiceTax
        """

        self._tax = tax

    @property
    def vat(self):
        """Gets the vat of this PurchaseInvoiceTaxSubtotal.


        :return: The vat of this PurchaseInvoiceTaxSubtotal.
        :rtype: PurchaseInvoiceVat
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this PurchaseInvoiceTaxSubtotal.


        :param vat: The vat of this PurchaseInvoiceTaxSubtotal.
        :type vat: PurchaseInvoiceVat
        """

        self._vat = vat
