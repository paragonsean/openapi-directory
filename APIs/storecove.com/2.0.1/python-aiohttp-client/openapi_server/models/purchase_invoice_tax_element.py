# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PurchaseInvoiceTaxElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, category: str=None, category_code: str=None, country: str=None, percentage: float=None, type: str=None):
        """PurchaseInvoiceTaxElement - a model defined in OpenAPI

        :param amount: The amount of this PurchaseInvoiceTaxElement.
        :param category: The category of this PurchaseInvoiceTaxElement.
        :param category_code: The category_code of this PurchaseInvoiceTaxElement.
        :param country: The country of this PurchaseInvoiceTaxElement.
        :param percentage: The percentage of this PurchaseInvoiceTaxElement.
        :param type: The type of this PurchaseInvoiceTaxElement.
        """
        self.openapi_types = {
            'amount': float,
            'category': str,
            'category_code': str,
            'country': str,
            'percentage': float,
            'type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'category': 'category',
            'category_code': 'category_code',
            'country': 'country',
            'percentage': 'percentage',
            'type': 'type'
        }

        self._amount = amount
        self._category = category
        self._category_code = category_code
        self._country = country
        self._percentage = percentage
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseInvoiceTaxElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurchaseInvoiceTaxElement of this PurchaseInvoiceTaxElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this PurchaseInvoiceTaxElement.

        The tax amount.

        :return: The amount of this PurchaseInvoiceTaxElement.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PurchaseInvoiceTaxElement.

        The tax amount.

        :param amount: The amount of this PurchaseInvoiceTaxElement.
        :type amount: float
        """

        self._amount = amount

    @property
    def category(self):
        """Gets the category of this PurchaseInvoiceTaxElement.

        The tax category.

        :return: The category of this PurchaseInvoiceTaxElement.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PurchaseInvoiceTaxElement.

        The tax category.

        :param category: The category of this PurchaseInvoiceTaxElement.
        :type category: str
        """
        allowed_values = ["standard", "zero_rated", "reverse_charge", "intra_community", "exempt", "export", "outside_scope", "regulation33_exempt", "nonregulation33_exempt", "deemed_supply", "srca_s", "srca_c", "not_registered", "igst", "cgst", "sgst", "cess", "state_cess", "srovr", "srovr_rs", "srovr_lvg", "srlvg"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def category_code(self):
        """Gets the category_code of this PurchaseInvoiceTaxElement.

        Deprecated. The tax category code.

        :return: The category_code of this PurchaseInvoiceTaxElement.
        :rtype: str
        """
        return self._category_code

    @category_code.setter
    def category_code(self, category_code):
        """Sets the category_code of this PurchaseInvoiceTaxElement.

        Deprecated. The tax category code.

        :param category_code: The category_code of this PurchaseInvoiceTaxElement.
        :type category_code: str
        """

        self._category_code = category_code

    @property
    def country(self):
        """Gets the country of this PurchaseInvoiceTaxElement.

        The tax country.

        :return: The country of this PurchaseInvoiceTaxElement.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PurchaseInvoiceTaxElement.

        The tax country.

        :param country: The country of this PurchaseInvoiceTaxElement.
        :type country: str
        """

        self._country = country

    @property
    def percentage(self):
        """Gets the percentage of this PurchaseInvoiceTaxElement.

        The tax percentage.

        :return: The percentage of this PurchaseInvoiceTaxElement.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this PurchaseInvoiceTaxElement.

        The tax percentage.

        :param percentage: The percentage of this PurchaseInvoiceTaxElement.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def type(self):
        """Gets the type of this PurchaseInvoiceTaxElement.

        The tax type.

        :return: The type of this PurchaseInvoiceTaxElement.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PurchaseInvoiceTaxElement.

        The tax type.

        :param type: The type of this PurchaseInvoiceTaxElement.
        :type type: str
        """
        allowed_values = ["VAT", "GST"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
