# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.corp_pass import CorpPass
from openapi_server import util


class PeppolIdentifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, corppass: CorpPass=None, identifier: str=None, scheme: str=None, superscheme: str=None):
        """PeppolIdentifier - a model defined in OpenAPI

        :param corppass: The corppass of this PeppolIdentifier.
        :param identifier: The identifier of this PeppolIdentifier.
        :param scheme: The scheme of this PeppolIdentifier.
        :param superscheme: The superscheme of this PeppolIdentifier.
        """
        self.openapi_types = {
            'corppass': CorpPass,
            'identifier': str,
            'scheme': str,
            'superscheme': str
        }

        self.attribute_map = {
            'corppass': 'corppass',
            'identifier': 'identifier',
            'scheme': 'scheme',
            'superscheme': 'superscheme'
        }

        self._corppass = corppass
        self._identifier = identifier
        self._scheme = scheme
        self._superscheme = superscheme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeppolIdentifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeppolIdentifier of this PeppolIdentifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def corppass(self):
        """Gets the corppass of this PeppolIdentifier.


        :return: The corppass of this PeppolIdentifier.
        :rtype: CorpPass
        """
        return self._corppass

    @corppass.setter
    def corppass(self, corppass):
        """Sets the corppass of this PeppolIdentifier.


        :param corppass: The corppass of this PeppolIdentifier.
        :type corppass: CorpPass
        """

        self._corppass = corppass

    @property
    def identifier(self):
        """Gets the identifier of this PeppolIdentifier.

        The identifier.

        :return: The identifier of this PeppolIdentifier.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PeppolIdentifier.

        The identifier.

        :param identifier: The identifier of this PeppolIdentifier.
        :type identifier: str
        """
        if identifier is not None and len(identifier) > 64:
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `64`")
        if identifier is not None and len(identifier) < 2:
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `2`")

        self._identifier = identifier

    @property
    def scheme(self):
        """Gets the scheme of this PeppolIdentifier.

        The scheme of the identifier. See <<_receiver_identifiers_list>> for a list.

        :return: The scheme of this PeppolIdentifier.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this PeppolIdentifier.

        The scheme of the identifier. See <<_receiver_identifiers_list>> for a list.

        :param scheme: The scheme of this PeppolIdentifier.
        :type scheme: str
        """
        if scheme is not None and len(scheme) > 64:
            raise ValueError("Invalid value for `scheme`, length must be less than or equal to `64`")
        if scheme is not None and len(scheme) < 2:
            raise ValueError("Invalid value for `scheme`, length must be greater than or equal to `2`")

        self._scheme = scheme

    @property
    def superscheme(self):
        """Gets the superscheme of this PeppolIdentifier.

        The superscheme of the identifier. Should always be \"iso6523-actorid-upis\".

        :return: The superscheme of this PeppolIdentifier.
        :rtype: str
        """
        return self._superscheme

    @superscheme.setter
    def superscheme(self, superscheme):
        """Sets the superscheme of this PeppolIdentifier.

        The superscheme of the identifier. Should always be \"iso6523-actorid-upis\".

        :param superscheme: The superscheme of this PeppolIdentifier.
        :type superscheme: str
        """
        if superscheme is not None and len(superscheme) > 64:
            raise ValueError("Invalid value for `superscheme`, length must be less than or equal to `64`")
        if superscheme is not None and len(superscheme) < 2:
            raise ValueError("Invalid value for `superscheme`, length must be greater than or equal to `2`")

        self._superscheme = superscheme
