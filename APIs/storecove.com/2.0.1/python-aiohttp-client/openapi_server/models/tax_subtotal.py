# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country import Country
from openapi_server import util


class TaxSubtotal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, country: Country=None, percentage: float=None, tax_amount: float=None, taxable_amount: float=None):
        """TaxSubtotal - a model defined in OpenAPI

        :param category: The category of this TaxSubtotal.
        :param country: The country of this TaxSubtotal.
        :param percentage: The percentage of this TaxSubtotal.
        :param tax_amount: The tax_amount of this TaxSubtotal.
        :param taxable_amount: The taxable_amount of this TaxSubtotal.
        """
        self.openapi_types = {
            'category': str,
            'country': Country,
            'percentage': float,
            'tax_amount': float,
            'taxable_amount': float
        }

        self.attribute_map = {
            'category': 'category',
            'country': 'country',
            'percentage': 'percentage',
            'tax_amount': 'taxAmount',
            'taxable_amount': 'taxableAmount'
        }

        self._category = category
        self._country = country
        self._percentage = percentage
        self._tax_amount = tax_amount
        self._taxable_amount = taxable_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxSubtotal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxSubtotal of this TaxSubtotal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this TaxSubtotal.

        The tax category. For a description see <<_openapi_tax>>

        :return: The category of this TaxSubtotal.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TaxSubtotal.

        The tax category. For a description see <<_openapi_tax>>

        :param category: The category of this TaxSubtotal.
        :type category: str
        """
        allowed_values = ["standard", "zero_rated", "reverse_charge", "intra_community", "exempt", "export", "outside_scope", "regulation33_exempt", "nonregulation33_exempt", "deemed_supply", "srca_s", "srca_c", "not_registered", "igst", "cgst", "sgst", "cess", "state_cess", "srovr", "srovr_rs", "srovr_lvg", "srlvg"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def country(self):
        """Gets the country of this TaxSubtotal.


        :return: The country of this TaxSubtotal.
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TaxSubtotal.


        :param country: The country of this TaxSubtotal.
        :type country: Country
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def percentage(self):
        """Gets the percentage of this TaxSubtotal.

        The tax percentage. This should be a valid tax percentage in the country at the time of the taxpointDate of this invoice.

        :return: The percentage of this TaxSubtotal.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this TaxSubtotal.

        The tax percentage. This should be a valid tax percentage in the country at the time of the taxpointDate of this invoice.

        :param percentage: The percentage of this TaxSubtotal.
        :type percentage: float
        """
        if percentage is None:
            raise ValueError("Invalid value for `percentage`, must not be `None`")

        self._percentage = percentage

    @property
    def tax_amount(self):
        """Gets the tax_amount of this TaxSubtotal.

        The amount of tax.

        :return: The tax_amount of this TaxSubtotal.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this TaxSubtotal.

        The amount of tax.

        :param tax_amount: The tax_amount of this TaxSubtotal.
        :type tax_amount: float
        """
        if tax_amount is None:
            raise ValueError("Invalid value for `tax_amount`, must not be `None`")

        self._tax_amount = tax_amount

    @property
    def taxable_amount(self):
        """Gets the taxable_amount of this TaxSubtotal.

        The amount on which the tax is levied.

        :return: The taxable_amount of this TaxSubtotal.
        :rtype: float
        """
        return self._taxable_amount

    @taxable_amount.setter
    def taxable_amount(self, taxable_amount):
        """Sets the taxable_amount of this TaxSubtotal.

        The amount on which the tax is levied.

        :param taxable_amount: The taxable_amount of this TaxSubtotal.
        :type taxable_amount: float
        """
        if taxable_amount is None:
            raise ValueError("Invalid value for `taxable_amount`, must not be `None`")

        self._taxable_amount = taxable_amount
