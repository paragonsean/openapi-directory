# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PurchaseInvoiceUbl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_key: str=None, external_user_id: str=None, guid: str=None, legal_entity_id: int=None, system_generated_primary_image: bool=None, tax_system: str=None, ubl: str=None):
        """PurchaseInvoiceUbl - a model defined in OpenAPI

        :param external_key: The external_key of this PurchaseInvoiceUbl.
        :param external_user_id: The external_user_id of this PurchaseInvoiceUbl.
        :param guid: The guid of this PurchaseInvoiceUbl.
        :param legal_entity_id: The legal_entity_id of this PurchaseInvoiceUbl.
        :param system_generated_primary_image: The system_generated_primary_image of this PurchaseInvoiceUbl.
        :param tax_system: The tax_system of this PurchaseInvoiceUbl.
        :param ubl: The ubl of this PurchaseInvoiceUbl.
        """
        self.openapi_types = {
            'external_key': str,
            'external_user_id': str,
            'guid': str,
            'legal_entity_id': int,
            'system_generated_primary_image': bool,
            'tax_system': str,
            'ubl': str
        }

        self.attribute_map = {
            'external_key': 'external_key',
            'external_user_id': 'external_user_id',
            'guid': 'guid',
            'legal_entity_id': 'legal_entity_id',
            'system_generated_primary_image': 'system_generated_primary_image',
            'tax_system': 'tax_system',
            'ubl': 'ubl'
        }

        self._external_key = external_key
        self._external_user_id = external_user_id
        self._guid = guid
        self._legal_entity_id = legal_entity_id
        self._system_generated_primary_image = system_generated_primary_image
        self._tax_system = tax_system
        self._ubl = ubl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseInvoiceUbl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurchaseInvoiceUbl of this PurchaseInvoiceUbl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_key(self):
        """Gets the external_key of this PurchaseInvoiceUbl.

        Used for accountants. The id you specified for the organization.

        :return: The external_key of this PurchaseInvoiceUbl.
        :rtype: str
        """
        return self._external_key

    @external_key.setter
    def external_key(self, external_key):
        """Sets the external_key of this PurchaseInvoiceUbl.

        Used for accountants. The id you specified for the organization.

        :param external_key: The external_key of this PurchaseInvoiceUbl.
        :type external_key: str
        """

        self._external_key = external_key

    @property
    def external_user_id(self):
        """Gets the external_user_id of this PurchaseInvoiceUbl.

        Used for the embedded portal retrieval service. The external_user_id you provided when the ShopAccount was created.

        :return: The external_user_id of this PurchaseInvoiceUbl.
        :rtype: str
        """
        return self._external_user_id

    @external_user_id.setter
    def external_user_id(self, external_user_id):
        """Sets the external_user_id of this PurchaseInvoiceUbl.

        Used for the embedded portal retrieval service. The external_user_id you provided when the ShopAccount was created.

        :param external_user_id: The external_user_id of this PurchaseInvoiceUbl.
        :type external_user_id: str
        """

        self._external_user_id = external_user_id

    @property
    def guid(self):
        """Gets the guid of this PurchaseInvoiceUbl.

        The GUID of the invoice

        :return: The guid of this PurchaseInvoiceUbl.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this PurchaseInvoiceUbl.

        The GUID of the invoice

        :param guid: The guid of this PurchaseInvoiceUbl.
        :type guid: str
        """

        self._guid = guid

    @property
    def legal_entity_id(self):
        """Gets the legal_entity_id of this PurchaseInvoiceUbl.

        The id of the LegalEntity the invoice was received for.

        :return: The legal_entity_id of this PurchaseInvoiceUbl.
        :rtype: int
        """
        return self._legal_entity_id

    @legal_entity_id.setter
    def legal_entity_id(self, legal_entity_id):
        """Sets the legal_entity_id of this PurchaseInvoiceUbl.

        The id of the LegalEntity the invoice was received for.

        :param legal_entity_id: The legal_entity_id of this PurchaseInvoiceUbl.
        :type legal_entity_id: int
        """

        self._legal_entity_id = legal_entity_id

    @property
    def system_generated_primary_image(self):
        """Gets the system_generated_primary_image of this PurchaseInvoiceUbl.

        Whether or not the document image (PDF) was generated by Storecove. If true, it means the invoice was received without any attachments and Storecove generated one for you. If false, the invoice will contain at least one attachment, which was received from the invoice sender.

        :return: The system_generated_primary_image of this PurchaseInvoiceUbl.
        :rtype: bool
        """
        return self._system_generated_primary_image

    @system_generated_primary_image.setter
    def system_generated_primary_image(self, system_generated_primary_image):
        """Sets the system_generated_primary_image of this PurchaseInvoiceUbl.

        Whether or not the document image (PDF) was generated by Storecove. If true, it means the invoice was received without any attachments and Storecove generated one for you. If false, the invoice will contain at least one attachment, which was received from the invoice sender.

        :param system_generated_primary_image: The system_generated_primary_image of this PurchaseInvoiceUbl.
        :type system_generated_primary_image: bool
        """

        self._system_generated_primary_image = system_generated_primary_image

    @property
    def tax_system(self):
        """Gets the tax_system of this PurchaseInvoiceUbl.

        The tax system of the invoice. Either tax_line_percentages or tax_line_amounts. The first tax system means the invoice lines contain only the tax percentages and the tax amounts are included only in the tax subtotals at the invoice level and so are only calculated at the invoice level. The tax system tax_line_amounts means that in addition to the percentage, each invoice line also contains the tax amount. The tax subtotals at the invoice level are calculated as the sum of the tax of the invoice lines. The distinction between the two tax systems has has implications for rounding.

        :return: The tax_system of this PurchaseInvoiceUbl.
        :rtype: str
        """
        return self._tax_system

    @tax_system.setter
    def tax_system(self, tax_system):
        """Sets the tax_system of this PurchaseInvoiceUbl.

        The tax system of the invoice. Either tax_line_percentages or tax_line_amounts. The first tax system means the invoice lines contain only the tax percentages and the tax amounts are included only in the tax subtotals at the invoice level and so are only calculated at the invoice level. The tax system tax_line_amounts means that in addition to the percentage, each invoice line also contains the tax amount. The tax subtotals at the invoice level are calculated as the sum of the tax of the invoice lines. The distinction between the two tax systems has has implications for rounding.

        :param tax_system: The tax_system of this PurchaseInvoiceUbl.
        :type tax_system: str
        """

        self._tax_system = tax_system

    @property
    def ubl(self):
        """Gets the ubl of this PurchaseInvoiceUbl.

        The Base64 encoded UBL invoice.

        :return: The ubl of this PurchaseInvoiceUbl.
        :rtype: str
        """
        return self._ubl

    @ubl.setter
    def ubl(self, ubl):
        """Sets the ubl of this PurchaseInvoiceUbl.

        The Base64 encoded UBL invoice.

        :param ubl: The ubl of this PurchaseInvoiceUbl.
        :type ubl: str
        """

        self._ubl = ubl
