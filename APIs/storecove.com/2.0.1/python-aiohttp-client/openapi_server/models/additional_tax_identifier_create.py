# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdditionalTaxIdentifierCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, county: str=None, identifier: str=None, scheme: str=None, superscheme: str=None, third_party_password: str=None, third_party_username: str=None):
        """AdditionalTaxIdentifierCreate - a model defined in OpenAPI

        :param country: The country of this AdditionalTaxIdentifierCreate.
        :param county: The county of this AdditionalTaxIdentifierCreate.
        :param identifier: The identifier of this AdditionalTaxIdentifierCreate.
        :param scheme: The scheme of this AdditionalTaxIdentifierCreate.
        :param superscheme: The superscheme of this AdditionalTaxIdentifierCreate.
        :param third_party_password: The third_party_password of this AdditionalTaxIdentifierCreate.
        :param third_party_username: The third_party_username of this AdditionalTaxIdentifierCreate.
        """
        self.openapi_types = {
            'country': str,
            'county': str,
            'identifier': str,
            'scheme': str,
            'superscheme': str,
            'third_party_password': str,
            'third_party_username': str
        }

        self.attribute_map = {
            'country': 'country',
            'county': 'county',
            'identifier': 'identifier',
            'scheme': 'scheme',
            'superscheme': 'superscheme',
            'third_party_password': 'third_party_password',
            'third_party_username': 'third_party_username'
        }

        self._country = country
        self._county = county
        self._identifier = identifier
        self._scheme = scheme
        self._superscheme = superscheme
        self._third_party_password = third_party_password
        self._third_party_username = third_party_username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalTaxIdentifierCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalTaxIdentifierCreate of this AdditionalTaxIdentifierCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this AdditionalTaxIdentifierCreate.

        The ISO3166 country code to use this identifier for in case of consumerTaxMode.

        :return: The country of this AdditionalTaxIdentifierCreate.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AdditionalTaxIdentifierCreate.

        The ISO3166 country code to use this identifier for in case of consumerTaxMode.

        :param country: The country of this AdditionalTaxIdentifierCreate.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")
        if country is not None and len(country) < 2:
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `2`")

        self._country = country

    @property
    def county(self):
        """Gets the county of this AdditionalTaxIdentifierCreate.

        The county/state inside the country code to use this identifier for in case of consumerTaxMode. Leave empty to create an additional tax identifier for the entire country. For India, use the two last characters of ISO 3166-2:IN (https://en.wikipedia.org/wiki/States_and_union_territories_of_India).

        :return: The county of this AdditionalTaxIdentifierCreate.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this AdditionalTaxIdentifierCreate.

        The county/state inside the country code to use this identifier for in case of consumerTaxMode. Leave empty to create an additional tax identifier for the entire country. For India, use the two last characters of ISO 3166-2:IN (https://en.wikipedia.org/wiki/States_and_union_territories_of_India).

        :param county: The county of this AdditionalTaxIdentifierCreate.
        :type county: str
        """
        if county is not None and len(county) > 2:
            raise ValueError("Invalid value for `county`, length must be less than or equal to `2`")
        if county is not None and len(county) < 2:
            raise ValueError("Invalid value for `county`, length must be greater than or equal to `2`")

        self._county = county

    @property
    def identifier(self):
        """Gets the identifier of this AdditionalTaxIdentifierCreate.

        The identifier.

        :return: The identifier of this AdditionalTaxIdentifierCreate.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AdditionalTaxIdentifierCreate.

        The identifier.

        :param identifier: The identifier of this AdditionalTaxIdentifierCreate.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def scheme(self):
        """Gets the scheme of this AdditionalTaxIdentifierCreate.

        The scheme of the identifier.

        :return: The scheme of this AdditionalTaxIdentifierCreate.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this AdditionalTaxIdentifierCreate.

        The scheme of the identifier.

        :param scheme: The scheme of this AdditionalTaxIdentifierCreate.
        :type scheme: str
        """
        if scheme is None:
            raise ValueError("Invalid value for `scheme`, must not be `None`")
        if scheme is not None and len(scheme) > 64:
            raise ValueError("Invalid value for `scheme`, length must be less than or equal to `64`")
        if scheme is not None and len(scheme) < 2:
            raise ValueError("Invalid value for `scheme`, length must be greater than or equal to `2`")

        self._scheme = scheme

    @property
    def superscheme(self):
        """Gets the superscheme of this AdditionalTaxIdentifierCreate.

        The superscheme of the identifier. Should always be \"iso6523-actorid-upis\".

        :return: The superscheme of this AdditionalTaxIdentifierCreate.
        :rtype: str
        """
        return self._superscheme

    @superscheme.setter
    def superscheme(self, superscheme):
        """Sets the superscheme of this AdditionalTaxIdentifierCreate.

        The superscheme of the identifier. Should always be \"iso6523-actorid-upis\".

        :param superscheme: The superscheme of this AdditionalTaxIdentifierCreate.
        :type superscheme: str
        """
        if superscheme is None:
            raise ValueError("Invalid value for `superscheme`, must not be `None`")
        if superscheme is not None and len(superscheme) > 64:
            raise ValueError("Invalid value for `superscheme`, length must be less than or equal to `64`")
        if superscheme is not None and len(superscheme) < 2:
            raise ValueError("Invalid value for `superscheme`, length must be greater than or equal to `2`")

        self._superscheme = superscheme

    @property
    def third_party_password(self):
        """Gets the third_party_password of this AdditionalTaxIdentifierCreate.

        The password to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN tax identifier.

        :return: The third_party_password of this AdditionalTaxIdentifierCreate.
        :rtype: str
        """
        return self._third_party_password

    @third_party_password.setter
    def third_party_password(self, third_party_password):
        """Sets the third_party_password of this AdditionalTaxIdentifierCreate.

        The password to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN tax identifier.

        :param third_party_password: The third_party_password of this AdditionalTaxIdentifierCreate.
        :type third_party_password: str
        """
        if third_party_password is not None and len(third_party_password) > 64:
            raise ValueError("Invalid value for `third_party_password`, length must be less than or equal to `64`")
        if third_party_password is not None and len(third_party_password) < 2:
            raise ValueError("Invalid value for `third_party_password`, length must be greater than or equal to `2`")

        self._third_party_password = third_party_password

    @property
    def third_party_username(self):
        """Gets the third_party_username of this AdditionalTaxIdentifierCreate.

        The username to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN tax identifier.

        :return: The third_party_username of this AdditionalTaxIdentifierCreate.
        :rtype: str
        """
        return self._third_party_username

    @third_party_username.setter
    def third_party_username(self, third_party_username):
        """Sets the third_party_username of this AdditionalTaxIdentifierCreate.

        The username to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN tax identifier.

        :param third_party_username: The third_party_username of this AdditionalTaxIdentifierCreate.
        :type third_party_username: str
        """
        if third_party_username is not None and len(third_party_username) > 64:
            raise ValueError("Invalid value for `third_party_username`, length must be less than or equal to `64`")
        if third_party_username is not None and len(third_party_username) < 2:
            raise ValueError("Invalid value for `third_party_username`, length must be greater than or equal to `2`")

        self._third_party_username = third_party_username
