# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.routing import Routing
from openapi_server.models.sendable_document import SendableDocument
from openapi_server import util


class DocumentSubmission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[Attachment]=None, create_primary_image: bool=None, document: SendableDocument=None, idempotency_guid: str=None, legal_entity_id: int=None, receive_guid: str=None, routing: Routing=None):
        """DocumentSubmission - a model defined in OpenAPI

        :param attachments: The attachments of this DocumentSubmission.
        :param create_primary_image: The create_primary_image of this DocumentSubmission.
        :param document: The document of this DocumentSubmission.
        :param idempotency_guid: The idempotency_guid of this DocumentSubmission.
        :param legal_entity_id: The legal_entity_id of this DocumentSubmission.
        :param receive_guid: The receive_guid of this DocumentSubmission.
        :param routing: The routing of this DocumentSubmission.
        """
        self.openapi_types = {
            'attachments': List[Attachment],
            'create_primary_image': bool,
            'document': SendableDocument,
            'idempotency_guid': str,
            'legal_entity_id': int,
            'receive_guid': str,
            'routing': Routing
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'create_primary_image': 'createPrimaryImage',
            'document': 'document',
            'idempotency_guid': 'idempotencyGuid',
            'legal_entity_id': 'legalEntityId',
            'receive_guid': 'receiveGuid',
            'routing': 'routing'
        }

        self._attachments = attachments
        self._create_primary_image = create_primary_image
        self._document = document
        self._idempotency_guid = idempotency_guid
        self._legal_entity_id = legal_entity_id
        self._receive_guid = receive_guid
        self._routing = routing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentSubmission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentSubmission of this DocumentSubmission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this DocumentSubmission.

        DEPRECATED. Use the attachments array inside the 'document' property. An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.

        :return: The attachments of this DocumentSubmission.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this DocumentSubmission.

        DEPRECATED. Use the attachments array inside the 'document' property. An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.

        :param attachments: The attachments of this DocumentSubmission.
        :type attachments: List[Attachment]
        """
        if attachments is not None and len(attachments) > 10:
            raise ValueError("Invalid value for `attachments`, number of items must be less than or equal to `10`")

        self._attachments = attachments

    @property
    def create_primary_image(self):
        """Gets the create_primary_image of this DocumentSubmission.

        DEPRECATED. In the future we will no longer support creating PDF invoices. Whether or not to create a primary image (PDF) if one is not provided. For customers who started from April 1st 2023, the default is false. For customers who started before that, the default is true.

        :return: The create_primary_image of this DocumentSubmission.
        :rtype: bool
        """
        return self._create_primary_image

    @create_primary_image.setter
    def create_primary_image(self, create_primary_image):
        """Sets the create_primary_image of this DocumentSubmission.

        DEPRECATED. In the future we will no longer support creating PDF invoices. Whether or not to create a primary image (PDF) if one is not provided. For customers who started from April 1st 2023, the default is false. For customers who started before that, the default is true.

        :param create_primary_image: The create_primary_image of this DocumentSubmission.
        :type create_primary_image: bool
        """

        self._create_primary_image = create_primary_image

    @property
    def document(self):
        """Gets the document of this DocumentSubmission.


        :return: The document of this DocumentSubmission.
        :rtype: SendableDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this DocumentSubmission.


        :param document: The document of this DocumentSubmission.
        :type document: SendableDocument
        """

        self._document = document

    @property
    def idempotency_guid(self):
        """Gets the idempotency_guid of this DocumentSubmission.

        A guid that you generated for this DocumentSubmission to achieve idempotency. If you submit multiple documents with the same idempotencyGuid, only the first one will be processed and any subsequent ones will trigger an HTTP 422 Unprocessable Entity response.

        :return: The idempotency_guid of this DocumentSubmission.
        :rtype: str
        """
        return self._idempotency_guid

    @idempotency_guid.setter
    def idempotency_guid(self, idempotency_guid):
        """Sets the idempotency_guid of this DocumentSubmission.

        A guid that you generated for this DocumentSubmission to achieve idempotency. If you submit multiple documents with the same idempotencyGuid, only the first one will be processed and any subsequent ones will trigger an HTTP 422 Unprocessable Entity response.

        :param idempotency_guid: The idempotency_guid of this DocumentSubmission.
        :type idempotency_guid: str
        """
        if idempotency_guid is not None and len(idempotency_guid) > 36:
            raise ValueError("Invalid value for `idempotency_guid`, length must be less than or equal to `36`")
        if idempotency_guid is not None and len(idempotency_guid) < 36:
            raise ValueError("Invalid value for `idempotency_guid`, length must be greater than or equal to `36`")

        self._idempotency_guid = idempotency_guid

    @property
    def legal_entity_id(self):
        """Gets the legal_entity_id of this DocumentSubmission.

        The id of the LegalEntity this document should be sent on behalf of. Either legalEntityId or receiveGuid is mandatory.

        :return: The legal_entity_id of this DocumentSubmission.
        :rtype: int
        """
        return self._legal_entity_id

    @legal_entity_id.setter
    def legal_entity_id(self, legal_entity_id):
        """Sets the legal_entity_id of this DocumentSubmission.

        The id of the LegalEntity this document should be sent on behalf of. Either legalEntityId or receiveGuid is mandatory.

        :param legal_entity_id: The legal_entity_id of this DocumentSubmission.
        :type legal_entity_id: int
        """

        self._legal_entity_id = legal_entity_id

    @property
    def receive_guid(self):
        """Gets the receive_guid of this DocumentSubmission.

        The GUID that was in the received_document webhook. Either legalEntityId or receiveGuid is mandatory. This field is used for sending response documents, such as InvoiceReponse and OrderResponse.

        :return: The receive_guid of this DocumentSubmission.
        :rtype: str
        """
        return self._receive_guid

    @receive_guid.setter
    def receive_guid(self, receive_guid):
        """Sets the receive_guid of this DocumentSubmission.

        The GUID that was in the received_document webhook. Either legalEntityId or receiveGuid is mandatory. This field is used for sending response documents, such as InvoiceReponse and OrderResponse.

        :param receive_guid: The receive_guid of this DocumentSubmission.
        :type receive_guid: str
        """

        self._receive_guid = receive_guid

    @property
    def routing(self):
        """Gets the routing of this DocumentSubmission.


        :return: The routing of this DocumentSubmission.
        :rtype: Routing
        """
        return self._routing

    @routing.setter
    def routing(self, routing):
        """Sets the routing of this DocumentSubmission.


        :param routing: The routing of this DocumentSubmission.
        :type routing: Routing
        """

        self._routing = routing
