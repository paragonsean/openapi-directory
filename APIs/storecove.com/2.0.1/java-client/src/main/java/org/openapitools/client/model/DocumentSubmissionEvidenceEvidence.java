/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentSubmissionEvidenceEvidence
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentSubmissionEvidenceEvidence {
  public static final String SERIALIZED_NAME_MESSAGE_ID = "message_id";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_RECEIVING_ACCESSPOINT = "receiving_accesspoint";
  @SerializedName(SERIALIZED_NAME_RECEIVING_ACCESSPOINT)
  private String receivingAccesspoint;

  public static final String SERIALIZED_NAME_REMOTE_MTA_IP = "remote_mta_ip";
  @SerializedName(SERIALIZED_NAME_REMOTE_MTA_IP)
  private String remoteMtaIp;

  public static final String SERIALIZED_NAME_REPORTING_MTA = "reporting_mta";
  @SerializedName(SERIALIZED_NAME_REPORTING_MTA)
  private String reportingMta;

  public static final String SERIALIZED_NAME_SMTP_RESPONSE = "smtp_response";
  @SerializedName(SERIALIZED_NAME_SMTP_RESPONSE)
  private String smtpResponse;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_TRANSMISSION_ID = "transmission_id";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION_ID)
  private String transmissionId;

  public static final String SERIALIZED_NAME_XML = "xml";
  @SerializedName(SERIALIZED_NAME_XML)
  private String xml;

  public DocumentSubmissionEvidenceEvidence() {
  }

  public DocumentSubmissionEvidenceEvidence messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * The unique message id used in the OpenPeppol SBDH.
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public DocumentSubmissionEvidenceEvidence receivingAccesspoint(String receivingAccesspoint) {
    this.receivingAccesspoint = receivingAccesspoint;
    return this;
  }

  /**
   * An identification of the OpenPeppol accesspoint that the invoice was sent to.
   * @return receivingAccesspoint
   */
  @javax.annotation.Nullable
  public String getReceivingAccesspoint() {
    return receivingAccesspoint;
  }

  public void setReceivingAccesspoint(String receivingAccesspoint) {
    this.receivingAccesspoint = receivingAccesspoint;
  }


  public DocumentSubmissionEvidenceEvidence remoteMtaIp(String remoteMtaIp) {
    this.remoteMtaIp = remoteMtaIp;
    return this;
  }

  /**
   * The IP address of the sending SMTP server.
   * @return remoteMtaIp
   */
  @javax.annotation.Nullable
  public String getRemoteMtaIp() {
    return remoteMtaIp;
  }

  public void setRemoteMtaIp(String remoteMtaIp) {
    this.remoteMtaIp = remoteMtaIp;
  }


  public DocumentSubmissionEvidenceEvidence reportingMta(String reportingMta) {
    this.reportingMta = reportingMta;
    return this;
  }

  /**
   * An identification for the sending SMTP.
   * @return reportingMta
   */
  @javax.annotation.Nullable
  public String getReportingMta() {
    return reportingMta;
  }

  public void setReportingMta(String reportingMta) {
    this.reportingMta = reportingMta;
  }


  public DocumentSubmissionEvidenceEvidence smtpResponse(String smtpResponse) {
    this.smtpResponse = smtpResponse;
    return this;
  }

  /**
   * The response of the receiving SMTP server.
   * @return smtpResponse
   */
  @javax.annotation.Nullable
  public String getSmtpResponse() {
    return smtpResponse;
  }

  public void setSmtpResponse(String smtpResponse) {
    this.smtpResponse = smtpResponse;
  }


  public DocumentSubmissionEvidenceEvidence timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * The timestamp of the delivery to the receiving SMTP server.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public DocumentSubmissionEvidenceEvidence transmissionId(String transmissionId) {
    this.transmissionId = transmissionId;
    return this;
  }

  /**
   * The unique id for this OpenPeppol transmission.
   * @return transmissionId
   */
  @javax.annotation.Nullable
  public String getTransmissionId() {
    return transmissionId;
  }

  public void setTransmissionId(String transmissionId) {
    this.transmissionId = transmissionId;
  }


  public DocumentSubmissionEvidenceEvidence xml(String xml) {
    this.xml = xml;
    return this;
  }

  /**
   * The XML evidence for the transmission. This is the XML returned by the receiving OpenPeppol accesspoint.
   * @return xml
   */
  @javax.annotation.Nullable
  public String getXml() {
    return xml;
  }

  public void setXml(String xml) {
    this.xml = xml;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentSubmissionEvidenceEvidence documentSubmissionEvidenceEvidence = (DocumentSubmissionEvidenceEvidence) o;
    return Objects.equals(this.messageId, documentSubmissionEvidenceEvidence.messageId) &&
        Objects.equals(this.receivingAccesspoint, documentSubmissionEvidenceEvidence.receivingAccesspoint) &&
        Objects.equals(this.remoteMtaIp, documentSubmissionEvidenceEvidence.remoteMtaIp) &&
        Objects.equals(this.reportingMta, documentSubmissionEvidenceEvidence.reportingMta) &&
        Objects.equals(this.smtpResponse, documentSubmissionEvidenceEvidence.smtpResponse) &&
        Objects.equals(this.timestamp, documentSubmissionEvidenceEvidence.timestamp) &&
        Objects.equals(this.transmissionId, documentSubmissionEvidenceEvidence.transmissionId) &&
        Objects.equals(this.xml, documentSubmissionEvidenceEvidence.xml);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageId, receivingAccesspoint, remoteMtaIp, reportingMta, smtpResponse, timestamp, transmissionId, xml);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentSubmissionEvidenceEvidence {\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    receivingAccesspoint: ").append(toIndentedString(receivingAccesspoint)).append("\n");
    sb.append("    remoteMtaIp: ").append(toIndentedString(remoteMtaIp)).append("\n");
    sb.append("    reportingMta: ").append(toIndentedString(reportingMta)).append("\n");
    sb.append("    smtpResponse: ").append(toIndentedString(smtpResponse)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    transmissionId: ").append(toIndentedString(transmissionId)).append("\n");
    sb.append("    xml: ").append(toIndentedString(xml)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("message_id");
    openapiFields.add("receiving_accesspoint");
    openapiFields.add("remote_mta_ip");
    openapiFields.add("reporting_mta");
    openapiFields.add("smtp_response");
    openapiFields.add("timestamp");
    openapiFields.add("transmission_id");
    openapiFields.add("xml");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentSubmissionEvidenceEvidence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentSubmissionEvidenceEvidence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentSubmissionEvidenceEvidence is not found in the empty JSON string", DocumentSubmissionEvidenceEvidence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentSubmissionEvidenceEvidence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentSubmissionEvidenceEvidence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message_id") != null && !jsonObj.get("message_id").isJsonNull()) && !jsonObj.get("message_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_id").toString()));
      }
      if ((jsonObj.get("receiving_accesspoint") != null && !jsonObj.get("receiving_accesspoint").isJsonNull()) && !jsonObj.get("receiving_accesspoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiving_accesspoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiving_accesspoint").toString()));
      }
      if ((jsonObj.get("remote_mta_ip") != null && !jsonObj.get("remote_mta_ip").isJsonNull()) && !jsonObj.get("remote_mta_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remote_mta_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remote_mta_ip").toString()));
      }
      if ((jsonObj.get("reporting_mta") != null && !jsonObj.get("reporting_mta").isJsonNull()) && !jsonObj.get("reporting_mta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reporting_mta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reporting_mta").toString()));
      }
      if ((jsonObj.get("smtp_response") != null && !jsonObj.get("smtp_response").isJsonNull()) && !jsonObj.get("smtp_response").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtp_response` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtp_response").toString()));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      if ((jsonObj.get("transmission_id") != null && !jsonObj.get("transmission_id").isJsonNull()) && !jsonObj.get("transmission_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmission_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmission_id").toString()));
      }
      if ((jsonObj.get("xml") != null && !jsonObj.get("xml").isJsonNull()) && !jsonObj.get("xml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xml").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentSubmissionEvidenceEvidence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentSubmissionEvidenceEvidence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentSubmissionEvidenceEvidence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentSubmissionEvidenceEvidence.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentSubmissionEvidenceEvidence>() {
           @Override
           public void write(JsonWriter out, DocumentSubmissionEvidenceEvidence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentSubmissionEvidenceEvidence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentSubmissionEvidenceEvidence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentSubmissionEvidenceEvidence
   * @throws IOException if the JSON string is invalid with respect to DocumentSubmissionEvidenceEvidence
   */
  public static DocumentSubmissionEvidenceEvidence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentSubmissionEvidenceEvidence.class);
  }

  /**
   * Convert an instance of DocumentSubmissionEvidenceEvidence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

