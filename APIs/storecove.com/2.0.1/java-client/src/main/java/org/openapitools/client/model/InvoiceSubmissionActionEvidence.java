/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvoiceSubmissionActionEvidence
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvoiceSubmissionActionEvidence {
  public static final String SERIALIZED_NAME_RECEIVER_RESPONSE = "receiver_response";
  @SerializedName(SERIALIZED_NAME_RECEIVER_RESPONSE)
  private String receiverResponse;

  public static final String SERIALIZED_NAME_TRANSMISSION_DATETIME = "transmission_datetime";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION_DATETIME)
  private String transmissionDatetime;

  /**
   * The result of this transmission.
   */
  @JsonAdapter(TransmissionResultEnum.Adapter.class)
  public enum TransmissionResultEnum {
    UNKNOWN("unknown"),
    
    ACCEPTED("accepted"),
    
    REJECTED("rejected"),
    
    SEND_ERROR("send_error"),
    
    INTERNAL_ERROR("internal_error");

    private String value;

    TransmissionResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransmissionResultEnum fromValue(String value) {
      for (TransmissionResultEnum b : TransmissionResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransmissionResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransmissionResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransmissionResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransmissionResultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransmissionResultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSMISSION_RESULT = "transmission_result";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION_RESULT)
  private TransmissionResultEnum transmissionResult;

  /**
   * How the document was transmitted.
   */
  @JsonAdapter(TransmissionTypeEnum.Adapter.class)
  public enum TransmissionTypeEnum {
    EMAIL("email"),
    
    EDI("edi"),
    
    AS2("as2"),
    
    PEPPOL("peppol"),
    
    SANDBOX("sandbox");

    private String value;

    TransmissionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransmissionTypeEnum fromValue(String value) {
      for (TransmissionTypeEnum b : TransmissionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransmissionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransmissionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransmissionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransmissionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransmissionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSMISSION_TYPE = "transmission_type";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION_TYPE)
  private TransmissionTypeEnum transmissionType;

  public static final String SERIALIZED_NAME_TRANSMITTED_DOCUMENT = "transmitted_document";
  @SerializedName(SERIALIZED_NAME_TRANSMITTED_DOCUMENT)
  private String transmittedDocument;

  public InvoiceSubmissionActionEvidence() {
  }

  public InvoiceSubmissionActionEvidence receiverResponse(String receiverResponse) {
    this.receiverResponse = receiverResponse;
    return this;
  }

  /**
   * The response the receiver sent.
   * @return receiverResponse
   */
  @javax.annotation.Nullable
  public String getReceiverResponse() {
    return receiverResponse;
  }

  public void setReceiverResponse(String receiverResponse) {
    this.receiverResponse = receiverResponse;
  }


  public InvoiceSubmissionActionEvidence transmissionDatetime(String transmissionDatetime) {
    this.transmissionDatetime = transmissionDatetime;
    return this;
  }

  /**
   * The DateTime of the transmission, as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z.
   * @return transmissionDatetime
   */
  @javax.annotation.Nullable
  public String getTransmissionDatetime() {
    return transmissionDatetime;
  }

  public void setTransmissionDatetime(String transmissionDatetime) {
    this.transmissionDatetime = transmissionDatetime;
  }


  public InvoiceSubmissionActionEvidence transmissionResult(TransmissionResultEnum transmissionResult) {
    this.transmissionResult = transmissionResult;
    return this;
  }

  /**
   * The result of this transmission.
   * @return transmissionResult
   */
  @javax.annotation.Nullable
  public TransmissionResultEnum getTransmissionResult() {
    return transmissionResult;
  }

  public void setTransmissionResult(TransmissionResultEnum transmissionResult) {
    this.transmissionResult = transmissionResult;
  }


  public InvoiceSubmissionActionEvidence transmissionType(TransmissionTypeEnum transmissionType) {
    this.transmissionType = transmissionType;
    return this;
  }

  /**
   * How the document was transmitted.
   * @return transmissionType
   */
  @javax.annotation.Nullable
  public TransmissionTypeEnum getTransmissionType() {
    return transmissionType;
  }

  public void setTransmissionType(TransmissionTypeEnum transmissionType) {
    this.transmissionType = transmissionType;
  }


  public InvoiceSubmissionActionEvidence transmittedDocument(String transmittedDocument) {
    this.transmittedDocument = transmittedDocument;
    return this;
  }

  /**
   * The document that was transmitted.
   * @return transmittedDocument
   */
  @javax.annotation.Nullable
  public String getTransmittedDocument() {
    return transmittedDocument;
  }

  public void setTransmittedDocument(String transmittedDocument) {
    this.transmittedDocument = transmittedDocument;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceSubmissionActionEvidence invoiceSubmissionActionEvidence = (InvoiceSubmissionActionEvidence) o;
    return Objects.equals(this.receiverResponse, invoiceSubmissionActionEvidence.receiverResponse) &&
        Objects.equals(this.transmissionDatetime, invoiceSubmissionActionEvidence.transmissionDatetime) &&
        Objects.equals(this.transmissionResult, invoiceSubmissionActionEvidence.transmissionResult) &&
        Objects.equals(this.transmissionType, invoiceSubmissionActionEvidence.transmissionType) &&
        Objects.equals(this.transmittedDocument, invoiceSubmissionActionEvidence.transmittedDocument);
  }

  @Override
  public int hashCode() {
    return Objects.hash(receiverResponse, transmissionDatetime, transmissionResult, transmissionType, transmittedDocument);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceSubmissionActionEvidence {\n");
    sb.append("    receiverResponse: ").append(toIndentedString(receiverResponse)).append("\n");
    sb.append("    transmissionDatetime: ").append(toIndentedString(transmissionDatetime)).append("\n");
    sb.append("    transmissionResult: ").append(toIndentedString(transmissionResult)).append("\n");
    sb.append("    transmissionType: ").append(toIndentedString(transmissionType)).append("\n");
    sb.append("    transmittedDocument: ").append(toIndentedString(transmittedDocument)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("receiver_response");
    openapiFields.add("transmission_datetime");
    openapiFields.add("transmission_result");
    openapiFields.add("transmission_type");
    openapiFields.add("transmitted_document");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceSubmissionActionEvidence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceSubmissionActionEvidence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceSubmissionActionEvidence is not found in the empty JSON string", InvoiceSubmissionActionEvidence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceSubmissionActionEvidence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceSubmissionActionEvidence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("receiver_response") != null && !jsonObj.get("receiver_response").isJsonNull()) && !jsonObj.get("receiver_response").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiver_response` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiver_response").toString()));
      }
      if ((jsonObj.get("transmission_datetime") != null && !jsonObj.get("transmission_datetime").isJsonNull()) && !jsonObj.get("transmission_datetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmission_datetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmission_datetime").toString()));
      }
      if ((jsonObj.get("transmission_result") != null && !jsonObj.get("transmission_result").isJsonNull()) && !jsonObj.get("transmission_result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmission_result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmission_result").toString()));
      }
      // validate the optional field `transmission_result`
      if (jsonObj.get("transmission_result") != null && !jsonObj.get("transmission_result").isJsonNull()) {
        TransmissionResultEnum.validateJsonElement(jsonObj.get("transmission_result"));
      }
      if ((jsonObj.get("transmission_type") != null && !jsonObj.get("transmission_type").isJsonNull()) && !jsonObj.get("transmission_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmission_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmission_type").toString()));
      }
      // validate the optional field `transmission_type`
      if (jsonObj.get("transmission_type") != null && !jsonObj.get("transmission_type").isJsonNull()) {
        TransmissionTypeEnum.validateJsonElement(jsonObj.get("transmission_type"));
      }
      if ((jsonObj.get("transmitted_document") != null && !jsonObj.get("transmitted_document").isJsonNull()) && !jsonObj.get("transmitted_document").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmitted_document` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmitted_document").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceSubmissionActionEvidence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceSubmissionActionEvidence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceSubmissionActionEvidence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceSubmissionActionEvidence.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceSubmissionActionEvidence>() {
           @Override
           public void write(JsonWriter out, InvoiceSubmissionActionEvidence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceSubmissionActionEvidence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceSubmissionActionEvidence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceSubmissionActionEvidence
   * @throws IOException if the JSON string is invalid with respect to InvoiceSubmissionActionEvidence
   */
  public static InvoiceSubmissionActionEvidence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceSubmissionActionEvidence.class);
  }

  /**
   * Convert an instance of InvoiceSubmissionActionEvidence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

