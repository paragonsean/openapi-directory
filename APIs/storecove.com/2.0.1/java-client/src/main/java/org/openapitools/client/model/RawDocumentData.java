/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A document to send, in base64 encoded format.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RawDocumentData {
  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private String document;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE_ID = "documentTypeId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE_ID)
  private String documentTypeId;

  public static final String SERIALIZED_NAME_PARSE = "parse";
  @SerializedName(SERIALIZED_NAME_PARSE)
  private Boolean parse = true;

  /**
   * How to parse the document. Only needed when parse &#x3D;&#x3D; true.
   */
  @JsonAdapter(ParseStrategyEnum.Adapter.class)
  public enum ParseStrategyEnum {
    UBL("ubl"),
    
    CII("cii"),
    
    IDOC("idoc");

    private String value;

    ParseStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ParseStrategyEnum fromValue(String value) {
      for (ParseStrategyEnum b : ParseStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ParseStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParseStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ParseStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ParseStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ParseStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PARSE_STRATEGY = "parseStrategy";
  @SerializedName(SERIALIZED_NAME_PARSE_STRATEGY)
  private ParseStrategyEnum parseStrategy;

  public static final String SERIALIZED_NAME_PROCESS_ID = "processId";
  @SerializedName(SERIALIZED_NAME_PROCESS_ID)
  private String processId;

  public RawDocumentData() {
  }

  public RawDocumentData document(String document) {
    this.document = document;
    return this;
  }

  /**
   * The base64 encoded version of the document.
   * @return document
   */
  @javax.annotation.Nonnull
  public String getDocument() {
    return document;
  }

  public void setDocument(String document) {
    this.document = document;
  }


  public RawDocumentData documentTypeId(String documentTypeId) {
    this.documentTypeId = documentTypeId;
    return this;
  }

  /**
   * The document type id of the document. Required when parse &#x3D;&#x3D; false.
   * @return documentTypeId
   */
  @javax.annotation.Nullable
  public String getDocumentTypeId() {
    return documentTypeId;
  }

  public void setDocumentTypeId(String documentTypeId) {
    this.documentTypeId = documentTypeId;
  }


  public RawDocumentData parse(Boolean parse) {
    this.parse = parse;
    return this;
  }

  /**
   * *** NOTE: only parse &#x3D;&#x3D; true is currently supported *** *** NOTE: parsing is only supported for documentType &#x3D;&#x3D; &#39;invoice&#39; *** Whether or not to parse the document. If true, the data will be extracted from the document and used to construct a new document. If false, the document will be sent as is. In this case, you must ensure the document validates without any errors against the relevant validation artifacts for that processId/documentTypeId. We automatically apply updates of the validation artificats, respecting the grace period provided by the issuer. During that period, documents that validate against either the old as well as against the new artifacts are accepted. After the grace period, your document must validate against the new artifacts. You are also responsible for making sure your receiver is able to receive the updated document.
   * @return parse
   */
  @javax.annotation.Nullable
  public Boolean getParse() {
    return parse;
  }

  public void setParse(Boolean parse) {
    this.parse = parse;
  }


  public RawDocumentData parseStrategy(ParseStrategyEnum parseStrategy) {
    this.parseStrategy = parseStrategy;
    return this;
  }

  /**
   * How to parse the document. Only needed when parse &#x3D;&#x3D; true.
   * @return parseStrategy
   */
  @javax.annotation.Nullable
  public ParseStrategyEnum getParseStrategy() {
    return parseStrategy;
  }

  public void setParseStrategy(ParseStrategyEnum parseStrategy) {
    this.parseStrategy = parseStrategy;
  }


  public RawDocumentData processId(String processId) {
    this.processId = processId;
    return this;
  }

  /**
   * The process id of the document. Required when parse &#x3D;&#x3D; false.
   * @return processId
   */
  @javax.annotation.Nullable
  public String getProcessId() {
    return processId;
  }

  public void setProcessId(String processId) {
    this.processId = processId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RawDocumentData rawDocumentData = (RawDocumentData) o;
    return Objects.equals(this.document, rawDocumentData.document) &&
        Objects.equals(this.documentTypeId, rawDocumentData.documentTypeId) &&
        Objects.equals(this.parse, rawDocumentData.parse) &&
        Objects.equals(this.parseStrategy, rawDocumentData.parseStrategy) &&
        Objects.equals(this.processId, rawDocumentData.processId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(document, documentTypeId, parse, parseStrategy, processId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RawDocumentData {\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    documentTypeId: ").append(toIndentedString(documentTypeId)).append("\n");
    sb.append("    parse: ").append(toIndentedString(parse)).append("\n");
    sb.append("    parseStrategy: ").append(toIndentedString(parseStrategy)).append("\n");
    sb.append("    processId: ").append(toIndentedString(processId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("document");
    openapiFields.add("documentTypeId");
    openapiFields.add("parse");
    openapiFields.add("parseStrategy");
    openapiFields.add("processId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("document");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RawDocumentData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RawDocumentData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RawDocumentData is not found in the empty JSON string", RawDocumentData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RawDocumentData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RawDocumentData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RawDocumentData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("document").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document").toString()));
      }
      if ((jsonObj.get("documentTypeId") != null && !jsonObj.get("documentTypeId").isJsonNull()) && !jsonObj.get("documentTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentTypeId").toString()));
      }
      if ((jsonObj.get("parseStrategy") != null && !jsonObj.get("parseStrategy").isJsonNull()) && !jsonObj.get("parseStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parseStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parseStrategy").toString()));
      }
      // validate the optional field `parseStrategy`
      if (jsonObj.get("parseStrategy") != null && !jsonObj.get("parseStrategy").isJsonNull()) {
        ParseStrategyEnum.validateJsonElement(jsonObj.get("parseStrategy"));
      }
      if ((jsonObj.get("processId") != null && !jsonObj.get("processId").isJsonNull()) && !jsonObj.get("processId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RawDocumentData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RawDocumentData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RawDocumentData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RawDocumentData.class));

       return (TypeAdapter<T>) new TypeAdapter<RawDocumentData>() {
           @Override
           public void write(JsonWriter out, RawDocumentData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RawDocumentData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RawDocumentData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RawDocumentData
   * @throws IOException if the JSON string is invalid with respect to RawDocumentData
   */
  public static RawDocumentData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RawDocumentData.class);
  }

  /**
   * Convert an instance of RawDocumentData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

