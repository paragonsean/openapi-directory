/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PeppolIdentifier;
import org.openapitools.client.model.PurchaseInvoiceSenderBillingContact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PurchaseInvoiceSender
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PurchaseInvoiceSender {
  public static final String SERIALIZED_NAME_BILLING_CONTACT = "billing_contact";
  @SerializedName(SERIALIZED_NAME_BILLING_CONTACT)
  private PurchaseInvoiceSenderBillingContact billingContact;

  public static final String SERIALIZED_NAME_BUILDING_NUMBER = "building_number";
  @SerializedName(SERIALIZED_NAME_BUILDING_NUMBER)
  private String buildingNumber;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private List<PeppolIdentifier> identifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEGAL_NAME = "legal_name";
  @SerializedName(SERIALIZED_NAME_LEGAL_NAME)
  private String legalName;

  public static final String SERIALIZED_NAME_LINE1 = "line1";
  @SerializedName(SERIALIZED_NAME_LINE1)
  private String line1;

  public static final String SERIALIZED_NAME_LINE2 = "line2";
  @SerializedName(SERIALIZED_NAME_LINE2)
  private String line2;

  public static final String SERIALIZED_NAME_NEIGHBORHOOD = "neighborhood";
  @SerializedName(SERIALIZED_NAME_NEIGHBORHOOD)
  private String neighborhood;

  public static final String SERIALIZED_NAME_PARTY_NAME = "party_name";
  @SerializedName(SERIALIZED_NAME_PARTY_NAME)
  private String partyName;

  public static final String SERIALIZED_NAME_PEPPOL_IDENTIFIERS = "peppol_identifiers";
  @SerializedName(SERIALIZED_NAME_PEPPOL_IDENTIFIERS)
  private PeppolIdentifier peppolIdentifiers;

  public static final String SERIALIZED_NAME_SECONDARY_NUMBER = "secondary_number";
  @SerializedName(SERIALIZED_NAME_SECONDARY_NUMBER)
  private String secondaryNumber;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public PurchaseInvoiceSender() {
  }

  public PurchaseInvoiceSender billingContact(PurchaseInvoiceSenderBillingContact billingContact) {
    this.billingContact = billingContact;
    return this;
  }

  /**
   * Get billingContact
   * @return billingContact
   */
  @javax.annotation.Nullable
  public PurchaseInvoiceSenderBillingContact getBillingContact() {
    return billingContact;
  }

  public void setBillingContact(PurchaseInvoiceSenderBillingContact billingContact) {
    this.billingContact = billingContact;
  }


  public PurchaseInvoiceSender buildingNumber(String buildingNumber) {
    this.buildingNumber = buildingNumber;
    return this;
  }

  /**
   * The building number. Used in SA.
   * @return buildingNumber
   */
  @javax.annotation.Nullable
  public String getBuildingNumber() {
    return buildingNumber;
  }

  public void setBuildingNumber(String buildingNumber) {
    this.buildingNumber = buildingNumber;
  }


  public PurchaseInvoiceSender city(String city) {
    this.city = city;
    return this;
  }

  /**
   * The city.
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public PurchaseInvoiceSender country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public PurchaseInvoiceSender county(String county) {
    this.county = county;
    return this;
  }

  /**
   * The county.
   * @return county
   */
  @javax.annotation.Nullable
  public String getCounty() {
    return county;
  }

  public void setCounty(String county) {
    this.county = county;
  }


  public PurchaseInvoiceSender department(String department) {
    this.department = department;
    return this;
  }

  /**
   * The department who sent the invoice.
   * @return department
   */
  @javax.annotation.Nullable
  public String getDepartment() {
    return department;
  }

  public void setDepartment(String department) {
    this.department = department;
  }


  public PurchaseInvoiceSender identifiers(List<PeppolIdentifier> identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  public PurchaseInvoiceSender addIdentifiersItem(PeppolIdentifier identifiersItem) {
    if (this.identifiers == null) {
      this.identifiers = new ArrayList<>();
    }
    this.identifiers.add(identifiersItem);
    return this;
  }

  /**
   * The array of identifiers for this sender.
   * @return identifiers
   */
  @javax.annotation.Nullable
  public List<PeppolIdentifier> getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(List<PeppolIdentifier> identifiers) {
    this.identifiers = identifiers;
  }


  public PurchaseInvoiceSender legalName(String legalName) {
    this.legalName = legalName;
    return this;
  }

  /**
   * The legal name of the party who sent the invoice.
   * @return legalName
   */
  @javax.annotation.Nullable
  public String getLegalName() {
    return legalName;
  }

  public void setLegalName(String legalName) {
    this.legalName = legalName;
  }


  public PurchaseInvoiceSender line1(String line1) {
    this.line1 = line1;
    return this;
  }

  /**
   * The address
   * @return line1
   */
  @javax.annotation.Nullable
  public String getLine1() {
    return line1;
  }

  public void setLine1(String line1) {
    this.line1 = line1;
  }


  public PurchaseInvoiceSender line2(String line2) {
    this.line2 = line2;
    return this;
  }

  /**
   * The address, line 2
   * @return line2
   */
  @javax.annotation.Nullable
  public String getLine2() {
    return line2;
  }

  public void setLine2(String line2) {
    this.line2 = line2;
  }


  public PurchaseInvoiceSender neighborhood(String neighborhood) {
    this.neighborhood = neighborhood;
    return this;
  }

  /**
   * The neighborhood. Used in SA.
   * @return neighborhood
   */
  @javax.annotation.Nullable
  public String getNeighborhood() {
    return neighborhood;
  }

  public void setNeighborhood(String neighborhood) {
    this.neighborhood = neighborhood;
  }


  public PurchaseInvoiceSender partyName(String partyName) {
    this.partyName = partyName;
    return this;
  }

  /**
   * The party who sent the invoice.
   * @return partyName
   */
  @javax.annotation.Nullable
  public String getPartyName() {
    return partyName;
  }

  public void setPartyName(String partyName) {
    this.partyName = partyName;
  }


  public PurchaseInvoiceSender peppolIdentifiers(PeppolIdentifier peppolIdentifiers) {
    this.peppolIdentifiers = peppolIdentifiers;
    return this;
  }

  /**
   * Get peppolIdentifiers
   * @return peppolIdentifiers
   */
  @javax.annotation.Nullable
  public PeppolIdentifier getPeppolIdentifiers() {
    return peppolIdentifiers;
  }

  public void setPeppolIdentifiers(PeppolIdentifier peppolIdentifiers) {
    this.peppolIdentifiers = peppolIdentifiers;
  }


  public PurchaseInvoiceSender secondaryNumber(String secondaryNumber) {
    this.secondaryNumber = secondaryNumber;
    return this;
  }

  /**
   * The secondary number. Used in SA.
   * @return secondaryNumber
   */
  @javax.annotation.Nullable
  public String getSecondaryNumber() {
    return secondaryNumber;
  }

  public void setSecondaryNumber(String secondaryNumber) {
    this.secondaryNumber = secondaryNumber;
  }


  public PurchaseInvoiceSender zip(String zip) {
    this.zip = zip;
    return this;
  }

  /**
   * The zip code.
   * @return zip
   */
  @javax.annotation.Nullable
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseInvoiceSender purchaseInvoiceSender = (PurchaseInvoiceSender) o;
    return Objects.equals(this.billingContact, purchaseInvoiceSender.billingContact) &&
        Objects.equals(this.buildingNumber, purchaseInvoiceSender.buildingNumber) &&
        Objects.equals(this.city, purchaseInvoiceSender.city) &&
        Objects.equals(this.country, purchaseInvoiceSender.country) &&
        Objects.equals(this.county, purchaseInvoiceSender.county) &&
        Objects.equals(this.department, purchaseInvoiceSender.department) &&
        Objects.equals(this.identifiers, purchaseInvoiceSender.identifiers) &&
        Objects.equals(this.legalName, purchaseInvoiceSender.legalName) &&
        Objects.equals(this.line1, purchaseInvoiceSender.line1) &&
        Objects.equals(this.line2, purchaseInvoiceSender.line2) &&
        Objects.equals(this.neighborhood, purchaseInvoiceSender.neighborhood) &&
        Objects.equals(this.partyName, purchaseInvoiceSender.partyName) &&
        Objects.equals(this.peppolIdentifiers, purchaseInvoiceSender.peppolIdentifiers) &&
        Objects.equals(this.secondaryNumber, purchaseInvoiceSender.secondaryNumber) &&
        Objects.equals(this.zip, purchaseInvoiceSender.zip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingContact, buildingNumber, city, country, county, department, identifiers, legalName, line1, line2, neighborhood, partyName, peppolIdentifiers, secondaryNumber, zip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseInvoiceSender {\n");
    sb.append("    billingContact: ").append(toIndentedString(billingContact)).append("\n");
    sb.append("    buildingNumber: ").append(toIndentedString(buildingNumber)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    legalName: ").append(toIndentedString(legalName)).append("\n");
    sb.append("    line1: ").append(toIndentedString(line1)).append("\n");
    sb.append("    line2: ").append(toIndentedString(line2)).append("\n");
    sb.append("    neighborhood: ").append(toIndentedString(neighborhood)).append("\n");
    sb.append("    partyName: ").append(toIndentedString(partyName)).append("\n");
    sb.append("    peppolIdentifiers: ").append(toIndentedString(peppolIdentifiers)).append("\n");
    sb.append("    secondaryNumber: ").append(toIndentedString(secondaryNumber)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing_contact");
    openapiFields.add("building_number");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("county");
    openapiFields.add("department");
    openapiFields.add("identifiers");
    openapiFields.add("legal_name");
    openapiFields.add("line1");
    openapiFields.add("line2");
    openapiFields.add("neighborhood");
    openapiFields.add("party_name");
    openapiFields.add("peppol_identifiers");
    openapiFields.add("secondary_number");
    openapiFields.add("zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PurchaseInvoiceSender
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PurchaseInvoiceSender.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PurchaseInvoiceSender is not found in the empty JSON string", PurchaseInvoiceSender.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PurchaseInvoiceSender.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PurchaseInvoiceSender` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billing_contact`
      if (jsonObj.get("billing_contact") != null && !jsonObj.get("billing_contact").isJsonNull()) {
        PurchaseInvoiceSenderBillingContact.validateJsonElement(jsonObj.get("billing_contact"));
      }
      if ((jsonObj.get("building_number") != null && !jsonObj.get("building_number").isJsonNull()) && !jsonObj.get("building_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `building_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("building_number").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("county") != null && !jsonObj.get("county").isJsonNull()) && !jsonObj.get("county").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county").toString()));
      }
      if ((jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if (jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) {
        JsonArray jsonArrayidentifiers = jsonObj.getAsJsonArray("identifiers");
        if (jsonArrayidentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("identifiers").toString()));
          }

          // validate the optional field `identifiers` (array)
          for (int i = 0; i < jsonArrayidentifiers.size(); i++) {
            PeppolIdentifier.validateJsonElement(jsonArrayidentifiers.get(i));
          };
        }
      }
      if ((jsonObj.get("legal_name") != null && !jsonObj.get("legal_name").isJsonNull()) && !jsonObj.get("legal_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legal_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legal_name").toString()));
      }
      if ((jsonObj.get("line1") != null && !jsonObj.get("line1").isJsonNull()) && !jsonObj.get("line1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line1").toString()));
      }
      if ((jsonObj.get("line2") != null && !jsonObj.get("line2").isJsonNull()) && !jsonObj.get("line2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line2").toString()));
      }
      if ((jsonObj.get("neighborhood") != null && !jsonObj.get("neighborhood").isJsonNull()) && !jsonObj.get("neighborhood").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `neighborhood` to be a primitive type in the JSON string but got `%s`", jsonObj.get("neighborhood").toString()));
      }
      if ((jsonObj.get("party_name") != null && !jsonObj.get("party_name").isJsonNull()) && !jsonObj.get("party_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party_name").toString()));
      }
      // validate the optional field `peppol_identifiers`
      if (jsonObj.get("peppol_identifiers") != null && !jsonObj.get("peppol_identifiers").isJsonNull()) {
        PeppolIdentifier.validateJsonElement(jsonObj.get("peppol_identifiers"));
      }
      if ((jsonObj.get("secondary_number") != null && !jsonObj.get("secondary_number").isJsonNull()) && !jsonObj.get("secondary_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondary_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondary_number").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PurchaseInvoiceSender.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PurchaseInvoiceSender' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PurchaseInvoiceSender> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PurchaseInvoiceSender.class));

       return (TypeAdapter<T>) new TypeAdapter<PurchaseInvoiceSender>() {
           @Override
           public void write(JsonWriter out, PurchaseInvoiceSender value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PurchaseInvoiceSender read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PurchaseInvoiceSender given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PurchaseInvoiceSender
   * @throws IOException if the JSON string is invalid with respect to PurchaseInvoiceSender
   */
  public static PurchaseInvoiceSender fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PurchaseInvoiceSender.class);
  }

  /**
   * Convert an instance of PurchaseInvoiceSender to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

