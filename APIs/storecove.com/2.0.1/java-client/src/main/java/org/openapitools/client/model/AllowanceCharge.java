/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Tax;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AllowanceCharge
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AllowanceCharge {
  public static final String SERIALIZED_NAME_AMOUNT_EXCLUDING_TAX = "amountExcludingTax";
  @SerializedName(SERIALIZED_NAME_AMOUNT_EXCLUDING_TAX)
  private BigDecimal amountExcludingTax;

  public static final String SERIALIZED_NAME_AMOUNT_EXCLUDING_VAT = "amountExcludingVat";
  @SerializedName(SERIALIZED_NAME_AMOUNT_EXCLUDING_VAT)
  private BigDecimal amountExcludingVat;

  public static final String SERIALIZED_NAME_AMOUNT_INCLUDING_TAX = "amountIncludingTax";
  @SerializedName(SERIALIZED_NAME_AMOUNT_INCLUDING_TAX)
  private BigDecimal amountIncludingTax;

  public static final String SERIALIZED_NAME_BASE_AMOUNT_EXCLUDING_TAX = "baseAmountExcludingTax";
  @SerializedName(SERIALIZED_NAME_BASE_AMOUNT_EXCLUDING_TAX)
  private BigDecimal baseAmountExcludingTax;

  public static final String SERIALIZED_NAME_BASE_AMOUNT_INCLUDING_TAX = "baseAmountIncludingTax";
  @SerializedName(SERIALIZED_NAME_BASE_AMOUNT_INCLUDING_TAX)
  private BigDecimal baseAmountIncludingTax;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason = "Agreed settlement";

  public static final String SERIALIZED_NAME_REASON_CODE = "reasonCode";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  private String reasonCode;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Tax tax;

  public static final String SERIALIZED_NAME_TAXES_DUTIES_FEES = "taxesDutiesFees";
  @SerializedName(SERIALIZED_NAME_TAXES_DUTIES_FEES)
  private List<Tax> taxesDutiesFees = new ArrayList<>();

  public AllowanceCharge() {
  }

  public AllowanceCharge amountExcludingTax(BigDecimal amountExcludingTax) {
    this.amountExcludingTax = amountExcludingTax;
    return this;
  }

  /**
   * The amount for the allowance or charge, excluding tax.
   * @return amountExcludingTax
   */
  @javax.annotation.Nullable
  public BigDecimal getAmountExcludingTax() {
    return amountExcludingTax;
  }

  public void setAmountExcludingTax(BigDecimal amountExcludingTax) {
    this.amountExcludingTax = amountExcludingTax;
  }


  public AllowanceCharge amountExcludingVat(BigDecimal amountExcludingVat) {
    this.amountExcludingVat = amountExcludingVat;
    return this;
  }

  /**
   * DEPRECATED. Use amountExcludingTax. The amount for the allowance or charge, excluding VAT.
   * @return amountExcludingVat
   */
  @javax.annotation.Nullable
  public BigDecimal getAmountExcludingVat() {
    return amountExcludingVat;
  }

  public void setAmountExcludingVat(BigDecimal amountExcludingVat) {
    this.amountExcludingVat = amountExcludingVat;
  }


  public AllowanceCharge amountIncludingTax(BigDecimal amountIncludingTax) {
    this.amountIncludingTax = amountIncludingTax;
    return this;
  }

  /**
   * The amount for the allowance or charge, including tax.
   * @return amountIncludingTax
   */
  @javax.annotation.Nullable
  public BigDecimal getAmountIncludingTax() {
    return amountIncludingTax;
  }

  public void setAmountIncludingTax(BigDecimal amountIncludingTax) {
    this.amountIncludingTax = amountIncludingTax;
  }


  public AllowanceCharge baseAmountExcludingTax(BigDecimal baseAmountExcludingTax) {
    this.baseAmountExcludingTax = baseAmountExcludingTax;
    return this;
  }

  /**
   * The base amount for the allowance or charge, excluding tax.
   * @return baseAmountExcludingTax
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseAmountExcludingTax() {
    return baseAmountExcludingTax;
  }

  public void setBaseAmountExcludingTax(BigDecimal baseAmountExcludingTax) {
    this.baseAmountExcludingTax = baseAmountExcludingTax;
  }


  public AllowanceCharge baseAmountIncludingTax(BigDecimal baseAmountIncludingTax) {
    this.baseAmountIncludingTax = baseAmountIncludingTax;
    return this;
  }

  /**
   * The base amount for the allowance or charge, including tax.
   * @return baseAmountIncludingTax
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseAmountIncludingTax() {
    return baseAmountIncludingTax;
  }

  public void setBaseAmountIncludingTax(BigDecimal baseAmountIncludingTax) {
    this.baseAmountIncludingTax = baseAmountIncludingTax;
  }


  public AllowanceCharge reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The reason for the allowance or charge, free text
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public AllowanceCharge reasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

  /**
   * Do not use. Contact Storecove first if you want to use this field.
   * @return reasonCode
   */
  @javax.annotation.Nullable
  public String getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }


  public AllowanceCharge tax(Tax tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Get tax
   * @return tax
   */
  @javax.annotation.Nullable
  public Tax getTax() {
    return tax;
  }

  public void setTax(Tax tax) {
    this.tax = tax;
  }


  public AllowanceCharge taxesDutiesFees(List<Tax> taxesDutiesFees) {
    this.taxesDutiesFees = taxesDutiesFees;
    return this;
  }

  public AllowanceCharge addTaxesDutiesFeesItem(Tax taxesDutiesFeesItem) {
    if (this.taxesDutiesFees == null) {
      this.taxesDutiesFees = new ArrayList<>();
    }
    this.taxesDutiesFees.add(taxesDutiesFeesItem);
    return this;
  }

  /**
   * An array of taxes, duties and fees for this invoice line. At this moment, multiple Tax items is allowed only for IN (India) and US (USA) taxes. All other countries can only have a single Tax item in this array.
   * @return taxesDutiesFees
   */
  @javax.annotation.Nullable
  public List<Tax> getTaxesDutiesFees() {
    return taxesDutiesFees;
  }

  public void setTaxesDutiesFees(List<Tax> taxesDutiesFees) {
    this.taxesDutiesFees = taxesDutiesFees;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllowanceCharge allowanceCharge = (AllowanceCharge) o;
    return Objects.equals(this.amountExcludingTax, allowanceCharge.amountExcludingTax) &&
        Objects.equals(this.amountExcludingVat, allowanceCharge.amountExcludingVat) &&
        Objects.equals(this.amountIncludingTax, allowanceCharge.amountIncludingTax) &&
        Objects.equals(this.baseAmountExcludingTax, allowanceCharge.baseAmountExcludingTax) &&
        Objects.equals(this.baseAmountIncludingTax, allowanceCharge.baseAmountIncludingTax) &&
        Objects.equals(this.reason, allowanceCharge.reason) &&
        Objects.equals(this.reasonCode, allowanceCharge.reasonCode) &&
        Objects.equals(this.tax, allowanceCharge.tax) &&
        Objects.equals(this.taxesDutiesFees, allowanceCharge.taxesDutiesFees);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountExcludingTax, amountExcludingVat, amountIncludingTax, baseAmountExcludingTax, baseAmountIncludingTax, reason, reasonCode, tax, taxesDutiesFees);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllowanceCharge {\n");
    sb.append("    amountExcludingTax: ").append(toIndentedString(amountExcludingTax)).append("\n");
    sb.append("    amountExcludingVat: ").append(toIndentedString(amountExcludingVat)).append("\n");
    sb.append("    amountIncludingTax: ").append(toIndentedString(amountIncludingTax)).append("\n");
    sb.append("    baseAmountExcludingTax: ").append(toIndentedString(baseAmountExcludingTax)).append("\n");
    sb.append("    baseAmountIncludingTax: ").append(toIndentedString(baseAmountIncludingTax)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    taxesDutiesFees: ").append(toIndentedString(taxesDutiesFees)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amountExcludingTax");
    openapiFields.add("amountExcludingVat");
    openapiFields.add("amountIncludingTax");
    openapiFields.add("baseAmountExcludingTax");
    openapiFields.add("baseAmountIncludingTax");
    openapiFields.add("reason");
    openapiFields.add("reasonCode");
    openapiFields.add("tax");
    openapiFields.add("taxesDutiesFees");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AllowanceCharge
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AllowanceCharge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AllowanceCharge is not found in the empty JSON string", AllowanceCharge.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AllowanceCharge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AllowanceCharge` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("reasonCode") != null && !jsonObj.get("reasonCode").isJsonNull()) && !jsonObj.get("reasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonCode").toString()));
      }
      // validate the optional field `tax`
      if (jsonObj.get("tax") != null && !jsonObj.get("tax").isJsonNull()) {
        Tax.validateJsonElement(jsonObj.get("tax"));
      }
      if (jsonObj.get("taxesDutiesFees") != null && !jsonObj.get("taxesDutiesFees").isJsonNull()) {
        JsonArray jsonArraytaxesDutiesFees = jsonObj.getAsJsonArray("taxesDutiesFees");
        if (jsonArraytaxesDutiesFees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxesDutiesFees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxesDutiesFees` to be an array in the JSON string but got `%s`", jsonObj.get("taxesDutiesFees").toString()));
          }

          // validate the optional field `taxesDutiesFees` (array)
          for (int i = 0; i < jsonArraytaxesDutiesFees.size(); i++) {
            Tax.validateJsonElement(jsonArraytaxesDutiesFees.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AllowanceCharge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AllowanceCharge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AllowanceCharge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AllowanceCharge.class));

       return (TypeAdapter<T>) new TypeAdapter<AllowanceCharge>() {
           @Override
           public void write(JsonWriter out, AllowanceCharge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AllowanceCharge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AllowanceCharge given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AllowanceCharge
   * @throws IOException if the JSON string is invalid with respect to AllowanceCharge
   */
  public static AllowanceCharge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AllowanceCharge.class);
  }

  /**
   * Convert an instance of AllowanceCharge to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

