/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LineAllowanceCharge
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LineAllowanceCharge {
  public static final String SERIALIZED_NAME_AMOUNT_EXCLUDING_TAX = "amountExcludingTax";
  @SerializedName(SERIALIZED_NAME_AMOUNT_EXCLUDING_TAX)
  private BigDecimal amountExcludingTax;

  public static final String SERIALIZED_NAME_BASE_AMOUNT_EXCLUDING_TAX = "baseAmountExcludingTax";
  @SerializedName(SERIALIZED_NAME_BASE_AMOUNT_EXCLUDING_TAX)
  private BigDecimal baseAmountExcludingTax;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_REASON_CODE = "reasonCode";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  private String reasonCode;

  public LineAllowanceCharge() {
  }

  public LineAllowanceCharge amountExcludingTax(BigDecimal amountExcludingTax) {
    this.amountExcludingTax = amountExcludingTax;
    return this;
  }

  /**
   * The amount for the allowance or charge, excluding tax.
   * @return amountExcludingTax
   */
  @javax.annotation.Nonnull
  public BigDecimal getAmountExcludingTax() {
    return amountExcludingTax;
  }

  public void setAmountExcludingTax(BigDecimal amountExcludingTax) {
    this.amountExcludingTax = amountExcludingTax;
  }


  public LineAllowanceCharge baseAmountExcludingTax(BigDecimal baseAmountExcludingTax) {
    this.baseAmountExcludingTax = baseAmountExcludingTax;
    return this;
  }

  /**
   * The base amount for the allowance or charge, excluding tax.
   * @return baseAmountExcludingTax
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseAmountExcludingTax() {
    return baseAmountExcludingTax;
  }

  public void setBaseAmountExcludingTax(BigDecimal baseAmountExcludingTax) {
    this.baseAmountExcludingTax = baseAmountExcludingTax;
  }


  public LineAllowanceCharge reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The reason for the allowance or charge, free text
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public LineAllowanceCharge reasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

  /**
   * Do not use. Contact Storecove first if you want to use this field.
   * @return reasonCode
   */
  @javax.annotation.Nullable
  public String getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineAllowanceCharge lineAllowanceCharge = (LineAllowanceCharge) o;
    return Objects.equals(this.amountExcludingTax, lineAllowanceCharge.amountExcludingTax) &&
        Objects.equals(this.baseAmountExcludingTax, lineAllowanceCharge.baseAmountExcludingTax) &&
        Objects.equals(this.reason, lineAllowanceCharge.reason) &&
        Objects.equals(this.reasonCode, lineAllowanceCharge.reasonCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountExcludingTax, baseAmountExcludingTax, reason, reasonCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineAllowanceCharge {\n");
    sb.append("    amountExcludingTax: ").append(toIndentedString(amountExcludingTax)).append("\n");
    sb.append("    baseAmountExcludingTax: ").append(toIndentedString(baseAmountExcludingTax)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amountExcludingTax");
    openapiFields.add("baseAmountExcludingTax");
    openapiFields.add("reason");
    openapiFields.add("reasonCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amountExcludingTax");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LineAllowanceCharge
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LineAllowanceCharge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineAllowanceCharge is not found in the empty JSON string", LineAllowanceCharge.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LineAllowanceCharge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LineAllowanceCharge` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LineAllowanceCharge.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("reasonCode") != null && !jsonObj.get("reasonCode").isJsonNull()) && !jsonObj.get("reasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineAllowanceCharge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineAllowanceCharge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineAllowanceCharge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineAllowanceCharge.class));

       return (TypeAdapter<T>) new TypeAdapter<LineAllowanceCharge>() {
           @Override
           public void write(JsonWriter out, LineAllowanceCharge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineAllowanceCharge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LineAllowanceCharge given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LineAllowanceCharge
   * @throws IOException if the JSON string is invalid with respect to LineAllowanceCharge
   */
  public static LineAllowanceCharge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineAllowanceCharge.class);
  }

  /**
   * Convert an instance of LineAllowanceCharge to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

