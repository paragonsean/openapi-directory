/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RoutingIdentifier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The different ways to send the invoice to the recipient. The publicIdentifiers are used to send via the Peppol network, if the recipient is not registered on the Peppol network, the invoice will be sent to the email addresses in the emails property. This property is only mandatory when sending the invoice data using the &lt;&lt;_openapi_invoice&gt;&gt; property, not when sending using the &lt;&lt;_openapi_invoicedata&gt;&gt; property, in which case this information will be extracted from the &lt;&lt;_openapi_invoicedata&gt;&gt; object. If you do specify an &lt;&lt;_openapi_invoicerecipient&gt;&gt; object and an &lt;&lt;_openapi_invoicedata&gt;&gt; object, the data from the two will be merged.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Routing {
  public static final String SERIALIZED_NAME_CLEAR_WITHOUT_SENDING = "clearWithoutSending";
  @SerializedName(SERIALIZED_NAME_CLEAR_WITHOUT_SENDING)
  private Boolean clearWithoutSending = false;

  public static final String SERIALIZED_NAME_E_IDENTIFIERS = "eIdentifiers";
  @SerializedName(SERIALIZED_NAME_E_IDENTIFIERS)
  private List<RoutingIdentifier> eIdentifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<String> emails = new ArrayList<>();

  public Routing() {
  }

  public Routing clearWithoutSending(Boolean clearWithoutSending) {
    this.clearWithoutSending = clearWithoutSending;
    return this;
  }

  /**
   * If you wish to send the document yourself in a Y-flow, use this flag. Wait for the &#39;cleared&#39; webhook and use the &lt;&lt;_openapi_show_document_submission_evidence&gt;&gt; endpoint to retrieve the clearing evidence. This will include a sendable document.
   * @return clearWithoutSending
   */
  @javax.annotation.Nullable
  public Boolean getClearWithoutSending() {
    return clearWithoutSending;
  }

  public void setClearWithoutSending(Boolean clearWithoutSending) {
    this.clearWithoutSending = clearWithoutSending;
  }


  public Routing eIdentifiers(List<RoutingIdentifier> eIdentifiers) {
    this.eIdentifiers = eIdentifiers;
    return this;
  }

  public Routing addEIdentifiersItem(RoutingIdentifier eIdentifiersItem) {
    if (this.eIdentifiers == null) {
      this.eIdentifiers = new ArrayList<>();
    }
    this.eIdentifiers.add(eIdentifiersItem);
    return this;
  }

  /**
   * A list of electronic routing identifiers. These are the identifiers used on the Peppol network or for other destinations.
   * @return eIdentifiers
   */
  @javax.annotation.Nullable
  public List<RoutingIdentifier> geteIdentifiers() {
    return eIdentifiers;
  }

  public void seteIdentifiers(List<RoutingIdentifier> eIdentifiers) {
    this.eIdentifiers = eIdentifiers;
  }


  public Routing emails(List<String> emails) {
    this.emails = emails;
    return this;
  }

  public Routing addEmailsItem(String emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

  /**
   * The email addresses the invoice should be sent to if none of the other identifiers can be used
   * @return emails
   */
  @javax.annotation.Nullable
  public List<String> getEmails() {
    return emails;
  }

  public void setEmails(List<String> emails) {
    this.emails = emails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Routing routing = (Routing) o;
    return Objects.equals(this.clearWithoutSending, routing.clearWithoutSending) &&
        Objects.equals(this.eIdentifiers, routing.eIdentifiers) &&
        Objects.equals(this.emails, routing.emails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clearWithoutSending, eIdentifiers, emails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Routing {\n");
    sb.append("    clearWithoutSending: ").append(toIndentedString(clearWithoutSending)).append("\n");
    sb.append("    eIdentifiers: ").append(toIndentedString(eIdentifiers)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clearWithoutSending");
    openapiFields.add("eIdentifiers");
    openapiFields.add("emails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Routing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Routing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Routing is not found in the empty JSON string", Routing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Routing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Routing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("eIdentifiers") != null && !jsonObj.get("eIdentifiers").isJsonNull()) {
        JsonArray jsonArrayeIdentifiers = jsonObj.getAsJsonArray("eIdentifiers");
        if (jsonArrayeIdentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("eIdentifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `eIdentifiers` to be an array in the JSON string but got `%s`", jsonObj.get("eIdentifiers").toString()));
          }

          // validate the optional field `eIdentifiers` (array)
          for (int i = 0; i < jsonArrayeIdentifiers.size(); i++) {
            RoutingIdentifier.validateJsonElement(jsonArrayeIdentifiers.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emails") != null && !jsonObj.get("emails").isJsonNull() && !jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Routing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Routing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Routing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Routing.class));

       return (TypeAdapter<T>) new TypeAdapter<Routing>() {
           @Override
           public void write(JsonWriter out, Routing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Routing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Routing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Routing
   * @throws IOException if the JSON string is invalid with respect to Routing
   */
  public static Routing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Routing.class);
  }

  /**
   * Convert an instance of Routing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

