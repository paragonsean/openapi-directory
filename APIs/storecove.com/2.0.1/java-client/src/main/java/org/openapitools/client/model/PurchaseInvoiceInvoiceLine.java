/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PurchaseInvoiceAccountingDetails;
import org.openapitools.client.model.PurchaseInvoiceInvoiceLineAllowanceCharge;
import org.openapitools.client.model.PurchaseInvoiceInvoiceLineItem;
import org.openapitools.client.model.PurchaseInvoiceInvoiceLinePrice;
import org.openapitools.client.model.PurchaseInvoiceTax;
import org.openapitools.client.model.VATDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PurchaseInvoiceInvoiceLine
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PurchaseInvoiceInvoiceLine {
  public static final String SERIALIZED_NAME_ACCOUNTING = "accounting";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING)
  private PurchaseInvoiceAccountingDetails accounting;

  public static final String SERIALIZED_NAME_ALLOWANCE_CHARGE = "allowance_charge";
  @SerializedName(SERIALIZED_NAME_ALLOWANCE_CHARGE)
  private BigDecimal allowanceCharge;

  public static final String SERIALIZED_NAME_ALLOWANCE_CHARGE_ARRAY = "allowance_charge_array";
  @SerializedName(SERIALIZED_NAME_ALLOWANCE_CHARGE_ARRAY)
  private List<PurchaseInvoiceInvoiceLineAllowanceCharge> allowanceChargeArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWANCE_CHARGES = "allowance_charges";
  @SerializedName(SERIALIZED_NAME_ALLOWANCE_CHARGES)
  private List<BigDecimal> allowanceCharges = new ArrayList<>();

  public static final String SERIALIZED_NAME_AMOUNT_EXCLUDING_TAX = "amount_excluding_tax";
  @SerializedName(SERIALIZED_NAME_AMOUNT_EXCLUDING_TAX)
  private BigDecimal amountExcludingTax;

  public static final String SERIALIZED_NAME_AMOUNT_EXCLUDING_VAT = "amount_excluding_vat";
  @SerializedName(SERIALIZED_NAME_AMOUNT_EXCLUDING_VAT)
  private BigDecimal amountExcludingVat;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERIOD_END = "period_end";
  @SerializedName(SERIALIZED_NAME_PERIOD_END)
  private String periodEnd;

  public static final String SERIALIZED_NAME_PERIOD_START = "period_start";
  @SerializedName(SERIALIZED_NAME_PERIOD_START)
  private String periodStart;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private PurchaseInvoiceInvoiceLinePrice price;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private PurchaseInvoiceTax tax;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private PurchaseInvoiceInvoiceLineItem units;

  public static final String SERIALIZED_NAME_VAT = "vat";
  @SerializedName(SERIALIZED_NAME_VAT)
  private VATDetails vat;

  public PurchaseInvoiceInvoiceLine() {
  }

  public PurchaseInvoiceInvoiceLine accounting(PurchaseInvoiceAccountingDetails accounting) {
    this.accounting = accounting;
    return this;
  }

  /**
   * Get accounting
   * @return accounting
   */
  @javax.annotation.Nullable
  public PurchaseInvoiceAccountingDetails getAccounting() {
    return accounting;
  }

  public void setAccounting(PurchaseInvoiceAccountingDetails accounting) {
    this.accounting = accounting;
  }


  public PurchaseInvoiceInvoiceLine allowanceCharge(BigDecimal allowanceCharge) {
    this.allowanceCharge = allowanceCharge;
    return this;
  }

  /**
   * DEPRECATED - use allowance_charges.
   * @return allowanceCharge
   */
  @javax.annotation.Nullable
  public BigDecimal getAllowanceCharge() {
    return allowanceCharge;
  }

  public void setAllowanceCharge(BigDecimal allowanceCharge) {
    this.allowanceCharge = allowanceCharge;
  }


  public PurchaseInvoiceInvoiceLine allowanceChargeArray(List<PurchaseInvoiceInvoiceLineAllowanceCharge> allowanceChargeArray) {
    this.allowanceChargeArray = allowanceChargeArray;
    return this;
  }

  public PurchaseInvoiceInvoiceLine addAllowanceChargeArrayItem(PurchaseInvoiceInvoiceLineAllowanceCharge allowanceChargeArrayItem) {
    if (this.allowanceChargeArray == null) {
      this.allowanceChargeArray = new ArrayList<>();
    }
    this.allowanceChargeArray.add(allowanceChargeArrayItem);
    return this;
  }

  /**
   * Get allowanceChargeArray
   * @return allowanceChargeArray
   */
  @javax.annotation.Nullable
  public List<PurchaseInvoiceInvoiceLineAllowanceCharge> getAllowanceChargeArray() {
    return allowanceChargeArray;
  }

  public void setAllowanceChargeArray(List<PurchaseInvoiceInvoiceLineAllowanceCharge> allowanceChargeArray) {
    this.allowanceChargeArray = allowanceChargeArray;
  }


  public PurchaseInvoiceInvoiceLine allowanceCharges(List<BigDecimal> allowanceCharges) {
    this.allowanceCharges = allowanceCharges;
    return this;
  }

  public PurchaseInvoiceInvoiceLine addAllowanceChargesItem(BigDecimal allowanceChargesItem) {
    if (this.allowanceCharges == null) {
      this.allowanceCharges = new ArrayList<>();
    }
    this.allowanceCharges.add(allowanceChargesItem);
    return this;
  }

  /**
   * Deprecated.
   * @return allowanceCharges
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getAllowanceCharges() {
    return allowanceCharges;
  }

  public void setAllowanceCharges(List<BigDecimal> allowanceCharges) {
    this.allowanceCharges = allowanceCharges;
  }


  public PurchaseInvoiceInvoiceLine amountExcludingTax(BigDecimal amountExcludingTax) {
    this.amountExcludingTax = amountExcludingTax;
    return this;
  }

  /**
   * The amount excluding Tax. This is equal to quantity x price_amount + âˆ‘ allowance_charges.
   * @return amountExcludingTax
   */
  @javax.annotation.Nullable
  public BigDecimal getAmountExcludingTax() {
    return amountExcludingTax;
  }

  public void setAmountExcludingTax(BigDecimal amountExcludingTax) {
    this.amountExcludingTax = amountExcludingTax;
  }


  public PurchaseInvoiceInvoiceLine amountExcludingVat(BigDecimal amountExcludingVat) {
    this.amountExcludingVat = amountExcludingVat;
    return this;
  }

  /**
   * DEPRECATED - use amount_excluding_tax. The amount excluding VAT.
   * @return amountExcludingVat
   */
  @javax.annotation.Nullable
  public BigDecimal getAmountExcludingVat() {
    return amountExcludingVat;
  }

  public void setAmountExcludingVat(BigDecimal amountExcludingVat) {
    this.amountExcludingVat = amountExcludingVat;
  }


  public PurchaseInvoiceInvoiceLine description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description for the invoice line.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PurchaseInvoiceInvoiceLine name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A short name for the invoice line.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PurchaseInvoiceInvoiceLine periodEnd(String periodEnd) {
    this.periodEnd = periodEnd;
    return this;
  }

  /**
   * The end date of the period this invoice line relates to. Format \&quot;YYYY-MM-DD\&quot;.
   * @return periodEnd
   */
  @javax.annotation.Nullable
  public String getPeriodEnd() {
    return periodEnd;
  }

  public void setPeriodEnd(String periodEnd) {
    this.periodEnd = periodEnd;
  }


  public PurchaseInvoiceInvoiceLine periodStart(String periodStart) {
    this.periodStart = periodStart;
    return this;
  }

  /**
   * The start date of the period this invoice line relates to. Format \&quot;YYYY-MM-DD\&quot;.
   * @return periodStart
   */
  @javax.annotation.Nullable
  public String getPeriodStart() {
    return periodStart;
  }

  public void setPeriodStart(String periodStart) {
    this.periodStart = periodStart;
  }


  public PurchaseInvoiceInvoiceLine price(PurchaseInvoiceInvoiceLinePrice price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public PurchaseInvoiceInvoiceLinePrice getPrice() {
    return price;
  }

  public void setPrice(PurchaseInvoiceInvoiceLinePrice price) {
    this.price = price;
  }


  public PurchaseInvoiceInvoiceLine tax(PurchaseInvoiceTax tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Get tax
   * @return tax
   */
  @javax.annotation.Nullable
  public PurchaseInvoiceTax getTax() {
    return tax;
  }

  public void setTax(PurchaseInvoiceTax tax) {
    this.tax = tax;
  }


  public PurchaseInvoiceInvoiceLine units(PurchaseInvoiceInvoiceLineItem units) {
    this.units = units;
    return this;
  }

  /**
   * Get units
   * @return units
   */
  @javax.annotation.Nullable
  public PurchaseInvoiceInvoiceLineItem getUnits() {
    return units;
  }

  public void setUnits(PurchaseInvoiceInvoiceLineItem units) {
    this.units = units;
  }


  public PurchaseInvoiceInvoiceLine vat(VATDetails vat) {
    this.vat = vat;
    return this;
  }

  /**
   * Get vat
   * @return vat
   */
  @javax.annotation.Nullable
  public VATDetails getVat() {
    return vat;
  }

  public void setVat(VATDetails vat) {
    this.vat = vat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseInvoiceInvoiceLine purchaseInvoiceInvoiceLine = (PurchaseInvoiceInvoiceLine) o;
    return Objects.equals(this.accounting, purchaseInvoiceInvoiceLine.accounting) &&
        Objects.equals(this.allowanceCharge, purchaseInvoiceInvoiceLine.allowanceCharge) &&
        Objects.equals(this.allowanceChargeArray, purchaseInvoiceInvoiceLine.allowanceChargeArray) &&
        Objects.equals(this.allowanceCharges, purchaseInvoiceInvoiceLine.allowanceCharges) &&
        Objects.equals(this.amountExcludingTax, purchaseInvoiceInvoiceLine.amountExcludingTax) &&
        Objects.equals(this.amountExcludingVat, purchaseInvoiceInvoiceLine.amountExcludingVat) &&
        Objects.equals(this.description, purchaseInvoiceInvoiceLine.description) &&
        Objects.equals(this.name, purchaseInvoiceInvoiceLine.name) &&
        Objects.equals(this.periodEnd, purchaseInvoiceInvoiceLine.periodEnd) &&
        Objects.equals(this.periodStart, purchaseInvoiceInvoiceLine.periodStart) &&
        Objects.equals(this.price, purchaseInvoiceInvoiceLine.price) &&
        Objects.equals(this.tax, purchaseInvoiceInvoiceLine.tax) &&
        Objects.equals(this.units, purchaseInvoiceInvoiceLine.units) &&
        Objects.equals(this.vat, purchaseInvoiceInvoiceLine.vat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accounting, allowanceCharge, allowanceChargeArray, allowanceCharges, amountExcludingTax, amountExcludingVat, description, name, periodEnd, periodStart, price, tax, units, vat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseInvoiceInvoiceLine {\n");
    sb.append("    accounting: ").append(toIndentedString(accounting)).append("\n");
    sb.append("    allowanceCharge: ").append(toIndentedString(allowanceCharge)).append("\n");
    sb.append("    allowanceChargeArray: ").append(toIndentedString(allowanceChargeArray)).append("\n");
    sb.append("    allowanceCharges: ").append(toIndentedString(allowanceCharges)).append("\n");
    sb.append("    amountExcludingTax: ").append(toIndentedString(amountExcludingTax)).append("\n");
    sb.append("    amountExcludingVat: ").append(toIndentedString(amountExcludingVat)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    periodEnd: ").append(toIndentedString(periodEnd)).append("\n");
    sb.append("    periodStart: ").append(toIndentedString(periodStart)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    vat: ").append(toIndentedString(vat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounting");
    openapiFields.add("allowance_charge");
    openapiFields.add("allowance_charge_array");
    openapiFields.add("allowance_charges");
    openapiFields.add("amount_excluding_tax");
    openapiFields.add("amount_excluding_vat");
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("period_end");
    openapiFields.add("period_start");
    openapiFields.add("price");
    openapiFields.add("tax");
    openapiFields.add("units");
    openapiFields.add("vat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PurchaseInvoiceInvoiceLine
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PurchaseInvoiceInvoiceLine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PurchaseInvoiceInvoiceLine is not found in the empty JSON string", PurchaseInvoiceInvoiceLine.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PurchaseInvoiceInvoiceLine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PurchaseInvoiceInvoiceLine` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accounting`
      if (jsonObj.get("accounting") != null && !jsonObj.get("accounting").isJsonNull()) {
        PurchaseInvoiceAccountingDetails.validateJsonElement(jsonObj.get("accounting"));
      }
      if (jsonObj.get("allowance_charge_array") != null && !jsonObj.get("allowance_charge_array").isJsonNull()) {
        JsonArray jsonArrayallowanceChargeArray = jsonObj.getAsJsonArray("allowance_charge_array");
        if (jsonArrayallowanceChargeArray != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allowance_charge_array").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allowance_charge_array` to be an array in the JSON string but got `%s`", jsonObj.get("allowance_charge_array").toString()));
          }

          // validate the optional field `allowance_charge_array` (array)
          for (int i = 0; i < jsonArrayallowanceChargeArray.size(); i++) {
            PurchaseInvoiceInvoiceLineAllowanceCharge.validateJsonElement(jsonArrayallowanceChargeArray.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowance_charges") != null && !jsonObj.get("allowance_charges").isJsonNull() && !jsonObj.get("allowance_charges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowance_charges` to be an array in the JSON string but got `%s`", jsonObj.get("allowance_charges").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("period_end") != null && !jsonObj.get("period_end").isJsonNull()) && !jsonObj.get("period_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period_end").toString()));
      }
      if ((jsonObj.get("period_start") != null && !jsonObj.get("period_start").isJsonNull()) && !jsonObj.get("period_start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period_start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period_start").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        PurchaseInvoiceInvoiceLinePrice.validateJsonElement(jsonObj.get("price"));
      }
      // validate the optional field `tax`
      if (jsonObj.get("tax") != null && !jsonObj.get("tax").isJsonNull()) {
        PurchaseInvoiceTax.validateJsonElement(jsonObj.get("tax"));
      }
      // validate the optional field `units`
      if (jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull()) {
        PurchaseInvoiceInvoiceLineItem.validateJsonElement(jsonObj.get("units"));
      }
      // validate the optional field `vat`
      if (jsonObj.get("vat") != null && !jsonObj.get("vat").isJsonNull()) {
        VATDetails.validateJsonElement(jsonObj.get("vat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PurchaseInvoiceInvoiceLine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PurchaseInvoiceInvoiceLine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PurchaseInvoiceInvoiceLine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PurchaseInvoiceInvoiceLine.class));

       return (TypeAdapter<T>) new TypeAdapter<PurchaseInvoiceInvoiceLine>() {
           @Override
           public void write(JsonWriter out, PurchaseInvoiceInvoiceLine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PurchaseInvoiceInvoiceLine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PurchaseInvoiceInvoiceLine given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PurchaseInvoiceInvoiceLine
   * @throws IOException if the JSON string is invalid with respect to PurchaseInvoiceInvoiceLine
   */
  public static PurchaseInvoiceInvoiceLine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PurchaseInvoiceInvoiceLine.class);
  }

  /**
   * Convert an instance of PurchaseInvoiceInvoiceLine to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

