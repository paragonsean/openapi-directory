/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A participant to be discovered.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiscoverableParticipant {
  /**
   * Gets or Sets documentTypes
   */
  @JsonAdapter(DocumentTypesEnum.Adapter.class)
  public enum DocumentTypesEnum {
    INVOICE("invoice"),
    
    CREDITNOTE("creditnote"),
    
    INVOICE_RESPONSE("invoice_response"),
    
    ORDER("order"),
    
    ORDERING("ordering"),
    
    ORDER_RESPONSE("order_response");

    private String value;

    DocumentTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentTypesEnum fromValue(String value) {
      for (DocumentTypesEnum b : DocumentTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocumentTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_TYPES = "documentTypes";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPES)
  private List<DocumentTypesEnum> documentTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_META_SCHEME = "metaScheme";
  @SerializedName(SERIALIZED_NAME_META_SCHEME)
  private String metaScheme = "iso6523-actorid-upis";

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network = "peppol";

  public static final String SERIALIZED_NAME_SCHEME = "scheme";
  @SerializedName(SERIALIZED_NAME_SCHEME)
  private String scheme;

  public DiscoverableParticipant() {
  }

  public DiscoverableParticipant documentTypes(List<DocumentTypesEnum> documentTypes) {
    this.documentTypes = documentTypes;
    return this;
  }

  public DiscoverableParticipant addDocumentTypesItem(DocumentTypesEnum documentTypesItem) {
    if (this.documentTypes == null) {
      this.documentTypes = new ArrayList<>();
    }
    this.documentTypes.add(documentTypesItem);
    return this;
  }

  /**
   * An array of document types to discover. The default is &#39;[\&quot;invoice\&quot;, \&quot;creditnote\&quot;]&#39;. This is ignored when only checking existence.
   * @return documentTypes
   */
  @javax.annotation.Nullable
  public List<DocumentTypesEnum> getDocumentTypes() {
    return documentTypes;
  }

  public void setDocumentTypes(List<DocumentTypesEnum> documentTypes) {
    this.documentTypes = documentTypes;
  }


  public DiscoverableParticipant identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * The actual identifier.
   * @return identifier
   */
  @javax.annotation.Nonnull
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public DiscoverableParticipant metaScheme(String metaScheme) {
    this.metaScheme = metaScheme;
    return this;
  }

  /**
   * The meta scheme of the identifier. For Peppol this is always &#39;iso6523-actorid-upis&#39;.
   * @return metaScheme
   */
  @javax.annotation.Nullable
  public String getMetaScheme() {
    return metaScheme;
  }

  public void setMetaScheme(String metaScheme) {
    this.metaScheme = metaScheme;
  }


  public DiscoverableParticipant network(String network) {
    this.network = network;
    return this;
  }

  /**
   * The network to check. Currently only &#39;peppol&#39; is supported.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public DiscoverableParticipant scheme(String scheme) {
    this.scheme = scheme;
    return this;
  }

  /**
   * The scheme of the identifier. See &lt;&lt;_receiver_identifiers_list&gt;&gt; for a list.
   * @return scheme
   */
  @javax.annotation.Nonnull
  public String getScheme() {
    return scheme;
  }

  public void setScheme(String scheme) {
    this.scheme = scheme;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscoverableParticipant discoverableParticipant = (DiscoverableParticipant) o;
    return Objects.equals(this.documentTypes, discoverableParticipant.documentTypes) &&
        Objects.equals(this.identifier, discoverableParticipant.identifier) &&
        Objects.equals(this.metaScheme, discoverableParticipant.metaScheme) &&
        Objects.equals(this.network, discoverableParticipant.network) &&
        Objects.equals(this.scheme, discoverableParticipant.scheme);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentTypes, identifier, metaScheme, network, scheme);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscoverableParticipant {\n");
    sb.append("    documentTypes: ").append(toIndentedString(documentTypes)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    metaScheme: ").append(toIndentedString(metaScheme)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentTypes");
    openapiFields.add("identifier");
    openapiFields.add("metaScheme");
    openapiFields.add("network");
    openapiFields.add("scheme");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("identifier");
    openapiRequiredFields.add("scheme");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiscoverableParticipant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscoverableParticipant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscoverableParticipant is not found in the empty JSON string", DiscoverableParticipant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiscoverableParticipant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscoverableParticipant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DiscoverableParticipant.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("documentTypes") != null && !jsonObj.get("documentTypes").isJsonNull() && !jsonObj.get("documentTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentTypes` to be an array in the JSON string but got `%s`", jsonObj.get("documentTypes").toString()));
      }
      if (!jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if ((jsonObj.get("metaScheme") != null && !jsonObj.get("metaScheme").isJsonNull()) && !jsonObj.get("metaScheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metaScheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metaScheme").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if (!jsonObj.get("scheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheme").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscoverableParticipant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscoverableParticipant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscoverableParticipant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscoverableParticipant.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscoverableParticipant>() {
           @Override
           public void write(JsonWriter out, DiscoverableParticipant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscoverableParticipant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiscoverableParticipant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiscoverableParticipant
   * @throws IOException if the JSON string is invalid with respect to DiscoverableParticipant
   */
  public static DiscoverableParticipant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscoverableParticipant.class);
  }

  /**
   * Convert an instance of DiscoverableParticipant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

