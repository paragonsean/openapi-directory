/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DocumentSubmissionEvidenceDocument;
import org.openapitools.client.model.DocumentSubmissionEvidenceEvidence;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentSubmissionEvidence
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentSubmissionEvidence {
  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<DocumentSubmissionEvidenceDocument> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVIDENCE = "evidence";
  @SerializedName(SERIALIZED_NAME_EVIDENCE)
  private DocumentSubmissionEvidenceEvidence evidence;

  /**
   * The exchange network that was used to send the document
   */
  @JsonAdapter(NetworkEnum.Adapter.class)
  public enum NetworkEnum {
    AS2("as2"),
    
    EMAIL("email"),
    
    PEPPOL("peppol"),
    
    SDI("sdi");

    private String value;

    NetworkEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetworkEnum fromValue(String value) {
      for (NetworkEnum b : NetworkEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NetworkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetworkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetworkEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NetworkEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NetworkEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private NetworkEnum network;

  public static final String SERIALIZED_NAME_RECEIVER = "receiver";
  @SerializedName(SERIALIZED_NAME_RECEIVER)
  private String receiver;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private String sender;

  public DocumentSubmissionEvidence() {
  }

  public DocumentSubmissionEvidence documents(List<DocumentSubmissionEvidenceDocument> documents) {
    this.documents = documents;
    return this;
  }

  public DocumentSubmissionEvidence addDocumentsItem(DocumentSubmissionEvidenceDocument documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * An array of documents that were sent. For OpenPeppol, this is always a single document (it may contain a PDF inside). For Email, the number of documents depends on the number of attachments, which in turn depends on the country of the receiver. For email, the raw email in RFC822 format is also included.
   * @return documents
   */
  @javax.annotation.Nullable
  public List<DocumentSubmissionEvidenceDocument> getDocuments() {
    return documents;
  }

  public void setDocuments(List<DocumentSubmissionEvidenceDocument> documents) {
    this.documents = documents;
  }


  public DocumentSubmissionEvidence evidence(DocumentSubmissionEvidenceEvidence evidence) {
    this.evidence = evidence;
    return this;
  }

  /**
   * Get evidence
   * @return evidence
   */
  @javax.annotation.Nullable
  public DocumentSubmissionEvidenceEvidence getEvidence() {
    return evidence;
  }

  public void setEvidence(DocumentSubmissionEvidenceEvidence evidence) {
    this.evidence = evidence;
  }


  public DocumentSubmissionEvidence network(NetworkEnum network) {
    this.network = network;
    return this;
  }

  /**
   * The exchange network that was used to send the document
   * @return network
   */
  @javax.annotation.Nullable
  public NetworkEnum getNetwork() {
    return network;
  }

  public void setNetwork(NetworkEnum network) {
    this.network = network;
  }


  public DocumentSubmissionEvidence receiver(String receiver) {
    this.receiver = receiver;
    return this;
  }

  /**
   * The legal identifier of the receiver, or the tax identifier if there is no legal identifier.
   * @return receiver
   */
  @javax.annotation.Nullable
  public String getReceiver() {
    return receiver;
  }

  public void setReceiver(String receiver) {
    this.receiver = receiver;
  }


  public DocumentSubmissionEvidence sender(String sender) {
    this.sender = sender;
    return this;
  }

  /**
   * The legal identifier of the sender, or the tax identifier if there is no legal identifier.
   * @return sender
   */
  @javax.annotation.Nullable
  public String getSender() {
    return sender;
  }

  public void setSender(String sender) {
    this.sender = sender;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentSubmissionEvidence documentSubmissionEvidence = (DocumentSubmissionEvidence) o;
    return Objects.equals(this.documents, documentSubmissionEvidence.documents) &&
        Objects.equals(this.evidence, documentSubmissionEvidence.evidence) &&
        Objects.equals(this.network, documentSubmissionEvidence.network) &&
        Objects.equals(this.receiver, documentSubmissionEvidence.receiver) &&
        Objects.equals(this.sender, documentSubmissionEvidence.sender);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documents, evidence, network, receiver, sender);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentSubmissionEvidence {\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    evidence: ").append(toIndentedString(evidence)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    receiver: ").append(toIndentedString(receiver)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documents");
    openapiFields.add("evidence");
    openapiFields.add("network");
    openapiFields.add("receiver");
    openapiFields.add("sender");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentSubmissionEvidence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentSubmissionEvidence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentSubmissionEvidence is not found in the empty JSON string", DocumentSubmissionEvidence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentSubmissionEvidence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentSubmissionEvidence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("documents");
        if (jsonArraydocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
          }

          // validate the optional field `documents` (array)
          for (int i = 0; i < jsonArraydocuments.size(); i++) {
            DocumentSubmissionEvidenceDocument.validateJsonElement(jsonArraydocuments.get(i));
          };
        }
      }
      // validate the optional field `evidence`
      if (jsonObj.get("evidence") != null && !jsonObj.get("evidence").isJsonNull()) {
        DocumentSubmissionEvidenceEvidence.validateJsonElement(jsonObj.get("evidence"));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      // validate the optional field `network`
      if (jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) {
        NetworkEnum.validateJsonElement(jsonObj.get("network"));
      }
      if ((jsonObj.get("receiver") != null && !jsonObj.get("receiver").isJsonNull()) && !jsonObj.get("receiver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiver").toString()));
      }
      if ((jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) && !jsonObj.get("sender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentSubmissionEvidence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentSubmissionEvidence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentSubmissionEvidence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentSubmissionEvidence.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentSubmissionEvidence>() {
           @Override
           public void write(JsonWriter out, DocumentSubmissionEvidence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentSubmissionEvidence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentSubmissionEvidence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentSubmissionEvidence
   * @throws IOException if the JSON string is invalid with respect to DocumentSubmissionEvidence
   */
  public static DocumentSubmissionEvidence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentSubmissionEvidence.class);
  }

  /**
   * Convert an instance of DocumentSubmissionEvidence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

