/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InvoiceResponseCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A clarification for why a received invoice was rejected (RE) or under query (UQ) and what action to take.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvoiceResponseClarification {
  public static final String SERIALIZED_NAME_CLARIFICATION = "clarification";
  @SerializedName(SERIALIZED_NAME_CLARIFICATION)
  private String clarification;

  /**
   * The code for the clarification. For details see https://docs.peppol.eu/poacc/upgrade-3/codelist/OPStatusReason/ and https://docs.peppol.eu/poacc/upgrade-3/codelist/OPStatusAction/
   */
  @JsonAdapter(ClarificationCodeEnum.Adapter.class)
  public enum ClarificationCodeEnum {
    NON("NON"),
    
    REF("REF"),
    
    LEG("LEG"),
    
    REC("REC"),
    
    QUA("QUA"),
    
    DEL("DEL"),
    
    PRI("PRI"),
    
    QTY("QTY"),
    
    ITM("ITM"),
    
    PAY("PAY"),
    
    UNR("UNR"),
    
    FIN("FIN"),
    
    PPD("PPD"),
    
    OTH("OTH"),
    
    NOA("NOA"),
    
    PIN("PIN"),
    
    NIN("NIN"),
    
    CNF("CNF"),
    
    CNP("CNP"),
    
    CNA("CNA");

    private String value;

    ClarificationCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClarificationCodeEnum fromValue(String value) {
      for (ClarificationCodeEnum b : ClarificationCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClarificationCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClarificationCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClarificationCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClarificationCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClarificationCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLARIFICATION_CODE = "clarificationCode";
  @SerializedName(SERIALIZED_NAME_CLARIFICATION_CODE)
  private ClarificationCodeEnum clarificationCode;

  /**
   * The type of the clarification.
   */
  @JsonAdapter(ClarificationCodeTypeEnum.Adapter.class)
  public enum ClarificationCodeTypeEnum {
    OP_STATUS_REASON("OPStatusReason"),
    
    OP_STATUS_ACTION("OPStatusAction");

    private String value;

    ClarificationCodeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClarificationCodeTypeEnum fromValue(String value) {
      for (ClarificationCodeTypeEnum b : ClarificationCodeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClarificationCodeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClarificationCodeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClarificationCodeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClarificationCodeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClarificationCodeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLARIFICATION_CODE_TYPE = "clarificationCodeType";
  @SerializedName(SERIALIZED_NAME_CLARIFICATION_CODE_TYPE)
  private ClarificationCodeTypeEnum clarificationCodeType;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<InvoiceResponseCondition> conditions = new ArrayList<>();

  public InvoiceResponseClarification() {
  }

  public InvoiceResponseClarification clarification(String clarification) {
    this.clarification = clarification;
    return this;
  }

  /**
   * A textual description of the clarification
   * @return clarification
   */
  @javax.annotation.Nullable
  public String getClarification() {
    return clarification;
  }

  public void setClarification(String clarification) {
    this.clarification = clarification;
  }


  public InvoiceResponseClarification clarificationCode(ClarificationCodeEnum clarificationCode) {
    this.clarificationCode = clarificationCode;
    return this;
  }

  /**
   * The code for the clarification. For details see https://docs.peppol.eu/poacc/upgrade-3/codelist/OPStatusReason/ and https://docs.peppol.eu/poacc/upgrade-3/codelist/OPStatusAction/
   * @return clarificationCode
   */
  @javax.annotation.Nullable
  public ClarificationCodeEnum getClarificationCode() {
    return clarificationCode;
  }

  public void setClarificationCode(ClarificationCodeEnum clarificationCode) {
    this.clarificationCode = clarificationCode;
  }


  public InvoiceResponseClarification clarificationCodeType(ClarificationCodeTypeEnum clarificationCodeType) {
    this.clarificationCodeType = clarificationCodeType;
    return this;
  }

  /**
   * The type of the clarification.
   * @return clarificationCodeType
   */
  @javax.annotation.Nullable
  public ClarificationCodeTypeEnum getClarificationCodeType() {
    return clarificationCodeType;
  }

  public void setClarificationCodeType(ClarificationCodeTypeEnum clarificationCodeType) {
    this.clarificationCodeType = clarificationCodeType;
  }


  public InvoiceResponseClarification conditions(List<InvoiceResponseCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public InvoiceResponseClarification addConditionsItem(InvoiceResponseCondition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * A list of conditions that triggered the error. This is only included for receiving in webhooks. You cannot currently send these conditions.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<InvoiceResponseCondition> getConditions() {
    return conditions;
  }

  public void setConditions(List<InvoiceResponseCondition> conditions) {
    this.conditions = conditions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceResponseClarification invoiceResponseClarification = (InvoiceResponseClarification) o;
    return Objects.equals(this.clarification, invoiceResponseClarification.clarification) &&
        Objects.equals(this.clarificationCode, invoiceResponseClarification.clarificationCode) &&
        Objects.equals(this.clarificationCodeType, invoiceResponseClarification.clarificationCodeType) &&
        Objects.equals(this.conditions, invoiceResponseClarification.conditions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clarification, clarificationCode, clarificationCodeType, conditions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceResponseClarification {\n");
    sb.append("    clarification: ").append(toIndentedString(clarification)).append("\n");
    sb.append("    clarificationCode: ").append(toIndentedString(clarificationCode)).append("\n");
    sb.append("    clarificationCodeType: ").append(toIndentedString(clarificationCodeType)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clarification");
    openapiFields.add("clarificationCode");
    openapiFields.add("clarificationCodeType");
    openapiFields.add("conditions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceResponseClarification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceResponseClarification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceResponseClarification is not found in the empty JSON string", InvoiceResponseClarification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceResponseClarification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceResponseClarification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clarification") != null && !jsonObj.get("clarification").isJsonNull()) && !jsonObj.get("clarification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clarification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clarification").toString()));
      }
      if ((jsonObj.get("clarificationCode") != null && !jsonObj.get("clarificationCode").isJsonNull()) && !jsonObj.get("clarificationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clarificationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clarificationCode").toString()));
      }
      // validate the optional field `clarificationCode`
      if (jsonObj.get("clarificationCode") != null && !jsonObj.get("clarificationCode").isJsonNull()) {
        ClarificationCodeEnum.validateJsonElement(jsonObj.get("clarificationCode"));
      }
      if ((jsonObj.get("clarificationCodeType") != null && !jsonObj.get("clarificationCodeType").isJsonNull()) && !jsonObj.get("clarificationCodeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clarificationCodeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clarificationCodeType").toString()));
      }
      // validate the optional field `clarificationCodeType`
      if (jsonObj.get("clarificationCodeType") != null && !jsonObj.get("clarificationCodeType").isJsonNull()) {
        ClarificationCodeTypeEnum.validateJsonElement(jsonObj.get("clarificationCodeType"));
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            InvoiceResponseCondition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceResponseClarification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceResponseClarification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceResponseClarification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceResponseClarification.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceResponseClarification>() {
           @Override
           public void write(JsonWriter out, InvoiceResponseClarification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceResponseClarification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceResponseClarification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceResponseClarification
   * @throws IOException if the JSON string is invalid with respect to InvoiceResponseClarification
   */
  public static InvoiceResponseClarification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceResponseClarification.class);
  }

  /**
   * Convert an instance of InvoiceResponseClarification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

