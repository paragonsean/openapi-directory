/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.Routing;
import org.openapitools.client.model.SendableDocument;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The document you want Storecove to send, with some meta-data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentSubmission {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<Attachment> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_PRIMARY_IMAGE = "createPrimaryImage";
  @SerializedName(SERIALIZED_NAME_CREATE_PRIMARY_IMAGE)
  private Boolean createPrimaryImage;

  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private SendableDocument document;

  public static final String SERIALIZED_NAME_IDEMPOTENCY_GUID = "idempotencyGuid";
  @SerializedName(SERIALIZED_NAME_IDEMPOTENCY_GUID)
  private String idempotencyGuid;

  public static final String SERIALIZED_NAME_LEGAL_ENTITY_ID = "legalEntityId";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY_ID)
  private Integer legalEntityId;

  public static final String SERIALIZED_NAME_RECEIVE_GUID = "receiveGuid";
  @SerializedName(SERIALIZED_NAME_RECEIVE_GUID)
  private String receiveGuid;

  public static final String SERIALIZED_NAME_ROUTING = "routing";
  @SerializedName(SERIALIZED_NAME_ROUTING)
  private Routing routing;

  public DocumentSubmission() {
  }

  public DocumentSubmission attachments(List<Attachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public DocumentSubmission addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * DEPRECATED. Use the attachments array inside the &#39;document&#39; property. An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<Attachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<Attachment> attachments) {
    this.attachments = attachments;
  }


  public DocumentSubmission createPrimaryImage(Boolean createPrimaryImage) {
    this.createPrimaryImage = createPrimaryImage;
    return this;
  }

  /**
   * DEPRECATED. In the future we will no longer support creating PDF invoices. Whether or not to create a primary image (PDF) if one is not provided. For customers who started from April 1st 2023, the default is false. For customers who started before that, the default is true.
   * @return createPrimaryImage
   */
  @javax.annotation.Nullable
  public Boolean getCreatePrimaryImage() {
    return createPrimaryImage;
  }

  public void setCreatePrimaryImage(Boolean createPrimaryImage) {
    this.createPrimaryImage = createPrimaryImage;
  }


  public DocumentSubmission document(SendableDocument document) {
    this.document = document;
    return this;
  }

  /**
   * Get document
   * @return document
   */
  @javax.annotation.Nullable
  public SendableDocument getDocument() {
    return document;
  }

  public void setDocument(SendableDocument document) {
    this.document = document;
  }


  public DocumentSubmission idempotencyGuid(String idempotencyGuid) {
    this.idempotencyGuid = idempotencyGuid;
    return this;
  }

  /**
   * A guid that you generated for this DocumentSubmission to achieve idempotency. If you submit multiple documents with the same idempotencyGuid, only the first one will be processed and any subsequent ones will trigger an HTTP 422 Unprocessable Entity response.
   * @return idempotencyGuid
   */
  @javax.annotation.Nullable
  public String getIdempotencyGuid() {
    return idempotencyGuid;
  }

  public void setIdempotencyGuid(String idempotencyGuid) {
    this.idempotencyGuid = idempotencyGuid;
  }


  public DocumentSubmission legalEntityId(Integer legalEntityId) {
    this.legalEntityId = legalEntityId;
    return this;
  }

  /**
   * The id of the LegalEntity this document should be sent on behalf of. Either legalEntityId or receiveGuid is mandatory.
   * @return legalEntityId
   */
  @javax.annotation.Nullable
  public Integer getLegalEntityId() {
    return legalEntityId;
  }

  public void setLegalEntityId(Integer legalEntityId) {
    this.legalEntityId = legalEntityId;
  }


  public DocumentSubmission receiveGuid(String receiveGuid) {
    this.receiveGuid = receiveGuid;
    return this;
  }

  /**
   * The GUID that was in the received_document webhook. Either legalEntityId or receiveGuid is mandatory. This field is used for sending response documents, such as InvoiceReponse and OrderResponse.
   * @return receiveGuid
   */
  @javax.annotation.Nullable
  public String getReceiveGuid() {
    return receiveGuid;
  }

  public void setReceiveGuid(String receiveGuid) {
    this.receiveGuid = receiveGuid;
  }


  public DocumentSubmission routing(Routing routing) {
    this.routing = routing;
    return this;
  }

  /**
   * Get routing
   * @return routing
   */
  @javax.annotation.Nullable
  public Routing getRouting() {
    return routing;
  }

  public void setRouting(Routing routing) {
    this.routing = routing;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentSubmission documentSubmission = (DocumentSubmission) o;
    return Objects.equals(this.attachments, documentSubmission.attachments) &&
        Objects.equals(this.createPrimaryImage, documentSubmission.createPrimaryImage) &&
        Objects.equals(this.document, documentSubmission.document) &&
        Objects.equals(this.idempotencyGuid, documentSubmission.idempotencyGuid) &&
        Objects.equals(this.legalEntityId, documentSubmission.legalEntityId) &&
        Objects.equals(this.receiveGuid, documentSubmission.receiveGuid) &&
        Objects.equals(this.routing, documentSubmission.routing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, createPrimaryImage, document, idempotencyGuid, legalEntityId, receiveGuid, routing);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentSubmission {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    createPrimaryImage: ").append(toIndentedString(createPrimaryImage)).append("\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    idempotencyGuid: ").append(toIndentedString(idempotencyGuid)).append("\n");
    sb.append("    legalEntityId: ").append(toIndentedString(legalEntityId)).append("\n");
    sb.append("    receiveGuid: ").append(toIndentedString(receiveGuid)).append("\n");
    sb.append("    routing: ").append(toIndentedString(routing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachments");
    openapiFields.add("createPrimaryImage");
    openapiFields.add("document");
    openapiFields.add("idempotencyGuid");
    openapiFields.add("legalEntityId");
    openapiFields.add("receiveGuid");
    openapiFields.add("routing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentSubmission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentSubmission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentSubmission is not found in the empty JSON string", DocumentSubmission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentSubmission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentSubmission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            Attachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      // validate the optional field `document`
      if (jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) {
        SendableDocument.validateJsonElement(jsonObj.get("document"));
      }
      if ((jsonObj.get("idempotencyGuid") != null && !jsonObj.get("idempotencyGuid").isJsonNull()) && !jsonObj.get("idempotencyGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idempotencyGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idempotencyGuid").toString()));
      }
      if ((jsonObj.get("receiveGuid") != null && !jsonObj.get("receiveGuid").isJsonNull()) && !jsonObj.get("receiveGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiveGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiveGuid").toString()));
      }
      // validate the optional field `routing`
      if (jsonObj.get("routing") != null && !jsonObj.get("routing").isJsonNull()) {
        Routing.validateJsonElement(jsonObj.get("routing"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentSubmission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentSubmission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentSubmission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentSubmission.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentSubmission>() {
           @Override
           public void write(JsonWriter out, DocumentSubmission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentSubmission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentSubmission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentSubmission
   * @throws IOException if the JSON string is invalid with respect to DocumentSubmission
   */
  public static DocumentSubmission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentSubmission.class);
  }

  /**
   * Convert an instance of DocumentSubmission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

