/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DocumentInvoiceResponse;
import org.openapitools.client.model.DocumentOrder;
import org.openapitools.client.model.Invoice;
import org.openapitools.client.model.RawDocumentData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The document to send.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendableDocument {
  /**
   * The type of document to be sent.
   */
  @JsonAdapter(DocumentTypeEnum.Adapter.class)
  public enum DocumentTypeEnum {
    INVOICE("invoice"),
    
    INVOICE_RESPONSE("invoice_response"),
    
    ORDER("order");

    private String value;

    DocumentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentTypeEnum fromValue(String value) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocumentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private DocumentTypeEnum documentType;

  public static final String SERIALIZED_NAME_INVOICE = "invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  private Invoice invoice;

  public static final String SERIALIZED_NAME_INVOICE_RESPONSE = "invoiceResponse";
  @SerializedName(SERIALIZED_NAME_INVOICE_RESPONSE)
  private DocumentInvoiceResponse invoiceResponse;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private DocumentOrder order;

  public static final String SERIALIZED_NAME_RAW_DOCUMENT_DATA = "rawDocumentData";
  @SerializedName(SERIALIZED_NAME_RAW_DOCUMENT_DATA)
  private RawDocumentData rawDocumentData;

  public SendableDocument() {
  }

  public SendableDocument documentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * The type of document to be sent.
   * @return documentType
   */
  @javax.annotation.Nonnull
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }

  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }


  public SendableDocument invoice(Invoice invoice) {
    this.invoice = invoice;
    return this;
  }

  /**
   * Get invoice
   * @return invoice
   */
  @javax.annotation.Nullable
  public Invoice getInvoice() {
    return invoice;
  }

  public void setInvoice(Invoice invoice) {
    this.invoice = invoice;
  }


  public SendableDocument invoiceResponse(DocumentInvoiceResponse invoiceResponse) {
    this.invoiceResponse = invoiceResponse;
    return this;
  }

  /**
   * Get invoiceResponse
   * @return invoiceResponse
   */
  @javax.annotation.Nullable
  public DocumentInvoiceResponse getInvoiceResponse() {
    return invoiceResponse;
  }

  public void setInvoiceResponse(DocumentInvoiceResponse invoiceResponse) {
    this.invoiceResponse = invoiceResponse;
  }


  public SendableDocument order(DocumentOrder order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public DocumentOrder getOrder() {
    return order;
  }

  public void setOrder(DocumentOrder order) {
    this.order = order;
  }


  public SendableDocument rawDocumentData(RawDocumentData rawDocumentData) {
    this.rawDocumentData = rawDocumentData;
    return this;
  }

  /**
   * Get rawDocumentData
   * @return rawDocumentData
   */
  @javax.annotation.Nullable
  public RawDocumentData getRawDocumentData() {
    return rawDocumentData;
  }

  public void setRawDocumentData(RawDocumentData rawDocumentData) {
    this.rawDocumentData = rawDocumentData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendableDocument sendableDocument = (SendableDocument) o;
    return Objects.equals(this.documentType, sendableDocument.documentType) &&
        Objects.equals(this.invoice, sendableDocument.invoice) &&
        Objects.equals(this.invoiceResponse, sendableDocument.invoiceResponse) &&
        Objects.equals(this.order, sendableDocument.order) &&
        Objects.equals(this.rawDocumentData, sendableDocument.rawDocumentData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentType, invoice, invoiceResponse, order, rawDocumentData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendableDocument {\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    invoiceResponse: ").append(toIndentedString(invoiceResponse)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    rawDocumentData: ").append(toIndentedString(rawDocumentData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentType");
    openapiFields.add("invoice");
    openapiFields.add("invoiceResponse");
    openapiFields.add("order");
    openapiFields.add("rawDocumentData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("documentType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendableDocument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendableDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendableDocument is not found in the empty JSON string", SendableDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendableDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendableDocument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendableDocument.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("documentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentType").toString()));
      }
      // validate the required field `documentType`
      DocumentTypeEnum.validateJsonElement(jsonObj.get("documentType"));
      // validate the optional field `invoice`
      if (jsonObj.get("invoice") != null && !jsonObj.get("invoice").isJsonNull()) {
        Invoice.validateJsonElement(jsonObj.get("invoice"));
      }
      // validate the optional field `invoiceResponse`
      if (jsonObj.get("invoiceResponse") != null && !jsonObj.get("invoiceResponse").isJsonNull()) {
        DocumentInvoiceResponse.validateJsonElement(jsonObj.get("invoiceResponse"));
      }
      // validate the optional field `order`
      if (jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) {
        DocumentOrder.validateJsonElement(jsonObj.get("order"));
      }
      // validate the optional field `rawDocumentData`
      if (jsonObj.get("rawDocumentData") != null && !jsonObj.get("rawDocumentData").isJsonNull()) {
        RawDocumentData.validateJsonElement(jsonObj.get("rawDocumentData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendableDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendableDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendableDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendableDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<SendableDocument>() {
           @Override
           public void write(JsonWriter out, SendableDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendableDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendableDocument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendableDocument
   * @throws IOException if the JSON string is invalid with respect to SendableDocument
   */
  public static SendableDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendableDocument.class);
  }

  /**
   * Convert an instance of SendableDocument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

