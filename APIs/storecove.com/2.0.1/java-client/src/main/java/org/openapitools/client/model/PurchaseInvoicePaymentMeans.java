/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PurchaseInvoicePaymentMeans
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PurchaseInvoicePaymentMeans {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_BRANCH_CODE = "branch_code";
  @SerializedName(SERIALIZED_NAME_BRANCH_CODE)
  private String branchCode;

  public static final String SERIALIZED_NAME_HOLDER = "holder";
  @SerializedName(SERIALIZED_NAME_HOLDER)
  private String holder;

  public static final String SERIALIZED_NAME_MANDATE = "mandate";
  @SerializedName(SERIALIZED_NAME_MANDATE)
  private String mandate;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_PAYMENT_ID = "payment_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  private String paymentId;

  /**
   * The type of payment means. Which type are returned is determined by the &amp;pmv&#x3D; query parameter. For details see documentation for that field.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BANK_PAYMENT_MEAN("BankPaymentMean"),
    
    DIRECT_DEBIT_PAYMENT_MEAN("DirectDebitPaymentMean"),
    
    CARD_PAYMENT_MEAN("CardPaymentMean"),
    
    NPP_PAYMENT_MEAN("NppPaymentMean"),
    
    SE_BANK_GIRO_PAYMENT_MEAN("SeBankGiroPaymentMean"),
    
    SE_PLUSGIRO_PAYMENT_MEAN("SePlusgiroPaymentMean"),
    
    SG_CARD_PAYMENT_MEAN("SgCardPaymentMean"),
    
    SG_GIRO_PAYMENT_MEAN("SgGiroPaymentMean"),
    
    SG_PAYNOW_PAYMENT_MEAN("SgPaynowPaymentMean"),
    
    CREDIT_TRANSFER_PAYMENT_MEAN("CreditTransferPaymentMean"),
    
    CREDIT_CARD_PAYMENT_MEAN("CreditCardPaymentMean"),
    
    SE_BANKGIRO_PAYMENT_MEAN("SeBankgiroPaymentMean"),
    
    AUNZ_NPP_PAYID_PAYMENT_MEAN("AunzNppPayidPaymentMean"),
    
    ONLINE_PAYMENT_SERVICE_PAYMENT_MEAN("OnlinePaymentServicePaymentMean"),
    
    STANDING_AGREEMENT_PAYMENT_MEAN("StandingAgreementPaymentMean"),
    
    AUNZ_NPP_PAYTO_PAYMENT_MEAN("AunzNppPaytoPaymentMean"),
    
    AUNZ_BPAY_PAYMENT_MEAN("AunzBpayPaymentMean"),
    
    AUNZ_POSTBILLPAY_PAYMENT_MEAN("AunzPostbillpayPaymentMean"),
    
    AUNZ_URI_PAYMENT_MEAN("AunzUriPaymentMean");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public PurchaseInvoicePaymentMeans() {
  }

  public PurchaseInvoicePaymentMeans account(String account) {
    this.account = account;
    return this;
  }

  /**
   * The account number to which to transfer.
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }


  public PurchaseInvoicePaymentMeans branchCode(String branchCode) {
    this.branchCode = branchCode;
    return this;
  }

  /**
   * The code identifying the bank branch. May contain a BIC/SWIFT or something appropriate for the payment method, such as \&quot;NPP\&quot; for type NppPaymentMean.
   * @return branchCode
   */
  @javax.annotation.Nullable
  public String getBranchCode() {
    return branchCode;
  }

  public void setBranchCode(String branchCode) {
    this.branchCode = branchCode;
  }


  public PurchaseInvoicePaymentMeans holder(String holder) {
    this.holder = holder;
    return this;
  }

  /**
   * The account holder name to which to transfer.
   * @return holder
   */
  @javax.annotation.Nullable
  public String getHolder() {
    return holder;
  }

  public void setHolder(String holder) {
    this.holder = holder;
  }


  public PurchaseInvoicePaymentMeans mandate(String mandate) {
    this.mandate = mandate;
    return this;
  }

  /**
   * The mandate, used only for type DirectDebitPaymentMean.
   * @return mandate
   */
  @javax.annotation.Nullable
  public String getMandate() {
    return mandate;
  }

  public void setMandate(String mandate) {
    this.mandate = mandate;
  }


  public PurchaseInvoicePaymentMeans network(String network) {
    this.network = network;
    return this;
  }

  /**
   * The payment network. Used only for type CardPaymentType.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public PurchaseInvoicePaymentMeans paymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  /**
   * The payment id to use when making the payment. The invoice sender will use this to match the received funds to the invoice.
   * @return paymentId
   */
  @javax.annotation.Nullable
  public String getPaymentId() {
    return paymentId;
  }

  public void setPaymentId(String paymentId) {
    this.paymentId = paymentId;
  }


  public PurchaseInvoicePaymentMeans type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of payment means. Which type are returned is determined by the &amp;pmv&#x3D; query parameter. For details see documentation for that field.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseInvoicePaymentMeans purchaseInvoicePaymentMeans = (PurchaseInvoicePaymentMeans) o;
    return Objects.equals(this.account, purchaseInvoicePaymentMeans.account) &&
        Objects.equals(this.branchCode, purchaseInvoicePaymentMeans.branchCode) &&
        Objects.equals(this.holder, purchaseInvoicePaymentMeans.holder) &&
        Objects.equals(this.mandate, purchaseInvoicePaymentMeans.mandate) &&
        Objects.equals(this.network, purchaseInvoicePaymentMeans.network) &&
        Objects.equals(this.paymentId, purchaseInvoicePaymentMeans.paymentId) &&
        Objects.equals(this.type, purchaseInvoicePaymentMeans.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, branchCode, holder, mandate, network, paymentId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseInvoicePaymentMeans {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    branchCode: ").append(toIndentedString(branchCode)).append("\n");
    sb.append("    holder: ").append(toIndentedString(holder)).append("\n");
    sb.append("    mandate: ").append(toIndentedString(mandate)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("branch_code");
    openapiFields.add("holder");
    openapiFields.add("mandate");
    openapiFields.add("network");
    openapiFields.add("payment_id");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PurchaseInvoicePaymentMeans
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PurchaseInvoicePaymentMeans.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PurchaseInvoicePaymentMeans is not found in the empty JSON string", PurchaseInvoicePaymentMeans.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PurchaseInvoicePaymentMeans.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PurchaseInvoicePaymentMeans` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("branch_code") != null && !jsonObj.get("branch_code").isJsonNull()) && !jsonObj.get("branch_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch_code").toString()));
      }
      if ((jsonObj.get("holder") != null && !jsonObj.get("holder").isJsonNull()) && !jsonObj.get("holder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holder").toString()));
      }
      if ((jsonObj.get("mandate") != null && !jsonObj.get("mandate").isJsonNull()) && !jsonObj.get("mandate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mandate").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("payment_id") != null && !jsonObj.get("payment_id").isJsonNull()) && !jsonObj.get("payment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PurchaseInvoicePaymentMeans.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PurchaseInvoicePaymentMeans' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PurchaseInvoicePaymentMeans> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PurchaseInvoicePaymentMeans.class));

       return (TypeAdapter<T>) new TypeAdapter<PurchaseInvoicePaymentMeans>() {
           @Override
           public void write(JsonWriter out, PurchaseInvoicePaymentMeans value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PurchaseInvoicePaymentMeans read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PurchaseInvoicePaymentMeans given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PurchaseInvoicePaymentMeans
   * @throws IOException if the JSON string is invalid with respect to PurchaseInvoicePaymentMeans
   */
  public static PurchaseInvoicePaymentMeans fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PurchaseInvoicePaymentMeans.class);
  }

  /**
   * Convert an instance of PurchaseInvoicePaymentMeans to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

