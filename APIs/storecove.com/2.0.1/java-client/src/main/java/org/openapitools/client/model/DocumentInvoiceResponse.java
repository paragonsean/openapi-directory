/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InvoiceResponseClarification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The invoice response to send or received.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentInvoiceResponse {
  public static final String SERIALIZED_NAME_CLARIFICATIONS = "clarifications";
  @SerializedName(SERIALIZED_NAME_CLARIFICATIONS)
  private List<InvoiceResponseClarification> clarifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private String effectiveDate;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  /**
   * The response code. For details see https://docs.peppol.eu/poacc/upgrade-3/codelist/UNCL4343-T111/
   */
  @JsonAdapter(ResponseCodeEnum.Adapter.class)
  public enum ResponseCodeEnum {
    AB("AB"),
    
    IP("IP"),
    
    UQ("UQ"),
    
    CA("CA"),
    
    RE("RE"),
    
    AP("AP"),
    
    PD("PD");

    private String value;

    ResponseCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseCodeEnum fromValue(String value) {
      for (ResponseCodeEnum b : ResponseCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponseCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponseCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResponseCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE_CODE = "responseCode";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CODE)
  private ResponseCodeEnum responseCode;

  public DocumentInvoiceResponse() {
  }

  public DocumentInvoiceResponse clarifications(List<InvoiceResponseClarification> clarifications) {
    this.clarifications = clarifications;
    return this;
  }

  public DocumentInvoiceResponse addClarificationsItem(InvoiceResponseClarification clarificationsItem) {
    if (this.clarifications == null) {
      this.clarifications = new ArrayList<>();
    }
    this.clarifications.add(clarificationsItem);
    return this;
  }

  /**
   * A list of clarifications why a received invoice was rejected (RE) or under query (UQ) and what action to take.
   * @return clarifications
   */
  @javax.annotation.Nullable
  public List<InvoiceResponseClarification> getClarifications() {
    return clarifications;
  }

  public void setClarifications(List<InvoiceResponseClarification> clarifications) {
    this.clarifications = clarifications;
  }


  public DocumentInvoiceResponse effectiveDate(String effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * The date when the status became effective. Format: yyyy-mm-dd.
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public String getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(String effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public DocumentInvoiceResponse note(String note) {
    this.note = note;
    return this;
  }

  /**
   * A note to add to the invoice reponse
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public DocumentInvoiceResponse responseCode(ResponseCodeEnum responseCode) {
    this.responseCode = responseCode;
    return this;
  }

  /**
   * The response code. For details see https://docs.peppol.eu/poacc/upgrade-3/codelist/UNCL4343-T111/
   * @return responseCode
   */
  @javax.annotation.Nonnull
  public ResponseCodeEnum getResponseCode() {
    return responseCode;
  }

  public void setResponseCode(ResponseCodeEnum responseCode) {
    this.responseCode = responseCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentInvoiceResponse documentInvoiceResponse = (DocumentInvoiceResponse) o;
    return Objects.equals(this.clarifications, documentInvoiceResponse.clarifications) &&
        Objects.equals(this.effectiveDate, documentInvoiceResponse.effectiveDate) &&
        Objects.equals(this.note, documentInvoiceResponse.note) &&
        Objects.equals(this.responseCode, documentInvoiceResponse.responseCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clarifications, effectiveDate, note, responseCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentInvoiceResponse {\n");
    sb.append("    clarifications: ").append(toIndentedString(clarifications)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clarifications");
    openapiFields.add("effectiveDate");
    openapiFields.add("note");
    openapiFields.add("responseCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("responseCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentInvoiceResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentInvoiceResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentInvoiceResponse is not found in the empty JSON string", DocumentInvoiceResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentInvoiceResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentInvoiceResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentInvoiceResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("clarifications") != null && !jsonObj.get("clarifications").isJsonNull()) {
        JsonArray jsonArrayclarifications = jsonObj.getAsJsonArray("clarifications");
        if (jsonArrayclarifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clarifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clarifications` to be an array in the JSON string but got `%s`", jsonObj.get("clarifications").toString()));
          }

          // validate the optional field `clarifications` (array)
          for (int i = 0; i < jsonArrayclarifications.size(); i++) {
            InvoiceResponseClarification.validateJsonElement(jsonArrayclarifications.get(i));
          };
        }
      }
      if ((jsonObj.get("effectiveDate") != null && !jsonObj.get("effectiveDate").isJsonNull()) && !jsonObj.get("effectiveDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveDate").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (!jsonObj.get("responseCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseCode").toString()));
      }
      // validate the required field `responseCode`
      ResponseCodeEnum.validateJsonElement(jsonObj.get("responseCode"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentInvoiceResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentInvoiceResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentInvoiceResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentInvoiceResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentInvoiceResponse>() {
           @Override
           public void write(JsonWriter out, DocumentInvoiceResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentInvoiceResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentInvoiceResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentInvoiceResponse
   * @throws IOException if the JSON string is invalid with respect to DocumentInvoiceResponse
   */
  public static DocumentInvoiceResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentInvoiceResponse.class);
  }

  /**
   * Convert an instance of DocumentInvoiceResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

