/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdditionalItemProperty;
import org.openapitools.client.model.LineAllowanceCharge;
import org.openapitools.client.model.LineDelivery;
import org.openapitools.client.model.Reference;
import org.openapitools.client.model.Tax;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderLine
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderLine {
  public static final String SERIALIZED_NAME_ACCOUNTING_COST = "accountingCost";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING_COST)
  private String accountingCost;

  public static final String SERIALIZED_NAME_ADDITIONAL_ITEM_PROPERTIES = "additionalItemProperties";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ITEM_PROPERTIES)
  private List<AdditionalItemProperty> additionalItemProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOW_PARTIAL_DELIVERY = "allowPartialDelivery";
  @SerializedName(SERIALIZED_NAME_ALLOW_PARTIAL_DELIVERY)
  private Boolean allowPartialDelivery = false;

  public static final String SERIALIZED_NAME_ALLOWANCE_CHARGES = "allowanceCharges";
  @SerializedName(SERIALIZED_NAME_ALLOWANCE_CHARGES)
  private List<LineAllowanceCharge> allowanceCharges = new ArrayList<>();

  public static final String SERIALIZED_NAME_AMOUNT_EXCLUDING_TAX = "amountExcludingTax";
  @SerializedName(SERIALIZED_NAME_AMOUNT_EXCLUDING_TAX)
  private BigDecimal amountExcludingTax;

  public static final String SERIALIZED_NAME_BASE_QUANTITY = "baseQuantity";
  @SerializedName(SERIALIZED_NAME_BASE_QUANTITY)
  private BigDecimal baseQuantity = new BigDecimal("1");

  public static final String SERIALIZED_NAME_DELIVERY = "delivery";
  @SerializedName(SERIALIZED_NAME_DELIVERY)
  private LineDelivery delivery;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ITEM_PRICE = "itemPrice";
  @SerializedName(SERIALIZED_NAME_ITEM_PRICE)
  private BigDecimal itemPrice = new BigDecimal("1");

  public static final String SERIALIZED_NAME_LINE_ID = "lineId";
  @SerializedName(SERIALIZED_NAME_LINE_ID)
  private String lineId;

  public static final String SERIALIZED_NAME_LOT_NUMBER_IDS = "lotNumberIds";
  @SerializedName(SERIALIZED_NAME_LOT_NUMBER_IDS)
  private List<String> lotNumberIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity = new BigDecimal("1");

  /**
   * The unit of measure that applies to the quantity. Codes for unit of packaging from UNECE Recommendation No. 21 can be used in accordance with the descriptions in the \&quot;Intro\&quot; section of UN/ECE Recommendation 20, Revision 11 (2015): The 2 character alphanumeric code values in UNECE Recommendation 21 shall be used. To avoid duplication with existing code values in UNECE Recommendation No. 20, each code value from UNECE Recommendation 21 shall be prefixed with an “X”, resulting in a 3 alphanumeric code when used as a unit of measure. Note that the following additionally allowed codes are deprecated and will be converted to C62: 04, 05, 08, 16, 17, 18, 19, 26, 29, 30, 31, 32, 36, 43, 44, 45, 46, 47, 48, 53, 54, 62, 63, 64, 66, 69, 71, 72, 73, 76, 78, 84, 90, 92, 93, 94, 95, 96, 97, 98, 1A, 1B, 1C, 1D, 1E, 1F, 1G, 1H, 1J, 1K, 1L, 1M, 1X, 2V, 2W, 3E, 3G, 3H, 3I, 4A, 4B, 4E, 5C, 5F, 5G, 5H, 5I, 5K, 5P, 5Q, A1, A25, A50, A51, A52, A57, A58, A60, A61, A62, A63, A64, A65, A66, A67, A77, A78, A79, A80, A81, A82, A83, AJ, AM, AP, AR, ARE, ATT, AV, AW, B0, B2, B36, B37, B38, B39, B40, B5, B51, B6, B65, B9, BD, BE, BG, BH, BJ, BK, BL, BO, BR, BT, BW, BX, BZ, C1, C2, C4, C5, C6, C77, C98, CA, CH, CJ, CK, CL, CO, CQ, CR, CS, CT, CU, CV, CY, CZ, D14, D28, D35, D37, D38, D39, D40, D64, D66, D67, D7, D70, D71, D72, D75, D76, D79, D8, D9, D90, D92, D96, D97, D98, D99, DC, DE, DI, DQ, DR, DRM, DS, DU, DX, DY, E2, E3, E5, EC, EP, EV, F1, F9, FB, FD, FE, FG, FM, G7, GC, GD, GH, GK, GN, GRT, GT, GW, GY, GZ, H1, H2, HAR, HD, HE, HF, HI, HJ, HK, HL, HN, HO, HP, HS, HT, HY, IC, IF, II, IL, IM, IP, IT, JB, JG, JO, JR, K5, KD, KF, KG, KS, KTM, LC, LE, LI, LJ, LX, M0, MA, MF, MK, MQ, MT, MV, N2, NB, NBB, NC, ND, NE, NG, NH, NI, NJ, NN, NPL, NPR, NQ, NR, NRL, NTT, NV, NY, OP, OZ, P0, P3, P4, P6, P7, P8, P9, PA, PB, PE, PF, PG, PK, PL, PM, PN, PT, PU, PV, PW, PY, PZ, QD, QH, QK, QT, R4, RA, RD, RG, RK, RL, RN, RO, RS, RU, S5, S6, S7, S8, SA, SD, SE, SHT, SK, SL, SN, SO, SP, SS, SST, ST, SV, T1, T4, T5, T6, T7, T8, TA, TC, TD, TE, TF, TJ, TK, TL, TN, TQ, TR, TS, TSD, TSH, TT, TU, TV, TW, TY, UA, UD, UE, UF, UH, UM, VI, VQ, VS, W4, WH, WI, WR, WW, YL, YT, Z1, Z2, Z3, Z4, Z5, Z6, Z8
   */
  @JsonAdapter(QuantityUnitCodeEnum.Adapter.class)
  public enum QuantityUnitCodeEnum {
    _10("10"),
    
    _11("11"),
    
    _13("13"),
    
    _14("14"),
    
    _15("15"),
    
    _20("20"),
    
    _21("21"),
    
    _22("22"),
    
    _23("23"),
    
    _24("24"),
    
    _25("25"),
    
    _27("27"),
    
    _28("28"),
    
    _33("33"),
    
    _34("34"),
    
    _35("35"),
    
    _37("37"),
    
    _38("38"),
    
    _40("40"),
    
    _41("41"),
    
    _56("56"),
    
    _57("57"),
    
    _58("58"),
    
    _59("59"),
    
    _60("60"),
    
    _61("61"),
    
    _74("74"),
    
    _77("77"),
    
    _80("80"),
    
    _81("81"),
    
    _85("85"),
    
    _87("87"),
    
    _89("89"),
    
    _91("91"),
    
    _1_I("1I"),
    
    _2_A("2A"),
    
    _2_B("2B"),
    
    _2_C("2C"),
    
    _2_G("2G"),
    
    _2_H("2H"),
    
    _2_I("2I"),
    
    _2_J("2J"),
    
    _2_K("2K"),
    
    _2_L("2L"),
    
    _2_M("2M"),
    
    _2_N("2N"),
    
    _2_P("2P"),
    
    _2_Q("2Q"),
    
    _2_R("2R"),
    
    _2_U("2U"),
    
    _2_X("2X"),
    
    _2_Y("2Y"),
    
    _2_Z("2Z"),
    
    _3_B("3B"),
    
    _3_C("3C"),
    
    _4_C("4C"),
    
    _4_G("4G"),
    
    _4_H("4H"),
    
    _4_K("4K"),
    
    _4_L("4L"),
    
    _4_M("4M"),
    
    _4_N("4N"),
    
    _4_O("4O"),
    
    _4_P("4P"),
    
    _4_Q("4Q"),
    
    _4_R("4R"),
    
    _4_T("4T"),
    
    _4_U("4U"),
    
    _4_W("4W"),
    
    _4_X("4X"),
    
    _5_A("5A"),
    
    _5_B("5B"),
    
    _5_E("5E"),
    
    _5_J("5J"),
    
    A10("A10"),
    
    A11("A11"),
    
    A12("A12"),
    
    A13("A13"),
    
    A14("A14"),
    
    A15("A15"),
    
    A16("A16"),
    
    A17("A17"),
    
    A18("A18"),
    
    A19("A19"),
    
    A2("A2"),
    
    A20("A20"),
    
    A21("A21"),
    
    A22("A22"),
    
    A23("A23"),
    
    A24("A24"),
    
    A26("A26"),
    
    A27("A27"),
    
    A28("A28"),
    
    A29("A29"),
    
    A3("A3"),
    
    A30("A30"),
    
    A31("A31"),
    
    A32("A32"),
    
    A33("A33"),
    
    A34("A34"),
    
    A35("A35"),
    
    A36("A36"),
    
    A37("A37"),
    
    A38("A38"),
    
    A39("A39"),
    
    A4("A4"),
    
    A40("A40"),
    
    A41("A41"),
    
    A42("A42"),
    
    A43("A43"),
    
    A44("A44"),
    
    A45("A45"),
    
    A47("A47"),
    
    A48("A48"),
    
    A49("A49"),
    
    A5("A5"),
    
    A53("A53"),
    
    A54("A54"),
    
    A55("A55"),
    
    A56("A56"),
    
    A59("A59"),
    
    A6("A6"),
    
    A68("A68"),
    
    A69("A69"),
    
    A7("A7"),
    
    A70("A70"),
    
    A71("A71"),
    
    A73("A73"),
    
    A74("A74"),
    
    A75("A75"),
    
    A76("A76"),
    
    A8("A8"),
    
    A84("A84"),
    
    A85("A85"),
    
    A86("A86"),
    
    A87("A87"),
    
    A88("A88"),
    
    A89("A89"),
    
    A9("A9"),
    
    A90("A90"),
    
    A91("A91"),
    
    A93("A93"),
    
    A94("A94"),
    
    A95("A95"),
    
    A96("A96"),
    
    A97("A97"),
    
    A98("A98"),
    
    A99("A99"),
    
    AA("AA"),
    
    AB("AB"),
    
    ACR("ACR"),
    
    ACT("ACT"),
    
    AD("AD"),
    
    AE("AE"),
    
    AH("AH"),
    
    AI("AI"),
    
    AK("AK"),
    
    AL("AL"),
    
    AMH("AMH"),
    
    AMP("AMP"),
    
    ANN("ANN"),
    
    APZ("APZ"),
    
    AQ("AQ"),
    
    AS("AS"),
    
    ASM("ASM"),
    
    ASU("ASU"),
    
    ATM("ATM"),
    
    AWG("AWG"),
    
    AY("AY"),
    
    AZ("AZ"),
    
    B1("B1"),
    
    B10("B10"),
    
    B11("B11"),
    
    B12("B12"),
    
    B13("B13"),
    
    B14("B14"),
    
    B15("B15"),
    
    B16("B16"),
    
    B17("B17"),
    
    B18("B18"),
    
    B19("B19"),
    
    B20("B20"),
    
    B21("B21"),
    
    B22("B22"),
    
    B23("B23"),
    
    B24("B24"),
    
    B25("B25"),
    
    B26("B26"),
    
    B27("B27"),
    
    B28("B28"),
    
    B29("B29"),
    
    B3("B3"),
    
    B30("B30"),
    
    B31("B31"),
    
    B32("B32"),
    
    B33("B33"),
    
    B34("B34"),
    
    B35("B35"),
    
    B4("B4"),
    
    B41("B41"),
    
    B42("B42"),
    
    B43("B43"),
    
    B44("B44"),
    
    B45("B45"),
    
    B46("B46"),
    
    B47("B47"),
    
    B48("B48"),
    
    B49("B49"),
    
    B50("B50"),
    
    B52("B52"),
    
    B53("B53"),
    
    B54("B54"),
    
    B55("B55"),
    
    B56("B56"),
    
    B57("B57"),
    
    B58("B58"),
    
    B59("B59"),
    
    B60("B60"),
    
    B61("B61"),
    
    B62("B62"),
    
    B63("B63"),
    
    B64("B64"),
    
    B66("B66"),
    
    B67("B67"),
    
    B68("B68"),
    
    B69("B69"),
    
    B7("B7"),
    
    B70("B70"),
    
    B71("B71"),
    
    B72("B72"),
    
    B73("B73"),
    
    B74("B74"),
    
    B75("B75"),
    
    B76("B76"),
    
    B77("B77"),
    
    B78("B78"),
    
    B79("B79"),
    
    B8("B8"),
    
    B80("B80"),
    
    B81("B81"),
    
    B82("B82"),
    
    B83("B83"),
    
    B84("B84"),
    
    B85("B85"),
    
    B86("B86"),
    
    B87("B87"),
    
    B88("B88"),
    
    B89("B89"),
    
    B90("B90"),
    
    B91("B91"),
    
    B92("B92"),
    
    B93("B93"),
    
    B94("B94"),
    
    B95("B95"),
    
    B96("B96"),
    
    B97("B97"),
    
    B98("B98"),
    
    B99("B99"),
    
    BAR("BAR"),
    
    BB("BB"),
    
    BFT("BFT"),
    
    BHP("BHP"),
    
    BIL("BIL"),
    
    BLD("BLD"),
    
    BLL("BLL"),
    
    BP("BP"),
    
    BPM("BPM"),
    
    BQL("BQL"),
    
    BTU("BTU"),
    
    BUA("BUA"),
    
    BUI("BUI"),
    
    C0("C0"),
    
    C10("C10"),
    
    C11("C11"),
    
    C12("C12"),
    
    C13("C13"),
    
    C14("C14"),
    
    C15("C15"),
    
    C16("C16"),
    
    C17("C17"),
    
    C18("C18"),
    
    C19("C19"),
    
    C20("C20"),
    
    C21("C21"),
    
    C22("C22"),
    
    C23("C23"),
    
    C24("C24"),
    
    C25("C25"),
    
    C26("C26"),
    
    C27("C27"),
    
    C28("C28"),
    
    C29("C29"),
    
    C3("C3"),
    
    C30("C30"),
    
    C31("C31"),
    
    C32("C32"),
    
    C33("C33"),
    
    C34("C34"),
    
    C35("C35"),
    
    C36("C36"),
    
    C37("C37"),
    
    C38("C38"),
    
    C39("C39"),
    
    C40("C40"),
    
    C41("C41"),
    
    C42("C42"),
    
    C43("C43"),
    
    C44("C44"),
    
    C45("C45"),
    
    C46("C46"),
    
    C47("C47"),
    
    C48("C48"),
    
    C49("C49"),
    
    C50("C50"),
    
    C51("C51"),
    
    C52("C52"),
    
    C53("C53"),
    
    C54("C54"),
    
    C55("C55"),
    
    C56("C56"),
    
    C57("C57"),
    
    C58("C58"),
    
    C59("C59"),
    
    C60("C60"),
    
    C61("C61"),
    
    C62("C62"),
    
    C63("C63"),
    
    C64("C64"),
    
    C65("C65"),
    
    C66("C66"),
    
    C67("C67"),
    
    C68("C68"),
    
    C69("C69"),
    
    C7("C7"),
    
    C70("C70"),
    
    C71("C71"),
    
    C72("C72"),
    
    C73("C73"),
    
    C74("C74"),
    
    C75("C75"),
    
    C76("C76"),
    
    C78("C78"),
    
    C79("C79"),
    
    C8("C8"),
    
    C80("C80"),
    
    C81("C81"),
    
    C82("C82"),
    
    C83("C83"),
    
    C84("C84"),
    
    C85("C85"),
    
    C86("C86"),
    
    C87("C87"),
    
    C88("C88"),
    
    C89("C89"),
    
    C9("C9"),
    
    C90("C90"),
    
    C91("C91"),
    
    C92("C92"),
    
    C93("C93"),
    
    C94("C94"),
    
    C95("C95"),
    
    C96("C96"),
    
    C97("C97"),
    
    C99("C99"),
    
    CCT("CCT"),
    
    CDL("CDL"),
    
    CEL("CEL"),
    
    CEN("CEN"),
    
    CG("CG"),
    
    CGM("CGM"),
    
    CKG("CKG"),
    
    CLF("CLF"),
    
    CLT("CLT"),
    
    CMK("CMK"),
    
    CMQ("CMQ"),
    
    CMT("CMT"),
    
    CNP("CNP"),
    
    CNT("CNT"),
    
    COU("COU"),
    
    CTG("CTG"),
    
    CTM("CTM"),
    
    CTN("CTN"),
    
    CUR("CUR"),
    
    CWA("CWA"),
    
    CWI("CWI"),
    
    D03("D03"),
    
    D04("D04"),
    
    D1("D1"),
    
    D10("D10"),
    
    D11("D11"),
    
    D12("D12"),
    
    D13("D13"),
    
    D15("D15"),
    
    D16("D16"),
    
    D17("D17"),
    
    D18("D18"),
    
    D19("D19"),
    
    D2("D2"),
    
    D20("D20"),
    
    D21("D21"),
    
    D22("D22"),
    
    D23("D23"),
    
    D24("D24"),
    
    D25("D25"),
    
    D26("D26"),
    
    D27("D27"),
    
    D29("D29"),
    
    D30("D30"),
    
    D31("D31"),
    
    D32("D32"),
    
    D33("D33"),
    
    D34("D34"),
    
    D36("D36"),
    
    D41("D41"),
    
    D42("D42"),
    
    D43("D43"),
    
    D44("D44"),
    
    D45("D45"),
    
    D46("D46"),
    
    D47("D47"),
    
    D48("D48"),
    
    D49("D49"),
    
    D5("D5"),
    
    D50("D50"),
    
    D51("D51"),
    
    D52("D52"),
    
    D53("D53"),
    
    D54("D54"),
    
    D55("D55"),
    
    D56("D56"),
    
    D57("D57"),
    
    D58("D58"),
    
    D59("D59"),
    
    D6("D6"),
    
    D60("D60"),
    
    D61("D61"),
    
    D62("D62"),
    
    D63("D63"),
    
    D65("D65"),
    
    D68("D68"),
    
    D69("D69"),
    
    D73("D73"),
    
    D74("D74"),
    
    D77("D77"),
    
    D78("D78"),
    
    D80("D80"),
    
    D81("D81"),
    
    D82("D82"),
    
    D83("D83"),
    
    D85("D85"),
    
    D86("D86"),
    
    D87("D87"),
    
    D88("D88"),
    
    D89("D89"),
    
    D91("D91"),
    
    D93("D93"),
    
    D94("D94"),
    
    D95("D95"),
    
    DAA("DAA"),
    
    DAD("DAD"),
    
    DAY("DAY"),
    
    DB("DB"),
    
    DD("DD"),
    
    DEC("DEC"),
    
    DG("DG"),
    
    DJ("DJ"),
    
    DLT("DLT"),
    
    DMA("DMA"),
    
    DMK("DMK"),
    
    DMO("DMO"),
    
    DMQ("DMQ"),
    
    DMT("DMT"),
    
    DN("DN"),
    
    DPC("DPC"),
    
    DPR("DPR"),
    
    DPT("DPT"),
    
    DRA("DRA"),
    
    DRI("DRI"),
    
    DRL("DRL"),
    
    DT("DT"),
    
    DTN("DTN"),
    
    DWT("DWT"),
    
    DZN("DZN"),
    
    DZP("DZP"),
    
    E01("E01"),
    
    E07("E07"),
    
    E08("E08"),
    
    E09("E09"),
    
    E10("E10"),
    
    E12("E12"),
    
    E14("E14"),
    
    E15("E15"),
    
    E16("E16"),
    
    E17("E17"),
    
    E18("E18"),
    
    E19("E19"),
    
    E20("E20"),
    
    E21("E21"),
    
    E22("E22"),
    
    E23("E23"),
    
    E25("E25"),
    
    E27("E27"),
    
    E28("E28"),
    
    E30("E30"),
    
    E31("E31"),
    
    E32("E32"),
    
    E33("E33"),
    
    E34("E34"),
    
    E35("E35"),
    
    E36("E36"),
    
    E37("E37"),
    
    E38("E38"),
    
    E39("E39"),
    
    E4("E4"),
    
    E40("E40"),
    
    E41("E41"),
    
    E42("E42"),
    
    E43("E43"),
    
    E44("E44"),
    
    E45("E45"),
    
    E46("E46"),
    
    E47("E47"),
    
    E48("E48"),
    
    E49("E49"),
    
    E50("E50"),
    
    E51("E51"),
    
    E52("E52"),
    
    E53("E53"),
    
    E54("E54"),
    
    E55("E55"),
    
    E56("E56"),
    
    E57("E57"),
    
    E58("E58"),
    
    E59("E59"),
    
    E60("E60"),
    
    E61("E61"),
    
    E62("E62"),
    
    E63("E63"),
    
    E64("E64"),
    
    E65("E65"),
    
    E66("E66"),
    
    E67("E67"),
    
    E68("E68"),
    
    E69("E69"),
    
    E70("E70"),
    
    E71("E71"),
    
    E72("E72"),
    
    E73("E73"),
    
    E74("E74"),
    
    E75("E75"),
    
    E76("E76"),
    
    E77("E77"),
    
    E78("E78"),
    
    E79("E79"),
    
    E80("E80"),
    
    E81("E81"),
    
    E82("E82"),
    
    E83("E83"),
    
    E84("E84"),
    
    E85("E85"),
    
    E86("E86"),
    
    E87("E87"),
    
    E88("E88"),
    
    E89("E89"),
    
    E90("E90"),
    
    E91("E91"),
    
    E92("E92"),
    
    E93("E93"),
    
    E94("E94"),
    
    E95("E95"),
    
    E96("E96"),
    
    E97("E97"),
    
    E98("E98"),
    
    E99("E99"),
    
    EA("EA"),
    
    EB("EB"),
    
    EQ("EQ"),
    
    F01("F01"),
    
    F02("F02"),
    
    F03("F03"),
    
    F04("F04"),
    
    F05("F05"),
    
    F06("F06"),
    
    F07("F07"),
    
    F08("F08"),
    
    F10("F10"),
    
    F11("F11"),
    
    F12("F12"),
    
    F13("F13"),
    
    F14("F14"),
    
    F15("F15"),
    
    F16("F16"),
    
    F17("F17"),
    
    F18("F18"),
    
    F19("F19"),
    
    F20("F20"),
    
    F21("F21"),
    
    F22("F22"),
    
    F23("F23"),
    
    F24("F24"),
    
    F25("F25"),
    
    F26("F26"),
    
    F27("F27"),
    
    F28("F28"),
    
    F29("F29"),
    
    F30("F30"),
    
    F31("F31"),
    
    F32("F32"),
    
    F33("F33"),
    
    F34("F34"),
    
    F35("F35"),
    
    F36("F36"),
    
    F37("F37"),
    
    F38("F38"),
    
    F39("F39"),
    
    F40("F40"),
    
    F41("F41"),
    
    F42("F42"),
    
    F43("F43"),
    
    F44("F44"),
    
    F45("F45"),
    
    F46("F46"),
    
    F47("F47"),
    
    F48("F48"),
    
    F49("F49"),
    
    F50("F50"),
    
    F51("F51"),
    
    F52("F52"),
    
    F53("F53"),
    
    F54("F54"),
    
    F55("F55"),
    
    F56("F56"),
    
    F57("F57"),
    
    F58("F58"),
    
    F59("F59"),
    
    F60("F60"),
    
    F61("F61"),
    
    F62("F62"),
    
    F63("F63"),
    
    F64("F64"),
    
    F65("F65"),
    
    F66("F66"),
    
    F67("F67"),
    
    F68("F68"),
    
    F69("F69"),
    
    F70("F70"),
    
    F71("F71"),
    
    F72("F72"),
    
    F73("F73"),
    
    F74("F74"),
    
    F75("F75"),
    
    F76("F76"),
    
    F77("F77"),
    
    F78("F78"),
    
    F79("F79"),
    
    F80("F80"),
    
    F81("F81"),
    
    F82("F82"),
    
    F83("F83"),
    
    F84("F84"),
    
    F85("F85"),
    
    F86("F86"),
    
    F87("F87"),
    
    F88("F88"),
    
    F89("F89"),
    
    F90("F90"),
    
    F91("F91"),
    
    F92("F92"),
    
    F93("F93"),
    
    F94("F94"),
    
    F95("F95"),
    
    F96("F96"),
    
    F97("F97"),
    
    F98("F98"),
    
    F99("F99"),
    
    FAH("FAH"),
    
    FAR("FAR"),
    
    FBM("FBM"),
    
    FC("FC"),
    
    FF("FF"),
    
    FH("FH"),
    
    FIT("FIT"),
    
    FL("FL"),
    
    FOT("FOT"),
    
    FP("FP"),
    
    FR("FR"),
    
    FS("FS"),
    
    FTK("FTK"),
    
    FTQ("FTQ"),
    
    G01("G01"),
    
    G04("G04"),
    
    G05("G05"),
    
    G06("G06"),
    
    G08("G08"),
    
    G09("G09"),
    
    G10("G10"),
    
    G11("G11"),
    
    G12("G12"),
    
    G13("G13"),
    
    G14("G14"),
    
    G15("G15"),
    
    G16("G16"),
    
    G17("G17"),
    
    G18("G18"),
    
    G19("G19"),
    
    G2("G2"),
    
    G20("G20"),
    
    G21("G21"),
    
    G23("G23"),
    
    G24("G24"),
    
    G25("G25"),
    
    G26("G26"),
    
    G27("G27"),
    
    G28("G28"),
    
    G29("G29"),
    
    G3("G3"),
    
    G30("G30"),
    
    G31("G31"),
    
    G32("G32"),
    
    G33("G33"),
    
    G34("G34"),
    
    G35("G35"),
    
    G36("G36"),
    
    G37("G37"),
    
    G38("G38"),
    
    G39("G39"),
    
    G40("G40"),
    
    G41("G41"),
    
    G42("G42"),
    
    G43("G43"),
    
    G44("G44"),
    
    G45("G45"),
    
    G46("G46"),
    
    G47("G47"),
    
    G48("G48"),
    
    G49("G49"),
    
    G50("G50"),
    
    G51("G51"),
    
    G52("G52"),
    
    G53("G53"),
    
    G54("G54"),
    
    G55("G55"),
    
    G56("G56"),
    
    G57("G57"),
    
    G58("G58"),
    
    G59("G59"),
    
    G60("G60"),
    
    G61("G61"),
    
    G62("G62"),
    
    G63("G63"),
    
    G64("G64"),
    
    G65("G65"),
    
    G66("G66"),
    
    G67("G67"),
    
    G68("G68"),
    
    G69("G69"),
    
    G70("G70"),
    
    G71("G71"),
    
    G72("G72"),
    
    G73("G73"),
    
    G74("G74"),
    
    G75("G75"),
    
    G76("G76"),
    
    G77("G77"),
    
    G78("G78"),
    
    G79("G79"),
    
    G80("G80"),
    
    G81("G81"),
    
    G82("G82"),
    
    G83("G83"),
    
    G84("G84"),
    
    G85("G85"),
    
    G86("G86"),
    
    G87("G87"),
    
    G88("G88"),
    
    G89("G89"),
    
    G90("G90"),
    
    G91("G91"),
    
    G92("G92"),
    
    G93("G93"),
    
    G94("G94"),
    
    G95("G95"),
    
    G96("G96"),
    
    G97("G97"),
    
    G98("G98"),
    
    G99("G99"),
    
    GB("GB"),
    
    GBQ("GBQ"),
    
    GDW("GDW"),
    
    GE("GE"),
    
    GF("GF"),
    
    GFI("GFI"),
    
    GGR("GGR"),
    
    GIA("GIA"),
    
    GIC("GIC"),
    
    GII("GII"),
    
    GIP("GIP"),
    
    GJ("GJ"),
    
    GL("GL"),
    
    GLD("GLD"),
    
    GLI("GLI"),
    
    GLL("GLL"),
    
    GM("GM"),
    
    GO("GO"),
    
    GP("GP"),
    
    GQ("GQ"),
    
    GRM("GRM"),
    
    GRN("GRN"),
    
    GRO("GRO"),
    
    GV("GV"),
    
    GWH("GWH"),
    
    H03("H03"),
    
    H04("H04"),
    
    H05("H05"),
    
    H06("H06"),
    
    H07("H07"),
    
    H08("H08"),
    
    H09("H09"),
    
    H10("H10"),
    
    H11("H11"),
    
    H12("H12"),
    
    H13("H13"),
    
    H14("H14"),
    
    H15("H15"),
    
    H16("H16"),
    
    H18("H18"),
    
    H19("H19"),
    
    H20("H20"),
    
    H21("H21"),
    
    H22("H22"),
    
    H23("H23"),
    
    H24("H24"),
    
    H25("H25"),
    
    H26("H26"),
    
    H27("H27"),
    
    H28("H28"),
    
    H29("H29"),
    
    H30("H30"),
    
    H31("H31"),
    
    H32("H32"),
    
    H33("H33"),
    
    H34("H34"),
    
    H35("H35"),
    
    H36("H36"),
    
    H37("H37"),
    
    H38("H38"),
    
    H39("H39"),
    
    H40("H40"),
    
    H41("H41"),
    
    H42("H42"),
    
    H43("H43"),
    
    H44("H44"),
    
    H45("H45"),
    
    H46("H46"),
    
    H47("H47"),
    
    H48("H48"),
    
    H49("H49"),
    
    H50("H50"),
    
    H51("H51"),
    
    H52("H52"),
    
    H53("H53"),
    
    H54("H54"),
    
    H55("H55"),
    
    H56("H56"),
    
    H57("H57"),
    
    H58("H58"),
    
    H59("H59"),
    
    H60("H60"),
    
    H61("H61"),
    
    H62("H62"),
    
    H63("H63"),
    
    H64("H64"),
    
    H65("H65"),
    
    H66("H66"),
    
    H67("H67"),
    
    H68("H68"),
    
    H69("H69"),
    
    H70("H70"),
    
    H71("H71"),
    
    H72("H72"),
    
    H73("H73"),
    
    H74("H74"),
    
    H75("H75"),
    
    H76("H76"),
    
    H77("H77"),
    
    H79("H79"),
    
    H80("H80"),
    
    H81("H81"),
    
    H82("H82"),
    
    H83("H83"),
    
    H84("H84"),
    
    H85("H85"),
    
    H87("H87"),
    
    H88("H88"),
    
    H89("H89"),
    
    H90("H90"),
    
    H91("H91"),
    
    H92("H92"),
    
    H93("H93"),
    
    H94("H94"),
    
    H95("H95"),
    
    H96("H96"),
    
    H98("H98"),
    
    H99("H99"),
    
    HA("HA"),
    
    HBA("HBA"),
    
    HBX("HBX"),
    
    HC("HC"),
    
    HDW("HDW"),
    
    HEA("HEA"),
    
    HGM("HGM"),
    
    HH("HH"),
    
    HIU("HIU"),
    
    HKM("HKM"),
    
    HLT("HLT"),
    
    HM("HM"),
    
    HMQ("HMQ"),
    
    HMT("HMT"),
    
    HPA("HPA"),
    
    HTZ("HTZ"),
    
    HUR("HUR"),
    
    IA("IA"),
    
    IE("IE"),
    
    INH("INH"),
    
    INK("INK"),
    
    INQ("INQ"),
    
    ISD("ISD"),
    
    IU("IU"),
    
    IV("IV"),
    
    J10("J10"),
    
    J12("J12"),
    
    J13("J13"),
    
    J14("J14"),
    
    J15("J15"),
    
    J16("J16"),
    
    J17("J17"),
    
    J18("J18"),
    
    J19("J19"),
    
    J2("J2"),
    
    J20("J20"),
    
    J21("J21"),
    
    J22("J22"),
    
    J23("J23"),
    
    J24("J24"),
    
    J25("J25"),
    
    J26("J26"),
    
    J27("J27"),
    
    J28("J28"),
    
    J29("J29"),
    
    J30("J30"),
    
    J31("J31"),
    
    J32("J32"),
    
    J33("J33"),
    
    J34("J34"),
    
    J35("J35"),
    
    J36("J36"),
    
    J38("J38"),
    
    J39("J39"),
    
    J40("J40"),
    
    J41("J41"),
    
    J42("J42"),
    
    J43("J43"),
    
    J44("J44"),
    
    J45("J45"),
    
    J46("J46"),
    
    J47("J47"),
    
    J48("J48"),
    
    J49("J49"),
    
    J50("J50"),
    
    J51("J51"),
    
    J52("J52"),
    
    J53("J53"),
    
    J54("J54"),
    
    J55("J55"),
    
    J56("J56"),
    
    J57("J57"),
    
    J58("J58"),
    
    J59("J59"),
    
    J60("J60"),
    
    J61("J61"),
    
    J62("J62"),
    
    J63("J63"),
    
    J64("J64"),
    
    J65("J65"),
    
    J66("J66"),
    
    J67("J67"),
    
    J68("J68"),
    
    J69("J69"),
    
    J70("J70"),
    
    J71("J71"),
    
    J72("J72"),
    
    J73("J73"),
    
    J74("J74"),
    
    J75("J75"),
    
    J76("J76"),
    
    J78("J78"),
    
    J79("J79"),
    
    J81("J81"),
    
    J82("J82"),
    
    J83("J83"),
    
    J84("J84"),
    
    J85("J85"),
    
    J87("J87"),
    
    J90("J90"),
    
    J91("J91"),
    
    J92("J92"),
    
    J93("J93"),
    
    J95("J95"),
    
    J96("J96"),
    
    J97("J97"),
    
    J98("J98"),
    
    J99("J99"),
    
    JE("JE"),
    
    JK("JK"),
    
    JM("JM"),
    
    JNT("JNT"),
    
    JOU("JOU"),
    
    JPS("JPS"),
    
    JWL("JWL"),
    
    K1("K1"),
    
    K10("K10"),
    
    K11("K11"),
    
    K12("K12"),
    
    K13("K13"),
    
    K14("K14"),
    
    K15("K15"),
    
    K16("K16"),
    
    K17("K17"),
    
    K18("K18"),
    
    K19("K19"),
    
    K2("K2"),
    
    K20("K20"),
    
    K21("K21"),
    
    K22("K22"),
    
    K23("K23"),
    
    K26("K26"),
    
    K27("K27"),
    
    K28("K28"),
    
    K3("K3"),
    
    K30("K30"),
    
    K31("K31"),
    
    K32("K32"),
    
    K33("K33"),
    
    K34("K34"),
    
    K35("K35"),
    
    K36("K36"),
    
    K37("K37"),
    
    K38("K38"),
    
    K39("K39"),
    
    K40("K40"),
    
    K41("K41"),
    
    K42("K42"),
    
    K43("K43"),
    
    K45("K45"),
    
    K46("K46"),
    
    K47("K47"),
    
    K48("K48"),
    
    K49("K49"),
    
    K50("K50"),
    
    K51("K51"),
    
    K52("K52"),
    
    K53("K53"),
    
    K54("K54"),
    
    K55("K55"),
    
    K58("K58"),
    
    K59("K59"),
    
    K6("K6"),
    
    K60("K60"),
    
    K61("K61"),
    
    K62("K62"),
    
    K63("K63"),
    
    K64("K64"),
    
    K65("K65"),
    
    K66("K66"),
    
    K67("K67"),
    
    K68("K68"),
    
    K69("K69"),
    
    K70("K70"),
    
    K71("K71"),
    
    K73("K73"),
    
    K74("K74"),
    
    K75("K75"),
    
    K76("K76"),
    
    K77("K77"),
    
    K78("K78"),
    
    K79("K79"),
    
    K80("K80"),
    
    K81("K81"),
    
    K82("K82"),
    
    K83("K83"),
    
    K84("K84"),
    
    K85("K85"),
    
    K86("K86"),
    
    K87("K87"),
    
    K88("K88"),
    
    K89("K89"),
    
    K90("K90"),
    
    K91("K91"),
    
    K92("K92"),
    
    K93("K93"),
    
    K94("K94"),
    
    K95("K95"),
    
    K96("K96"),
    
    K97("K97"),
    
    K98("K98"),
    
    K99("K99"),
    
    KA("KA"),
    
    KAT("KAT"),
    
    KB("KB"),
    
    KBA("KBA"),
    
    KCC("KCC"),
    
    KDW("KDW"),
    
    KEL("KEL"),
    
    KGM("KGM"),
    
    KGS("KGS"),
    
    KHY("KHY"),
    
    KHZ("KHZ"),
    
    KI("KI"),
    
    KIC("KIC"),
    
    KIP("KIP"),
    
    KJ("KJ"),
    
    KJO("KJO"),
    
    KL("KL"),
    
    KLK("KLK"),
    
    KLX("KLX"),
    
    KMA("KMA"),
    
    KMH("KMH"),
    
    KMK("KMK"),
    
    KMQ("KMQ"),
    
    KMT("KMT"),
    
    KNI("KNI"),
    
    KNM("KNM"),
    
    KNS("KNS"),
    
    KNT("KNT"),
    
    KO("KO"),
    
    KPA("KPA"),
    
    KPH("KPH"),
    
    KPO("KPO"),
    
    KPP("KPP"),
    
    KR("KR"),
    
    KSD("KSD"),
    
    KSH("KSH"),
    
    KT("KT"),
    
    KTN("KTN"),
    
    KUR("KUR"),
    
    KVA("KVA"),
    
    KVR("KVR"),
    
    KVT("KVT"),
    
    KW("KW"),
    
    KWH("KWH"),
    
    KWO("KWO"),
    
    KWT("KWT"),
    
    KX("KX"),
    
    L10("L10"),
    
    L11("L11"),
    
    L12("L12"),
    
    L13("L13"),
    
    L14("L14"),
    
    L15("L15"),
    
    L16("L16"),
    
    L17("L17"),
    
    L18("L18"),
    
    L19("L19"),
    
    L2("L2"),
    
    L20("L20"),
    
    L21("L21"),
    
    L23("L23"),
    
    L24("L24"),
    
    L25("L25"),
    
    L26("L26"),
    
    L27("L27"),
    
    L28("L28"),
    
    L29("L29"),
    
    L30("L30"),
    
    L31("L31"),
    
    L32("L32"),
    
    L33("L33"),
    
    L34("L34"),
    
    L35("L35"),
    
    L36("L36"),
    
    L37("L37"),
    
    L38("L38"),
    
    L39("L39"),
    
    L40("L40"),
    
    L41("L41"),
    
    L42("L42"),
    
    L43("L43"),
    
    L44("L44"),
    
    L45("L45"),
    
    L46("L46"),
    
    L47("L47"),
    
    L48("L48"),
    
    L49("L49"),
    
    L50("L50"),
    
    L51("L51"),
    
    L52("L52"),
    
    L53("L53"),
    
    L54("L54"),
    
    L55("L55"),
    
    L56("L56"),
    
    L57("L57"),
    
    L58("L58"),
    
    L59("L59"),
    
    L60("L60"),
    
    L63("L63"),
    
    L64("L64"),
    
    L65("L65"),
    
    L66("L66"),
    
    L67("L67"),
    
    L68("L68"),
    
    L69("L69"),
    
    L70("L70"),
    
    L71("L71"),
    
    L72("L72"),
    
    L73("L73"),
    
    L74("L74"),
    
    L75("L75"),
    
    L76("L76"),
    
    L77("L77"),
    
    L78("L78"),
    
    L79("L79"),
    
    L80("L80"),
    
    L81("L81"),
    
    L82("L82"),
    
    L83("L83"),
    
    L84("L84"),
    
    L85("L85"),
    
    L86("L86"),
    
    L87("L87"),
    
    L88("L88"),
    
    L89("L89"),
    
    L90("L90"),
    
    L91("L91"),
    
    L92("L92"),
    
    L93("L93"),
    
    L94("L94"),
    
    L95("L95"),
    
    L96("L96"),
    
    L98("L98"),
    
    L99("L99"),
    
    LA("LA"),
    
    LAC("LAC"),
    
    LBR("LBR"),
    
    LBT("LBT"),
    
    LD("LD"),
    
    LEF("LEF"),
    
    LF("LF"),
    
    LH("LH"),
    
    LK("LK"),
    
    LM("LM"),
    
    LN("LN"),
    
    LO("LO"),
    
    LP("LP"),
    
    LPA("LPA"),
    
    LR("LR"),
    
    LS("LS"),
    
    LTN("LTN"),
    
    LTR("LTR"),
    
    LUB("LUB"),
    
    LUM("LUM"),
    
    LUX("LUX"),
    
    LY("LY"),
    
    M1("M1"),
    
    M10("M10"),
    
    M11("M11"),
    
    M12("M12"),
    
    M13("M13"),
    
    M14("M14"),
    
    M15("M15"),
    
    M16("M16"),
    
    M17("M17"),
    
    M18("M18"),
    
    M19("M19"),
    
    M20("M20"),
    
    M21("M21"),
    
    M22("M22"),
    
    M23("M23"),
    
    M24("M24"),
    
    M25("M25"),
    
    M26("M26"),
    
    M27("M27"),
    
    M29("M29"),
    
    M30("M30"),
    
    M31("M31"),
    
    M32("M32"),
    
    M33("M33"),
    
    M34("M34"),
    
    M35("M35"),
    
    M36("M36"),
    
    M37("M37"),
    
    M38("M38"),
    
    M39("M39"),
    
    M4("M4"),
    
    M40("M40"),
    
    M41("M41"),
    
    M42("M42"),
    
    M43("M43"),
    
    M44("M44"),
    
    M45("M45"),
    
    M46("M46"),
    
    M47("M47"),
    
    M48("M48"),
    
    M49("M49"),
    
    M5("M5"),
    
    M50("M50"),
    
    M51("M51"),
    
    M52("M52"),
    
    M53("M53"),
    
    M55("M55"),
    
    M56("M56"),
    
    M57("M57"),
    
    M58("M58"),
    
    M59("M59"),
    
    M60("M60"),
    
    M61("M61"),
    
    M62("M62"),
    
    M63("M63"),
    
    M64("M64"),
    
    M65("M65"),
    
    M66("M66"),
    
    M67("M67"),
    
    M68("M68"),
    
    M69("M69"),
    
    M7("M7"),
    
    M70("M70"),
    
    M71("M71"),
    
    M72("M72"),
    
    M73("M73"),
    
    M74("M74"),
    
    M75("M75"),
    
    M76("M76"),
    
    M77("M77"),
    
    M78("M78"),
    
    M79("M79"),
    
    M80("M80"),
    
    M81("M81"),
    
    M82("M82"),
    
    M83("M83"),
    
    M84("M84"),
    
    M85("M85"),
    
    M86("M86"),
    
    M87("M87"),
    
    M88("M88"),
    
    M89("M89"),
    
    M9("M9"),
    
    M90("M90"),
    
    M91("M91"),
    
    M92("M92"),
    
    M93("M93"),
    
    M94("M94"),
    
    M95("M95"),
    
    M96("M96"),
    
    M97("M97"),
    
    M98("M98"),
    
    M99("M99"),
    
    MAH("MAH"),
    
    MAL("MAL"),
    
    MAM("MAM"),
    
    MAR("MAR"),
    
    MAW("MAW"),
    
    MBE("MBE"),
    
    MBF("MBF"),
    
    MBR("MBR"),
    
    MC("MC"),
    
    MCU("MCU"),
    
    MD("MD"),
    
    MGM("MGM"),
    
    MHZ("MHZ"),
    
    MIK("MIK"),
    
    MIL("MIL"),
    
    MIN("MIN"),
    
    MIO("MIO"),
    
    MIU("MIU"),
    
    MLD("MLD"),
    
    MLT("MLT"),
    
    MMK("MMK"),
    
    MMQ("MMQ"),
    
    MMT("MMT"),
    
    MND("MND"),
    
    MON("MON"),
    
    MPA("MPA"),
    
    MQH("MQH"),
    
    MQS("MQS"),
    
    MSK("MSK"),
    
    MTK("MTK"),
    
    MTQ("MTQ"),
    
    MTR("MTR"),
    
    MTS("MTS"),
    
    MVA("MVA"),
    
    MWH("MWH"),
    
    N1("N1"),
    
    N10("N10"),
    
    N11("N11"),
    
    N12("N12"),
    
    N13("N13"),
    
    N14("N14"),
    
    N15("N15"),
    
    N16("N16"),
    
    N17("N17"),
    
    N18("N18"),
    
    N19("N19"),
    
    N20("N20"),
    
    N21("N21"),
    
    N22("N22"),
    
    N23("N23"),
    
    N24("N24"),
    
    N25("N25"),
    
    N26("N26"),
    
    N27("N27"),
    
    N28("N28"),
    
    N29("N29"),
    
    N3("N3"),
    
    N30("N30"),
    
    N31("N31"),
    
    N32("N32"),
    
    N33("N33"),
    
    N34("N34"),
    
    N35("N35"),
    
    N36("N36"),
    
    N37("N37"),
    
    N38("N38"),
    
    N39("N39"),
    
    N40("N40"),
    
    N41("N41"),
    
    N42("N42"),
    
    N43("N43"),
    
    N44("N44"),
    
    N45("N45"),
    
    N46("N46"),
    
    N47("N47"),
    
    N48("N48"),
    
    N49("N49"),
    
    N50("N50"),
    
    N51("N51"),
    
    N52("N52"),
    
    N53("N53"),
    
    N54("N54"),
    
    N55("N55"),
    
    N56("N56"),
    
    N57("N57"),
    
    N58("N58"),
    
    N59("N59"),
    
    N60("N60"),
    
    N61("N61"),
    
    N62("N62"),
    
    N63("N63"),
    
    N64("N64"),
    
    N65("N65"),
    
    N66("N66"),
    
    N67("N67"),
    
    N68("N68"),
    
    N69("N69"),
    
    N70("N70"),
    
    N71("N71"),
    
    N72("N72"),
    
    N73("N73"),
    
    N74("N74"),
    
    N75("N75"),
    
    N76("N76"),
    
    N77("N77"),
    
    N78("N78"),
    
    N79("N79"),
    
    N80("N80"),
    
    N81("N81"),
    
    N82("N82"),
    
    N83("N83"),
    
    N84("N84"),
    
    N85("N85"),
    
    N86("N86"),
    
    N87("N87"),
    
    N88("N88"),
    
    N89("N89"),
    
    N90("N90"),
    
    N91("N91"),
    
    N92("N92"),
    
    N93("N93"),
    
    N94("N94"),
    
    N95("N95"),
    
    N96("N96"),
    
    N97("N97"),
    
    N98("N98"),
    
    N99("N99"),
    
    NA("NA"),
    
    NAR("NAR"),
    
    NCL("NCL"),
    
    NEW("NEW"),
    
    NF("NF"),
    
    NIL("NIL"),
    
    NIU("NIU"),
    
    NL("NL"),
    
    NM3("NM3"),
    
    NMI("NMI"),
    
    NMP("NMP"),
    
    NPT("NPT"),
    
    NT("NT"),
    
    NU("NU"),
    
    NX("NX"),
    
    OA("OA"),
    
    ODE("ODE"),
    
    OHM("OHM"),
    
    TRUE("true"),
    
    ONZ("ONZ"),
    
    OPM("OPM"),
    
    OT("OT"),
    
    OZA("OZA"),
    
    OZI("OZI"),
    
    P1("P1"),
    
    P10("P10"),
    
    P11("P11"),
    
    P12("P12"),
    
    P13("P13"),
    
    P14("P14"),
    
    P15("P15"),
    
    P16("P16"),
    
    P17("P17"),
    
    P18("P18"),
    
    P19("P19"),
    
    P2("P2"),
    
    P20("P20"),
    
    P21("P21"),
    
    P22("P22"),
    
    P23("P23"),
    
    P24("P24"),
    
    P25("P25"),
    
    P26("P26"),
    
    P27("P27"),
    
    P28("P28"),
    
    P29("P29"),
    
    P30("P30"),
    
    P31("P31"),
    
    P32("P32"),
    
    P33("P33"),
    
    P34("P34"),
    
    P35("P35"),
    
    P36("P36"),
    
    P37("P37"),
    
    P38("P38"),
    
    P39("P39"),
    
    P40("P40"),
    
    P41("P41"),
    
    P42("P42"),
    
    P43("P43"),
    
    P44("P44"),
    
    P45("P45"),
    
    P46("P46"),
    
    P47("P47"),
    
    P48("P48"),
    
    P49("P49"),
    
    P5("P5"),
    
    P50("P50"),
    
    P51("P51"),
    
    P52("P52"),
    
    P53("P53"),
    
    P54("P54"),
    
    P55("P55"),
    
    P56("P56"),
    
    P57("P57"),
    
    P58("P58"),
    
    P59("P59"),
    
    P60("P60"),
    
    P61("P61"),
    
    P62("P62"),
    
    P63("P63"),
    
    P64("P64"),
    
    P65("P65"),
    
    P66("P66"),
    
    P67("P67"),
    
    P68("P68"),
    
    P69("P69"),
    
    P70("P70"),
    
    P71("P71"),
    
    P72("P72"),
    
    P73("P73"),
    
    P74("P74"),
    
    P75("P75"),
    
    P76("P76"),
    
    P77("P77"),
    
    P78("P78"),
    
    P79("P79"),
    
    P80("P80"),
    
    P81("P81"),
    
    P82("P82"),
    
    P83("P83"),
    
    P84("P84"),
    
    P85("P85"),
    
    P86("P86"),
    
    P87("P87"),
    
    P88("P88"),
    
    P89("P89"),
    
    P90("P90"),
    
    P91("P91"),
    
    P92("P92"),
    
    P93("P93"),
    
    P94("P94"),
    
    P95("P95"),
    
    P96("P96"),
    
    P97("P97"),
    
    P98("P98"),
    
    P99("P99"),
    
    PAL("PAL"),
    
    PD("PD"),
    
    PFL("PFL"),
    
    PGL("PGL"),
    
    PI("PI"),
    
    PLA("PLA"),
    
    PO("PO"),
    
    PQ("PQ"),
    
    PR("PR"),
    
    PS("PS"),
    
    PTD("PTD"),
    
    PTI("PTI"),
    
    PTL("PTL"),
    
    PTN("PTN"),
    
    Q10("Q10"),
    
    Q11("Q11"),
    
    Q12("Q12"),
    
    Q13("Q13"),
    
    Q14("Q14"),
    
    Q15("Q15"),
    
    Q16("Q16"),
    
    Q17("Q17"),
    
    Q18("Q18"),
    
    Q19("Q19"),
    
    Q20("Q20"),
    
    Q21("Q21"),
    
    Q22("Q22"),
    
    Q23("Q23"),
    
    Q24("Q24"),
    
    Q25("Q25"),
    
    Q26("Q26"),
    
    Q27("Q27"),
    
    Q28("Q28"),
    
    Q29("Q29"),
    
    Q30("Q30"),
    
    Q31("Q31"),
    
    Q32("Q32"),
    
    Q33("Q33"),
    
    Q34("Q34"),
    
    Q35("Q35"),
    
    Q36("Q36"),
    
    Q37("Q37"),
    
    Q38("Q38"),
    
    Q39("Q39"),
    
    Q40("Q40"),
    
    Q3("Q3"),
    
    QA("QA"),
    
    QAN("QAN"),
    
    QB("QB"),
    
    QR("QR"),
    
    QTD("QTD"),
    
    QTI("QTI"),
    
    QTL("QTL"),
    
    QTR("QTR"),
    
    R1("R1"),
    
    R9("R9"),
    
    RH("RH"),
    
    RM("RM"),
    
    ROM("ROM"),
    
    RP("RP"),
    
    RPM("RPM"),
    
    RPS("RPS"),
    
    RT("RT"),
    
    S3("S3"),
    
    S4("S4"),
    
    SAN("SAN"),
    
    SCO("SCO"),
    
    SCR("SCR"),
    
    SEC("SEC"),
    
    SET("SET"),
    
    SG("SG"),
    
    SIE("SIE"),
    
    SM3("SM3"),
    
    SMI("SMI"),
    
    SQ("SQ"),
    
    SQR("SQR"),
    
    SR("SR"),
    
    STC("STC"),
    
    STI("STI"),
    
    STK("STK"),
    
    STL("STL"),
    
    STN("STN"),
    
    STW("STW"),
    
    SW("SW"),
    
    SX("SX"),
    
    SYR("SYR"),
    
    T0("T0"),
    
    T3("T3"),
    
    TAH("TAH"),
    
    TAN("TAN"),
    
    TI("TI"),
    
    TIC("TIC"),
    
    TIP("TIP"),
    
    TKM("TKM"),
    
    TMS("TMS"),
    
    TNE("TNE"),
    
    TP("TP"),
    
    TPI("TPI"),
    
    TPR("TPR"),
    
    TQD("TQD"),
    
    TRL("TRL"),
    
    TST("TST"),
    
    TTS("TTS"),
    
    U1("U1"),
    
    U2("U2"),
    
    UB("UB"),
    
    UC("UC"),
    
    VA("VA"),
    
    VLT("VLT"),
    
    VP("VP"),
    
    W2("W2"),
    
    WA("WA"),
    
    WB("WB"),
    
    WCD("WCD"),
    
    WE("WE"),
    
    WEB("WEB"),
    
    WEE("WEE"),
    
    WG("WG"),
    
    WHR("WHR"),
    
    WM("WM"),
    
    WSD("WSD"),
    
    WTT("WTT"),
    
    X1("X1"),
    
    YDK("YDK"),
    
    YDQ("YDQ"),
    
    YRD("YRD"),
    
    Z11("Z11"),
    
    ZP("ZP"),
    
    ZZ("ZZ"),
    
    X1_A("X1A"),
    
    X1_B("X1B"),
    
    X1_D("X1D"),
    
    X1_F("X1F"),
    
    X1_G("X1G"),
    
    X1_W("X1W"),
    
    X2_C("X2C"),
    
    X3_A("X3A"),
    
    X3_H("X3H"),
    
    X43("X43"),
    
    X44("X44"),
    
    X4_A("X4A"),
    
    X4_B("X4B"),
    
    X4_C("X4C"),
    
    X4_D("X4D"),
    
    X4_F("X4F"),
    
    X4_G("X4G"),
    
    X4_H("X4H"),
    
    X5_H("X5H"),
    
    X5_L("X5L"),
    
    X5_M("X5M"),
    
    X6_H("X6H"),
    
    X6_P("X6P"),
    
    X7_A("X7A"),
    
    X7_B("X7B"),
    
    X8_A("X8A"),
    
    X8_B("X8B"),
    
    X8_C("X8C"),
    
    XAA("XAA"),
    
    XAB("XAB"),
    
    XAC("XAC"),
    
    XAD("XAD"),
    
    XAE("XAE"),
    
    XAF("XAF"),
    
    XAG("XAG"),
    
    XAH("XAH"),
    
    XAI("XAI"),
    
    XAJ("XAJ"),
    
    XAL("XAL"),
    
    XAM("XAM"),
    
    XAP("XAP"),
    
    XAT("XAT"),
    
    XAV("XAV"),
    
    XB4("XB4"),
    
    XBA("XBA"),
    
    XBB("XBB"),
    
    XBC("XBC"),
    
    XBD("XBD"),
    
    XBE("XBE"),
    
    XBF("XBF"),
    
    XBG("XBG"),
    
    XBH("XBH"),
    
    XBI("XBI"),
    
    XBJ("XBJ"),
    
    XBK("XBK"),
    
    XBL("XBL"),
    
    XBM("XBM"),
    
    XBN("XBN"),
    
    XBO("XBO"),
    
    XBP("XBP"),
    
    XBQ("XBQ"),
    
    XBR("XBR"),
    
    XBS("XBS"),
    
    XBT("XBT"),
    
    XBU("XBU"),
    
    XBV("XBV"),
    
    XBW("XBW"),
    
    XBX("XBX"),
    
    XBY("XBY"),
    
    XBZ("XBZ"),
    
    XCA("XCA"),
    
    XCB("XCB"),
    
    XCC("XCC"),
    
    XCD("XCD"),
    
    XCE("XCE"),
    
    XCF("XCF"),
    
    XCG("XCG"),
    
    XCH("XCH"),
    
    XCI("XCI"),
    
    XCJ("XCJ"),
    
    XCK("XCK"),
    
    XCL("XCL"),
    
    XCM("XCM"),
    
    XCN("XCN"),
    
    XCO("XCO"),
    
    XCP("XCP"),
    
    XCQ("XCQ"),
    
    XCR("XCR"),
    
    XCS("XCS"),
    
    XCT("XCT"),
    
    XCU("XCU"),
    
    XCV("XCV"),
    
    XCW("XCW"),
    
    XCX("XCX"),
    
    XCY("XCY"),
    
    XCZ("XCZ"),
    
    XDA("XDA"),
    
    XDB("XDB"),
    
    XDC("XDC"),
    
    XDG("XDG"),
    
    XDH("XDH"),
    
    XDI("XDI"),
    
    XDJ("XDJ"),
    
    XDK("XDK"),
    
    XDL("XDL"),
    
    XDM("XDM"),
    
    XDN("XDN"),
    
    XDP("XDP"),
    
    XDR("XDR"),
    
    XDS("XDS"),
    
    XDT("XDT"),
    
    XDU("XDU"),
    
    XDV("XDV"),
    
    XDW("XDW"),
    
    XDX("XDX"),
    
    XDY("XDY"),
    
    XEC("XEC"),
    
    XED("XED"),
    
    XEE("XEE"),
    
    XEF("XEF"),
    
    XEG("XEG"),
    
    XEH("XEH"),
    
    XEI("XEI"),
    
    XEN("XEN"),
    
    XFB("XFB"),
    
    XFC("XFC"),
    
    XFD("XFD"),
    
    XFE("XFE"),
    
    XFI("XFI"),
    
    XFL("XFL"),
    
    XFO("XFO"),
    
    XFP("XFP"),
    
    XFR("XFR"),
    
    XFT("XFT"),
    
    XFW("XFW"),
    
    XFX("XFX"),
    
    XGB("XGB"),
    
    XGI("XGI"),
    
    XGL("XGL"),
    
    XGR("XGR"),
    
    XGU("XGU"),
    
    XGY("XGY"),
    
    XGZ("XGZ"),
    
    XHA("XHA"),
    
    XHB("XHB"),
    
    XHC("XHC"),
    
    XHG("XHG"),
    
    XHN("XHN"),
    
    XHR("XHR"),
    
    XIA("XIA"),
    
    XIB("XIB"),
    
    XIC("XIC"),
    
    XID("XID"),
    
    XIE("XIE"),
    
    XIF("XIF"),
    
    XIG("XIG"),
    
    XIH("XIH"),
    
    XIK("XIK"),
    
    XIL("XIL"),
    
    XIN("XIN"),
    
    XIZ("XIZ"),
    
    XJB("XJB"),
    
    XJC("XJC"),
    
    XJG("XJG"),
    
    XJR("XJR"),
    
    XJT("XJT"),
    
    XJY("XJY"),
    
    XKG("XKG"),
    
    XKI("XKI"),
    
    XLE("XLE"),
    
    XLG("XLG"),
    
    XLT("XLT"),
    
    XLU("XLU"),
    
    XLV("XLV"),
    
    XLZ("XLZ"),
    
    XMA("XMA"),
    
    XMB("XMB"),
    
    XMC("XMC"),
    
    XME("XME"),
    
    XMR("XMR"),
    
    XMS("XMS"),
    
    XMT("XMT"),
    
    XMW("XMW"),
    
    XMX("XMX"),
    
    XNA("XNA"),
    
    XNE("XNE"),
    
    XNF("XNF"),
    
    XNG("XNG"),
    
    XNS("XNS"),
    
    XNT("XNT"),
    
    XNU("XNU"),
    
    XNV("XNV"),
    
    XOA("XOA"),
    
    XOB("XOB"),
    
    XOC("XOC"),
    
    XOD("XOD"),
    
    XOE("XOE"),
    
    XOF("XOF"),
    
    XOK("XOK"),
    
    XOT("XOT"),
    
    XOU("XOU"),
    
    XP2("XP2"),
    
    XPA("XPA"),
    
    XPB("XPB"),
    
    XPC("XPC"),
    
    XPD("XPD"),
    
    XPE("XPE"),
    
    XPF("XPF"),
    
    XPG("XPG"),
    
    XPH("XPH"),
    
    XPI("XPI"),
    
    XPJ("XPJ"),
    
    XPK("XPK"),
    
    XPL("XPL"),
    
    XPN("XPN"),
    
    XPO("XPO"),
    
    XPP("XPP"),
    
    XPR("XPR"),
    
    XPT("XPT"),
    
    XPU("XPU"),
    
    XPV("XPV"),
    
    XPX("XPX"),
    
    XPY("XPY"),
    
    XPZ("XPZ"),
    
    XQA("XQA"),
    
    XQB("XQB"),
    
    XQC("XQC"),
    
    XQD("XQD"),
    
    XQF("XQF"),
    
    XQG("XQG"),
    
    XQH("XQH"),
    
    XQJ("XQJ"),
    
    XQK("XQK"),
    
    XQL("XQL"),
    
    XQM("XQM"),
    
    XQN("XQN"),
    
    XQP("XQP"),
    
    XQQ("XQQ"),
    
    XQR("XQR"),
    
    XQS("XQS"),
    
    XRD("XRD"),
    
    XRG("XRG"),
    
    XRJ("XRJ"),
    
    XRK("XRK"),
    
    XRL("XRL"),
    
    XRO("XRO"),
    
    XRT("XRT"),
    
    XRZ("XRZ"),
    
    XSA("XSA"),
    
    XSB("XSB"),
    
    XSC("XSC"),
    
    XSD("XSD"),
    
    XSE("XSE"),
    
    XSH("XSH"),
    
    XSI("XSI"),
    
    XSK("XSK"),
    
    XSL("XSL"),
    
    XSM("XSM"),
    
    XSO("XSO"),
    
    XSP("XSP"),
    
    XSS("XSS"),
    
    XST("XST"),
    
    XSU("XSU"),
    
    XSV("XSV"),
    
    XSW("XSW"),
    
    XSY("XSY"),
    
    XSZ("XSZ"),
    
    XT1("XT1"),
    
    XTB("XTB"),
    
    XTC("XTC"),
    
    XTD("XTD"),
    
    XTE("XTE"),
    
    XTG("XTG"),
    
    XTI("XTI"),
    
    XTK("XTK"),
    
    XTL("XTL"),
    
    XTN("XTN"),
    
    XTO("XTO"),
    
    XTR("XTR"),
    
    XTS("XTS"),
    
    XTT("XTT"),
    
    XTU("XTU"),
    
    XTV("XTV"),
    
    XTW("XTW"),
    
    XTY("XTY"),
    
    XTZ("XTZ"),
    
    XUC("XUC"),
    
    XUN("XUN"),
    
    XVA("XVA"),
    
    XVG("XVG"),
    
    XVI("XVI"),
    
    XVK("XVK"),
    
    XVL("XVL"),
    
    XVO("XVO"),
    
    XVP("XVP"),
    
    XVQ("XVQ"),
    
    XVN("XVN"),
    
    XVR("XVR"),
    
    XVS("XVS"),
    
    XVY("XVY"),
    
    XWA("XWA"),
    
    XWB("XWB"),
    
    XWC("XWC"),
    
    XWD("XWD"),
    
    XWF("XWF"),
    
    XWG("XWG"),
    
    XWH("XWH"),
    
    XWJ("XWJ"),
    
    XWK("XWK"),
    
    XWL("XWL"),
    
    XWM("XWM"),
    
    XWN("XWN"),
    
    XWP("XWP"),
    
    XWQ("XWQ"),
    
    XWR("XWR"),
    
    XWS("XWS"),
    
    XWT("XWT"),
    
    XWU("XWU"),
    
    XWV("XWV"),
    
    XWW("XWW"),
    
    XWX("XWX"),
    
    XWY("XWY"),
    
    XWZ("XWZ"),
    
    XXA("XXA"),
    
    XXB("XXB"),
    
    XXC("XXC"),
    
    XXD("XXD"),
    
    XXF("XXF"),
    
    XXG("XXG"),
    
    XXH("XXH"),
    
    XXJ("XXJ"),
    
    XXK("XXK"),
    
    XYA("XYA"),
    
    XYB("XYB"),
    
    XYC("XYC"),
    
    XYD("XYD"),
    
    XYF("XYF"),
    
    XYG("XYG"),
    
    XYH("XYH"),
    
    XYJ("XYJ"),
    
    XYK("XYK"),
    
    XYL("XYL"),
    
    XYM("XYM"),
    
    XYN("XYN"),
    
    XYP("XYP"),
    
    XYQ("XYQ"),
    
    XYR("XYR"),
    
    XYS("XYS"),
    
    XYT("XYT"),
    
    XYV("XYV"),
    
    XYW("XYW"),
    
    XYX("XYX"),
    
    XYY("XYY"),
    
    XYZ("XYZ"),
    
    XZA("XZA"),
    
    XZB("XZB"),
    
    XZC("XZC"),
    
    XZD("XZD"),
    
    XZF("XZF"),
    
    XZG("XZG"),
    
    XZH("XZH"),
    
    XZJ("XZJ"),
    
    XZK("XZK"),
    
    XZL("XZL"),
    
    XZM("XZM"),
    
    XZN("XZN"),
    
    XZP("XZP"),
    
    XZQ("XZQ"),
    
    XZR("XZR"),
    
    XZS("XZS"),
    
    XZT("XZT"),
    
    XZU("XZU"),
    
    XZV("XZV"),
    
    XZW("XZW"),
    
    XZX("XZX"),
    
    XZY("XZY"),
    
    XZZ("XZZ"),
    
    _04("04"),
    
    _05("05"),
    
    _08("08"),
    
    _16("16"),
    
    _17("17"),
    
    _18("18"),
    
    _19("19"),
    
    _26("26"),
    
    _29("29"),
    
    _30("30"),
    
    _31("31"),
    
    _32("32"),
    
    _36("36"),
    
    _43("43"),
    
    _44("44"),
    
    _45("45"),
    
    _46("46"),
    
    _47("47"),
    
    _48("48"),
    
    _53("53"),
    
    _54("54"),
    
    _62("62"),
    
    _63("63"),
    
    _64("64"),
    
    _66("66"),
    
    _69("69"),
    
    _71("71"),
    
    _72("72"),
    
    _73("73"),
    
    _76("76"),
    
    _78("78"),
    
    _84("84"),
    
    _90("90"),
    
    _92("92"),
    
    _93("93"),
    
    _94("94"),
    
    _95("95"),
    
    _96("96"),
    
    _97("97"),
    
    _98("98"),
    
    _1_A("1A"),
    
    _1_B("1B"),
    
    _1_C("1C"),
    
    _1_D("1D"),
    
    _1_E("1E"),
    
    _1_F("1F"),
    
    _1_G("1G"),
    
    _1_H("1H"),
    
    _1_J("1J"),
    
    _1_K("1K"),
    
    _1_L("1L"),
    
    _1_M("1M"),
    
    _1_X("1X"),
    
    _2_V("2V"),
    
    _2_W("2W"),
    
    _3_E("3E"),
    
    _3_G("3G"),
    
    _3_H("3H"),
    
    _3_I("3I"),
    
    _4_A("4A"),
    
    _4_B("4B"),
    
    _4_E("4E"),
    
    _5_C("5C"),
    
    _5_F("5F"),
    
    _5_G("5G"),
    
    _5_H("5H"),
    
    _5_I("5I"),
    
    _5_K("5K"),
    
    _5_P("5P"),
    
    _5_Q("5Q"),
    
    A1("A1"),
    
    A25("A25"),
    
    A50("A50"),
    
    A51("A51"),
    
    A52("A52"),
    
    A57("A57"),
    
    A58("A58"),
    
    A60("A60"),
    
    A61("A61"),
    
    A62("A62"),
    
    A63("A63"),
    
    A64("A64"),
    
    A65("A65"),
    
    A66("A66"),
    
    A67("A67"),
    
    A77("A77"),
    
    A78("A78"),
    
    A79("A79"),
    
    A80("A80"),
    
    A81("A81"),
    
    A82("A82"),
    
    A83("A83"),
    
    AJ("AJ"),
    
    AM("AM"),
    
    AP("AP"),
    
    AR("AR"),
    
    ARE("ARE"),
    
    ATT("ATT"),
    
    AV("AV"),
    
    AW("AW"),
    
    B0("B0"),
    
    B2("B2"),
    
    B36("B36"),
    
    B37("B37"),
    
    B38("B38"),
    
    B39("B39"),
    
    B40("B40"),
    
    B5("B5"),
    
    B51("B51"),
    
    B6("B6"),
    
    B65("B65"),
    
    B9("B9"),
    
    BD("BD"),
    
    BE("BE"),
    
    BG("BG"),
    
    BH("BH"),
    
    BJ("BJ"),
    
    BK("BK"),
    
    BL("BL"),
    
    BO("BO"),
    
    BR("BR"),
    
    BT("BT"),
    
    BW("BW"),
    
    BX("BX"),
    
    BZ("BZ"),
    
    C1("C1"),
    
    C2("C2"),
    
    C4("C4"),
    
    C5("C5"),
    
    C6("C6"),
    
    C77("C77"),
    
    C98("C98"),
    
    CA("CA"),
    
    CH("CH"),
    
    CJ("CJ"),
    
    CK("CK"),
    
    CL("CL"),
    
    CO("CO"),
    
    CQ("CQ"),
    
    CR("CR"),
    
    CS("CS"),
    
    CT("CT"),
    
    CU("CU"),
    
    CV("CV"),
    
    CY("CY"),
    
    CZ("CZ"),
    
    D14("D14"),
    
    D28("D28"),
    
    D35("D35"),
    
    D37("D37"),
    
    D38("D38"),
    
    D39("D39"),
    
    D40("D40"),
    
    D64("D64"),
    
    D66("D66"),
    
    D67("D67"),
    
    D7("D7"),
    
    D70("D70"),
    
    D71("D71"),
    
    D72("D72"),
    
    D75("D75"),
    
    D76("D76"),
    
    D79("D79"),
    
    D8("D8"),
    
    D9("D9"),
    
    D90("D90"),
    
    D92("D92"),
    
    D96("D96"),
    
    D97("D97"),
    
    D98("D98"),
    
    D99("D99"),
    
    DC("DC"),
    
    DE("DE"),
    
    DI("DI"),
    
    DQ("DQ"),
    
    DR("DR"),
    
    DRM("DRM"),
    
    DS("DS"),
    
    DU("DU"),
    
    DX("DX"),
    
    DY("DY"),
    
    E2("E2"),
    
    E3("E3"),
    
    E5("E5"),
    
    EC("EC"),
    
    EP("EP"),
    
    EV("EV"),
    
    F1("F1"),
    
    F9("F9"),
    
    FB("FB"),
    
    FD("FD"),
    
    FE("FE"),
    
    FG("FG"),
    
    FM("FM"),
    
    G7("G7"),
    
    GC("GC"),
    
    GD("GD"),
    
    GH("GH"),
    
    GK("GK"),
    
    GN("GN"),
    
    GRT("GRT"),
    
    GT("GT"),
    
    GW("GW"),
    
    GY("GY"),
    
    GZ("GZ"),
    
    H1("H1"),
    
    H2("H2"),
    
    HAR("HAR"),
    
    HD("HD"),
    
    HE("HE"),
    
    HF("HF"),
    
    HI("HI"),
    
    HJ("HJ"),
    
    HK("HK"),
    
    HL("HL"),
    
    HN("HN"),
    
    HO("HO"),
    
    HP("HP"),
    
    HS("HS"),
    
    HT("HT"),
    
    HY("HY"),
    
    IC("IC"),
    
    IF("IF"),
    
    II("II"),
    
    IL("IL"),
    
    IM("IM"),
    
    IP("IP"),
    
    IT("IT"),
    
    JB("JB"),
    
    JG("JG"),
    
    JO("JO"),
    
    JR("JR"),
    
    K5("K5"),
    
    KD("KD"),
    
    KF("KF"),
    
    KG("KG"),
    
    KS("KS"),
    
    KTM("KTM"),
    
    LC("LC"),
    
    LE("LE"),
    
    LI("LI"),
    
    LJ("LJ"),
    
    LX("LX"),
    
    M0("M0"),
    
    MA("MA"),
    
    MF("MF"),
    
    MK("MK"),
    
    MQ("MQ"),
    
    MT("MT"),
    
    MV("MV"),
    
    N2("N2"),
    
    NB("NB"),
    
    NBB("NBB"),
    
    NC("NC"),
    
    ND("ND"),
    
    NE("NE"),
    
    NG("NG"),
    
    NH("NH"),
    
    NI("NI"),
    
    NJ("NJ"),
    
    NN("NN"),
    
    NPL("NPL"),
    
    NPR("NPR"),
    
    NQ("NQ"),
    
    NR("NR"),
    
    NRL("NRL"),
    
    NTT("NTT"),
    
    NV("NV"),
    
    NY("NY"),
    
    OP("OP"),
    
    OZ("OZ"),
    
    P0("P0"),
    
    P3("P3"),
    
    P4("P4"),
    
    P6("P6"),
    
    P7("P7"),
    
    P8("P8"),
    
    P9("P9"),
    
    PA("PA"),
    
    PB("PB"),
    
    PE("PE"),
    
    PF("PF"),
    
    PG("PG"),
    
    PK("PK"),
    
    PL("PL"),
    
    PM("PM"),
    
    PN("PN"),
    
    PT("PT"),
    
    PU("PU"),
    
    PV("PV"),
    
    PW("PW"),
    
    PY("PY"),
    
    PZ("PZ"),
    
    QD("QD"),
    
    QH("QH"),
    
    QK("QK"),
    
    QT("QT"),
    
    R4("R4"),
    
    RA("RA"),
    
    RD("RD"),
    
    RG("RG"),
    
    RK("RK"),
    
    RL("RL"),
    
    RN("RN"),
    
    RO("RO"),
    
    RS("RS"),
    
    RU("RU"),
    
    S5("S5"),
    
    S6("S6"),
    
    S7("S7"),
    
    S8("S8"),
    
    SA("SA"),
    
    SD("SD"),
    
    SE("SE"),
    
    SHT("SHT"),
    
    SK("SK"),
    
    SL("SL"),
    
    SN("SN"),
    
    SO("SO"),
    
    SP("SP"),
    
    SS("SS"),
    
    SST("SST"),
    
    ST("ST"),
    
    SV("SV"),
    
    T1("T1"),
    
    T4("T4"),
    
    T5("T5"),
    
    T6("T6"),
    
    T7("T7"),
    
    T8("T8"),
    
    TA("TA"),
    
    TC("TC"),
    
    TD("TD"),
    
    TE("TE"),
    
    TF("TF"),
    
    TJ("TJ"),
    
    TK("TK"),
    
    TL("TL"),
    
    TN("TN"),
    
    TQ("TQ"),
    
    TR("TR"),
    
    TS("TS"),
    
    TSD("TSD"),
    
    TSH("TSH"),
    
    TT("TT"),
    
    TU("TU"),
    
    TV("TV"),
    
    TW("TW"),
    
    TY("TY"),
    
    UA("UA"),
    
    UD("UD"),
    
    UE("UE"),
    
    UF("UF"),
    
    UH("UH"),
    
    UM("UM"),
    
    VI("VI"),
    
    VQ("VQ"),
    
    VS("VS"),
    
    W4("W4"),
    
    WH("WH"),
    
    WI("WI"),
    
    WR("WR"),
    
    WW("WW"),
    
    YL("YL"),
    
    YT("YT"),
    
    Z1("Z1"),
    
    Z2("Z2"),
    
    Z3("Z3"),
    
    Z4("Z4"),
    
    Z5("Z5"),
    
    Z6("Z6"),
    
    Z8("Z8");

    private String value;

    QuantityUnitCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuantityUnitCodeEnum fromValue(String value) {
      for (QuantityUnitCodeEnum b : QuantityUnitCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QuantityUnitCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuantityUnitCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuantityUnitCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QuantityUnitCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QuantityUnitCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUANTITY_UNIT_CODE = "quantityUnitCode";
  @SerializedName(SERIALIZED_NAME_QUANTITY_UNIT_CODE)
  private QuantityUnitCodeEnum quantityUnitCode = QuantityUnitCodeEnum.C62;

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  private List<Reference> references = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAXES_DUTIES_FEES = "taxesDutiesFees";
  @SerializedName(SERIALIZED_NAME_TAXES_DUTIES_FEES)
  private List<Tax> taxesDutiesFees = new ArrayList<>();

  public OrderLine() {
  }

  public OrderLine accountingCost(String accountingCost) {
    this.accountingCost = accountingCost;
    return this;
  }

  /**
   * The buyer&#39;s accounting cost centre for this line.
   * @return accountingCost
   */
  @javax.annotation.Nullable
  public String getAccountingCost() {
    return accountingCost;
  }

  public void setAccountingCost(String accountingCost) {
    this.accountingCost = accountingCost;
  }


  public OrderLine additionalItemProperties(List<AdditionalItemProperty> additionalItemProperties) {
    this.additionalItemProperties = additionalItemProperties;
    return this;
  }

  public OrderLine addAdditionalItemPropertiesItem(AdditionalItemProperty additionalItemPropertiesItem) {
    if (this.additionalItemProperties == null) {
      this.additionalItemProperties = new ArrayList<>();
    }
    this.additionalItemProperties.add(additionalItemPropertiesItem);
    return this;
  }

  /**
   * An array of additional item properties.
   * @return additionalItemProperties
   */
  @javax.annotation.Nullable
  public List<AdditionalItemProperty> getAdditionalItemProperties() {
    return additionalItemProperties;
  }

  public void setAdditionalItemProperties(List<AdditionalItemProperty> additionalItemProperties) {
    this.additionalItemProperties = additionalItemProperties;
  }


  public OrderLine allowPartialDelivery(Boolean allowPartialDelivery) {
    this.allowPartialDelivery = allowPartialDelivery;
    return this;
  }

  /**
   * Whether or not the line items must be delivered in a single shipment.
   * @return allowPartialDelivery
   */
  @javax.annotation.Nullable
  public Boolean getAllowPartialDelivery() {
    return allowPartialDelivery;
  }

  public void setAllowPartialDelivery(Boolean allowPartialDelivery) {
    this.allowPartialDelivery = allowPartialDelivery;
  }


  public OrderLine allowanceCharges(List<LineAllowanceCharge> allowanceCharges) {
    this.allowanceCharges = allowanceCharges;
    return this;
  }

  public OrderLine addAllowanceChargesItem(LineAllowanceCharge allowanceChargesItem) {
    if (this.allowanceCharges == null) {
      this.allowanceCharges = new ArrayList<>();
    }
    this.allowanceCharges.add(allowanceChargesItem);
    return this;
  }

  /**
   * An array of allowance charges.
   * @return allowanceCharges
   */
  @javax.annotation.Nullable
  public List<LineAllowanceCharge> getAllowanceCharges() {
    return allowanceCharges;
  }

  public void setAllowanceCharges(List<LineAllowanceCharge> allowanceCharges) {
    this.allowanceCharges = allowanceCharges;
  }


  public OrderLine amountExcludingTax(BigDecimal amountExcludingTax) {
    this.amountExcludingTax = amountExcludingTax;
    return this;
  }

  /**
   * The amount excluding tax. Should equal quantity x itemPrice + allowanceCharge.
   * @return amountExcludingTax
   */
  @javax.annotation.Nonnull
  public BigDecimal getAmountExcludingTax() {
    return amountExcludingTax;
  }

  public void setAmountExcludingTax(BigDecimal amountExcludingTax) {
    this.amountExcludingTax = amountExcludingTax;
  }


  public OrderLine baseQuantity(BigDecimal baseQuantity) {
    this.baseQuantity = baseQuantity;
    return this;
  }

  /**
   * The number of items the price is for.
   * @return baseQuantity
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseQuantity() {
    return baseQuantity;
  }

  public void setBaseQuantity(BigDecimal baseQuantity) {
    this.baseQuantity = baseQuantity;
  }


  public OrderLine delivery(LineDelivery delivery) {
    this.delivery = delivery;
    return this;
  }

  /**
   * Get delivery
   * @return delivery
   */
  @javax.annotation.Nullable
  public LineDelivery getDelivery() {
    return delivery;
  }

  public void setDelivery(LineDelivery delivery) {
    this.delivery = delivery;
  }


  public OrderLine description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description for this line.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OrderLine itemPrice(BigDecimal itemPrice) {
    this.itemPrice = itemPrice;
    return this;
  }

  /**
   * The price per item (may be fractional)
   * @return itemPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getItemPrice() {
    return itemPrice;
  }

  public void setItemPrice(BigDecimal itemPrice) {
    this.itemPrice = itemPrice;
  }


  public OrderLine lineId(String lineId) {
    this.lineId = lineId;
    return this;
  }

  /**
   * The id for this invoice line.
   * @return lineId
   */
  @javax.annotation.Nonnull
  public String getLineId() {
    return lineId;
  }

  public void setLineId(String lineId) {
    this.lineId = lineId;
  }


  public OrderLine lotNumberIds(List<String> lotNumberIds) {
    this.lotNumberIds = lotNumberIds;
    return this;
  }

  public OrderLine addLotNumberIdsItem(String lotNumberIdsItem) {
    if (this.lotNumberIds == null) {
      this.lotNumberIds = new ArrayList<>();
    }
    this.lotNumberIds.add(lotNumberIdsItem);
    return this;
  }

  /**
   * An identifier for the production lot which the line items come from.
   * @return lotNumberIds
   */
  @javax.annotation.Nullable
  public List<String> getLotNumberIds() {
    return lotNumberIds;
  }

  public void setLotNumberIds(List<String> lotNumberIds) {
    this.lotNumberIds = lotNumberIds;
  }


  public OrderLine name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A short name for this line.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OrderLine note(String note) {
    this.note = note;
    return this;
  }

  /**
   * A note to add to the line
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public OrderLine quantity(BigDecimal quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The number of items (may be fractional).
   * @return quantity
   */
  @javax.annotation.Nonnull
  public BigDecimal getQuantity() {
    return quantity;
  }

  public void setQuantity(BigDecimal quantity) {
    this.quantity = quantity;
  }


  public OrderLine quantityUnitCode(QuantityUnitCodeEnum quantityUnitCode) {
    this.quantityUnitCode = quantityUnitCode;
    return this;
  }

  /**
   * The unit of measure that applies to the quantity. Codes for unit of packaging from UNECE Recommendation No. 21 can be used in accordance with the descriptions in the \&quot;Intro\&quot; section of UN/ECE Recommendation 20, Revision 11 (2015): The 2 character alphanumeric code values in UNECE Recommendation 21 shall be used. To avoid duplication with existing code values in UNECE Recommendation No. 20, each code value from UNECE Recommendation 21 shall be prefixed with an “X”, resulting in a 3 alphanumeric code when used as a unit of measure. Note that the following additionally allowed codes are deprecated and will be converted to C62: 04, 05, 08, 16, 17, 18, 19, 26, 29, 30, 31, 32, 36, 43, 44, 45, 46, 47, 48, 53, 54, 62, 63, 64, 66, 69, 71, 72, 73, 76, 78, 84, 90, 92, 93, 94, 95, 96, 97, 98, 1A, 1B, 1C, 1D, 1E, 1F, 1G, 1H, 1J, 1K, 1L, 1M, 1X, 2V, 2W, 3E, 3G, 3H, 3I, 4A, 4B, 4E, 5C, 5F, 5G, 5H, 5I, 5K, 5P, 5Q, A1, A25, A50, A51, A52, A57, A58, A60, A61, A62, A63, A64, A65, A66, A67, A77, A78, A79, A80, A81, A82, A83, AJ, AM, AP, AR, ARE, ATT, AV, AW, B0, B2, B36, B37, B38, B39, B40, B5, B51, B6, B65, B9, BD, BE, BG, BH, BJ, BK, BL, BO, BR, BT, BW, BX, BZ, C1, C2, C4, C5, C6, C77, C98, CA, CH, CJ, CK, CL, CO, CQ, CR, CS, CT, CU, CV, CY, CZ, D14, D28, D35, D37, D38, D39, D40, D64, D66, D67, D7, D70, D71, D72, D75, D76, D79, D8, D9, D90, D92, D96, D97, D98, D99, DC, DE, DI, DQ, DR, DRM, DS, DU, DX, DY, E2, E3, E5, EC, EP, EV, F1, F9, FB, FD, FE, FG, FM, G7, GC, GD, GH, GK, GN, GRT, GT, GW, GY, GZ, H1, H2, HAR, HD, HE, HF, HI, HJ, HK, HL, HN, HO, HP, HS, HT, HY, IC, IF, II, IL, IM, IP, IT, JB, JG, JO, JR, K5, KD, KF, KG, KS, KTM, LC, LE, LI, LJ, LX, M0, MA, MF, MK, MQ, MT, MV, N2, NB, NBB, NC, ND, NE, NG, NH, NI, NJ, NN, NPL, NPR, NQ, NR, NRL, NTT, NV, NY, OP, OZ, P0, P3, P4, P6, P7, P8, P9, PA, PB, PE, PF, PG, PK, PL, PM, PN, PT, PU, PV, PW, PY, PZ, QD, QH, QK, QT, R4, RA, RD, RG, RK, RL, RN, RO, RS, RU, S5, S6, S7, S8, SA, SD, SE, SHT, SK, SL, SN, SO, SP, SS, SST, ST, SV, T1, T4, T5, T6, T7, T8, TA, TC, TD, TE, TF, TJ, TK, TL, TN, TQ, TR, TS, TSD, TSH, TT, TU, TV, TW, TY, UA, UD, UE, UF, UH, UM, VI, VQ, VS, W4, WH, WI, WR, WW, YL, YT, Z1, Z2, Z3, Z4, Z5, Z6, Z8
   * @return quantityUnitCode
   */
  @javax.annotation.Nonnull
  public QuantityUnitCodeEnum getQuantityUnitCode() {
    return quantityUnitCode;
  }

  public void setQuantityUnitCode(QuantityUnitCodeEnum quantityUnitCode) {
    this.quantityUnitCode = quantityUnitCode;
  }


  public OrderLine references(List<Reference> references) {
    this.references = references;
    return this;
  }

  public OrderLine addReferencesItem(Reference referencesItem) {
    if (this.references == null) {
      this.references = new ArrayList<>();
    }
    this.references.add(referencesItem);
    return this;
  }

  /**
   * An array of references to other documents or codes. Note that many syntaxes do not support multiple references of the same type in which case they will be concatenated with &#39;,&#39;. Also, not all syntaxes support all documentTypes.
   * @return references
   */
  @javax.annotation.Nullable
  public List<Reference> getReferences() {
    return references;
  }

  public void setReferences(List<Reference> references) {
    this.references = references;
  }


  public OrderLine taxesDutiesFees(List<Tax> taxesDutiesFees) {
    this.taxesDutiesFees = taxesDutiesFees;
    return this;
  }

  public OrderLine addTaxesDutiesFeesItem(Tax taxesDutiesFeesItem) {
    if (this.taxesDutiesFees == null) {
      this.taxesDutiesFees = new ArrayList<>();
    }
    this.taxesDutiesFees.add(taxesDutiesFeesItem);
    return this;
  }

  /**
   * An array of taxes, duties and fees for this invoice line. Multiple taxesDutiesFees items is allowed only for IN (India) and US (USA) taxes. All other countries can only have a single Tax item in this array.
   * @return taxesDutiesFees
   */
  @javax.annotation.Nullable
  public List<Tax> getTaxesDutiesFees() {
    return taxesDutiesFees;
  }

  public void setTaxesDutiesFees(List<Tax> taxesDutiesFees) {
    this.taxesDutiesFees = taxesDutiesFees;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderLine orderLine = (OrderLine) o;
    return Objects.equals(this.accountingCost, orderLine.accountingCost) &&
        Objects.equals(this.additionalItemProperties, orderLine.additionalItemProperties) &&
        Objects.equals(this.allowPartialDelivery, orderLine.allowPartialDelivery) &&
        Objects.equals(this.allowanceCharges, orderLine.allowanceCharges) &&
        Objects.equals(this.amountExcludingTax, orderLine.amountExcludingTax) &&
        Objects.equals(this.baseQuantity, orderLine.baseQuantity) &&
        Objects.equals(this.delivery, orderLine.delivery) &&
        Objects.equals(this.description, orderLine.description) &&
        Objects.equals(this.itemPrice, orderLine.itemPrice) &&
        Objects.equals(this.lineId, orderLine.lineId) &&
        Objects.equals(this.lotNumberIds, orderLine.lotNumberIds) &&
        Objects.equals(this.name, orderLine.name) &&
        Objects.equals(this.note, orderLine.note) &&
        Objects.equals(this.quantity, orderLine.quantity) &&
        Objects.equals(this.quantityUnitCode, orderLine.quantityUnitCode) &&
        Objects.equals(this.references, orderLine.references) &&
        Objects.equals(this.taxesDutiesFees, orderLine.taxesDutiesFees);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountingCost, additionalItemProperties, allowPartialDelivery, allowanceCharges, amountExcludingTax, baseQuantity, delivery, description, itemPrice, lineId, lotNumberIds, name, note, quantity, quantityUnitCode, references, taxesDutiesFees);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderLine {\n");
    sb.append("    accountingCost: ").append(toIndentedString(accountingCost)).append("\n");
    sb.append("    additionalItemProperties: ").append(toIndentedString(additionalItemProperties)).append("\n");
    sb.append("    allowPartialDelivery: ").append(toIndentedString(allowPartialDelivery)).append("\n");
    sb.append("    allowanceCharges: ").append(toIndentedString(allowanceCharges)).append("\n");
    sb.append("    amountExcludingTax: ").append(toIndentedString(amountExcludingTax)).append("\n");
    sb.append("    baseQuantity: ").append(toIndentedString(baseQuantity)).append("\n");
    sb.append("    delivery: ").append(toIndentedString(delivery)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    itemPrice: ").append(toIndentedString(itemPrice)).append("\n");
    sb.append("    lineId: ").append(toIndentedString(lineId)).append("\n");
    sb.append("    lotNumberIds: ").append(toIndentedString(lotNumberIds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    quantityUnitCode: ").append(toIndentedString(quantityUnitCode)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    taxesDutiesFees: ").append(toIndentedString(taxesDutiesFees)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountingCost");
    openapiFields.add("additionalItemProperties");
    openapiFields.add("allowPartialDelivery");
    openapiFields.add("allowanceCharges");
    openapiFields.add("amountExcludingTax");
    openapiFields.add("baseQuantity");
    openapiFields.add("delivery");
    openapiFields.add("description");
    openapiFields.add("itemPrice");
    openapiFields.add("lineId");
    openapiFields.add("lotNumberIds");
    openapiFields.add("name");
    openapiFields.add("note");
    openapiFields.add("quantity");
    openapiFields.add("quantityUnitCode");
    openapiFields.add("references");
    openapiFields.add("taxesDutiesFees");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amountExcludingTax");
    openapiRequiredFields.add("lineId");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("quantityUnitCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderLine
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderLine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderLine is not found in the empty JSON string", OrderLine.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderLine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderLine` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderLine.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountingCost") != null && !jsonObj.get("accountingCost").isJsonNull()) && !jsonObj.get("accountingCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountingCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountingCost").toString()));
      }
      if (jsonObj.get("additionalItemProperties") != null && !jsonObj.get("additionalItemProperties").isJsonNull()) {
        JsonArray jsonArrayadditionalItemProperties = jsonObj.getAsJsonArray("additionalItemProperties");
        if (jsonArrayadditionalItemProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalItemProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalItemProperties` to be an array in the JSON string but got `%s`", jsonObj.get("additionalItemProperties").toString()));
          }

          // validate the optional field `additionalItemProperties` (array)
          for (int i = 0; i < jsonArrayadditionalItemProperties.size(); i++) {
            AdditionalItemProperty.validateJsonElement(jsonArrayadditionalItemProperties.get(i));
          };
        }
      }
      if (jsonObj.get("allowanceCharges") != null && !jsonObj.get("allowanceCharges").isJsonNull()) {
        JsonArray jsonArrayallowanceCharges = jsonObj.getAsJsonArray("allowanceCharges");
        if (jsonArrayallowanceCharges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allowanceCharges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allowanceCharges` to be an array in the JSON string but got `%s`", jsonObj.get("allowanceCharges").toString()));
          }

          // validate the optional field `allowanceCharges` (array)
          for (int i = 0; i < jsonArrayallowanceCharges.size(); i++) {
            LineAllowanceCharge.validateJsonElement(jsonArrayallowanceCharges.get(i));
          };
        }
      }
      // validate the optional field `delivery`
      if (jsonObj.get("delivery") != null && !jsonObj.get("delivery").isJsonNull()) {
        LineDelivery.validateJsonElement(jsonObj.get("delivery"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("lineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("lotNumberIds") != null && !jsonObj.get("lotNumberIds").isJsonNull() && !jsonObj.get("lotNumberIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lotNumberIds` to be an array in the JSON string but got `%s`", jsonObj.get("lotNumberIds").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (!jsonObj.get("quantityUnitCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantityUnitCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantityUnitCode").toString()));
      }
      // validate the required field `quantityUnitCode`
      QuantityUnitCodeEnum.validateJsonElement(jsonObj.get("quantityUnitCode"));
      if (jsonObj.get("references") != null && !jsonObj.get("references").isJsonNull()) {
        JsonArray jsonArrayreferences = jsonObj.getAsJsonArray("references");
        if (jsonArrayreferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("references").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `references` to be an array in the JSON string but got `%s`", jsonObj.get("references").toString()));
          }

          // validate the optional field `references` (array)
          for (int i = 0; i < jsonArrayreferences.size(); i++) {
            Reference.validateJsonElement(jsonArrayreferences.get(i));
          };
        }
      }
      if (jsonObj.get("taxesDutiesFees") != null && !jsonObj.get("taxesDutiesFees").isJsonNull()) {
        JsonArray jsonArraytaxesDutiesFees = jsonObj.getAsJsonArray("taxesDutiesFees");
        if (jsonArraytaxesDutiesFees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxesDutiesFees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxesDutiesFees` to be an array in the JSON string but got `%s`", jsonObj.get("taxesDutiesFees").toString()));
          }

          // validate the optional field `taxesDutiesFees` (array)
          for (int i = 0; i < jsonArraytaxesDutiesFees.size(); i++) {
            Tax.validateJsonElement(jsonArraytaxesDutiesFees.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderLine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderLine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderLine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderLine.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderLine>() {
           @Override
           public void write(JsonWriter out, OrderLine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderLine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderLine given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderLine
   * @throws IOException if the JSON string is invalid with respect to OrderLine
   */
  public static OrderLine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderLine.class);
  }

  /**
   * Convert an instance of OrderLine to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

