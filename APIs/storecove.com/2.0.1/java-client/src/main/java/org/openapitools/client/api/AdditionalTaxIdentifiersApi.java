/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdditionalTaxIdentifier;
import org.openapitools.client.model.AdditionalTaxIdentifierCreate;
import org.openapitools.client.model.AdditionalTaxIdentifierUpdate;
import org.openapitools.client.model.ErrorModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdditionalTaxIdentifiersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdditionalTaxIdentifiersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdditionalTaxIdentifiersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAdditionalTaxIdentifier
     * @param legalEntityId The id of the LegalEntity for which to create the AdditionalTaxIdentifier (required)
     * @param additionalTaxIdentifierCreate AdditionalTaxIdentifier to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAdditionalTaxIdentifierCall(Long legalEntityId, AdditionalTaxIdentifierCreate additionalTaxIdentifierCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = additionalTaxIdentifierCreate;

        // create path and map variables
        String localVarPath = "/legal_entities/{legal_entity_id}/additional_tax_identifiers"
            .replace("{" + "legal_entity_id" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAdditionalTaxIdentifierValidateBeforeCall(Long legalEntityId, AdditionalTaxIdentifierCreate additionalTaxIdentifierCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling createAdditionalTaxIdentifier(Async)");
        }

        // verify the required parameter 'additionalTaxIdentifierCreate' is set
        if (additionalTaxIdentifierCreate == null) {
            throw new ApiException("Missing the required parameter 'additionalTaxIdentifierCreate' when calling createAdditionalTaxIdentifier(Async)");
        }

        return createAdditionalTaxIdentifierCall(legalEntityId, additionalTaxIdentifierCreate, _callback);

    }

    /**
     * Create a new AdditionalTaxIdentifier
     * Create a new AdditionalTaxIdentifier. An AdditionalTaxIdentifier is a seconday tax identifier that is used inside the EU when sending invoices to consumers. In that case, the VAT of the receiving country is used and if the sender has a local VAT identifier, that is used to identifiy the sender, instead of the sender&#39;s origin country VAT number. To use these identifiers, use the invoice.consumerTaxMode &#x3D; true property.
     * @param legalEntityId The id of the LegalEntity for which to create the AdditionalTaxIdentifier (required)
     * @param additionalTaxIdentifierCreate AdditionalTaxIdentifier to create (required)
     * @return AdditionalTaxIdentifier
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public AdditionalTaxIdentifier createAdditionalTaxIdentifier(Long legalEntityId, AdditionalTaxIdentifierCreate additionalTaxIdentifierCreate) throws ApiException {
        ApiResponse<AdditionalTaxIdentifier> localVarResp = createAdditionalTaxIdentifierWithHttpInfo(legalEntityId, additionalTaxIdentifierCreate);
        return localVarResp.getData();
    }

    /**
     * Create a new AdditionalTaxIdentifier
     * Create a new AdditionalTaxIdentifier. An AdditionalTaxIdentifier is a seconday tax identifier that is used inside the EU when sending invoices to consumers. In that case, the VAT of the receiving country is used and if the sender has a local VAT identifier, that is used to identifiy the sender, instead of the sender&#39;s origin country VAT number. To use these identifiers, use the invoice.consumerTaxMode &#x3D; true property.
     * @param legalEntityId The id of the LegalEntity for which to create the AdditionalTaxIdentifier (required)
     * @param additionalTaxIdentifierCreate AdditionalTaxIdentifier to create (required)
     * @return ApiResponse&lt;AdditionalTaxIdentifier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdditionalTaxIdentifier> createAdditionalTaxIdentifierWithHttpInfo(Long legalEntityId, AdditionalTaxIdentifierCreate additionalTaxIdentifierCreate) throws ApiException {
        okhttp3.Call localVarCall = createAdditionalTaxIdentifierValidateBeforeCall(legalEntityId, additionalTaxIdentifierCreate, null);
        Type localVarReturnType = new TypeToken<AdditionalTaxIdentifier>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new AdditionalTaxIdentifier (asynchronously)
     * Create a new AdditionalTaxIdentifier. An AdditionalTaxIdentifier is a seconday tax identifier that is used inside the EU when sending invoices to consumers. In that case, the VAT of the receiving country is used and if the sender has a local VAT identifier, that is used to identifiy the sender, instead of the sender&#39;s origin country VAT number. To use these identifiers, use the invoice.consumerTaxMode &#x3D; true property.
     * @param legalEntityId The id of the LegalEntity for which to create the AdditionalTaxIdentifier (required)
     * @param additionalTaxIdentifierCreate AdditionalTaxIdentifier to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAdditionalTaxIdentifierAsync(Long legalEntityId, AdditionalTaxIdentifierCreate additionalTaxIdentifierCreate, final ApiCallback<AdditionalTaxIdentifier> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAdditionalTaxIdentifierValidateBeforeCall(legalEntityId, additionalTaxIdentifierCreate, _callback);
        Type localVarReturnType = new TypeToken<AdditionalTaxIdentifier>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAdditionalTaxIdentifier
     * @param legalEntityId The id of the LegalEntity the AdditionalTaxIdentifier belongs to (required)
     * @param id The id of the AdditionalTaxIdentifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAdditionalTaxIdentifierCall(Long legalEntityId, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/legal_entities/{legal_entity_id}/additional_tax_identifiers/{id}"
            .replace("{" + "legal_entity_id" + "}", localVarApiClient.escapeString(legalEntityId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAdditionalTaxIdentifierValidateBeforeCall(Long legalEntityId, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling deleteAdditionalTaxIdentifier(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAdditionalTaxIdentifier(Async)");
        }

        return deleteAdditionalTaxIdentifierCall(legalEntityId, id, _callback);

    }

    /**
     * Delete AdditionalTaxIdentifier
     * Delete an AdditionalTaxIdentifier
     * @param legalEntityId The id of the LegalEntity the AdditionalTaxIdentifier belongs to (required)
     * @param id The id of the AdditionalTaxIdentifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAdditionalTaxIdentifier(Long legalEntityId, Long id) throws ApiException {
        deleteAdditionalTaxIdentifierWithHttpInfo(legalEntityId, id);
    }

    /**
     * Delete AdditionalTaxIdentifier
     * Delete an AdditionalTaxIdentifier
     * @param legalEntityId The id of the LegalEntity the AdditionalTaxIdentifier belongs to (required)
     * @param id The id of the AdditionalTaxIdentifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAdditionalTaxIdentifierWithHttpInfo(Long legalEntityId, Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteAdditionalTaxIdentifierValidateBeforeCall(legalEntityId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete AdditionalTaxIdentifier (asynchronously)
     * Delete an AdditionalTaxIdentifier
     * @param legalEntityId The id of the LegalEntity the AdditionalTaxIdentifier belongs to (required)
     * @param id The id of the AdditionalTaxIdentifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAdditionalTaxIdentifierAsync(Long legalEntityId, Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAdditionalTaxIdentifierValidateBeforeCall(legalEntityId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdditionalTaxIdentifier
     * @param legalEntityId The id of the LegalEntity the AdditionalTaxIdentifier belongs to (required)
     * @param id The id of the AdditionalTaxIdentifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdditionalTaxIdentifierCall(Long legalEntityId, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/legal_entities/{legal_entity_id}/additional_tax_identifiers/{id}"
            .replace("{" + "legal_entity_id" + "}", localVarApiClient.escapeString(legalEntityId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdditionalTaxIdentifierValidateBeforeCall(Long legalEntityId, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling getAdditionalTaxIdentifier(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAdditionalTaxIdentifier(Async)");
        }

        return getAdditionalTaxIdentifierCall(legalEntityId, id, _callback);

    }

    /**
     * Get AdditionalTaxIdentifier
     * Get an AdditionalTaxIdentifier
     * @param legalEntityId The id of the LegalEntity the AdditionalTaxIdentifier belongs to (required)
     * @param id The id of the AdditionalTaxIdentifier (required)
     * @return AdditionalTaxIdentifier
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public AdditionalTaxIdentifier getAdditionalTaxIdentifier(Long legalEntityId, Long id) throws ApiException {
        ApiResponse<AdditionalTaxIdentifier> localVarResp = getAdditionalTaxIdentifierWithHttpInfo(legalEntityId, id);
        return localVarResp.getData();
    }

    /**
     * Get AdditionalTaxIdentifier
     * Get an AdditionalTaxIdentifier
     * @param legalEntityId The id of the LegalEntity the AdditionalTaxIdentifier belongs to (required)
     * @param id The id of the AdditionalTaxIdentifier (required)
     * @return ApiResponse&lt;AdditionalTaxIdentifier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdditionalTaxIdentifier> getAdditionalTaxIdentifierWithHttpInfo(Long legalEntityId, Long id) throws ApiException {
        okhttp3.Call localVarCall = getAdditionalTaxIdentifierValidateBeforeCall(legalEntityId, id, null);
        Type localVarReturnType = new TypeToken<AdditionalTaxIdentifier>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get AdditionalTaxIdentifier (asynchronously)
     * Get an AdditionalTaxIdentifier
     * @param legalEntityId The id of the LegalEntity the AdditionalTaxIdentifier belongs to (required)
     * @param id The id of the AdditionalTaxIdentifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdditionalTaxIdentifierAsync(Long legalEntityId, Long id, final ApiCallback<AdditionalTaxIdentifier> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdditionalTaxIdentifierValidateBeforeCall(legalEntityId, id, _callback);
        Type localVarReturnType = new TypeToken<AdditionalTaxIdentifier>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAdditionalTaxIdentifier
     * @param legalEntityId The id of the LegalEntity the AdditionalTaxIdentifier belongs to (required)
     * @param id The id of the AdditionalTaxIdentifier to be updated (required)
     * @param additionalTaxIdentifierUpdate AdditionalTaxIdentifier to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdditionalTaxIdentifierCall(Long legalEntityId, Long id, AdditionalTaxIdentifierUpdate additionalTaxIdentifierUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = additionalTaxIdentifierUpdate;

        // create path and map variables
        String localVarPath = "/legal_entities/{legal_entity_id}/additional_tax_identifiers/{id}"
            .replace("{" + "legal_entity_id" + "}", localVarApiClient.escapeString(legalEntityId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAdditionalTaxIdentifierValidateBeforeCall(Long legalEntityId, Long id, AdditionalTaxIdentifierUpdate additionalTaxIdentifierUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling updateAdditionalTaxIdentifier(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateAdditionalTaxIdentifier(Async)");
        }

        // verify the required parameter 'additionalTaxIdentifierUpdate' is set
        if (additionalTaxIdentifierUpdate == null) {
            throw new ApiException("Missing the required parameter 'additionalTaxIdentifierUpdate' when calling updateAdditionalTaxIdentifier(Async)");
        }

        return updateAdditionalTaxIdentifierCall(legalEntityId, id, additionalTaxIdentifierUpdate, _callback);

    }

    /**
     * Update AdditionalTaxIdentifier
     * Update an AdditionalTaxIdentifier
     * @param legalEntityId The id of the LegalEntity the AdditionalTaxIdentifier belongs to (required)
     * @param id The id of the AdditionalTaxIdentifier to be updated (required)
     * @param additionalTaxIdentifierUpdate AdditionalTaxIdentifier to update (required)
     * @return AdditionalTaxIdentifier
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public AdditionalTaxIdentifier updateAdditionalTaxIdentifier(Long legalEntityId, Long id, AdditionalTaxIdentifierUpdate additionalTaxIdentifierUpdate) throws ApiException {
        ApiResponse<AdditionalTaxIdentifier> localVarResp = updateAdditionalTaxIdentifierWithHttpInfo(legalEntityId, id, additionalTaxIdentifierUpdate);
        return localVarResp.getData();
    }

    /**
     * Update AdditionalTaxIdentifier
     * Update an AdditionalTaxIdentifier
     * @param legalEntityId The id of the LegalEntity the AdditionalTaxIdentifier belongs to (required)
     * @param id The id of the AdditionalTaxIdentifier to be updated (required)
     * @param additionalTaxIdentifierUpdate AdditionalTaxIdentifier to update (required)
     * @return ApiResponse&lt;AdditionalTaxIdentifier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdditionalTaxIdentifier> updateAdditionalTaxIdentifierWithHttpInfo(Long legalEntityId, Long id, AdditionalTaxIdentifierUpdate additionalTaxIdentifierUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateAdditionalTaxIdentifierValidateBeforeCall(legalEntityId, id, additionalTaxIdentifierUpdate, null);
        Type localVarReturnType = new TypeToken<AdditionalTaxIdentifier>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update AdditionalTaxIdentifier (asynchronously)
     * Update an AdditionalTaxIdentifier
     * @param legalEntityId The id of the LegalEntity the AdditionalTaxIdentifier belongs to (required)
     * @param id The id of the AdditionalTaxIdentifier to be updated (required)
     * @param additionalTaxIdentifierUpdate AdditionalTaxIdentifier to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdditionalTaxIdentifierAsync(Long legalEntityId, Long id, AdditionalTaxIdentifierUpdate additionalTaxIdentifierUpdate, final ApiCallback<AdditionalTaxIdentifier> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAdditionalTaxIdentifierValidateBeforeCall(legalEntityId, id, additionalTaxIdentifierUpdate, _callback);
        Type localVarReturnType = new TypeToken<AdditionalTaxIdentifier>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
