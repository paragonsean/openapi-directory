/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A reference to a document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Reference {
  public static final String SERIALIZED_NAME_DOCUMENT_ID = "documentId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private String documentId;

  /**
   * The type of the referenced document. The following types are supported: ++++ &lt;ul&gt;    &lt;li&gt;        &lt;b&gt;purchase_order&lt;/b&gt; (document level, Invoice + Order)        &lt;p&gt;A reference to an order for this document, assigned by the buyer. Note that this often is a key field, since many receivers of invoices will use this field to automatically match the invoice to an order they placed. Many receivers refuse invoices that cannot be automatically matched, in particular government agencies. So it is highly recommended to fill this field whenever possible.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;billing&lt;/b&gt; (document level, Invoice)        &lt;p&gt;A reference to a billing document. For instance, credit notes may refer to an invoice they are a credit note for.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;sales_order&lt;/b&gt; (document level, Invoice + Order)        &lt;p&gt;A reference to an order for this document, assigned by the seller.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;buyer_reference&lt;/b&gt; (document level, Invoice, Order)        &lt;p&gt;The buyer&#39;s reference. Used for internal routing by the receiver. For orders, this becomes the customer reference which the receiver of the order should put back in the buyer reference field in the invoice.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;contract&lt;/b&gt; (document level, Invoice + Order)        &lt;p&gt;A reference to a contract or framework agreement that this document relates to.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;despatch_advice&lt;/b&gt; (document level, Invoice)        &lt;p&gt;A reference to a despatch advice for this document. In the FatturaPA, this is what will become the DDT.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;originator&lt;/b&gt; (document level, Invoice + Order)        &lt;p&gt;A reference to an originator document for this invoice.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;receipt&lt;/b&gt; (document level, Invoice)        &lt;p&gt;A reference to a receipt document for this document.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;project&lt;/b&gt; (document level, Invoice)        &lt;p&gt;A reference to a project document for this document.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;quotation&lt;/b&gt; (document level, Order)        &lt;p&gt;A reference to a quotation document for this document.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;payment_url&lt;/b&gt; (document level, Invoice)        &lt;p&gt;A to a payment URL for the invoice.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;item_classification_code&lt;/b&gt; (line level)        &lt;p&gt;A reference to a commodity classification / item classification code for this line.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;item_commodity_code&lt;/b&gt; (line level)        &lt;p&gt;A reference to a commodity classification / commodity code for this line.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;line_document_reference&lt;/b&gt; (line level)        &lt;p&gt;A reference to another document for this line.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;line_standard_item_identification&lt;/b&gt; (line level)        &lt;p&gt;A standard item identification.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;line_sellers_item_identification&lt;/b&gt; (line level)        &lt;p&gt;The seller&#39;s item identification.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;line_buyers_item_identification&lt;/b&gt; (line level)        &lt;p&gt;The buyer&#39;s item identification.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;item_specification&lt;/b&gt; (line level)        &lt;p&gt;Referece to an item specification document&lt;/p&gt;    &lt;/li&gt;&lt;/ul&gt; ++++ 
   */
  @JsonAdapter(DocumentTypeEnum.Adapter.class)
  public enum DocumentTypeEnum {
    PURCHASE_ORDER("purchase_order"),
    
    BUYER_REFERENCE("buyer_reference"),
    
    BILLING("billing"),
    
    SALES_ORDER("sales_order"),
    
    CONTRACT("contract"),
    
    DESPATCH_ADVICE("despatch_advice"),
    
    ORIGINATOR("originator"),
    
    RECEIPT("receipt"),
    
    PROJECT("project"),
    
    QUOTATION("quotation"),
    
    PAYMENT_URL("payment_url"),
    
    ITEM_CLASSIFICATION_CODE("item_classification_code"),
    
    ITEM_COMMODITY_CODE("item_commodity_code"),
    
    LINE_DOCUMENT_REFERENCE("line_document_reference"),
    
    LINE_STANDARD_ITEM_IDENTIFICATION("line_standard_item_identification"),
    
    LINE_SELLERS_ITEM_IDENTIFICATION("line_sellers_item_identification"),
    
    LINE_BUYERS_ITEM_IDENTIFICATION("line_buyers_item_identification"),
    
    ITEM_SPECIFICATION("item_specification");

    private String value;

    DocumentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentTypeEnum fromValue(String value) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocumentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private DocumentTypeEnum documentType;

  public static final String SERIALIZED_NAME_ISSUE_DATE = "issueDate";
  @SerializedName(SERIALIZED_NAME_ISSUE_DATE)
  private String issueDate;

  public static final String SERIALIZED_NAME_LINE_ID = "lineId";
  @SerializedName(SERIALIZED_NAME_LINE_ID)
  private String lineId;

  public Reference() {
  }

  public Reference documentId(String documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * The id of the referenced document.
   * @return documentId
   */
  @javax.annotation.Nullable
  public String getDocumentId() {
    return documentId;
  }

  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }


  public Reference documentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * The type of the referenced document. The following types are supported: ++++ &lt;ul&gt;    &lt;li&gt;        &lt;b&gt;purchase_order&lt;/b&gt; (document level, Invoice + Order)        &lt;p&gt;A reference to an order for this document, assigned by the buyer. Note that this often is a key field, since many receivers of invoices will use this field to automatically match the invoice to an order they placed. Many receivers refuse invoices that cannot be automatically matched, in particular government agencies. So it is highly recommended to fill this field whenever possible.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;billing&lt;/b&gt; (document level, Invoice)        &lt;p&gt;A reference to a billing document. For instance, credit notes may refer to an invoice they are a credit note for.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;sales_order&lt;/b&gt; (document level, Invoice + Order)        &lt;p&gt;A reference to an order for this document, assigned by the seller.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;buyer_reference&lt;/b&gt; (document level, Invoice, Order)        &lt;p&gt;The buyer&#39;s reference. Used for internal routing by the receiver. For orders, this becomes the customer reference which the receiver of the order should put back in the buyer reference field in the invoice.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;contract&lt;/b&gt; (document level, Invoice + Order)        &lt;p&gt;A reference to a contract or framework agreement that this document relates to.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;despatch_advice&lt;/b&gt; (document level, Invoice)        &lt;p&gt;A reference to a despatch advice for this document. In the FatturaPA, this is what will become the DDT.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;originator&lt;/b&gt; (document level, Invoice + Order)        &lt;p&gt;A reference to an originator document for this invoice.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;receipt&lt;/b&gt; (document level, Invoice)        &lt;p&gt;A reference to a receipt document for this document.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;project&lt;/b&gt; (document level, Invoice)        &lt;p&gt;A reference to a project document for this document.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;quotation&lt;/b&gt; (document level, Order)        &lt;p&gt;A reference to a quotation document for this document.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;payment_url&lt;/b&gt; (document level, Invoice)        &lt;p&gt;A to a payment URL for the invoice.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;item_classification_code&lt;/b&gt; (line level)        &lt;p&gt;A reference to a commodity classification / item classification code for this line.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;item_commodity_code&lt;/b&gt; (line level)        &lt;p&gt;A reference to a commodity classification / commodity code for this line.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;line_document_reference&lt;/b&gt; (line level)        &lt;p&gt;A reference to another document for this line.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;line_standard_item_identification&lt;/b&gt; (line level)        &lt;p&gt;A standard item identification.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;line_sellers_item_identification&lt;/b&gt; (line level)        &lt;p&gt;The seller&#39;s item identification.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;line_buyers_item_identification&lt;/b&gt; (line level)        &lt;p&gt;The buyer&#39;s item identification.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;b&gt;item_specification&lt;/b&gt; (line level)        &lt;p&gt;Referece to an item specification document&lt;/p&gt;    &lt;/li&gt;&lt;/ul&gt; ++++ 
   * @return documentType
   */
  @javax.annotation.Nonnull
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }

  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }


  public Reference issueDate(String issueDate) {
    this.issueDate = issueDate;
    return this;
  }

  /**
   * The issue date of the referenced document.
   * @return issueDate
   */
  @javax.annotation.Nullable
  public String getIssueDate() {
    return issueDate;
  }

  public void setIssueDate(String issueDate) {
    this.issueDate = issueDate;
  }


  public Reference lineId(String lineId) {
    this.lineId = lineId;
    return this;
  }

  /**
   * The line in the referenced document.
   * @return lineId
   */
  @javax.annotation.Nullable
  public String getLineId() {
    return lineId;
  }

  public void setLineId(String lineId) {
    this.lineId = lineId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reference reference = (Reference) o;
    return Objects.equals(this.documentId, reference.documentId) &&
        Objects.equals(this.documentType, reference.documentType) &&
        Objects.equals(this.issueDate, reference.issueDate) &&
        Objects.equals(this.lineId, reference.lineId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentId, documentType, issueDate, lineId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reference {\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    issueDate: ").append(toIndentedString(issueDate)).append("\n");
    sb.append("    lineId: ").append(toIndentedString(lineId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentId");
    openapiFields.add("documentType");
    openapiFields.add("issueDate");
    openapiFields.add("lineId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("documentType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Reference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reference is not found in the empty JSON string", Reference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Reference.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("documentId") != null && !jsonObj.get("documentId").isJsonNull()) && !jsonObj.get("documentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentId").toString()));
      }
      if (!jsonObj.get("documentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentType").toString()));
      }
      // validate the required field `documentType`
      DocumentTypeEnum.validateJsonElement(jsonObj.get("documentType"));
      if ((jsonObj.get("issueDate") != null && !jsonObj.get("issueDate").isJsonNull()) && !jsonObj.get("issueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueDate").toString()));
      }
      if ((jsonObj.get("lineId") != null && !jsonObj.get("lineId").isJsonNull()) && !jsonObj.get("lineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reference.class));

       return (TypeAdapter<T>) new TypeAdapter<Reference>() {
           @Override
           public void write(JsonWriter out, Reference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Reference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Reference
   * @throws IOException if the JSON string is invalid with respect to Reference
   */
  public static Reference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reference.class);
  }

  /**
   * Convert an instance of Reference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

