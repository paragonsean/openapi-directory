/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.Invoice;
import org.openapitools.client.model.InvoiceData;
import org.openapitools.client.model.InvoiceRecipient;
import org.openapitools.client.model.Routing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DEPRECATED. The invoice you want Storecove to process, with some meta-data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvoiceSubmission {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<Attachment> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_PRIMARY_IMAGE = "createPrimaryImage";
  @SerializedName(SERIALIZED_NAME_CREATE_PRIMARY_IMAGE)
  private Boolean createPrimaryImage;

  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private String document;

  public static final String SERIALIZED_NAME_DOCUMENT_URL = "documentUrl";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_URL)
  private URI documentUrl;

  public static final String SERIALIZED_NAME_IDEMPOTENCY_GUID = "idempotencyGuid";
  @SerializedName(SERIALIZED_NAME_IDEMPOTENCY_GUID)
  private String idempotencyGuid;

  public static final String SERIALIZED_NAME_INVOICE = "invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  private Invoice invoice;

  public static final String SERIALIZED_NAME_INVOICE_DATA = "invoiceData";
  @SerializedName(SERIALIZED_NAME_INVOICE_DATA)
  private InvoiceData invoiceData;

  public static final String SERIALIZED_NAME_INVOICE_RECIPIENT = "invoiceRecipient";
  @SerializedName(SERIALIZED_NAME_INVOICE_RECIPIENT)
  private InvoiceRecipient invoiceRecipient;

  public static final String SERIALIZED_NAME_LEGAL_ENTITY_ID = "legalEntityId";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY_ID)
  private Integer legalEntityId;

  public static final String SERIALIZED_NAME_LEGAL_SUPPLIER_ID = "legalSupplierId";
  @SerializedName(SERIALIZED_NAME_LEGAL_SUPPLIER_ID)
  private Integer legalSupplierId;

  /**
   * DEPRECATED.
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    DIRECT("direct");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_ROUTING = "routing";
  @SerializedName(SERIALIZED_NAME_ROUTING)
  private Routing routing;

  public static final String SERIALIZED_NAME_SUPPLIER_ID = "supplierId";
  @SerializedName(SERIALIZED_NAME_SUPPLIER_ID)
  private Integer supplierId;

  public InvoiceSubmission() {
  }

  public InvoiceSubmission attachments(List<Attachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public InvoiceSubmission addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<Attachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<Attachment> attachments) {
    this.attachments = attachments;
  }


  public InvoiceSubmission createPrimaryImage(Boolean createPrimaryImage) {
    this.createPrimaryImage = createPrimaryImage;
    return this;
  }

  /**
   * DEPRECATED. In the future we will no longer support creating PDF invoices. Whether or not to create a primary image (PDF) if one is not provided. For customers who started from December 1st 2022, the default is false. For customers who started before that, the default is true.
   * @return createPrimaryImage
   */
  @javax.annotation.Nullable
  public Boolean getCreatePrimaryImage() {
    return createPrimaryImage;
  }

  public void setCreatePrimaryImage(Boolean createPrimaryImage) {
    this.createPrimaryImage = createPrimaryImage;
  }


  public InvoiceSubmission document(String document) {
    this.document = document;
    return this;
  }

  /**
   * DEPRECATED. Use attachments.
   * @return document
   */
  @javax.annotation.Nullable
  public String getDocument() {
    return document;
  }

  public void setDocument(String document) {
    this.document = document;
  }


  public InvoiceSubmission documentUrl(URI documentUrl) {
    this.documentUrl = documentUrl;
    return this;
  }

  /**
   * DEPRECATED. Use attachments.
   * @return documentUrl
   */
  @javax.annotation.Nullable
  public URI getDocumentUrl() {
    return documentUrl;
  }

  public void setDocumentUrl(URI documentUrl) {
    this.documentUrl = documentUrl;
  }


  public InvoiceSubmission idempotencyGuid(String idempotencyGuid) {
    this.idempotencyGuid = idempotencyGuid;
    return this;
  }

  /**
   * A guid that you generated for this InvoiceSubmission to achieve idempotency. If you submit multiple documents with the same idempotencyGuid, only the first one will be processed.
   * @return idempotencyGuid
   */
  @javax.annotation.Nullable
  public String getIdempotencyGuid() {
    return idempotencyGuid;
  }

  public void setIdempotencyGuid(String idempotencyGuid) {
    this.idempotencyGuid = idempotencyGuid;
  }


  public InvoiceSubmission invoice(Invoice invoice) {
    this.invoice = invoice;
    return this;
  }

  /**
   * Get invoice
   * @return invoice
   */
  @javax.annotation.Nullable
  public Invoice getInvoice() {
    return invoice;
  }

  public void setInvoice(Invoice invoice) {
    this.invoice = invoice;
  }


  public InvoiceSubmission invoiceData(InvoiceData invoiceData) {
    this.invoiceData = invoiceData;
    return this;
  }

  /**
   * Get invoiceData
   * @return invoiceData
   */
  @javax.annotation.Nullable
  public InvoiceData getInvoiceData() {
    return invoiceData;
  }

  public void setInvoiceData(InvoiceData invoiceData) {
    this.invoiceData = invoiceData;
  }


  public InvoiceSubmission invoiceRecipient(InvoiceRecipient invoiceRecipient) {
    this.invoiceRecipient = invoiceRecipient;
    return this;
  }

  /**
   * Get invoiceRecipient
   * @return invoiceRecipient
   */
  @javax.annotation.Nullable
  public InvoiceRecipient getInvoiceRecipient() {
    return invoiceRecipient;
  }

  public void setInvoiceRecipient(InvoiceRecipient invoiceRecipient) {
    this.invoiceRecipient = invoiceRecipient;
  }


  public InvoiceSubmission legalEntityId(Integer legalEntityId) {
    this.legalEntityId = legalEntityId;
    return this;
  }

  /**
   * The id of the LegalEntity this invoice should be sent for.
   * @return legalEntityId
   */
  @javax.annotation.Nullable
  public Integer getLegalEntityId() {
    return legalEntityId;
  }

  public void setLegalEntityId(Integer legalEntityId) {
    this.legalEntityId = legalEntityId;
  }


  public InvoiceSubmission legalSupplierId(Integer legalSupplierId) {
    this.legalSupplierId = legalSupplierId;
    return this;
  }

  /**
   * DEPRECATED. Use legalEntityId
   * @return legalSupplierId
   */
  @javax.annotation.Nullable
  public Integer getLegalSupplierId() {
    return legalSupplierId;
  }

  public void setLegalSupplierId(Integer legalSupplierId) {
    this.legalSupplierId = legalSupplierId;
  }


  public InvoiceSubmission mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * DEPRECATED.
   * @return mode
   */
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public InvoiceSubmission routing(Routing routing) {
    this.routing = routing;
    return this;
  }

  /**
   * Get routing
   * @return routing
   */
  @javax.annotation.Nullable
  public Routing getRouting() {
    return routing;
  }

  public void setRouting(Routing routing) {
    this.routing = routing;
  }


  public InvoiceSubmission supplierId(Integer supplierId) {
    this.supplierId = supplierId;
    return this;
  }

  /**
   * DEPRECATED.
   * @return supplierId
   */
  @javax.annotation.Nullable
  public Integer getSupplierId() {
    return supplierId;
  }

  public void setSupplierId(Integer supplierId) {
    this.supplierId = supplierId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceSubmission invoiceSubmission = (InvoiceSubmission) o;
    return Objects.equals(this.attachments, invoiceSubmission.attachments) &&
        Objects.equals(this.createPrimaryImage, invoiceSubmission.createPrimaryImage) &&
        Objects.equals(this.document, invoiceSubmission.document) &&
        Objects.equals(this.documentUrl, invoiceSubmission.documentUrl) &&
        Objects.equals(this.idempotencyGuid, invoiceSubmission.idempotencyGuid) &&
        Objects.equals(this.invoice, invoiceSubmission.invoice) &&
        Objects.equals(this.invoiceData, invoiceSubmission.invoiceData) &&
        Objects.equals(this.invoiceRecipient, invoiceSubmission.invoiceRecipient) &&
        Objects.equals(this.legalEntityId, invoiceSubmission.legalEntityId) &&
        Objects.equals(this.legalSupplierId, invoiceSubmission.legalSupplierId) &&
        Objects.equals(this.mode, invoiceSubmission.mode) &&
        Objects.equals(this.routing, invoiceSubmission.routing) &&
        Objects.equals(this.supplierId, invoiceSubmission.supplierId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, createPrimaryImage, document, documentUrl, idempotencyGuid, invoice, invoiceData, invoiceRecipient, legalEntityId, legalSupplierId, mode, routing, supplierId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceSubmission {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    createPrimaryImage: ").append(toIndentedString(createPrimaryImage)).append("\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    documentUrl: ").append(toIndentedString(documentUrl)).append("\n");
    sb.append("    idempotencyGuid: ").append(toIndentedString(idempotencyGuid)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    invoiceData: ").append(toIndentedString(invoiceData)).append("\n");
    sb.append("    invoiceRecipient: ").append(toIndentedString(invoiceRecipient)).append("\n");
    sb.append("    legalEntityId: ").append(toIndentedString(legalEntityId)).append("\n");
    sb.append("    legalSupplierId: ").append(toIndentedString(legalSupplierId)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    routing: ").append(toIndentedString(routing)).append("\n");
    sb.append("    supplierId: ").append(toIndentedString(supplierId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachments");
    openapiFields.add("createPrimaryImage");
    openapiFields.add("document");
    openapiFields.add("documentUrl");
    openapiFields.add("idempotencyGuid");
    openapiFields.add("invoice");
    openapiFields.add("invoiceData");
    openapiFields.add("invoiceRecipient");
    openapiFields.add("legalEntityId");
    openapiFields.add("legalSupplierId");
    openapiFields.add("mode");
    openapiFields.add("routing");
    openapiFields.add("supplierId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceSubmission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceSubmission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceSubmission is not found in the empty JSON string", InvoiceSubmission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceSubmission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceSubmission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            Attachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) && !jsonObj.get("document").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document").toString()));
      }
      if ((jsonObj.get("documentUrl") != null && !jsonObj.get("documentUrl").isJsonNull()) && !jsonObj.get("documentUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentUrl").toString()));
      }
      if ((jsonObj.get("idempotencyGuid") != null && !jsonObj.get("idempotencyGuid").isJsonNull()) && !jsonObj.get("idempotencyGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idempotencyGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idempotencyGuid").toString()));
      }
      // validate the optional field `invoice`
      if (jsonObj.get("invoice") != null && !jsonObj.get("invoice").isJsonNull()) {
        Invoice.validateJsonElement(jsonObj.get("invoice"));
      }
      // validate the optional field `invoiceData`
      if (jsonObj.get("invoiceData") != null && !jsonObj.get("invoiceData").isJsonNull()) {
        InvoiceData.validateJsonElement(jsonObj.get("invoiceData"));
      }
      // validate the optional field `invoiceRecipient`
      if (jsonObj.get("invoiceRecipient") != null && !jsonObj.get("invoiceRecipient").isJsonNull()) {
        InvoiceRecipient.validateJsonElement(jsonObj.get("invoiceRecipient"));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      // validate the optional field `routing`
      if (jsonObj.get("routing") != null && !jsonObj.get("routing").isJsonNull()) {
        Routing.validateJsonElement(jsonObj.get("routing"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceSubmission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceSubmission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceSubmission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceSubmission.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceSubmission>() {
           @Override
           public void write(JsonWriter out, InvoiceSubmission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceSubmission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceSubmission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceSubmission
   * @throws IOException if the JSON string is invalid with respect to InvoiceSubmission
   */
  public static InvoiceSubmission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceSubmission.class);
  }

  /**
   * Convert an instance of InvoiceSubmission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

