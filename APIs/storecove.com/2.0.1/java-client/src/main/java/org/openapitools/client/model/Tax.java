/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.Country;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Tax
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Tax {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  /**
   * The allowed values depend on the country of the tax: ++++ &lt;ul&gt;    &lt;li&gt;        AU:        &lt;ul&gt;            &lt;li&gt;standard (10%, 5.5%)&lt;/li&gt;            &lt;li&gt;zero_rated (0%)&lt;/li&gt;            &lt;li&gt;export (0%)&lt;/li&gt;            &lt;li&gt;exempt (0%)&lt;/li&gt;            &lt;li&gt;outside_scope (0%)&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        EU:        &lt;ul&gt;            &lt;li&gt;standard (percentages country dependent)&lt;/li&gt;            &lt;li&gt;zero_rated (0%)&lt;/li&gt;            &lt;li&gt;reverse_charge (0%)&lt;/li&gt;            &lt;li&gt;intra_community (0%)&lt;/li&gt;            &lt;li&gt;export (0%)&lt;/li&gt;            &lt;li&gt;exempt (0%)&lt;/li&gt;            &lt;li&gt;outside_scope (0%)&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        IN:        &lt;ul&gt;            &lt;li&gt;igst (28%, 18%, 12%, 5%, 3%, 0.25%)&lt;/li&gt;            &lt;li&gt;sgst (14%, 9%, 6%, 2.5%, 1.5%&lt;/li&gt;            &lt;li&gt;cgst (14%, 9%, 6%, 2.5%, 1.5%&lt;/li&gt;            &lt;li&gt;cess (any percentage)&lt;/li&gt;            &lt;li&gt;state_cess (any percentage)&lt;/li&gt;            &lt;li&gt;reverse_charge (0%)&lt;/li&gt;            &lt;li&gt;export (0%)&lt;/li&gt;            &lt;li&gt;exempt (0%)&lt;/li&gt;            &lt;li&gt;outside_scope (0%)&lt;/li&gt;            &lt;li&gt;zero_rated (0%)&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        JP:        &lt;ul&gt;            &lt;li&gt;standard (10%, 8%)&lt;/li&gt;            &lt;li&gt;export (0%)&lt;/li&gt;            &lt;li&gt;exempt (0%)&lt;/li&gt;            &lt;li&gt;outside_scope (0%)&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        MY:        &lt;ul&gt;            &lt;li&gt;standard (10%, 6%, 5%)&lt;/li&gt;            &lt;li&gt;zero_rated (0%)&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        NZ:        &lt;ul&gt;            &lt;li&gt;standard (15%)&lt;/li&gt;            &lt;li&gt;zero_rated (0%)&lt;/li&gt;            &lt;li&gt;export (0%)&lt;/li&gt;            &lt;li&gt;exempt (0%)&lt;/li&gt;            &lt;li&gt;outside_scope (0%)&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        SG:        &lt;ul&gt;            &lt;li&gt;standard (7%; 8% from 2023-01-01; 9% from 2024-01-01)&lt;/li&gt;            &lt;li&gt;deemed_supply (7%; 8% from 2023-01-01; 9% from 2024-01-01)&lt;/li&gt;            &lt;li&gt;srca_c (7%; 8% from 2023-01-01; 9% from 2024-01-01)&lt;/li&gt;            &lt;li&gt;srovr (7%; NOT to be used from 2023-01-01)&lt;/li&gt;            &lt;li&gt;srovr_rs (8% from 2023-01-01; 9% from 2024-01-01)&lt;/li&gt;            &lt;li&gt;srovr_lvg (8% from 2023-01-01; 9% from 2024-01-01)&lt;/li&gt;            &lt;li&gt;srlvg (8% from 2023-01-01; 9% from 2024-01-01)&lt;/li&gt;            &lt;li&gt;srca_s (0%)&lt;/li&gt;            &lt;li&gt;outside_scope (0%)&lt;/li&gt;            &lt;li&gt;not_registered (0%)&lt;/li&gt;            &lt;li&gt;zero_rated (0%)&lt;/li&gt;            &lt;li&gt;regulation33_exempt (0%)&lt;/li&gt;            &lt;li&gt;nonregulation33_exempt (0%)&lt;/li&gt;            &lt;li&gt;export (0%)&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        US:        &lt;ul&gt;            &lt;li&gt;standard (any percentage)&lt;/li&gt;            &lt;li&gt;export (0%)&lt;/li&gt;            &lt;li&gt;exempt (0%)&lt;/li&gt;            &lt;li&gt;outside_scope (0%)&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;&lt;/ul&gt; ++++
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    STANDARD("standard"),
    
    ZERO_RATED("zero_rated"),
    
    REVERSE_CHARGE("reverse_charge"),
    
    INTRA_COMMUNITY("intra_community"),
    
    EXEMPT("exempt"),
    
    EXPORT("export"),
    
    OUTSIDE_SCOPE("outside_scope"),
    
    REGULATION33_EXEMPT("regulation33_exempt"),
    
    NONREGULATION33_EXEMPT("nonregulation33_exempt"),
    
    DEEMED_SUPPLY("deemed_supply"),
    
    SRCA_S("srca_s"),
    
    SRCA_C("srca_c"),
    
    NOT_REGISTERED("not_registered"),
    
    IGST("igst"),
    
    CGST("cgst"),
    
    SGST("sgst"),
    
    CESS("cess"),
    
    STATE_CESS("state_cess"),
    
    SROVR("srovr"),
    
    SROVR_RS("srovr_rs"),
    
    SROVR_LVG("srovr_lvg"),
    
    SRLVG("srlvg");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private Country country;

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private BigDecimal percentage;

  public Tax() {
  }

  public Tax amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of tax. Mandatory if taxSystem &#x3D;&#x3D; &#39;tax_line_amounts&#39;. However, it is best to use taxSystem tax_line_percentages and provide only the percentage, not the actual amount. The amount is then provided at the invoice level, in the taxSubtotals element.
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public Tax category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * The allowed values depend on the country of the tax: ++++ &lt;ul&gt;    &lt;li&gt;        AU:        &lt;ul&gt;            &lt;li&gt;standard (10%, 5.5%)&lt;/li&gt;            &lt;li&gt;zero_rated (0%)&lt;/li&gt;            &lt;li&gt;export (0%)&lt;/li&gt;            &lt;li&gt;exempt (0%)&lt;/li&gt;            &lt;li&gt;outside_scope (0%)&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        EU:        &lt;ul&gt;            &lt;li&gt;standard (percentages country dependent)&lt;/li&gt;            &lt;li&gt;zero_rated (0%)&lt;/li&gt;            &lt;li&gt;reverse_charge (0%)&lt;/li&gt;            &lt;li&gt;intra_community (0%)&lt;/li&gt;            &lt;li&gt;export (0%)&lt;/li&gt;            &lt;li&gt;exempt (0%)&lt;/li&gt;            &lt;li&gt;outside_scope (0%)&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        IN:        &lt;ul&gt;            &lt;li&gt;igst (28%, 18%, 12%, 5%, 3%, 0.25%)&lt;/li&gt;            &lt;li&gt;sgst (14%, 9%, 6%, 2.5%, 1.5%&lt;/li&gt;            &lt;li&gt;cgst (14%, 9%, 6%, 2.5%, 1.5%&lt;/li&gt;            &lt;li&gt;cess (any percentage)&lt;/li&gt;            &lt;li&gt;state_cess (any percentage)&lt;/li&gt;            &lt;li&gt;reverse_charge (0%)&lt;/li&gt;            &lt;li&gt;export (0%)&lt;/li&gt;            &lt;li&gt;exempt (0%)&lt;/li&gt;            &lt;li&gt;outside_scope (0%)&lt;/li&gt;            &lt;li&gt;zero_rated (0%)&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        JP:        &lt;ul&gt;            &lt;li&gt;standard (10%, 8%)&lt;/li&gt;            &lt;li&gt;export (0%)&lt;/li&gt;            &lt;li&gt;exempt (0%)&lt;/li&gt;            &lt;li&gt;outside_scope (0%)&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        MY:        &lt;ul&gt;            &lt;li&gt;standard (10%, 6%, 5%)&lt;/li&gt;            &lt;li&gt;zero_rated (0%)&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        NZ:        &lt;ul&gt;            &lt;li&gt;standard (15%)&lt;/li&gt;            &lt;li&gt;zero_rated (0%)&lt;/li&gt;            &lt;li&gt;export (0%)&lt;/li&gt;            &lt;li&gt;exempt (0%)&lt;/li&gt;            &lt;li&gt;outside_scope (0%)&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        SG:        &lt;ul&gt;            &lt;li&gt;standard (7%; 8% from 2023-01-01; 9% from 2024-01-01)&lt;/li&gt;            &lt;li&gt;deemed_supply (7%; 8% from 2023-01-01; 9% from 2024-01-01)&lt;/li&gt;            &lt;li&gt;srca_c (7%; 8% from 2023-01-01; 9% from 2024-01-01)&lt;/li&gt;            &lt;li&gt;srovr (7%; NOT to be used from 2023-01-01)&lt;/li&gt;            &lt;li&gt;srovr_rs (8% from 2023-01-01; 9% from 2024-01-01)&lt;/li&gt;            &lt;li&gt;srovr_lvg (8% from 2023-01-01; 9% from 2024-01-01)&lt;/li&gt;            &lt;li&gt;srlvg (8% from 2023-01-01; 9% from 2024-01-01)&lt;/li&gt;            &lt;li&gt;srca_s (0%)&lt;/li&gt;            &lt;li&gt;outside_scope (0%)&lt;/li&gt;            &lt;li&gt;not_registered (0%)&lt;/li&gt;            &lt;li&gt;zero_rated (0%)&lt;/li&gt;            &lt;li&gt;regulation33_exempt (0%)&lt;/li&gt;            &lt;li&gt;nonregulation33_exempt (0%)&lt;/li&gt;            &lt;li&gt;export (0%)&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        US:        &lt;ul&gt;            &lt;li&gt;standard (any percentage)&lt;/li&gt;            &lt;li&gt;export (0%)&lt;/li&gt;            &lt;li&gt;exempt (0%)&lt;/li&gt;            &lt;li&gt;outside_scope (0%)&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;&lt;/ul&gt; ++++
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public Tax country(Country country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nonnull
  public Country getCountry() {
    return country;
  }

  public void setCountry(Country country) {
    this.country = country;
  }


  public Tax percentage(BigDecimal percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * The percentage Tax. This should be a valid Tax percentage in the country at the time of the issueDate of this invoice. Mandatory if taxSystem &#x3D;&#x3D; &#39;tax_line_percentages&#39;
   * @return percentage
   */
  @javax.annotation.Nullable
  public BigDecimal getPercentage() {
    return percentage;
  }

  public void setPercentage(BigDecimal percentage) {
    this.percentage = percentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tax tax = (Tax) o;
    return Objects.equals(this.amount, tax.amount) &&
        Objects.equals(this.category, tax.category) &&
        Objects.equals(this.country, tax.country) &&
        Objects.equals(this.percentage, tax.percentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, category, country, percentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tax {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("category");
    openapiFields.add("country");
    openapiFields.add("percentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("country");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Tax
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Tax.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Tax is not found in the empty JSON string", Tax.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Tax.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Tax` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Tax.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      // validate the required field `country`
      Country.validateJsonElement(jsonObj.get("country"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Tax.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Tax' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Tax> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Tax.class));

       return (TypeAdapter<T>) new TypeAdapter<Tax>() {
           @Override
           public void write(JsonWriter out, Tax value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Tax read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Tax given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Tax
   * @throws IOException if the JSON string is invalid with respect to Tax
   */
  public static Tax fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Tax.class);
  }

  /**
   * Convert an instance of Tax to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

