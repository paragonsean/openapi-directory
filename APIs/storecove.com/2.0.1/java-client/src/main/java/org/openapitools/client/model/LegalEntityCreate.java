/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Country;
import org.openapitools.client.model.Rea;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LegalEntityCreate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LegalEntityCreate {
  /**
   * A document type to advertise.
   */
  @JsonAdapter(AdvertisementsEnum.Adapter.class)
  public enum AdvertisementsEnum {
    INVOICE("invoice"),
    
    INVOICE_RESPONSE("invoice_response"),
    
    ORDER("order"),
    
    ORDERING("ordering"),
    
    ORDER_RESPONSE("order_response");

    private String value;

    AdvertisementsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdvertisementsEnum fromValue(String value) {
      for (AdvertisementsEnum b : AdvertisementsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdvertisementsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdvertisementsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdvertisementsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdvertisementsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdvertisementsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADVERTISEMENTS = "advertisements";
  @SerializedName(SERIALIZED_NAME_ADVERTISEMENTS)
  private List<AdvertisementsEnum> advertisements = new ArrayList<>(Arrays.asList(AdvertisementsEnum.INVOICE));

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private Country country;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_LINE1 = "line1";
  @SerializedName(SERIALIZED_NAME_LINE1)
  private String line1;

  public static final String SERIALIZED_NAME_LINE2 = "line2";
  @SerializedName(SERIALIZED_NAME_LINE2)
  private String line2;

  public static final String SERIALIZED_NAME_PARTY_NAME = "party_name";
  @SerializedName(SERIALIZED_NAME_PARTY_NAME)
  private String partyName;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public = true;

  public static final String SERIALIZED_NAME_REA = "rea";
  @SerializedName(SERIALIZED_NAME_REA)
  private Rea rea;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenant_id";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_THIRD_PARTY_PASSWORD = "third_party_password";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_PASSWORD)
  private String thirdPartyPassword;

  public static final String SERIALIZED_NAME_THIRD_PARTY_USERNAME = "third_party_username";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_USERNAME)
  private String thirdPartyUsername;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public LegalEntityCreate() {
  }

  public LegalEntityCreate advertisements(List<AdvertisementsEnum> advertisements) {
    this.advertisements = advertisements;
    return this;
  }

  public LegalEntityCreate addAdvertisementsItem(AdvertisementsEnum advertisementsItem) {
    if (this.advertisements == null) {
      this.advertisements = new ArrayList<>(Arrays.asList(AdvertisementsEnum.INVOICE));
    }
    this.advertisements.add(advertisementsItem);
    return this;
  }

  /**
   * A list of document types to advertise. Use if this LegalEntity needs the ability to receive more than only invoice documents.
   * @return advertisements
   */
  @javax.annotation.Nullable
  public List<AdvertisementsEnum> getAdvertisements() {
    return advertisements;
  }

  public void setAdvertisements(List<AdvertisementsEnum> advertisements) {
    this.advertisements = advertisements;
  }


  public LegalEntityCreate city(String city) {
    this.city = city;
    return this;
  }

  /**
   * The city.
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public LegalEntityCreate country(Country country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nonnull
  public Country getCountry() {
    return country;
  }

  public void setCountry(Country country) {
    this.country = country;
  }


  public LegalEntityCreate county(String county) {
    this.county = county;
    return this;
  }

  /**
   * County, if applicable
   * @return county
   */
  @javax.annotation.Nullable
  public String getCounty() {
    return county;
  }

  public void setCounty(String county) {
    this.county = county;
  }


  public LegalEntityCreate line1(String line1) {
    this.line1 = line1;
    return this;
  }

  /**
   * The first address line.
   * @return line1
   */
  @javax.annotation.Nonnull
  public String getLine1() {
    return line1;
  }

  public void setLine1(String line1) {
    this.line1 = line1;
  }


  public LegalEntityCreate line2(String line2) {
    this.line2 = line2;
    return this;
  }

  /**
   * The second address line, if applicable
   * @return line2
   */
  @javax.annotation.Nullable
  public String getLine2() {
    return line2;
  }

  public void setLine2(String line2) {
    this.line2 = line2;
  }


  public LegalEntityCreate partyName(String partyName) {
    this.partyName = partyName;
    return this;
  }

  /**
   * The name of the company.
   * @return partyName
   */
  @javax.annotation.Nonnull
  public String getPartyName() {
    return partyName;
  }

  public void setPartyName(String partyName) {
    this.partyName = partyName;
  }


  public LegalEntityCreate _public(Boolean _public) {
    this._public = _public;
    return this;
  }

  /**
   * Whether or not this LegalEntity is public. Public means it will be entered into the PEPPOL directory at https://directory.peppol.eu/
   * @return _public
   */
  @javax.annotation.Nullable
  public Boolean getPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  public LegalEntityCreate rea(Rea rea) {
    this.rea = rea;
    return this;
  }

  /**
   * Get rea
   * @return rea
   */
  @javax.annotation.Nullable
  public Rea getRea() {
    return rea;
  }

  public void setRea(Rea rea) {
    this.rea = rea;
  }


  public LegalEntityCreate tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * The id of the tenant, to be used in case of single-tenant solutions that share webhook URLs. This property will included in webhook events.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public LegalEntityCreate thirdPartyPassword(String thirdPartyPassword) {
    this.thirdPartyPassword = thirdPartyPassword;
    return this;
  }

  /**
   * The password to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN LegalEntity.
   * @return thirdPartyPassword
   */
  @javax.annotation.Nullable
  public String getThirdPartyPassword() {
    return thirdPartyPassword;
  }

  public void setThirdPartyPassword(String thirdPartyPassword) {
    this.thirdPartyPassword = thirdPartyPassword;
  }


  public LegalEntityCreate thirdPartyUsername(String thirdPartyUsername) {
    this.thirdPartyUsername = thirdPartyUsername;
    return this;
  }

  /**
   * The username to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN LegalEntity.
   * @return thirdPartyUsername
   */
  @javax.annotation.Nullable
  public String getThirdPartyUsername() {
    return thirdPartyUsername;
  }

  public void setThirdPartyUsername(String thirdPartyUsername) {
    this.thirdPartyUsername = thirdPartyUsername;
  }


  public LegalEntityCreate zip(String zip) {
    this.zip = zip;
    return this;
  }

  /**
   * The zipcode.
   * @return zip
   */
  @javax.annotation.Nonnull
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalEntityCreate legalEntityCreate = (LegalEntityCreate) o;
    return Objects.equals(this.advertisements, legalEntityCreate.advertisements) &&
        Objects.equals(this.city, legalEntityCreate.city) &&
        Objects.equals(this.country, legalEntityCreate.country) &&
        Objects.equals(this.county, legalEntityCreate.county) &&
        Objects.equals(this.line1, legalEntityCreate.line1) &&
        Objects.equals(this.line2, legalEntityCreate.line2) &&
        Objects.equals(this.partyName, legalEntityCreate.partyName) &&
        Objects.equals(this._public, legalEntityCreate._public) &&
        Objects.equals(this.rea, legalEntityCreate.rea) &&
        Objects.equals(this.tenantId, legalEntityCreate.tenantId) &&
        Objects.equals(this.thirdPartyPassword, legalEntityCreate.thirdPartyPassword) &&
        Objects.equals(this.thirdPartyUsername, legalEntityCreate.thirdPartyUsername) &&
        Objects.equals(this.zip, legalEntityCreate.zip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertisements, city, country, county, line1, line2, partyName, _public, rea, tenantId, thirdPartyPassword, thirdPartyUsername, zip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalEntityCreate {\n");
    sb.append("    advertisements: ").append(toIndentedString(advertisements)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    line1: ").append(toIndentedString(line1)).append("\n");
    sb.append("    line2: ").append(toIndentedString(line2)).append("\n");
    sb.append("    partyName: ").append(toIndentedString(partyName)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    rea: ").append(toIndentedString(rea)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    thirdPartyPassword: ").append(toIndentedString(thirdPartyPassword)).append("\n");
    sb.append("    thirdPartyUsername: ").append(toIndentedString(thirdPartyUsername)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advertisements");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("county");
    openapiFields.add("line1");
    openapiFields.add("line2");
    openapiFields.add("party_name");
    openapiFields.add("public");
    openapiFields.add("rea");
    openapiFields.add("tenant_id");
    openapiFields.add("third_party_password");
    openapiFields.add("third_party_username");
    openapiFields.add("zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("line1");
    openapiRequiredFields.add("party_name");
    openapiRequiredFields.add("zip");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LegalEntityCreate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LegalEntityCreate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalEntityCreate is not found in the empty JSON string", LegalEntityCreate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LegalEntityCreate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LegalEntityCreate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LegalEntityCreate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("advertisements") != null && !jsonObj.get("advertisements").isJsonNull() && !jsonObj.get("advertisements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertisements` to be an array in the JSON string but got `%s`", jsonObj.get("advertisements").toString()));
      }
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      // validate the required field `country`
      Country.validateJsonElement(jsonObj.get("country"));
      if ((jsonObj.get("county") != null && !jsonObj.get("county").isJsonNull()) && !jsonObj.get("county").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county").toString()));
      }
      if (!jsonObj.get("line1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line1").toString()));
      }
      if ((jsonObj.get("line2") != null && !jsonObj.get("line2").isJsonNull()) && !jsonObj.get("line2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line2").toString()));
      }
      if (!jsonObj.get("party_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party_name").toString()));
      }
      // validate the optional field `rea`
      if (jsonObj.get("rea") != null && !jsonObj.get("rea").isJsonNull()) {
        Rea.validateJsonElement(jsonObj.get("rea"));
      }
      if ((jsonObj.get("tenant_id") != null && !jsonObj.get("tenant_id").isJsonNull()) && !jsonObj.get("tenant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant_id").toString()));
      }
      if ((jsonObj.get("third_party_password") != null && !jsonObj.get("third_party_password").isJsonNull()) && !jsonObj.get("third_party_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `third_party_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("third_party_password").toString()));
      }
      if ((jsonObj.get("third_party_username") != null && !jsonObj.get("third_party_username").isJsonNull()) && !jsonObj.get("third_party_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `third_party_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("third_party_username").toString()));
      }
      if (!jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalEntityCreate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalEntityCreate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalEntityCreate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalEntityCreate.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalEntityCreate>() {
           @Override
           public void write(JsonWriter out, LegalEntityCreate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalEntityCreate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LegalEntityCreate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LegalEntityCreate
   * @throws IOException if the JSON string is invalid with respect to LegalEntityCreate
   */
  public static LegalEntityCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalEntityCreate.class);
  }

  /**
   * Convert an instance of LegalEntityCreate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

