/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Administration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Administration {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LEGAL_ENTITY_ID = "legal_entity_id";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY_ID)
  private Long legalEntityId;

  /**
   * The version of the package.
   */
  @JsonAdapter(PackageVersionEnum.Adapter.class)
  public enum PackageVersionEnum {
    PEPPOL_BIS_V3("peppol_bis_v3"),
    
    AUNZ("aunz"),
    
    SG("sg");

    private String value;

    PackageVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PackageVersionEnum fromValue(String value) {
      for (PackageVersionEnum b : PackageVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PackageVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PackageVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PackageVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PackageVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PackageVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PACKAGE_VERSION = "package_version";
  @SerializedName(SERIALIZED_NAME_PACKAGE_VERSION)
  private PackageVersionEnum packageVersion;

  /**
   * How to package the purchase invoice.
   */
  @JsonAdapter(PackagingEnum.Adapter.class)
  public enum PackagingEnum {
    UBL("ubl");

    private String value;

    PackagingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PackagingEnum fromValue(String value) {
      for (PackagingEnum b : PackagingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PackagingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PackagingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PackagingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PackagingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PackagingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PACKAGING = "packaging";
  @SerializedName(SERIALIZED_NAME_PACKAGING)
  private PackagingEnum packaging;

  public static final String SERIALIZED_NAME_SENDER_EMAIL_IDENTITY_ID = "sender_email_identity_id";
  @SerializedName(SERIALIZED_NAME_SENDER_EMAIL_IDENTITY_ID)
  private Long senderEmailIdentityId;

  public Administration() {
  }

  public Administration email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address to send the received document to
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Administration id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * The Storecove assigned id for the Administration.
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Administration legalEntityId(Long legalEntityId) {
    this.legalEntityId = legalEntityId;
    return this;
  }

  /**
   * The LegalEntity the Administration belongs to.
   * @return legalEntityId
   */
  @javax.annotation.Nullable
  public Long getLegalEntityId() {
    return legalEntityId;
  }

  public void setLegalEntityId(Long legalEntityId) {
    this.legalEntityId = legalEntityId;
  }


  public Administration packageVersion(PackageVersionEnum packageVersion) {
    this.packageVersion = packageVersion;
    return this;
  }

  /**
   * The version of the package.
   * @return packageVersion
   */
  @javax.annotation.Nullable
  public PackageVersionEnum getPackageVersion() {
    return packageVersion;
  }

  public void setPackageVersion(PackageVersionEnum packageVersion) {
    this.packageVersion = packageVersion;
  }


  public Administration packaging(PackagingEnum packaging) {
    this.packaging = packaging;
    return this;
  }

  /**
   * How to package the purchase invoice.
   * @return packaging
   */
  @javax.annotation.Nullable
  public PackagingEnum getPackaging() {
    return packaging;
  }

  public void setPackaging(PackagingEnum packaging) {
    this.packaging = packaging;
  }


  public Administration senderEmailIdentityId(Long senderEmailIdentityId) {
    this.senderEmailIdentityId = senderEmailIdentityId;
    return this;
  }

  /**
   * The id of the SenderEmailIdentity. If not provided, the Storecove default sender will be used
   * @return senderEmailIdentityId
   */
  @javax.annotation.Nullable
  public Long getSenderEmailIdentityId() {
    return senderEmailIdentityId;
  }

  public void setSenderEmailIdentityId(Long senderEmailIdentityId) {
    this.senderEmailIdentityId = senderEmailIdentityId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Administration administration = (Administration) o;
    return Objects.equals(this.email, administration.email) &&
        Objects.equals(this.id, administration.id) &&
        Objects.equals(this.legalEntityId, administration.legalEntityId) &&
        Objects.equals(this.packageVersion, administration.packageVersion) &&
        Objects.equals(this.packaging, administration.packaging) &&
        Objects.equals(this.senderEmailIdentityId, administration.senderEmailIdentityId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, id, legalEntityId, packageVersion, packaging, senderEmailIdentityId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Administration {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    legalEntityId: ").append(toIndentedString(legalEntityId)).append("\n");
    sb.append("    packageVersion: ").append(toIndentedString(packageVersion)).append("\n");
    sb.append("    packaging: ").append(toIndentedString(packaging)).append("\n");
    sb.append("    senderEmailIdentityId: ").append(toIndentedString(senderEmailIdentityId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("id");
    openapiFields.add("legal_entity_id");
    openapiFields.add("package_version");
    openapiFields.add("packaging");
    openapiFields.add("sender_email_identity_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Administration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Administration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Administration is not found in the empty JSON string", Administration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Administration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Administration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("package_version") != null && !jsonObj.get("package_version").isJsonNull()) && !jsonObj.get("package_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_version").toString()));
      }
      // validate the optional field `package_version`
      if (jsonObj.get("package_version") != null && !jsonObj.get("package_version").isJsonNull()) {
        PackageVersionEnum.validateJsonElement(jsonObj.get("package_version"));
      }
      if ((jsonObj.get("packaging") != null && !jsonObj.get("packaging").isJsonNull()) && !jsonObj.get("packaging").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packaging` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packaging").toString()));
      }
      // validate the optional field `packaging`
      if (jsonObj.get("packaging") != null && !jsonObj.get("packaging").isJsonNull()) {
        PackagingEnum.validateJsonElement(jsonObj.get("packaging"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Administration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Administration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Administration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Administration.class));

       return (TypeAdapter<T>) new TypeAdapter<Administration>() {
           @Override
           public void write(JsonWriter out, Administration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Administration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Administration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Administration
   * @throws IOException if the JSON string is invalid with respect to Administration
   */
  public static Administration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Administration.class);
  }

  /**
   * Convert an instance of Administration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

