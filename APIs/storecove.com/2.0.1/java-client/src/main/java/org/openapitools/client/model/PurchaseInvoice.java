/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.PaymentMeansDEPRECATED;
import org.openapitools.client.model.PurchaseInvoiceAccountingDetails;
import org.openapitools.client.model.PurchaseInvoiceAllowanceCharge;
import org.openapitools.client.model.PurchaseInvoiceAttachment;
import org.openapitools.client.model.PurchaseInvoiceDelivery;
import org.openapitools.client.model.PurchaseInvoiceDocumentTotals;
import org.openapitools.client.model.PurchaseInvoiceInvoiceLine;
import org.openapitools.client.model.PurchaseInvoicePaymentMeans;
import org.openapitools.client.model.PurchaseInvoiceSender;
import org.openapitools.client.model.PurchaseInvoiceTaxSubtotal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PurchaseInvoice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PurchaseInvoice {
  public static final String SERIALIZED_NAME_ACCOUNTING = "accounting";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING)
  private PurchaseInvoiceAccountingDetails accounting;

  public static final String SERIALIZED_NAME_ACCOUNTING_COST = "accounting_cost";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING_COST)
  private String accountingCost;

  public static final String SERIALIZED_NAME_ALLOWANCE_CHARGE = "allowance_charge";
  @SerializedName(SERIALIZED_NAME_ALLOWANCE_CHARGE)
  private BigDecimal allowanceCharge;

  public static final String SERIALIZED_NAME_ALLOWANCE_CHARGES = "allowance_charges";
  @SerializedName(SERIALIZED_NAME_ALLOWANCE_CHARGES)
  private List<PurchaseInvoiceAllowanceCharge> allowanceCharges = new ArrayList<>();

  public static final String SERIALIZED_NAME_AMOUNT_INCLUDING_VAT = "amount_including_vat";
  @SerializedName(SERIALIZED_NAME_AMOUNT_INCLUDING_VAT)
  private BigDecimal amountIncludingVat;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<PurchaseInvoiceAttachment> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_BILLING_REFERENCE = "billing_reference";
  @SerializedName(SERIALIZED_NAME_BILLING_REFERENCE)
  private String billingReference;

  public static final String SERIALIZED_NAME_BUYER_REFERENCE = "buyer_reference";
  @SerializedName(SERIALIZED_NAME_BUYER_REFERENCE)
  private String buyerReference;

  public static final String SERIALIZED_NAME_CONTRACT_DOCUMENT_REFERENCE = "contract_document_reference";
  @SerializedName(SERIALIZED_NAME_CONTRACT_DOCUMENT_REFERENCE)
  private String contractDocumentReference;

  public static final String SERIALIZED_NAME_DELIVERY = "delivery";
  @SerializedName(SERIALIZED_NAME_DELIVERY)
  private PurchaseInvoiceDelivery delivery;

  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private String document;

  public static final String SERIALIZED_NAME_DOCUMENT_CURRENCY_CODE = "document_currency_code";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_CURRENCY_CODE)
  private String documentCurrencyCode;

  public static final String SERIALIZED_NAME_DOCUMENT_TOTALS = "document_totals";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TOTALS)
  private PurchaseInvoiceDocumentTotals documentTotals;

  /**
   * The type of document. Only \&quot;invoice\&quot; for now.
   */
  @JsonAdapter(DocumentTypeEnum.Adapter.class)
  public enum DocumentTypeEnum {
    INVOICE("invoice");

    private String value;

    DocumentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentTypeEnum fromValue(String value) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocumentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "document_type";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private DocumentTypeEnum documentType;

  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private String dueDate;

  public static final String SERIALIZED_NAME_EXTERNAL_KEY = "external_key";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_KEY)
  private String externalKey;

  public static final String SERIALIZED_NAME_EXTERNAL_USER_ID = "external_user_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_USER_ID)
  private String externalUserId;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private UUID guid;

  public static final String SERIALIZED_NAME_INVOICE_LINES = "invoice_lines";
  @SerializedName(SERIALIZED_NAME_INVOICE_LINES)
  private List<PurchaseInvoiceInvoiceLine> invoiceLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoice_number";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  /**
   * The type of invoice.
   */
  @JsonAdapter(InvoiceTypeEnum.Adapter.class)
  public enum InvoiceTypeEnum {
    INVOICE("invoice"),
    
    CREDITNOTE("creditnote"),
    
    CORRECTIONINVOICE("correctioninvoice");

    private String value;

    InvoiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvoiceTypeEnum fromValue(String value) {
      for (InvoiceTypeEnum b : InvoiceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvoiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvoiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvoiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvoiceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InvoiceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVOICE_TYPE = "invoice_type";
  @SerializedName(SERIALIZED_NAME_INVOICE_TYPE)
  private InvoiceTypeEnum invoiceType;

  public static final String SERIALIZED_NAME_ISSUE_DATE = "issue_date";
  @SerializedName(SERIALIZED_NAME_ISSUE_DATE)
  private String issueDate;

  public static final String SERIALIZED_NAME_LEGAL_ENTITY_ID = "legal_entity_id";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY_ID)
  private Long legalEntityId;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_ORDER_REFERENCE = "order_reference";
  @SerializedName(SERIALIZED_NAME_ORDER_REFERENCE)
  private String orderReference;

  public static final String SERIALIZED_NAME_PAYMENT_MEANS = "payment_means";
  @SerializedName(SERIALIZED_NAME_PAYMENT_MEANS)
  private PaymentMeansDEPRECATED paymentMeans;

  public static final String SERIALIZED_NAME_PAYMENT_MEANS_ARRAY = "payment_means_array";
  @SerializedName(SERIALIZED_NAME_PAYMENT_MEANS_ARRAY)
  private List<PurchaseInvoicePaymentMeans> paymentMeansArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_MEANS_PAYMENT_ID = "payment_means_payment_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_MEANS_PAYMENT_ID)
  private String paymentMeansPaymentId;

  public static final String SERIALIZED_NAME_PAYMENT_TERMS_NOTE = "payment_terms_note";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TERMS_NOTE)
  private String paymentTermsNote;

  public static final String SERIALIZED_NAME_PERIOD_END = "period_end";
  @SerializedName(SERIALIZED_NAME_PERIOD_END)
  private String periodEnd;

  public static final String SERIALIZED_NAME_PERIOD_START = "period_start";
  @SerializedName(SERIALIZED_NAME_PERIOD_START)
  private String periodStart;

  public static final String SERIALIZED_NAME_PROJECT_REFERENCE = "project_reference";
  @SerializedName(SERIALIZED_NAME_PROJECT_REFERENCE)
  private String projectReference;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private PurchaseInvoiceSender sender;

  /**
   * The source the invoice was received from.
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    PEPPOL("peppol"),
    
    SCRIPT("script"),
    
    SUPPLIER("supplier"),
    
    EMAIL("email");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private SourceEnum source;

  /**
   * The subtype of document.
   */
  @JsonAdapter(SubTypeEnum.Adapter.class)
  public enum SubTypeEnum {
    INVOICE("invoice"),
    
    CREDITNOTE("creditnote"),
    
    CORRECTIONINVOICE("correctioninvoice");

    private String value;

    SubTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubTypeEnum fromValue(String value) {
      for (SubTypeEnum b : SubTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUB_TYPE = "sub_type";
  @SerializedName(SERIALIZED_NAME_SUB_TYPE)
  private SubTypeEnum subType;

  public static final String SERIALIZED_NAME_SYSTEM_GENERATED_PRIMARY_IMAGE = "system_generated_primary_image";
  @SerializedName(SERIALIZED_NAME_SYSTEM_GENERATED_PRIMARY_IMAGE)
  private Boolean systemGeneratedPrimaryImage;

  public static final String SERIALIZED_NAME_TAX_POINT_DATE = "tax_point_date";
  @SerializedName(SERIALIZED_NAME_TAX_POINT_DATE)
  private String taxPointDate;

  public static final String SERIALIZED_NAME_TAX_SUBTOTALS = "tax_subtotals";
  @SerializedName(SERIALIZED_NAME_TAX_SUBTOTALS)
  private List<PurchaseInvoiceTaxSubtotal> taxSubtotals = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAX_SYSTEM = "tax_system";
  @SerializedName(SERIALIZED_NAME_TAX_SYSTEM)
  private String taxSystem;

  public static final String SERIALIZED_NAME_VAT_REVERSE_CHARGE = "vat_reverse_charge";
  @SerializedName(SERIALIZED_NAME_VAT_REVERSE_CHARGE)
  private Boolean vatReverseCharge;

  public PurchaseInvoice() {
  }

  public PurchaseInvoice accounting(PurchaseInvoiceAccountingDetails accounting) {
    this.accounting = accounting;
    return this;
  }

  /**
   * Get accounting
   * @return accounting
   */
  @javax.annotation.Nullable
  public PurchaseInvoiceAccountingDetails getAccounting() {
    return accounting;
  }

  public void setAccounting(PurchaseInvoiceAccountingDetails accounting) {
    this.accounting = accounting;
  }


  public PurchaseInvoice accountingCost(String accountingCost) {
    this.accountingCost = accountingCost;
    return this;
  }

  /**
   * The accounting cost code.
   * @return accountingCost
   */
  @javax.annotation.Nullable
  public String getAccountingCost() {
    return accountingCost;
  }

  public void setAccountingCost(String accountingCost) {
    this.accountingCost = accountingCost;
  }


  public PurchaseInvoice allowanceCharge(BigDecimal allowanceCharge) {
    this.allowanceCharge = allowanceCharge;
    return this;
  }

  /**
   * DEPRECATED - Use the allowance_charges array.
   * @return allowanceCharge
   */
  @javax.annotation.Nullable
  public BigDecimal getAllowanceCharge() {
    return allowanceCharge;
  }

  public void setAllowanceCharge(BigDecimal allowanceCharge) {
    this.allowanceCharge = allowanceCharge;
  }


  public PurchaseInvoice allowanceCharges(List<PurchaseInvoiceAllowanceCharge> allowanceCharges) {
    this.allowanceCharges = allowanceCharges;
    return this;
  }

  public PurchaseInvoice addAllowanceChargesItem(PurchaseInvoiceAllowanceCharge allowanceChargesItem) {
    if (this.allowanceCharges == null) {
      this.allowanceCharges = new ArrayList<>();
    }
    this.allowanceCharges.add(allowanceChargesItem);
    return this;
  }

  /**
   * Get allowanceCharges
   * @return allowanceCharges
   */
  @javax.annotation.Nullable
  public List<PurchaseInvoiceAllowanceCharge> getAllowanceCharges() {
    return allowanceCharges;
  }

  public void setAllowanceCharges(List<PurchaseInvoiceAllowanceCharge> allowanceCharges) {
    this.allowanceCharges = allowanceCharges;
  }


  public PurchaseInvoice amountIncludingVat(BigDecimal amountIncludingVat) {
    this.amountIncludingVat = amountIncludingVat;
    return this;
  }

  /**
   * DEPRECATED - Use amount_including_tax.
   * @return amountIncludingVat
   */
  @javax.annotation.Nullable
  public BigDecimal getAmountIncludingVat() {
    return amountIncludingVat;
  }

  public void setAmountIncludingVat(BigDecimal amountIncludingVat) {
    this.amountIncludingVat = amountIncludingVat;
  }


  public PurchaseInvoice attachments(List<PurchaseInvoiceAttachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public PurchaseInvoice addAttachmentsItem(PurchaseInvoiceAttachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<PurchaseInvoiceAttachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<PurchaseInvoiceAttachment> attachments) {
    this.attachments = attachments;
  }


  public PurchaseInvoice billingReference(String billingReference) {
    this.billingReference = billingReference;
    return this;
  }

  /**
   * Reference to the previous invoice this invoice relates to.
   * @return billingReference
   */
  @javax.annotation.Nullable
  public String getBillingReference() {
    return billingReference;
  }

  public void setBillingReference(String billingReference) {
    this.billingReference = billingReference;
  }


  public PurchaseInvoice buyerReference(String buyerReference) {
    this.buyerReference = buyerReference;
    return this;
  }

  /**
   * Reference provided by the buyer. Used for routing.
   * @return buyerReference
   */
  @javax.annotation.Nullable
  public String getBuyerReference() {
    return buyerReference;
  }

  public void setBuyerReference(String buyerReference) {
    this.buyerReference = buyerReference;
  }


  public PurchaseInvoice contractDocumentReference(String contractDocumentReference) {
    this.contractDocumentReference = contractDocumentReference;
    return this;
  }

  /**
   * Reference to the contract.
   * @return contractDocumentReference
   */
  @javax.annotation.Nullable
  public String getContractDocumentReference() {
    return contractDocumentReference;
  }

  public void setContractDocumentReference(String contractDocumentReference) {
    this.contractDocumentReference = contractDocumentReference;
  }


  public PurchaseInvoice delivery(PurchaseInvoiceDelivery delivery) {
    this.delivery = delivery;
    return this;
  }

  /**
   * Get delivery
   * @return delivery
   */
  @javax.annotation.Nullable
  public PurchaseInvoiceDelivery getDelivery() {
    return delivery;
  }

  public void setDelivery(PurchaseInvoiceDelivery delivery) {
    this.delivery = delivery;
  }


  public PurchaseInvoice document(String document) {
    this.document = document;
    return this;
  }

  /**
   * DEPRECATED. Use the new atatchments array.
   * @return document
   */
  @javax.annotation.Nullable
  public String getDocument() {
    return document;
  }

  public void setDocument(String document) {
    this.document = document;
  }


  public PurchaseInvoice documentCurrencyCode(String documentCurrencyCode) {
    this.documentCurrencyCode = documentCurrencyCode;
    return this;
  }

  /**
   * The ISO 4217 currency for the invoice.
   * @return documentCurrencyCode
   */
  @javax.annotation.Nullable
  public String getDocumentCurrencyCode() {
    return documentCurrencyCode;
  }

  public void setDocumentCurrencyCode(String documentCurrencyCode) {
    this.documentCurrencyCode = documentCurrencyCode;
  }


  public PurchaseInvoice documentTotals(PurchaseInvoiceDocumentTotals documentTotals) {
    this.documentTotals = documentTotals;
    return this;
  }

  /**
   * Get documentTotals
   * @return documentTotals
   */
  @javax.annotation.Nullable
  public PurchaseInvoiceDocumentTotals getDocumentTotals() {
    return documentTotals;
  }

  public void setDocumentTotals(PurchaseInvoiceDocumentTotals documentTotals) {
    this.documentTotals = documentTotals;
  }


  public PurchaseInvoice documentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * The type of document. Only \&quot;invoice\&quot; for now.
   * @return documentType
   */
  @javax.annotation.Nullable
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }

  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }


  public PurchaseInvoice dueDate(String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * The date the invoice must be payed by. Format \&quot;YYYY-MM-DD\&quot;.
   * @return dueDate
   */
  @javax.annotation.Nullable
  public String getDueDate() {
    return dueDate;
  }

  public void setDueDate(String dueDate) {
    this.dueDate = dueDate;
  }


  public PurchaseInvoice externalKey(String externalKey) {
    this.externalKey = externalKey;
    return this;
  }

  /**
   * Deprecated. Used for accountants. The id you specified for the organization.
   * @return externalKey
   */
  @javax.annotation.Nullable
  public String getExternalKey() {
    return externalKey;
  }

  public void setExternalKey(String externalKey) {
    this.externalKey = externalKey;
  }


  public PurchaseInvoice externalUserId(String externalUserId) {
    this.externalUserId = externalUserId;
    return this;
  }

  /**
   * Deprecated. Used for the embedded portal retrieval service. The external_user_id you provided when the ShopAccount was created.
   * @return externalUserId
   */
  @javax.annotation.Nullable
  public String getExternalUserId() {
    return externalUserId;
  }

  public void setExternalUserId(String externalUserId) {
    this.externalUserId = externalUserId;
  }


  public PurchaseInvoice guid(UUID guid) {
    this.guid = guid;
    return this;
  }

  /**
   * The GUID of the invoice
   * @return guid
   */
  @javax.annotation.Nullable
  public UUID getGuid() {
    return guid;
  }

  public void setGuid(UUID guid) {
    this.guid = guid;
  }


  public PurchaseInvoice invoiceLines(List<PurchaseInvoiceInvoiceLine> invoiceLines) {
    this.invoiceLines = invoiceLines;
    return this;
  }

  public PurchaseInvoice addInvoiceLinesItem(PurchaseInvoiceInvoiceLine invoiceLinesItem) {
    if (this.invoiceLines == null) {
      this.invoiceLines = new ArrayList<>();
    }
    this.invoiceLines.add(invoiceLinesItem);
    return this;
  }

  /**
   * Get invoiceLines
   * @return invoiceLines
   */
  @javax.annotation.Nullable
  public List<PurchaseInvoiceInvoiceLine> getInvoiceLines() {
    return invoiceLines;
  }

  public void setInvoiceLines(List<PurchaseInvoiceInvoiceLine> invoiceLines) {
    this.invoiceLines = invoiceLines;
  }


  public PurchaseInvoice invoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

  /**
   * The invoicenumber.
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }


  public PurchaseInvoice invoiceType(InvoiceTypeEnum invoiceType) {
    this.invoiceType = invoiceType;
    return this;
  }

  /**
   * The type of invoice.
   * @return invoiceType
   */
  @javax.annotation.Nullable
  public InvoiceTypeEnum getInvoiceType() {
    return invoiceType;
  }

  public void setInvoiceType(InvoiceTypeEnum invoiceType) {
    this.invoiceType = invoiceType;
  }


  public PurchaseInvoice issueDate(String issueDate) {
    this.issueDate = issueDate;
    return this;
  }

  /**
   * The date the invoice was issued. Format \&quot;YYYY-MM-DD\&quot;.
   * @return issueDate
   */
  @javax.annotation.Nullable
  public String getIssueDate() {
    return issueDate;
  }

  public void setIssueDate(String issueDate) {
    this.issueDate = issueDate;
  }


  public PurchaseInvoice legalEntityId(Long legalEntityId) {
    this.legalEntityId = legalEntityId;
    return this;
  }

  /**
   * The id of the LegalEntity the invoice was received for.
   * @return legalEntityId
   */
  @javax.annotation.Nullable
  public Long getLegalEntityId() {
    return legalEntityId;
  }

  public void setLegalEntityId(Long legalEntityId) {
    this.legalEntityId = legalEntityId;
  }


  public PurchaseInvoice note(String note) {
    this.note = note;
    return this;
  }

  /**
   * The invoice level note.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public PurchaseInvoice orderReference(String orderReference) {
    this.orderReference = orderReference;
    return this;
  }

  /**
   * Reference to the order. Used for matching the invoice to an order.
   * @return orderReference
   */
  @javax.annotation.Nullable
  public String getOrderReference() {
    return orderReference;
  }

  public void setOrderReference(String orderReference) {
    this.orderReference = orderReference;
  }


  public PurchaseInvoice paymentMeans(PaymentMeansDEPRECATED paymentMeans) {
    this.paymentMeans = paymentMeans;
    return this;
  }

  /**
   * Get paymentMeans
   * @return paymentMeans
   */
  @javax.annotation.Nullable
  public PaymentMeansDEPRECATED getPaymentMeans() {
    return paymentMeans;
  }

  public void setPaymentMeans(PaymentMeansDEPRECATED paymentMeans) {
    this.paymentMeans = paymentMeans;
  }


  public PurchaseInvoice paymentMeansArray(List<PurchaseInvoicePaymentMeans> paymentMeansArray) {
    this.paymentMeansArray = paymentMeansArray;
    return this;
  }

  public PurchaseInvoice addPaymentMeansArrayItem(PurchaseInvoicePaymentMeans paymentMeansArrayItem) {
    if (this.paymentMeansArray == null) {
      this.paymentMeansArray = new ArrayList<>();
    }
    this.paymentMeansArray.add(paymentMeansArrayItem);
    return this;
  }

  /**
   * The different payment means that can be used to pay the invoice.
   * @return paymentMeansArray
   */
  @javax.annotation.Nullable
  public List<PurchaseInvoicePaymentMeans> getPaymentMeansArray() {
    return paymentMeansArray;
  }

  public void setPaymentMeansArray(List<PurchaseInvoicePaymentMeans> paymentMeansArray) {
    this.paymentMeansArray = paymentMeansArray;
  }


  public PurchaseInvoice paymentMeansPaymentId(String paymentMeansPaymentId) {
    this.paymentMeansPaymentId = paymentMeansPaymentId;
    return this;
  }

  /**
   * DEPRECATED - use the payment_id property in the payment_means_array
   * @return paymentMeansPaymentId
   */
  @javax.annotation.Nullable
  public String getPaymentMeansPaymentId() {
    return paymentMeansPaymentId;
  }

  public void setPaymentMeansPaymentId(String paymentMeansPaymentId) {
    this.paymentMeansPaymentId = paymentMeansPaymentId;
  }


  public PurchaseInvoice paymentTermsNote(String paymentTermsNote) {
    this.paymentTermsNote = paymentTermsNote;
    return this;
  }

  /**
   * A textual description of the payment terms.
   * @return paymentTermsNote
   */
  @javax.annotation.Nullable
  public String getPaymentTermsNote() {
    return paymentTermsNote;
  }

  public void setPaymentTermsNote(String paymentTermsNote) {
    this.paymentTermsNote = paymentTermsNote;
  }


  public PurchaseInvoice periodEnd(String periodEnd) {
    this.periodEnd = periodEnd;
    return this;
  }

  /**
   * The end date of the period this invoice relates to. Format \&quot;YYYY-MM-DD\&quot;.
   * @return periodEnd
   */
  @javax.annotation.Nullable
  public String getPeriodEnd() {
    return periodEnd;
  }

  public void setPeriodEnd(String periodEnd) {
    this.periodEnd = periodEnd;
  }


  public PurchaseInvoice periodStart(String periodStart) {
    this.periodStart = periodStart;
    return this;
  }

  /**
   * The start date of the period this invoice relates to. Format \&quot;YYYY-MM-DD\&quot;.
   * @return periodStart
   */
  @javax.annotation.Nullable
  public String getPeriodStart() {
    return periodStart;
  }

  public void setPeriodStart(String periodStart) {
    this.periodStart = periodStart;
  }


  public PurchaseInvoice projectReference(String projectReference) {
    this.projectReference = projectReference;
    return this;
  }

  /**
   * Reference to the project.
   * @return projectReference
   */
  @javax.annotation.Nullable
  public String getProjectReference() {
    return projectReference;
  }

  public void setProjectReference(String projectReference) {
    this.projectReference = projectReference;
  }


  public PurchaseInvoice sender(PurchaseInvoiceSender sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nullable
  public PurchaseInvoiceSender getSender() {
    return sender;
  }

  public void setSender(PurchaseInvoiceSender sender) {
    this.sender = sender;
  }


  public PurchaseInvoice source(SourceEnum source) {
    this.source = source;
    return this;
  }

  /**
   * The source the invoice was received from.
   * @return source
   */
  @javax.annotation.Nullable
  public SourceEnum getSource() {
    return source;
  }

  public void setSource(SourceEnum source) {
    this.source = source;
  }


  public PurchaseInvoice subType(SubTypeEnum subType) {
    this.subType = subType;
    return this;
  }

  /**
   * The subtype of document.
   * @return subType
   */
  @javax.annotation.Nullable
  public SubTypeEnum getSubType() {
    return subType;
  }

  public void setSubType(SubTypeEnum subType) {
    this.subType = subType;
  }


  public PurchaseInvoice systemGeneratedPrimaryImage(Boolean systemGeneratedPrimaryImage) {
    this.systemGeneratedPrimaryImage = systemGeneratedPrimaryImage;
    return this;
  }

  /**
   * Whether or not the document image (PDF) was generated by Storecove. If true, it means the invoice was received without any attachments and Storecove generated one for you. If false, the invoice will contain at least one attachment, which was received from the invoice sender.
   * @return systemGeneratedPrimaryImage
   */
  @javax.annotation.Nullable
  public Boolean getSystemGeneratedPrimaryImage() {
    return systemGeneratedPrimaryImage;
  }

  public void setSystemGeneratedPrimaryImage(Boolean systemGeneratedPrimaryImage) {
    this.systemGeneratedPrimaryImage = systemGeneratedPrimaryImage;
  }


  public PurchaseInvoice taxPointDate(String taxPointDate) {
    this.taxPointDate = taxPointDate;
    return this;
  }

  /**
   * The date the invoice was issued for tax purposes. In most countries MUST match the issue_date. Format \&quot;YYYY-MM-DD\&quot;.
   * @return taxPointDate
   */
  @javax.annotation.Nullable
  public String getTaxPointDate() {
    return taxPointDate;
  }

  public void setTaxPointDate(String taxPointDate) {
    this.taxPointDate = taxPointDate;
  }


  public PurchaseInvoice taxSubtotals(List<PurchaseInvoiceTaxSubtotal> taxSubtotals) {
    this.taxSubtotals = taxSubtotals;
    return this;
  }

  public PurchaseInvoice addTaxSubtotalsItem(PurchaseInvoiceTaxSubtotal taxSubtotalsItem) {
    if (this.taxSubtotals == null) {
      this.taxSubtotals = new ArrayList<>();
    }
    this.taxSubtotals.add(taxSubtotalsItem);
    return this;
  }

  /**
   * Get taxSubtotals
   * @return taxSubtotals
   */
  @javax.annotation.Nullable
  public List<PurchaseInvoiceTaxSubtotal> getTaxSubtotals() {
    return taxSubtotals;
  }

  public void setTaxSubtotals(List<PurchaseInvoiceTaxSubtotal> taxSubtotals) {
    this.taxSubtotals = taxSubtotals;
  }


  public PurchaseInvoice taxSystem(String taxSystem) {
    this.taxSystem = taxSystem;
    return this;
  }

  /**
   * The tax system of the invoice. Either tax_line_percentages or tax_line_amounts. The first tax system means the invoice lines contain only the tax percentages and the tax amounts are included only in the tax subtotals at the invoice level and so are only calculated at the invoice level. The tax system tax_line_amounts means that in addition to the percentage, each invoice line also contains the tax amount. The tax subtotals at the invoice level are calculated as the sum of the tax of the invoice lines. The distinction between the two tax systems has has implications for rounding.
   * @return taxSystem
   */
  @javax.annotation.Nullable
  public String getTaxSystem() {
    return taxSystem;
  }

  public void setTaxSystem(String taxSystem) {
    this.taxSystem = taxSystem;
  }


  public PurchaseInvoice vatReverseCharge(Boolean vatReverseCharge) {
    this.vatReverseCharge = vatReverseCharge;
    return this;
  }

  /**
   * DEPRECATED - This is now part of each invoice line.
   * @return vatReverseCharge
   */
  @javax.annotation.Nullable
  public Boolean getVatReverseCharge() {
    return vatReverseCharge;
  }

  public void setVatReverseCharge(Boolean vatReverseCharge) {
    this.vatReverseCharge = vatReverseCharge;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseInvoice purchaseInvoice = (PurchaseInvoice) o;
    return Objects.equals(this.accounting, purchaseInvoice.accounting) &&
        Objects.equals(this.accountingCost, purchaseInvoice.accountingCost) &&
        Objects.equals(this.allowanceCharge, purchaseInvoice.allowanceCharge) &&
        Objects.equals(this.allowanceCharges, purchaseInvoice.allowanceCharges) &&
        Objects.equals(this.amountIncludingVat, purchaseInvoice.amountIncludingVat) &&
        Objects.equals(this.attachments, purchaseInvoice.attachments) &&
        Objects.equals(this.billingReference, purchaseInvoice.billingReference) &&
        Objects.equals(this.buyerReference, purchaseInvoice.buyerReference) &&
        Objects.equals(this.contractDocumentReference, purchaseInvoice.contractDocumentReference) &&
        Objects.equals(this.delivery, purchaseInvoice.delivery) &&
        Objects.equals(this.document, purchaseInvoice.document) &&
        Objects.equals(this.documentCurrencyCode, purchaseInvoice.documentCurrencyCode) &&
        Objects.equals(this.documentTotals, purchaseInvoice.documentTotals) &&
        Objects.equals(this.documentType, purchaseInvoice.documentType) &&
        Objects.equals(this.dueDate, purchaseInvoice.dueDate) &&
        Objects.equals(this.externalKey, purchaseInvoice.externalKey) &&
        Objects.equals(this.externalUserId, purchaseInvoice.externalUserId) &&
        Objects.equals(this.guid, purchaseInvoice.guid) &&
        Objects.equals(this.invoiceLines, purchaseInvoice.invoiceLines) &&
        Objects.equals(this.invoiceNumber, purchaseInvoice.invoiceNumber) &&
        Objects.equals(this.invoiceType, purchaseInvoice.invoiceType) &&
        Objects.equals(this.issueDate, purchaseInvoice.issueDate) &&
        Objects.equals(this.legalEntityId, purchaseInvoice.legalEntityId) &&
        Objects.equals(this.note, purchaseInvoice.note) &&
        Objects.equals(this.orderReference, purchaseInvoice.orderReference) &&
        Objects.equals(this.paymentMeans, purchaseInvoice.paymentMeans) &&
        Objects.equals(this.paymentMeansArray, purchaseInvoice.paymentMeansArray) &&
        Objects.equals(this.paymentMeansPaymentId, purchaseInvoice.paymentMeansPaymentId) &&
        Objects.equals(this.paymentTermsNote, purchaseInvoice.paymentTermsNote) &&
        Objects.equals(this.periodEnd, purchaseInvoice.periodEnd) &&
        Objects.equals(this.periodStart, purchaseInvoice.periodStart) &&
        Objects.equals(this.projectReference, purchaseInvoice.projectReference) &&
        Objects.equals(this.sender, purchaseInvoice.sender) &&
        Objects.equals(this.source, purchaseInvoice.source) &&
        Objects.equals(this.subType, purchaseInvoice.subType) &&
        Objects.equals(this.systemGeneratedPrimaryImage, purchaseInvoice.systemGeneratedPrimaryImage) &&
        Objects.equals(this.taxPointDate, purchaseInvoice.taxPointDate) &&
        Objects.equals(this.taxSubtotals, purchaseInvoice.taxSubtotals) &&
        Objects.equals(this.taxSystem, purchaseInvoice.taxSystem) &&
        Objects.equals(this.vatReverseCharge, purchaseInvoice.vatReverseCharge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accounting, accountingCost, allowanceCharge, allowanceCharges, amountIncludingVat, attachments, billingReference, buyerReference, contractDocumentReference, delivery, document, documentCurrencyCode, documentTotals, documentType, dueDate, externalKey, externalUserId, guid, invoiceLines, invoiceNumber, invoiceType, issueDate, legalEntityId, note, orderReference, paymentMeans, paymentMeansArray, paymentMeansPaymentId, paymentTermsNote, periodEnd, periodStart, projectReference, sender, source, subType, systemGeneratedPrimaryImage, taxPointDate, taxSubtotals, taxSystem, vatReverseCharge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseInvoice {\n");
    sb.append("    accounting: ").append(toIndentedString(accounting)).append("\n");
    sb.append("    accountingCost: ").append(toIndentedString(accountingCost)).append("\n");
    sb.append("    allowanceCharge: ").append(toIndentedString(allowanceCharge)).append("\n");
    sb.append("    allowanceCharges: ").append(toIndentedString(allowanceCharges)).append("\n");
    sb.append("    amountIncludingVat: ").append(toIndentedString(amountIncludingVat)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    billingReference: ").append(toIndentedString(billingReference)).append("\n");
    sb.append("    buyerReference: ").append(toIndentedString(buyerReference)).append("\n");
    sb.append("    contractDocumentReference: ").append(toIndentedString(contractDocumentReference)).append("\n");
    sb.append("    delivery: ").append(toIndentedString(delivery)).append("\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    documentCurrencyCode: ").append(toIndentedString(documentCurrencyCode)).append("\n");
    sb.append("    documentTotals: ").append(toIndentedString(documentTotals)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    externalKey: ").append(toIndentedString(externalKey)).append("\n");
    sb.append("    externalUserId: ").append(toIndentedString(externalUserId)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    invoiceLines: ").append(toIndentedString(invoiceLines)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    invoiceType: ").append(toIndentedString(invoiceType)).append("\n");
    sb.append("    issueDate: ").append(toIndentedString(issueDate)).append("\n");
    sb.append("    legalEntityId: ").append(toIndentedString(legalEntityId)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    orderReference: ").append(toIndentedString(orderReference)).append("\n");
    sb.append("    paymentMeans: ").append(toIndentedString(paymentMeans)).append("\n");
    sb.append("    paymentMeansArray: ").append(toIndentedString(paymentMeansArray)).append("\n");
    sb.append("    paymentMeansPaymentId: ").append(toIndentedString(paymentMeansPaymentId)).append("\n");
    sb.append("    paymentTermsNote: ").append(toIndentedString(paymentTermsNote)).append("\n");
    sb.append("    periodEnd: ").append(toIndentedString(periodEnd)).append("\n");
    sb.append("    periodStart: ").append(toIndentedString(periodStart)).append("\n");
    sb.append("    projectReference: ").append(toIndentedString(projectReference)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
    sb.append("    systemGeneratedPrimaryImage: ").append(toIndentedString(systemGeneratedPrimaryImage)).append("\n");
    sb.append("    taxPointDate: ").append(toIndentedString(taxPointDate)).append("\n");
    sb.append("    taxSubtotals: ").append(toIndentedString(taxSubtotals)).append("\n");
    sb.append("    taxSystem: ").append(toIndentedString(taxSystem)).append("\n");
    sb.append("    vatReverseCharge: ").append(toIndentedString(vatReverseCharge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounting");
    openapiFields.add("accounting_cost");
    openapiFields.add("allowance_charge");
    openapiFields.add("allowance_charges");
    openapiFields.add("amount_including_vat");
    openapiFields.add("attachments");
    openapiFields.add("billing_reference");
    openapiFields.add("buyer_reference");
    openapiFields.add("contract_document_reference");
    openapiFields.add("delivery");
    openapiFields.add("document");
    openapiFields.add("document_currency_code");
    openapiFields.add("document_totals");
    openapiFields.add("document_type");
    openapiFields.add("due_date");
    openapiFields.add("external_key");
    openapiFields.add("external_user_id");
    openapiFields.add("guid");
    openapiFields.add("invoice_lines");
    openapiFields.add("invoice_number");
    openapiFields.add("invoice_type");
    openapiFields.add("issue_date");
    openapiFields.add("legal_entity_id");
    openapiFields.add("note");
    openapiFields.add("order_reference");
    openapiFields.add("payment_means");
    openapiFields.add("payment_means_array");
    openapiFields.add("payment_means_payment_id");
    openapiFields.add("payment_terms_note");
    openapiFields.add("period_end");
    openapiFields.add("period_start");
    openapiFields.add("project_reference");
    openapiFields.add("sender");
    openapiFields.add("source");
    openapiFields.add("sub_type");
    openapiFields.add("system_generated_primary_image");
    openapiFields.add("tax_point_date");
    openapiFields.add("tax_subtotals");
    openapiFields.add("tax_system");
    openapiFields.add("vat_reverse_charge");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PurchaseInvoice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PurchaseInvoice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PurchaseInvoice is not found in the empty JSON string", PurchaseInvoice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PurchaseInvoice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PurchaseInvoice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accounting`
      if (jsonObj.get("accounting") != null && !jsonObj.get("accounting").isJsonNull()) {
        PurchaseInvoiceAccountingDetails.validateJsonElement(jsonObj.get("accounting"));
      }
      if ((jsonObj.get("accounting_cost") != null && !jsonObj.get("accounting_cost").isJsonNull()) && !jsonObj.get("accounting_cost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accounting_cost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accounting_cost").toString()));
      }
      if (jsonObj.get("allowance_charges") != null && !jsonObj.get("allowance_charges").isJsonNull()) {
        JsonArray jsonArrayallowanceCharges = jsonObj.getAsJsonArray("allowance_charges");
        if (jsonArrayallowanceCharges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allowance_charges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allowance_charges` to be an array in the JSON string but got `%s`", jsonObj.get("allowance_charges").toString()));
          }

          // validate the optional field `allowance_charges` (array)
          for (int i = 0; i < jsonArrayallowanceCharges.size(); i++) {
            PurchaseInvoiceAllowanceCharge.validateJsonElement(jsonArrayallowanceCharges.get(i));
          };
        }
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            PurchaseInvoiceAttachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("billing_reference") != null && !jsonObj.get("billing_reference").isJsonNull()) && !jsonObj.get("billing_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_reference").toString()));
      }
      if ((jsonObj.get("buyer_reference") != null && !jsonObj.get("buyer_reference").isJsonNull()) && !jsonObj.get("buyer_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_reference").toString()));
      }
      if ((jsonObj.get("contract_document_reference") != null && !jsonObj.get("contract_document_reference").isJsonNull()) && !jsonObj.get("contract_document_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_document_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_document_reference").toString()));
      }
      // validate the optional field `delivery`
      if (jsonObj.get("delivery") != null && !jsonObj.get("delivery").isJsonNull()) {
        PurchaseInvoiceDelivery.validateJsonElement(jsonObj.get("delivery"));
      }
      if ((jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) && !jsonObj.get("document").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document").toString()));
      }
      if ((jsonObj.get("document_currency_code") != null && !jsonObj.get("document_currency_code").isJsonNull()) && !jsonObj.get("document_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_currency_code").toString()));
      }
      // validate the optional field `document_totals`
      if (jsonObj.get("document_totals") != null && !jsonObj.get("document_totals").isJsonNull()) {
        PurchaseInvoiceDocumentTotals.validateJsonElement(jsonObj.get("document_totals"));
      }
      if ((jsonObj.get("document_type") != null && !jsonObj.get("document_type").isJsonNull()) && !jsonObj.get("document_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_type").toString()));
      }
      // validate the optional field `document_type`
      if (jsonObj.get("document_type") != null && !jsonObj.get("document_type").isJsonNull()) {
        DocumentTypeEnum.validateJsonElement(jsonObj.get("document_type"));
      }
      if ((jsonObj.get("due_date") != null && !jsonObj.get("due_date").isJsonNull()) && !jsonObj.get("due_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `due_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("due_date").toString()));
      }
      if ((jsonObj.get("external_key") != null && !jsonObj.get("external_key").isJsonNull()) && !jsonObj.get("external_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_key").toString()));
      }
      if ((jsonObj.get("external_user_id") != null && !jsonObj.get("external_user_id").isJsonNull()) && !jsonObj.get("external_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_user_id").toString()));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if (jsonObj.get("invoice_lines") != null && !jsonObj.get("invoice_lines").isJsonNull()) {
        JsonArray jsonArrayinvoiceLines = jsonObj.getAsJsonArray("invoice_lines");
        if (jsonArrayinvoiceLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invoice_lines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invoice_lines` to be an array in the JSON string but got `%s`", jsonObj.get("invoice_lines").toString()));
          }

          // validate the optional field `invoice_lines` (array)
          for (int i = 0; i < jsonArrayinvoiceLines.size(); i++) {
            PurchaseInvoiceInvoiceLine.validateJsonElement(jsonArrayinvoiceLines.get(i));
          };
        }
      }
      if ((jsonObj.get("invoice_number") != null && !jsonObj.get("invoice_number").isJsonNull()) && !jsonObj.get("invoice_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_number").toString()));
      }
      if ((jsonObj.get("invoice_type") != null && !jsonObj.get("invoice_type").isJsonNull()) && !jsonObj.get("invoice_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_type").toString()));
      }
      // validate the optional field `invoice_type`
      if (jsonObj.get("invoice_type") != null && !jsonObj.get("invoice_type").isJsonNull()) {
        InvoiceTypeEnum.validateJsonElement(jsonObj.get("invoice_type"));
      }
      if ((jsonObj.get("issue_date") != null && !jsonObj.get("issue_date").isJsonNull()) && !jsonObj.get("issue_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_date").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("order_reference") != null && !jsonObj.get("order_reference").isJsonNull()) && !jsonObj.get("order_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_reference").toString()));
      }
      // validate the optional field `payment_means`
      if (jsonObj.get("payment_means") != null && !jsonObj.get("payment_means").isJsonNull()) {
        PaymentMeansDEPRECATED.validateJsonElement(jsonObj.get("payment_means"));
      }
      if (jsonObj.get("payment_means_array") != null && !jsonObj.get("payment_means_array").isJsonNull()) {
        JsonArray jsonArraypaymentMeansArray = jsonObj.getAsJsonArray("payment_means_array");
        if (jsonArraypaymentMeansArray != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payment_means_array").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payment_means_array` to be an array in the JSON string but got `%s`", jsonObj.get("payment_means_array").toString()));
          }

          // validate the optional field `payment_means_array` (array)
          for (int i = 0; i < jsonArraypaymentMeansArray.size(); i++) {
            PurchaseInvoicePaymentMeans.validateJsonElement(jsonArraypaymentMeansArray.get(i));
          };
        }
      }
      if ((jsonObj.get("payment_means_payment_id") != null && !jsonObj.get("payment_means_payment_id").isJsonNull()) && !jsonObj.get("payment_means_payment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_means_payment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_means_payment_id").toString()));
      }
      if ((jsonObj.get("payment_terms_note") != null && !jsonObj.get("payment_terms_note").isJsonNull()) && !jsonObj.get("payment_terms_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_terms_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_terms_note").toString()));
      }
      if ((jsonObj.get("period_end") != null && !jsonObj.get("period_end").isJsonNull()) && !jsonObj.get("period_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period_end").toString()));
      }
      if ((jsonObj.get("period_start") != null && !jsonObj.get("period_start").isJsonNull()) && !jsonObj.get("period_start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period_start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period_start").toString()));
      }
      if ((jsonObj.get("project_reference") != null && !jsonObj.get("project_reference").isJsonNull()) && !jsonObj.get("project_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project_reference").toString()));
      }
      // validate the optional field `sender`
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) {
        PurchaseInvoiceSender.validateJsonElement(jsonObj.get("sender"));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        SourceEnum.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("sub_type") != null && !jsonObj.get("sub_type").isJsonNull()) && !jsonObj.get("sub_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub_type").toString()));
      }
      // validate the optional field `sub_type`
      if (jsonObj.get("sub_type") != null && !jsonObj.get("sub_type").isJsonNull()) {
        SubTypeEnum.validateJsonElement(jsonObj.get("sub_type"));
      }
      if ((jsonObj.get("tax_point_date") != null && !jsonObj.get("tax_point_date").isJsonNull()) && !jsonObj.get("tax_point_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_point_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_point_date").toString()));
      }
      if (jsonObj.get("tax_subtotals") != null && !jsonObj.get("tax_subtotals").isJsonNull()) {
        JsonArray jsonArraytaxSubtotals = jsonObj.getAsJsonArray("tax_subtotals");
        if (jsonArraytaxSubtotals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tax_subtotals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tax_subtotals` to be an array in the JSON string but got `%s`", jsonObj.get("tax_subtotals").toString()));
          }

          // validate the optional field `tax_subtotals` (array)
          for (int i = 0; i < jsonArraytaxSubtotals.size(); i++) {
            PurchaseInvoiceTaxSubtotal.validateJsonElement(jsonArraytaxSubtotals.get(i));
          };
        }
      }
      if ((jsonObj.get("tax_system") != null && !jsonObj.get("tax_system").isJsonNull()) && !jsonObj.get("tax_system").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_system` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_system").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PurchaseInvoice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PurchaseInvoice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PurchaseInvoice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PurchaseInvoice.class));

       return (TypeAdapter<T>) new TypeAdapter<PurchaseInvoice>() {
           @Override
           public void write(JsonWriter out, PurchaseInvoice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PurchaseInvoice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PurchaseInvoice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PurchaseInvoice
   * @throws IOException if the JSON string is invalid with respect to PurchaseInvoice
   */
  public static PurchaseInvoice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PurchaseInvoice.class);
  }

  /**
   * Convert an instance of PurchaseInvoice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

