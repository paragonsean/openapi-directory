/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.DeliveryDeliveryLocation;
import org.openapitools.client.model.DeliveryParty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Delivery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Delivery {
  public static final String SERIALIZED_NAME_ACTUAL_DATE = "actualDate";
  @SerializedName(SERIALIZED_NAME_ACTUAL_DATE)
  private String actualDate;

  public static final String SERIALIZED_NAME_DELIVERY_LOCATION = "deliveryLocation";
  @SerializedName(SERIALIZED_NAME_DELIVERY_LOCATION)
  private DeliveryDeliveryLocation deliveryLocation;

  public static final String SERIALIZED_NAME_DELIVERY_PARTY = "deliveryParty";
  @SerializedName(SERIALIZED_NAME_DELIVERY_PARTY)
  private DeliveryParty deliveryParty;

  public static final String SERIALIZED_NAME_DELIVERY_PARTY_NAME = "deliveryPartyName";
  @SerializedName(SERIALIZED_NAME_DELIVERY_PARTY_NAME)
  private String deliveryPartyName;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity = new BigDecimal("1");

  public static final String SERIALIZED_NAME_REQUESTED_DELIVERY_PERIOD = "requestedDeliveryPeriod";
  @SerializedName(SERIALIZED_NAME_REQUESTED_DELIVERY_PERIOD)
  private String requestedDeliveryPeriod;

  public static final String SERIALIZED_NAME_SHIPPING_MARKS = "shippingMarks";
  @SerializedName(SERIALIZED_NAME_SHIPPING_MARKS)
  private String shippingMarks;

  public Delivery() {
  }

  public Delivery actualDate(String actualDate) {
    this.actualDate = actualDate;
    return this;
  }

  /**
   * The actual date of the delivery. Used only for Invoice
   * @return actualDate
   */
  @javax.annotation.Nullable
  public String getActualDate() {
    return actualDate;
  }

  public void setActualDate(String actualDate) {
    this.actualDate = actualDate;
  }


  public Delivery deliveryLocation(DeliveryDeliveryLocation deliveryLocation) {
    this.deliveryLocation = deliveryLocation;
    return this;
  }

  /**
   * Get deliveryLocation
   * @return deliveryLocation
   */
  @javax.annotation.Nullable
  public DeliveryDeliveryLocation getDeliveryLocation() {
    return deliveryLocation;
  }

  public void setDeliveryLocation(DeliveryDeliveryLocation deliveryLocation) {
    this.deliveryLocation = deliveryLocation;
  }


  public Delivery deliveryParty(DeliveryParty deliveryParty) {
    this.deliveryParty = deliveryParty;
    return this;
  }

  /**
   * Get deliveryParty
   * @return deliveryParty
   */
  @javax.annotation.Nullable
  public DeliveryParty getDeliveryParty() {
    return deliveryParty;
  }

  public void setDeliveryParty(DeliveryParty deliveryParty) {
    this.deliveryParty = deliveryParty;
  }


  public Delivery deliveryPartyName(String deliveryPartyName) {
    this.deliveryPartyName = deliveryPartyName;
    return this;
  }

  /**
   * Use deliveryParty. The name of the party that took delivery. Used only for Invoice
   * @return deliveryPartyName
   */
  @javax.annotation.Nullable
  public String getDeliveryPartyName() {
    return deliveryPartyName;
  }

  public void setDeliveryPartyName(String deliveryPartyName) {
    this.deliveryPartyName = deliveryPartyName;
  }


  public Delivery quantity(BigDecimal quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The quantity of the delivery. Used only for Invoice
   * @return quantity
   */
  @javax.annotation.Nullable
  public BigDecimal getQuantity() {
    return quantity;
  }

  public void setQuantity(BigDecimal quantity) {
    this.quantity = quantity;
  }


  public Delivery requestedDeliveryPeriod(String requestedDeliveryPeriod) {
    this.requestedDeliveryPeriod = requestedDeliveryPeriod;
    return this;
  }

  /**
   * The requested delivery period. Used only for DocumentOrder.
   * @return requestedDeliveryPeriod
   */
  @javax.annotation.Nullable
  public String getRequestedDeliveryPeriod() {
    return requestedDeliveryPeriod;
  }

  public void setRequestedDeliveryPeriod(String requestedDeliveryPeriod) {
    this.requestedDeliveryPeriod = requestedDeliveryPeriod;
  }


  public Delivery shippingMarks(String shippingMarks) {
    this.shippingMarks = shippingMarks;
    return this;
  }

  /**
   * A text that the buyer requests to be printed on the packing labels. Used only for DocumentOrder.
   * @return shippingMarks
   */
  @javax.annotation.Nullable
  public String getShippingMarks() {
    return shippingMarks;
  }

  public void setShippingMarks(String shippingMarks) {
    this.shippingMarks = shippingMarks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Delivery delivery = (Delivery) o;
    return Objects.equals(this.actualDate, delivery.actualDate) &&
        Objects.equals(this.deliveryLocation, delivery.deliveryLocation) &&
        Objects.equals(this.deliveryParty, delivery.deliveryParty) &&
        Objects.equals(this.deliveryPartyName, delivery.deliveryPartyName) &&
        Objects.equals(this.quantity, delivery.quantity) &&
        Objects.equals(this.requestedDeliveryPeriod, delivery.requestedDeliveryPeriod) &&
        Objects.equals(this.shippingMarks, delivery.shippingMarks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualDate, deliveryLocation, deliveryParty, deliveryPartyName, quantity, requestedDeliveryPeriod, shippingMarks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Delivery {\n");
    sb.append("    actualDate: ").append(toIndentedString(actualDate)).append("\n");
    sb.append("    deliveryLocation: ").append(toIndentedString(deliveryLocation)).append("\n");
    sb.append("    deliveryParty: ").append(toIndentedString(deliveryParty)).append("\n");
    sb.append("    deliveryPartyName: ").append(toIndentedString(deliveryPartyName)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    requestedDeliveryPeriod: ").append(toIndentedString(requestedDeliveryPeriod)).append("\n");
    sb.append("    shippingMarks: ").append(toIndentedString(shippingMarks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actualDate");
    openapiFields.add("deliveryLocation");
    openapiFields.add("deliveryParty");
    openapiFields.add("deliveryPartyName");
    openapiFields.add("quantity");
    openapiFields.add("requestedDeliveryPeriod");
    openapiFields.add("shippingMarks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Delivery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Delivery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Delivery is not found in the empty JSON string", Delivery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Delivery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Delivery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actualDate") != null && !jsonObj.get("actualDate").isJsonNull()) && !jsonObj.get("actualDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actualDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actualDate").toString()));
      }
      // validate the optional field `deliveryLocation`
      if (jsonObj.get("deliveryLocation") != null && !jsonObj.get("deliveryLocation").isJsonNull()) {
        DeliveryDeliveryLocation.validateJsonElement(jsonObj.get("deliveryLocation"));
      }
      // validate the optional field `deliveryParty`
      if (jsonObj.get("deliveryParty") != null && !jsonObj.get("deliveryParty").isJsonNull()) {
        DeliveryParty.validateJsonElement(jsonObj.get("deliveryParty"));
      }
      if ((jsonObj.get("deliveryPartyName") != null && !jsonObj.get("deliveryPartyName").isJsonNull()) && !jsonObj.get("deliveryPartyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryPartyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryPartyName").toString()));
      }
      if ((jsonObj.get("requestedDeliveryPeriod") != null && !jsonObj.get("requestedDeliveryPeriod").isJsonNull()) && !jsonObj.get("requestedDeliveryPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedDeliveryPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedDeliveryPeriod").toString()));
      }
      if ((jsonObj.get("shippingMarks") != null && !jsonObj.get("shippingMarks").isJsonNull()) && !jsonObj.get("shippingMarks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingMarks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingMarks").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Delivery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Delivery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Delivery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Delivery.class));

       return (TypeAdapter<T>) new TypeAdapter<Delivery>() {
           @Override
           public void write(JsonWriter out, Delivery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Delivery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Delivery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Delivery
   * @throws IOException if the JSON string is invalid with respect to Delivery
   */
  public static Delivery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Delivery.class);
  }

  /**
   * Convert an instance of Delivery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

