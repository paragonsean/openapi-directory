/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A PaymentMeans is a way to pay the invoice.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentMeans {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_BRANCHE_CODE = "branche_code";
  @SerializedName(SERIALIZED_NAME_BRANCHE_CODE)
  private String brancheCode;

  /**
   * How the invoice has been / will be paid. The code determines which type of PaymentMeans is used and which fields are mandatory. ++++ &lt;ul&gt;    &lt;li&gt;        &lt;strong&gt;cash&lt;/strong&gt;&lt;br/&gt;        The invoice was/is paid in cash.&lt;br/&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;bank_cheque&lt;/strong&gt;&lt;br/&gt;        The invoice was/is paid via a bank cheque.&lt;br/&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;cashiers_cheque&lt;/strong&gt;&lt;br/&gt;        The invoice was/is paid via a cashiers cheque.&lt;br/&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;credit_transfer&lt;/strong&gt;&lt;br/&gt;        The amount is to be transfered into a bank account. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                The account number. For New Zealand, this should hold the full 16 digit bank account number. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;branche_code&lt;/strong&gt;&lt;br/&gt;                In case of an IBAN, the account alone number is sufficient. In other cases, like a BBAN, a BIC code or other additional identifier is required. For Australia, the BSB goes here. Optional.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;holder&lt;/strong&gt;&lt;br/&gt;                The account holder name. Optional.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;debit_transfer&lt;/strong&gt;&lt;br/&gt;        Used for CreditNotes. The amount is to be transfered by the sender of the document into the bank account of the receiver of the document. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                The account number. For New Zealand, this should hold the full 16 digit bank account number. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;branche_code&lt;/strong&gt;&lt;br/&gt;                In case of an IBAN, the account alone number is sufficient. In other cases, like a BBAN, a BIC code or other additional identifier is required. For Australia, the BSB goes here. Optional.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;direct_debit&lt;/strong&gt;&lt;br/&gt;        Direct debit. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                The account number from which the funds will be debited. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;mandate&lt;/strong&gt;&lt;br/&gt;                The direct debit mandate id. Mandatory.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;holder&lt;/strong&gt;&lt;br/&gt;                The account holder name. Optional.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;card, credit_card, bank_card (credit_card, bank_card are deprecated)&lt;/strong&gt;&lt;br/&gt;        E.g. credit or debit card. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                The card number, but never more than the last four digits. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;holder&lt;/strong&gt;&lt;br/&gt;                The account holder name. Optional.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;network&lt;/strong&gt;&lt;br/&gt;                The payment network, e.g. VISA, SEPA. Optional, but recommended since a default of \&quot;N/A\&quot; may be used if not provided.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;online_payment_service&lt;/strong&gt;&lt;br/&gt;        An online payment service has been or will be used. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;network&lt;/strong&gt;&lt;br/&gt;                The payment network, e.g. PayPal. &lt;strong&gt;Mandatory unless url is provided&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;url&lt;/strong&gt;&lt;br/&gt;                The URL to execute the payment. &lt;strong&gt;Mandatory unless network is provided&lt;/strong&gt;.            &lt;/li&gt;        &lt;/ul&gt;        It is possible to provide both url and network. Note that for UBL, in countries where this payment means is not allowed, this will translate into an AdditionalDocumentReference.Attachment.ExternalReference element.    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;standing_agreement&lt;/strong&gt;&lt;br/&gt;        The payment means has been agreed out of band. Relevant additional fields: none.    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;aunz_npp_payid, aunz_npp (aunz_npp is deprecated)&lt;/strong&gt;&lt;br/&gt;        Australia/New Zealand New Payments Platform. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                PayID. May be an email address, ABN, mobile phone number etc. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;aunz_npp_payto&lt;/strong&gt;&lt;br/&gt;        Australia/New Zealand New Payments Platform. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                Account number. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;mandate&lt;/strong&gt;&lt;br/&gt;                Mandate/direct debit authority reference/PayTo Agreement. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;aunz_bpay&lt;/strong&gt;&lt;br/&gt;        Australia/New Zealand New Payments Platform. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                Biller code. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;holder&lt;/strong&gt;&lt;br/&gt;                The account holder name. Optional.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;aunz_postbillpay&lt;/strong&gt;&lt;br/&gt;        Australia/New Zealand New Payments Platform. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                Biller code. &lt;strong&gt;Mandatory.&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;holder&lt;/strong&gt;&lt;br/&gt;                The account holder name. Optional.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;aunz_uri&lt;/strong&gt;&lt;br/&gt;        Australia/New Zealand URI. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                Payment URI. &lt;strong&gt;Mandatory.&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;holder&lt;/strong&gt;&lt;br/&gt;                The account holder name. Optional.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;se_bankgiro&lt;/strong&gt;&lt;br/&gt;        Swedish Bankgiro. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                The account number from which the funds will be debited, 7 or 8 digits. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;holder&lt;/strong&gt;&lt;br/&gt;                The account holder name. Optional.            &lt;/li&gt;        &lt;/ul&gt;        &lt;br/&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;se_plusgiro&lt;/strong&gt;&lt;br/&gt;        Swedish Plusgiro. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                The account number from which the funds will be debited, 2 - 8 digits. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;holder&lt;/strong&gt;&lt;br/&gt;                The account holder name. Optional.            &lt;/li&gt;        &lt;/ul&gt;        &lt;br/&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;sg_giro&lt;/strong&gt;&lt;br/&gt;        Singapore GIRO-system (direct debit). Relevant additional fields: none.    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;sg_card&lt;/strong&gt;&lt;br/&gt;        Singapore CreditCard payment. Relevant additional fields: none.    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;sg_paynow&lt;/strong&gt;&lt;br/&gt;        Singapore PayNow Corporate.  Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                The UEN, format: UENxxxxxxxxxx. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;it_mav&lt;/strong&gt;&lt;br/&gt;        Italy MAV payment.    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;it_pagopa&lt;/strong&gt;&lt;br/&gt;        Italy PagoPA payment.    &lt;/li&gt;&lt;/ul&gt; ++++ 
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    CREDIT_TRANSFER("credit_transfer"),
    
    DEBIT_TRANSFER("debit_transfer"),
    
    DIRECT_DEBIT("direct_debit"),
    
    CARD("card"),
    
    BANK_CARD("bank_card"),
    
    CREDIT_CARD("credit_card"),
    
    ONLINE_PAYMENT_SERVICE("online_payment_service"),
    
    CASH("cash"),
    
    BANK_CHEQUE("bank_cheque"),
    
    CASHIERS_CHEQUE("cashiers_cheque"),
    
    STANDING_AGREEMENT("standing_agreement"),
    
    AUNZ_NPP("aunz_npp"),
    
    AUNZ_NPP_PAYID("aunz_npp_payid"),
    
    AUNZ_NPP_PAYTO("aunz_npp_payto"),
    
    AUNZ_BPAY("aunz_bpay"),
    
    AUNZ_POSTBILLPAY("aunz_postbillpay"),
    
    AUNZ_URI("aunz_uri"),
    
    SE_BANKGIRO("se_bankgiro"),
    
    SE_PLUSGIRO("se_plusgiro"),
    
    SG_GIRO("sg_giro"),
    
    SG_CARD("sg_card"),
    
    SG_PAYNOW("sg_paynow"),
    
    IT_MAV("it_mav"),
    
    IT_PAGOPA("it_pagopa"),
    
    NL_GA_BENEFICIARY("nl_ga_beneficiary"),
    
    NL_GA_GACCOUNT("nl_ga_gaccount"),
    
    UNDEFINED("undefined");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public static final String SERIALIZED_NAME_HOLDER = "holder";
  @SerializedName(SERIALIZED_NAME_HOLDER)
  private String holder;

  public static final String SERIALIZED_NAME_MANDATE = "mandate";
  @SerializedName(SERIALIZED_NAME_MANDATE)
  private String mandate;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_PAYMENT_ID = "paymentId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  private String paymentId;

  public PaymentMeans() {
  }

  public PaymentMeans account(String account) {
    this.account = account;
    return this;
  }

  /**
   * The account number.
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }


  public PaymentMeans amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount to be paid for this category. Only used for Dutch G-Account invoices. The amount nl_ga_beneficiary + amount nl_ga_gaccount must add up to the amountExcludingVat
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public PaymentMeans brancheCode(String brancheCode) {
    this.brancheCode = brancheCode;
    return this;
  }

  /**
   * The bank branch code. Not required for IBAN numbers. Often referred to as Swift or Bic code.
   * @return brancheCode
   */
  @javax.annotation.Nullable
  public String getBrancheCode() {
    return brancheCode;
  }

  public void setBrancheCode(String brancheCode) {
    this.brancheCode = brancheCode;
  }


  public PaymentMeans code(CodeEnum code) {
    this.code = code;
    return this;
  }

  /**
   * How the invoice has been / will be paid. The code determines which type of PaymentMeans is used and which fields are mandatory. ++++ &lt;ul&gt;    &lt;li&gt;        &lt;strong&gt;cash&lt;/strong&gt;&lt;br/&gt;        The invoice was/is paid in cash.&lt;br/&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;bank_cheque&lt;/strong&gt;&lt;br/&gt;        The invoice was/is paid via a bank cheque.&lt;br/&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;cashiers_cheque&lt;/strong&gt;&lt;br/&gt;        The invoice was/is paid via a cashiers cheque.&lt;br/&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;credit_transfer&lt;/strong&gt;&lt;br/&gt;        The amount is to be transfered into a bank account. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                The account number. For New Zealand, this should hold the full 16 digit bank account number. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;branche_code&lt;/strong&gt;&lt;br/&gt;                In case of an IBAN, the account alone number is sufficient. In other cases, like a BBAN, a BIC code or other additional identifier is required. For Australia, the BSB goes here. Optional.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;holder&lt;/strong&gt;&lt;br/&gt;                The account holder name. Optional.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;debit_transfer&lt;/strong&gt;&lt;br/&gt;        Used for CreditNotes. The amount is to be transfered by the sender of the document into the bank account of the receiver of the document. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                The account number. For New Zealand, this should hold the full 16 digit bank account number. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;branche_code&lt;/strong&gt;&lt;br/&gt;                In case of an IBAN, the account alone number is sufficient. In other cases, like a BBAN, a BIC code or other additional identifier is required. For Australia, the BSB goes here. Optional.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;direct_debit&lt;/strong&gt;&lt;br/&gt;        Direct debit. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                The account number from which the funds will be debited. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;mandate&lt;/strong&gt;&lt;br/&gt;                The direct debit mandate id. Mandatory.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;holder&lt;/strong&gt;&lt;br/&gt;                The account holder name. Optional.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;card, credit_card, bank_card (credit_card, bank_card are deprecated)&lt;/strong&gt;&lt;br/&gt;        E.g. credit or debit card. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                The card number, but never more than the last four digits. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;holder&lt;/strong&gt;&lt;br/&gt;                The account holder name. Optional.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;network&lt;/strong&gt;&lt;br/&gt;                The payment network, e.g. VISA, SEPA. Optional, but recommended since a default of \&quot;N/A\&quot; may be used if not provided.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;online_payment_service&lt;/strong&gt;&lt;br/&gt;        An online payment service has been or will be used. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;network&lt;/strong&gt;&lt;br/&gt;                The payment network, e.g. PayPal. &lt;strong&gt;Mandatory unless url is provided&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;url&lt;/strong&gt;&lt;br/&gt;                The URL to execute the payment. &lt;strong&gt;Mandatory unless network is provided&lt;/strong&gt;.            &lt;/li&gt;        &lt;/ul&gt;        It is possible to provide both url and network. Note that for UBL, in countries where this payment means is not allowed, this will translate into an AdditionalDocumentReference.Attachment.ExternalReference element.    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;standing_agreement&lt;/strong&gt;&lt;br/&gt;        The payment means has been agreed out of band. Relevant additional fields: none.    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;aunz_npp_payid, aunz_npp (aunz_npp is deprecated)&lt;/strong&gt;&lt;br/&gt;        Australia/New Zealand New Payments Platform. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                PayID. May be an email address, ABN, mobile phone number etc. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;aunz_npp_payto&lt;/strong&gt;&lt;br/&gt;        Australia/New Zealand New Payments Platform. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                Account number. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;mandate&lt;/strong&gt;&lt;br/&gt;                Mandate/direct debit authority reference/PayTo Agreement. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;aunz_bpay&lt;/strong&gt;&lt;br/&gt;        Australia/New Zealand New Payments Platform. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                Biller code. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;holder&lt;/strong&gt;&lt;br/&gt;                The account holder name. Optional.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;aunz_postbillpay&lt;/strong&gt;&lt;br/&gt;        Australia/New Zealand New Payments Platform. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                Biller code. &lt;strong&gt;Mandatory.&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;holder&lt;/strong&gt;&lt;br/&gt;                The account holder name. Optional.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;aunz_uri&lt;/strong&gt;&lt;br/&gt;        Australia/New Zealand URI. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                Payment URI. &lt;strong&gt;Mandatory.&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;holder&lt;/strong&gt;&lt;br/&gt;                The account holder name. Optional.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;se_bankgiro&lt;/strong&gt;&lt;br/&gt;        Swedish Bankgiro. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                The account number from which the funds will be debited, 7 or 8 digits. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;holder&lt;/strong&gt;&lt;br/&gt;                The account holder name. Optional.            &lt;/li&gt;        &lt;/ul&gt;        &lt;br/&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;se_plusgiro&lt;/strong&gt;&lt;br/&gt;        Swedish Plusgiro. Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                The account number from which the funds will be debited, 2 - 8 digits. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;            &lt;li&gt;                &lt;strong&gt;holder&lt;/strong&gt;&lt;br/&gt;                The account holder name. Optional.            &lt;/li&gt;        &lt;/ul&gt;        &lt;br/&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;sg_giro&lt;/strong&gt;&lt;br/&gt;        Singapore GIRO-system (direct debit). Relevant additional fields: none.    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;sg_card&lt;/strong&gt;&lt;br/&gt;        Singapore CreditCard payment. Relevant additional fields: none.    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;sg_paynow&lt;/strong&gt;&lt;br/&gt;        Singapore PayNow Corporate.  Relevant additional fields:&lt;br/&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;strong&gt;account&lt;/strong&gt;&lt;br/&gt;                The UEN, format: UENxxxxxxxxxx. &lt;strong&gt;Mandatory&lt;/strong&gt;.            &lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;it_mav&lt;/strong&gt;&lt;br/&gt;        Italy MAV payment.    &lt;/li&gt;    &lt;li&gt;        &lt;strong&gt;it_pagopa&lt;/strong&gt;&lt;br/&gt;        Italy PagoPA payment.    &lt;/li&gt;&lt;/ul&gt; ++++ 
   * @return code
   */
  @javax.annotation.Nonnull
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public PaymentMeans holder(String holder) {
    this.holder = holder;
    return this;
  }

  /**
   * The name of the account holder.
   * @return holder
   */
  @javax.annotation.Nullable
  public String getHolder() {
    return holder;
  }

  public void setHolder(String holder) {
    this.holder = holder;
  }


  public PaymentMeans mandate(String mandate) {
    this.mandate = mandate;
    return this;
  }

  /**
   * The direct debit mandate code.
   * @return mandate
   */
  @javax.annotation.Nullable
  public String getMandate() {
    return mandate;
  }

  public void setMandate(String mandate) {
    this.mandate = mandate;
  }


  public PaymentMeans network(String network) {
    this.network = network;
    return this;
  }

  /**
   * The name of the card network, e.g. VISA.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public PaymentMeans paymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  /**
   * The payment id that you will use to match the payment against the invoice.
   * @return paymentId
   */
  @javax.annotation.Nullable
  public String getPaymentId() {
    return paymentId;
  }

  public void setPaymentId(String paymentId) {
    this.paymentId = paymentId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentMeans paymentMeans = (PaymentMeans) o;
    return Objects.equals(this.account, paymentMeans.account) &&
        Objects.equals(this.amount, paymentMeans.amount) &&
        Objects.equals(this.brancheCode, paymentMeans.brancheCode) &&
        Objects.equals(this.code, paymentMeans.code) &&
        Objects.equals(this.holder, paymentMeans.holder) &&
        Objects.equals(this.mandate, paymentMeans.mandate) &&
        Objects.equals(this.network, paymentMeans.network) &&
        Objects.equals(this.paymentId, paymentMeans.paymentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, amount, brancheCode, code, holder, mandate, network, paymentId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentMeans {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    brancheCode: ").append(toIndentedString(brancheCode)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    holder: ").append(toIndentedString(holder)).append("\n");
    sb.append("    mandate: ").append(toIndentedString(mandate)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("amount");
    openapiFields.add("branche_code");
    openapiFields.add("code");
    openapiFields.add("holder");
    openapiFields.add("mandate");
    openapiFields.add("network");
    openapiFields.add("paymentId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentMeans
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentMeans.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentMeans is not found in the empty JSON string", PaymentMeans.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentMeans.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentMeans` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentMeans.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("branche_code") != null && !jsonObj.get("branche_code").isJsonNull()) && !jsonObj.get("branche_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branche_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branche_code").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the required field `code`
      CodeEnum.validateJsonElement(jsonObj.get("code"));
      if ((jsonObj.get("holder") != null && !jsonObj.get("holder").isJsonNull()) && !jsonObj.get("holder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holder").toString()));
      }
      if ((jsonObj.get("mandate") != null && !jsonObj.get("mandate").isJsonNull()) && !jsonObj.get("mandate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mandate").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("paymentId") != null && !jsonObj.get("paymentId").isJsonNull()) && !jsonObj.get("paymentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentMeans.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentMeans' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentMeans> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentMeans.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentMeans>() {
           @Override
           public void write(JsonWriter out, PaymentMeans value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentMeans read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentMeans given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentMeans
   * @throws IOException if the JSON string is invalid with respect to PaymentMeans
   */
  public static PaymentMeans fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentMeans.class);
  }

  /**
   * Convert an instance of PaymentMeans to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

