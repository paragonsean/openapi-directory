/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CountrySpecificationIdentifier
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CountrySpecificationIdentifier {
  public static final String SERIALIZED_NAME_CENTALIZED_IDENTIFIER_TEST = "centalized_identifier_test";
  @SerializedName(SERIALIZED_NAME_CENTALIZED_IDENTIFIER_TEST)
  private String centalizedIdentifierTest;

  public static final String SERIALIZED_NAME_CENTRALIZED = "centralized";
  @SerializedName(SERIALIZED_NAME_CENTRALIZED)
  private Boolean centralized;

  public static final String SERIALIZED_NAME_CENTRALIZED_IDENTIFIER = "centralized_identifier";
  @SerializedName(SERIALIZED_NAME_CENTRALIZED_IDENTIFIER)
  private String centralizedIdentifier;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEME = "scheme";
  @SerializedName(SERIALIZED_NAME_SCHEME)
  private String scheme;

  public static final String SERIALIZED_NAME_SCHEME_NUMERCIAL = "scheme_numercial";
  @SerializedName(SERIALIZED_NAME_SCHEME_NUMERCIAL)
  private String schemeNumercial;

  /**
   * The scheme type of the identifier. Currently always \&quot;iso6523-actorid-upis\&quot;
   */
  @JsonAdapter(SchemeTypeEnum.Adapter.class)
  public enum SchemeTypeEnum {
    ISO6523_ACTORID_UPIS("iso6523-actorid-upis");

    private String value;

    SchemeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SchemeTypeEnum fromValue(String value) {
      for (SchemeTypeEnum b : SchemeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SchemeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchemeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchemeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SchemeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SchemeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEME_TYPE = "scheme_type";
  @SerializedName(SERIALIZED_NAME_SCHEME_TYPE)
  private SchemeTypeEnum schemeType;

  public CountrySpecificationIdentifier() {
  }

  public CountrySpecificationIdentifier centalizedIdentifierTest(String centalizedIdentifierTest) {
    this.centalizedIdentifierTest = centalizedIdentifierTest;
    return this;
  }

  /**
   * The centralized identifier to use for routing in test cases, if the \&quot;centralized\&quot; proprerty is true. May not always be available depending on the country and network.
   * @return centalizedIdentifierTest
   */
  @javax.annotation.Nullable
  public String getCentalizedIdentifierTest() {
    return centalizedIdentifierTest;
  }

  public void setCentalizedIdentifierTest(String centalizedIdentifierTest) {
    this.centalizedIdentifierTest = centalizedIdentifierTest;
  }


  public CountrySpecificationIdentifier centralized(Boolean centralized) {
    this.centralized = centralized;
    return this;
  }

  /**
   * Whether or not the identifier represents a centralized routing identifier. This is used in SG, AT and FR where all government invoices are routed to a central accesspoint with a single identifier. This field can only be present for routing identifiers.
   * @return centralized
   */
  @javax.annotation.Nullable
  public Boolean getCentralized() {
    return centralized;
  }

  public void setCentralized(Boolean centralized) {
    this.centralized = centralized;
  }


  public CountrySpecificationIdentifier centralizedIdentifier(String centralizedIdentifier) {
    this.centralizedIdentifier = centralizedIdentifier;
    return this;
  }

  /**
   * The centralized identifier to use for routing, if the \&quot;centralized\&quot; proprerty is true.
   * @return centralizedIdentifier
   */
  @javax.annotation.Nullable
  public String getCentralizedIdentifier() {
    return centralizedIdentifier;
  }

  public void setCentralizedIdentifier(String centralizedIdentifier) {
    this.centralizedIdentifier = centralizedIdentifier;
  }


  public CountrySpecificationIdentifier description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Identifier description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CountrySpecificationIdentifier scheme(String scheme) {
    this.scheme = scheme;
    return this;
  }

  /**
   * The scheme of the identifier
   * @return scheme
   */
  @javax.annotation.Nullable
  public String getScheme() {
    return scheme;
  }

  public void setScheme(String scheme) {
    this.scheme = scheme;
  }


  public CountrySpecificationIdentifier schemeNumercial(String schemeNumercial) {
    this.schemeNumercial = schemeNumercial;
    return this;
  }

  /**
   * The numerical version of the scheme of the identifier
   * @return schemeNumercial
   */
  @javax.annotation.Nullable
  public String getSchemeNumercial() {
    return schemeNumercial;
  }

  public void setSchemeNumercial(String schemeNumercial) {
    this.schemeNumercial = schemeNumercial;
  }


  public CountrySpecificationIdentifier schemeType(SchemeTypeEnum schemeType) {
    this.schemeType = schemeType;
    return this;
  }

  /**
   * The scheme type of the identifier. Currently always \&quot;iso6523-actorid-upis\&quot;
   * @return schemeType
   */
  @javax.annotation.Nullable
  public SchemeTypeEnum getSchemeType() {
    return schemeType;
  }

  public void setSchemeType(SchemeTypeEnum schemeType) {
    this.schemeType = schemeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CountrySpecificationIdentifier countrySpecificationIdentifier = (CountrySpecificationIdentifier) o;
    return Objects.equals(this.centalizedIdentifierTest, countrySpecificationIdentifier.centalizedIdentifierTest) &&
        Objects.equals(this.centralized, countrySpecificationIdentifier.centralized) &&
        Objects.equals(this.centralizedIdentifier, countrySpecificationIdentifier.centralizedIdentifier) &&
        Objects.equals(this.description, countrySpecificationIdentifier.description) &&
        Objects.equals(this.scheme, countrySpecificationIdentifier.scheme) &&
        Objects.equals(this.schemeNumercial, countrySpecificationIdentifier.schemeNumercial) &&
        Objects.equals(this.schemeType, countrySpecificationIdentifier.schemeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(centalizedIdentifierTest, centralized, centralizedIdentifier, description, scheme, schemeNumercial, schemeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CountrySpecificationIdentifier {\n");
    sb.append("    centalizedIdentifierTest: ").append(toIndentedString(centalizedIdentifierTest)).append("\n");
    sb.append("    centralized: ").append(toIndentedString(centralized)).append("\n");
    sb.append("    centralizedIdentifier: ").append(toIndentedString(centralizedIdentifier)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("    schemeNumercial: ").append(toIndentedString(schemeNumercial)).append("\n");
    sb.append("    schemeType: ").append(toIndentedString(schemeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("centalized_identifier_test");
    openapiFields.add("centralized");
    openapiFields.add("centralized_identifier");
    openapiFields.add("description");
    openapiFields.add("scheme");
    openapiFields.add("scheme_numercial");
    openapiFields.add("scheme_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CountrySpecificationIdentifier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CountrySpecificationIdentifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CountrySpecificationIdentifier is not found in the empty JSON string", CountrySpecificationIdentifier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CountrySpecificationIdentifier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CountrySpecificationIdentifier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("centalized_identifier_test") != null && !jsonObj.get("centalized_identifier_test").isJsonNull()) && !jsonObj.get("centalized_identifier_test").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `centalized_identifier_test` to be a primitive type in the JSON string but got `%s`", jsonObj.get("centalized_identifier_test").toString()));
      }
      if ((jsonObj.get("centralized_identifier") != null && !jsonObj.get("centralized_identifier").isJsonNull()) && !jsonObj.get("centralized_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `centralized_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("centralized_identifier").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("scheme") != null && !jsonObj.get("scheme").isJsonNull()) && !jsonObj.get("scheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheme").toString()));
      }
      if ((jsonObj.get("scheme_numercial") != null && !jsonObj.get("scheme_numercial").isJsonNull()) && !jsonObj.get("scheme_numercial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheme_numercial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheme_numercial").toString()));
      }
      if ((jsonObj.get("scheme_type") != null && !jsonObj.get("scheme_type").isJsonNull()) && !jsonObj.get("scheme_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheme_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheme_type").toString()));
      }
      // validate the optional field `scheme_type`
      if (jsonObj.get("scheme_type") != null && !jsonObj.get("scheme_type").isJsonNull()) {
        SchemeTypeEnum.validateJsonElement(jsonObj.get("scheme_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CountrySpecificationIdentifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CountrySpecificationIdentifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CountrySpecificationIdentifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CountrySpecificationIdentifier.class));

       return (TypeAdapter<T>) new TypeAdapter<CountrySpecificationIdentifier>() {
           @Override
           public void write(JsonWriter out, CountrySpecificationIdentifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CountrySpecificationIdentifier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CountrySpecificationIdentifier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CountrySpecificationIdentifier
   * @throws IOException if the JSON string is invalid with respect to CountrySpecificationIdentifier
   */
  public static CountrySpecificationIdentifier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CountrySpecificationIdentifier.class);
  }

  /**
   * Convert an instance of CountrySpecificationIdentifier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

