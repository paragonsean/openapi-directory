/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.InvoiceRecipientPreflight;
import org.openapitools.client.model.InvoiceSubmission;
import org.openapitools.client.model.InvoiceSubmissionEvidence;
import org.openapitools.client.model.InvoiceSubmissionResult;
import org.openapitools.client.model.PreflightInvoiceRecipientResult;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvoiceSubmissionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoiceSubmissionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvoiceSubmissionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createInvoiceSubmission
     * @param invoiceSubmission Invoice to submit (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvoiceSubmissionCall(InvoiceSubmission invoiceSubmission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceSubmission;

        // create path and map variables
        String localVarPath = "/invoice_submissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInvoiceSubmissionValidateBeforeCall(InvoiceSubmission invoiceSubmission, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceSubmission' is set
        if (invoiceSubmission == null) {
            throw new ApiException("Missing the required parameter 'invoiceSubmission' when calling createInvoiceSubmission(Async)");
        }

        return createInvoiceSubmissionCall(invoiceSubmission, _callback);

    }

    /**
     * Submit a new invoice
     * DEPRECATED. Use the new /document_submissions endpoint. Submit an invoice for delivery.
     * @param invoiceSubmission Invoice to submit (required)
     * @return InvoiceSubmissionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceSubmissionResult createInvoiceSubmission(InvoiceSubmission invoiceSubmission) throws ApiException {
        ApiResponse<InvoiceSubmissionResult> localVarResp = createInvoiceSubmissionWithHttpInfo(invoiceSubmission);
        return localVarResp.getData();
    }

    /**
     * Submit a new invoice
     * DEPRECATED. Use the new /document_submissions endpoint. Submit an invoice for delivery.
     * @param invoiceSubmission Invoice to submit (required)
     * @return ApiResponse&lt;InvoiceSubmissionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceSubmissionResult> createInvoiceSubmissionWithHttpInfo(InvoiceSubmission invoiceSubmission) throws ApiException {
        okhttp3.Call localVarCall = createInvoiceSubmissionValidateBeforeCall(invoiceSubmission, null);
        Type localVarReturnType = new TypeToken<InvoiceSubmissionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a new invoice (asynchronously)
     * DEPRECATED. Use the new /document_submissions endpoint. Submit an invoice for delivery.
     * @param invoiceSubmission Invoice to submit (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvoiceSubmissionAsync(InvoiceSubmission invoiceSubmission, final ApiCallback<InvoiceSubmissionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInvoiceSubmissionValidateBeforeCall(invoiceSubmission, _callback);
        Type localVarReturnType = new TypeToken<InvoiceSubmissionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for preflightInvoiceRecipient
     * @param invoiceRecipientPreflight The invoice recipient to preflight (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preflightInvoiceRecipientCall(InvoiceRecipientPreflight invoiceRecipientPreflight, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceRecipientPreflight;

        // create path and map variables
        String localVarPath = "/invoice_submissions/preflight";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call preflightInvoiceRecipientValidateBeforeCall(InvoiceRecipientPreflight invoiceRecipientPreflight, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceRecipientPreflight' is set
        if (invoiceRecipientPreflight == null) {
            throw new ApiException("Missing the required parameter 'invoiceRecipientPreflight' when calling preflightInvoiceRecipient(Async)");
        }

        return preflightInvoiceRecipientCall(invoiceRecipientPreflight, _callback);

    }

    /**
     * DEPRECATED. Preflight an invoice recipient
     * Deprecated. Use the new /discovery endpoint. Check whether Storecove can deliver an invoice for a list of ids.
     * @param invoiceRecipientPreflight The invoice recipient to preflight (required)
     * @return PreflightInvoiceRecipientResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public PreflightInvoiceRecipientResult preflightInvoiceRecipient(InvoiceRecipientPreflight invoiceRecipientPreflight) throws ApiException {
        ApiResponse<PreflightInvoiceRecipientResult> localVarResp = preflightInvoiceRecipientWithHttpInfo(invoiceRecipientPreflight);
        return localVarResp.getData();
    }

    /**
     * DEPRECATED. Preflight an invoice recipient
     * Deprecated. Use the new /discovery endpoint. Check whether Storecove can deliver an invoice for a list of ids.
     * @param invoiceRecipientPreflight The invoice recipient to preflight (required)
     * @return ApiResponse&lt;PreflightInvoiceRecipientResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreflightInvoiceRecipientResult> preflightInvoiceRecipientWithHttpInfo(InvoiceRecipientPreflight invoiceRecipientPreflight) throws ApiException {
        okhttp3.Call localVarCall = preflightInvoiceRecipientValidateBeforeCall(invoiceRecipientPreflight, null);
        Type localVarReturnType = new TypeToken<PreflightInvoiceRecipientResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DEPRECATED. Preflight an invoice recipient (asynchronously)
     * Deprecated. Use the new /discovery endpoint. Check whether Storecove can deliver an invoice for a list of ids.
     * @param invoiceRecipientPreflight The invoice recipient to preflight (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preflightInvoiceRecipientAsync(InvoiceRecipientPreflight invoiceRecipientPreflight, final ApiCallback<PreflightInvoiceRecipientResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = preflightInvoiceRecipientValidateBeforeCall(invoiceRecipientPreflight, _callback);
        Type localVarReturnType = new TypeToken<PreflightInvoiceRecipientResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showInvoiceSubmissionEvidence
     * @param guid InvoiceSubmission GUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showInvoiceSubmissionEvidenceCall(UUID guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoice_submissions/{guid}/evidence"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showInvoiceSubmissionEvidenceValidateBeforeCall(UUID guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling showInvoiceSubmissionEvidence(Async)");
        }

        return showInvoiceSubmissionEvidenceCall(guid, _callback);

    }

    /**
     * DEPRECATED. Get InvoiceSubmission Evidence
     * Deprecated. Use the new /document_submissions/{guid}/evidence endpoint. Get evidence for an InvoiceSubmission by GUID with corresponding status
     * @param guid InvoiceSubmission GUID (required)
     * @return InvoiceSubmissionEvidence
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceSubmissionEvidence showInvoiceSubmissionEvidence(UUID guid) throws ApiException {
        ApiResponse<InvoiceSubmissionEvidence> localVarResp = showInvoiceSubmissionEvidenceWithHttpInfo(guid);
        return localVarResp.getData();
    }

    /**
     * DEPRECATED. Get InvoiceSubmission Evidence
     * Deprecated. Use the new /document_submissions/{guid}/evidence endpoint. Get evidence for an InvoiceSubmission by GUID with corresponding status
     * @param guid InvoiceSubmission GUID (required)
     * @return ApiResponse&lt;InvoiceSubmissionEvidence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceSubmissionEvidence> showInvoiceSubmissionEvidenceWithHttpInfo(UUID guid) throws ApiException {
        okhttp3.Call localVarCall = showInvoiceSubmissionEvidenceValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<InvoiceSubmissionEvidence>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DEPRECATED. Get InvoiceSubmission Evidence (asynchronously)
     * Deprecated. Use the new /document_submissions/{guid}/evidence endpoint. Get evidence for an InvoiceSubmission by GUID with corresponding status
     * @param guid InvoiceSubmission GUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showInvoiceSubmissionEvidenceAsync(UUID guid, final ApiCallback<InvoiceSubmissionEvidence> _callback) throws ApiException {

        okhttp3.Call localVarCall = showInvoiceSubmissionEvidenceValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<InvoiceSubmissionEvidence>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
