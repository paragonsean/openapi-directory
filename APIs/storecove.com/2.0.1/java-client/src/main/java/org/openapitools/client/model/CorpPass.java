/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CorpPass
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CorpPass {
  public static final String SERIALIZED_NAME_CLIENT_REDIRECT_FAIL_URL = "client_redirect_fail_url";
  @SerializedName(SERIALIZED_NAME_CLIENT_REDIRECT_FAIL_URL)
  private String clientRedirectFailUrl;

  public static final String SERIALIZED_NAME_CLIENT_REDIRECT_SUCCESS_URL = "client_redirect_success_url";
  @SerializedName(SERIALIZED_NAME_CLIENT_REDIRECT_SUCCESS_URL)
  private String clientRedirectSuccessUrl;

  public static final String SERIALIZED_NAME_CORPPASS_URL = "corppass_url";
  @SerializedName(SERIALIZED_NAME_CORPPASS_URL)
  private String corppassUrl;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled = false;

  /**
   * The CorpPass flow type.
   */
  @JsonAdapter(FlowTypeEnum.Adapter.class)
  public enum FlowTypeEnum {
    REDIRECT("corppass_flow_redirect"),
    
    EMAIL("corppass_flow_email");

    private String value;

    FlowTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FlowTypeEnum fromValue(String value) {
      for (FlowTypeEnum b : FlowTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FlowTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FlowTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FlowTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FlowTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FlowTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FLOW_TYPE = "flow_type";
  @SerializedName(SERIALIZED_NAME_FLOW_TYPE)
  private FlowTypeEnum flowType;

  public static final String SERIALIZED_NAME_SIGNER_EMAIL = "signer_email";
  @SerializedName(SERIALIZED_NAME_SIGNER_EMAIL)
  private String signerEmail;

  public static final String SERIALIZED_NAME_SIGNER_NAME = "signer_name";
  @SerializedName(SERIALIZED_NAME_SIGNER_NAME)
  private String signerName;

  public static final String SERIALIZED_NAME_SIMULATE_CORPPASS = "simulate_corppass";
  @SerializedName(SERIALIZED_NAME_SIMULATE_CORPPASS)
  private Boolean simulateCorppass = false;

  /**
   * The status of the CorpPass process.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NO_STATUS_("corppass_no_status,"),
    
    INITIATED_("corppass_initiated,"),
    
    CANCELLED_("corppass_cancelled,"),
    
    FAILED_("corppass_failed,"),
    
    SUCCEEDED("corppass_succeeded");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public CorpPass() {
  }

  public CorpPass clientRedirectFailUrl(String clientRedirectFailUrl) {
    this.clientRedirectFailUrl = clientRedirectFailUrl;
    return this;
  }

  /**
   * The URL the CorpPass system will redirect to in case of a failure to perform identity verfication.
   * @return clientRedirectFailUrl
   */
  @javax.annotation.Nullable
  public String getClientRedirectFailUrl() {
    return clientRedirectFailUrl;
  }

  public void setClientRedirectFailUrl(String clientRedirectFailUrl) {
    this.clientRedirectFailUrl = clientRedirectFailUrl;
  }


  public CorpPass clientRedirectSuccessUrl(String clientRedirectSuccessUrl) {
    this.clientRedirectSuccessUrl = clientRedirectSuccessUrl;
    return this;
  }

  /**
   * The URL the CorpPass system will redirect to in case of successful identity verfication.
   * @return clientRedirectSuccessUrl
   */
  @javax.annotation.Nullable
  public String getClientRedirectSuccessUrl() {
    return clientRedirectSuccessUrl;
  }

  public void setClientRedirectSuccessUrl(String clientRedirectSuccessUrl) {
    this.clientRedirectSuccessUrl = clientRedirectSuccessUrl;
  }


  public CorpPass corppassUrl(String corppassUrl) {
    this.corppassUrl = corppassUrl;
    return this;
  }

  /**
   * The CorpPass redirect URL.
   * @return corppassUrl
   */
  @javax.annotation.Nullable
  public String getCorppassUrl() {
    return corppassUrl;
  }

  public void setCorppassUrl(String corppassUrl) {
    this.corppassUrl = corppassUrl;
  }


  public CorpPass enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether or not the CorpPass flow is enabled.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CorpPass flowType(FlowTypeEnum flowType) {
    this.flowType = flowType;
    return this;
  }

  /**
   * The CorpPass flow type.
   * @return flowType
   */
  @javax.annotation.Nullable
  public FlowTypeEnum getFlowType() {
    return flowType;
  }

  public void setFlowType(FlowTypeEnum flowType) {
    this.flowType = flowType;
  }


  public CorpPass signerEmail(String signerEmail) {
    this.signerEmail = signerEmail;
    return this;
  }

  /**
   * The email of the person who is going to perform the CorpPass process.
   * @return signerEmail
   */
  @javax.annotation.Nullable
  public String getSignerEmail() {
    return signerEmail;
  }

  public void setSignerEmail(String signerEmail) {
    this.signerEmail = signerEmail;
  }


  public CorpPass signerName(String signerName) {
    this.signerName = signerName;
    return this;
  }

  /**
   * The name of the person who is going to perform the CorpPass process.
   * @return signerName
   */
  @javax.annotation.Nullable
  public String getSignerName() {
    return signerName;
  }

  public void setSignerName(String signerName) {
    this.signerName = signerName;
  }


  public CorpPass simulateCorppass(Boolean simulateCorppass) {
    this.simulateCorppass = simulateCorppass;
    return this;
  }

  /**
   * Whether or not CorpPass is being simulated.
   * @return simulateCorppass
   */
  @javax.annotation.Nullable
  public Boolean getSimulateCorppass() {
    return simulateCorppass;
  }

  public void setSimulateCorppass(Boolean simulateCorppass) {
    this.simulateCorppass = simulateCorppass;
  }


  public CorpPass status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the CorpPass process.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CorpPass corpPass = (CorpPass) o;
    return Objects.equals(this.clientRedirectFailUrl, corpPass.clientRedirectFailUrl) &&
        Objects.equals(this.clientRedirectSuccessUrl, corpPass.clientRedirectSuccessUrl) &&
        Objects.equals(this.corppassUrl, corpPass.corppassUrl) &&
        Objects.equals(this.enabled, corpPass.enabled) &&
        Objects.equals(this.flowType, corpPass.flowType) &&
        Objects.equals(this.signerEmail, corpPass.signerEmail) &&
        Objects.equals(this.signerName, corpPass.signerName) &&
        Objects.equals(this.simulateCorppass, corpPass.simulateCorppass) &&
        Objects.equals(this.status, corpPass.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientRedirectFailUrl, clientRedirectSuccessUrl, corppassUrl, enabled, flowType, signerEmail, signerName, simulateCorppass, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CorpPass {\n");
    sb.append("    clientRedirectFailUrl: ").append(toIndentedString(clientRedirectFailUrl)).append("\n");
    sb.append("    clientRedirectSuccessUrl: ").append(toIndentedString(clientRedirectSuccessUrl)).append("\n");
    sb.append("    corppassUrl: ").append(toIndentedString(corppassUrl)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    flowType: ").append(toIndentedString(flowType)).append("\n");
    sb.append("    signerEmail: ").append(toIndentedString(signerEmail)).append("\n");
    sb.append("    signerName: ").append(toIndentedString(signerName)).append("\n");
    sb.append("    simulateCorppass: ").append(toIndentedString(simulateCorppass)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_redirect_fail_url");
    openapiFields.add("client_redirect_success_url");
    openapiFields.add("corppass_url");
    openapiFields.add("enabled");
    openapiFields.add("flow_type");
    openapiFields.add("signer_email");
    openapiFields.add("signer_name");
    openapiFields.add("simulate_corppass");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CorpPass
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CorpPass.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CorpPass is not found in the empty JSON string", CorpPass.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CorpPass.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CorpPass` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client_redirect_fail_url") != null && !jsonObj.get("client_redirect_fail_url").isJsonNull()) && !jsonObj.get("client_redirect_fail_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_redirect_fail_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_redirect_fail_url").toString()));
      }
      if ((jsonObj.get("client_redirect_success_url") != null && !jsonObj.get("client_redirect_success_url").isJsonNull()) && !jsonObj.get("client_redirect_success_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_redirect_success_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_redirect_success_url").toString()));
      }
      if ((jsonObj.get("corppass_url") != null && !jsonObj.get("corppass_url").isJsonNull()) && !jsonObj.get("corppass_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `corppass_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("corppass_url").toString()));
      }
      if ((jsonObj.get("flow_type") != null && !jsonObj.get("flow_type").isJsonNull()) && !jsonObj.get("flow_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flow_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flow_type").toString()));
      }
      // validate the optional field `flow_type`
      if (jsonObj.get("flow_type") != null && !jsonObj.get("flow_type").isJsonNull()) {
        FlowTypeEnum.validateJsonElement(jsonObj.get("flow_type"));
      }
      if ((jsonObj.get("signer_email") != null && !jsonObj.get("signer_email").isJsonNull()) && !jsonObj.get("signer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signer_email").toString()));
      }
      if ((jsonObj.get("signer_name") != null && !jsonObj.get("signer_name").isJsonNull()) && !jsonObj.get("signer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signer_name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CorpPass.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CorpPass' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CorpPass> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CorpPass.class));

       return (TypeAdapter<T>) new TypeAdapter<CorpPass>() {
           @Override
           public void write(JsonWriter out, CorpPass value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CorpPass read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CorpPass given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CorpPass
   * @throws IOException if the JSON string is invalid with respect to CorpPass
   */
  public static CorpPass fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CorpPass.class);
  }

  /**
   * Convert an instance of CorpPass to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

