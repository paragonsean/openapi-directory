/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AdditionalTaxIdentifierUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:44.175207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdditionalTaxIdentifierUpdate {
  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_THIRD_PARTY_PASSWORD = "third_party_password";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_PASSWORD)
  private String thirdPartyPassword;

  public static final String SERIALIZED_NAME_THIRD_PARTY_USERNAME = "third_party_username";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_USERNAME)
  private String thirdPartyUsername;

  public AdditionalTaxIdentifierUpdate() {
  }

  public AdditionalTaxIdentifierUpdate identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * The identifier.
   * @return identifier
   */
  @javax.annotation.Nonnull
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public AdditionalTaxIdentifierUpdate thirdPartyPassword(String thirdPartyPassword) {
    this.thirdPartyPassword = thirdPartyPassword;
    return this;
  }

  /**
   * The password to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN tax identifier.
   * @return thirdPartyPassword
   */
  @javax.annotation.Nullable
  public String getThirdPartyPassword() {
    return thirdPartyPassword;
  }

  public void setThirdPartyPassword(String thirdPartyPassword) {
    this.thirdPartyPassword = thirdPartyPassword;
  }


  public AdditionalTaxIdentifierUpdate thirdPartyUsername(String thirdPartyUsername) {
    this.thirdPartyUsername = thirdPartyUsername;
    return this;
  }

  /**
   * The username to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN tax identifier.
   * @return thirdPartyUsername
   */
  @javax.annotation.Nullable
  public String getThirdPartyUsername() {
    return thirdPartyUsername;
  }

  public void setThirdPartyUsername(String thirdPartyUsername) {
    this.thirdPartyUsername = thirdPartyUsername;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalTaxIdentifierUpdate additionalTaxIdentifierUpdate = (AdditionalTaxIdentifierUpdate) o;
    return Objects.equals(this.identifier, additionalTaxIdentifierUpdate.identifier) &&
        Objects.equals(this.thirdPartyPassword, additionalTaxIdentifierUpdate.thirdPartyPassword) &&
        Objects.equals(this.thirdPartyUsername, additionalTaxIdentifierUpdate.thirdPartyUsername);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifier, thirdPartyPassword, thirdPartyUsername);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalTaxIdentifierUpdate {\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    thirdPartyPassword: ").append(toIndentedString(thirdPartyPassword)).append("\n");
    sb.append("    thirdPartyUsername: ").append(toIndentedString(thirdPartyUsername)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("identifier");
    openapiFields.add("third_party_password");
    openapiFields.add("third_party_username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("identifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdditionalTaxIdentifierUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdditionalTaxIdentifierUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalTaxIdentifierUpdate is not found in the empty JSON string", AdditionalTaxIdentifierUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdditionalTaxIdentifierUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdditionalTaxIdentifierUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AdditionalTaxIdentifierUpdate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if ((jsonObj.get("third_party_password") != null && !jsonObj.get("third_party_password").isJsonNull()) && !jsonObj.get("third_party_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `third_party_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("third_party_password").toString()));
      }
      if ((jsonObj.get("third_party_username") != null && !jsonObj.get("third_party_username").isJsonNull()) && !jsonObj.get("third_party_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `third_party_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("third_party_username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalTaxIdentifierUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalTaxIdentifierUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalTaxIdentifierUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalTaxIdentifierUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalTaxIdentifierUpdate>() {
           @Override
           public void write(JsonWriter out, AdditionalTaxIdentifierUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalTaxIdentifierUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdditionalTaxIdentifierUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdditionalTaxIdentifierUpdate
   * @throws IOException if the JSON string is invalid with respect to AdditionalTaxIdentifierUpdate
   */
  public static AdditionalTaxIdentifierUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalTaxIdentifierUpdate.class);
  }

  /**
   * Convert an instance of AdditionalTaxIdentifierUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

