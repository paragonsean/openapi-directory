/*
 * Storecove API
 * Storecove API
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: apisupport@storecove.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AdditionalTaxIdentifier;
import org.openapitools.client.model.AdditionalTaxIdentifierCreate;
import org.openapitools.client.model.AdditionalTaxIdentifierUpdate;
import org.openapitools.client.model.ErrorModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdditionalTaxIdentifiersApi
 */
@Disabled
public class AdditionalTaxIdentifiersApiTest {

    private final AdditionalTaxIdentifiersApi api = new AdditionalTaxIdentifiersApi();

    /**
     * Create a new AdditionalTaxIdentifier
     *
     * Create a new AdditionalTaxIdentifier. An AdditionalTaxIdentifier is a seconday tax identifier that is used inside the EU when sending invoices to consumers. In that case, the VAT of the receiving country is used and if the sender has a local VAT identifier, that is used to identifiy the sender, instead of the sender&#39;s origin country VAT number. To use these identifiers, use the invoice.consumerTaxMode &#x3D; true property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAdditionalTaxIdentifierTest() throws ApiException {
        Long legalEntityId = null;
        AdditionalTaxIdentifierCreate additionalTaxIdentifierCreate = null;
        AdditionalTaxIdentifier response = api.createAdditionalTaxIdentifier(legalEntityId, additionalTaxIdentifierCreate);
        // TODO: test validations
    }

    /**
     * Delete AdditionalTaxIdentifier
     *
     * Delete an AdditionalTaxIdentifier
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAdditionalTaxIdentifierTest() throws ApiException {
        Long legalEntityId = null;
        Long id = null;
        api.deleteAdditionalTaxIdentifier(legalEntityId, id);
        // TODO: test validations
    }

    /**
     * Get AdditionalTaxIdentifier
     *
     * Get an AdditionalTaxIdentifier
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAdditionalTaxIdentifierTest() throws ApiException {
        Long legalEntityId = null;
        Long id = null;
        AdditionalTaxIdentifier response = api.getAdditionalTaxIdentifier(legalEntityId, id);
        // TODO: test validations
    }

    /**
     * Update AdditionalTaxIdentifier
     *
     * Update an AdditionalTaxIdentifier
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAdditionalTaxIdentifierTest() throws ApiException {
        Long legalEntityId = null;
        Long id = null;
        AdditionalTaxIdentifierUpdate additionalTaxIdentifierUpdate = null;
        AdditionalTaxIdentifier response = api.updateAdditionalTaxIdentifier(legalEntityId, id, additionalTaxIdentifierUpdate);
        // TODO: test validations
    }

}
