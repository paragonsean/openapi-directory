/**
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntryPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntryPoint::OAIEntryPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntryPoint::OAIEntryPoint() {
    this->initializeModel();
}

OAIEntryPoint::~OAIEntryPoint() {}

void OAIEntryPoint::initializeModel() {

    m_content_types_isSet = false;
    m_content_types_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_encoding_types_isSet = false;
    m_encoding_types_isValid = false;

    m_http_method_isSet = false;
    m_http_method_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_url_template_isSet = false;
    m_url_template_isValid = false;
}

void OAIEntryPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntryPoint::fromJsonObject(QJsonObject json) {

    m_content_types_isValid = ::OpenAPI::fromJsonValue(m_content_types, json[QString("content_types")]);
    m_content_types_isSet = !json[QString("content_types")].isNull() && m_content_types_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_encoding_types_isValid = ::OpenAPI::fromJsonValue(m_encoding_types, json[QString("encoding_types")]);
    m_encoding_types_isSet = !json[QString("encoding_types")].isNull() && m_encoding_types_isValid;

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("http_method")]);
    m_http_method_isSet = !json[QString("http_method")].isNull() && m_http_method_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_url_template_isValid = ::OpenAPI::fromJsonValue(m_url_template, json[QString("url_template")]);
    m_url_template_isSet = !json[QString("url_template")].isNull() && m_url_template_isValid;
}

QString OAIEntryPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntryPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_content_types.size() > 0) {
        obj.insert(QString("content_types"), ::OpenAPI::toJsonValue(m_content_types));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_encoding_types.size() > 0) {
        obj.insert(QString("encoding_types"), ::OpenAPI::toJsonValue(m_encoding_types));
    }
    if (m_http_method_isSet) {
        obj.insert(QString("http_method"), ::OpenAPI::toJsonValue(m_http_method));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_url_template_isSet) {
        obj.insert(QString("url_template"), ::OpenAPI::toJsonValue(m_url_template));
    }
    return obj;
}

QList<QString> OAIEntryPoint::getContentTypes() const {
    return m_content_types;
}
void OAIEntryPoint::setContentTypes(const QList<QString> &content_types) {
    m_content_types = content_types;
    m_content_types_isSet = true;
}

bool OAIEntryPoint::is_content_types_Set() const{
    return m_content_types_isSet;
}

bool OAIEntryPoint::is_content_types_Valid() const{
    return m_content_types_isValid;
}

QString OAIEntryPoint::getDescription() const {
    return m_description;
}
void OAIEntryPoint::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEntryPoint::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEntryPoint::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIEntryPoint::getEncodingTypes() const {
    return m_encoding_types;
}
void OAIEntryPoint::setEncodingTypes(const QList<QString> &encoding_types) {
    m_encoding_types = encoding_types;
    m_encoding_types_isSet = true;
}

bool OAIEntryPoint::is_encoding_types_Set() const{
    return m_encoding_types_isSet;
}

bool OAIEntryPoint::is_encoding_types_Valid() const{
    return m_encoding_types_isValid;
}

QString OAIEntryPoint::getHttpMethod() const {
    return m_http_method;
}
void OAIEntryPoint::setHttpMethod(const QString &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAIEntryPoint::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAIEntryPoint::is_http_method_Valid() const{
    return m_http_method_isValid;
}

QString OAIEntryPoint::getName() const {
    return m_name;
}
void OAIEntryPoint::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEntryPoint::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEntryPoint::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIEntryPointParameter> OAIEntryPoint::getParameters() const {
    return m_parameters;
}
void OAIEntryPoint::setParameters(const QList<OAIEntryPointParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIEntryPoint::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIEntryPoint::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIEntryPoint::getUrl() const {
    return m_url;
}
void OAIEntryPoint::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEntryPoint::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEntryPoint::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIEntryPoint::getUrlTemplate() const {
    return m_url_template;
}
void OAIEntryPoint::setUrlTemplate(const QString &url_template) {
    m_url_template = url_template;
    m_url_template_isSet = true;
}

bool OAIEntryPoint::is_url_template_Set() const{
    return m_url_template_isSet;
}

bool OAIEntryPoint::is_url_template_Valid() const{
    return m_url_template_isValid;
}

bool OAIEntryPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_template_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntryPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_types_isValid && m_description_isValid && m_encoding_types_isValid && m_http_method_isValid && m_name_isValid && m_parameters_isValid && m_url_isValid && m_url_template_isValid && true;
}

} // namespace OpenAPI
