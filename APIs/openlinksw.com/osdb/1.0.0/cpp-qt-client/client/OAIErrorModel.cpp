/**
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorModel::OAIErrorModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorModel::OAIErrorModel() {
    this->initializeModel();
}

OAIErrorModel::~OAIErrorModel() {}

void OAIErrorModel::initializeModel() {

    m_api_isSet = false;
    m_api_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIErrorModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorModel::fromJsonObject(QJsonObject json) {

    m_api_isValid = ::OpenAPI::fromJsonValue(m_api, json[QString("api")]);
    m_api_isSet = !json[QString("api")].isNull() && m_api_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIErrorModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorModel::asJsonObject() const {
    QJsonObject obj;
    if (m_api_isSet) {
        obj.insert(QString("api"), ::OpenAPI::toJsonValue(m_api));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_response_isSet) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIErrorModel::getApi() const {
    return m_api;
}
void OAIErrorModel::setApi(const QString &api) {
    m_api = api;
    m_api_isSet = true;
}

bool OAIErrorModel::is_api_Set() const{
    return m_api_isSet;
}

bool OAIErrorModel::is_api_Valid() const{
    return m_api_isValid;
}

QString OAIErrorModel::getMethod() const {
    return m_method;
}
void OAIErrorModel::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIErrorModel::is_method_Set() const{
    return m_method_isSet;
}

bool OAIErrorModel::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIErrorModel::getResponse() const {
    return m_response;
}
void OAIErrorModel::setResponse(const QString &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIErrorModel::is_response_Set() const{
    return m_response_isSet;
}

bool OAIErrorModel::is_response_Valid() const{
    return m_response_isValid;
}

QString OAIErrorModel::getStatus() const {
    return m_status;
}
void OAIErrorModel::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIErrorModel::is_status_Set() const{
    return m_status_isSet;
}

bool OAIErrorModel::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIErrorModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
