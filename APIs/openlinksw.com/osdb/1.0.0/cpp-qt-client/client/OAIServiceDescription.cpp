/**
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceDescription::OAIServiceDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceDescription::OAIServiceDescription() {
    this->initializeModel();
}

OAIServiceDescription::~OAIServiceDescription() {}

void OAIServiceDescription::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_import_source_uri_isSet = false;
    m_import_source_uri_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIServiceDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceDescription::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_import_source_uri_isValid = ::OpenAPI::fromJsonValue(m_import_source_uri, json[QString("import_source_uri")]);
    m_import_source_uri_isSet = !json[QString("import_source_uri")].isNull() && m_import_source_uri_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("service_id")]);
    m_service_id_isSet = !json[QString("service_id")].isNull() && m_service_id_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("service_name")]);
    m_service_name_isSet = !json[QString("service_name")].isNull() && m_service_name_isValid;
}

QString OAIServiceDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_import_source_uri_isSet) {
        obj.insert(QString("import_source_uri"), ::OpenAPI::toJsonValue(m_import_source_uri));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("service_id"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("service_name"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

QString OAIServiceDescription::getDescription() const {
    return m_description;
}
void OAIServiceDescription::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServiceDescription::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServiceDescription::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIServiceDescription::getImportSourceUri() const {
    return m_import_source_uri;
}
void OAIServiceDescription::setImportSourceUri(const QString &import_source_uri) {
    m_import_source_uri = import_source_uri;
    m_import_source_uri_isSet = true;
}

bool OAIServiceDescription::is_import_source_uri_Set() const{
    return m_import_source_uri_isSet;
}

bool OAIServiceDescription::is_import_source_uri_Valid() const{
    return m_import_source_uri_isValid;
}

QString OAIServiceDescription::getServiceId() const {
    return m_service_id;
}
void OAIServiceDescription::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIServiceDescription::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIServiceDescription::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIServiceDescription::getServiceName() const {
    return m_service_name;
}
void OAIServiceDescription::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIServiceDescription::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIServiceDescription::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIServiceDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_source_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_import_source_uri_isValid && m_service_id_isValid && m_service_name_isValid && true;
}

} // namespace OpenAPI
