/**
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEntryPoint.h
 *
 * 
 */

#ifndef OAIEntryPoint_H
#define OAIEntryPoint_H

#include <QJsonObject>

#include "OAIEntryPointParameter.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEntryPointParameter;

class OAIEntryPoint : public OAIObject {
public:
    OAIEntryPoint();
    OAIEntryPoint(QString json);
    ~OAIEntryPoint() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getContentTypes() const;
    void setContentTypes(const QList<QString> &content_types);
    bool is_content_types_Set() const;
    bool is_content_types_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<QString> getEncodingTypes() const;
    void setEncodingTypes(const QList<QString> &encoding_types);
    bool is_encoding_types_Set() const;
    bool is_encoding_types_Valid() const;

    QString getHttpMethod() const;
    void setHttpMethod(const QString &http_method);
    bool is_http_method_Set() const;
    bool is_http_method_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIEntryPointParameter> getParameters() const;
    void setParameters(const QList<OAIEntryPointParameter> &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getUrlTemplate() const;
    void setUrlTemplate(const QString &url_template);
    bool is_url_template_Set() const;
    bool is_url_template_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_content_types;
    bool m_content_types_isSet;
    bool m_content_types_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<QString> m_encoding_types;
    bool m_encoding_types_isSet;
    bool m_encoding_types_isValid;

    QString m_http_method;
    bool m_http_method_isSet;
    bool m_http_method_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIEntryPointParameter> m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_url_template;
    bool m_url_template_isSet;
    bool m_url_template_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEntryPoint)

#endif // OAIEntryPoint_H
