/**
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadService_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadService_request::OAILoadService_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadService_request::OAILoadService_request() {
    this->initializeModel();
}

OAILoadService_request::~OAILoadService_request() {}

void OAILoadService_request::initializeModel() {

    m_service_description_url_isSet = false;
    m_service_description_url_isValid = false;

    m_service_moniker_isSet = false;
    m_service_moniker_isValid = false;
}

void OAILoadService_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadService_request::fromJsonObject(QJsonObject json) {

    m_service_description_url_isValid = ::OpenAPI::fromJsonValue(m_service_description_url, json[QString("service_description_url")]);
    m_service_description_url_isSet = !json[QString("service_description_url")].isNull() && m_service_description_url_isValid;

    m_service_moniker_isValid = ::OpenAPI::fromJsonValue(m_service_moniker, json[QString("service_moniker")]);
    m_service_moniker_isSet = !json[QString("service_moniker")].isNull() && m_service_moniker_isValid;
}

QString OAILoadService_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadService_request::asJsonObject() const {
    QJsonObject obj;
    if (m_service_description_url_isSet) {
        obj.insert(QString("service_description_url"), ::OpenAPI::toJsonValue(m_service_description_url));
    }
    if (m_service_moniker_isSet) {
        obj.insert(QString("service_moniker"), ::OpenAPI::toJsonValue(m_service_moniker));
    }
    return obj;
}

QString OAILoadService_request::getServiceDescriptionUrl() const {
    return m_service_description_url;
}
void OAILoadService_request::setServiceDescriptionUrl(const QString &service_description_url) {
    m_service_description_url = service_description_url;
    m_service_description_url_isSet = true;
}

bool OAILoadService_request::is_service_description_url_Set() const{
    return m_service_description_url_isSet;
}

bool OAILoadService_request::is_service_description_url_Valid() const{
    return m_service_description_url_isValid;
}

QString OAILoadService_request::getServiceMoniker() const {
    return m_service_moniker;
}
void OAILoadService_request::setServiceMoniker(const QString &service_moniker) {
    m_service_moniker = service_moniker;
    m_service_moniker_isSet = true;
}

bool OAILoadService_request::is_service_moniker_Set() const{
    return m_service_moniker_isSet;
}

bool OAILoadService_request::is_service_moniker_Valid() const{
    return m_service_moniker_isValid;
}

bool OAILoadService_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_description_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_moniker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadService_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_description_url_isValid && true;
}

} // namespace OpenAPI
