/**
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecBody::OAIExecBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecBody::OAIExecBody() {
    this->initializeModel();
}

OAIExecBody::~OAIExecBody() {}

void OAIExecBody::initializeModel() {

    m_action_specific_property1_isSet = false;
    m_action_specific_property1_isValid = false;

    m_action_specific_property2_isSet = false;
    m_action_specific_property2_isValid = false;

    m_osdbbody_data_encoding_isSet = false;
    m_osdbbody_data_encoding_isValid = false;

    m_osdbbody_data_raw_isSet = false;
    m_osdbbody_data_raw_isValid = false;

    m_osdbbody_data_src_url_isSet = false;
    m_osdbbody_data_src_url_isValid = false;

    m_osdboutput_type_isSet = false;
    m_osdboutput_type_isValid = false;

    m_osdbresponse_format_isSet = false;
    m_osdbresponse_format_isValid = false;
}

void OAIExecBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecBody::fromJsonObject(QJsonObject json) {

    m_action_specific_property1_isValid = ::OpenAPI::fromJsonValue(m_action_specific_property1, json[QString("action_specific_property1")]);
    m_action_specific_property1_isSet = !json[QString("action_specific_property1")].isNull() && m_action_specific_property1_isValid;

    m_action_specific_property2_isValid = ::OpenAPI::fromJsonValue(m_action_specific_property2, json[QString("action_specific_property2")]);
    m_action_specific_property2_isSet = !json[QString("action_specific_property2")].isNull() && m_action_specific_property2_isValid;

    m_osdbbody_data_encoding_isValid = ::OpenAPI::fromJsonValue(m_osdbbody_data_encoding, json[QString("osdb:body_data_encoding")]);
    m_osdbbody_data_encoding_isSet = !json[QString("osdb:body_data_encoding")].isNull() && m_osdbbody_data_encoding_isValid;

    m_osdbbody_data_raw_isValid = ::OpenAPI::fromJsonValue(m_osdbbody_data_raw, json[QString("osdb:body_data_raw")]);
    m_osdbbody_data_raw_isSet = !json[QString("osdb:body_data_raw")].isNull() && m_osdbbody_data_raw_isValid;

    m_osdbbody_data_src_url_isValid = ::OpenAPI::fromJsonValue(m_osdbbody_data_src_url, json[QString("osdb:body_data_src_url")]);
    m_osdbbody_data_src_url_isSet = !json[QString("osdb:body_data_src_url")].isNull() && m_osdbbody_data_src_url_isValid;

    m_osdboutput_type_isValid = ::OpenAPI::fromJsonValue(m_osdboutput_type, json[QString("osdb:output_type")]);
    m_osdboutput_type_isSet = !json[QString("osdb:output_type")].isNull() && m_osdboutput_type_isValid;

    m_osdbresponse_format_isValid = ::OpenAPI::fromJsonValue(m_osdbresponse_format, json[QString("osdb:response_format")]);
    m_osdbresponse_format_isSet = !json[QString("osdb:response_format")].isNull() && m_osdbresponse_format_isValid;
}

QString OAIExecBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecBody::asJsonObject() const {
    QJsonObject obj;
    if (m_action_specific_property1_isSet) {
        obj.insert(QString("action_specific_property1"), ::OpenAPI::toJsonValue(m_action_specific_property1));
    }
    if (m_action_specific_property2_isSet) {
        obj.insert(QString("action_specific_property2"), ::OpenAPI::toJsonValue(m_action_specific_property2));
    }
    if (m_osdbbody_data_encoding_isSet) {
        obj.insert(QString("osdb:body_data_encoding"), ::OpenAPI::toJsonValue(m_osdbbody_data_encoding));
    }
    if (m_osdbbody_data_raw_isSet) {
        obj.insert(QString("osdb:body_data_raw"), ::OpenAPI::toJsonValue(m_osdbbody_data_raw));
    }
    if (m_osdbbody_data_src_url_isSet) {
        obj.insert(QString("osdb:body_data_src_url"), ::OpenAPI::toJsonValue(m_osdbbody_data_src_url));
    }
    if (m_osdboutput_type_isSet) {
        obj.insert(QString("osdb:output_type"), ::OpenAPI::toJsonValue(m_osdboutput_type));
    }
    if (m_osdbresponse_format_isSet) {
        obj.insert(QString("osdb:response_format"), ::OpenAPI::toJsonValue(m_osdbresponse_format));
    }
    return obj;
}

QString OAIExecBody::getActionSpecificProperty1() const {
    return m_action_specific_property1;
}
void OAIExecBody::setActionSpecificProperty1(const QString &action_specific_property1) {
    m_action_specific_property1 = action_specific_property1;
    m_action_specific_property1_isSet = true;
}

bool OAIExecBody::is_action_specific_property1_Set() const{
    return m_action_specific_property1_isSet;
}

bool OAIExecBody::is_action_specific_property1_Valid() const{
    return m_action_specific_property1_isValid;
}

QString OAIExecBody::getActionSpecificProperty2() const {
    return m_action_specific_property2;
}
void OAIExecBody::setActionSpecificProperty2(const QString &action_specific_property2) {
    m_action_specific_property2 = action_specific_property2;
    m_action_specific_property2_isSet = true;
}

bool OAIExecBody::is_action_specific_property2_Set() const{
    return m_action_specific_property2_isSet;
}

bool OAIExecBody::is_action_specific_property2_Valid() const{
    return m_action_specific_property2_isValid;
}

QString OAIExecBody::getOsdbbodyDataEncoding() const {
    return m_osdbbody_data_encoding;
}
void OAIExecBody::setOsdbbodyDataEncoding(const QString &osdbbody_data_encoding) {
    m_osdbbody_data_encoding = osdbbody_data_encoding;
    m_osdbbody_data_encoding_isSet = true;
}

bool OAIExecBody::is_osdbbody_data_encoding_Set() const{
    return m_osdbbody_data_encoding_isSet;
}

bool OAIExecBody::is_osdbbody_data_encoding_Valid() const{
    return m_osdbbody_data_encoding_isValid;
}

QByteArray OAIExecBody::getOsdbbodyDataRaw() const {
    return m_osdbbody_data_raw;
}
void OAIExecBody::setOsdbbodyDataRaw(const QByteArray &osdbbody_data_raw) {
    m_osdbbody_data_raw = osdbbody_data_raw;
    m_osdbbody_data_raw_isSet = true;
}

bool OAIExecBody::is_osdbbody_data_raw_Set() const{
    return m_osdbbody_data_raw_isSet;
}

bool OAIExecBody::is_osdbbody_data_raw_Valid() const{
    return m_osdbbody_data_raw_isValid;
}

QString OAIExecBody::getOsdbbodyDataSrcUrl() const {
    return m_osdbbody_data_src_url;
}
void OAIExecBody::setOsdbbodyDataSrcUrl(const QString &osdbbody_data_src_url) {
    m_osdbbody_data_src_url = osdbbody_data_src_url;
    m_osdbbody_data_src_url_isSet = true;
}

bool OAIExecBody::is_osdbbody_data_src_url_Set() const{
    return m_osdbbody_data_src_url_isSet;
}

bool OAIExecBody::is_osdbbody_data_src_url_Valid() const{
    return m_osdbbody_data_src_url_isValid;
}

QString OAIExecBody::getOsdboutputType() const {
    return m_osdboutput_type;
}
void OAIExecBody::setOsdboutputType(const QString &osdboutput_type) {
    m_osdboutput_type = osdboutput_type;
    m_osdboutput_type_isSet = true;
}

bool OAIExecBody::is_osdboutput_type_Set() const{
    return m_osdboutput_type_isSet;
}

bool OAIExecBody::is_osdboutput_type_Valid() const{
    return m_osdboutput_type_isValid;
}

QString OAIExecBody::getOsdbresponseFormat() const {
    return m_osdbresponse_format;
}
void OAIExecBody::setOsdbresponseFormat(const QString &osdbresponse_format) {
    m_osdbresponse_format = osdbresponse_format;
    m_osdbresponse_format_isSet = true;
}

bool OAIExecBody::is_osdbresponse_format_Set() const{
    return m_osdbresponse_format_isSet;
}

bool OAIExecBody::is_osdbresponse_format_Valid() const{
    return m_osdbresponse_format_isValid;
}

bool OAIExecBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_specific_property1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_specific_property2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_osdbbody_data_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_osdbbody_data_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_osdbbody_data_src_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_osdboutput_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_osdbresponse_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
