/**
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntryPointParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntryPointParameter::OAIEntryPointParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntryPointParameter::OAIEntryPointParameter() {
    this->initializeModel();
}

OAIEntryPointParameter::~OAIEntryPointParameter() {}

void OAIEntryPointParameter::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;

    m_permitted_values_isSet = false;
    m_permitted_values_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEntryPointParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntryPointParameter::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("parameter_name")]);
    m_parameter_name_isSet = !json[QString("parameter_name")].isNull() && m_parameter_name_isValid;

    m_permitted_values_isValid = ::OpenAPI::fromJsonValue(m_permitted_values, json[QString("permitted_values")]);
    m_permitted_values_isSet = !json[QString("permitted_values")].isNull() && m_permitted_values_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEntryPointParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntryPointParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_parameter_name_isSet) {
        obj.insert(QString("parameter_name"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    if (m_permitted_values.size() > 0) {
        obj.insert(QString("permitted_values"), ::OpenAPI::toJsonValue(m_permitted_values));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIEntryPointParameter::getDescription() const {
    return m_description;
}
void OAIEntryPointParameter::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEntryPointParameter::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEntryPointParameter::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEntryPointParameter::getDisplayName() const {
    return m_display_name;
}
void OAIEntryPointParameter::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIEntryPointParameter::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIEntryPointParameter::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIEntryPointParameter::getParameterName() const {
    return m_parameter_name;
}
void OAIEntryPointParameter::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAIEntryPointParameter::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAIEntryPointParameter::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

QList<QString> OAIEntryPointParameter::getPermittedValues() const {
    return m_permitted_values;
}
void OAIEntryPointParameter::setPermittedValues(const QList<QString> &permitted_values) {
    m_permitted_values = permitted_values;
    m_permitted_values_isSet = true;
}

bool OAIEntryPointParameter::is_permitted_values_Set() const{
    return m_permitted_values_isSet;
}

bool OAIEntryPointParameter::is_permitted_values_Valid() const{
    return m_permitted_values_isValid;
}

qint32 OAIEntryPointParameter::getRequired() const {
    return m_required;
}
void OAIEntryPointParameter::setRequired(const qint32 &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIEntryPointParameter::is_required_Set() const{
    return m_required_isSet;
}

bool OAIEntryPointParameter::is_required_Valid() const{
    return m_required_isValid;
}

QString OAIEntryPointParameter::getType() const {
    return m_type;
}
void OAIEntryPointParameter::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEntryPointParameter::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEntryPointParameter::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEntryPointParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permitted_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntryPointParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_display_name_isValid && m_parameter_name_isValid && m_permitted_values_isValid && m_required_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
