/**
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOSDBApi_H
#define OAI_OAIOSDBApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActionHelpResponse.h"
#include "OAIDescribeActionResponse.h"
#include "OAIDescribeServiceResponse.h"
#include "OAIErrorModel.h"
#include "OAIExecBody.h"
#include "OAIListActionsResponse.h"
#include "OAIListServicesResponse.h"
#include "OAILoadService_200_response.h"
#include "OAILoadService_request.h"
#include "OAILoginResponse.h"
#include "OAILogoutResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOSDBApi : public QObject {
    Q_OBJECT

public:
    OAIOSDBApi(const int timeOut = 0);
    ~OAIOSDBApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  action_id QString [required]
    */
    virtual void actionHelp(const QString &service_id, const QString &action_id);

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  action_id QString [required]
    */
    virtual void describeAction(const QString &service_id, const QString &action_id);

    /**
    * @param[in]  service_id QString [required]
    */
    virtual void describeService(const QString &service_id);

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  action_id QString [required]
    * @param[in]  oai_exec_body OAIExecBody [optional]
    */
    virtual void executeAction(const QString &service_id, const QString &action_id, const ::OpenAPI::OptionalParam<OAIExecBody> &oai_exec_body = ::OpenAPI::OptionalParam<OAIExecBody>());

    /**
    * @param[in]  service_id QString [required]
    */
    virtual void listActions(const QString &service_id);


    virtual void listServices();

    /**
    * @param[in]  oai_load_service_request OAILoadService_request [optional]
    */
    virtual void loadService(const ::OpenAPI::OptionalParam<OAILoadService_request> &oai_load_service_request = ::OpenAPI::OptionalParam<OAILoadService_request>());


    virtual void login();


    virtual void logout();

    /**
    * @param[in]  service_id QString [required]
    */
    virtual void unloadService(const QString &service_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void actionHelpCallback(OAIHttpRequestWorker *worker);
    void describeActionCallback(OAIHttpRequestWorker *worker);
    void describeServiceCallback(OAIHttpRequestWorker *worker);
    void executeActionCallback(OAIHttpRequestWorker *worker);
    void listActionsCallback(OAIHttpRequestWorker *worker);
    void listServicesCallback(OAIHttpRequestWorker *worker);
    void loadServiceCallback(OAIHttpRequestWorker *worker);
    void loginCallback(OAIHttpRequestWorker *worker);
    void logoutCallback(OAIHttpRequestWorker *worker);
    void unloadServiceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void actionHelpSignal(OAIActionHelpResponse summary);
    void describeActionSignal(OAIDescribeActionResponse summary);
    void describeServiceSignal(OAIDescribeServiceResponse summary);
    void executeActionSignal();
    void listActionsSignal(OAIListActionsResponse summary);
    void listServicesSignal(OAIListServicesResponse summary);
    void loadServiceSignal(OAILoadService_200_response summary);
    void loginSignal(OAILoginResponse summary);
    void logoutSignal(OAILogoutResponse summary);
    void unloadServiceSignal(OAILoadService_200_response summary);


    void actionHelpSignalFull(OAIHttpRequestWorker *worker, OAIActionHelpResponse summary);
    void describeActionSignalFull(OAIHttpRequestWorker *worker, OAIDescribeActionResponse summary);
    void describeServiceSignalFull(OAIHttpRequestWorker *worker, OAIDescribeServiceResponse summary);
    void executeActionSignalFull(OAIHttpRequestWorker *worker);
    void listActionsSignalFull(OAIHttpRequestWorker *worker, OAIListActionsResponse summary);
    void listServicesSignalFull(OAIHttpRequestWorker *worker, OAIListServicesResponse summary);
    void loadServiceSignalFull(OAIHttpRequestWorker *worker, OAILoadService_200_response summary);
    void loginSignalFull(OAIHttpRequestWorker *worker, OAILoginResponse summary);
    void logoutSignalFull(OAIHttpRequestWorker *worker, OAILogoutResponse summary);
    void unloadServiceSignalFull(OAIHttpRequestWorker *worker, OAILoadService_200_response summary);

    Q_DECL_DEPRECATED_X("Use actionHelpSignalError() instead")
    void actionHelpSignalE(OAIActionHelpResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actionHelpSignalError(OAIActionHelpResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeActionSignalError() instead")
    void describeActionSignalE(OAIDescribeActionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeActionSignalError(OAIDescribeActionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeServiceSignalError() instead")
    void describeServiceSignalE(OAIDescribeServiceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeServiceSignalError(OAIDescribeServiceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use executeActionSignalError() instead")
    void executeActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void executeActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listActionsSignalError() instead")
    void listActionsSignalE(OAIListActionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listActionsSignalError(OAIListActionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServicesSignalError() instead")
    void listServicesSignalE(OAIListServicesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServicesSignalError(OAIListServicesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loadServiceSignalError() instead")
    void loadServiceSignalE(OAILoadService_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loadServiceSignalError(OAILoadService_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalError() instead")
    void loginSignalE(OAILoginResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalError(OAILoginResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutSignalError() instead")
    void logoutSignalE(OAILogoutResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutSignalError(OAILogoutResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unloadServiceSignalError() instead")
    void unloadServiceSignalE(OAILoadService_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unloadServiceSignalError(OAILoadService_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use actionHelpSignalErrorFull() instead")
    void actionHelpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionHelpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeActionSignalErrorFull() instead")
    void describeActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeServiceSignalErrorFull() instead")
    void describeServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use executeActionSignalErrorFull() instead")
    void executeActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void executeActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listActionsSignalErrorFull() instead")
    void listActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServicesSignalErrorFull() instead")
    void listServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loadServiceSignalErrorFull() instead")
    void loadServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loadServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalErrorFull() instead")
    void loginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutSignalErrorFull() instead")
    void logoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unloadServiceSignalErrorFull() instead")
    void unloadServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unloadServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
