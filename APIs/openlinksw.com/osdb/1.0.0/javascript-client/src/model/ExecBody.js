/**
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExecBody model module.
 * @module model/ExecBody
 * @version 1.0.0
 */
class ExecBody {
    /**
     * Constructs a new <code>ExecBody</code>.
     * @alias module:model/ExecBody
     */
    constructor() { 
        
        ExecBody.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExecBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExecBody} obj Optional instance to populate.
     * @return {module:model/ExecBody} The populated <code>ExecBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExecBody();

            if (data.hasOwnProperty('action_specific_property1')) {
                obj['action_specific_property1'] = ApiClient.convertToType(data['action_specific_property1'], 'String');
            }
            if (data.hasOwnProperty('action_specific_property2')) {
                obj['action_specific_property2'] = ApiClient.convertToType(data['action_specific_property2'], 'String');
            }
            if (data.hasOwnProperty('osdb:body_data_encoding')) {
                obj['osdb:body_data_encoding'] = ApiClient.convertToType(data['osdb:body_data_encoding'], 'String');
            }
            if (data.hasOwnProperty('osdb:body_data_raw')) {
                obj['osdb:body_data_raw'] = ApiClient.convertToType(data['osdb:body_data_raw'], 'Blob');
            }
            if (data.hasOwnProperty('osdb:body_data_src_url')) {
                obj['osdb:body_data_src_url'] = ApiClient.convertToType(data['osdb:body_data_src_url'], 'String');
            }
            if (data.hasOwnProperty('osdb:output_type')) {
                obj['osdb:output_type'] = ApiClient.convertToType(data['osdb:output_type'], 'String');
            }
            if (data.hasOwnProperty('osdb:response_format')) {
                obj['osdb:response_format'] = ApiClient.convertToType(data['osdb:response_format'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExecBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExecBody</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action_specific_property1'] && !(typeof data['action_specific_property1'] === 'string' || data['action_specific_property1'] instanceof String)) {
            throw new Error("Expected the field `action_specific_property1` to be a primitive type in the JSON string but got " + data['action_specific_property1']);
        }
        // ensure the json data is a string
        if (data['action_specific_property2'] && !(typeof data['action_specific_property2'] === 'string' || data['action_specific_property2'] instanceof String)) {
            throw new Error("Expected the field `action_specific_property2` to be a primitive type in the JSON string but got " + data['action_specific_property2']);
        }
        // ensure the json data is a string
        if (data['osdb:body_data_encoding'] && !(typeof data['osdb:body_data_encoding'] === 'string' || data['osdb:body_data_encoding'] instanceof String)) {
            throw new Error("Expected the field `osdb:body_data_encoding` to be a primitive type in the JSON string but got " + data['osdb:body_data_encoding']);
        }
        // ensure the json data is a string
        if (data['osdb:body_data_src_url'] && !(typeof data['osdb:body_data_src_url'] === 'string' || data['osdb:body_data_src_url'] instanceof String)) {
            throw new Error("Expected the field `osdb:body_data_src_url` to be a primitive type in the JSON string but got " + data['osdb:body_data_src_url']);
        }
        // ensure the json data is a string
        if (data['osdb:output_type'] && !(typeof data['osdb:output_type'] === 'string' || data['osdb:output_type'] instanceof String)) {
            throw new Error("Expected the field `osdb:output_type` to be a primitive type in the JSON string but got " + data['osdb:output_type']);
        }
        // ensure the json data is a string
        if (data['osdb:response_format'] && !(typeof data['osdb:response_format'] === 'string' || data['osdb:response_format'] instanceof String)) {
            throw new Error("Expected the field `osdb:response_format` to be a primitive type in the JSON string but got " + data['osdb:response_format']);
        }

        return true;
    }


}



/**
 * An example action specific property. There may be 0, 1 or more action specific properties, each holding an action specific parameter value.
 * @member {String} action_specific_property1
 */
ExecBody.prototype['action_specific_property1'] = undefined;

/**
 * An example action specific property. There may be 0, 1 or more action specific properties, each holding an action specific parameter value.
 * @member {String} action_specific_property2
 */
ExecBody.prototype['action_specific_property2'] = undefined;

/**
 * The media type of the data associated with osdb:body_data_raw or osdb:body_data_src_url. In the case of osdb:body_data_raw, this is the media type before base64 encoding.
 * @member {String} osdb:body_data_encoding
 */
ExecBody.prototype['osdb:body_data_encoding'] = undefined;

/**
 * Input data for the action (e.g. CSV data). The data must be base64 encoded by the client. Alternatively, clients can use osdb:body_data_src_url to supply the input data via a web-accessible document.
 * @member {Blob} osdb:body_data_raw
 */
ExecBody.prototype['osdb:body_data_raw'] = undefined;

/**
 * URL of a resource containing input data for the action (e.g. CSV data). Clients can instead use osdb:body_data_raw to supply the input data directly.
 * @member {String} osdb:body_data_src_url
 */
ExecBody.prototype['osdb:body_data_src_url'] = undefined;

/**
 * An OSDB-specific parameter controlling the action output type. If omitted, the native action output is returned.
 * @member {module:model/ExecBody.OsdboutputTypeEnum} osdb:output_type
 */
ExecBody.prototype['osdb:output_type'] = undefined;

/**
 * Preferred response MIME type. This must be an output MIME type supported natively by the action or, if 'osdb:output_type' is set to 'generate_rdf', a Virtuoso Sponger output format. i.e. 'application/ld+json', 'text/turtle' or 'application/rdf+xml'.
 * @member {String} osdb:response_format
 */
ExecBody.prototype['osdb:response_format'] = undefined;





/**
 * Allowed values for the <code>osdb:output_type</code> property.
 * @enum {String}
 * @readonly
 */
ExecBody['OsdboutputTypeEnum'] = {

    /**
     * value: "url_only"
     * @const
     */
    "url_only": "url_only",

    /**
     * value: "generate_rdf"
     * @const
     */
    "generate_rdf": "generate_rdf",

    /**
     * value: "display_rdf"
     * @const
     */
    "display_rdf": "display_rdf"
};



export default ExecBody;

