/**
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EntryPointParameter model module.
 * @module model/EntryPointParameter
 * @version 1.0.0
 */
class EntryPointParameter {
    /**
     * Constructs a new <code>EntryPointParameter</code>.
     * @alias module:model/EntryPointParameter
     * @param description {String} A short description of the parameter for use in the OSDB Action Console. Optional - may be null.
     * @param displayName {String} The parameter's display name in the OSDB Action Console. Optional - may be null.
     * @param parameterName {String} The parameter name as present in the HTTP request. e.g. the key name in a query string key-value pair.
     * @param permittedValues {Array.<String>} If the parameter accepts only a limited set of values, the allowed set of values. Null if not applicable.
     * @param required {Number} A flag indicating if the parameter is optional.
     * @param type {module:model/EntryPointParameter.TypeEnum} The type of the parameter, indicating its location in the HTTP request.
     */
    constructor(description, displayName, parameterName, permittedValues, required, type) { 
        
        EntryPointParameter.initialize(this, description, displayName, parameterName, permittedValues, required, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, displayName, parameterName, permittedValues, required, type) { 
        obj['description'] = description;
        obj['display_name'] = displayName;
        obj['parameter_name'] = parameterName;
        obj['permitted_values'] = permittedValues;
        obj['required'] = required;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>EntryPointParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntryPointParameter} obj Optional instance to populate.
     * @return {module:model/EntryPointParameter} The populated <code>EntryPointParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntryPointParameter();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('parameter_name')) {
                obj['parameter_name'] = ApiClient.convertToType(data['parameter_name'], 'String');
            }
            if (data.hasOwnProperty('permitted_values')) {
                obj['permitted_values'] = ApiClient.convertToType(data['permitted_values'], ['String']);
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntryPointParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntryPointParameter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EntryPointParameter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is a string
        if (data['parameter_name'] && !(typeof data['parameter_name'] === 'string' || data['parameter_name'] instanceof String)) {
            throw new Error("Expected the field `parameter_name` to be a primitive type in the JSON string but got " + data['parameter_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['permitted_values'])) {
            throw new Error("Expected the field `permitted_values` to be an array in the JSON data but got " + data['permitted_values']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

EntryPointParameter.RequiredProperties = ["description", "display_name", "parameter_name", "permitted_values", "required", "type"];

/**
 * A short description of the parameter for use in the OSDB Action Console. Optional - may be null.
 * @member {String} description
 */
EntryPointParameter.prototype['description'] = undefined;

/**
 * The parameter's display name in the OSDB Action Console. Optional - may be null.
 * @member {String} display_name
 */
EntryPointParameter.prototype['display_name'] = undefined;

/**
 * The parameter name as present in the HTTP request. e.g. the key name in a query string key-value pair.
 * @member {String} parameter_name
 */
EntryPointParameter.prototype['parameter_name'] = undefined;

/**
 * If the parameter accepts only a limited set of values, the allowed set of values. Null if not applicable.
 * @member {Array.<String>} permitted_values
 */
EntryPointParameter.prototype['permitted_values'] = undefined;

/**
 * A flag indicating if the parameter is optional.
 * @member {Number} required
 */
EntryPointParameter.prototype['required'] = undefined;

/**
 * The type of the parameter, indicating its location in the HTTP request.
 * @member {module:model/EntryPointParameter.TypeEnum} type
 */
EntryPointParameter.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
EntryPointParameter['TypeEnum'] = {

    /**
     * value: "query"
     * @const
     */
    "query": "query",

    /**
     * value: "header"
     * @const
     */
    "header": "header",

    /**
     * value: "uri"
     * @const
     */
    "uri": "uri",

    /**
     * value: "path"
     * @const
     */
    "path": "path",

    /**
     * value: "body"
     * @const
     */
    "body": "body"
};



export default EntryPointParameter;

