/**
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ActionHelp model module.
 * @module model/ActionHelp
 * @version 1.0.0
 */
class ActionHelp {
    /**
     * Constructs a new <code>ActionHelp</code>.
     * @alias module:model/ActionHelp
     * @param actionId {String} A unique one word identifier for the action.
     * @param helpText {String} The help text for the action.
     * @param serviceId {String} A unique one word identifier for the service.
     */
    constructor(actionId, helpText, serviceId) { 
        
        ActionHelp.initialize(this, actionId, helpText, serviceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actionId, helpText, serviceId) { 
        obj['action_id'] = actionId;
        obj['help_text'] = helpText;
        obj['service_id'] = serviceId;
    }

    /**
     * Constructs a <code>ActionHelp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActionHelp} obj Optional instance to populate.
     * @return {module:model/ActionHelp} The populated <code>ActionHelp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActionHelp();

            if (data.hasOwnProperty('action_id')) {
                obj['action_id'] = ApiClient.convertToType(data['action_id'], 'String');
            }
            if (data.hasOwnProperty('help_text')) {
                obj['help_text'] = ApiClient.convertToType(data['help_text'], 'String');
            }
            if (data.hasOwnProperty('service_id')) {
                obj['service_id'] = ApiClient.convertToType(data['service_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActionHelp</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActionHelp</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ActionHelp.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action_id'] && !(typeof data['action_id'] === 'string' || data['action_id'] instanceof String)) {
            throw new Error("Expected the field `action_id` to be a primitive type in the JSON string but got " + data['action_id']);
        }
        // ensure the json data is a string
        if (data['help_text'] && !(typeof data['help_text'] === 'string' || data['help_text'] instanceof String)) {
            throw new Error("Expected the field `help_text` to be a primitive type in the JSON string but got " + data['help_text']);
        }
        // ensure the json data is a string
        if (data['service_id'] && !(typeof data['service_id'] === 'string' || data['service_id'] instanceof String)) {
            throw new Error("Expected the field `service_id` to be a primitive type in the JSON string but got " + data['service_id']);
        }

        return true;
    }


}

ActionHelp.RequiredProperties = ["action_id", "help_text", "service_id"];

/**
 * A unique one word identifier for the action.
 * @member {String} action_id
 */
ActionHelp.prototype['action_id'] = undefined;

/**
 * The help text for the action.
 * @member {String} help_text
 */
ActionHelp.prototype['help_text'] = undefined;

/**
 * A unique one word identifier for the service.
 * @member {String} service_id
 */
ActionHelp.prototype['service_id'] = undefined;






export default ActionHelp;

