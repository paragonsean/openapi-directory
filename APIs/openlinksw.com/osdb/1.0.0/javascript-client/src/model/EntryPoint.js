/**
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntryPointParameter from './EntryPointParameter';

/**
 * The EntryPoint model module.
 * @module model/EntryPoint
 * @version 1.0.0
 */
class EntryPoint {
    /**
     * Constructs a new <code>EntryPoint</code>.
     * @alias module:model/EntryPoint
     * @param contentTypes {Array.<String>} The supported MIME type(s) for an EntryPoint response.
     * @param description {String} A short description of the action. Optional - may be null.
     * @param encodingTypes {Array.<String>} The supported MIME type(s) for an EntryPoint request. Null if not applicable.
     * @param httpMethod {module:model/EntryPoint.HttpMethodEnum} The HTTP method used by the EntryPoint.
     * @param name {String} A word or short phrase to be used as the action's display name. Optional - may be null.
     * @param parameters {Array.<module:model/EntryPointParameter>} Descriptions of the EntryPoint parameters. Null if not applicable.
     * @param url {String} The EntryPoint URL. It will be non-null if url_template is null.
     * @param urlTemplate {String} The EntryPoint's URL template. Only required if the entry point URL is parameterized. Property 'url' will be null if url_template is non-null.
     */
    constructor(contentTypes, description, encodingTypes, httpMethod, name, parameters, url, urlTemplate) { 
        
        EntryPoint.initialize(this, contentTypes, description, encodingTypes, httpMethod, name, parameters, url, urlTemplate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contentTypes, description, encodingTypes, httpMethod, name, parameters, url, urlTemplate) { 
        obj['content_types'] = contentTypes;
        obj['description'] = description;
        obj['encoding_types'] = encodingTypes;
        obj['http_method'] = httpMethod;
        obj['name'] = name;
        obj['parameters'] = parameters;
        obj['url'] = url;
        obj['url_template'] = urlTemplate;
    }

    /**
     * Constructs a <code>EntryPoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntryPoint} obj Optional instance to populate.
     * @return {module:model/EntryPoint} The populated <code>EntryPoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntryPoint();

            if (data.hasOwnProperty('content_types')) {
                obj['content_types'] = ApiClient.convertToType(data['content_types'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('encoding_types')) {
                obj['encoding_types'] = ApiClient.convertToType(data['encoding_types'], ['String']);
            }
            if (data.hasOwnProperty('http_method')) {
                obj['http_method'] = ApiClient.convertToType(data['http_method'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [EntryPointParameter]);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('url_template')) {
                obj['url_template'] = ApiClient.convertToType(data['url_template'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntryPoint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntryPoint</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EntryPoint.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['content_types'])) {
            throw new Error("Expected the field `content_types` to be an array in the JSON data but got " + data['content_types']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['encoding_types'])) {
            throw new Error("Expected the field `encoding_types` to be an array in the JSON data but got " + data['encoding_types']);
        }
        // ensure the json data is a string
        if (data['http_method'] && !(typeof data['http_method'] === 'string' || data['http_method'] instanceof String)) {
            throw new Error("Expected the field `http_method` to be a primitive type in the JSON string but got " + data['http_method']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                EntryPointParameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['url_template'] && !(typeof data['url_template'] === 'string' || data['url_template'] instanceof String)) {
            throw new Error("Expected the field `url_template` to be a primitive type in the JSON string but got " + data['url_template']);
        }

        return true;
    }


}

EntryPoint.RequiredProperties = ["content_types", "description", "encoding_types", "http_method", "name", "parameters", "url", "url_template"];

/**
 * The supported MIME type(s) for an EntryPoint response.
 * @member {Array.<String>} content_types
 */
EntryPoint.prototype['content_types'] = undefined;

/**
 * A short description of the action. Optional - may be null.
 * @member {String} description
 */
EntryPoint.prototype['description'] = undefined;

/**
 * The supported MIME type(s) for an EntryPoint request. Null if not applicable.
 * @member {Array.<String>} encoding_types
 */
EntryPoint.prototype['encoding_types'] = undefined;

/**
 * The HTTP method used by the EntryPoint.
 * @member {module:model/EntryPoint.HttpMethodEnum} http_method
 */
EntryPoint.prototype['http_method'] = undefined;

/**
 * A word or short phrase to be used as the action's display name. Optional - may be null.
 * @member {String} name
 */
EntryPoint.prototype['name'] = undefined;

/**
 * Descriptions of the EntryPoint parameters. Null if not applicable.
 * @member {Array.<module:model/EntryPointParameter>} parameters
 */
EntryPoint.prototype['parameters'] = undefined;

/**
 * The EntryPoint URL. It will be non-null if url_template is null.
 * @member {String} url
 */
EntryPoint.prototype['url'] = undefined;

/**
 * The EntryPoint's URL template. Only required if the entry point URL is parameterized. Property 'url' will be null if url_template is non-null.
 * @member {String} url_template
 */
EntryPoint.prototype['url_template'] = undefined;





/**
 * Allowed values for the <code>http_method</code> property.
 * @enum {String}
 * @readonly
 */
EntryPoint['HttpMethodEnum'] = {

    /**
     * value: "GET"
     * @const
     */
    "GET": "GET",

    /**
     * value: "PUT"
     * @const
     */
    "PUT": "PUT",

    /**
     * value: "POST"
     * @const
     */
    "POST": "POST",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE"
};



export default EntryPoint;

