/**
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogoutResponseResponse from './LogoutResponseResponse';

/**
 * The LogoutResponse model module.
 * @module model/LogoutResponse
 * @version 1.0.0
 */
class LogoutResponse {
    /**
     * Constructs a new <code>LogoutResponse</code>.
     * @alias module:model/LogoutResponse
     * @param api {String} The path of the REST API method
     * @param method {String} The name of the REST API method
     * @param response {module:model/LogoutResponseResponse} 
     * @param status {module:model/LogoutResponse.StatusEnum} 
     */
    constructor(api, method, response, status) { 
        
        LogoutResponse.initialize(this, api, method, response, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, api, method, response, status) { 
        obj['api'] = api;
        obj['method'] = method;
        obj['response'] = response;
        obj['status'] = status || 'success';
    }

    /**
     * Constructs a <code>LogoutResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogoutResponse} obj Optional instance to populate.
     * @return {module:model/LogoutResponse} The populated <code>LogoutResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogoutResponse();

            if (data.hasOwnProperty('api')) {
                obj['api'] = ApiClient.convertToType(data['api'], 'String');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('response')) {
                obj['response'] = LogoutResponseResponse.constructFromObject(data['response']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogoutResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogoutResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LogoutResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['api'] && !(typeof data['api'] === 'string' || data['api'] instanceof String)) {
            throw new Error("Expected the field `api` to be a primitive type in the JSON string but got " + data['api']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // validate the optional field `response`
        if (data['response']) { // data not null
          LogoutResponseResponse.validateJSON(data['response']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

LogoutResponse.RequiredProperties = ["api", "method", "response", "status"];

/**
 * The path of the REST API method
 * @member {String} api
 */
LogoutResponse.prototype['api'] = undefined;

/**
 * The name of the REST API method
 * @member {String} method
 */
LogoutResponse.prototype['method'] = undefined;

/**
 * @member {module:model/LogoutResponseResponse} response
 */
LogoutResponse.prototype['response'] = undefined;

/**
 * @member {module:model/LogoutResponse.StatusEnum} status
 * @default 'success'
 */
LogoutResponse.prototype['status'] = 'success';





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
LogoutResponse['StatusEnum'] = {

    /**
     * value: "success"
     * @const
     */
    "success": "success"
};



export default LogoutResponse;

