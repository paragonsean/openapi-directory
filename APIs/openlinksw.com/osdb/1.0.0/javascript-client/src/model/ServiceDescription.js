/**
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ServiceDescription model module.
 * @module model/ServiceDescription
 * @version 1.0.0
 */
class ServiceDescription {
    /**
     * Constructs a new <code>ServiceDescription</code>.
     * @alias module:model/ServiceDescription
     * @param importSourceUri {String} The URI of the source service description document used to load the service into OSDB.
     * @param serviceId {String} A unique one word identifier for the service.
     * @param serviceName {String} A word or phrase naming the service.
     */
    constructor(importSourceUri, serviceId, serviceName) { 
        
        ServiceDescription.initialize(this, importSourceUri, serviceId, serviceName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, importSourceUri, serviceId, serviceName) { 
        obj['import_source_uri'] = importSourceUri;
        obj['service_id'] = serviceId;
        obj['service_name'] = serviceName;
    }

    /**
     * Constructs a <code>ServiceDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceDescription} obj Optional instance to populate.
     * @return {module:model/ServiceDescription} The populated <code>ServiceDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceDescription();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('import_source_uri')) {
                obj['import_source_uri'] = ApiClient.convertToType(data['import_source_uri'], 'String');
            }
            if (data.hasOwnProperty('service_id')) {
                obj['service_id'] = ApiClient.convertToType(data['service_id'], 'String');
            }
            if (data.hasOwnProperty('service_name')) {
                obj['service_name'] = ApiClient.convertToType(data['service_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServiceDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['import_source_uri'] && !(typeof data['import_source_uri'] === 'string' || data['import_source_uri'] instanceof String)) {
            throw new Error("Expected the field `import_source_uri` to be a primitive type in the JSON string but got " + data['import_source_uri']);
        }
        // ensure the json data is a string
        if (data['service_id'] && !(typeof data['service_id'] === 'string' || data['service_id'] instanceof String)) {
            throw new Error("Expected the field `service_id` to be a primitive type in the JSON string but got " + data['service_id']);
        }
        // ensure the json data is a string
        if (data['service_name'] && !(typeof data['service_name'] === 'string' || data['service_name'] instanceof String)) {
            throw new Error("Expected the field `service_name` to be a primitive type in the JSON string but got " + data['service_name']);
        }

        return true;
    }


}

ServiceDescription.RequiredProperties = ["import_source_uri", "service_id", "service_name"];

/**
 * A short description of the service.
 * @member {String} description
 */
ServiceDescription.prototype['description'] = undefined;

/**
 * The URI of the source service description document used to load the service into OSDB.
 * @member {String} import_source_uri
 */
ServiceDescription.prototype['import_source_uri'] = undefined;

/**
 * A unique one word identifier for the service.
 * @member {String} service_id
 */
ServiceDescription.prototype['service_id'] = undefined;

/**
 * A word or phrase naming the service.
 * @member {String} service_name
 */
ServiceDescription.prototype['service_name'] = undefined;






export default ServiceDescription;

