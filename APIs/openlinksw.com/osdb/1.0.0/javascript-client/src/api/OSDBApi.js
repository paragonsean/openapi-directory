/**
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActionHelpResponse from '../model/ActionHelpResponse';
import DescribeActionResponse from '../model/DescribeActionResponse';
import DescribeServiceResponse from '../model/DescribeServiceResponse';
import ErrorModel from '../model/ErrorModel';
import ExecBody from '../model/ExecBody';
import ListActionsResponse from '../model/ListActionsResponse';
import ListServicesResponse from '../model/ListServicesResponse';
import LoadService200Response from '../model/LoadService200Response';
import LoadServiceRequest from '../model/LoadServiceRequest';
import LoginResponse from '../model/LoginResponse';
import LogoutResponse from '../model/LogoutResponse';

/**
* OSDB service.
* @module api/OSDBApi
* @version 1.0.0
*/
export default class OSDBApi {

    /**
    * Constructs a new OSDBApi. 
    * @alias module:api/OSDBApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the actionHelp operation.
     * @callback module:api/OSDBApi~actionHelpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionHelpResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Action help
     * Returns the help text for a given service action
     * @param {String} serviceId Service ID of the service supporting the action.
     * @param {String} actionId Action ID of the action for which help text is being requested.
     * @param {module:api/OSDBApi~actionHelpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionHelpResponse}
     */
    actionHelp(serviceId, actionId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling actionHelp");
      }
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling actionHelp");
      }

      let pathParams = {
        'serviceId': serviceId,
        'actionId': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionHelpResponse;
      return this.apiClient.callApi(
        '/api/v1/actions/{serviceId}/{actionId}/help', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAction operation.
     * @callback module:api/OSDBApi~describeActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeActionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe action
     * Returns a description of a given service action.
     * @param {String} serviceId Service ID of the service supporting the action.
     * @param {String} actionId Action ID of the action to describe.
     * @param {module:api/OSDBApi~describeActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeActionResponse}
     */
    describeAction(serviceId, actionId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling describeAction");
      }
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling describeAction");
      }

      let pathParams = {
        'serviceId': serviceId,
        'actionId': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeActionResponse;
      return this.apiClient.callApi(
        '/api/v1/actions/{serviceId}/{actionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeService operation.
     * @callback module:api/OSDBApi~describeServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe service
     * Returns a description of a given service
     * @param {String} serviceId Service ID of the service to describe.
     * @param {module:api/OSDBApi~describeServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeServiceResponse}
     */
    describeService(serviceId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling describeService");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeServiceResponse;
      return this.apiClient.callApi(
        '/api/v1/services/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeAction operation.
     * @callback module:api/OSDBApi~executeActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute action
     * Executes a registered service action and returns any output from the action. The data returned in the POST response body may be:  * the raw action output,  * a URL encapsulating the action request which executes the action when dereferenced  (only for actions using GET),  * RDF generated from the action output, * a URL to an RDF viewer's display of the generated RDF.  Any parameters required by the action are supplied as a JSON object in the POST body. The parameter types supported are: \"query\", \"header\", \"uri\", \"path\" and \"body\".  The parameter type determines where a supplied parameter value is inserted into the HTTP request constructed by OSDB to invoke the target service action. In addition to native parameters required by the service action, 'Execute action' accepts some OSDB-specific parameters.<br/><br/>  **Examples** * ```curl -ik -X POST -d '{ \"latitude\":\"37.7759792\", \"longitude\":\"-122.41823\" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec```   * ```curl -ikL -X POST -d '{ \"latitude\":\"37.7759792\", \"longitude\":\"-122.41823\", \"osdb:output_type\":\"generate_rdf\", \"osdb:response_format\":\"application/rdf+xml\" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec```  * ```curl -ikL -X POST -d '{ \"latitude\":\"37.7759792\", \"longitude\":\"-122.41823\", \"osdb:output_type\":\"display_rdf\" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec```  * ```curl -ik -X POST -d '{ \"q\":\"skiing\", \"osdb:response_format\": \"application/rdf+xml\" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/facet/search/exec```  * ```curl -ik -X POST -d '{ \"q\":\"skiing\", \"osdb:output_type\": \"url_only\" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/facet/search/exec```  * ```curl -ik -X POST -d '{ \"Content-Location\": \"http://demo.openlinksw.co.uk/pubs\", \"osdb:body_data_src_url\": \"http://ods-qa.openlinksw.com/DAV/home/osdb/pubs.csv\", \"extractor\": \"csv\", \"osdb:response_format\": \"application/rdf+xml\", \"osdb:body_data_encoding\": \"text/csv\" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/csv_transformer/transform/exec```
     * @param {String} serviceId Service ID of the service supporting the action.
     * @param {String} actionId Action ID of the action to execute.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExecBody} [execBody] Any parameters required by the action are supplied as a JSON object in the request body. The properties of this object depend on the service action being invoked.
     * @param {module:api/OSDBApi~executeActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    executeAction(serviceId, actionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['execBody'];
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling executeAction");
      }
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling executeAction");
      }

      let pathParams = {
        'serviceId': serviceId,
        'actionId': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/actions/{serviceId}/{actionId}/exec', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listActions operation.
     * @callback module:api/OSDBApi~listActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListActionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List actions
     * Returns an array of action descriptions for the actions supported by the given service
     * @param {String} serviceId Service ID of the service for which actions are to be listed
     * @param {module:api/OSDBApi~listActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListActionsResponse}
     */
    listActions(serviceId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listActions");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListActionsResponse;
      return this.apiClient.callApi(
        '/api/v1/actions/{serviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServices operation.
     * @callback module:api/OSDBApi~listServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List services
     * Returns descriptions of all services registered with the OSDB server.
     * @param {module:api/OSDBApi~listServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServicesResponse}
     */
    listServices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListServicesResponse;
      return this.apiClient.callApi(
        '/api/v1/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadService operation.
     * @callback module:api/OSDBApi~loadServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoadService200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load service
     * Loads a service description into the OSDB Service Registry
     * @param {Object} opts Optional parameters
     * @param {module:model/LoadServiceRequest} [loadServiceRequest] Service to register with OSDB
     * @param {module:api/OSDBApi~loadServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoadService200Response}
     */
    loadService(opts, callback) {
      opts = opts || {};
      let postBody = opts['loadServiceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoadService200Response;
      return this.apiClient.callApi(
        '/api/v1/services', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/OSDBApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * Logs a user into the OSDB server, authenticating them by their WebID and returning an OSDB session ID in cookie osdb.sid
     * @param {module:api/OSDBApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginResponse}
     */
    login(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoginResponse;
      return this.apiClient.callApi(
        '/api/v1/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/OSDBApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogoutResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout
     * Logs a user out of the OSDB server, ending their OSDB session
     * @param {module:api/OSDBApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogoutResponse}
     */
    logout(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogoutResponse;
      return this.apiClient.callApi(
        '/api/v1/logout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unloadService operation.
     * @callback module:api/OSDBApi~unloadServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoadService200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unload service
     * Removes a service description from the OSDB Service Registry
     * @param {String} serviceId Service ID of the service to be unloaded
     * @param {module:api/OSDBApi~unloadServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoadService200Response}
     */
    unloadService(serviceId, callback) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling unloadService");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoadService200Response;
      return this.apiClient.callApi(
        '/api/v1/services/{serviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
