# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entry_point import EntryPoint
from openapi_server import util


class ActionDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_id: str=None, description: str=None, entry_point: EntryPoint=None):
        """ActionDescription - a model defined in OpenAPI

        :param action_id: The action_id of this ActionDescription.
        :param description: The description of this ActionDescription.
        :param entry_point: The entry_point of this ActionDescription.
        """
        self.openapi_types = {
            'action_id': str,
            'description': str,
            'entry_point': EntryPoint
        }

        self.attribute_map = {
            'action_id': 'action_id',
            'description': 'description',
            'entry_point': 'entry_point'
        }

        self._action_id = action_id
        self._description = description
        self._entry_point = entry_point

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionDescription of this ActionDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_id(self):
        """Gets the action_id of this ActionDescription.

        A unique one word identifier for the action.

        :return: The action_id of this ActionDescription.
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this ActionDescription.

        A unique one word identifier for the action.

        :param action_id: The action_id of this ActionDescription.
        :type action_id: str
        """
        if action_id is None:
            raise ValueError("Invalid value for `action_id`, must not be `None`")

        self._action_id = action_id

    @property
    def description(self):
        """Gets the description of this ActionDescription.

        A short description of the action.

        :return: The description of this ActionDescription.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActionDescription.

        A short description of the action.

        :param description: The description of this ActionDescription.
        :type description: str
        """

        self._description = description

    @property
    def entry_point(self):
        """Gets the entry_point of this ActionDescription.


        :return: The entry_point of this ActionDescription.
        :rtype: EntryPoint
        """
        return self._entry_point

    @entry_point.setter
    def entry_point(self, entry_point):
        """Sets the entry_point of this ActionDescription.


        :param entry_point: The entry_point of this ActionDescription.
        :type entry_point: EntryPoint
        """
        if entry_point is None:
            raise ValueError("Invalid value for `entry_point`, must not be `None`")

        self._entry_point = entry_point
