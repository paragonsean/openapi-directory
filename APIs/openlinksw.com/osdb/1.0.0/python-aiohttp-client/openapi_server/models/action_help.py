# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActionHelp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_id: str=None, help_text: str=None, service_id: str=None):
        """ActionHelp - a model defined in OpenAPI

        :param action_id: The action_id of this ActionHelp.
        :param help_text: The help_text of this ActionHelp.
        :param service_id: The service_id of this ActionHelp.
        """
        self.openapi_types = {
            'action_id': str,
            'help_text': str,
            'service_id': str
        }

        self.attribute_map = {
            'action_id': 'action_id',
            'help_text': 'help_text',
            'service_id': 'service_id'
        }

        self._action_id = action_id
        self._help_text = help_text
        self._service_id = service_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionHelp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionHelp of this ActionHelp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_id(self):
        """Gets the action_id of this ActionHelp.

        A unique one word identifier for the action.

        :return: The action_id of this ActionHelp.
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this ActionHelp.

        A unique one word identifier for the action.

        :param action_id: The action_id of this ActionHelp.
        :type action_id: str
        """
        if action_id is None:
            raise ValueError("Invalid value for `action_id`, must not be `None`")

        self._action_id = action_id

    @property
    def help_text(self):
        """Gets the help_text of this ActionHelp.

        The help text for the action.

        :return: The help_text of this ActionHelp.
        :rtype: str
        """
        return self._help_text

    @help_text.setter
    def help_text(self, help_text):
        """Sets the help_text of this ActionHelp.

        The help text for the action.

        :param help_text: The help_text of this ActionHelp.
        :type help_text: str
        """
        if help_text is None:
            raise ValueError("Invalid value for `help_text`, must not be `None`")

        self._help_text = help_text

    @property
    def service_id(self):
        """Gets the service_id of this ActionHelp.

        A unique one word identifier for the service.

        :return: The service_id of this ActionHelp.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this ActionHelp.

        A unique one word identifier for the service.

        :param service_id: The service_id of this ActionHelp.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id
