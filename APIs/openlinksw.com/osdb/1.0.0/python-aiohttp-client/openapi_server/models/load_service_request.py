# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoadServiceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_description_url: str=None, service_moniker: str=None):
        """LoadServiceRequest - a model defined in OpenAPI

        :param service_description_url: The service_description_url of this LoadServiceRequest.
        :param service_moniker: The service_moniker of this LoadServiceRequest.
        """
        self.openapi_types = {
            'service_description_url': str,
            'service_moniker': str
        }

        self.attribute_map = {
            'service_description_url': 'service_description_url',
            'service_moniker': 'service_moniker'
        }

        self._service_description_url = service_description_url
        self._service_moniker = service_moniker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadServiceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The loadService_request of this LoadServiceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_description_url(self):
        """Gets the service_description_url of this LoadServiceRequest.

        The URL of the resource containing the service description to load.

        :return: The service_description_url of this LoadServiceRequest.
        :rtype: str
        """
        return self._service_description_url

    @service_description_url.setter
    def service_description_url(self, service_description_url):
        """Sets the service_description_url of this LoadServiceRequest.

        The URL of the resource containing the service description to load.

        :param service_description_url: The service_description_url of this LoadServiceRequest.
        :type service_description_url: str
        """
        if service_description_url is None:
            raise ValueError("Invalid value for `service_description_url`, must not be `None`")

        self._service_description_url = service_description_url

    @property
    def service_moniker(self):
        """Gets the service_moniker of this LoadServiceRequest.

        Service ID to be used to uniquely identify the service. (Optional: Required for anonymous services or to override the service name in the service description.)

        :return: The service_moniker of this LoadServiceRequest.
        :rtype: str
        """
        return self._service_moniker

    @service_moniker.setter
    def service_moniker(self, service_moniker):
        """Sets the service_moniker of this LoadServiceRequest.

        Service ID to be used to uniquely identify the service. (Optional: Required for anonymous services or to override the service name in the service description.)

        :param service_moniker: The service_moniker of this LoadServiceRequest.
        :type service_moniker: str
        """

        self._service_moniker = service_moniker
