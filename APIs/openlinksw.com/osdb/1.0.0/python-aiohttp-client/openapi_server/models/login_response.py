# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.login_response_response import LoginResponseResponse
from openapi_server import util


class LoginResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api: str=None, method: str=None, response: LoginResponseResponse=None, status: str='success'):
        """LoginResponse - a model defined in OpenAPI

        :param api: The api of this LoginResponse.
        :param method: The method of this LoginResponse.
        :param response: The response of this LoginResponse.
        :param status: The status of this LoginResponse.
        """
        self.openapi_types = {
            'api': str,
            'method': str,
            'response': LoginResponseResponse,
            'status': str
        }

        self.attribute_map = {
            'api': 'api',
            'method': 'method',
            'response': 'response',
            'status': 'status'
        }

        self._api = api
        self._method = method
        self._response = response
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoginResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoginResponse of this LoginResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api(self):
        """Gets the api of this LoginResponse.

        The path of the REST API method

        :return: The api of this LoginResponse.
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this LoginResponse.

        The path of the REST API method

        :param api: The api of this LoginResponse.
        :type api: str
        """
        if api is None:
            raise ValueError("Invalid value for `api`, must not be `None`")

        self._api = api

    @property
    def method(self):
        """Gets the method of this LoginResponse.

        The name of the REST API method

        :return: The method of this LoginResponse.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this LoginResponse.

        The name of the REST API method

        :param method: The method of this LoginResponse.
        :type method: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")

        self._method = method

    @property
    def response(self):
        """Gets the response of this LoginResponse.


        :return: The response of this LoginResponse.
        :rtype: LoginResponseResponse
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this LoginResponse.


        :param response: The response of this LoginResponse.
        :type response: LoginResponseResponse
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response

    @property
    def status(self):
        """Gets the status of this LoginResponse.


        :return: The status of this LoginResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LoginResponse.


        :param status: The status of this LoginResponse.
        :type status: str
        """
        allowed_values = ["success"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
