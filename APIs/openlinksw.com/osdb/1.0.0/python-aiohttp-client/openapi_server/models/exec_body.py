# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExecBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_specific_property1: str=None, action_specific_property2: str=None, osdbbody_data_encoding: str=None, osdbbody_data_raw: str=None, osdbbody_data_src_url: str=None, osdboutput_type: str=None, osdbresponse_format: str=None):
        """ExecBody - a model defined in OpenAPI

        :param action_specific_property1: The action_specific_property1 of this ExecBody.
        :param action_specific_property2: The action_specific_property2 of this ExecBody.
        :param osdbbody_data_encoding: The osdbbody_data_encoding of this ExecBody.
        :param osdbbody_data_raw: The osdbbody_data_raw of this ExecBody.
        :param osdbbody_data_src_url: The osdbbody_data_src_url of this ExecBody.
        :param osdboutput_type: The osdboutput_type of this ExecBody.
        :param osdbresponse_format: The osdbresponse_format of this ExecBody.
        """
        self.openapi_types = {
            'action_specific_property1': str,
            'action_specific_property2': str,
            'osdbbody_data_encoding': str,
            'osdbbody_data_raw': str,
            'osdbbody_data_src_url': str,
            'osdboutput_type': str,
            'osdbresponse_format': str
        }

        self.attribute_map = {
            'action_specific_property1': 'action_specific_property1',
            'action_specific_property2': 'action_specific_property2',
            'osdbbody_data_encoding': 'osdb:body_data_encoding',
            'osdbbody_data_raw': 'osdb:body_data_raw',
            'osdbbody_data_src_url': 'osdb:body_data_src_url',
            'osdboutput_type': 'osdb:output_type',
            'osdbresponse_format': 'osdb:response_format'
        }

        self._action_specific_property1 = action_specific_property1
        self._action_specific_property2 = action_specific_property2
        self._osdbbody_data_encoding = osdbbody_data_encoding
        self._osdbbody_data_raw = osdbbody_data_raw
        self._osdbbody_data_src_url = osdbbody_data_src_url
        self._osdboutput_type = osdboutput_type
        self._osdbresponse_format = osdbresponse_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecBody of this ExecBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_specific_property1(self):
        """Gets the action_specific_property1 of this ExecBody.

        An example action specific property. There may be 0, 1 or more action specific properties, each holding an action specific parameter value.

        :return: The action_specific_property1 of this ExecBody.
        :rtype: str
        """
        return self._action_specific_property1

    @action_specific_property1.setter
    def action_specific_property1(self, action_specific_property1):
        """Sets the action_specific_property1 of this ExecBody.

        An example action specific property. There may be 0, 1 or more action specific properties, each holding an action specific parameter value.

        :param action_specific_property1: The action_specific_property1 of this ExecBody.
        :type action_specific_property1: str
        """

        self._action_specific_property1 = action_specific_property1

    @property
    def action_specific_property2(self):
        """Gets the action_specific_property2 of this ExecBody.

        An example action specific property. There may be 0, 1 or more action specific properties, each holding an action specific parameter value.

        :return: The action_specific_property2 of this ExecBody.
        :rtype: str
        """
        return self._action_specific_property2

    @action_specific_property2.setter
    def action_specific_property2(self, action_specific_property2):
        """Sets the action_specific_property2 of this ExecBody.

        An example action specific property. There may be 0, 1 or more action specific properties, each holding an action specific parameter value.

        :param action_specific_property2: The action_specific_property2 of this ExecBody.
        :type action_specific_property2: str
        """

        self._action_specific_property2 = action_specific_property2

    @property
    def osdbbody_data_encoding(self):
        """Gets the osdbbody_data_encoding of this ExecBody.

        The media type of the data associated with osdb:body_data_raw or osdb:body_data_src_url. In the case of osdb:body_data_raw, this is the media type before base64 encoding.

        :return: The osdbbody_data_encoding of this ExecBody.
        :rtype: str
        """
        return self._osdbbody_data_encoding

    @osdbbody_data_encoding.setter
    def osdbbody_data_encoding(self, osdbbody_data_encoding):
        """Sets the osdbbody_data_encoding of this ExecBody.

        The media type of the data associated with osdb:body_data_raw or osdb:body_data_src_url. In the case of osdb:body_data_raw, this is the media type before base64 encoding.

        :param osdbbody_data_encoding: The osdbbody_data_encoding of this ExecBody.
        :type osdbbody_data_encoding: str
        """

        self._osdbbody_data_encoding = osdbbody_data_encoding

    @property
    def osdbbody_data_raw(self):
        """Gets the osdbbody_data_raw of this ExecBody.

        Input data for the action (e.g. CSV data). The data must be base64 encoded by the client. Alternatively, clients can use osdb:body_data_src_url to supply the input data via a web-accessible document.

        :return: The osdbbody_data_raw of this ExecBody.
        :rtype: str
        """
        return self._osdbbody_data_raw

    @osdbbody_data_raw.setter
    def osdbbody_data_raw(self, osdbbody_data_raw):
        """Sets the osdbbody_data_raw of this ExecBody.

        Input data for the action (e.g. CSV data). The data must be base64 encoded by the client. Alternatively, clients can use osdb:body_data_src_url to supply the input data via a web-accessible document.

        :param osdbbody_data_raw: The osdbbody_data_raw of this ExecBody.
        :type osdbbody_data_raw: str
        """

        self._osdbbody_data_raw = osdbbody_data_raw

    @property
    def osdbbody_data_src_url(self):
        """Gets the osdbbody_data_src_url of this ExecBody.

        URL of a resource containing input data for the action (e.g. CSV data). Clients can instead use osdb:body_data_raw to supply the input data directly.

        :return: The osdbbody_data_src_url of this ExecBody.
        :rtype: str
        """
        return self._osdbbody_data_src_url

    @osdbbody_data_src_url.setter
    def osdbbody_data_src_url(self, osdbbody_data_src_url):
        """Sets the osdbbody_data_src_url of this ExecBody.

        URL of a resource containing input data for the action (e.g. CSV data). Clients can instead use osdb:body_data_raw to supply the input data directly.

        :param osdbbody_data_src_url: The osdbbody_data_src_url of this ExecBody.
        :type osdbbody_data_src_url: str
        """

        self._osdbbody_data_src_url = osdbbody_data_src_url

    @property
    def osdboutput_type(self):
        """Gets the osdboutput_type of this ExecBody.

        An OSDB-specific parameter controlling the action output type. If omitted, the native action output is returned.

        :return: The osdboutput_type of this ExecBody.
        :rtype: str
        """
        return self._osdboutput_type

    @osdboutput_type.setter
    def osdboutput_type(self, osdboutput_type):
        """Sets the osdboutput_type of this ExecBody.

        An OSDB-specific parameter controlling the action output type. If omitted, the native action output is returned.

        :param osdboutput_type: The osdboutput_type of this ExecBody.
        :type osdboutput_type: str
        """
        allowed_values = ["url_only", "generate_rdf", "display_rdf"]  # noqa: E501
        if osdboutput_type not in allowed_values:
            raise ValueError(
                "Invalid value for `osdboutput_type` ({0}), must be one of {1}"
                .format(osdboutput_type, allowed_values)
            )

        self._osdboutput_type = osdboutput_type

    @property
    def osdbresponse_format(self):
        """Gets the osdbresponse_format of this ExecBody.

        Preferred response MIME type. This must be an output MIME type supported natively by the action or, if 'osdb:output_type' is set to 'generate_rdf', a Virtuoso Sponger output format. i.e. 'application/ld+json', 'text/turtle' or 'application/rdf+xml'.

        :return: The osdbresponse_format of this ExecBody.
        :rtype: str
        """
        return self._osdbresponse_format

    @osdbresponse_format.setter
    def osdbresponse_format(self, osdbresponse_format):
        """Sets the osdbresponse_format of this ExecBody.

        Preferred response MIME type. This must be an output MIME type supported natively by the action or, if 'osdb:output_type' is set to 'generate_rdf', a Virtuoso Sponger output format. i.e. 'application/ld+json', 'text/turtle' or 'application/rdf+xml'.

        :param osdbresponse_format: The osdbresponse_format of this ExecBody.
        :type osdbresponse_format: str
        """

        self._osdbresponse_format = osdbresponse_format
