# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entry_point_parameter import EntryPointParameter
from openapi_server import util


class EntryPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_types: List[str]=None, description: str=None, encoding_types: List[str]=None, http_method: str=None, name: str=None, parameters: List[EntryPointParameter]=None, url: str=None, url_template: str=None):
        """EntryPoint - a model defined in OpenAPI

        :param content_types: The content_types of this EntryPoint.
        :param description: The description of this EntryPoint.
        :param encoding_types: The encoding_types of this EntryPoint.
        :param http_method: The http_method of this EntryPoint.
        :param name: The name of this EntryPoint.
        :param parameters: The parameters of this EntryPoint.
        :param url: The url of this EntryPoint.
        :param url_template: The url_template of this EntryPoint.
        """
        self.openapi_types = {
            'content_types': List[str],
            'description': str,
            'encoding_types': List[str],
            'http_method': str,
            'name': str,
            'parameters': List[EntryPointParameter],
            'url': str,
            'url_template': str
        }

        self.attribute_map = {
            'content_types': 'content_types',
            'description': 'description',
            'encoding_types': 'encoding_types',
            'http_method': 'http_method',
            'name': 'name',
            'parameters': 'parameters',
            'url': 'url',
            'url_template': 'url_template'
        }

        self._content_types = content_types
        self._description = description
        self._encoding_types = encoding_types
        self._http_method = http_method
        self._name = name
        self._parameters = parameters
        self._url = url
        self._url_template = url_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntryPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntryPoint of this EntryPoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_types(self):
        """Gets the content_types of this EntryPoint.

        The supported MIME type(s) for an EntryPoint response.

        :return: The content_types of this EntryPoint.
        :rtype: List[str]
        """
        return self._content_types

    @content_types.setter
    def content_types(self, content_types):
        """Sets the content_types of this EntryPoint.

        The supported MIME type(s) for an EntryPoint response.

        :param content_types: The content_types of this EntryPoint.
        :type content_types: List[str]
        """
        if content_types is None:
            raise ValueError("Invalid value for `content_types`, must not be `None`")

        self._content_types = content_types

    @property
    def description(self):
        """Gets the description of this EntryPoint.

        A short description of the action. Optional - may be null.

        :return: The description of this EntryPoint.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EntryPoint.

        A short description of the action. Optional - may be null.

        :param description: The description of this EntryPoint.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def encoding_types(self):
        """Gets the encoding_types of this EntryPoint.

        The supported MIME type(s) for an EntryPoint request. Null if not applicable.

        :return: The encoding_types of this EntryPoint.
        :rtype: List[str]
        """
        return self._encoding_types

    @encoding_types.setter
    def encoding_types(self, encoding_types):
        """Sets the encoding_types of this EntryPoint.

        The supported MIME type(s) for an EntryPoint request. Null if not applicable.

        :param encoding_types: The encoding_types of this EntryPoint.
        :type encoding_types: List[str]
        """
        if encoding_types is None:
            raise ValueError("Invalid value for `encoding_types`, must not be `None`")

        self._encoding_types = encoding_types

    @property
    def http_method(self):
        """Gets the http_method of this EntryPoint.

        The HTTP method used by the EntryPoint.

        :return: The http_method of this EntryPoint.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this EntryPoint.

        The HTTP method used by the EntryPoint.

        :param http_method: The http_method of this EntryPoint.
        :type http_method: str
        """
        allowed_values = ["GET", "PUT", "POST", "DELETE"]  # noqa: E501
        if http_method not in allowed_values:
            raise ValueError(
                "Invalid value for `http_method` ({0}), must be one of {1}"
                .format(http_method, allowed_values)
            )

        self._http_method = http_method

    @property
    def name(self):
        """Gets the name of this EntryPoint.

        A word or short phrase to be used as the action's display name. Optional - may be null.

        :return: The name of this EntryPoint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntryPoint.

        A word or short phrase to be used as the action's display name. Optional - may be null.

        :param name: The name of this EntryPoint.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this EntryPoint.

        Descriptions of the EntryPoint parameters. Null if not applicable.

        :return: The parameters of this EntryPoint.
        :rtype: List[EntryPointParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this EntryPoint.

        Descriptions of the EntryPoint parameters. Null if not applicable.

        :param parameters: The parameters of this EntryPoint.
        :type parameters: List[EntryPointParameter]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def url(self):
        """Gets the url of this EntryPoint.

        The EntryPoint URL. It will be non-null if url_template is null.

        :return: The url of this EntryPoint.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EntryPoint.

        The EntryPoint URL. It will be non-null if url_template is null.

        :param url: The url of this EntryPoint.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def url_template(self):
        """Gets the url_template of this EntryPoint.

        The EntryPoint's URL template. Only required if the entry point URL is parameterized. Property 'url' will be null if url_template is non-null.

        :return: The url_template of this EntryPoint.
        :rtype: str
        """
        return self._url_template

    @url_template.setter
    def url_template(self, url_template):
        """Sets the url_template of this EntryPoint.

        The EntryPoint's URL template. Only required if the entry point URL is parameterized. Property 'url' will be null if url_template is non-null.

        :param url_template: The url_template of this EntryPoint.
        :type url_template: str
        """
        if url_template is None:
            raise ValueError("Invalid value for `url_template`, must not be `None`")

        self._url_template = url_template
