# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, import_source_uri: str=None, service_id: str=None, service_name: str=None):
        """ServiceDescription - a model defined in OpenAPI

        :param description: The description of this ServiceDescription.
        :param import_source_uri: The import_source_uri of this ServiceDescription.
        :param service_id: The service_id of this ServiceDescription.
        :param service_name: The service_name of this ServiceDescription.
        """
        self.openapi_types = {
            'description': str,
            'import_source_uri': str,
            'service_id': str,
            'service_name': str
        }

        self.attribute_map = {
            'description': 'description',
            'import_source_uri': 'import_source_uri',
            'service_id': 'service_id',
            'service_name': 'service_name'
        }

        self._description = description
        self._import_source_uri = import_source_uri
        self._service_id = service_id
        self._service_name = service_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceDescription of this ServiceDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ServiceDescription.

        A short description of the service.

        :return: The description of this ServiceDescription.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceDescription.

        A short description of the service.

        :param description: The description of this ServiceDescription.
        :type description: str
        """

        self._description = description

    @property
    def import_source_uri(self):
        """Gets the import_source_uri of this ServiceDescription.

        The URI of the source service description document used to load the service into OSDB.

        :return: The import_source_uri of this ServiceDescription.
        :rtype: str
        """
        return self._import_source_uri

    @import_source_uri.setter
    def import_source_uri(self, import_source_uri):
        """Sets the import_source_uri of this ServiceDescription.

        The URI of the source service description document used to load the service into OSDB.

        :param import_source_uri: The import_source_uri of this ServiceDescription.
        :type import_source_uri: str
        """
        if import_source_uri is None:
            raise ValueError("Invalid value for `import_source_uri`, must not be `None`")

        self._import_source_uri = import_source_uri

    @property
    def service_id(self):
        """Gets the service_id of this ServiceDescription.

        A unique one word identifier for the service.

        :return: The service_id of this ServiceDescription.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this ServiceDescription.

        A unique one word identifier for the service.

        :param service_id: The service_id of this ServiceDescription.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id

    @property
    def service_name(self):
        """Gets the service_name of this ServiceDescription.

        A word or phrase naming the service.

        :return: The service_name of this ServiceDescription.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this ServiceDescription.

        A word or phrase naming the service.

        :param service_name: The service_name of this ServiceDescription.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name
