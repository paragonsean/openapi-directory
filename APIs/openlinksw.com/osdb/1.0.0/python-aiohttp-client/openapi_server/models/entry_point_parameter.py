# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EntryPointParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, parameter_name: str=None, permitted_values: List[str]=None, required: int=None, type: str=None):
        """EntryPointParameter - a model defined in OpenAPI

        :param description: The description of this EntryPointParameter.
        :param display_name: The display_name of this EntryPointParameter.
        :param parameter_name: The parameter_name of this EntryPointParameter.
        :param permitted_values: The permitted_values of this EntryPointParameter.
        :param required: The required of this EntryPointParameter.
        :param type: The type of this EntryPointParameter.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'parameter_name': str,
            'permitted_values': List[str],
            'required': int,
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'display_name',
            'parameter_name': 'parameter_name',
            'permitted_values': 'permitted_values',
            'required': 'required',
            'type': 'type'
        }

        self._description = description
        self._display_name = display_name
        self._parameter_name = parameter_name
        self._permitted_values = permitted_values
        self._required = required
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntryPointParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntryPointParameter of this EntryPointParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this EntryPointParameter.

        A short description of the parameter for use in the OSDB Action Console. Optional - may be null.

        :return: The description of this EntryPointParameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EntryPointParameter.

        A short description of the parameter for use in the OSDB Action Console. Optional - may be null.

        :param description: The description of this EntryPointParameter.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this EntryPointParameter.

        The parameter's display name in the OSDB Action Console. Optional - may be null.

        :return: The display_name of this EntryPointParameter.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this EntryPointParameter.

        The parameter's display name in the OSDB Action Console. Optional - may be null.

        :param display_name: The display_name of this EntryPointParameter.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def parameter_name(self):
        """Gets the parameter_name of this EntryPointParameter.

        The parameter name as present in the HTTP request. e.g. the key name in a query string key-value pair.

        :return: The parameter_name of this EntryPointParameter.
        :rtype: str
        """
        return self._parameter_name

    @parameter_name.setter
    def parameter_name(self, parameter_name):
        """Sets the parameter_name of this EntryPointParameter.

        The parameter name as present in the HTTP request. e.g. the key name in a query string key-value pair.

        :param parameter_name: The parameter_name of this EntryPointParameter.
        :type parameter_name: str
        """
        if parameter_name is None:
            raise ValueError("Invalid value for `parameter_name`, must not be `None`")

        self._parameter_name = parameter_name

    @property
    def permitted_values(self):
        """Gets the permitted_values of this EntryPointParameter.

        If the parameter accepts only a limited set of values, the allowed set of values. Null if not applicable.

        :return: The permitted_values of this EntryPointParameter.
        :rtype: List[str]
        """
        return self._permitted_values

    @permitted_values.setter
    def permitted_values(self, permitted_values):
        """Sets the permitted_values of this EntryPointParameter.

        If the parameter accepts only a limited set of values, the allowed set of values. Null if not applicable.

        :param permitted_values: The permitted_values of this EntryPointParameter.
        :type permitted_values: List[str]
        """
        if permitted_values is None:
            raise ValueError("Invalid value for `permitted_values`, must not be `None`")

        self._permitted_values = permitted_values

    @property
    def required(self):
        """Gets the required of this EntryPointParameter.

        A flag indicating if the parameter is optional.

        :return: The required of this EntryPointParameter.
        :rtype: int
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this EntryPointParameter.

        A flag indicating if the parameter is optional.

        :param required: The required of this EntryPointParameter.
        :type required: int
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")
        if required is not None and required > 1:
            raise ValueError("Invalid value for `required`, must be a value less than or equal to `1`")
        if required is not None and required < 0:
            raise ValueError("Invalid value for `required`, must be a value greater than or equal to `0`")

        self._required = required

    @property
    def type(self):
        """Gets the type of this EntryPointParameter.

        The type of the parameter, indicating its location in the HTTP request.

        :return: The type of this EntryPointParameter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EntryPointParameter.

        The type of the parameter, indicating its location in the HTTP request.

        :param type: The type of this EntryPointParameter.
        :type type: str
        """
        allowed_values = ["query", "header", "uri", "path", "body"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
