/*
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActionHelpResponse;
import org.openapitools.client.model.DescribeActionResponse;
import org.openapitools.client.model.DescribeServiceResponse;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.ExecBody;
import org.openapitools.client.model.ListActionsResponse;
import org.openapitools.client.model.ListServicesResponse;
import org.openapitools.client.model.LoadService200Response;
import org.openapitools.client.model.LoadServiceRequest;
import org.openapitools.client.model.LoginResponse;
import org.openapitools.client.model.LogoutResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OsdbApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OsdbApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OsdbApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for actionHelp
     * @param serviceId Service ID of the service supporting the action. (required)
     * @param actionId Action ID of the action for which help text is being requested. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Action help text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionHelpCall(String serviceId, String actionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/actions/{serviceId}/{actionId}/help"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()))
            .replace("{" + "actionId" + "}", localVarApiClient.escapeString(actionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionHelpValidateBeforeCall(String serviceId, String actionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling actionHelp(Async)");
        }

        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling actionHelp(Async)");
        }

        return actionHelpCall(serviceId, actionId, _callback);

    }

    /**
     * Action help
     * Returns the help text for a given service action
     * @param serviceId Service ID of the service supporting the action. (required)
     * @param actionId Action ID of the action for which help text is being requested. (required)
     * @return ActionHelpResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Action help text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ActionHelpResponse actionHelp(String serviceId, String actionId) throws ApiException {
        ApiResponse<ActionHelpResponse> localVarResp = actionHelpWithHttpInfo(serviceId, actionId);
        return localVarResp.getData();
    }

    /**
     * Action help
     * Returns the help text for a given service action
     * @param serviceId Service ID of the service supporting the action. (required)
     * @param actionId Action ID of the action for which help text is being requested. (required)
     * @return ApiResponse&lt;ActionHelpResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Action help text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionHelpResponse> actionHelpWithHttpInfo(String serviceId, String actionId) throws ApiException {
        okhttp3.Call localVarCall = actionHelpValidateBeforeCall(serviceId, actionId, null);
        Type localVarReturnType = new TypeToken<ActionHelpResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action help (asynchronously)
     * Returns the help text for a given service action
     * @param serviceId Service ID of the service supporting the action. (required)
     * @param actionId Action ID of the action for which help text is being requested. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Action help text </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionHelpAsync(String serviceId, String actionId, final ApiCallback<ActionHelpResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionHelpValidateBeforeCall(serviceId, actionId, _callback);
        Type localVarReturnType = new TypeToken<ActionHelpResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeAction
     * @param serviceId Service ID of the service supporting the action. (required)
     * @param actionId Action ID of the action to describe. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single action description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeActionCall(String serviceId, String actionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/actions/{serviceId}/{actionId}"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()))
            .replace("{" + "actionId" + "}", localVarApiClient.escapeString(actionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeActionValidateBeforeCall(String serviceId, String actionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling describeAction(Async)");
        }

        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling describeAction(Async)");
        }

        return describeActionCall(serviceId, actionId, _callback);

    }

    /**
     * Describe action
     * Returns a description of a given service action.
     * @param serviceId Service ID of the service supporting the action. (required)
     * @param actionId Action ID of the action to describe. (required)
     * @return DescribeActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single action description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public DescribeActionResponse describeAction(String serviceId, String actionId) throws ApiException {
        ApiResponse<DescribeActionResponse> localVarResp = describeActionWithHttpInfo(serviceId, actionId);
        return localVarResp.getData();
    }

    /**
     * Describe action
     * Returns a description of a given service action.
     * @param serviceId Service ID of the service supporting the action. (required)
     * @param actionId Action ID of the action to describe. (required)
     * @return ApiResponse&lt;DescribeActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single action description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeActionResponse> describeActionWithHttpInfo(String serviceId, String actionId) throws ApiException {
        okhttp3.Call localVarCall = describeActionValidateBeforeCall(serviceId, actionId, null);
        Type localVarReturnType = new TypeToken<DescribeActionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Describe action (asynchronously)
     * Returns a description of a given service action.
     * @param serviceId Service ID of the service supporting the action. (required)
     * @param actionId Action ID of the action to describe. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single action description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeActionAsync(String serviceId, String actionId, final ApiCallback<DescribeActionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeActionValidateBeforeCall(serviceId, actionId, _callback);
        Type localVarReturnType = new TypeToken<DescribeActionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeService
     * @param serviceId Service ID of the service to describe. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single service description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeServiceCall(String serviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/services/{serviceId}"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeServiceValidateBeforeCall(String serviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling describeService(Async)");
        }

        return describeServiceCall(serviceId, _callback);

    }

    /**
     * Describe service
     * Returns a description of a given service
     * @param serviceId Service ID of the service to describe. (required)
     * @return DescribeServiceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single service description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public DescribeServiceResponse describeService(String serviceId) throws ApiException {
        ApiResponse<DescribeServiceResponse> localVarResp = describeServiceWithHttpInfo(serviceId);
        return localVarResp.getData();
    }

    /**
     * Describe service
     * Returns a description of a given service
     * @param serviceId Service ID of the service to describe. (required)
     * @return ApiResponse&lt;DescribeServiceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single service description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeServiceResponse> describeServiceWithHttpInfo(String serviceId) throws ApiException {
        okhttp3.Call localVarCall = describeServiceValidateBeforeCall(serviceId, null);
        Type localVarReturnType = new TypeToken<DescribeServiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Describe service (asynchronously)
     * Returns a description of a given service
     * @param serviceId Service ID of the service to describe. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single service description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeServiceAsync(String serviceId, final ApiCallback<DescribeServiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeServiceValidateBeforeCall(serviceId, _callback);
        Type localVarReturnType = new TypeToken<DescribeServiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for executeAction
     * @param serviceId Service ID of the service supporting the action. (required)
     * @param actionId Action ID of the action to execute. (required)
     * @param execBody Any parameters required by the action are supplied as a JSON object in the request body. The properties of this object depend on the service action being invoked. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> Response from an OSDB action invocation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeActionCall(String serviceId, String actionId, ExecBody execBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = execBody;

        // create path and map variables
        String localVarPath = "/api/v1/actions/{serviceId}/{actionId}/exec"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()))
            .replace("{" + "actionId" + "}", localVarApiClient.escapeString(actionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executeActionValidateBeforeCall(String serviceId, String actionId, ExecBody execBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling executeAction(Async)");
        }

        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling executeAction(Async)");
        }

        return executeActionCall(serviceId, actionId, execBody, _callback);

    }

    /**
     * Execute action
     * Executes a registered service action and returns any output from the action. The data returned in the POST response body may be:  * the raw action output,  * a URL encapsulating the action request which executes the action when dereferenced  (only for actions using GET),  * RDF generated from the action output, * a URL to an RDF viewer&#39;s display of the generated RDF.  Any parameters required by the action are supplied as a JSON object in the POST body. The parameter types supported are: \&quot;query\&quot;, \&quot;header\&quot;, \&quot;uri\&quot;, \&quot;path\&quot; and \&quot;body\&quot;.  The parameter type determines where a supplied parameter value is inserted into the HTTP request constructed by OSDB to invoke the target service action. In addition to native parameters required by the service action, &#39;Execute action&#39; accepts some OSDB-specific parameters.&lt;br/&gt;&lt;br/&gt;  **Examples** * &#x60;&#x60;&#x60;curl -ik -X POST -d &#39;{ \&quot;latitude\&quot;:\&quot;37.7759792\&quot;, \&quot;longitude\&quot;:\&quot;-122.41823\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec&#x60;&#x60;&#x60;   * &#x60;&#x60;&#x60;curl -ikL -X POST -d &#39;{ \&quot;latitude\&quot;:\&quot;37.7759792\&quot;, \&quot;longitude\&quot;:\&quot;-122.41823\&quot;, \&quot;osdb:output_type\&quot;:\&quot;generate_rdf\&quot;, \&quot;osdb:response_format\&quot;:\&quot;application/rdf+xml\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec&#x60;&#x60;&#x60;  * &#x60;&#x60;&#x60;curl -ikL -X POST -d &#39;{ \&quot;latitude\&quot;:\&quot;37.7759792\&quot;, \&quot;longitude\&quot;:\&quot;-122.41823\&quot;, \&quot;osdb:output_type\&quot;:\&quot;display_rdf\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec&#x60;&#x60;&#x60;  * &#x60;&#x60;&#x60;curl -ik -X POST -d &#39;{ \&quot;q\&quot;:\&quot;skiing\&quot;, \&quot;osdb:response_format\&quot;: \&quot;application/rdf+xml\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/facet/search/exec&#x60;&#x60;&#x60;  * &#x60;&#x60;&#x60;curl -ik -X POST -d &#39;{ \&quot;q\&quot;:\&quot;skiing\&quot;, \&quot;osdb:output_type\&quot;: \&quot;url_only\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/facet/search/exec&#x60;&#x60;&#x60;  * &#x60;&#x60;&#x60;curl -ik -X POST -d &#39;{ \&quot;Content-Location\&quot;: \&quot;http://demo.openlinksw.co.uk/pubs\&quot;, \&quot;osdb:body_data_src_url\&quot;: \&quot;http://ods-qa.openlinksw.com/DAV/home/osdb/pubs.csv\&quot;, \&quot;extractor\&quot;: \&quot;csv\&quot;, \&quot;osdb:response_format\&quot;: \&quot;application/rdf+xml\&quot;, \&quot;osdb:body_data_encoding\&quot;: \&quot;text/csv\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/csv_transformer/transform/exec&#x60;&#x60;&#x60;
     * @param serviceId Service ID of the service supporting the action. (required)
     * @param actionId Action ID of the action to execute. (required)
     * @param execBody Any parameters required by the action are supplied as a JSON object in the request body. The properties of this object depend on the service action being invoked. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> Response from an OSDB action invocation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public void executeAction(String serviceId, String actionId, ExecBody execBody) throws ApiException {
        executeActionWithHttpInfo(serviceId, actionId, execBody);
    }

    /**
     * Execute action
     * Executes a registered service action and returns any output from the action. The data returned in the POST response body may be:  * the raw action output,  * a URL encapsulating the action request which executes the action when dereferenced  (only for actions using GET),  * RDF generated from the action output, * a URL to an RDF viewer&#39;s display of the generated RDF.  Any parameters required by the action are supplied as a JSON object in the POST body. The parameter types supported are: \&quot;query\&quot;, \&quot;header\&quot;, \&quot;uri\&quot;, \&quot;path\&quot; and \&quot;body\&quot;.  The parameter type determines where a supplied parameter value is inserted into the HTTP request constructed by OSDB to invoke the target service action. In addition to native parameters required by the service action, &#39;Execute action&#39; accepts some OSDB-specific parameters.&lt;br/&gt;&lt;br/&gt;  **Examples** * &#x60;&#x60;&#x60;curl -ik -X POST -d &#39;{ \&quot;latitude\&quot;:\&quot;37.7759792\&quot;, \&quot;longitude\&quot;:\&quot;-122.41823\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec&#x60;&#x60;&#x60;   * &#x60;&#x60;&#x60;curl -ikL -X POST -d &#39;{ \&quot;latitude\&quot;:\&quot;37.7759792\&quot;, \&quot;longitude\&quot;:\&quot;-122.41823\&quot;, \&quot;osdb:output_type\&quot;:\&quot;generate_rdf\&quot;, \&quot;osdb:response_format\&quot;:\&quot;application/rdf+xml\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec&#x60;&#x60;&#x60;  * &#x60;&#x60;&#x60;curl -ikL -X POST -d &#39;{ \&quot;latitude\&quot;:\&quot;37.7759792\&quot;, \&quot;longitude\&quot;:\&quot;-122.41823\&quot;, \&quot;osdb:output_type\&quot;:\&quot;display_rdf\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec&#x60;&#x60;&#x60;  * &#x60;&#x60;&#x60;curl -ik -X POST -d &#39;{ \&quot;q\&quot;:\&quot;skiing\&quot;, \&quot;osdb:response_format\&quot;: \&quot;application/rdf+xml\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/facet/search/exec&#x60;&#x60;&#x60;  * &#x60;&#x60;&#x60;curl -ik -X POST -d &#39;{ \&quot;q\&quot;:\&quot;skiing\&quot;, \&quot;osdb:output_type\&quot;: \&quot;url_only\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/facet/search/exec&#x60;&#x60;&#x60;  * &#x60;&#x60;&#x60;curl -ik -X POST -d &#39;{ \&quot;Content-Location\&quot;: \&quot;http://demo.openlinksw.co.uk/pubs\&quot;, \&quot;osdb:body_data_src_url\&quot;: \&quot;http://ods-qa.openlinksw.com/DAV/home/osdb/pubs.csv\&quot;, \&quot;extractor\&quot;: \&quot;csv\&quot;, \&quot;osdb:response_format\&quot;: \&quot;application/rdf+xml\&quot;, \&quot;osdb:body_data_encoding\&quot;: \&quot;text/csv\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/csv_transformer/transform/exec&#x60;&#x60;&#x60;
     * @param serviceId Service ID of the service supporting the action. (required)
     * @param actionId Action ID of the action to execute. (required)
     * @param execBody Any parameters required by the action are supplied as a JSON object in the request body. The properties of this object depend on the service action being invoked. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> Response from an OSDB action invocation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> executeActionWithHttpInfo(String serviceId, String actionId, ExecBody execBody) throws ApiException {
        okhttp3.Call localVarCall = executeActionValidateBeforeCall(serviceId, actionId, execBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Execute action (asynchronously)
     * Executes a registered service action and returns any output from the action. The data returned in the POST response body may be:  * the raw action output,  * a URL encapsulating the action request which executes the action when dereferenced  (only for actions using GET),  * RDF generated from the action output, * a URL to an RDF viewer&#39;s display of the generated RDF.  Any parameters required by the action are supplied as a JSON object in the POST body. The parameter types supported are: \&quot;query\&quot;, \&quot;header\&quot;, \&quot;uri\&quot;, \&quot;path\&quot; and \&quot;body\&quot;.  The parameter type determines where a supplied parameter value is inserted into the HTTP request constructed by OSDB to invoke the target service action. In addition to native parameters required by the service action, &#39;Execute action&#39; accepts some OSDB-specific parameters.&lt;br/&gt;&lt;br/&gt;  **Examples** * &#x60;&#x60;&#x60;curl -ik -X POST -d &#39;{ \&quot;latitude\&quot;:\&quot;37.7759792\&quot;, \&quot;longitude\&quot;:\&quot;-122.41823\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec&#x60;&#x60;&#x60;   * &#x60;&#x60;&#x60;curl -ikL -X POST -d &#39;{ \&quot;latitude\&quot;:\&quot;37.7759792\&quot;, \&quot;longitude\&quot;:\&quot;-122.41823\&quot;, \&quot;osdb:output_type\&quot;:\&quot;generate_rdf\&quot;, \&quot;osdb:response_format\&quot;:\&quot;application/rdf+xml\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec&#x60;&#x60;&#x60;  * &#x60;&#x60;&#x60;curl -ikL -X POST -d &#39;{ \&quot;latitude\&quot;:\&quot;37.7759792\&quot;, \&quot;longitude\&quot;:\&quot;-122.41823\&quot;, \&quot;osdb:output_type\&quot;:\&quot;display_rdf\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec&#x60;&#x60;&#x60;  * &#x60;&#x60;&#x60;curl -ik -X POST -d &#39;{ \&quot;q\&quot;:\&quot;skiing\&quot;, \&quot;osdb:response_format\&quot;: \&quot;application/rdf+xml\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/facet/search/exec&#x60;&#x60;&#x60;  * &#x60;&#x60;&#x60;curl -ik -X POST -d &#39;{ \&quot;q\&quot;:\&quot;skiing\&quot;, \&quot;osdb:output_type\&quot;: \&quot;url_only\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/facet/search/exec&#x60;&#x60;&#x60;  * &#x60;&#x60;&#x60;curl -ik -X POST -d &#39;{ \&quot;Content-Location\&quot;: \&quot;http://demo.openlinksw.co.uk/pubs\&quot;, \&quot;osdb:body_data_src_url\&quot;: \&quot;http://ods-qa.openlinksw.com/DAV/home/osdb/pubs.csv\&quot;, \&quot;extractor\&quot;: \&quot;csv\&quot;, \&quot;osdb:response_format\&quot;: \&quot;application/rdf+xml\&quot;, \&quot;osdb:body_data_encoding\&quot;: \&quot;text/csv\&quot; }&#39; -H &#39;Content-Type: application/json&#39; https://osdb.openlinksw.com/osdb/api/v1/actions/csv_transformer/transform/exec&#x60;&#x60;&#x60;
     * @param serviceId Service ID of the service supporting the action. (required)
     * @param actionId Action ID of the action to execute. (required)
     * @param execBody Any parameters required by the action are supplied as a JSON object in the request body. The properties of this object depend on the service action being invoked. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 2XX </td><td> Response from an OSDB action invocation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call executeActionAsync(String serviceId, String actionId, ExecBody execBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = executeActionValidateBeforeCall(serviceId, actionId, execBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listActions
     * @param serviceId Service ID of the service for which actions are to be listed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of action descriptions for the actions supported by the given service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listActionsCall(String serviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/actions/{serviceId}"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActionsValidateBeforeCall(String serviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling listActions(Async)");
        }

        return listActionsCall(serviceId, _callback);

    }

    /**
     * List actions
     * Returns an array of action descriptions for the actions supported by the given service
     * @param serviceId Service ID of the service for which actions are to be listed (required)
     * @return ListActionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of action descriptions for the actions supported by the given service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ListActionsResponse listActions(String serviceId) throws ApiException {
        ApiResponse<ListActionsResponse> localVarResp = listActionsWithHttpInfo(serviceId);
        return localVarResp.getData();
    }

    /**
     * List actions
     * Returns an array of action descriptions for the actions supported by the given service
     * @param serviceId Service ID of the service for which actions are to be listed (required)
     * @return ApiResponse&lt;ListActionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of action descriptions for the actions supported by the given service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListActionsResponse> listActionsWithHttpInfo(String serviceId) throws ApiException {
        okhttp3.Call localVarCall = listActionsValidateBeforeCall(serviceId, null);
        Type localVarReturnType = new TypeToken<ListActionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List actions (asynchronously)
     * Returns an array of action descriptions for the actions supported by the given service
     * @param serviceId Service ID of the service for which actions are to be listed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of action descriptions for the actions supported by the given service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listActionsAsync(String serviceId, final ApiCallback<ListActionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActionsValidateBeforeCall(serviceId, _callback);
        Type localVarReturnType = new TypeToken<ListActionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listServices
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of service descriptions for all services registered with the OSDB server </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServicesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServicesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listServicesCall(_callback);

    }

    /**
     * List services
     * Returns descriptions of all services registered with the OSDB server.
     * @return ListServicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of service descriptions for all services registered with the OSDB server </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ListServicesResponse listServices() throws ApiException {
        ApiResponse<ListServicesResponse> localVarResp = listServicesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List services
     * Returns descriptions of all services registered with the OSDB server.
     * @return ApiResponse&lt;ListServicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of service descriptions for all services registered with the OSDB server </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListServicesResponse> listServicesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listServicesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListServicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List services (asynchronously)
     * Returns descriptions of all services registered with the OSDB server.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of service descriptions for all services registered with the OSDB server </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServicesAsync(final ApiCallback<ListServicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServicesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListServicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadService
     * @param loadServiceRequest Service to register with OSDB (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loadService response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadServiceCall(LoadServiceRequest loadServiceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loadServiceRequest;

        // create path and map variables
        String localVarPath = "/api/v1/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadServiceValidateBeforeCall(LoadServiceRequest loadServiceRequest, final ApiCallback _callback) throws ApiException {
        return loadServiceCall(loadServiceRequest, _callback);

    }

    /**
     * Load service
     * Loads a service description into the OSDB Service Registry
     * @param loadServiceRequest Service to register with OSDB (optional)
     * @return LoadService200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loadService response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public LoadService200Response loadService(LoadServiceRequest loadServiceRequest) throws ApiException {
        ApiResponse<LoadService200Response> localVarResp = loadServiceWithHttpInfo(loadServiceRequest);
        return localVarResp.getData();
    }

    /**
     * Load service
     * Loads a service description into the OSDB Service Registry
     * @param loadServiceRequest Service to register with OSDB (optional)
     * @return ApiResponse&lt;LoadService200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loadService response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadService200Response> loadServiceWithHttpInfo(LoadServiceRequest loadServiceRequest) throws ApiException {
        okhttp3.Call localVarCall = loadServiceValidateBeforeCall(loadServiceRequest, null);
        Type localVarReturnType = new TypeToken<LoadService200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load service (asynchronously)
     * Loads a service description into the OSDB Service Registry
     * @param loadServiceRequest Service to register with OSDB (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loadService response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadServiceAsync(LoadServiceRequest loadServiceRequest, final ApiCallback<LoadService200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadServiceValidateBeforeCall(loadServiceRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadService200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for login
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation of a successful OSDB login. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return loginCall(_callback);

    }

    /**
     * Login
     * Logs a user into the OSDB server, authenticating them by their WebID and returning an OSDB session ID in cookie osdb.sid
     * @return LoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation of a successful OSDB login. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public LoginResponse login() throws ApiException {
        ApiResponse<LoginResponse> localVarResp = loginWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Login
     * Logs a user into the OSDB server, authenticating them by their WebID and returning an OSDB session ID in cookie osdb.sid
     * @return ApiResponse&lt;LoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation of a successful OSDB login. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginResponse> loginWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = loginValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Login (asynchronously)
     * Logs a user into the OSDB server, authenticating them by their WebID and returning an OSDB session ID in cookie osdb.sid
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation of a successful OSDB login. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginAsync(final ApiCallback<LoginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logout
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation of a successful OSDB logout. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logoutValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return logoutCall(_callback);

    }

    /**
     * Logout
     * Logs a user out of the OSDB server, ending their OSDB session
     * @return LogoutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation of a successful OSDB logout. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public LogoutResponse logout() throws ApiException {
        ApiResponse<LogoutResponse> localVarResp = logoutWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Logout
     * Logs a user out of the OSDB server, ending their OSDB session
     * @return ApiResponse&lt;LogoutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation of a successful OSDB logout. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogoutResponse> logoutWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = logoutValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LogoutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Logout (asynchronously)
     * Logs a user out of the OSDB server, ending their OSDB session
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation of a successful OSDB logout. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutAsync(final ApiCallback<LogoutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = logoutValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LogoutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unloadService
     * @param serviceId Service ID of the service to be unloaded (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unloadService response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unloadServiceCall(String serviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/services/{serviceId}"
            .replace("{" + "serviceId" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unloadServiceValidateBeforeCall(String serviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling unloadService(Async)");
        }

        return unloadServiceCall(serviceId, _callback);

    }

    /**
     * Unload service
     * Removes a service description from the OSDB Service Registry
     * @param serviceId Service ID of the service to be unloaded (required)
     * @return LoadService200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unloadService response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public LoadService200Response unloadService(String serviceId) throws ApiException {
        ApiResponse<LoadService200Response> localVarResp = unloadServiceWithHttpInfo(serviceId);
        return localVarResp.getData();
    }

    /**
     * Unload service
     * Removes a service description from the OSDB Service Registry
     * @param serviceId Service ID of the service to be unloaded (required)
     * @return ApiResponse&lt;LoadService200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unloadService response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadService200Response> unloadServiceWithHttpInfo(String serviceId) throws ApiException {
        okhttp3.Call localVarCall = unloadServiceValidateBeforeCall(serviceId, null);
        Type localVarReturnType = new TypeToken<LoadService200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unload service (asynchronously)
     * Removes a service description from the OSDB Service Registry
     * @param serviceId Service ID of the service to be unloaded (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unloadService response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unloadServiceAsync(String serviceId, final ApiCallback<LoadService200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = unloadServiceValidateBeforeCall(serviceId, _callback);
        Type localVarReturnType = new TypeToken<LoadService200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
