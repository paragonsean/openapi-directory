/*
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExecBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:57.365922-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExecBody {
  public static final String SERIALIZED_NAME_ACTION_SPECIFIC_PROPERTY1 = "action_specific_property1";
  @SerializedName(SERIALIZED_NAME_ACTION_SPECIFIC_PROPERTY1)
  private String actionSpecificProperty1;

  public static final String SERIALIZED_NAME_ACTION_SPECIFIC_PROPERTY2 = "action_specific_property2";
  @SerializedName(SERIALIZED_NAME_ACTION_SPECIFIC_PROPERTY2)
  private String actionSpecificProperty2;

  public static final String SERIALIZED_NAME_OSDB_COLON_BODY_DATA_ENCODING = "osdb:body_data_encoding";
  @SerializedName(SERIALIZED_NAME_OSDB_COLON_BODY_DATA_ENCODING)
  private String osdbColonBodyDataEncoding;

  public static final String SERIALIZED_NAME_OSDB_COLON_BODY_DATA_RAW = "osdb:body_data_raw";
  @SerializedName(SERIALIZED_NAME_OSDB_COLON_BODY_DATA_RAW)
  private byte[] osdbColonBodyDataRaw;

  public static final String SERIALIZED_NAME_OSDB_COLON_BODY_DATA_SRC_URL = "osdb:body_data_src_url";
  @SerializedName(SERIALIZED_NAME_OSDB_COLON_BODY_DATA_SRC_URL)
  private URI osdbColonBodyDataSrcUrl;

  /**
   * An OSDB-specific parameter controlling the action output type. If omitted, the native action output is returned.
   */
  @JsonAdapter(OsdbColonOutputTypeEnum.Adapter.class)
  public enum OsdbColonOutputTypeEnum {
    URL_ONLY("url_only"),
    
    GENERATE_RDF("generate_rdf"),
    
    DISPLAY_RDF("display_rdf");

    private String value;

    OsdbColonOutputTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsdbColonOutputTypeEnum fromValue(String value) {
      for (OsdbColonOutputTypeEnum b : OsdbColonOutputTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsdbColonOutputTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsdbColonOutputTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsdbColonOutputTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsdbColonOutputTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsdbColonOutputTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OSDB_COLON_OUTPUT_TYPE = "osdb:output_type";
  @SerializedName(SERIALIZED_NAME_OSDB_COLON_OUTPUT_TYPE)
  private OsdbColonOutputTypeEnum osdbColonOutputType;

  public static final String SERIALIZED_NAME_OSDB_COLON_RESPONSE_FORMAT = "osdb:response_format";
  @SerializedName(SERIALIZED_NAME_OSDB_COLON_RESPONSE_FORMAT)
  private String osdbColonResponseFormat;

  public ExecBody() {
  }

  public ExecBody actionSpecificProperty1(String actionSpecificProperty1) {
    this.actionSpecificProperty1 = actionSpecificProperty1;
    return this;
  }

  /**
   * An example action specific property. There may be 0, 1 or more action specific properties, each holding an action specific parameter value.
   * @return actionSpecificProperty1
   */
  @javax.annotation.Nullable
  public String getActionSpecificProperty1() {
    return actionSpecificProperty1;
  }

  public void setActionSpecificProperty1(String actionSpecificProperty1) {
    this.actionSpecificProperty1 = actionSpecificProperty1;
  }


  public ExecBody actionSpecificProperty2(String actionSpecificProperty2) {
    this.actionSpecificProperty2 = actionSpecificProperty2;
    return this;
  }

  /**
   * An example action specific property. There may be 0, 1 or more action specific properties, each holding an action specific parameter value.
   * @return actionSpecificProperty2
   */
  @javax.annotation.Nullable
  public String getActionSpecificProperty2() {
    return actionSpecificProperty2;
  }

  public void setActionSpecificProperty2(String actionSpecificProperty2) {
    this.actionSpecificProperty2 = actionSpecificProperty2;
  }


  public ExecBody osdbColonBodyDataEncoding(String osdbColonBodyDataEncoding) {
    this.osdbColonBodyDataEncoding = osdbColonBodyDataEncoding;
    return this;
  }

  /**
   * The media type of the data associated with osdb:body_data_raw or osdb:body_data_src_url. In the case of osdb:body_data_raw, this is the media type before base64 encoding.
   * @return osdbColonBodyDataEncoding
   */
  @javax.annotation.Nullable
  public String getOsdbColonBodyDataEncoding() {
    return osdbColonBodyDataEncoding;
  }

  public void setOsdbColonBodyDataEncoding(String osdbColonBodyDataEncoding) {
    this.osdbColonBodyDataEncoding = osdbColonBodyDataEncoding;
  }


  public ExecBody osdbColonBodyDataRaw(byte[] osdbColonBodyDataRaw) {
    this.osdbColonBodyDataRaw = osdbColonBodyDataRaw;
    return this;
  }

  /**
   * Input data for the action (e.g. CSV data). The data must be base64 encoded by the client. Alternatively, clients can use osdb:body_data_src_url to supply the input data via a web-accessible document.
   * @return osdbColonBodyDataRaw
   */
  @javax.annotation.Nullable
  public byte[] getOsdbColonBodyDataRaw() {
    return osdbColonBodyDataRaw;
  }

  public void setOsdbColonBodyDataRaw(byte[] osdbColonBodyDataRaw) {
    this.osdbColonBodyDataRaw = osdbColonBodyDataRaw;
  }


  public ExecBody osdbColonBodyDataSrcUrl(URI osdbColonBodyDataSrcUrl) {
    this.osdbColonBodyDataSrcUrl = osdbColonBodyDataSrcUrl;
    return this;
  }

  /**
   * URL of a resource containing input data for the action (e.g. CSV data). Clients can instead use osdb:body_data_raw to supply the input data directly.
   * @return osdbColonBodyDataSrcUrl
   */
  @javax.annotation.Nullable
  public URI getOsdbColonBodyDataSrcUrl() {
    return osdbColonBodyDataSrcUrl;
  }

  public void setOsdbColonBodyDataSrcUrl(URI osdbColonBodyDataSrcUrl) {
    this.osdbColonBodyDataSrcUrl = osdbColonBodyDataSrcUrl;
  }


  public ExecBody osdbColonOutputType(OsdbColonOutputTypeEnum osdbColonOutputType) {
    this.osdbColonOutputType = osdbColonOutputType;
    return this;
  }

  /**
   * An OSDB-specific parameter controlling the action output type. If omitted, the native action output is returned.
   * @return osdbColonOutputType
   */
  @javax.annotation.Nullable
  public OsdbColonOutputTypeEnum getOsdbColonOutputType() {
    return osdbColonOutputType;
  }

  public void setOsdbColonOutputType(OsdbColonOutputTypeEnum osdbColonOutputType) {
    this.osdbColonOutputType = osdbColonOutputType;
  }


  public ExecBody osdbColonResponseFormat(String osdbColonResponseFormat) {
    this.osdbColonResponseFormat = osdbColonResponseFormat;
    return this;
  }

  /**
   * Preferred response MIME type. This must be an output MIME type supported natively by the action or, if &#39;osdb:output_type&#39; is set to &#39;generate_rdf&#39;, a Virtuoso Sponger output format. i.e. &#39;application/ld+json&#39;, &#39;text/turtle&#39; or &#39;application/rdf+xml&#39;.
   * @return osdbColonResponseFormat
   */
  @javax.annotation.Nullable
  public String getOsdbColonResponseFormat() {
    return osdbColonResponseFormat;
  }

  public void setOsdbColonResponseFormat(String osdbColonResponseFormat) {
    this.osdbColonResponseFormat = osdbColonResponseFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecBody execBody = (ExecBody) o;
    return Objects.equals(this.actionSpecificProperty1, execBody.actionSpecificProperty1) &&
        Objects.equals(this.actionSpecificProperty2, execBody.actionSpecificProperty2) &&
        Objects.equals(this.osdbColonBodyDataEncoding, execBody.osdbColonBodyDataEncoding) &&
        Arrays.equals(this.osdbColonBodyDataRaw, execBody.osdbColonBodyDataRaw) &&
        Objects.equals(this.osdbColonBodyDataSrcUrl, execBody.osdbColonBodyDataSrcUrl) &&
        Objects.equals(this.osdbColonOutputType, execBody.osdbColonOutputType) &&
        Objects.equals(this.osdbColonResponseFormat, execBody.osdbColonResponseFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionSpecificProperty1, actionSpecificProperty2, osdbColonBodyDataEncoding, Arrays.hashCode(osdbColonBodyDataRaw), osdbColonBodyDataSrcUrl, osdbColonOutputType, osdbColonResponseFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecBody {\n");
    sb.append("    actionSpecificProperty1: ").append(toIndentedString(actionSpecificProperty1)).append("\n");
    sb.append("    actionSpecificProperty2: ").append(toIndentedString(actionSpecificProperty2)).append("\n");
    sb.append("    osdbColonBodyDataEncoding: ").append(toIndentedString(osdbColonBodyDataEncoding)).append("\n");
    sb.append("    osdbColonBodyDataRaw: ").append(toIndentedString(osdbColonBodyDataRaw)).append("\n");
    sb.append("    osdbColonBodyDataSrcUrl: ").append(toIndentedString(osdbColonBodyDataSrcUrl)).append("\n");
    sb.append("    osdbColonOutputType: ").append(toIndentedString(osdbColonOutputType)).append("\n");
    sb.append("    osdbColonResponseFormat: ").append(toIndentedString(osdbColonResponseFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action_specific_property1");
    openapiFields.add("action_specific_property2");
    openapiFields.add("osdb:body_data_encoding");
    openapiFields.add("osdb:body_data_raw");
    openapiFields.add("osdb:body_data_src_url");
    openapiFields.add("osdb:output_type");
    openapiFields.add("osdb:response_format");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExecBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecBody is not found in the empty JSON string", ExecBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action_specific_property1") != null && !jsonObj.get("action_specific_property1").isJsonNull()) && !jsonObj.get("action_specific_property1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action_specific_property1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action_specific_property1").toString()));
      }
      if ((jsonObj.get("action_specific_property2") != null && !jsonObj.get("action_specific_property2").isJsonNull()) && !jsonObj.get("action_specific_property2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action_specific_property2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action_specific_property2").toString()));
      }
      if ((jsonObj.get("osdb:body_data_encoding") != null && !jsonObj.get("osdb:body_data_encoding").isJsonNull()) && !jsonObj.get("osdb:body_data_encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osdb:body_data_encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osdb:body_data_encoding").toString()));
      }
      if ((jsonObj.get("osdb:body_data_src_url") != null && !jsonObj.get("osdb:body_data_src_url").isJsonNull()) && !jsonObj.get("osdb:body_data_src_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osdb:body_data_src_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osdb:body_data_src_url").toString()));
      }
      if ((jsonObj.get("osdb:output_type") != null && !jsonObj.get("osdb:output_type").isJsonNull()) && !jsonObj.get("osdb:output_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osdb:output_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osdb:output_type").toString()));
      }
      // validate the optional field `osdb:output_type`
      if (jsonObj.get("osdb:output_type") != null && !jsonObj.get("osdb:output_type").isJsonNull()) {
        OsdbColonOutputTypeEnum.validateJsonElement(jsonObj.get("osdb:output_type"));
      }
      if ((jsonObj.get("osdb:response_format") != null && !jsonObj.get("osdb:response_format").isJsonNull()) && !jsonObj.get("osdb:response_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osdb:response_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osdb:response_format").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecBody.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecBody>() {
           @Override
           public void write(JsonWriter out, ExecBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExecBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExecBody
   * @throws IOException if the JSON string is invalid with respect to ExecBody
   */
  public static ExecBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecBody.class);
  }

  /**
   * Convert an instance of ExecBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

