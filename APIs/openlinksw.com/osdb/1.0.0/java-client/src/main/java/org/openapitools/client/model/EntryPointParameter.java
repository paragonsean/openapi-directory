/*
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EntryPointParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:57.365922-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntryPointParameter {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_PARAMETER_NAME = "parameter_name";
  @SerializedName(SERIALIZED_NAME_PARAMETER_NAME)
  private String parameterName;

  public static final String SERIALIZED_NAME_PERMITTED_VALUES = "permitted_values";
  @SerializedName(SERIALIZED_NAME_PERMITTED_VALUES)
  private List<String> permittedValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Integer required;

  /**
   * The type of the parameter, indicating its location in the HTTP request.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    QUERY("query"),
    
    HEADER("header"),
    
    URI("uri"),
    
    PATH("path"),
    
    BODY("body");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public EntryPointParameter() {
  }

  public EntryPointParameter description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A short description of the parameter for use in the OSDB Action Console. Optional - may be null.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EntryPointParameter displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The parameter&#39;s display name in the OSDB Action Console. Optional - may be null.
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public EntryPointParameter parameterName(String parameterName) {
    this.parameterName = parameterName;
    return this;
  }

  /**
   * The parameter name as present in the HTTP request. e.g. the key name in a query string key-value pair.
   * @return parameterName
   */
  @javax.annotation.Nonnull
  public String getParameterName() {
    return parameterName;
  }

  public void setParameterName(String parameterName) {
    this.parameterName = parameterName;
  }


  public EntryPointParameter permittedValues(List<String> permittedValues) {
    this.permittedValues = permittedValues;
    return this;
  }

  public EntryPointParameter addPermittedValuesItem(String permittedValuesItem) {
    if (this.permittedValues == null) {
      this.permittedValues = new ArrayList<>();
    }
    this.permittedValues.add(permittedValuesItem);
    return this;
  }

  /**
   * If the parameter accepts only a limited set of values, the allowed set of values. Null if not applicable.
   * @return permittedValues
   */
  @javax.annotation.Nonnull
  public List<String> getPermittedValues() {
    return permittedValues;
  }

  public void setPermittedValues(List<String> permittedValues) {
    this.permittedValues = permittedValues;
  }


  public EntryPointParameter required(Integer required) {
    this.required = required;
    return this;
  }

  /**
   * A flag indicating if the parameter is optional.
   * minimum: 0
   * maximum: 1
   * @return required
   */
  @javax.annotation.Nonnull
  public Integer getRequired() {
    return required;
  }

  public void setRequired(Integer required) {
    this.required = required;
  }


  public EntryPointParameter type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the parameter, indicating its location in the HTTP request.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntryPointParameter entryPointParameter = (EntryPointParameter) o;
    return Objects.equals(this.description, entryPointParameter.description) &&
        Objects.equals(this.displayName, entryPointParameter.displayName) &&
        Objects.equals(this.parameterName, entryPointParameter.parameterName) &&
        Objects.equals(this.permittedValues, entryPointParameter.permittedValues) &&
        Objects.equals(this.required, entryPointParameter.required) &&
        Objects.equals(this.type, entryPointParameter.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, parameterName, permittedValues, required, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntryPointParameter {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    parameterName: ").append(toIndentedString(parameterName)).append("\n");
    sb.append("    permittedValues: ").append(toIndentedString(permittedValues)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("display_name");
    openapiFields.add("parameter_name");
    openapiFields.add("permitted_values");
    openapiFields.add("required");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("display_name");
    openapiRequiredFields.add("parameter_name");
    openapiRequiredFields.add("permitted_values");
    openapiRequiredFields.add("required");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntryPointParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntryPointParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntryPointParameter is not found in the empty JSON string", EntryPointParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntryPointParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntryPointParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EntryPointParameter.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if (!jsonObj.get("parameter_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameter_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameter_name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("permitted_values") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("permitted_values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permitted_values` to be an array in the JSON string but got `%s`", jsonObj.get("permitted_values").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntryPointParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntryPointParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntryPointParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntryPointParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<EntryPointParameter>() {
           @Override
           public void write(JsonWriter out, EntryPointParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntryPointParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntryPointParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntryPointParameter
   * @throws IOException if the JSON string is invalid with respect to EntryPointParameter
   */
  public static EntryPointParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntryPointParameter.class);
  }

  /**
   * Convert an instance of EntryPointParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

