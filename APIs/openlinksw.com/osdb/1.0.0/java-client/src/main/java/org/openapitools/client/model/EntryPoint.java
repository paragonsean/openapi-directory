/*
 * OSDB REST API v1
 * An OpenAPI description of the OpenLink Smart Data Bot REST API v1
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: osdb@openlinksw.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EntryPointParameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EntryPoint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:57.365922-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntryPoint {
  public static final String SERIALIZED_NAME_CONTENT_TYPES = "content_types";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPES)
  private List<String> contentTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENCODING_TYPES = "encoding_types";
  @SerializedName(SERIALIZED_NAME_ENCODING_TYPES)
  private List<String> encodingTypes = new ArrayList<>();

  /**
   * The HTTP method used by the EntryPoint.
   */
  @JsonAdapter(HttpMethodEnum.Adapter.class)
  public enum HttpMethodEnum {
    GET("GET"),
    
    PUT("PUT"),
    
    POST("POST"),
    
    DELETE("DELETE");

    private String value;

    HttpMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HttpMethodEnum fromValue(String value) {
      for (HttpMethodEnum b : HttpMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HttpMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HttpMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HttpMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HttpMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HttpMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HTTP_METHOD = "http_method";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD)
  private HttpMethodEnum httpMethod;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<EntryPointParameter> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_URL_TEMPLATE = "url_template";
  @SerializedName(SERIALIZED_NAME_URL_TEMPLATE)
  private String urlTemplate;

  public EntryPoint() {
  }

  public EntryPoint contentTypes(List<String> contentTypes) {
    this.contentTypes = contentTypes;
    return this;
  }

  public EntryPoint addContentTypesItem(String contentTypesItem) {
    if (this.contentTypes == null) {
      this.contentTypes = new ArrayList<>();
    }
    this.contentTypes.add(contentTypesItem);
    return this;
  }

  /**
   * The supported MIME type(s) for an EntryPoint response.
   * @return contentTypes
   */
  @javax.annotation.Nonnull
  public List<String> getContentTypes() {
    return contentTypes;
  }

  public void setContentTypes(List<String> contentTypes) {
    this.contentTypes = contentTypes;
  }


  public EntryPoint description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A short description of the action. Optional - may be null.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EntryPoint encodingTypes(List<String> encodingTypes) {
    this.encodingTypes = encodingTypes;
    return this;
  }

  public EntryPoint addEncodingTypesItem(String encodingTypesItem) {
    if (this.encodingTypes == null) {
      this.encodingTypes = new ArrayList<>();
    }
    this.encodingTypes.add(encodingTypesItem);
    return this;
  }

  /**
   * The supported MIME type(s) for an EntryPoint request. Null if not applicable.
   * @return encodingTypes
   */
  @javax.annotation.Nonnull
  public List<String> getEncodingTypes() {
    return encodingTypes;
  }

  public void setEncodingTypes(List<String> encodingTypes) {
    this.encodingTypes = encodingTypes;
  }


  public EntryPoint httpMethod(HttpMethodEnum httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

  /**
   * The HTTP method used by the EntryPoint.
   * @return httpMethod
   */
  @javax.annotation.Nonnull
  public HttpMethodEnum getHttpMethod() {
    return httpMethod;
  }

  public void setHttpMethod(HttpMethodEnum httpMethod) {
    this.httpMethod = httpMethod;
  }


  public EntryPoint name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A word or short phrase to be used as the action&#39;s display name. Optional - may be null.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EntryPoint parameters(List<EntryPointParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public EntryPoint addParametersItem(EntryPointParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * Descriptions of the EntryPoint parameters. Null if not applicable.
   * @return parameters
   */
  @javax.annotation.Nonnull
  public List<EntryPointParameter> getParameters() {
    return parameters;
  }

  public void setParameters(List<EntryPointParameter> parameters) {
    this.parameters = parameters;
  }


  public EntryPoint url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The EntryPoint URL. It will be non-null if url_template is null.
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }


  public EntryPoint urlTemplate(String urlTemplate) {
    this.urlTemplate = urlTemplate;
    return this;
  }

  /**
   * The EntryPoint&#39;s URL template. Only required if the entry point URL is parameterized. Property &#39;url&#39; will be null if url_template is non-null.
   * @return urlTemplate
   */
  @javax.annotation.Nonnull
  public String getUrlTemplate() {
    return urlTemplate;
  }

  public void setUrlTemplate(String urlTemplate) {
    this.urlTemplate = urlTemplate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntryPoint entryPoint = (EntryPoint) o;
    return Objects.equals(this.contentTypes, entryPoint.contentTypes) &&
        Objects.equals(this.description, entryPoint.description) &&
        Objects.equals(this.encodingTypes, entryPoint.encodingTypes) &&
        Objects.equals(this.httpMethod, entryPoint.httpMethod) &&
        Objects.equals(this.name, entryPoint.name) &&
        Objects.equals(this.parameters, entryPoint.parameters) &&
        Objects.equals(this.url, entryPoint.url) &&
        Objects.equals(this.urlTemplate, entryPoint.urlTemplate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentTypes, description, encodingTypes, httpMethod, name, parameters, url, urlTemplate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntryPoint {\n");
    sb.append("    contentTypes: ").append(toIndentedString(contentTypes)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    encodingTypes: ").append(toIndentedString(encodingTypes)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlTemplate: ").append(toIndentedString(urlTemplate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content_types");
    openapiFields.add("description");
    openapiFields.add("encoding_types");
    openapiFields.add("http_method");
    openapiFields.add("name");
    openapiFields.add("parameters");
    openapiFields.add("url");
    openapiFields.add("url_template");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("content_types");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("encoding_types");
    openapiRequiredFields.add("http_method");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("parameters");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("url_template");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntryPoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntryPoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntryPoint is not found in the empty JSON string", EntryPoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntryPoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntryPoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EntryPoint.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("content_types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("content_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_types` to be an array in the JSON string but got `%s`", jsonObj.get("content_types").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("encoding_types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("encoding_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding_types` to be an array in the JSON string but got `%s`", jsonObj.get("encoding_types").toString()));
      }
      if (!jsonObj.get("http_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `http_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("http_method").toString()));
      }
      // validate the required field `http_method`
      HttpMethodEnum.validateJsonElement(jsonObj.get("http_method"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("parameters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
      }

      JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("parameters");
      // validate the required field `parameters` (array)
      for (int i = 0; i < jsonArrayparameters.size(); i++) {
        EntryPointParameter.validateJsonElement(jsonArrayparameters.get(i));
      };
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("url_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_template").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntryPoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntryPoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntryPoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntryPoint.class));

       return (TypeAdapter<T>) new TypeAdapter<EntryPoint>() {
           @Override
           public void write(JsonWriter out, EntryPoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntryPoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntryPoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntryPoint
   * @throws IOException if the JSON string is invalid with respect to EntryPoint
   */
  public static EntryPoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntryPoint.class);
  }

  /**
   * Convert an instance of EntryPoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

