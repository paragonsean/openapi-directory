# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_recipient import AdditionalRecipient
from openapi_server.models.address import Address
from openapi_server.models.money import Money
from openapi_server import util


class ChargeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_recipients: List[AdditionalRecipient]=None, amount_money: Money=None, billing_address: Address=None, buyer_email_address: str=None, card_nonce: str=None, customer_card_id: str=None, customer_id: str=None, delay_capture: bool=None, idempotency_key: str=None, note: str=None, order_id: str=None, reference_id: str=None, shipping_address: Address=None, verification_token: str=None):
        """ChargeRequest - a model defined in OpenAPI

        :param additional_recipients: The additional_recipients of this ChargeRequest.
        :param amount_money: The amount_money of this ChargeRequest.
        :param billing_address: The billing_address of this ChargeRequest.
        :param buyer_email_address: The buyer_email_address of this ChargeRequest.
        :param card_nonce: The card_nonce of this ChargeRequest.
        :param customer_card_id: The customer_card_id of this ChargeRequest.
        :param customer_id: The customer_id of this ChargeRequest.
        :param delay_capture: The delay_capture of this ChargeRequest.
        :param idempotency_key: The idempotency_key of this ChargeRequest.
        :param note: The note of this ChargeRequest.
        :param order_id: The order_id of this ChargeRequest.
        :param reference_id: The reference_id of this ChargeRequest.
        :param shipping_address: The shipping_address of this ChargeRequest.
        :param verification_token: The verification_token of this ChargeRequest.
        """
        self.openapi_types = {
            'additional_recipients': List[AdditionalRecipient],
            'amount_money': Money,
            'billing_address': Address,
            'buyer_email_address': str,
            'card_nonce': str,
            'customer_card_id': str,
            'customer_id': str,
            'delay_capture': bool,
            'idempotency_key': str,
            'note': str,
            'order_id': str,
            'reference_id': str,
            'shipping_address': Address,
            'verification_token': str
        }

        self.attribute_map = {
            'additional_recipients': 'additional_recipients',
            'amount_money': 'amount_money',
            'billing_address': 'billing_address',
            'buyer_email_address': 'buyer_email_address',
            'card_nonce': 'card_nonce',
            'customer_card_id': 'customer_card_id',
            'customer_id': 'customer_id',
            'delay_capture': 'delay_capture',
            'idempotency_key': 'idempotency_key',
            'note': 'note',
            'order_id': 'order_id',
            'reference_id': 'reference_id',
            'shipping_address': 'shipping_address',
            'verification_token': 'verification_token'
        }

        self._additional_recipients = additional_recipients
        self._amount_money = amount_money
        self._billing_address = billing_address
        self._buyer_email_address = buyer_email_address
        self._card_nonce = card_nonce
        self._customer_card_id = customer_card_id
        self._customer_id = customer_id
        self._delay_capture = delay_capture
        self._idempotency_key = idempotency_key
        self._note = note
        self._order_id = order_id
        self._reference_id = reference_id
        self._shipping_address = shipping_address
        self._verification_token = verification_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChargeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChargeRequest of this ChargeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_recipients(self):
        """Gets the additional_recipients of this ChargeRequest.

        The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the `amount_money` value in your additional_recipients must not be more than 90% of the `amount_money` value in the charge request. The `location_id` must be the valid location of the app owner merchant.  This field requires the `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.  This field is currently not supported in sandbox.

        :return: The additional_recipients of this ChargeRequest.
        :rtype: List[AdditionalRecipient]
        """
        return self._additional_recipients

    @additional_recipients.setter
    def additional_recipients(self, additional_recipients):
        """Sets the additional_recipients of this ChargeRequest.

        The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the `amount_money` value in your additional_recipients must not be more than 90% of the `amount_money` value in the charge request. The `location_id` must be the valid location of the app owner merchant.  This field requires the `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.  This field is currently not supported in sandbox.

        :param additional_recipients: The additional_recipients of this ChargeRequest.
        :type additional_recipients: List[AdditionalRecipient]
        """

        self._additional_recipients = additional_recipients

    @property
    def amount_money(self):
        """Gets the amount_money of this ChargeRequest.


        :return: The amount_money of this ChargeRequest.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this ChargeRequest.


        :param amount_money: The amount_money of this ChargeRequest.
        :type amount_money: Money
        """
        if amount_money is None:
            raise ValueError("Invalid value for `amount_money`, must not be `None`")

        self._amount_money = amount_money

    @property
    def billing_address(self):
        """Gets the billing_address of this ChargeRequest.


        :return: The billing_address of this ChargeRequest.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this ChargeRequest.


        :param billing_address: The billing_address of this ChargeRequest.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def buyer_email_address(self):
        """Gets the buyer_email_address of this ChargeRequest.

        The buyer's email address, if available. This value is optional, but this transaction is ineligible for chargeback protection if it is not provided.

        :return: The buyer_email_address of this ChargeRequest.
        :rtype: str
        """
        return self._buyer_email_address

    @buyer_email_address.setter
    def buyer_email_address(self, buyer_email_address):
        """Sets the buyer_email_address of this ChargeRequest.

        The buyer's email address, if available. This value is optional, but this transaction is ineligible for chargeback protection if it is not provided.

        :param buyer_email_address: The buyer_email_address of this ChargeRequest.
        :type buyer_email_address: str
        """

        self._buyer_email_address = buyer_email_address

    @property
    def card_nonce(self):
        """Gets the card_nonce of this ChargeRequest.

        A payment token generated from the [Card.tokenize()](https://developer.squareup.com/reference/sdks/web/payments/objects/Card#Card.tokenize) that represents the card to charge.  The application that provides a payment token to this endpoint must be the _same application_ that generated the payment token with the Web Payments SDK. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for `customer_card_id`.

        :return: The card_nonce of this ChargeRequest.
        :rtype: str
        """
        return self._card_nonce

    @card_nonce.setter
    def card_nonce(self, card_nonce):
        """Sets the card_nonce of this ChargeRequest.

        A payment token generated from the [Card.tokenize()](https://developer.squareup.com/reference/sdks/web/payments/objects/Card#Card.tokenize) that represents the card to charge.  The application that provides a payment token to this endpoint must be the _same application_ that generated the payment token with the Web Payments SDK. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for `customer_card_id`.

        :param card_nonce: The card_nonce of this ChargeRequest.
        :type card_nonce: str
        """
        if card_nonce is not None and len(card_nonce) > 192:
            raise ValueError("Invalid value for `card_nonce`, length must be less than or equal to `192`")

        self._card_nonce = card_nonce

    @property
    def customer_card_id(self):
        """Gets the customer_card_id of this ChargeRequest.

        The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for `card_nonce`.  If you provide this value, you _must_ also provide a value for `customer_id`.

        :return: The customer_card_id of this ChargeRequest.
        :rtype: str
        """
        return self._customer_card_id

    @customer_card_id.setter
    def customer_card_id(self, customer_card_id):
        """Sets the customer_card_id of this ChargeRequest.

        The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for `card_nonce`.  If you provide this value, you _must_ also provide a value for `customer_id`.

        :param customer_card_id: The customer_card_id of this ChargeRequest.
        :type customer_card_id: str
        """
        if customer_card_id is not None and len(customer_card_id) > 192:
            raise ValueError("Invalid value for `customer_card_id`, length must be less than or equal to `192`")

        self._customer_card_id = customer_card_id

    @property
    def customer_id(self):
        """Gets the customer_id of this ChargeRequest.

        The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise.

        :return: The customer_id of this ChargeRequest.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ChargeRequest.

        The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise.

        :param customer_id: The customer_id of this ChargeRequest.
        :type customer_id: str
        """
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id

    @property
    def delay_capture(self):
        """Gets the delay_capture of this ChargeRequest.

        If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the [CaptureTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/capture-transaction) endpoint) or a Void (with the [VoidTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/void-transaction) endpoint).  Default value: `false`

        :return: The delay_capture of this ChargeRequest.
        :rtype: bool
        """
        return self._delay_capture

    @delay_capture.setter
    def delay_capture(self, delay_capture):
        """Sets the delay_capture of this ChargeRequest.

        If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the [CaptureTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/capture-transaction) endpoint) or a Void (with the [VoidTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/void-transaction) endpoint).  Default value: `false`

        :param delay_capture: The delay_capture of this ChargeRequest.
        :type delay_capture: bool
        """

        self._delay_capture = delay_capture

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this ChargeRequest.

        A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.

        :return: The idempotency_key of this ChargeRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this ChargeRequest.

        A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.

        :param idempotency_key: The idempotency_key of this ChargeRequest.
        :type idempotency_key: str
        """
        if idempotency_key is None:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if idempotency_key is not None and len(idempotency_key) > 192:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `192`")
        if idempotency_key is not None and len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key

    @property
    def note(self):
        """Gets the note of this ChargeRequest.

        An optional note to associate with the transaction.  This value cannot exceed 60 characters.

        :return: The note of this ChargeRequest.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ChargeRequest.

        An optional note to associate with the transaction.  This value cannot exceed 60 characters.

        :param note: The note of this ChargeRequest.
        :type note: str
        """
        if note is not None and len(note) > 60:
            raise ValueError("Invalid value for `note`, length must be less than or equal to `60`")

        self._note = note

    @property
    def order_id(self):
        """Gets the order_id of this ChargeRequest.

        The ID of the order to associate with this transaction.  If you provide this value, the `amount_money` value of your request must __exactly match__ the value of the order's `total_money` field.

        :return: The order_id of this ChargeRequest.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this ChargeRequest.

        The ID of the order to associate with this transaction.  If you provide this value, the `amount_money` value of your request must __exactly match__ the value of the order's `total_money` field.

        :param order_id: The order_id of this ChargeRequest.
        :type order_id: str
        """
        if order_id is not None and len(order_id) > 192:
            raise ValueError("Invalid value for `order_id`, length must be less than or equal to `192`")

        self._order_id = order_id

    @property
    def reference_id(self):
        """Gets the reference_id of this ChargeRequest.

        An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters.

        :return: The reference_id of this ChargeRequest.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this ChargeRequest.

        An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters.

        :param reference_id: The reference_id of this ChargeRequest.
        :type reference_id: str
        """
        if reference_id is not None and len(reference_id) > 40:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `40`")

        self._reference_id = reference_id

    @property
    def shipping_address(self):
        """Gets the shipping_address of this ChargeRequest.


        :return: The shipping_address of this ChargeRequest.
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this ChargeRequest.


        :param shipping_address: The shipping_address of this ChargeRequest.
        :type shipping_address: Address
        """

        self._shipping_address = shipping_address

    @property
    def verification_token(self):
        """Gets the verification_token of this ChargeRequest.

        A token generated by SqPaymentForm's verifyBuyer() that represents customer's device info and 3ds challenge result.

        :return: The verification_token of this ChargeRequest.
        :rtype: str
        """
        return self._verification_token

    @verification_token.setter
    def verification_token(self, verification_token):
        """Sets the verification_token of this ChargeRequest.

        A token generated by SqPaymentForm's verifyBuyer() that represents customer's device info and 3ds challenge result.

        :param verification_token: The verification_token of this ChargeRequest.
        :type verification_token: str
        """

        self._verification_token = verification_token
