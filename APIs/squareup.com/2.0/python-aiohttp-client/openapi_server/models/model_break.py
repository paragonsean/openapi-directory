# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelBreak(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, break_type_id: str=None, end_at: str=None, expected_duration: str=None, id: str=None, is_paid: bool=None, name: str=None, start_at: str=None):
        """ModelBreak - a model defined in OpenAPI

        :param break_type_id: The break_type_id of this ModelBreak.
        :param end_at: The end_at of this ModelBreak.
        :param expected_duration: The expected_duration of this ModelBreak.
        :param id: The id of this ModelBreak.
        :param is_paid: The is_paid of this ModelBreak.
        :param name: The name of this ModelBreak.
        :param start_at: The start_at of this ModelBreak.
        """
        self.openapi_types = {
            'break_type_id': str,
            'end_at': str,
            'expected_duration': str,
            'id': str,
            'is_paid': bool,
            'name': str,
            'start_at': str
        }

        self.attribute_map = {
            'break_type_id': 'break_type_id',
            'end_at': 'end_at',
            'expected_duration': 'expected_duration',
            'id': 'id',
            'is_paid': 'is_paid',
            'name': 'name',
            'start_at': 'start_at'
        }

        self._break_type_id = break_type_id
        self._end_at = end_at
        self._expected_duration = expected_duration
        self._id = id
        self._is_paid = is_paid
        self._name = name
        self._start_at = start_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelBreak':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Break of this ModelBreak.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def break_type_id(self):
        """Gets the break_type_id of this ModelBreak.

        The `BreakType` that this `Break` was templated on.

        :return: The break_type_id of this ModelBreak.
        :rtype: str
        """
        return self._break_type_id

    @break_type_id.setter
    def break_type_id(self, break_type_id):
        """Sets the break_type_id of this ModelBreak.

        The `BreakType` that this `Break` was templated on.

        :param break_type_id: The break_type_id of this ModelBreak.
        :type break_type_id: str
        """
        if break_type_id is None:
            raise ValueError("Invalid value for `break_type_id`, must not be `None`")
        if break_type_id is not None and len(break_type_id) < 1:
            raise ValueError("Invalid value for `break_type_id`, length must be greater than or equal to `1`")

        self._break_type_id = break_type_id

    @property
    def end_at(self):
        """Gets the end_at of this ModelBreak.

        RFC 3339; follows the same timezone information as `Shift`. Precision up to the minute is respected; seconds are truncated.

        :return: The end_at of this ModelBreak.
        :rtype: str
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this ModelBreak.

        RFC 3339; follows the same timezone information as `Shift`. Precision up to the minute is respected; seconds are truncated.

        :param end_at: The end_at of this ModelBreak.
        :type end_at: str
        """

        self._end_at = end_at

    @property
    def expected_duration(self):
        """Gets the expected_duration of this ModelBreak.

        Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of the break.

        :return: The expected_duration of this ModelBreak.
        :rtype: str
        """
        return self._expected_duration

    @expected_duration.setter
    def expected_duration(self, expected_duration):
        """Sets the expected_duration of this ModelBreak.

        Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of the break.

        :param expected_duration: The expected_duration of this ModelBreak.
        :type expected_duration: str
        """
        if expected_duration is None:
            raise ValueError("Invalid value for `expected_duration`, must not be `None`")
        if expected_duration is not None and len(expected_duration) < 1:
            raise ValueError("Invalid value for `expected_duration`, length must be greater than or equal to `1`")

        self._expected_duration = expected_duration

    @property
    def id(self):
        """Gets the id of this ModelBreak.

        The UUID for this object.

        :return: The id of this ModelBreak.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelBreak.

        The UUID for this object.

        :param id: The id of this ModelBreak.
        :type id: str
        """

        self._id = id

    @property
    def is_paid(self):
        """Gets the is_paid of this ModelBreak.

        Whether this break counts towards time worked for compensation purposes.

        :return: The is_paid of this ModelBreak.
        :rtype: bool
        """
        return self._is_paid

    @is_paid.setter
    def is_paid(self, is_paid):
        """Sets the is_paid of this ModelBreak.

        Whether this break counts towards time worked for compensation purposes.

        :param is_paid: The is_paid of this ModelBreak.
        :type is_paid: bool
        """
        if is_paid is None:
            raise ValueError("Invalid value for `is_paid`, must not be `None`")

        self._is_paid = is_paid

    @property
    def name(self):
        """Gets the name of this ModelBreak.

        A human-readable name.

        :return: The name of this ModelBreak.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelBreak.

        A human-readable name.

        :param name: The name of this ModelBreak.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def start_at(self):
        """Gets the start_at of this ModelBreak.

        RFC 3339; follows the same timezone information as `Shift`. Precision up to the minute is respected; seconds are truncated.

        :return: The start_at of this ModelBreak.
        :rtype: str
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this ModelBreak.

        RFC 3339; follows the same timezone information as `Shift`. Precision up to the minute is respected; seconds are truncated.

        :param start_at: The start_at of this ModelBreak.
        :type start_at: str
        """
        if start_at is None:
            raise ValueError("Invalid value for `start_at`, must not be `None`")
        if start_at is not None and len(start_at) < 1:
            raise ValueError("Invalid value for `start_at`, length must be greater than or equal to `1`")

        self._start_at = start_at
