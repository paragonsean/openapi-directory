# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppointmentSegment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration_minutes: int=None, service_variation_id: str=None, service_variation_version: int=None, team_member_id: str=None):
        """AppointmentSegment - a model defined in OpenAPI

        :param duration_minutes: The duration_minutes of this AppointmentSegment.
        :param service_variation_id: The service_variation_id of this AppointmentSegment.
        :param service_variation_version: The service_variation_version of this AppointmentSegment.
        :param team_member_id: The team_member_id of this AppointmentSegment.
        """
        self.openapi_types = {
            'duration_minutes': int,
            'service_variation_id': str,
            'service_variation_version': int,
            'team_member_id': str
        }

        self.attribute_map = {
            'duration_minutes': 'duration_minutes',
            'service_variation_id': 'service_variation_id',
            'service_variation_version': 'service_variation_version',
            'team_member_id': 'team_member_id'
        }

        self._duration_minutes = duration_minutes
        self._service_variation_id = service_variation_id
        self._service_variation_version = service_variation_version
        self._team_member_id = team_member_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppointmentSegment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppointmentSegment of this AppointmentSegment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration_minutes(self):
        """Gets the duration_minutes of this AppointmentSegment.

        The time span in minutes of an appointment segment.

        :return: The duration_minutes of this AppointmentSegment.
        :rtype: int
        """
        return self._duration_minutes

    @duration_minutes.setter
    def duration_minutes(self, duration_minutes):
        """Sets the duration_minutes of this AppointmentSegment.

        The time span in minutes of an appointment segment.

        :param duration_minutes: The duration_minutes of this AppointmentSegment.
        :type duration_minutes: int
        """
        if duration_minutes is None:
            raise ValueError("Invalid value for `duration_minutes`, must not be `None`")
        if duration_minutes is not None and duration_minutes > 1500:
            raise ValueError("Invalid value for `duration_minutes`, must be a value less than or equal to `1500`")
        if duration_minutes is not None and duration_minutes < 0:
            raise ValueError("Invalid value for `duration_minutes`, must be a value greater than or equal to `0`")

        self._duration_minutes = duration_minutes

    @property
    def service_variation_id(self):
        """Gets the service_variation_id of this AppointmentSegment.

        The ID of the [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) object representing the service booked in this segment.

        :return: The service_variation_id of this AppointmentSegment.
        :rtype: str
        """
        return self._service_variation_id

    @service_variation_id.setter
    def service_variation_id(self, service_variation_id):
        """Sets the service_variation_id of this AppointmentSegment.

        The ID of the [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) object representing the service booked in this segment.

        :param service_variation_id: The service_variation_id of this AppointmentSegment.
        :type service_variation_id: str
        """
        if service_variation_id is None:
            raise ValueError("Invalid value for `service_variation_id`, must not be `None`")
        if service_variation_id is not None and len(service_variation_id) < 1:
            raise ValueError("Invalid value for `service_variation_id`, length must be greater than or equal to `1`")

        self._service_variation_id = service_variation_id

    @property
    def service_variation_version(self):
        """Gets the service_variation_version of this AppointmentSegment.

        The current version of the item variation representing the service booked in this segment.

        :return: The service_variation_version of this AppointmentSegment.
        :rtype: int
        """
        return self._service_variation_version

    @service_variation_version.setter
    def service_variation_version(self, service_variation_version):
        """Sets the service_variation_version of this AppointmentSegment.

        The current version of the item variation representing the service booked in this segment.

        :param service_variation_version: The service_variation_version of this AppointmentSegment.
        :type service_variation_version: int
        """
        if service_variation_version is None:
            raise ValueError("Invalid value for `service_variation_version`, must not be `None`")

        self._service_variation_version = service_variation_version

    @property
    def team_member_id(self):
        """Gets the team_member_id of this AppointmentSegment.

        The ID of the [TeamMember](https://developer.squareup.com/reference/square_2021-08-18/objects/TeamMember) object representing the team member booked in this segment.

        :return: The team_member_id of this AppointmentSegment.
        :rtype: str
        """
        return self._team_member_id

    @team_member_id.setter
    def team_member_id(self, team_member_id):
        """Sets the team_member_id of this AppointmentSegment.

        The ID of the [TeamMember](https://developer.squareup.com/reference/square_2021-08-18/objects/TeamMember) object representing the team member booked in this segment.

        :param team_member_id: The team_member_id of this AppointmentSegment.
        :type team_member_id: str
        """
        if team_member_id is None:
            raise ValueError("Invalid value for `team_member_id`, must not be `None`")
        if team_member_id is not None and len(team_member_id) < 1:
            raise ValueError("Invalid value for `team_member_id`, length must be greater than or equal to `1`")

        self._team_member_id = team_member_id
