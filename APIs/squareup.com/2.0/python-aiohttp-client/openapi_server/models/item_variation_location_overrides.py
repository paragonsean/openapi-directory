# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class ItemVariationLocationOverrides(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inventory_alert_threshold: int=None, inventory_alert_type: str=None, location_id: str=None, price_money: Money=None, pricing_type: str=None, track_inventory: bool=None):
        """ItemVariationLocationOverrides - a model defined in OpenAPI

        :param inventory_alert_threshold: The inventory_alert_threshold of this ItemVariationLocationOverrides.
        :param inventory_alert_type: The inventory_alert_type of this ItemVariationLocationOverrides.
        :param location_id: The location_id of this ItemVariationLocationOverrides.
        :param price_money: The price_money of this ItemVariationLocationOverrides.
        :param pricing_type: The pricing_type of this ItemVariationLocationOverrides.
        :param track_inventory: The track_inventory of this ItemVariationLocationOverrides.
        """
        self.openapi_types = {
            'inventory_alert_threshold': int,
            'inventory_alert_type': str,
            'location_id': str,
            'price_money': Money,
            'pricing_type': str,
            'track_inventory': bool
        }

        self.attribute_map = {
            'inventory_alert_threshold': 'inventory_alert_threshold',
            'inventory_alert_type': 'inventory_alert_type',
            'location_id': 'location_id',
            'price_money': 'price_money',
            'pricing_type': 'pricing_type',
            'track_inventory': 'track_inventory'
        }

        self._inventory_alert_threshold = inventory_alert_threshold
        self._inventory_alert_type = inventory_alert_type
        self._location_id = location_id
        self._price_money = price_money
        self._pricing_type = pricing_type
        self._track_inventory = track_inventory

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemVariationLocationOverrides':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemVariationLocationOverrides of this ItemVariationLocationOverrides.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inventory_alert_threshold(self):
        """Gets the inventory_alert_threshold of this ItemVariationLocationOverrides.

        If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type` is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.  This value is always an integer.

        :return: The inventory_alert_threshold of this ItemVariationLocationOverrides.
        :rtype: int
        """
        return self._inventory_alert_threshold

    @inventory_alert_threshold.setter
    def inventory_alert_threshold(self, inventory_alert_threshold):
        """Sets the inventory_alert_threshold of this ItemVariationLocationOverrides.

        If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type` is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.  This value is always an integer.

        :param inventory_alert_threshold: The inventory_alert_threshold of this ItemVariationLocationOverrides.
        :type inventory_alert_threshold: int
        """

        self._inventory_alert_threshold = inventory_alert_threshold

    @property
    def inventory_alert_type(self):
        """Gets the inventory_alert_type of this ItemVariationLocationOverrides.

        Indicates whether the `CatalogItemVariation` displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`.

        :return: The inventory_alert_type of this ItemVariationLocationOverrides.
        :rtype: str
        """
        return self._inventory_alert_type

    @inventory_alert_type.setter
    def inventory_alert_type(self, inventory_alert_type):
        """Sets the inventory_alert_type of this ItemVariationLocationOverrides.

        Indicates whether the `CatalogItemVariation` displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`.

        :param inventory_alert_type: The inventory_alert_type of this ItemVariationLocationOverrides.
        :type inventory_alert_type: str
        """

        self._inventory_alert_type = inventory_alert_type

    @property
    def location_id(self):
        """Gets the location_id of this ItemVariationLocationOverrides.

        The ID of the `Location`. This can include locations that are deactivated.

        :return: The location_id of this ItemVariationLocationOverrides.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ItemVariationLocationOverrides.

        The ID of the `Location`. This can include locations that are deactivated.

        :param location_id: The location_id of this ItemVariationLocationOverrides.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def price_money(self):
        """Gets the price_money of this ItemVariationLocationOverrides.


        :return: The price_money of this ItemVariationLocationOverrides.
        :rtype: Money
        """
        return self._price_money

    @price_money.setter
    def price_money(self, price_money):
        """Sets the price_money of this ItemVariationLocationOverrides.


        :param price_money: The price_money of this ItemVariationLocationOverrides.
        :type price_money: Money
        """

        self._price_money = price_money

    @property
    def pricing_type(self):
        """Gets the pricing_type of this ItemVariationLocationOverrides.

        The pricing type (fixed or variable) for the `CatalogItemVariation` at the given `Location`.

        :return: The pricing_type of this ItemVariationLocationOverrides.
        :rtype: str
        """
        return self._pricing_type

    @pricing_type.setter
    def pricing_type(self, pricing_type):
        """Sets the pricing_type of this ItemVariationLocationOverrides.

        The pricing type (fixed or variable) for the `CatalogItemVariation` at the given `Location`.

        :param pricing_type: The pricing_type of this ItemVariationLocationOverrides.
        :type pricing_type: str
        """

        self._pricing_type = pricing_type

    @property
    def track_inventory(self):
        """Gets the track_inventory of this ItemVariationLocationOverrides.

        If `true`, inventory tracking is active for the `CatalogItemVariation` at this `Location`.

        :return: The track_inventory of this ItemVariationLocationOverrides.
        :rtype: bool
        """
        return self._track_inventory

    @track_inventory.setter
    def track_inventory(self, track_inventory):
        """Sets the track_inventory of this ItemVariationLocationOverrides.

        If `true`, inventory tracking is active for the `CatalogItemVariation` at this `Location`.

        :param track_inventory: The track_inventory of this ItemVariationLocationOverrides.
        :type track_inventory: bool
        """

        self._track_inventory = track_inventory
