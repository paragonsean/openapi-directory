# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InventoryCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calculated_at: str=None, catalog_object_id: str=None, catalog_object_type: str=None, is_estimated: bool=None, location_id: str=None, quantity: str=None, state: str=None):
        """InventoryCount - a model defined in OpenAPI

        :param calculated_at: The calculated_at of this InventoryCount.
        :param catalog_object_id: The catalog_object_id of this InventoryCount.
        :param catalog_object_type: The catalog_object_type of this InventoryCount.
        :param is_estimated: The is_estimated of this InventoryCount.
        :param location_id: The location_id of this InventoryCount.
        :param quantity: The quantity of this InventoryCount.
        :param state: The state of this InventoryCount.
        """
        self.openapi_types = {
            'calculated_at': str,
            'catalog_object_id': str,
            'catalog_object_type': str,
            'is_estimated': bool,
            'location_id': str,
            'quantity': str,
            'state': str
        }

        self.attribute_map = {
            'calculated_at': 'calculated_at',
            'catalog_object_id': 'catalog_object_id',
            'catalog_object_type': 'catalog_object_type',
            'is_estimated': 'is_estimated',
            'location_id': 'location_id',
            'quantity': 'quantity',
            'state': 'state'
        }

        self._calculated_at = calculated_at
        self._catalog_object_id = catalog_object_id
        self._catalog_object_type = catalog_object_type
        self._is_estimated = is_estimated
        self._location_id = location_id
        self._quantity = quantity
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InventoryCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InventoryCount of this InventoryCount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calculated_at(self):
        """Gets the calculated_at of this InventoryCount.

        An RFC 3339-formatted timestamp that indicates when the most recent physical count or adjustment affecting the estimated count is received.

        :return: The calculated_at of this InventoryCount.
        :rtype: str
        """
        return self._calculated_at

    @calculated_at.setter
    def calculated_at(self, calculated_at):
        """Sets the calculated_at of this InventoryCount.

        An RFC 3339-formatted timestamp that indicates when the most recent physical count or adjustment affecting the estimated count is received.

        :param calculated_at: The calculated_at of this InventoryCount.
        :type calculated_at: str
        """
        if calculated_at is not None and len(calculated_at) > 34:
            raise ValueError("Invalid value for `calculated_at`, length must be less than or equal to `34`")

        self._calculated_at = calculated_at

    @property
    def catalog_object_id(self):
        """Gets the catalog_object_id of this InventoryCount.

        The Square-generated ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.

        :return: The catalog_object_id of this InventoryCount.
        :rtype: str
        """
        return self._catalog_object_id

    @catalog_object_id.setter
    def catalog_object_id(self, catalog_object_id):
        """Sets the catalog_object_id of this InventoryCount.

        The Square-generated ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.

        :param catalog_object_id: The catalog_object_id of this InventoryCount.
        :type catalog_object_id: str
        """
        if catalog_object_id is not None and len(catalog_object_id) > 100:
            raise ValueError("Invalid value for `catalog_object_id`, length must be less than or equal to `100`")

        self._catalog_object_id = catalog_object_id

    @property
    def catalog_object_type(self):
        """Gets the catalog_object_type of this InventoryCount.

        The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only supported for the `ITEM_VARIATION` type.

        :return: The catalog_object_type of this InventoryCount.
        :rtype: str
        """
        return self._catalog_object_type

    @catalog_object_type.setter
    def catalog_object_type(self, catalog_object_type):
        """Sets the catalog_object_type of this InventoryCount.

        The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only supported for the `ITEM_VARIATION` type.

        :param catalog_object_type: The catalog_object_type of this InventoryCount.
        :type catalog_object_type: str
        """
        if catalog_object_type is not None and len(catalog_object_type) > 14:
            raise ValueError("Invalid value for `catalog_object_type`, length must be less than or equal to `14`")

        self._catalog_object_type = catalog_object_type

    @property
    def is_estimated(self):
        """Gets the is_estimated of this InventoryCount.

        Whether the inventory count is for composed variation (TRUE) or not (FALSE). If true, the inventory count will not be present in the response of any of these endpoints: [BatchChangeInventory](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-change-inventory),  [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes),  [BatchRetrieveInventoryCounts](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-counts), and  [RetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-changes).

        :return: The is_estimated of this InventoryCount.
        :rtype: bool
        """
        return self._is_estimated

    @is_estimated.setter
    def is_estimated(self, is_estimated):
        """Sets the is_estimated of this InventoryCount.

        Whether the inventory count is for composed variation (TRUE) or not (FALSE). If true, the inventory count will not be present in the response of any of these endpoints: [BatchChangeInventory](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-change-inventory),  [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes),  [BatchRetrieveInventoryCounts](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-counts), and  [RetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-changes).

        :param is_estimated: The is_estimated of this InventoryCount.
        :type is_estimated: bool
        """

        self._is_estimated = is_estimated

    @property
    def location_id(self):
        """Gets the location_id of this InventoryCount.

        The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related quantity of items is being tracked.

        :return: The location_id of this InventoryCount.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this InventoryCount.

        The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related quantity of items is being tracked.

        :param location_id: The location_id of this InventoryCount.
        :type location_id: str
        """
        if location_id is not None and len(location_id) > 100:
            raise ValueError("Invalid value for `location_id`, length must be less than or equal to `100`")

        self._location_id = location_id

    @property
    def quantity(self):
        """Gets the quantity of this InventoryCount.

        The number of items affected by the estimated count as a decimal string. Can support up to 5 digits after the decimal point.

        :return: The quantity of this InventoryCount.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InventoryCount.

        The number of items affected by the estimated count as a decimal string. Can support up to 5 digits after the decimal point.

        :param quantity: The quantity of this InventoryCount.
        :type quantity: str
        """
        if quantity is not None and len(quantity) > 26:
            raise ValueError("Invalid value for `quantity`, length must be less than or equal to `26`")

        self._quantity = quantity

    @property
    def state(self):
        """Gets the state of this InventoryCount.

        The current [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the related quantity of items.

        :return: The state of this InventoryCount.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InventoryCount.

        The current [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the related quantity of items.

        :param state: The state of this InventoryCount.
        :type state: str
        """

        self._state = state
