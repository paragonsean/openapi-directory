# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.business_hours import BusinessHours
from openapi_server.models.coordinates import Coordinates
from openapi_server.models.tax_ids import TaxIds
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, business_email: str=None, business_hours: BusinessHours=None, business_name: str=None, capabilities: List[str]=None, coordinates: Coordinates=None, country: str=None, created_at: str=None, currency: str=None, description: str=None, facebook_url: str=None, full_format_logo_url: str=None, id: str=None, instagram_username: str=None, language_code: str=None, logo_url: str=None, mcc: str=None, merchant_id: str=None, name: str=None, phone_number: str=None, pos_background_url: str=None, status: str=None, tax_ids: TaxIds=None, timezone: str=None, twitter_username: str=None, type: str=None, website_url: str=None):
        """Location - a model defined in OpenAPI

        :param address: The address of this Location.
        :param business_email: The business_email of this Location.
        :param business_hours: The business_hours of this Location.
        :param business_name: The business_name of this Location.
        :param capabilities: The capabilities of this Location.
        :param coordinates: The coordinates of this Location.
        :param country: The country of this Location.
        :param created_at: The created_at of this Location.
        :param currency: The currency of this Location.
        :param description: The description of this Location.
        :param facebook_url: The facebook_url of this Location.
        :param full_format_logo_url: The full_format_logo_url of this Location.
        :param id: The id of this Location.
        :param instagram_username: The instagram_username of this Location.
        :param language_code: The language_code of this Location.
        :param logo_url: The logo_url of this Location.
        :param mcc: The mcc of this Location.
        :param merchant_id: The merchant_id of this Location.
        :param name: The name of this Location.
        :param phone_number: The phone_number of this Location.
        :param pos_background_url: The pos_background_url of this Location.
        :param status: The status of this Location.
        :param tax_ids: The tax_ids of this Location.
        :param timezone: The timezone of this Location.
        :param twitter_username: The twitter_username of this Location.
        :param type: The type of this Location.
        :param website_url: The website_url of this Location.
        """
        self.openapi_types = {
            'address': Address,
            'business_email': str,
            'business_hours': BusinessHours,
            'business_name': str,
            'capabilities': List[str],
            'coordinates': Coordinates,
            'country': str,
            'created_at': str,
            'currency': str,
            'description': str,
            'facebook_url': str,
            'full_format_logo_url': str,
            'id': str,
            'instagram_username': str,
            'language_code': str,
            'logo_url': str,
            'mcc': str,
            'merchant_id': str,
            'name': str,
            'phone_number': str,
            'pos_background_url': str,
            'status': str,
            'tax_ids': TaxIds,
            'timezone': str,
            'twitter_username': str,
            'type': str,
            'website_url': str
        }

        self.attribute_map = {
            'address': 'address',
            'business_email': 'business_email',
            'business_hours': 'business_hours',
            'business_name': 'business_name',
            'capabilities': 'capabilities',
            'coordinates': 'coordinates',
            'country': 'country',
            'created_at': 'created_at',
            'currency': 'currency',
            'description': 'description',
            'facebook_url': 'facebook_url',
            'full_format_logo_url': 'full_format_logo_url',
            'id': 'id',
            'instagram_username': 'instagram_username',
            'language_code': 'language_code',
            'logo_url': 'logo_url',
            'mcc': 'mcc',
            'merchant_id': 'merchant_id',
            'name': 'name',
            'phone_number': 'phone_number',
            'pos_background_url': 'pos_background_url',
            'status': 'status',
            'tax_ids': 'tax_ids',
            'timezone': 'timezone',
            'twitter_username': 'twitter_username',
            'type': 'type',
            'website_url': 'website_url'
        }

        self._address = address
        self._business_email = business_email
        self._business_hours = business_hours
        self._business_name = business_name
        self._capabilities = capabilities
        self._coordinates = coordinates
        self._country = country
        self._created_at = created_at
        self._currency = currency
        self._description = description
        self._facebook_url = facebook_url
        self._full_format_logo_url = full_format_logo_url
        self._id = id
        self._instagram_username = instagram_username
        self._language_code = language_code
        self._logo_url = logo_url
        self._mcc = mcc
        self._merchant_id = merchant_id
        self._name = name
        self._phone_number = phone_number
        self._pos_background_url = pos_background_url
        self._status = status
        self._tax_ids = tax_ids
        self._timezone = timezone
        self._twitter_username = twitter_username
        self._type = type
        self._website_url = website_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Location.


        :return: The address of this Location.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Location.


        :param address: The address of this Location.
        :type address: Address
        """

        self._address = address

    @property
    def business_email(self):
        """Gets the business_email of this Location.

        The email of the location. This email is visible to the customers of the location. For example, the email appears on customer receipts.  For example, `help&#64;squareup.com`.

        :return: The business_email of this Location.
        :rtype: str
        """
        return self._business_email

    @business_email.setter
    def business_email(self, business_email):
        """Sets the business_email of this Location.

        The email of the location. This email is visible to the customers of the location. For example, the email appears on customer receipts.  For example, `help&#64;squareup.com`.

        :param business_email: The business_email of this Location.
        :type business_email: str
        """

        self._business_email = business_email

    @property
    def business_hours(self):
        """Gets the business_hours of this Location.


        :return: The business_hours of this Location.
        :rtype: BusinessHours
        """
        return self._business_hours

    @business_hours.setter
    def business_hours(self, business_hours):
        """Sets the business_hours of this Location.


        :param business_hours: The business_hours of this Location.
        :type business_hours: BusinessHours
        """

        self._business_hours = business_hours

    @property
    def business_name(self):
        """Gets the business_name of this Location.

        The business name of the location This is the name visible to the customers of the location. For example, this name appears on customer receipts.

        :return: The business_name of this Location.
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name):
        """Sets the business_name of this Location.

        The business name of the location This is the name visible to the customers of the location. For example, this name appears on customer receipts.

        :param business_name: The business_name of this Location.
        :type business_name: str
        """

        self._business_name = business_name

    @property
    def capabilities(self):
        """Gets the capabilities of this Location.

        The Square features that are enabled for the location. See [LocationCapability](https://developer.squareup.com/reference/square_2021-08-18/enums/LocationCapability) for possible values.

        :return: The capabilities of this Location.
        :rtype: List[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this Location.

        The Square features that are enabled for the location. See [LocationCapability](https://developer.squareup.com/reference/square_2021-08-18/enums/LocationCapability) for possible values.

        :param capabilities: The capabilities of this Location.
        :type capabilities: List[str]
        """

        self._capabilities = capabilities

    @property
    def coordinates(self):
        """Gets the coordinates of this Location.


        :return: The coordinates of this Location.
        :rtype: Coordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this Location.


        :param coordinates: The coordinates of this Location.
        :type coordinates: Coordinates
        """

        self._coordinates = coordinates

    @property
    def country(self):
        """Gets the country of this Location.

        The country of the location, in ISO 3166-1-alpha-2 format.  See [Country](https://developer.squareup.com/reference/square_2021-08-18/enums/Country) for possible values.

        :return: The country of this Location.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Location.

        The country of the location, in ISO 3166-1-alpha-2 format.  See [Country](https://developer.squareup.com/reference/square_2021-08-18/enums/Country) for possible values.

        :param country: The country of this Location.
        :type country: str
        """

        self._country = country

    @property
    def created_at(self):
        """Gets the created_at of this Location.

        The time when the location was created, in RFC 3339 format. For more information, see [Working with Dates](https://developer.squareup.com/docs/build-basics/working-with-dates).

        :return: The created_at of this Location.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Location.

        The time when the location was created, in RFC 3339 format. For more information, see [Working with Dates](https://developer.squareup.com/docs/build-basics/working-with-dates).

        :param created_at: The created_at of this Location.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this Location.

        The currency used for all transactions at this location, in ISO 4217 format. See [Currency](https://developer.squareup.com/reference/square_2021-08-18/enums/Currency) for possible values.

        :return: The currency of this Location.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Location.

        The currency used for all transactions at this location, in ISO 4217 format. See [Currency](https://developer.squareup.com/reference/square_2021-08-18/enums/Currency) for possible values.

        :param currency: The currency of this Location.
        :type currency: str
        """

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this Location.

        The description of the location.

        :return: The description of this Location.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Location.

        The description of the location.

        :param description: The description of this Location.
        :type description: str
        """

        self._description = description

    @property
    def facebook_url(self):
        """Gets the facebook_url of this Location.

        The Facebook profile URL of the location. The URL should begin with 'facebook.com/'. For example, `https://www.facebook.com/square`.

        :return: The facebook_url of this Location.
        :rtype: str
        """
        return self._facebook_url

    @facebook_url.setter
    def facebook_url(self, facebook_url):
        """Sets the facebook_url of this Location.

        The Facebook profile URL of the location. The URL should begin with 'facebook.com/'. For example, `https://www.facebook.com/square`.

        :param facebook_url: The facebook_url of this Location.
        :type facebook_url: str
        """

        self._facebook_url = facebook_url

    @property
    def full_format_logo_url(self):
        """Gets the full_format_logo_url of this Location.

        The URL of a full-format logo image for the location. The Seller must choose this logo in the Seller dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices) that Square generates on behalf of the Seller. This image can have an aspect ratio of 2:1 or greater and is recommended to be at least 1280x648 pixels.

        :return: The full_format_logo_url of this Location.
        :rtype: str
        """
        return self._full_format_logo_url

    @full_format_logo_url.setter
    def full_format_logo_url(self, full_format_logo_url):
        """Sets the full_format_logo_url of this Location.

        The URL of a full-format logo image for the location. The Seller must choose this logo in the Seller dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices) that Square generates on behalf of the Seller. This image can have an aspect ratio of 2:1 or greater and is recommended to be at least 1280x648 pixels.

        :param full_format_logo_url: The full_format_logo_url of this Location.
        :type full_format_logo_url: str
        """

        self._full_format_logo_url = full_format_logo_url

    @property
    def id(self):
        """Gets the id of this Location.

        The Square-issued ID of the location.

        :return: The id of this Location.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Location.

        The Square-issued ID of the location.

        :param id: The id of this Location.
        :type id: str
        """

        self._id = id

    @property
    def instagram_username(self):
        """Gets the instagram_username of this Location.

        The Instagram username of the location without the '&#64;' symbol. For example, `square`.

        :return: The instagram_username of this Location.
        :rtype: str
        """
        return self._instagram_username

    @instagram_username.setter
    def instagram_username(self, instagram_username):
        """Sets the instagram_username of this Location.

        The Instagram username of the location without the '&#64;' symbol. For example, `square`.

        :param instagram_username: The instagram_username of this Location.
        :type instagram_username: str
        """

        self._instagram_username = instagram_username

    @property
    def language_code(self):
        """Gets the language_code of this Location.

        The language associated with the location, in [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).  For more information, see [Location language code](https://developer.squareup.com/docs/locations-api#location-language-code).

        :return: The language_code of this Location.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this Location.

        The language associated with the location, in [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).  For more information, see [Location language code](https://developer.squareup.com/docs/locations-api#location-language-code).

        :param language_code: The language_code of this Location.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def logo_url(self):
        """Gets the logo_url of this Location.

        The URL of the logo image for the location. The Seller must choose this logo in the Seller dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices) that Square generates on behalf of the Seller. This image should have an aspect ratio close to 1:1 and is recommended to be at least 200x200 pixels.

        :return: The logo_url of this Location.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Location.

        The URL of the logo image for the location. The Seller must choose this logo in the Seller dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices) that Square generates on behalf of the Seller. This image should have an aspect ratio close to 1:1 and is recommended to be at least 200x200 pixels.

        :param logo_url: The logo_url of this Location.
        :type logo_url: str
        """

        self._logo_url = logo_url

    @property
    def mcc(self):
        """Gets the mcc of this Location.

        The merchant category code (MCC) of the location, as standardized by ISO 18245. The MCC describes the kind of goods or services sold at the location.

        :return: The mcc of this Location.
        :rtype: str
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this Location.

        The merchant category code (MCC) of the location, as standardized by ISO 18245. The MCC describes the kind of goods or services sold at the location.

        :param mcc: The mcc of this Location.
        :type mcc: str
        """

        self._mcc = mcc

    @property
    def merchant_id(self):
        """Gets the merchant_id of this Location.

        The ID of the merchant that owns the location.

        :return: The merchant_id of this Location.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this Location.

        The ID of the merchant that owns the location.

        :param merchant_id: The merchant_id of this Location.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def name(self):
        """Gets the name of this Location.

        The name of the location. This information appears in the dashboard as the nickname. A location name must be unique within a seller account.

        :return: The name of this Location.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Location.

        The name of the location. This information appears in the dashboard as the nickname. A location name must be unique within a seller account.

        :param name: The name of this Location.
        :type name: str
        """

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this Location.

        The phone number of the location in human readable format. For example, `+353 80 0 098 8099`.

        :return: The phone_number of this Location.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Location.

        The phone number of the location in human readable format. For example, `+353 80 0 098 8099`.

        :param phone_number: The phone_number of this Location.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def pos_background_url(self):
        """Gets the pos_background_url of this Location.

        The URL of the Point of Sale background image for the location.

        :return: The pos_background_url of this Location.
        :rtype: str
        """
        return self._pos_background_url

    @pos_background_url.setter
    def pos_background_url(self, pos_background_url):
        """Sets the pos_background_url of this Location.

        The URL of the Point of Sale background image for the location.

        :param pos_background_url: The pos_background_url of this Location.
        :type pos_background_url: str
        """

        self._pos_background_url = pos_background_url

    @property
    def status(self):
        """Gets the status of this Location.

        The status of the location, either active or inactive.

        :return: The status of this Location.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Location.

        The status of the location, either active or inactive.

        :param status: The status of this Location.
        :type status: str
        """

        self._status = status

    @property
    def tax_ids(self):
        """Gets the tax_ids of this Location.


        :return: The tax_ids of this Location.
        :rtype: TaxIds
        """
        return self._tax_ids

    @tax_ids.setter
    def tax_ids(self, tax_ids):
        """Sets the tax_ids of this Location.


        :param tax_ids: The tax_ids of this Location.
        :type tax_ids: TaxIds
        """

        self._tax_ids = tax_ids

    @property
    def timezone(self):
        """Gets the timezone of this Location.

        The [IANA Timezone](https://www.iana.org/time-zones) identifier for the timezone of the location.

        :return: The timezone of this Location.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Location.

        The [IANA Timezone](https://www.iana.org/time-zones) identifier for the timezone of the location.

        :param timezone: The timezone of this Location.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def twitter_username(self):
        """Gets the twitter_username of this Location.

        The Twitter username of the location without the '&#64;' symbol. For example, `Square`.

        :return: The twitter_username of this Location.
        :rtype: str
        """
        return self._twitter_username

    @twitter_username.setter
    def twitter_username(self, twitter_username):
        """Sets the twitter_username of this Location.

        The Twitter username of the location without the '&#64;' symbol. For example, `Square`.

        :param twitter_username: The twitter_username of this Location.
        :type twitter_username: str
        """

        self._twitter_username = twitter_username

    @property
    def type(self):
        """Gets the type of this Location.

        The type of the location, either physical or mobile.

        :return: The type of this Location.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Location.

        The type of the location, either physical or mobile.

        :param type: The type of this Location.
        :type type: str
        """

        self._type = type

    @property
    def website_url(self):
        """Gets the website_url of this Location.

        The website URL of the location.  For example, `https://squareup.com`.

        :return: The website_url of this Location.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this Location.

        The website URL of the location.  For example, `https://squareup.com`.

        :param website_url: The website_url of this Location.
        :type website_url: str
        """

        self._website_url = website_url
