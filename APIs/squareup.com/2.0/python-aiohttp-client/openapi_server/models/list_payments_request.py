# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListPaymentsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_time: str=None, card_brand: str=None, cursor: str=None, end_time: str=None, last_4: str=None, limit: int=None, location_id: str=None, sort_order: str=None, total: int=None):
        """ListPaymentsRequest - a model defined in OpenAPI

        :param begin_time: The begin_time of this ListPaymentsRequest.
        :param card_brand: The card_brand of this ListPaymentsRequest.
        :param cursor: The cursor of this ListPaymentsRequest.
        :param end_time: The end_time of this ListPaymentsRequest.
        :param last_4: The last_4 of this ListPaymentsRequest.
        :param limit: The limit of this ListPaymentsRequest.
        :param location_id: The location_id of this ListPaymentsRequest.
        :param sort_order: The sort_order of this ListPaymentsRequest.
        :param total: The total of this ListPaymentsRequest.
        """
        self.openapi_types = {
            'begin_time': str,
            'card_brand': str,
            'cursor': str,
            'end_time': str,
            'last_4': str,
            'limit': int,
            'location_id': str,
            'sort_order': str,
            'total': int
        }

        self.attribute_map = {
            'begin_time': 'begin_time',
            'card_brand': 'card_brand',
            'cursor': 'cursor',
            'end_time': 'end_time',
            'last_4': 'last_4',
            'limit': 'limit',
            'location_id': 'location_id',
            'sort_order': 'sort_order',
            'total': 'total'
        }

        self._begin_time = begin_time
        self._card_brand = card_brand
        self._cursor = cursor
        self._end_time = end_time
        self._last_4 = last_4
        self._limit = limit
        self._location_id = location_id
        self._sort_order = sort_order
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListPaymentsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListPaymentsRequest of this ListPaymentsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_time(self):
        """Gets the begin_time of this ListPaymentsRequest.

        The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.

        :return: The begin_time of this ListPaymentsRequest.
        :rtype: str
        """
        return self._begin_time

    @begin_time.setter
    def begin_time(self, begin_time):
        """Sets the begin_time of this ListPaymentsRequest.

        The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.

        :param begin_time: The begin_time of this ListPaymentsRequest.
        :type begin_time: str
        """

        self._begin_time = begin_time

    @property
    def card_brand(self):
        """Gets the card_brand of this ListPaymentsRequest.

        The brand of the payment card (for example, VISA).

        :return: The card_brand of this ListPaymentsRequest.
        :rtype: str
        """
        return self._card_brand

    @card_brand.setter
    def card_brand(self, card_brand):
        """Sets the card_brand of this ListPaymentsRequest.

        The brand of the payment card (for example, VISA).

        :param card_brand: The card_brand of this ListPaymentsRequest.
        :type card_brand: str
        """

        self._card_brand = card_brand

    @property
    def cursor(self):
        """Gets the cursor of this ListPaymentsRequest.

        A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).

        :return: The cursor of this ListPaymentsRequest.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this ListPaymentsRequest.

        A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).

        :param cursor: The cursor of this ListPaymentsRequest.
        :type cursor: str
        """

        self._cursor = cursor

    @property
    def end_time(self):
        """Gets the end_time of this ListPaymentsRequest.

        The timestamp for the end of the reporting period, in RFC 3339 format.  Default: The current time.

        :return: The end_time of this ListPaymentsRequest.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ListPaymentsRequest.

        The timestamp for the end of the reporting period, in RFC 3339 format.  Default: The current time.

        :param end_time: The end_time of this ListPaymentsRequest.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def last_4(self):
        """Gets the last_4 of this ListPaymentsRequest.

        The last four digits of a payment card.

        :return: The last_4 of this ListPaymentsRequest.
        :rtype: str
        """
        return self._last_4

    @last_4.setter
    def last_4(self, last_4):
        """Sets the last_4 of this ListPaymentsRequest.

        The last four digits of a payment card.

        :param last_4: The last_4 of this ListPaymentsRequest.
        :type last_4: str
        """

        self._last_4 = last_4

    @property
    def limit(self):
        """Gets the limit of this ListPaymentsRequest.

        The maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  The default value of 100 is also the maximum allowed value. If the provided value is  greater than 100, it is ignored and the default value is used instead.  Default: `100`

        :return: The limit of this ListPaymentsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListPaymentsRequest.

        The maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  The default value of 100 is also the maximum allowed value. If the provided value is  greater than 100, it is ignored and the default value is used instead.  Default: `100`

        :param limit: The limit of this ListPaymentsRequest.
        :type limit: int
        """

        self._limit = limit

    @property
    def location_id(self):
        """Gets the location_id of this ListPaymentsRequest.

        Limit results to the location supplied. By default, results are returned for the default (main) location associated with the seller.

        :return: The location_id of this ListPaymentsRequest.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ListPaymentsRequest.

        Limit results to the location supplied. By default, results are returned for the default (main) location associated with the seller.

        :param location_id: The location_id of this ListPaymentsRequest.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def sort_order(self):
        """Gets the sort_order of this ListPaymentsRequest.

        The order in which results are listed: - `ASC` - Oldest to newest. - `DESC` - Newest to oldest (default).

        :return: The sort_order of this ListPaymentsRequest.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ListPaymentsRequest.

        The order in which results are listed: - `ASC` - Oldest to newest. - `DESC` - Newest to oldest (default).

        :param sort_order: The sort_order of this ListPaymentsRequest.
        :type sort_order: str
        """

        self._sort_order = sort_order

    @property
    def total(self):
        """Gets the total of this ListPaymentsRequest.

        The exact amount in the `total_money` for a payment.

        :return: The total of this ListPaymentsRequest.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ListPaymentsRequest.

        The exact amount in the `total_money` for a payment.

        :param total: The total of this ListPaymentsRequest.
        :type total: int
        """
        if total is not None and total < 0:
            raise ValueError("Invalid value for `total`, must be a value greater than or equal to `0`")

        self._total = total
