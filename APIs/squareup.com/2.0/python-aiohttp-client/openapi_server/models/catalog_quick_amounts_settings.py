# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_quick_amount import CatalogQuickAmount
from openapi_server import util


class CatalogQuickAmountsSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amounts: List[CatalogQuickAmount]=None, eligible_for_auto_amounts: bool=None, option: str=None):
        """CatalogQuickAmountsSettings - a model defined in OpenAPI

        :param amounts: The amounts of this CatalogQuickAmountsSettings.
        :param eligible_for_auto_amounts: The eligible_for_auto_amounts of this CatalogQuickAmountsSettings.
        :param option: The option of this CatalogQuickAmountsSettings.
        """
        self.openapi_types = {
            'amounts': List[CatalogQuickAmount],
            'eligible_for_auto_amounts': bool,
            'option': str
        }

        self.attribute_map = {
            'amounts': 'amounts',
            'eligible_for_auto_amounts': 'eligible_for_auto_amounts',
            'option': 'option'
        }

        self._amounts = amounts
        self._eligible_for_auto_amounts = eligible_for_auto_amounts
        self._option = option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogQuickAmountsSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogQuickAmountsSettings of this CatalogQuickAmountsSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amounts(self):
        """Gets the amounts of this CatalogQuickAmountsSettings.

        Represents a set of Quick Amounts at this location.

        :return: The amounts of this CatalogQuickAmountsSettings.
        :rtype: List[CatalogQuickAmount]
        """
        return self._amounts

    @amounts.setter
    def amounts(self, amounts):
        """Sets the amounts of this CatalogQuickAmountsSettings.

        Represents a set of Quick Amounts at this location.

        :param amounts: The amounts of this CatalogQuickAmountsSettings.
        :type amounts: List[CatalogQuickAmount]
        """

        self._amounts = amounts

    @property
    def eligible_for_auto_amounts(self):
        """Gets the eligible_for_auto_amounts of this CatalogQuickAmountsSettings.

        Represents location's eligibility for auto amounts The boolean should be consistent with whether there are AUTO amounts in the `amounts`.

        :return: The eligible_for_auto_amounts of this CatalogQuickAmountsSettings.
        :rtype: bool
        """
        return self._eligible_for_auto_amounts

    @eligible_for_auto_amounts.setter
    def eligible_for_auto_amounts(self, eligible_for_auto_amounts):
        """Sets the eligible_for_auto_amounts of this CatalogQuickAmountsSettings.

        Represents location's eligibility for auto amounts The boolean should be consistent with whether there are AUTO amounts in the `amounts`.

        :param eligible_for_auto_amounts: The eligible_for_auto_amounts of this CatalogQuickAmountsSettings.
        :type eligible_for_auto_amounts: bool
        """

        self._eligible_for_auto_amounts = eligible_for_auto_amounts

    @property
    def option(self):
        """Gets the option of this CatalogQuickAmountsSettings.

        Represents the option seller currently uses on Quick Amounts.

        :return: The option of this CatalogQuickAmountsSettings.
        :rtype: str
        """
        return self._option

    @option.setter
    def option(self, option):
        """Sets the option of this CatalogQuickAmountsSettings.

        Represents the option seller currently uses on Quick Amounts.

        :param option: The option of this CatalogQuickAmountsSettings.
        :type option: str
        """
        if option is None:
            raise ValueError("Invalid value for `option`, must not be `None`")

        self._option = option
