# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server.models.order_line_item_applied_tax import OrderLineItemAppliedTax
from openapi_server import util


class OrderReturnServiceCharge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: Money=None, applied_money: Money=None, applied_taxes: List[OrderLineItemAppliedTax]=None, calculation_phase: str=None, catalog_object_id: str=None, catalog_version: int=None, name: str=None, percentage: str=None, source_service_charge_uid: str=None, taxable: bool=None, total_money: Money=None, total_tax_money: Money=None, uid: str=None):
        """OrderReturnServiceCharge - a model defined in OpenAPI

        :param amount_money: The amount_money of this OrderReturnServiceCharge.
        :param applied_money: The applied_money of this OrderReturnServiceCharge.
        :param applied_taxes: The applied_taxes of this OrderReturnServiceCharge.
        :param calculation_phase: The calculation_phase of this OrderReturnServiceCharge.
        :param catalog_object_id: The catalog_object_id of this OrderReturnServiceCharge.
        :param catalog_version: The catalog_version of this OrderReturnServiceCharge.
        :param name: The name of this OrderReturnServiceCharge.
        :param percentage: The percentage of this OrderReturnServiceCharge.
        :param source_service_charge_uid: The source_service_charge_uid of this OrderReturnServiceCharge.
        :param taxable: The taxable of this OrderReturnServiceCharge.
        :param total_money: The total_money of this OrderReturnServiceCharge.
        :param total_tax_money: The total_tax_money of this OrderReturnServiceCharge.
        :param uid: The uid of this OrderReturnServiceCharge.
        """
        self.openapi_types = {
            'amount_money': Money,
            'applied_money': Money,
            'applied_taxes': List[OrderLineItemAppliedTax],
            'calculation_phase': str,
            'catalog_object_id': str,
            'catalog_version': int,
            'name': str,
            'percentage': str,
            'source_service_charge_uid': str,
            'taxable': bool,
            'total_money': Money,
            'total_tax_money': Money,
            'uid': str
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'applied_money': 'applied_money',
            'applied_taxes': 'applied_taxes',
            'calculation_phase': 'calculation_phase',
            'catalog_object_id': 'catalog_object_id',
            'catalog_version': 'catalog_version',
            'name': 'name',
            'percentage': 'percentage',
            'source_service_charge_uid': 'source_service_charge_uid',
            'taxable': 'taxable',
            'total_money': 'total_money',
            'total_tax_money': 'total_tax_money',
            'uid': 'uid'
        }

        self._amount_money = amount_money
        self._applied_money = applied_money
        self._applied_taxes = applied_taxes
        self._calculation_phase = calculation_phase
        self._catalog_object_id = catalog_object_id
        self._catalog_version = catalog_version
        self._name = name
        self._percentage = percentage
        self._source_service_charge_uid = source_service_charge_uid
        self._taxable = taxable
        self._total_money = total_money
        self._total_tax_money = total_tax_money
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderReturnServiceCharge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderReturnServiceCharge of this OrderReturnServiceCharge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this OrderReturnServiceCharge.


        :return: The amount_money of this OrderReturnServiceCharge.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this OrderReturnServiceCharge.


        :param amount_money: The amount_money of this OrderReturnServiceCharge.
        :type amount_money: Money
        """

        self._amount_money = amount_money

    @property
    def applied_money(self):
        """Gets the applied_money of this OrderReturnServiceCharge.


        :return: The applied_money of this OrderReturnServiceCharge.
        :rtype: Money
        """
        return self._applied_money

    @applied_money.setter
    def applied_money(self, applied_money):
        """Sets the applied_money of this OrderReturnServiceCharge.


        :param applied_money: The applied_money of this OrderReturnServiceCharge.
        :type applied_money: Money
        """

        self._applied_money = applied_money

    @property
    def applied_taxes(self):
        """Gets the applied_taxes of this OrderReturnServiceCharge.

        The list of references to `OrderReturnTax` entities applied to the `OrderReturnServiceCharge`. Each `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level `OrderReturnTax` that is being applied to the `OrderReturnServiceCharge`. On reads, the applied amount is populated.

        :return: The applied_taxes of this OrderReturnServiceCharge.
        :rtype: List[OrderLineItemAppliedTax]
        """
        return self._applied_taxes

    @applied_taxes.setter
    def applied_taxes(self, applied_taxes):
        """Sets the applied_taxes of this OrderReturnServiceCharge.

        The list of references to `OrderReturnTax` entities applied to the `OrderReturnServiceCharge`. Each `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level `OrderReturnTax` that is being applied to the `OrderReturnServiceCharge`. On reads, the applied amount is populated.

        :param applied_taxes: The applied_taxes of this OrderReturnServiceCharge.
        :type applied_taxes: List[OrderLineItemAppliedTax]
        """

        self._applied_taxes = applied_taxes

    @property
    def calculation_phase(self):
        """Gets the calculation_phase of this OrderReturnServiceCharge.

        The calculation phase after which to apply the service charge.

        :return: The calculation_phase of this OrderReturnServiceCharge.
        :rtype: str
        """
        return self._calculation_phase

    @calculation_phase.setter
    def calculation_phase(self, calculation_phase):
        """Sets the calculation_phase of this OrderReturnServiceCharge.

        The calculation phase after which to apply the service charge.

        :param calculation_phase: The calculation_phase of this OrderReturnServiceCharge.
        :type calculation_phase: str
        """

        self._calculation_phase = calculation_phase

    @property
    def catalog_object_id(self):
        """Gets the catalog_object_id of this OrderReturnServiceCharge.

        The catalog object ID of the associated [OrderServiceCharge](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderServiceCharge).

        :return: The catalog_object_id of this OrderReturnServiceCharge.
        :rtype: str
        """
        return self._catalog_object_id

    @catalog_object_id.setter
    def catalog_object_id(self, catalog_object_id):
        """Sets the catalog_object_id of this OrderReturnServiceCharge.

        The catalog object ID of the associated [OrderServiceCharge](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderServiceCharge).

        :param catalog_object_id: The catalog_object_id of this OrderReturnServiceCharge.
        :type catalog_object_id: str
        """
        if catalog_object_id is not None and len(catalog_object_id) > 192:
            raise ValueError("Invalid value for `catalog_object_id`, length must be less than or equal to `192`")

        self._catalog_object_id = catalog_object_id

    @property
    def catalog_version(self):
        """Gets the catalog_version of this OrderReturnServiceCharge.

        The version of the catalog object that this service charge references.

        :return: The catalog_version of this OrderReturnServiceCharge.
        :rtype: int
        """
        return self._catalog_version

    @catalog_version.setter
    def catalog_version(self, catalog_version):
        """Sets the catalog_version of this OrderReturnServiceCharge.

        The version of the catalog object that this service charge references.

        :param catalog_version: The catalog_version of this OrderReturnServiceCharge.
        :type catalog_version: int
        """

        self._catalog_version = catalog_version

    @property
    def name(self):
        """Gets the name of this OrderReturnServiceCharge.

        The name of the service charge.

        :return: The name of this OrderReturnServiceCharge.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderReturnServiceCharge.

        The name of the service charge.

        :param name: The name of this OrderReturnServiceCharge.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this OrderReturnServiceCharge.

        The percentage of the service charge, as a string representation of a decimal number. For example, a value of `\"7.25\"` corresponds to a percentage of 7.25%.  Either `percentage` or `amount_money` should be set, but not both.

        :return: The percentage of this OrderReturnServiceCharge.
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this OrderReturnServiceCharge.

        The percentage of the service charge, as a string representation of a decimal number. For example, a value of `\"7.25\"` corresponds to a percentage of 7.25%.  Either `percentage` or `amount_money` should be set, but not both.

        :param percentage: The percentage of this OrderReturnServiceCharge.
        :type percentage: str
        """
        if percentage is not None and len(percentage) > 10:
            raise ValueError("Invalid value for `percentage`, length must be less than or equal to `10`")

        self._percentage = percentage

    @property
    def source_service_charge_uid(self):
        """Gets the source_service_charge_uid of this OrderReturnServiceCharge.

        The service charge `uid` from the order containing the original service charge. `source_service_charge_uid` is `null` for unlinked returns.

        :return: The source_service_charge_uid of this OrderReturnServiceCharge.
        :rtype: str
        """
        return self._source_service_charge_uid

    @source_service_charge_uid.setter
    def source_service_charge_uid(self, source_service_charge_uid):
        """Sets the source_service_charge_uid of this OrderReturnServiceCharge.

        The service charge `uid` from the order containing the original service charge. `source_service_charge_uid` is `null` for unlinked returns.

        :param source_service_charge_uid: The source_service_charge_uid of this OrderReturnServiceCharge.
        :type source_service_charge_uid: str
        """
        if source_service_charge_uid is not None and len(source_service_charge_uid) > 60:
            raise ValueError("Invalid value for `source_service_charge_uid`, length must be less than or equal to `60`")

        self._source_service_charge_uid = source_service_charge_uid

    @property
    def taxable(self):
        """Gets the taxable of this OrderReturnServiceCharge.

        Indicates whether the surcharge can be taxed. Service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.

        :return: The taxable of this OrderReturnServiceCharge.
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """Sets the taxable of this OrderReturnServiceCharge.

        Indicates whether the surcharge can be taxed. Service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.

        :param taxable: The taxable of this OrderReturnServiceCharge.
        :type taxable: bool
        """

        self._taxable = taxable

    @property
    def total_money(self):
        """Gets the total_money of this OrderReturnServiceCharge.


        :return: The total_money of this OrderReturnServiceCharge.
        :rtype: Money
        """
        return self._total_money

    @total_money.setter
    def total_money(self, total_money):
        """Sets the total_money of this OrderReturnServiceCharge.


        :param total_money: The total_money of this OrderReturnServiceCharge.
        :type total_money: Money
        """

        self._total_money = total_money

    @property
    def total_tax_money(self):
        """Gets the total_tax_money of this OrderReturnServiceCharge.


        :return: The total_tax_money of this OrderReturnServiceCharge.
        :rtype: Money
        """
        return self._total_tax_money

    @total_tax_money.setter
    def total_tax_money(self, total_tax_money):
        """Sets the total_tax_money of this OrderReturnServiceCharge.


        :param total_tax_money: The total_tax_money of this OrderReturnServiceCharge.
        :type total_tax_money: Money
        """

        self._total_tax_money = total_tax_money

    @property
    def uid(self):
        """Gets the uid of this OrderReturnServiceCharge.

        A unique ID that identifies the return service charge only within this order.

        :return: The uid of this OrderReturnServiceCharge.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OrderReturnServiceCharge.

        A unique ID that identifies the return service charge only within this order.

        :param uid: The uid of this OrderReturnServiceCharge.
        :type uid: str
        """
        if uid is not None and len(uid) > 60:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `60`")

        self._uid = uid
