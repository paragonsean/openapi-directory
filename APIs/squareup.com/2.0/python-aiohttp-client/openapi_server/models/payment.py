# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.bank_account_payment_details import BankAccountPaymentDetails
from openapi_server.models.card_payment_details import CardPaymentDetails
from openapi_server.models.cash_payment_details import CashPaymentDetails
from openapi_server.models.digital_wallet_details import DigitalWalletDetails
from openapi_server.models.external_payment_details import ExternalPaymentDetails
from openapi_server.models.money import Money
from openapi_server.models.processing_fee import ProcessingFee
from openapi_server.models.risk_evaluation import RiskEvaluation
from openapi_server import util


class Payment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: Money=None, app_fee_money: Money=None, approved_money: Money=None, bank_account_details: BankAccountPaymentDetails=None, billing_address: Address=None, buyer_email_address: str=None, capabilities: List[str]=None, card_details: CardPaymentDetails=None, cash_details: CashPaymentDetails=None, created_at: str=None, customer_id: str=None, delay_action: str=None, delay_duration: str=None, delayed_until: str=None, employee_id: str=None, external_details: ExternalPaymentDetails=None, id: str=None, location_id: str=None, note: str=None, order_id: str=None, processing_fee: List[ProcessingFee]=None, receipt_number: str=None, receipt_url: str=None, reference_id: str=None, refund_ids: List[str]=None, refunded_money: Money=None, risk_evaluation: RiskEvaluation=None, shipping_address: Address=None, source_type: str=None, statement_description_identifier: str=None, status: str=None, tip_money: Money=None, total_money: Money=None, updated_at: str=None, version_token: str=None, wallet_details: DigitalWalletDetails=None):
        """Payment - a model defined in OpenAPI

        :param amount_money: The amount_money of this Payment.
        :param app_fee_money: The app_fee_money of this Payment.
        :param approved_money: The approved_money of this Payment.
        :param bank_account_details: The bank_account_details of this Payment.
        :param billing_address: The billing_address of this Payment.
        :param buyer_email_address: The buyer_email_address of this Payment.
        :param capabilities: The capabilities of this Payment.
        :param card_details: The card_details of this Payment.
        :param cash_details: The cash_details of this Payment.
        :param created_at: The created_at of this Payment.
        :param customer_id: The customer_id of this Payment.
        :param delay_action: The delay_action of this Payment.
        :param delay_duration: The delay_duration of this Payment.
        :param delayed_until: The delayed_until of this Payment.
        :param employee_id: The employee_id of this Payment.
        :param external_details: The external_details of this Payment.
        :param id: The id of this Payment.
        :param location_id: The location_id of this Payment.
        :param note: The note of this Payment.
        :param order_id: The order_id of this Payment.
        :param processing_fee: The processing_fee of this Payment.
        :param receipt_number: The receipt_number of this Payment.
        :param receipt_url: The receipt_url of this Payment.
        :param reference_id: The reference_id of this Payment.
        :param refund_ids: The refund_ids of this Payment.
        :param refunded_money: The refunded_money of this Payment.
        :param risk_evaluation: The risk_evaluation of this Payment.
        :param shipping_address: The shipping_address of this Payment.
        :param source_type: The source_type of this Payment.
        :param statement_description_identifier: The statement_description_identifier of this Payment.
        :param status: The status of this Payment.
        :param tip_money: The tip_money of this Payment.
        :param total_money: The total_money of this Payment.
        :param updated_at: The updated_at of this Payment.
        :param version_token: The version_token of this Payment.
        :param wallet_details: The wallet_details of this Payment.
        """
        self.openapi_types = {
            'amount_money': Money,
            'app_fee_money': Money,
            'approved_money': Money,
            'bank_account_details': BankAccountPaymentDetails,
            'billing_address': Address,
            'buyer_email_address': str,
            'capabilities': List[str],
            'card_details': CardPaymentDetails,
            'cash_details': CashPaymentDetails,
            'created_at': str,
            'customer_id': str,
            'delay_action': str,
            'delay_duration': str,
            'delayed_until': str,
            'employee_id': str,
            'external_details': ExternalPaymentDetails,
            'id': str,
            'location_id': str,
            'note': str,
            'order_id': str,
            'processing_fee': List[ProcessingFee],
            'receipt_number': str,
            'receipt_url': str,
            'reference_id': str,
            'refund_ids': List[str],
            'refunded_money': Money,
            'risk_evaluation': RiskEvaluation,
            'shipping_address': Address,
            'source_type': str,
            'statement_description_identifier': str,
            'status': str,
            'tip_money': Money,
            'total_money': Money,
            'updated_at': str,
            'version_token': str,
            'wallet_details': DigitalWalletDetails
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'app_fee_money': 'app_fee_money',
            'approved_money': 'approved_money',
            'bank_account_details': 'bank_account_details',
            'billing_address': 'billing_address',
            'buyer_email_address': 'buyer_email_address',
            'capabilities': 'capabilities',
            'card_details': 'card_details',
            'cash_details': 'cash_details',
            'created_at': 'created_at',
            'customer_id': 'customer_id',
            'delay_action': 'delay_action',
            'delay_duration': 'delay_duration',
            'delayed_until': 'delayed_until',
            'employee_id': 'employee_id',
            'external_details': 'external_details',
            'id': 'id',
            'location_id': 'location_id',
            'note': 'note',
            'order_id': 'order_id',
            'processing_fee': 'processing_fee',
            'receipt_number': 'receipt_number',
            'receipt_url': 'receipt_url',
            'reference_id': 'reference_id',
            'refund_ids': 'refund_ids',
            'refunded_money': 'refunded_money',
            'risk_evaluation': 'risk_evaluation',
            'shipping_address': 'shipping_address',
            'source_type': 'source_type',
            'statement_description_identifier': 'statement_description_identifier',
            'status': 'status',
            'tip_money': 'tip_money',
            'total_money': 'total_money',
            'updated_at': 'updated_at',
            'version_token': 'version_token',
            'wallet_details': 'wallet_details'
        }

        self._amount_money = amount_money
        self._app_fee_money = app_fee_money
        self._approved_money = approved_money
        self._bank_account_details = bank_account_details
        self._billing_address = billing_address
        self._buyer_email_address = buyer_email_address
        self._capabilities = capabilities
        self._card_details = card_details
        self._cash_details = cash_details
        self._created_at = created_at
        self._customer_id = customer_id
        self._delay_action = delay_action
        self._delay_duration = delay_duration
        self._delayed_until = delayed_until
        self._employee_id = employee_id
        self._external_details = external_details
        self._id = id
        self._location_id = location_id
        self._note = note
        self._order_id = order_id
        self._processing_fee = processing_fee
        self._receipt_number = receipt_number
        self._receipt_url = receipt_url
        self._reference_id = reference_id
        self._refund_ids = refund_ids
        self._refunded_money = refunded_money
        self._risk_evaluation = risk_evaluation
        self._shipping_address = shipping_address
        self._source_type = source_type
        self._statement_description_identifier = statement_description_identifier
        self._status = status
        self._tip_money = tip_money
        self._total_money = total_money
        self._updated_at = updated_at
        self._version_token = version_token
        self._wallet_details = wallet_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Payment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Payment of this Payment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this Payment.


        :return: The amount_money of this Payment.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this Payment.


        :param amount_money: The amount_money of this Payment.
        :type amount_money: Money
        """

        self._amount_money = amount_money

    @property
    def app_fee_money(self):
        """Gets the app_fee_money of this Payment.


        :return: The app_fee_money of this Payment.
        :rtype: Money
        """
        return self._app_fee_money

    @app_fee_money.setter
    def app_fee_money(self, app_fee_money):
        """Sets the app_fee_money of this Payment.


        :param app_fee_money: The app_fee_money of this Payment.
        :type app_fee_money: Money
        """

        self._app_fee_money = app_fee_money

    @property
    def approved_money(self):
        """Gets the approved_money of this Payment.


        :return: The approved_money of this Payment.
        :rtype: Money
        """
        return self._approved_money

    @approved_money.setter
    def approved_money(self, approved_money):
        """Sets the approved_money of this Payment.


        :param approved_money: The approved_money of this Payment.
        :type approved_money: Money
        """

        self._approved_money = approved_money

    @property
    def bank_account_details(self):
        """Gets the bank_account_details of this Payment.


        :return: The bank_account_details of this Payment.
        :rtype: BankAccountPaymentDetails
        """
        return self._bank_account_details

    @bank_account_details.setter
    def bank_account_details(self, bank_account_details):
        """Sets the bank_account_details of this Payment.


        :param bank_account_details: The bank_account_details of this Payment.
        :type bank_account_details: BankAccountPaymentDetails
        """

        self._bank_account_details = bank_account_details

    @property
    def billing_address(self):
        """Gets the billing_address of this Payment.


        :return: The billing_address of this Payment.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this Payment.


        :param billing_address: The billing_address of this Payment.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def buyer_email_address(self):
        """Gets the buyer_email_address of this Payment.

        The buyer's email address.

        :return: The buyer_email_address of this Payment.
        :rtype: str
        """
        return self._buyer_email_address

    @buyer_email_address.setter
    def buyer_email_address(self, buyer_email_address):
        """Sets the buyer_email_address of this Payment.

        The buyer's email address.

        :param buyer_email_address: The buyer_email_address of this Payment.
        :type buyer_email_address: str
        """
        if buyer_email_address is not None and len(buyer_email_address) > 255:
            raise ValueError("Invalid value for `buyer_email_address`, length must be less than or equal to `255`")

        self._buyer_email_address = buyer_email_address

    @property
    def capabilities(self):
        """Gets the capabilities of this Payment.

        Actions that can be performed on this payment: - `EDIT_AMOUNT_UP` - The payment amount can be edited up. - `EDIT_AMOUNT_DOWN` - The payment amount can be edited down. - `EDIT_TIP_AMOUNT_UP` - The tip amount can be edited up. - `EDIT_TIP_AMOUNT_DOWN` - The tip amount can be edited down.

        :return: The capabilities of this Payment.
        :rtype: List[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this Payment.

        Actions that can be performed on this payment: - `EDIT_AMOUNT_UP` - The payment amount can be edited up. - `EDIT_AMOUNT_DOWN` - The payment amount can be edited down. - `EDIT_TIP_AMOUNT_UP` - The tip amount can be edited up. - `EDIT_TIP_AMOUNT_DOWN` - The tip amount can be edited down.

        :param capabilities: The capabilities of this Payment.
        :type capabilities: List[str]
        """

        self._capabilities = capabilities

    @property
    def card_details(self):
        """Gets the card_details of this Payment.


        :return: The card_details of this Payment.
        :rtype: CardPaymentDetails
        """
        return self._card_details

    @card_details.setter
    def card_details(self, card_details):
        """Sets the card_details of this Payment.


        :param card_details: The card_details of this Payment.
        :type card_details: CardPaymentDetails
        """

        self._card_details = card_details

    @property
    def cash_details(self):
        """Gets the cash_details of this Payment.


        :return: The cash_details of this Payment.
        :rtype: CashPaymentDetails
        """
        return self._cash_details

    @cash_details.setter
    def cash_details(self, cash_details):
        """Sets the cash_details of this Payment.


        :param cash_details: The cash_details of this Payment.
        :type cash_details: CashPaymentDetails
        """

        self._cash_details = cash_details

    @property
    def created_at(self):
        """Gets the created_at of this Payment.

        The timestamp of when the payment was created, in RFC 3339 format.

        :return: The created_at of this Payment.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Payment.

        The timestamp of when the payment was created, in RFC 3339 format.

        :param created_at: The created_at of this Payment.
        :type created_at: str
        """
        if created_at is not None and len(created_at) > 32:
            raise ValueError("Invalid value for `created_at`, length must be less than or equal to `32`")

        self._created_at = created_at

    @property
    def customer_id(self):
        """Gets the customer_id of this Payment.

        The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.

        :return: The customer_id of this Payment.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Payment.

        The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.

        :param customer_id: The customer_id of this Payment.
        :type customer_id: str
        """
        if customer_id is not None and len(customer_id) > 191:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `191`")

        self._customer_id = customer_id

    @property
    def delay_action(self):
        """Gets the delay_action of this Payment.

        The action to be applied to the payment when the `delay_duration` has elapsed. This field is read-only.  Current values include `CANCEL`.

        :return: The delay_action of this Payment.
        :rtype: str
        """
        return self._delay_action

    @delay_action.setter
    def delay_action(self, delay_action):
        """Sets the delay_action of this Payment.

        The action to be applied to the payment when the `delay_duration` has elapsed. This field is read-only.  Current values include `CANCEL`.

        :param delay_action: The delay_action of this Payment.
        :type delay_action: str
        """

        self._delay_action = delay_action

    @property
    def delay_duration(self):
        """Gets the delay_duration of this Payment.

        The duration of time after the payment's creation when Square automatically applies the `delay_action` to the payment. This automatic `delay_action` applies only to payments that do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.  This field is specified as a time duration, in RFC 3339 format.  Notes: This feature is only supported for card payments.  Default:  - Card-present payments: \"PT36H\" (36 hours) from the creation time. - Card-not-present payments: \"P7D\" (7 days) from the creation time.

        :return: The delay_duration of this Payment.
        :rtype: str
        """
        return self._delay_duration

    @delay_duration.setter
    def delay_duration(self, delay_duration):
        """Sets the delay_duration of this Payment.

        The duration of time after the payment's creation when Square automatically applies the `delay_action` to the payment. This automatic `delay_action` applies only to payments that do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.  This field is specified as a time duration, in RFC 3339 format.  Notes: This feature is only supported for card payments.  Default:  - Card-present payments: \"PT36H\" (36 hours) from the creation time. - Card-not-present payments: \"P7D\" (7 days) from the creation time.

        :param delay_duration: The delay_duration of this Payment.
        :type delay_duration: str
        """

        self._delay_duration = delay_duration

    @property
    def delayed_until(self):
        """Gets the delayed_until of this Payment.

        The read-only timestamp of when the `delay_action` is automatically applied, in RFC 3339 format.  Note that this field is calculated by summing the payment's `delay_duration` and `created_at` fields. The `created_at` field is generated by Square and might not exactly match the time on your local machine.

        :return: The delayed_until of this Payment.
        :rtype: str
        """
        return self._delayed_until

    @delayed_until.setter
    def delayed_until(self, delayed_until):
        """Sets the delayed_until of this Payment.

        The read-only timestamp of when the `delay_action` is automatically applied, in RFC 3339 format.  Note that this field is calculated by summing the payment's `delay_duration` and `created_at` fields. The `created_at` field is generated by Square and might not exactly match the time on your local machine.

        :param delayed_until: The delayed_until of this Payment.
        :type delayed_until: str
        """

        self._delayed_until = delayed_until

    @property
    def employee_id(self):
        """Gets the employee_id of this Payment.

        An optional ID of the employee associated with taking the payment.

        :return: The employee_id of this Payment.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this Payment.

        An optional ID of the employee associated with taking the payment.

        :param employee_id: The employee_id of this Payment.
        :type employee_id: str
        """
        if employee_id is not None and len(employee_id) > 192:
            raise ValueError("Invalid value for `employee_id`, length must be less than or equal to `192`")

        self._employee_id = employee_id

    @property
    def external_details(self):
        """Gets the external_details of this Payment.


        :return: The external_details of this Payment.
        :rtype: ExternalPaymentDetails
        """
        return self._external_details

    @external_details.setter
    def external_details(self, external_details):
        """Sets the external_details of this Payment.


        :param external_details: The external_details of this Payment.
        :type external_details: ExternalPaymentDetails
        """

        self._external_details = external_details

    @property
    def id(self):
        """Gets the id of this Payment.

        A unique ID for the payment.

        :return: The id of this Payment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payment.

        A unique ID for the payment.

        :param id: The id of this Payment.
        :type id: str
        """
        if id is not None and len(id) > 192:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `192`")

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this Payment.

        The ID of the location associated with the payment.

        :return: The location_id of this Payment.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Payment.

        The ID of the location associated with the payment.

        :param location_id: The location_id of this Payment.
        :type location_id: str
        """
        if location_id is not None and len(location_id) > 50:
            raise ValueError("Invalid value for `location_id`, length must be less than or equal to `50`")

        self._location_id = location_id

    @property
    def note(self):
        """Gets the note of this Payment.

        An optional note to include when creating a payment.

        :return: The note of this Payment.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Payment.

        An optional note to include when creating a payment.

        :param note: The note of this Payment.
        :type note: str
        """
        if note is not None and len(note) > 500:
            raise ValueError("Invalid value for `note`, length must be less than or equal to `500`")

        self._note = note

    @property
    def order_id(self):
        """Gets the order_id of this Payment.

        The ID of the order associated with the payment.

        :return: The order_id of this Payment.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Payment.

        The ID of the order associated with the payment.

        :param order_id: The order_id of this Payment.
        :type order_id: str
        """
        if order_id is not None and len(order_id) > 192:
            raise ValueError("Invalid value for `order_id`, length must be less than or equal to `192`")

        self._order_id = order_id

    @property
    def processing_fee(self):
        """Gets the processing_fee of this Payment.

        The processing fees and fee adjustments assessed by Square for this payment.

        :return: The processing_fee of this Payment.
        :rtype: List[ProcessingFee]
        """
        return self._processing_fee

    @processing_fee.setter
    def processing_fee(self, processing_fee):
        """Sets the processing_fee of this Payment.

        The processing fees and fee adjustments assessed by Square for this payment.

        :param processing_fee: The processing_fee of this Payment.
        :type processing_fee: List[ProcessingFee]
        """

        self._processing_fee = processing_fee

    @property
    def receipt_number(self):
        """Gets the receipt_number of this Payment.

        The payment's receipt number. The field is missing if a payment is canceled.

        :return: The receipt_number of this Payment.
        :rtype: str
        """
        return self._receipt_number

    @receipt_number.setter
    def receipt_number(self, receipt_number):
        """Sets the receipt_number of this Payment.

        The payment's receipt number. The field is missing if a payment is canceled.

        :param receipt_number: The receipt_number of this Payment.
        :type receipt_number: str
        """
        if receipt_number is not None and len(receipt_number) > 4:
            raise ValueError("Invalid value for `receipt_number`, length must be less than or equal to `4`")

        self._receipt_number = receipt_number

    @property
    def receipt_url(self):
        """Gets the receipt_url of this Payment.

        The URL for the payment's receipt. The field is only populated for COMPLETED payments.

        :return: The receipt_url of this Payment.
        :rtype: str
        """
        return self._receipt_url

    @receipt_url.setter
    def receipt_url(self, receipt_url):
        """Sets the receipt_url of this Payment.

        The URL for the payment's receipt. The field is only populated for COMPLETED payments.

        :param receipt_url: The receipt_url of this Payment.
        :type receipt_url: str
        """
        if receipt_url is not None and len(receipt_url) > 255:
            raise ValueError("Invalid value for `receipt_url`, length must be less than or equal to `255`")

        self._receipt_url = receipt_url

    @property
    def reference_id(self):
        """Gets the reference_id of this Payment.

        An optional ID that associates the payment with an entity in another system.

        :return: The reference_id of this Payment.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this Payment.

        An optional ID that associates the payment with an entity in another system.

        :param reference_id: The reference_id of this Payment.
        :type reference_id: str
        """
        if reference_id is not None and len(reference_id) > 40:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `40`")

        self._reference_id = reference_id

    @property
    def refund_ids(self):
        """Gets the refund_ids of this Payment.

        A list of `refund_id`s identifying refunds for the payment.

        :return: The refund_ids of this Payment.
        :rtype: List[str]
        """
        return self._refund_ids

    @refund_ids.setter
    def refund_ids(self, refund_ids):
        """Sets the refund_ids of this Payment.

        A list of `refund_id`s identifying refunds for the payment.

        :param refund_ids: The refund_ids of this Payment.
        :type refund_ids: List[str]
        """

        self._refund_ids = refund_ids

    @property
    def refunded_money(self):
        """Gets the refunded_money of this Payment.


        :return: The refunded_money of this Payment.
        :rtype: Money
        """
        return self._refunded_money

    @refunded_money.setter
    def refunded_money(self, refunded_money):
        """Sets the refunded_money of this Payment.


        :param refunded_money: The refunded_money of this Payment.
        :type refunded_money: Money
        """

        self._refunded_money = refunded_money

    @property
    def risk_evaluation(self):
        """Gets the risk_evaluation of this Payment.


        :return: The risk_evaluation of this Payment.
        :rtype: RiskEvaluation
        """
        return self._risk_evaluation

    @risk_evaluation.setter
    def risk_evaluation(self, risk_evaluation):
        """Sets the risk_evaluation of this Payment.


        :param risk_evaluation: The risk_evaluation of this Payment.
        :type risk_evaluation: RiskEvaluation
        """

        self._risk_evaluation = risk_evaluation

    @property
    def shipping_address(self):
        """Gets the shipping_address of this Payment.


        :return: The shipping_address of this Payment.
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this Payment.


        :param shipping_address: The shipping_address of this Payment.
        :type shipping_address: Address
        """

        self._shipping_address = shipping_address

    @property
    def source_type(self):
        """Gets the source_type of this Payment.

        The source type for this payment.  Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `CASH`, or `EXTERNAL`.

        :return: The source_type of this Payment.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this Payment.

        The source type for this payment.  Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `CASH`, or `EXTERNAL`.

        :param source_type: The source_type of this Payment.
        :type source_type: str
        """
        if source_type is not None and len(source_type) > 50:
            raise ValueError("Invalid value for `source_type`, length must be less than or equal to `50`")

        self._source_type = source_type

    @property
    def statement_description_identifier(self):
        """Gets the statement_description_identifier of this Payment.

        Additional payment information that gets added to the customer's card statement as part of the statement description.  Note that the `statement_description_identifier` might get truncated on the statement description to fit the required information including the Square identifier (SQ *) and the name of the seller taking the payment.

        :return: The statement_description_identifier of this Payment.
        :rtype: str
        """
        return self._statement_description_identifier

    @statement_description_identifier.setter
    def statement_description_identifier(self, statement_description_identifier):
        """Sets the statement_description_identifier of this Payment.

        Additional payment information that gets added to the customer's card statement as part of the statement description.  Note that the `statement_description_identifier` might get truncated on the statement description to fit the required information including the Square identifier (SQ *) and the name of the seller taking the payment.

        :param statement_description_identifier: The statement_description_identifier of this Payment.
        :type statement_description_identifier: str
        """

        self._statement_description_identifier = statement_description_identifier

    @property
    def status(self):
        """Gets the status of this Payment.

        Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or FAILED.

        :return: The status of this Payment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Payment.

        Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or FAILED.

        :param status: The status of this Payment.
        :type status: str
        """
        if status is not None and len(status) > 50:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `50`")

        self._status = status

    @property
    def tip_money(self):
        """Gets the tip_money of this Payment.


        :return: The tip_money of this Payment.
        :rtype: Money
        """
        return self._tip_money

    @tip_money.setter
    def tip_money(self, tip_money):
        """Sets the tip_money of this Payment.


        :param tip_money: The tip_money of this Payment.
        :type tip_money: Money
        """

        self._tip_money = tip_money

    @property
    def total_money(self):
        """Gets the total_money of this Payment.


        :return: The total_money of this Payment.
        :rtype: Money
        """
        return self._total_money

    @total_money.setter
    def total_money(self, total_money):
        """Sets the total_money of this Payment.


        :param total_money: The total_money of this Payment.
        :type total_money: Money
        """

        self._total_money = total_money

    @property
    def updated_at(self):
        """Gets the updated_at of this Payment.

        The timestamp of when the payment was last updated, in RFC 3339 format.

        :return: The updated_at of this Payment.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Payment.

        The timestamp of when the payment was last updated, in RFC 3339 format.

        :param updated_at: The updated_at of this Payment.
        :type updated_at: str
        """
        if updated_at is not None and len(updated_at) > 32:
            raise ValueError("Invalid value for `updated_at`, length must be less than or equal to `32`")

        self._updated_at = updated_at

    @property
    def version_token(self):
        """Gets the version_token of this Payment.

        Used for optimistic concurrency. This opaque token identifies a specific version of the `Payment` object.

        :return: The version_token of this Payment.
        :rtype: str
        """
        return self._version_token

    @version_token.setter
    def version_token(self, version_token):
        """Sets the version_token of this Payment.

        Used for optimistic concurrency. This opaque token identifies a specific version of the `Payment` object.

        :param version_token: The version_token of this Payment.
        :type version_token: str
        """

        self._version_token = version_token

    @property
    def wallet_details(self):
        """Gets the wallet_details of this Payment.


        :return: The wallet_details of this Payment.
        :rtype: DigitalWalletDetails
        """
        return self._wallet_details

    @wallet_details.setter
    def wallet_details(self, wallet_details):
        """Sets the wallet_details of this Payment.


        :param wallet_details: The wallet_details of this Payment.
        :type wallet_details: DigitalWalletDetails
        """

        self._wallet_details = wallet_details
