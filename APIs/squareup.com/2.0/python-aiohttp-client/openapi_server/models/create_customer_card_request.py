# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util


class CreateCustomerCardRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: Address=None, card_nonce: str=None, cardholder_name: str=None, verification_token: str=None):
        """CreateCustomerCardRequest - a model defined in OpenAPI

        :param billing_address: The billing_address of this CreateCustomerCardRequest.
        :param card_nonce: The card_nonce of this CreateCustomerCardRequest.
        :param cardholder_name: The cardholder_name of this CreateCustomerCardRequest.
        :param verification_token: The verification_token of this CreateCustomerCardRequest.
        """
        self.openapi_types = {
            'billing_address': Address,
            'card_nonce': str,
            'cardholder_name': str,
            'verification_token': str
        }

        self.attribute_map = {
            'billing_address': 'billing_address',
            'card_nonce': 'card_nonce',
            'cardholder_name': 'cardholder_name',
            'verification_token': 'verification_token'
        }

        self._billing_address = billing_address
        self._card_nonce = card_nonce
        self._cardholder_name = cardholder_name
        self._verification_token = verification_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCustomerCardRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCustomerCardRequest of this CreateCustomerCardRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this CreateCustomerCardRequest.


        :return: The billing_address of this CreateCustomerCardRequest.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CreateCustomerCardRequest.


        :param billing_address: The billing_address of this CreateCustomerCardRequest.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def card_nonce(self):
        """Gets the card_nonce of this CreateCustomerCardRequest.

        A card nonce representing the credit card to link to the customer.  Card nonces are generated by the Square payment form when customers enter their card information. For more information, see [Walkthrough: Integrate Square Payments in a Website](https://developer.squareup.com/docs/web-payments/take-card-payment).  __NOTE:__ Card nonces generated by digital wallets (such as Apple Pay) cannot be used to create a customer card.

        :return: The card_nonce of this CreateCustomerCardRequest.
        :rtype: str
        """
        return self._card_nonce

    @card_nonce.setter
    def card_nonce(self, card_nonce):
        """Sets the card_nonce of this CreateCustomerCardRequest.

        A card nonce representing the credit card to link to the customer.  Card nonces are generated by the Square payment form when customers enter their card information. For more information, see [Walkthrough: Integrate Square Payments in a Website](https://developer.squareup.com/docs/web-payments/take-card-payment).  __NOTE:__ Card nonces generated by digital wallets (such as Apple Pay) cannot be used to create a customer card.

        :param card_nonce: The card_nonce of this CreateCustomerCardRequest.
        :type card_nonce: str
        """
        if card_nonce is None:
            raise ValueError("Invalid value for `card_nonce`, must not be `None`")

        self._card_nonce = card_nonce

    @property
    def cardholder_name(self):
        """Gets the cardholder_name of this CreateCustomerCardRequest.

        The full name printed on the credit card.

        :return: The cardholder_name of this CreateCustomerCardRequest.
        :rtype: str
        """
        return self._cardholder_name

    @cardholder_name.setter
    def cardholder_name(self, cardholder_name):
        """Sets the cardholder_name of this CreateCustomerCardRequest.

        The full name printed on the credit card.

        :param cardholder_name: The cardholder_name of this CreateCustomerCardRequest.
        :type cardholder_name: str
        """

        self._cardholder_name = cardholder_name

    @property
    def verification_token(self):
        """Gets the verification_token of this CreateCustomerCardRequest.

        An identifying token generated by [Payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer). Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.

        :return: The verification_token of this CreateCustomerCardRequest.
        :rtype: str
        """
        return self._verification_token

    @verification_token.setter
    def verification_token(self, verification_token):
        """Sets the verification_token of this CreateCustomerCardRequest.

        An identifying token generated by [Payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer). Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.

        :param verification_token: The verification_token of this CreateCustomerCardRequest.
        :type verification_token: str
        """

        self._verification_token = verification_token
