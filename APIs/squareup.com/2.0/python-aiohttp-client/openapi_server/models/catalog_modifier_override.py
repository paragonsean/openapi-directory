# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogModifierOverride(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, modifier_id: str=None, on_by_default: bool=None):
        """CatalogModifierOverride - a model defined in OpenAPI

        :param modifier_id: The modifier_id of this CatalogModifierOverride.
        :param on_by_default: The on_by_default of this CatalogModifierOverride.
        """
        self.openapi_types = {
            'modifier_id': str,
            'on_by_default': bool
        }

        self.attribute_map = {
            'modifier_id': 'modifier_id',
            'on_by_default': 'on_by_default'
        }

        self._modifier_id = modifier_id
        self._on_by_default = on_by_default

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogModifierOverride':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogModifierOverride of this CatalogModifierOverride.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def modifier_id(self):
        """Gets the modifier_id of this CatalogModifierOverride.

        The ID of the `CatalogModifier` whose default behavior is being overridden.

        :return: The modifier_id of this CatalogModifierOverride.
        :rtype: str
        """
        return self._modifier_id

    @modifier_id.setter
    def modifier_id(self, modifier_id):
        """Sets the modifier_id of this CatalogModifierOverride.

        The ID of the `CatalogModifier` whose default behavior is being overridden.

        :param modifier_id: The modifier_id of this CatalogModifierOverride.
        :type modifier_id: str
        """
        if modifier_id is None:
            raise ValueError("Invalid value for `modifier_id`, must not be `None`")
        if modifier_id is not None and len(modifier_id) < 1:
            raise ValueError("Invalid value for `modifier_id`, length must be greater than or equal to `1`")

        self._modifier_id = modifier_id

    @property
    def on_by_default(self):
        """Gets the on_by_default of this CatalogModifierOverride.

        If `true`, this `CatalogModifier` should be selected by default for this `CatalogItem`.

        :return: The on_by_default of this CatalogModifierOverride.
        :rtype: bool
        """
        return self._on_by_default

    @on_by_default.setter
    def on_by_default(self, on_by_default):
        """Sets the on_by_default of this CatalogModifierOverride.

        If `true`, this `CatalogModifier` should be selected by default for this `CatalogItem`.

        :param on_by_default: The on_by_default of this CatalogModifierOverride.
        :type on_by_default: bool
        """

        self._on_by_default = on_by_default
