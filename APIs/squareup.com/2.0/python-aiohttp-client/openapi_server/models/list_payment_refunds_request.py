# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListPaymentRefundsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_time: str=None, cursor: str=None, end_time: str=None, limit: int=None, location_id: str=None, sort_order: str=None, source_type: str=None, status: str=None):
        """ListPaymentRefundsRequest - a model defined in OpenAPI

        :param begin_time: The begin_time of this ListPaymentRefundsRequest.
        :param cursor: The cursor of this ListPaymentRefundsRequest.
        :param end_time: The end_time of this ListPaymentRefundsRequest.
        :param limit: The limit of this ListPaymentRefundsRequest.
        :param location_id: The location_id of this ListPaymentRefundsRequest.
        :param sort_order: The sort_order of this ListPaymentRefundsRequest.
        :param source_type: The source_type of this ListPaymentRefundsRequest.
        :param status: The status of this ListPaymentRefundsRequest.
        """
        self.openapi_types = {
            'begin_time': str,
            'cursor': str,
            'end_time': str,
            'limit': int,
            'location_id': str,
            'sort_order': str,
            'source_type': str,
            'status': str
        }

        self.attribute_map = {
            'begin_time': 'begin_time',
            'cursor': 'cursor',
            'end_time': 'end_time',
            'limit': 'limit',
            'location_id': 'location_id',
            'sort_order': 'sort_order',
            'source_type': 'source_type',
            'status': 'status'
        }

        self._begin_time = begin_time
        self._cursor = cursor
        self._end_time = end_time
        self._limit = limit
        self._location_id = location_id
        self._sort_order = sort_order
        self._source_type = source_type
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListPaymentRefundsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListPaymentRefundsRequest of this ListPaymentRefundsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_time(self):
        """Gets the begin_time of this ListPaymentRefundsRequest.

        The timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year.

        :return: The begin_time of this ListPaymentRefundsRequest.
        :rtype: str
        """
        return self._begin_time

    @begin_time.setter
    def begin_time(self, begin_time):
        """Sets the begin_time of this ListPaymentRefundsRequest.

        The timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year.

        :param begin_time: The begin_time of this ListPaymentRefundsRequest.
        :type begin_time: str
        """

        self._begin_time = begin_time

    @property
    def cursor(self):
        """Gets the cursor of this ListPaymentRefundsRequest.

        A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).

        :return: The cursor of this ListPaymentRefundsRequest.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this ListPaymentRefundsRequest.

        A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).

        :param cursor: The cursor of this ListPaymentRefundsRequest.
        :type cursor: str
        """

        self._cursor = cursor

    @property
    def end_time(self):
        """Gets the end_time of this ListPaymentRefundsRequest.

        The timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time.

        :return: The end_time of this ListPaymentRefundsRequest.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ListPaymentRefundsRequest.

        The timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time.

        :param end_time: The end_time of this ListPaymentRefundsRequest.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def limit(self):
        """Gets the limit of this ListPaymentRefundsRequest.

        The maximum number of results to be returned in a single page.  It is possible to receive fewer results than the specified limit on a given page.  If the supplied value is greater than 100, no more than 100 results are returned.  Default: 100

        :return: The limit of this ListPaymentRefundsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListPaymentRefundsRequest.

        The maximum number of results to be returned in a single page.  It is possible to receive fewer results than the specified limit on a given page.  If the supplied value is greater than 100, no more than 100 results are returned.  Default: 100

        :param limit: The limit of this ListPaymentRefundsRequest.
        :type limit: int
        """

        self._limit = limit

    @property
    def location_id(self):
        """Gets the location_id of this ListPaymentRefundsRequest.

        Limit results to the location supplied. By default, results are returned for all locations associated with the seller.

        :return: The location_id of this ListPaymentRefundsRequest.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ListPaymentRefundsRequest.

        Limit results to the location supplied. By default, results are returned for all locations associated with the seller.

        :param location_id: The location_id of this ListPaymentRefundsRequest.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def sort_order(self):
        """Gets the sort_order of this ListPaymentRefundsRequest.

        The order in which results are listed: - `ASC` - Oldest to newest. - `DESC` - Newest to oldest (default).

        :return: The sort_order of this ListPaymentRefundsRequest.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ListPaymentRefundsRequest.

        The order in which results are listed: - `ASC` - Oldest to newest. - `DESC` - Newest to oldest (default).

        :param sort_order: The sort_order of this ListPaymentRefundsRequest.
        :type sort_order: str
        """

        self._sort_order = sort_order

    @property
    def source_type(self):
        """Gets the source_type of this ListPaymentRefundsRequest.

        If provided, only refunds with the given source type are returned. - `CARD` - List refunds only for payments where `CARD` was specified as the payment source.  Default: If omitted, refunds are returned regardless of the source type.

        :return: The source_type of this ListPaymentRefundsRequest.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this ListPaymentRefundsRequest.

        If provided, only refunds with the given source type are returned. - `CARD` - List refunds only for payments where `CARD` was specified as the payment source.  Default: If omitted, refunds are returned regardless of the source type.

        :param source_type: The source_type of this ListPaymentRefundsRequest.
        :type source_type: str
        """

        self._source_type = source_type

    @property
    def status(self):
        """Gets the status of this ListPaymentRefundsRequest.

        If provided, only refunds with the given status are returned. For a list of refund status values, see [PaymentRefund](https://developer.squareup.com/reference/square_2021-08-18/objects/PaymentRefund).  Default: If omitted, refunds are returned regardless of their status.

        :return: The status of this ListPaymentRefundsRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ListPaymentRefundsRequest.

        If provided, only refunds with the given status are returned. For a list of refund status values, see [PaymentRefund](https://developer.squareup.com/reference/square_2021-08-18/objects/PaymentRefund).  Default: If omitted, refunds are returned regardless of their status.

        :param status: The status of this ListPaymentRefundsRequest.
        :type status: str
        """

        self._status = status
