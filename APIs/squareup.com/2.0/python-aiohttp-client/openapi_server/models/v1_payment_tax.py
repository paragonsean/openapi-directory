# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server.models.v1_money import V1Money
from openapi_server import util


class V1PaymentTax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_money: V1Money=None, errors: List[Error]=None, fee_id: str=None, inclusion_type: str=None, name: str=None, rate: str=None):
        """V1PaymentTax - a model defined in OpenAPI

        :param applied_money: The applied_money of this V1PaymentTax.
        :param errors: The errors of this V1PaymentTax.
        :param fee_id: The fee_id of this V1PaymentTax.
        :param inclusion_type: The inclusion_type of this V1PaymentTax.
        :param name: The name of this V1PaymentTax.
        :param rate: The rate of this V1PaymentTax.
        """
        self.openapi_types = {
            'applied_money': V1Money,
            'errors': List[Error],
            'fee_id': str,
            'inclusion_type': str,
            'name': str,
            'rate': str
        }

        self.attribute_map = {
            'applied_money': 'applied_money',
            'errors': 'errors',
            'fee_id': 'fee_id',
            'inclusion_type': 'inclusion_type',
            'name': 'name',
            'rate': 'rate'
        }

        self._applied_money = applied_money
        self._errors = errors
        self._fee_id = fee_id
        self._inclusion_type = inclusion_type
        self._name = name
        self._rate = rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V1PaymentTax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V1PaymentTax of this V1PaymentTax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_money(self):
        """Gets the applied_money of this V1PaymentTax.


        :return: The applied_money of this V1PaymentTax.
        :rtype: V1Money
        """
        return self._applied_money

    @applied_money.setter
    def applied_money(self, applied_money):
        """Sets the applied_money of this V1PaymentTax.


        :param applied_money: The applied_money of this V1PaymentTax.
        :type applied_money: V1Money
        """

        self._applied_money = applied_money

    @property
    def errors(self):
        """Gets the errors of this V1PaymentTax.

        Any errors that occurred during the request.

        :return: The errors of this V1PaymentTax.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this V1PaymentTax.

        Any errors that occurred during the request.

        :param errors: The errors of this V1PaymentTax.
        :type errors: List[Error]
        """

        self._errors = errors

    @property
    def fee_id(self):
        """Gets the fee_id of this V1PaymentTax.

        The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.

        :return: The fee_id of this V1PaymentTax.
        :rtype: str
        """
        return self._fee_id

    @fee_id.setter
    def fee_id(self, fee_id):
        """Sets the fee_id of this V1PaymentTax.

        The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.

        :param fee_id: The fee_id of this V1PaymentTax.
        :type fee_id: str
        """

        self._fee_id = fee_id

    @property
    def inclusion_type(self):
        """Gets the inclusion_type of this V1PaymentTax.

        Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.

        :return: The inclusion_type of this V1PaymentTax.
        :rtype: str
        """
        return self._inclusion_type

    @inclusion_type.setter
    def inclusion_type(self, inclusion_type):
        """Sets the inclusion_type of this V1PaymentTax.

        Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.

        :param inclusion_type: The inclusion_type of this V1PaymentTax.
        :type inclusion_type: str
        """

        self._inclusion_type = inclusion_type

    @property
    def name(self):
        """Gets the name of this V1PaymentTax.

        The merchant-defined name of the tax.

        :return: The name of this V1PaymentTax.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1PaymentTax.

        The merchant-defined name of the tax.

        :param name: The name of this V1PaymentTax.
        :type name: str
        """

        self._name = name

    @property
    def rate(self):
        """Gets the rate of this V1PaymentTax.

        The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.

        :return: The rate of this V1PaymentTax.
        :rtype: str
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this V1PaymentTax.

        The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.

        :param rate: The rate of this V1PaymentTax.
        :type rate: str
        """

        self._rate = rate
