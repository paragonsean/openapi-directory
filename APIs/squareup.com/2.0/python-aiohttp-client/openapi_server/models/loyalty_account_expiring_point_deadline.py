# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoyaltyAccountExpiringPointDeadline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expires_at: str=None, points: int=None):
        """LoyaltyAccountExpiringPointDeadline - a model defined in OpenAPI

        :param expires_at: The expires_at of this LoyaltyAccountExpiringPointDeadline.
        :param points: The points of this LoyaltyAccountExpiringPointDeadline.
        """
        self.openapi_types = {
            'expires_at': str,
            'points': int
        }

        self.attribute_map = {
            'expires_at': 'expires_at',
            'points': 'points'
        }

        self._expires_at = expires_at
        self._points = points

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyAccountExpiringPointDeadline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyAccountExpiringPointDeadline of this LoyaltyAccountExpiringPointDeadline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires_at(self):
        """Gets the expires_at of this LoyaltyAccountExpiringPointDeadline.

        The timestamp of when the points are scheduled to expire, in RFC 3339 format.

        :return: The expires_at of this LoyaltyAccountExpiringPointDeadline.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this LoyaltyAccountExpiringPointDeadline.

        The timestamp of when the points are scheduled to expire, in RFC 3339 format.

        :param expires_at: The expires_at of this LoyaltyAccountExpiringPointDeadline.
        :type expires_at: str
        """
        if expires_at is None:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")
        if expires_at is not None and len(expires_at) < 1:
            raise ValueError("Invalid value for `expires_at`, length must be greater than or equal to `1`")

        self._expires_at = expires_at

    @property
    def points(self):
        """Gets the points of this LoyaltyAccountExpiringPointDeadline.

        The number of points scheduled to expire at the `expires_at` timestamp.

        :return: The points of this LoyaltyAccountExpiringPointDeadline.
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this LoyaltyAccountExpiringPointDeadline.

        The number of points scheduled to expire at the `expires_at` timestamp.

        :param points: The points of this LoyaltyAccountExpiringPointDeadline.
        :type points: int
        """
        if points is None:
            raise ValueError("Invalid value for `points`, must not be `None`")

        self._points = points
