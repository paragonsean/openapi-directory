# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_custom_attribute_definition_selection_config_custom_attribute_selection import CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection
from openapi_server import util


class CatalogCustomAttributeDefinitionSelectionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_selections: List[CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection]=None, max_allowed_selections: int=None):
        """CatalogCustomAttributeDefinitionSelectionConfig - a model defined in OpenAPI

        :param allowed_selections: The allowed_selections of this CatalogCustomAttributeDefinitionSelectionConfig.
        :param max_allowed_selections: The max_allowed_selections of this CatalogCustomAttributeDefinitionSelectionConfig.
        """
        self.openapi_types = {
            'allowed_selections': List[CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection],
            'max_allowed_selections': int
        }

        self.attribute_map = {
            'allowed_selections': 'allowed_selections',
            'max_allowed_selections': 'max_allowed_selections'
        }

        self._allowed_selections = allowed_selections
        self._max_allowed_selections = max_allowed_selections

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogCustomAttributeDefinitionSelectionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogCustomAttributeDefinitionSelectionConfig of this CatalogCustomAttributeDefinitionSelectionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_selections(self):
        """Gets the allowed_selections of this CatalogCustomAttributeDefinitionSelectionConfig.

        The set of valid `CatalogCustomAttributeSelections`. Up to a maximum of 100 selections can be defined. Can be modified.

        :return: The allowed_selections of this CatalogCustomAttributeDefinitionSelectionConfig.
        :rtype: List[CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection]
        """
        return self._allowed_selections

    @allowed_selections.setter
    def allowed_selections(self, allowed_selections):
        """Sets the allowed_selections of this CatalogCustomAttributeDefinitionSelectionConfig.

        The set of valid `CatalogCustomAttributeSelections`. Up to a maximum of 100 selections can be defined. Can be modified.

        :param allowed_selections: The allowed_selections of this CatalogCustomAttributeDefinitionSelectionConfig.
        :type allowed_selections: List[CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection]
        """

        self._allowed_selections = allowed_selections

    @property
    def max_allowed_selections(self):
        """Gets the max_allowed_selections of this CatalogCustomAttributeDefinitionSelectionConfig.

        The maximum number of selections that can be set. The maximum value for this attribute is 100. The default value is 1. The value can be modified, but changing the value will not affect existing custom attribute values on objects. Clients need to handle custom attributes with more selected values than allowed by this limit.

        :return: The max_allowed_selections of this CatalogCustomAttributeDefinitionSelectionConfig.
        :rtype: int
        """
        return self._max_allowed_selections

    @max_allowed_selections.setter
    def max_allowed_selections(self, max_allowed_selections):
        """Sets the max_allowed_selections of this CatalogCustomAttributeDefinitionSelectionConfig.

        The maximum number of selections that can be set. The maximum value for this attribute is 100. The default value is 1. The value can be modified, but changing the value will not affect existing custom attribute values on objects. Clients need to handle custom attributes with more selected values than allowed by this limit.

        :param max_allowed_selections: The max_allowed_selections of this CatalogCustomAttributeDefinitionSelectionConfig.
        :type max_allowed_selections: int
        """
        if max_allowed_selections is not None and max_allowed_selections > 100:
            raise ValueError("Invalid value for `max_allowed_selections`, must be a value less than or equal to `100`")

        self._max_allowed_selections = max_allowed_selections
