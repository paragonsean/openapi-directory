# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.measurement_unit import MeasurementUnit
from openapi_server import util


class OrderQuantityUnit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_version: int=None, measurement_unit: MeasurementUnit=None, precision: int=None):
        """OrderQuantityUnit - a model defined in OpenAPI

        :param catalog_version: The catalog_version of this OrderQuantityUnit.
        :param measurement_unit: The measurement_unit of this OrderQuantityUnit.
        :param precision: The precision of this OrderQuantityUnit.
        """
        self.openapi_types = {
            'catalog_version': int,
            'measurement_unit': MeasurementUnit,
            'precision': int
        }

        self.attribute_map = {
            'catalog_version': 'catalog_version',
            'measurement_unit': 'measurement_unit',
            'precision': 'precision'
        }

        self._catalog_version = catalog_version
        self._measurement_unit = measurement_unit
        self._precision = precision

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderQuantityUnit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderQuantityUnit of this OrderQuantityUnit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_version(self):
        """Gets the catalog_version of this OrderQuantityUnit.

        The version of the catalog object that this measurement unit references.  This field is set when this is a catalog-backed measurement unit.

        :return: The catalog_version of this OrderQuantityUnit.
        :rtype: int
        """
        return self._catalog_version

    @catalog_version.setter
    def catalog_version(self, catalog_version):
        """Sets the catalog_version of this OrderQuantityUnit.

        The version of the catalog object that this measurement unit references.  This field is set when this is a catalog-backed measurement unit.

        :param catalog_version: The catalog_version of this OrderQuantityUnit.
        :type catalog_version: int
        """

        self._catalog_version = catalog_version

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this OrderQuantityUnit.


        :return: The measurement_unit of this OrderQuantityUnit.
        :rtype: MeasurementUnit
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this OrderQuantityUnit.


        :param measurement_unit: The measurement_unit of this OrderQuantityUnit.
        :type measurement_unit: MeasurementUnit
        """

        self._measurement_unit = measurement_unit

    @property
    def precision(self):
        """Gets the precision of this OrderQuantityUnit.

        For non-integer quantities, represents the number of digits after the decimal point that are recorded for this quantity.  For example, a precision of 1 allows quantities such as `\"1.0\"` and `\"1.1\"`, but not `\"1.01\"`.  Min: 0. Max: 5.

        :return: The precision of this OrderQuantityUnit.
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this OrderQuantityUnit.

        For non-integer quantities, represents the number of digits after the decimal point that are recorded for this quantity.  For example, a precision of 1 allows quantities such as `\"1.0\"` and `\"1.1\"`, but not `\"1.01\"`.  Min: 0. Max: 5.

        :param precision: The precision of this OrderQuantityUnit.
        :type precision: int
        """

        self._precision = precision
