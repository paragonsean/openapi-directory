# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order import Order
from openapi_server import util


class UpdateOrderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields_to_clear: List[str]=None, idempotency_key: str=None, order: Order=None):
        """UpdateOrderRequest - a model defined in OpenAPI

        :param fields_to_clear: The fields_to_clear of this UpdateOrderRequest.
        :param idempotency_key: The idempotency_key of this UpdateOrderRequest.
        :param order: The order of this UpdateOrderRequest.
        """
        self.openapi_types = {
            'fields_to_clear': List[str],
            'idempotency_key': str,
            'order': Order
        }

        self.attribute_map = {
            'fields_to_clear': 'fields_to_clear',
            'idempotency_key': 'idempotency_key',
            'order': 'order'
        }

        self._fields_to_clear = fields_to_clear
        self._idempotency_key = idempotency_key
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateOrderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateOrderRequest of this UpdateOrderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields_to_clear(self):
        """Gets the fields_to_clear of this UpdateOrderRequest.

        The [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation) fields to clear. For example, `line_items[uid].note`. For more information, see [Deleting fields](https://developer.squareup.com/docs/orders-api/manage-orders#delete-fields).

        :return: The fields_to_clear of this UpdateOrderRequest.
        :rtype: List[str]
        """
        return self._fields_to_clear

    @fields_to_clear.setter
    def fields_to_clear(self, fields_to_clear):
        """Sets the fields_to_clear of this UpdateOrderRequest.

        The [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation) fields to clear. For example, `line_items[uid].note`. For more information, see [Deleting fields](https://developer.squareup.com/docs/orders-api/manage-orders#delete-fields).

        :param fields_to_clear: The fields_to_clear of this UpdateOrderRequest.
        :type fields_to_clear: List[str]
        """

        self._fields_to_clear = fields_to_clear

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this UpdateOrderRequest.

        A value you specify that uniquely identifies this update request.  If you are unsure whether a particular update was applied to an order successfully, you can reattempt it with the same idempotency key without worrying about creating duplicate updates to the order. The latest order version is returned.  For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).

        :return: The idempotency_key of this UpdateOrderRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this UpdateOrderRequest.

        A value you specify that uniquely identifies this update request.  If you are unsure whether a particular update was applied to an order successfully, you can reattempt it with the same idempotency key without worrying about creating duplicate updates to the order. The latest order version is returned.  For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).

        :param idempotency_key: The idempotency_key of this UpdateOrderRequest.
        :type idempotency_key: str
        """
        if idempotency_key is not None and len(idempotency_key) > 192:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `192`")

        self._idempotency_key = idempotency_key

    @property
    def order(self):
        """Gets the order of this UpdateOrderRequest.


        :return: The order of this UpdateOrderRequest.
        :rtype: Order
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this UpdateOrderRequest.


        :param order: The order of this UpdateOrderRequest.
        :type order: Order
        """

        self._order = order
