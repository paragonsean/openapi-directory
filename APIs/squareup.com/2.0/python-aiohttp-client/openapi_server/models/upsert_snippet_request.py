# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.snippet import Snippet
from openapi_server import util


class UpsertSnippetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, snippet: Snippet=None):
        """UpsertSnippetRequest - a model defined in OpenAPI

        :param snippet: The snippet of this UpsertSnippetRequest.
        """
        self.openapi_types = {
            'snippet': Snippet
        }

        self.attribute_map = {
            'snippet': 'snippet'
        }

        self._snippet = snippet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpsertSnippetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpsertSnippetRequest of this UpsertSnippetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def snippet(self):
        """Gets the snippet of this UpsertSnippetRequest.


        :return: The snippet of this UpsertSnippetRequest.
        :rtype: Snippet
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this UpsertSnippetRequest.


        :param snippet: The snippet of this UpsertSnippetRequest.
        :type snippet: Snippet
        """
        if snippet is None:
            raise ValueError("Invalid value for `snippet`, must not be `None`")

        self._snippet = snippet
