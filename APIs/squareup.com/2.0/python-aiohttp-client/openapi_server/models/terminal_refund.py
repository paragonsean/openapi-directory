# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class TerminalRefund(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: Money=None, app_id: str=None, cancel_reason: str=None, created_at: str=None, deadline_duration: str=None, device_id: str=None, id: str=None, location_id: str=None, order_id: str=None, payment_id: str=None, reason: str=None, refund_id: str=None, status: str=None, updated_at: str=None):
        """TerminalRefund - a model defined in OpenAPI

        :param amount_money: The amount_money of this TerminalRefund.
        :param app_id: The app_id of this TerminalRefund.
        :param cancel_reason: The cancel_reason of this TerminalRefund.
        :param created_at: The created_at of this TerminalRefund.
        :param deadline_duration: The deadline_duration of this TerminalRefund.
        :param device_id: The device_id of this TerminalRefund.
        :param id: The id of this TerminalRefund.
        :param location_id: The location_id of this TerminalRefund.
        :param order_id: The order_id of this TerminalRefund.
        :param payment_id: The payment_id of this TerminalRefund.
        :param reason: The reason of this TerminalRefund.
        :param refund_id: The refund_id of this TerminalRefund.
        :param status: The status of this TerminalRefund.
        :param updated_at: The updated_at of this TerminalRefund.
        """
        self.openapi_types = {
            'amount_money': Money,
            'app_id': str,
            'cancel_reason': str,
            'created_at': str,
            'deadline_duration': str,
            'device_id': str,
            'id': str,
            'location_id': str,
            'order_id': str,
            'payment_id': str,
            'reason': str,
            'refund_id': str,
            'status': str,
            'updated_at': str
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'app_id': 'app_id',
            'cancel_reason': 'cancel_reason',
            'created_at': 'created_at',
            'deadline_duration': 'deadline_duration',
            'device_id': 'device_id',
            'id': 'id',
            'location_id': 'location_id',
            'order_id': 'order_id',
            'payment_id': 'payment_id',
            'reason': 'reason',
            'refund_id': 'refund_id',
            'status': 'status',
            'updated_at': 'updated_at'
        }

        self._amount_money = amount_money
        self._app_id = app_id
        self._cancel_reason = cancel_reason
        self._created_at = created_at
        self._deadline_duration = deadline_duration
        self._device_id = device_id
        self._id = id
        self._location_id = location_id
        self._order_id = order_id
        self._payment_id = payment_id
        self._reason = reason
        self._refund_id = refund_id
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TerminalRefund':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TerminalRefund of this TerminalRefund.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this TerminalRefund.


        :return: The amount_money of this TerminalRefund.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this TerminalRefund.


        :param amount_money: The amount_money of this TerminalRefund.
        :type amount_money: Money
        """
        if amount_money is None:
            raise ValueError("Invalid value for `amount_money`, must not be `None`")

        self._amount_money = amount_money

    @property
    def app_id(self):
        """Gets the app_id of this TerminalRefund.

        The ID of the application that created the refund.

        :return: The app_id of this TerminalRefund.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this TerminalRefund.

        The ID of the application that created the refund.

        :param app_id: The app_id of this TerminalRefund.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def cancel_reason(self):
        """Gets the cancel_reason of this TerminalRefund.

        Present if the status is `CANCELED`.

        :return: The cancel_reason of this TerminalRefund.
        :rtype: str
        """
        return self._cancel_reason

    @cancel_reason.setter
    def cancel_reason(self, cancel_reason):
        """Sets the cancel_reason of this TerminalRefund.

        Present if the status is `CANCELED`.

        :param cancel_reason: The cancel_reason of this TerminalRefund.
        :type cancel_reason: str
        """

        self._cancel_reason = cancel_reason

    @property
    def created_at(self):
        """Gets the created_at of this TerminalRefund.

        The time when the `TerminalRefund` was created, as an RFC 3339 timestamp.

        :return: The created_at of this TerminalRefund.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TerminalRefund.

        The time when the `TerminalRefund` was created, as an RFC 3339 timestamp.

        :param created_at: The created_at of this TerminalRefund.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def deadline_duration(self):
        """Gets the deadline_duration of this TerminalRefund.

        The RFC 3339 duration, after which the refund is automatically canceled. A `TerminalRefund` that is `PENDING` is automatically `CANCELED` and has a cancellation reason of `TIMED_OUT`.  Default: 5 minutes from creation.  Maximum: 5 minutes

        :return: The deadline_duration of this TerminalRefund.
        :rtype: str
        """
        return self._deadline_duration

    @deadline_duration.setter
    def deadline_duration(self, deadline_duration):
        """Sets the deadline_duration of this TerminalRefund.

        The RFC 3339 duration, after which the refund is automatically canceled. A `TerminalRefund` that is `PENDING` is automatically `CANCELED` and has a cancellation reason of `TIMED_OUT`.  Default: 5 minutes from creation.  Maximum: 5 minutes

        :param deadline_duration: The deadline_duration of this TerminalRefund.
        :type deadline_duration: str
        """

        self._deadline_duration = deadline_duration

    @property
    def device_id(self):
        """Gets the device_id of this TerminalRefund.

        The unique ID of the device intended for this `TerminalRefund`. The Id can be retrieved from /v2/devices api.

        :return: The device_id of this TerminalRefund.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this TerminalRefund.

        The unique ID of the device intended for this `TerminalRefund`. The Id can be retrieved from /v2/devices api.

        :param device_id: The device_id of this TerminalRefund.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def id(self):
        """Gets the id of this TerminalRefund.

        A unique ID for this `TerminalRefund`.

        :return: The id of this TerminalRefund.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TerminalRefund.

        A unique ID for this `TerminalRefund`.

        :param id: The id of this TerminalRefund.
        :type id: str
        """
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")
        if id is not None and len(id) < 10:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `10`")

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this TerminalRefund.

        The location of the device where the `TerminalRefund` was directed.

        :return: The location_id of this TerminalRefund.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this TerminalRefund.

        The location of the device where the `TerminalRefund` was directed.

        :param location_id: The location_id of this TerminalRefund.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def order_id(self):
        """Gets the order_id of this TerminalRefund.

        The reference to the Square order ID for the payment identified by the `payment_id`.

        :return: The order_id of this TerminalRefund.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this TerminalRefund.

        The reference to the Square order ID for the payment identified by the `payment_id`.

        :param order_id: The order_id of this TerminalRefund.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def payment_id(self):
        """Gets the payment_id of this TerminalRefund.

        The unique ID of the payment being refunded.

        :return: The payment_id of this TerminalRefund.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this TerminalRefund.

        The unique ID of the payment being refunded.

        :param payment_id: The payment_id of this TerminalRefund.
        :type payment_id: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")
        if payment_id is not None and len(payment_id) < 1:
            raise ValueError("Invalid value for `payment_id`, length must be greater than or equal to `1`")

        self._payment_id = payment_id

    @property
    def reason(self):
        """Gets the reason of this TerminalRefund.

        A description of the reason for the refund. Note: maximum 192 characters

        :return: The reason of this TerminalRefund.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this TerminalRefund.

        A description of the reason for the refund. Note: maximum 192 characters

        :param reason: The reason of this TerminalRefund.
        :type reason: str
        """
        if reason is not None and len(reason) > 192:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `192`")

        self._reason = reason

    @property
    def refund_id(self):
        """Gets the refund_id of this TerminalRefund.

        The reference to the payment refund created by completing this `TerminalRefund`.

        :return: The refund_id of this TerminalRefund.
        :rtype: str
        """
        return self._refund_id

    @refund_id.setter
    def refund_id(self, refund_id):
        """Sets the refund_id of this TerminalRefund.

        The reference to the payment refund created by completing this `TerminalRefund`.

        :param refund_id: The refund_id of this TerminalRefund.
        :type refund_id: str
        """

        self._refund_id = refund_id

    @property
    def status(self):
        """Gets the status of this TerminalRefund.

        The status of the `TerminalRefund`. Options: `PENDING`, `IN_PROGRESS`, `CANCELED`, or `COMPLETED`.

        :return: The status of this TerminalRefund.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TerminalRefund.

        The status of the `TerminalRefund`. Options: `PENDING`, `IN_PROGRESS`, `CANCELED`, or `COMPLETED`.

        :param status: The status of this TerminalRefund.
        :type status: str
        """

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this TerminalRefund.

        The time when the `TerminalRefund` was last updated, as an RFC 3339 timestamp.

        :return: The updated_at of this TerminalRefund.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TerminalRefund.

        The time when the `TerminalRefund` was last updated, as an RFC 3339 timestamp.

        :param updated_at: The updated_at of this TerminalRefund.
        :type updated_at: str
        """

        self._updated_at = updated_at
