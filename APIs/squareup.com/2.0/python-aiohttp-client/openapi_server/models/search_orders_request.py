# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_orders_query import SearchOrdersQuery
from openapi_server import util


class SearchOrdersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cursor: str=None, limit: int=None, location_ids: List[str]=None, query: SearchOrdersQuery=None, return_entries: bool=None):
        """SearchOrdersRequest - a model defined in OpenAPI

        :param cursor: The cursor of this SearchOrdersRequest.
        :param limit: The limit of this SearchOrdersRequest.
        :param location_ids: The location_ids of this SearchOrdersRequest.
        :param query: The query of this SearchOrdersRequest.
        :param return_entries: The return_entries of this SearchOrdersRequest.
        """
        self.openapi_types = {
            'cursor': str,
            'limit': int,
            'location_ids': List[str],
            'query': SearchOrdersQuery,
            'return_entries': bool
        }

        self.attribute_map = {
            'cursor': 'cursor',
            'limit': 'limit',
            'location_ids': 'location_ids',
            'query': 'query',
            'return_entries': 'return_entries'
        }

        self._cursor = cursor
        self._limit = limit
        self._location_ids = location_ids
        self._query = query
        self._return_entries = return_entries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchOrdersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchOrdersRequest of this SearchOrdersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cursor(self):
        """Gets the cursor of this SearchOrdersRequest.

        A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for your original query. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).

        :return: The cursor of this SearchOrdersRequest.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this SearchOrdersRequest.

        A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for your original query. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).

        :param cursor: The cursor of this SearchOrdersRequest.
        :type cursor: str
        """

        self._cursor = cursor

    @property
    def limit(self):
        """Gets the limit of this SearchOrdersRequest.

        The maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  Default: `500`

        :return: The limit of this SearchOrdersRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchOrdersRequest.

        The maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  Default: `500`

        :param limit: The limit of this SearchOrdersRequest.
        :type limit: int
        """
        if limit is not None and limit < 1:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")

        self._limit = limit

    @property
    def location_ids(self):
        """Gets the location_ids of this SearchOrdersRequest.

        The location IDs for the orders to query. All locations must belong to the same merchant.  Min: 1 location ID.  Max: 10 location IDs.

        :return: The location_ids of this SearchOrdersRequest.
        :rtype: List[str]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """Sets the location_ids of this SearchOrdersRequest.

        The location IDs for the orders to query. All locations must belong to the same merchant.  Min: 1 location ID.  Max: 10 location IDs.

        :param location_ids: The location_ids of this SearchOrdersRequest.
        :type location_ids: List[str]
        """

        self._location_ids = location_ids

    @property
    def query(self):
        """Gets the query of this SearchOrdersRequest.


        :return: The query of this SearchOrdersRequest.
        :rtype: SearchOrdersQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchOrdersRequest.


        :param query: The query of this SearchOrdersRequest.
        :type query: SearchOrdersQuery
        """

        self._query = query

    @property
    def return_entries(self):
        """Gets the return_entries of this SearchOrdersRequest.

        A Boolean that controls the format of the search results. If `true`, `SearchOrders` returns [OrderEntry](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) objects. If `false`, `SearchOrders` returns complete order objects.  Default: `false`.

        :return: The return_entries of this SearchOrdersRequest.
        :rtype: bool
        """
        return self._return_entries

    @return_entries.setter
    def return_entries(self, return_entries):
        """Sets the return_entries of this SearchOrdersRequest.

        A Boolean that controls the format of the search results. If `true`, `SearchOrders` returns [OrderEntry](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) objects. If `false`, `SearchOrders` returns complete order objects.  Default: `false`.

        :param return_entries: The return_entries of this SearchOrdersRequest.
        :type return_entries: bool
        """

        self._return_entries = return_entries
