# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gift_card_activity import GiftCardActivity
from openapi_server import util


class CreateGiftCardActivityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gift_card_activity: GiftCardActivity=None, idempotency_key: str=None):
        """CreateGiftCardActivityRequest - a model defined in OpenAPI

        :param gift_card_activity: The gift_card_activity of this CreateGiftCardActivityRequest.
        :param idempotency_key: The idempotency_key of this CreateGiftCardActivityRequest.
        """
        self.openapi_types = {
            'gift_card_activity': GiftCardActivity,
            'idempotency_key': str
        }

        self.attribute_map = {
            'gift_card_activity': 'gift_card_activity',
            'idempotency_key': 'idempotency_key'
        }

        self._gift_card_activity = gift_card_activity
        self._idempotency_key = idempotency_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateGiftCardActivityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateGiftCardActivityRequest of this CreateGiftCardActivityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gift_card_activity(self):
        """Gets the gift_card_activity of this CreateGiftCardActivityRequest.


        :return: The gift_card_activity of this CreateGiftCardActivityRequest.
        :rtype: GiftCardActivity
        """
        return self._gift_card_activity

    @gift_card_activity.setter
    def gift_card_activity(self, gift_card_activity):
        """Sets the gift_card_activity of this CreateGiftCardActivityRequest.


        :param gift_card_activity: The gift_card_activity of this CreateGiftCardActivityRequest.
        :type gift_card_activity: GiftCardActivity
        """
        if gift_card_activity is None:
            raise ValueError("Invalid value for `gift_card_activity`, must not be `None`")

        self._gift_card_activity = gift_card_activity

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this CreateGiftCardActivityRequest.

        A unique string that identifies the `CreateGiftCardActivity` request.

        :return: The idempotency_key of this CreateGiftCardActivityRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this CreateGiftCardActivityRequest.

        A unique string that identifies the `CreateGiftCardActivity` request.

        :param idempotency_key: The idempotency_key of this CreateGiftCardActivityRequest.
        :type idempotency_key: str
        """
        if idempotency_key is None:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if idempotency_key is not None and len(idempotency_key) > 128:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `128`")
        if idempotency_key is not None and len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key
