# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchTeamMembersFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location_ids: List[str]=None, status: str=None):
        """SearchTeamMembersFilter - a model defined in OpenAPI

        :param location_ids: The location_ids of this SearchTeamMembersFilter.
        :param status: The status of this SearchTeamMembersFilter.
        """
        self.openapi_types = {
            'location_ids': List[str],
            'status': str
        }

        self.attribute_map = {
            'location_ids': 'location_ids',
            'status': 'status'
        }

        self._location_ids = location_ids
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchTeamMembersFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchTeamMembersFilter of this SearchTeamMembersFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location_ids(self):
        """Gets the location_ids of this SearchTeamMembersFilter.

        When present, filters by team members assigned to the specified locations. When empty, includes team members assigned to any location.

        :return: The location_ids of this SearchTeamMembersFilter.
        :rtype: List[str]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """Sets the location_ids of this SearchTeamMembersFilter.

        When present, filters by team members assigned to the specified locations. When empty, includes team members assigned to any location.

        :param location_ids: The location_ids of this SearchTeamMembersFilter.
        :type location_ids: List[str]
        """

        self._location_ids = location_ids

    @property
    def status(self):
        """Gets the status of this SearchTeamMembersFilter.

        When present, filters by team members who match the given status. When empty, includes team members of all statuses.

        :return: The status of this SearchTeamMembersFilter.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SearchTeamMembersFilter.

        When present, filters by team members who match the given status. When empty, includes team members of all statuses.

        :param status: The status of this SearchTeamMembersFilter.
        :type status: str
        """

        self._status = status
