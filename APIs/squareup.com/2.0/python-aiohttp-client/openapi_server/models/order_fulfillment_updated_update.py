# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderFulfillmentUpdatedUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fulfillment_uid: str=None, new_state: str=None, old_state: str=None):
        """OrderFulfillmentUpdatedUpdate - a model defined in OpenAPI

        :param fulfillment_uid: The fulfillment_uid of this OrderFulfillmentUpdatedUpdate.
        :param new_state: The new_state of this OrderFulfillmentUpdatedUpdate.
        :param old_state: The old_state of this OrderFulfillmentUpdatedUpdate.
        """
        self.openapi_types = {
            'fulfillment_uid': str,
            'new_state': str,
            'old_state': str
        }

        self.attribute_map = {
            'fulfillment_uid': 'fulfillment_uid',
            'new_state': 'new_state',
            'old_state': 'old_state'
        }

        self._fulfillment_uid = fulfillment_uid
        self._new_state = new_state
        self._old_state = old_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderFulfillmentUpdatedUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderFulfillmentUpdatedUpdate of this OrderFulfillmentUpdatedUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fulfillment_uid(self):
        """Gets the fulfillment_uid of this OrderFulfillmentUpdatedUpdate.

        A unique ID that identifies the fulfillment only within this order.

        :return: The fulfillment_uid of this OrderFulfillmentUpdatedUpdate.
        :rtype: str
        """
        return self._fulfillment_uid

    @fulfillment_uid.setter
    def fulfillment_uid(self, fulfillment_uid):
        """Sets the fulfillment_uid of this OrderFulfillmentUpdatedUpdate.

        A unique ID that identifies the fulfillment only within this order.

        :param fulfillment_uid: The fulfillment_uid of this OrderFulfillmentUpdatedUpdate.
        :type fulfillment_uid: str
        """

        self._fulfillment_uid = fulfillment_uid

    @property
    def new_state(self):
        """Gets the new_state of this OrderFulfillmentUpdatedUpdate.

        The state of the fulfillment after the change. The state might be equal to `old_state` if a non-state field was changed on the fulfillment (such as the tracking number).

        :return: The new_state of this OrderFulfillmentUpdatedUpdate.
        :rtype: str
        """
        return self._new_state

    @new_state.setter
    def new_state(self, new_state):
        """Sets the new_state of this OrderFulfillmentUpdatedUpdate.

        The state of the fulfillment after the change. The state might be equal to `old_state` if a non-state field was changed on the fulfillment (such as the tracking number).

        :param new_state: The new_state of this OrderFulfillmentUpdatedUpdate.
        :type new_state: str
        """

        self._new_state = new_state

    @property
    def old_state(self):
        """Gets the old_state of this OrderFulfillmentUpdatedUpdate.

        The state of the fulfillment before the change. The state is not populated if the fulfillment is created with this new `Order` version.

        :return: The old_state of this OrderFulfillmentUpdatedUpdate.
        :rtype: str
        """
        return self._old_state

    @old_state.setter
    def old_state(self, old_state):
        """Sets the old_state of this OrderFulfillmentUpdatedUpdate.

        The state of the fulfillment before the change. The state is not populated if the fulfillment is created with this new `Order` version.

        :param old_state: The old_state of this OrderFulfillmentUpdatedUpdate.
        :type old_state: str
        """

        self._old_state = old_state
