# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.break_type import BreakType
from openapi_server import util


class UpdateBreakTypeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, break_type: BreakType=None):
        """UpdateBreakTypeRequest - a model defined in OpenAPI

        :param break_type: The break_type of this UpdateBreakTypeRequest.
        """
        self.openapi_types = {
            'break_type': BreakType
        }

        self.attribute_map = {
            'break_type': 'break_type'
        }

        self._break_type = break_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateBreakTypeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateBreakTypeRequest of this UpdateBreakTypeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def break_type(self):
        """Gets the break_type of this UpdateBreakTypeRequest.


        :return: The break_type of this UpdateBreakTypeRequest.
        :rtype: BreakType
        """
        return self._break_type

    @break_type.setter
    def break_type(self, break_type):
        """Sets the break_type of this UpdateBreakTypeRequest.


        :param break_type: The break_type of this UpdateBreakTypeRequest.
        :type break_type: BreakType
        """
        if break_type is None:
            raise ValueError("Invalid value for `break_type`, must not be `None`")

        self._break_type = break_type
