# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_object import CatalogObject
from openapi_server import util


class CatalogObjectBatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, objects: List[CatalogObject]=None):
        """CatalogObjectBatch - a model defined in OpenAPI

        :param objects: The objects of this CatalogObjectBatch.
        """
        self.openapi_types = {
            'objects': List[CatalogObject]
        }

        self.attribute_map = {
            'objects': 'objects'
        }

        self._objects = objects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogObjectBatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogObjectBatch of this CatalogObjectBatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def objects(self):
        """Gets the objects of this CatalogObjectBatch.

        A list of CatalogObjects belonging to this batch.

        :return: The objects of this CatalogObjectBatch.
        :rtype: List[CatalogObject]
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """Sets the objects of this CatalogObjectBatch.

        A list of CatalogObjects belonging to this batch.

        :param objects: The objects of this CatalogObjectBatch.
        :type objects: List[CatalogObject]
        """
        if objects is None:
            raise ValueError("Invalid value for `objects`, must not be `None`")

        self._objects = objects
