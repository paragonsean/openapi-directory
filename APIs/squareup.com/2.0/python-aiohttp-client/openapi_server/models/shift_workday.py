# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_range import DateRange
from openapi_server import util


class ShiftWorkday(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_range: DateRange=None, default_timezone: str=None, match_shifts_by: str=None):
        """ShiftWorkday - a model defined in OpenAPI

        :param date_range: The date_range of this ShiftWorkday.
        :param default_timezone: The default_timezone of this ShiftWorkday.
        :param match_shifts_by: The match_shifts_by of this ShiftWorkday.
        """
        self.openapi_types = {
            'date_range': DateRange,
            'default_timezone': str,
            'match_shifts_by': str
        }

        self.attribute_map = {
            'date_range': 'date_range',
            'default_timezone': 'default_timezone',
            'match_shifts_by': 'match_shifts_by'
        }

        self._date_range = date_range
        self._default_timezone = default_timezone
        self._match_shifts_by = match_shifts_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShiftWorkday':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShiftWorkday of this ShiftWorkday.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_range(self):
        """Gets the date_range of this ShiftWorkday.


        :return: The date_range of this ShiftWorkday.
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this ShiftWorkday.


        :param date_range: The date_range of this ShiftWorkday.
        :type date_range: DateRange
        """

        self._date_range = date_range

    @property
    def default_timezone(self):
        """Gets the default_timezone of this ShiftWorkday.

        Location-specific timezones convert workdays to datetime filters. Every location included in the query must have a timezone or this field must be provided as a fallback. Format: the IANA timezone database identifier for the relevant timezone.

        :return: The default_timezone of this ShiftWorkday.
        :rtype: str
        """
        return self._default_timezone

    @default_timezone.setter
    def default_timezone(self, default_timezone):
        """Sets the default_timezone of this ShiftWorkday.

        Location-specific timezones convert workdays to datetime filters. Every location included in the query must have a timezone or this field must be provided as a fallback. Format: the IANA timezone database identifier for the relevant timezone.

        :param default_timezone: The default_timezone of this ShiftWorkday.
        :type default_timezone: str
        """

        self._default_timezone = default_timezone

    @property
    def match_shifts_by(self):
        """Gets the match_shifts_by of this ShiftWorkday.

        The strategy on which the dates are applied.

        :return: The match_shifts_by of this ShiftWorkday.
        :rtype: str
        """
        return self._match_shifts_by

    @match_shifts_by.setter
    def match_shifts_by(self, match_shifts_by):
        """Sets the match_shifts_by of this ShiftWorkday.

        The strategy on which the dates are applied.

        :param match_shifts_by: The match_shifts_by of this ShiftWorkday.
        :type match_shifts_by: str
        """

        self._match_shifts_by = match_shifts_by
