# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.loyalty_event_accumulate_points import LoyaltyEventAccumulatePoints
from openapi_server import util


class AccumulateLoyaltyPointsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accumulate_points: LoyaltyEventAccumulatePoints=None, idempotency_key: str=None, location_id: str=None):
        """AccumulateLoyaltyPointsRequest - a model defined in OpenAPI

        :param accumulate_points: The accumulate_points of this AccumulateLoyaltyPointsRequest.
        :param idempotency_key: The idempotency_key of this AccumulateLoyaltyPointsRequest.
        :param location_id: The location_id of this AccumulateLoyaltyPointsRequest.
        """
        self.openapi_types = {
            'accumulate_points': LoyaltyEventAccumulatePoints,
            'idempotency_key': str,
            'location_id': str
        }

        self.attribute_map = {
            'accumulate_points': 'accumulate_points',
            'idempotency_key': 'idempotency_key',
            'location_id': 'location_id'
        }

        self._accumulate_points = accumulate_points
        self._idempotency_key = idempotency_key
        self._location_id = location_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccumulateLoyaltyPointsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccumulateLoyaltyPointsRequest of this AccumulateLoyaltyPointsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accumulate_points(self):
        """Gets the accumulate_points of this AccumulateLoyaltyPointsRequest.


        :return: The accumulate_points of this AccumulateLoyaltyPointsRequest.
        :rtype: LoyaltyEventAccumulatePoints
        """
        return self._accumulate_points

    @accumulate_points.setter
    def accumulate_points(self, accumulate_points):
        """Sets the accumulate_points of this AccumulateLoyaltyPointsRequest.


        :param accumulate_points: The accumulate_points of this AccumulateLoyaltyPointsRequest.
        :type accumulate_points: LoyaltyEventAccumulatePoints
        """
        if accumulate_points is None:
            raise ValueError("Invalid value for `accumulate_points`, must not be `None`")

        self._accumulate_points = accumulate_points

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this AccumulateLoyaltyPointsRequest.

        A unique string that identifies the `AccumulateLoyaltyPoints` request.  Keys can be any valid string but must be unique for every request.

        :return: The idempotency_key of this AccumulateLoyaltyPointsRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this AccumulateLoyaltyPointsRequest.

        A unique string that identifies the `AccumulateLoyaltyPoints` request.  Keys can be any valid string but must be unique for every request.

        :param idempotency_key: The idempotency_key of this AccumulateLoyaltyPointsRequest.
        :type idempotency_key: str
        """
        if idempotency_key is None:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if idempotency_key is not None and len(idempotency_key) > 128:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `128`")
        if idempotency_key is not None and len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key

    @property
    def location_id(self):
        """Gets the location_id of this AccumulateLoyaltyPointsRequest.

        The [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the purchase was made.

        :return: The location_id of this AccumulateLoyaltyPointsRequest.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this AccumulateLoyaltyPointsRequest.

        The [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the purchase was made.

        :param location_id: The location_id of this AccumulateLoyaltyPointsRequest.
        :type location_id: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")

        self._location_id = location_id
