# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.v1_money import V1Money
from openapi_server.models.v1_payment_discount import V1PaymentDiscount
from openapi_server.models.v1_payment_item_detail import V1PaymentItemDetail
from openapi_server.models.v1_payment_modifier import V1PaymentModifier
from openapi_server.models.v1_payment_tax import V1PaymentTax
from openapi_server import util


class V1PaymentItemization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discount_money: V1Money=None, discounts: List[V1PaymentDiscount]=None, gross_sales_money: V1Money=None, item_detail: V1PaymentItemDetail=None, item_variation_name: str=None, itemization_type: str=None, modifiers: List[V1PaymentModifier]=None, name: str=None, net_sales_money: V1Money=None, notes: str=None, quantity: float=None, single_quantity_money: V1Money=None, taxes: List[V1PaymentTax]=None, total_money: V1Money=None):
        """V1PaymentItemization - a model defined in OpenAPI

        :param discount_money: The discount_money of this V1PaymentItemization.
        :param discounts: The discounts of this V1PaymentItemization.
        :param gross_sales_money: The gross_sales_money of this V1PaymentItemization.
        :param item_detail: The item_detail of this V1PaymentItemization.
        :param item_variation_name: The item_variation_name of this V1PaymentItemization.
        :param itemization_type: The itemization_type of this V1PaymentItemization.
        :param modifiers: The modifiers of this V1PaymentItemization.
        :param name: The name of this V1PaymentItemization.
        :param net_sales_money: The net_sales_money of this V1PaymentItemization.
        :param notes: The notes of this V1PaymentItemization.
        :param quantity: The quantity of this V1PaymentItemization.
        :param single_quantity_money: The single_quantity_money of this V1PaymentItemization.
        :param taxes: The taxes of this V1PaymentItemization.
        :param total_money: The total_money of this V1PaymentItemization.
        """
        self.openapi_types = {
            'discount_money': V1Money,
            'discounts': List[V1PaymentDiscount],
            'gross_sales_money': V1Money,
            'item_detail': V1PaymentItemDetail,
            'item_variation_name': str,
            'itemization_type': str,
            'modifiers': List[V1PaymentModifier],
            'name': str,
            'net_sales_money': V1Money,
            'notes': str,
            'quantity': float,
            'single_quantity_money': V1Money,
            'taxes': List[V1PaymentTax],
            'total_money': V1Money
        }

        self.attribute_map = {
            'discount_money': 'discount_money',
            'discounts': 'discounts',
            'gross_sales_money': 'gross_sales_money',
            'item_detail': 'item_detail',
            'item_variation_name': 'item_variation_name',
            'itemization_type': 'itemization_type',
            'modifiers': 'modifiers',
            'name': 'name',
            'net_sales_money': 'net_sales_money',
            'notes': 'notes',
            'quantity': 'quantity',
            'single_quantity_money': 'single_quantity_money',
            'taxes': 'taxes',
            'total_money': 'total_money'
        }

        self._discount_money = discount_money
        self._discounts = discounts
        self._gross_sales_money = gross_sales_money
        self._item_detail = item_detail
        self._item_variation_name = item_variation_name
        self._itemization_type = itemization_type
        self._modifiers = modifiers
        self._name = name
        self._net_sales_money = net_sales_money
        self._notes = notes
        self._quantity = quantity
        self._single_quantity_money = single_quantity_money
        self._taxes = taxes
        self._total_money = total_money

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V1PaymentItemization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V1PaymentItemization of this V1PaymentItemization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discount_money(self):
        """Gets the discount_money of this V1PaymentItemization.


        :return: The discount_money of this V1PaymentItemization.
        :rtype: V1Money
        """
        return self._discount_money

    @discount_money.setter
    def discount_money(self, discount_money):
        """Sets the discount_money of this V1PaymentItemization.


        :param discount_money: The discount_money of this V1PaymentItemization.
        :type discount_money: V1Money
        """

        self._discount_money = discount_money

    @property
    def discounts(self):
        """Gets the discounts of this V1PaymentItemization.

        All discounts applied to this itemization.

        :return: The discounts of this V1PaymentItemization.
        :rtype: List[V1PaymentDiscount]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this V1PaymentItemization.

        All discounts applied to this itemization.

        :param discounts: The discounts of this V1PaymentItemization.
        :type discounts: List[V1PaymentDiscount]
        """

        self._discounts = discounts

    @property
    def gross_sales_money(self):
        """Gets the gross_sales_money of this V1PaymentItemization.


        :return: The gross_sales_money of this V1PaymentItemization.
        :rtype: V1Money
        """
        return self._gross_sales_money

    @gross_sales_money.setter
    def gross_sales_money(self, gross_sales_money):
        """Sets the gross_sales_money of this V1PaymentItemization.


        :param gross_sales_money: The gross_sales_money of this V1PaymentItemization.
        :type gross_sales_money: V1Money
        """

        self._gross_sales_money = gross_sales_money

    @property
    def item_detail(self):
        """Gets the item_detail of this V1PaymentItemization.


        :return: The item_detail of this V1PaymentItemization.
        :rtype: V1PaymentItemDetail
        """
        return self._item_detail

    @item_detail.setter
    def item_detail(self, item_detail):
        """Sets the item_detail of this V1PaymentItemization.


        :param item_detail: The item_detail of this V1PaymentItemization.
        :type item_detail: V1PaymentItemDetail
        """

        self._item_detail = item_detail

    @property
    def item_variation_name(self):
        """Gets the item_variation_name of this V1PaymentItemization.

        The name of the item variation purchased, if any.

        :return: The item_variation_name of this V1PaymentItemization.
        :rtype: str
        """
        return self._item_variation_name

    @item_variation_name.setter
    def item_variation_name(self, item_variation_name):
        """Sets the item_variation_name of this V1PaymentItemization.

        The name of the item variation purchased, if any.

        :param item_variation_name: The item_variation_name of this V1PaymentItemization.
        :type item_variation_name: str
        """

        self._item_variation_name = item_variation_name

    @property
    def itemization_type(self):
        """Gets the itemization_type of this V1PaymentItemization.

        The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT

        :return: The itemization_type of this V1PaymentItemization.
        :rtype: str
        """
        return self._itemization_type

    @itemization_type.setter
    def itemization_type(self, itemization_type):
        """Sets the itemization_type of this V1PaymentItemization.

        The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT

        :param itemization_type: The itemization_type of this V1PaymentItemization.
        :type itemization_type: str
        """

        self._itemization_type = itemization_type

    @property
    def modifiers(self):
        """Gets the modifiers of this V1PaymentItemization.

        All modifier options applied to this itemization.

        :return: The modifiers of this V1PaymentItemization.
        :rtype: List[V1PaymentModifier]
        """
        return self._modifiers

    @modifiers.setter
    def modifiers(self, modifiers):
        """Sets the modifiers of this V1PaymentItemization.

        All modifier options applied to this itemization.

        :param modifiers: The modifiers of this V1PaymentItemization.
        :type modifiers: List[V1PaymentModifier]
        """

        self._modifiers = modifiers

    @property
    def name(self):
        """Gets the name of this V1PaymentItemization.

        The item's name.

        :return: The name of this V1PaymentItemization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1PaymentItemization.

        The item's name.

        :param name: The name of this V1PaymentItemization.
        :type name: str
        """

        self._name = name

    @property
    def net_sales_money(self):
        """Gets the net_sales_money of this V1PaymentItemization.


        :return: The net_sales_money of this V1PaymentItemization.
        :rtype: V1Money
        """
        return self._net_sales_money

    @net_sales_money.setter
    def net_sales_money(self, net_sales_money):
        """Sets the net_sales_money of this V1PaymentItemization.


        :param net_sales_money: The net_sales_money of this V1PaymentItemization.
        :type net_sales_money: V1Money
        """

        self._net_sales_money = net_sales_money

    @property
    def notes(self):
        """Gets the notes of this V1PaymentItemization.

        Notes entered by the merchant about the item at the time of payment, if any.

        :return: The notes of this V1PaymentItemization.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this V1PaymentItemization.

        Notes entered by the merchant about the item at the time of payment, if any.

        :param notes: The notes of this V1PaymentItemization.
        :type notes: str
        """

        self._notes = notes

    @property
    def quantity(self):
        """Gets the quantity of this V1PaymentItemization.

        The quantity of the item purchased. This can be a decimal value.

        :return: The quantity of this V1PaymentItemization.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this V1PaymentItemization.

        The quantity of the item purchased. This can be a decimal value.

        :param quantity: The quantity of this V1PaymentItemization.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def single_quantity_money(self):
        """Gets the single_quantity_money of this V1PaymentItemization.


        :return: The single_quantity_money of this V1PaymentItemization.
        :rtype: V1Money
        """
        return self._single_quantity_money

    @single_quantity_money.setter
    def single_quantity_money(self, single_quantity_money):
        """Sets the single_quantity_money of this V1PaymentItemization.


        :param single_quantity_money: The single_quantity_money of this V1PaymentItemization.
        :type single_quantity_money: V1Money
        """

        self._single_quantity_money = single_quantity_money

    @property
    def taxes(self):
        """Gets the taxes of this V1PaymentItemization.

        All taxes applied to this itemization.

        :return: The taxes of this V1PaymentItemization.
        :rtype: List[V1PaymentTax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this V1PaymentItemization.

        All taxes applied to this itemization.

        :param taxes: The taxes of this V1PaymentItemization.
        :type taxes: List[V1PaymentTax]
        """

        self._taxes = taxes

    @property
    def total_money(self):
        """Gets the total_money of this V1PaymentItemization.


        :return: The total_money of this V1PaymentItemization.
        :rtype: V1Money
        """
        return self._total_money

    @total_money.setter
    def total_money(self, total_money):
        """Sets the total_money of this V1PaymentItemization.


        :param total_money: The total_money of this V1PaymentItemization.
        :type total_money: V1Money
        """

        self._total_money = total_money
