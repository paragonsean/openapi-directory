# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inventory_change import InventoryChange
from openapi_server import util


class BatchChangeInventoryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changes: List[InventoryChange]=None, idempotency_key: str=None, ignore_unchanged_counts: bool=None):
        """BatchChangeInventoryRequest - a model defined in OpenAPI

        :param changes: The changes of this BatchChangeInventoryRequest.
        :param idempotency_key: The idempotency_key of this BatchChangeInventoryRequest.
        :param ignore_unchanged_counts: The ignore_unchanged_counts of this BatchChangeInventoryRequest.
        """
        self.openapi_types = {
            'changes': List[InventoryChange],
            'idempotency_key': str,
            'ignore_unchanged_counts': bool
        }

        self.attribute_map = {
            'changes': 'changes',
            'idempotency_key': 'idempotency_key',
            'ignore_unchanged_counts': 'ignore_unchanged_counts'
        }

        self._changes = changes
        self._idempotency_key = idempotency_key
        self._ignore_unchanged_counts = ignore_unchanged_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchChangeInventoryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchChangeInventoryRequest of this BatchChangeInventoryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changes(self):
        """Gets the changes of this BatchChangeInventoryRequest.

        The set of physical counts and inventory adjustments to be made. Changes are applied based on the client-supplied timestamp and may be sent out of order.

        :return: The changes of this BatchChangeInventoryRequest.
        :rtype: List[InventoryChange]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this BatchChangeInventoryRequest.

        The set of physical counts and inventory adjustments to be made. Changes are applied based on the client-supplied timestamp and may be sent out of order.

        :param changes: The changes of this BatchChangeInventoryRequest.
        :type changes: List[InventoryChange]
        """

        self._changes = changes

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this BatchChangeInventoryRequest.

        A client-supplied, universally unique identifier (UUID) for the request.  See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) in the [API Development 101](https://developer.squareup.com/docs/basics/api101/overview) section for more information.

        :return: The idempotency_key of this BatchChangeInventoryRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this BatchChangeInventoryRequest.

        A client-supplied, universally unique identifier (UUID) for the request.  See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) in the [API Development 101](https://developer.squareup.com/docs/basics/api101/overview) section for more information.

        :param idempotency_key: The idempotency_key of this BatchChangeInventoryRequest.
        :type idempotency_key: str
        """
        if idempotency_key is None:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if idempotency_key is not None and len(idempotency_key) > 128:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `128`")
        if idempotency_key is not None and len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key

    @property
    def ignore_unchanged_counts(self):
        """Gets the ignore_unchanged_counts of this BatchChangeInventoryRequest.

        Indicates whether the current physical count should be ignored if the quantity is unchanged since the last physical count. Default: `true`.

        :return: The ignore_unchanged_counts of this BatchChangeInventoryRequest.
        :rtype: bool
        """
        return self._ignore_unchanged_counts

    @ignore_unchanged_counts.setter
    def ignore_unchanged_counts(self, ignore_unchanged_counts):
        """Sets the ignore_unchanged_counts of this BatchChangeInventoryRequest.

        Indicates whether the current physical count should be ignored if the quantity is unchanged since the last physical count. Default: `true`.

        :param ignore_unchanged_counts: The ignore_unchanged_counts of this BatchChangeInventoryRequest.
        :type ignore_unchanged_counts: bool
        """

        self._ignore_unchanged_counts = ignore_unchanged_counts
