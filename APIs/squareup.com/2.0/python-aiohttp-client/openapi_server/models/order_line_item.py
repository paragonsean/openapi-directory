# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server.models.order_line_item_applied_discount import OrderLineItemAppliedDiscount
from openapi_server.models.order_line_item_applied_tax import OrderLineItemAppliedTax
from openapi_server.models.order_line_item_modifier import OrderLineItemModifier
from openapi_server.models.order_line_item_pricing_blocklists import OrderLineItemPricingBlocklists
from openapi_server.models.order_quantity_unit import OrderQuantityUnit
from openapi_server import util


class OrderLineItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_discounts: List[OrderLineItemAppliedDiscount]=None, applied_taxes: List[OrderLineItemAppliedTax]=None, base_price_money: Money=None, catalog_object_id: str=None, catalog_version: int=None, gross_sales_money: Money=None, item_type: str=None, metadata: Dict[str, str]=None, modifiers: List[OrderLineItemModifier]=None, name: str=None, note: str=None, pricing_blocklists: OrderLineItemPricingBlocklists=None, quantity: str=None, quantity_unit: OrderQuantityUnit=None, total_discount_money: Money=None, total_money: Money=None, total_tax_money: Money=None, uid: str=None, variation_name: str=None, variation_total_price_money: Money=None):
        """OrderLineItem - a model defined in OpenAPI

        :param applied_discounts: The applied_discounts of this OrderLineItem.
        :param applied_taxes: The applied_taxes of this OrderLineItem.
        :param base_price_money: The base_price_money of this OrderLineItem.
        :param catalog_object_id: The catalog_object_id of this OrderLineItem.
        :param catalog_version: The catalog_version of this OrderLineItem.
        :param gross_sales_money: The gross_sales_money of this OrderLineItem.
        :param item_type: The item_type of this OrderLineItem.
        :param metadata: The metadata of this OrderLineItem.
        :param modifiers: The modifiers of this OrderLineItem.
        :param name: The name of this OrderLineItem.
        :param note: The note of this OrderLineItem.
        :param pricing_blocklists: The pricing_blocklists of this OrderLineItem.
        :param quantity: The quantity of this OrderLineItem.
        :param quantity_unit: The quantity_unit of this OrderLineItem.
        :param total_discount_money: The total_discount_money of this OrderLineItem.
        :param total_money: The total_money of this OrderLineItem.
        :param total_tax_money: The total_tax_money of this OrderLineItem.
        :param uid: The uid of this OrderLineItem.
        :param variation_name: The variation_name of this OrderLineItem.
        :param variation_total_price_money: The variation_total_price_money of this OrderLineItem.
        """
        self.openapi_types = {
            'applied_discounts': List[OrderLineItemAppliedDiscount],
            'applied_taxes': List[OrderLineItemAppliedTax],
            'base_price_money': Money,
            'catalog_object_id': str,
            'catalog_version': int,
            'gross_sales_money': Money,
            'item_type': str,
            'metadata': Dict[str, str],
            'modifiers': List[OrderLineItemModifier],
            'name': str,
            'note': str,
            'pricing_blocklists': OrderLineItemPricingBlocklists,
            'quantity': str,
            'quantity_unit': OrderQuantityUnit,
            'total_discount_money': Money,
            'total_money': Money,
            'total_tax_money': Money,
            'uid': str,
            'variation_name': str,
            'variation_total_price_money': Money
        }

        self.attribute_map = {
            'applied_discounts': 'applied_discounts',
            'applied_taxes': 'applied_taxes',
            'base_price_money': 'base_price_money',
            'catalog_object_id': 'catalog_object_id',
            'catalog_version': 'catalog_version',
            'gross_sales_money': 'gross_sales_money',
            'item_type': 'item_type',
            'metadata': 'metadata',
            'modifiers': 'modifiers',
            'name': 'name',
            'note': 'note',
            'pricing_blocklists': 'pricing_blocklists',
            'quantity': 'quantity',
            'quantity_unit': 'quantity_unit',
            'total_discount_money': 'total_discount_money',
            'total_money': 'total_money',
            'total_tax_money': 'total_tax_money',
            'uid': 'uid',
            'variation_name': 'variation_name',
            'variation_total_price_money': 'variation_total_price_money'
        }

        self._applied_discounts = applied_discounts
        self._applied_taxes = applied_taxes
        self._base_price_money = base_price_money
        self._catalog_object_id = catalog_object_id
        self._catalog_version = catalog_version
        self._gross_sales_money = gross_sales_money
        self._item_type = item_type
        self._metadata = metadata
        self._modifiers = modifiers
        self._name = name
        self._note = note
        self._pricing_blocklists = pricing_blocklists
        self._quantity = quantity
        self._quantity_unit = quantity_unit
        self._total_discount_money = total_discount_money
        self._total_money = total_money
        self._total_tax_money = total_tax_money
        self._uid = uid
        self._variation_name = variation_name
        self._variation_total_price_money = variation_total_price_money

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderLineItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderLineItem of this OrderLineItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_discounts(self):
        """Gets the applied_discounts of this OrderLineItem.

        The list of references to discounts applied to this line item. Each `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level `OrderLineItemDiscounts` applied to the line item. On reads, the amount applied is populated.  An `OrderLineItemAppliedDiscount` is automatically created on every line item for all `ORDER` scoped discounts that are added to the order. `OrderLineItemAppliedDiscount` records for `LINE_ITEM` scoped discounts must be added in requests for the discount to apply to any line items.  To change the amount of a discount, modify the referenced top-level discount.

        :return: The applied_discounts of this OrderLineItem.
        :rtype: List[OrderLineItemAppliedDiscount]
        """
        return self._applied_discounts

    @applied_discounts.setter
    def applied_discounts(self, applied_discounts):
        """Sets the applied_discounts of this OrderLineItem.

        The list of references to discounts applied to this line item. Each `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level `OrderLineItemDiscounts` applied to the line item. On reads, the amount applied is populated.  An `OrderLineItemAppliedDiscount` is automatically created on every line item for all `ORDER` scoped discounts that are added to the order. `OrderLineItemAppliedDiscount` records for `LINE_ITEM` scoped discounts must be added in requests for the discount to apply to any line items.  To change the amount of a discount, modify the referenced top-level discount.

        :param applied_discounts: The applied_discounts of this OrderLineItem.
        :type applied_discounts: List[OrderLineItemAppliedDiscount]
        """

        self._applied_discounts = applied_discounts

    @property
    def applied_taxes(self):
        """Gets the applied_taxes of this OrderLineItem.

        The list of references to taxes applied to this line item. Each `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level `OrderLineItemTax` applied to the line item. On reads, the amount applied is populated.  An `OrderLineItemAppliedTax` is automatically created on every line item for all `ORDER` scoped taxes added to the order. `OrderLineItemAppliedTax` records for `LINE_ITEM` scoped taxes must be added in requests for the tax to apply to any line items.  To change the amount of a tax, modify the referenced top-level tax.

        :return: The applied_taxes of this OrderLineItem.
        :rtype: List[OrderLineItemAppliedTax]
        """
        return self._applied_taxes

    @applied_taxes.setter
    def applied_taxes(self, applied_taxes):
        """Sets the applied_taxes of this OrderLineItem.

        The list of references to taxes applied to this line item. Each `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level `OrderLineItemTax` applied to the line item. On reads, the amount applied is populated.  An `OrderLineItemAppliedTax` is automatically created on every line item for all `ORDER` scoped taxes added to the order. `OrderLineItemAppliedTax` records for `LINE_ITEM` scoped taxes must be added in requests for the tax to apply to any line items.  To change the amount of a tax, modify the referenced top-level tax.

        :param applied_taxes: The applied_taxes of this OrderLineItem.
        :type applied_taxes: List[OrderLineItemAppliedTax]
        """

        self._applied_taxes = applied_taxes

    @property
    def base_price_money(self):
        """Gets the base_price_money of this OrderLineItem.


        :return: The base_price_money of this OrderLineItem.
        :rtype: Money
        """
        return self._base_price_money

    @base_price_money.setter
    def base_price_money(self, base_price_money):
        """Sets the base_price_money of this OrderLineItem.


        :param base_price_money: The base_price_money of this OrderLineItem.
        :type base_price_money: Money
        """

        self._base_price_money = base_price_money

    @property
    def catalog_object_id(self):
        """Gets the catalog_object_id of this OrderLineItem.

        The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this line item.

        :return: The catalog_object_id of this OrderLineItem.
        :rtype: str
        """
        return self._catalog_object_id

    @catalog_object_id.setter
    def catalog_object_id(self, catalog_object_id):
        """Sets the catalog_object_id of this OrderLineItem.

        The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this line item.

        :param catalog_object_id: The catalog_object_id of this OrderLineItem.
        :type catalog_object_id: str
        """
        if catalog_object_id is not None and len(catalog_object_id) > 192:
            raise ValueError("Invalid value for `catalog_object_id`, length must be less than or equal to `192`")

        self._catalog_object_id = catalog_object_id

    @property
    def catalog_version(self):
        """Gets the catalog_version of this OrderLineItem.

        The version of the catalog object that this line item references.

        :return: The catalog_version of this OrderLineItem.
        :rtype: int
        """
        return self._catalog_version

    @catalog_version.setter
    def catalog_version(self, catalog_version):
        """Sets the catalog_version of this OrderLineItem.

        The version of the catalog object that this line item references.

        :param catalog_version: The catalog_version of this OrderLineItem.
        :type catalog_version: int
        """

        self._catalog_version = catalog_version

    @property
    def gross_sales_money(self):
        """Gets the gross_sales_money of this OrderLineItem.


        :return: The gross_sales_money of this OrderLineItem.
        :rtype: Money
        """
        return self._gross_sales_money

    @gross_sales_money.setter
    def gross_sales_money(self, gross_sales_money):
        """Sets the gross_sales_money of this OrderLineItem.


        :param gross_sales_money: The gross_sales_money of this OrderLineItem.
        :type gross_sales_money: Money
        """

        self._gross_sales_money = gross_sales_money

    @property
    def item_type(self):
        """Gets the item_type of this OrderLineItem.

        The type of line item: an itemized sale, a non-itemized sale (custom amount), or the activation or reloading of a gift card.

        :return: The item_type of this OrderLineItem.
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this OrderLineItem.

        The type of line item: an itemized sale, a non-itemized sale (custom amount), or the activation or reloading of a gift card.

        :param item_type: The item_type of this OrderLineItem.
        :type item_type: str
        """

        self._item_type = item_type

    @property
    def metadata(self):
        """Gets the metadata of this OrderLineItem.

        Application-defined data attached to this line item. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).

        :return: The metadata of this OrderLineItem.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OrderLineItem.

        Application-defined data attached to this line item. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).

        :param metadata: The metadata of this OrderLineItem.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def modifiers(self):
        """Gets the modifiers of this OrderLineItem.

        The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item.

        :return: The modifiers of this OrderLineItem.
        :rtype: List[OrderLineItemModifier]
        """
        return self._modifiers

    @modifiers.setter
    def modifiers(self, modifiers):
        """Sets the modifiers of this OrderLineItem.

        The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item.

        :param modifiers: The modifiers of this OrderLineItem.
        :type modifiers: List[OrderLineItemModifier]
        """

        self._modifiers = modifiers

    @property
    def name(self):
        """Gets the name of this OrderLineItem.

        The name of the line item.

        :return: The name of this OrderLineItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderLineItem.

        The name of the line item.

        :param name: The name of this OrderLineItem.
        :type name: str
        """
        if name is not None and len(name) > 512:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `512`")

        self._name = name

    @property
    def note(self):
        """Gets the note of this OrderLineItem.

        The note of the line item.

        :return: The note of this OrderLineItem.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this OrderLineItem.

        The note of the line item.

        :param note: The note of this OrderLineItem.
        :type note: str
        """
        if note is not None and len(note) > 2000:
            raise ValueError("Invalid value for `note`, length must be less than or equal to `2000`")

        self._note = note

    @property
    def pricing_blocklists(self):
        """Gets the pricing_blocklists of this OrderLineItem.


        :return: The pricing_blocklists of this OrderLineItem.
        :rtype: OrderLineItemPricingBlocklists
        """
        return self._pricing_blocklists

    @pricing_blocklists.setter
    def pricing_blocklists(self, pricing_blocklists):
        """Sets the pricing_blocklists of this OrderLineItem.


        :param pricing_blocklists: The pricing_blocklists of this OrderLineItem.
        :type pricing_blocklists: OrderLineItemPricingBlocklists
        """

        self._pricing_blocklists = pricing_blocklists

    @property
    def quantity(self):
        """Gets the quantity of this OrderLineItem.

        The quantity purchased, formatted as a decimal number. For example, `\"3\"`.  Line items with a quantity of `\"0\"` are automatically removed when paying for or otherwise completing the order.  Line items with a `quantity_unit` can have non-integer quantities. For example, `\"1.70000\"`.

        :return: The quantity of this OrderLineItem.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderLineItem.

        The quantity purchased, formatted as a decimal number. For example, `\"3\"`.  Line items with a quantity of `\"0\"` are automatically removed when paying for or otherwise completing the order.  Line items with a `quantity_unit` can have non-integer quantities. For example, `\"1.70000\"`.

        :param quantity: The quantity of this OrderLineItem.
        :type quantity: str
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")
        if quantity is not None and len(quantity) > 12:
            raise ValueError("Invalid value for `quantity`, length must be less than or equal to `12`")
        if quantity is not None and len(quantity) < 1:
            raise ValueError("Invalid value for `quantity`, length must be greater than or equal to `1`")

        self._quantity = quantity

    @property
    def quantity_unit(self):
        """Gets the quantity_unit of this OrderLineItem.


        :return: The quantity_unit of this OrderLineItem.
        :rtype: OrderQuantityUnit
        """
        return self._quantity_unit

    @quantity_unit.setter
    def quantity_unit(self, quantity_unit):
        """Sets the quantity_unit of this OrderLineItem.


        :param quantity_unit: The quantity_unit of this OrderLineItem.
        :type quantity_unit: OrderQuantityUnit
        """

        self._quantity_unit = quantity_unit

    @property
    def total_discount_money(self):
        """Gets the total_discount_money of this OrderLineItem.


        :return: The total_discount_money of this OrderLineItem.
        :rtype: Money
        """
        return self._total_discount_money

    @total_discount_money.setter
    def total_discount_money(self, total_discount_money):
        """Sets the total_discount_money of this OrderLineItem.


        :param total_discount_money: The total_discount_money of this OrderLineItem.
        :type total_discount_money: Money
        """

        self._total_discount_money = total_discount_money

    @property
    def total_money(self):
        """Gets the total_money of this OrderLineItem.


        :return: The total_money of this OrderLineItem.
        :rtype: Money
        """
        return self._total_money

    @total_money.setter
    def total_money(self, total_money):
        """Sets the total_money of this OrderLineItem.


        :param total_money: The total_money of this OrderLineItem.
        :type total_money: Money
        """

        self._total_money = total_money

    @property
    def total_tax_money(self):
        """Gets the total_tax_money of this OrderLineItem.


        :return: The total_tax_money of this OrderLineItem.
        :rtype: Money
        """
        return self._total_tax_money

    @total_tax_money.setter
    def total_tax_money(self, total_tax_money):
        """Sets the total_tax_money of this OrderLineItem.


        :param total_tax_money: The total_tax_money of this OrderLineItem.
        :type total_tax_money: Money
        """

        self._total_tax_money = total_tax_money

    @property
    def uid(self):
        """Gets the uid of this OrderLineItem.

        A unique ID that identifies the line item only within this order.

        :return: The uid of this OrderLineItem.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OrderLineItem.

        A unique ID that identifies the line item only within this order.

        :param uid: The uid of this OrderLineItem.
        :type uid: str
        """
        if uid is not None and len(uid) > 60:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `60`")

        self._uid = uid

    @property
    def variation_name(self):
        """Gets the variation_name of this OrderLineItem.

        The name of the variation applied to this line item.

        :return: The variation_name of this OrderLineItem.
        :rtype: str
        """
        return self._variation_name

    @variation_name.setter
    def variation_name(self, variation_name):
        """Sets the variation_name of this OrderLineItem.

        The name of the variation applied to this line item.

        :param variation_name: The variation_name of this OrderLineItem.
        :type variation_name: str
        """
        if variation_name is not None and len(variation_name) > 255:
            raise ValueError("Invalid value for `variation_name`, length must be less than or equal to `255`")

        self._variation_name = variation_name

    @property
    def variation_total_price_money(self):
        """Gets the variation_total_price_money of this OrderLineItem.


        :return: The variation_total_price_money of this OrderLineItem.
        :rtype: Money
        """
        return self._variation_total_price_money

    @variation_total_price_money.setter
    def variation_total_price_money(self, variation_total_price_money):
        """Sets the variation_total_price_money of this OrderLineItem.


        :param variation_total_price_money: The variation_total_price_money of this OrderLineItem.
        :type variation_total_price_money: Money
        """

        self._variation_total_price_money = variation_total_price_money
