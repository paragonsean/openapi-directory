# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workweek_config import WorkweekConfig
from openapi_server import util


class UpdateWorkweekConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workweek_config: WorkweekConfig=None):
        """UpdateWorkweekConfigRequest - a model defined in OpenAPI

        :param workweek_config: The workweek_config of this UpdateWorkweekConfigRequest.
        """
        self.openapi_types = {
            'workweek_config': WorkweekConfig
        }

        self.attribute_map = {
            'workweek_config': 'workweek_config'
        }

        self._workweek_config = workweek_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateWorkweekConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateWorkweekConfigRequest of this UpdateWorkweekConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workweek_config(self):
        """Gets the workweek_config of this UpdateWorkweekConfigRequest.


        :return: The workweek_config of this UpdateWorkweekConfigRequest.
        :rtype: WorkweekConfig
        """
        return self._workweek_config

    @workweek_config.setter
    def workweek_config(self, workweek_config):
        """Sets the workweek_config of this UpdateWorkweekConfigRequest.


        :param workweek_config: The workweek_config of this UpdateWorkweekConfigRequest.
        :type workweek_config: WorkweekConfig
        """
        if workweek_config is None:
            raise ValueError("Invalid value for `workweek_config`, must not be `None`")

        self._workweek_config = workweek_config
