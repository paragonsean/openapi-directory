# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogQueryItemsForTax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tax_ids: List[str]=None):
        """CatalogQueryItemsForTax - a model defined in OpenAPI

        :param tax_ids: The tax_ids of this CatalogQueryItemsForTax.
        """
        self.openapi_types = {
            'tax_ids': List[str]
        }

        self.attribute_map = {
            'tax_ids': 'tax_ids'
        }

        self._tax_ids = tax_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogQueryItemsForTax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogQueryItemsForTax of this CatalogQueryItemsForTax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tax_ids(self):
        """Gets the tax_ids of this CatalogQueryItemsForTax.

        A set of `CatalogTax` IDs to be used to find associated `CatalogItem`s.

        :return: The tax_ids of this CatalogQueryItemsForTax.
        :rtype: List[str]
        """
        return self._tax_ids

    @tax_ids.setter
    def tax_ids(self, tax_ids):
        """Sets the tax_ids of this CatalogQueryItemsForTax.

        A set of `CatalogTax` IDs to be used to find associated `CatalogItem`s.

        :param tax_ids: The tax_ids of this CatalogQueryItemsForTax.
        :type tax_ids: List[str]
        """
        if tax_ids is None:
            raise ValueError("Invalid value for `tax_ids`, must not be `None`")

        self._tax_ids = tax_ids
