# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, code: str=None, detail: str=None, _field: str=None):
        """Error - a model defined in OpenAPI

        :param category: The category of this Error.
        :param code: The code of this Error.
        :param detail: The detail of this Error.
        :param _field: The _field of this Error.
        """
        self.openapi_types = {
            'category': str,
            'code': str,
            'detail': str,
            '_field': str
        }

        self.attribute_map = {
            'category': 'category',
            'code': 'code',
            'detail': 'detail',
            '_field': 'field'
        }

        self._category = category
        self._code = code
        self._detail = detail
        self.__field = _field

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Error.

        The high-level category for the error.

        :return: The category of this Error.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Error.

        The high-level category for the error.

        :param category: The category of this Error.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def code(self):
        """Gets the code of this Error.

        The specific code of the error.

        :return: The code of this Error.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Error.

        The specific code of the error.

        :param code: The code of this Error.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def detail(self):
        """Gets the detail of this Error.

        A human-readable description of the error for debugging purposes.

        :return: The detail of this Error.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Error.

        A human-readable description of the error for debugging purposes.

        :param detail: The detail of this Error.
        :type detail: str
        """

        self._detail = detail

    @property
    def _field(self):
        """Gets the _field of this Error.

        The name of the field provided in the original request (if any) that the error pertains to.

        :return: The _field of this Error.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this Error.

        The name of the field provided in the original request (if any) that the error pertains to.

        :param _field: The _field of this Error.
        :type _field: str
        """

        self.__field = _field
