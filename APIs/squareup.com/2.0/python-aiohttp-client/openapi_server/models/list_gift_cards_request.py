# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListGiftCardsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cursor: str=None, customer_id: str=None, limit: int=None, state: str=None, type: str=None):
        """ListGiftCardsRequest - a model defined in OpenAPI

        :param cursor: The cursor of this ListGiftCardsRequest.
        :param customer_id: The customer_id of this ListGiftCardsRequest.
        :param limit: The limit of this ListGiftCardsRequest.
        :param state: The state of this ListGiftCardsRequest.
        :param type: The type of this ListGiftCardsRequest.
        """
        self.openapi_types = {
            'cursor': str,
            'customer_id': str,
            'limit': int,
            'state': str,
            'type': str
        }

        self.attribute_map = {
            'cursor': 'cursor',
            'customer_id': 'customer_id',
            'limit': 'limit',
            'state': 'state',
            'type': 'type'
        }

        self._cursor = cursor
        self._customer_id = customer_id
        self._limit = limit
        self._state = state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListGiftCardsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListGiftCardsRequest of this ListGiftCardsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cursor(self):
        """Gets the cursor of this ListGiftCardsRequest.

        A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If a cursor is not provided, it returns the first page of the results.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).

        :return: The cursor of this ListGiftCardsRequest.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this ListGiftCardsRequest.

        A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If a cursor is not provided, it returns the first page of the results.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).

        :param cursor: The cursor of this ListGiftCardsRequest.
        :type cursor: str
        """

        self._cursor = cursor

    @property
    def customer_id(self):
        """Gets the customer_id of this ListGiftCardsRequest.

        If a value is provided, returns only the gift cards linked to the specified customer

        :return: The customer_id of this ListGiftCardsRequest.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ListGiftCardsRequest.

        If a value is provided, returns only the gift cards linked to the specified customer

        :param customer_id: The customer_id of this ListGiftCardsRequest.
        :type customer_id: str
        """
        if customer_id is not None and len(customer_id) > 191:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `191`")

        self._customer_id = customer_id

    @property
    def limit(self):
        """Gets the limit of this ListGiftCardsRequest.

        If a value is provided, it returns only that number of results per page. The maximum number of results allowed per page is 50. The default value is 30.

        :return: The limit of this ListGiftCardsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListGiftCardsRequest.

        If a value is provided, it returns only that number of results per page. The maximum number of results allowed per page is 50. The default value is 30.

        :param limit: The limit of this ListGiftCardsRequest.
        :type limit: int
        """
        if limit is not None and limit > 50:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `50`")
        if limit is not None and limit < 1:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")

        self._limit = limit

    @property
    def state(self):
        """Gets the state of this ListGiftCardsRequest.

        If the state is provided, it returns the gift cards in the specified state  (see [GiftCardStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardStatus)). Otherwise, it returns the gift cards of all states.

        :return: The state of this ListGiftCardsRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ListGiftCardsRequest.

        If the state is provided, it returns the gift cards in the specified state  (see [GiftCardStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardStatus)). Otherwise, it returns the gift cards of all states.

        :param state: The state of this ListGiftCardsRequest.
        :type state: str
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this ListGiftCardsRequest.

        If a type is provided, gift cards of this type are returned  (see [GiftCardType](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardType)). If no type is provided, it returns gift cards of all types.

        :return: The type of this ListGiftCardsRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ListGiftCardsRequest.

        If a type is provided, gift cards of this type are returned  (see [GiftCardType](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardType)). If no type is provided, it returns gift cards of all types.

        :param type: The type of this ListGiftCardsRequest.
        :type type: str
        """

        self._type = type
