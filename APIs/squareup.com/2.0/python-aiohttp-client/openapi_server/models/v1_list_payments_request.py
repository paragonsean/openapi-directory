# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class V1ListPaymentsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_token: str=None, begin_time: str=None, end_time: str=None, include_partial: bool=None, limit: int=None, order: str=None):
        """V1ListPaymentsRequest - a model defined in OpenAPI

        :param batch_token: The batch_token of this V1ListPaymentsRequest.
        :param begin_time: The begin_time of this V1ListPaymentsRequest.
        :param end_time: The end_time of this V1ListPaymentsRequest.
        :param include_partial: The include_partial of this V1ListPaymentsRequest.
        :param limit: The limit of this V1ListPaymentsRequest.
        :param order: The order of this V1ListPaymentsRequest.
        """
        self.openapi_types = {
            'batch_token': str,
            'begin_time': str,
            'end_time': str,
            'include_partial': bool,
            'limit': int,
            'order': str
        }

        self.attribute_map = {
            'batch_token': 'batch_token',
            'begin_time': 'begin_time',
            'end_time': 'end_time',
            'include_partial': 'include_partial',
            'limit': 'limit',
            'order': 'order'
        }

        self._batch_token = batch_token
        self._begin_time = begin_time
        self._end_time = end_time
        self._include_partial = include_partial
        self._limit = limit
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V1ListPaymentsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V1ListPaymentsRequest of this V1ListPaymentsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_token(self):
        """Gets the batch_token of this V1ListPaymentsRequest.

        A pagination cursor to retrieve the next set of results for your original query to the endpoint.

        :return: The batch_token of this V1ListPaymentsRequest.
        :rtype: str
        """
        return self._batch_token

    @batch_token.setter
    def batch_token(self, batch_token):
        """Sets the batch_token of this V1ListPaymentsRequest.

        A pagination cursor to retrieve the next set of results for your original query to the endpoint.

        :param batch_token: The batch_token of this V1ListPaymentsRequest.
        :type batch_token: str
        """

        self._batch_token = batch_token

    @property
    def begin_time(self):
        """Gets the begin_time of this V1ListPaymentsRequest.

        The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.

        :return: The begin_time of this V1ListPaymentsRequest.
        :rtype: str
        """
        return self._begin_time

    @begin_time.setter
    def begin_time(self, begin_time):
        """Sets the begin_time of this V1ListPaymentsRequest.

        The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.

        :param begin_time: The begin_time of this V1ListPaymentsRequest.
        :type begin_time: str
        """

        self._begin_time = begin_time

    @property
    def end_time(self):
        """Gets the end_time of this V1ListPaymentsRequest.

        The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.

        :return: The end_time of this V1ListPaymentsRequest.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this V1ListPaymentsRequest.

        The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.

        :param end_time: The end_time of this V1ListPaymentsRequest.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def include_partial(self):
        """Gets the include_partial of this V1ListPaymentsRequest.

        Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.

        :return: The include_partial of this V1ListPaymentsRequest.
        :rtype: bool
        """
        return self._include_partial

    @include_partial.setter
    def include_partial(self, include_partial):
        """Sets the include_partial of this V1ListPaymentsRequest.

        Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.

        :param include_partial: The include_partial of this V1ListPaymentsRequest.
        :type include_partial: bool
        """

        self._include_partial = include_partial

    @property
    def limit(self):
        """Gets the limit of this V1ListPaymentsRequest.

        The maximum number of payments to return in a single response. This value cannot exceed 200.

        :return: The limit of this V1ListPaymentsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this V1ListPaymentsRequest.

        The maximum number of payments to return in a single response. This value cannot exceed 200.

        :param limit: The limit of this V1ListPaymentsRequest.
        :type limit: int
        """

        self._limit = limit

    @property
    def order(self):
        """Gets the order of this V1ListPaymentsRequest.

        The order in which payments are listed in the response.

        :return: The order of this V1ListPaymentsRequest.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this V1ListPaymentsRequest.

        The order in which payments are listed in the response.

        :param order: The order of this V1ListPaymentsRequest.
        :type order: str
        """

        self._order = order
