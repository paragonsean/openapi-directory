# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.loyalty_account_expiring_point_deadline import LoyaltyAccountExpiringPointDeadline
from openapi_server.models.loyalty_account_mapping import LoyaltyAccountMapping
from openapi_server import util


class LoyaltyAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: int=None, created_at: str=None, customer_id: str=None, enrolled_at: str=None, expiring_point_deadlines: List[LoyaltyAccountExpiringPointDeadline]=None, id: str=None, lifetime_points: int=None, mapping: LoyaltyAccountMapping=None, program_id: str=None, updated_at: str=None):
        """LoyaltyAccount - a model defined in OpenAPI

        :param balance: The balance of this LoyaltyAccount.
        :param created_at: The created_at of this LoyaltyAccount.
        :param customer_id: The customer_id of this LoyaltyAccount.
        :param enrolled_at: The enrolled_at of this LoyaltyAccount.
        :param expiring_point_deadlines: The expiring_point_deadlines of this LoyaltyAccount.
        :param id: The id of this LoyaltyAccount.
        :param lifetime_points: The lifetime_points of this LoyaltyAccount.
        :param mapping: The mapping of this LoyaltyAccount.
        :param program_id: The program_id of this LoyaltyAccount.
        :param updated_at: The updated_at of this LoyaltyAccount.
        """
        self.openapi_types = {
            'balance': int,
            'created_at': str,
            'customer_id': str,
            'enrolled_at': str,
            'expiring_point_deadlines': List[LoyaltyAccountExpiringPointDeadline],
            'id': str,
            'lifetime_points': int,
            'mapping': LoyaltyAccountMapping,
            'program_id': str,
            'updated_at': str
        }

        self.attribute_map = {
            'balance': 'balance',
            'created_at': 'created_at',
            'customer_id': 'customer_id',
            'enrolled_at': 'enrolled_at',
            'expiring_point_deadlines': 'expiring_point_deadlines',
            'id': 'id',
            'lifetime_points': 'lifetime_points',
            'mapping': 'mapping',
            'program_id': 'program_id',
            'updated_at': 'updated_at'
        }

        self._balance = balance
        self._created_at = created_at
        self._customer_id = customer_id
        self._enrolled_at = enrolled_at
        self._expiring_point_deadlines = expiring_point_deadlines
        self._id = id
        self._lifetime_points = lifetime_points
        self._mapping = mapping
        self._program_id = program_id
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyAccount of this LoyaltyAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this LoyaltyAccount.

        The available point balance in the loyalty account. If points are scheduled to expire, they are listed in the `expiring_point_deadlines` field.  Your application should be able to handle loyalty accounts that have a negative point balance (`balance` is less than 0). This might occur if a seller makes a manual adjustment or as a result of a refund or exchange.

        :return: The balance of this LoyaltyAccount.
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this LoyaltyAccount.

        The available point balance in the loyalty account. If points are scheduled to expire, they are listed in the `expiring_point_deadlines` field.  Your application should be able to handle loyalty accounts that have a negative point balance (`balance` is less than 0). This might occur if a seller makes a manual adjustment or as a result of a refund or exchange.

        :param balance: The balance of this LoyaltyAccount.
        :type balance: int
        """

        self._balance = balance

    @property
    def created_at(self):
        """Gets the created_at of this LoyaltyAccount.

        The timestamp when the loyalty account was created, in RFC 3339 format.

        :return: The created_at of this LoyaltyAccount.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LoyaltyAccount.

        The timestamp when the loyalty account was created, in RFC 3339 format.

        :param created_at: The created_at of this LoyaltyAccount.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def customer_id(self):
        """Gets the customer_id of this LoyaltyAccount.

        The Square-assigned ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) that is associated with the account.

        :return: The customer_id of this LoyaltyAccount.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this LoyaltyAccount.

        The Square-assigned ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) that is associated with the account.

        :param customer_id: The customer_id of this LoyaltyAccount.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def enrolled_at(self):
        """Gets the enrolled_at of this LoyaltyAccount.

        The timestamp when enrollment occurred, in RFC 3339 format.

        :return: The enrolled_at of this LoyaltyAccount.
        :rtype: str
        """
        return self._enrolled_at

    @enrolled_at.setter
    def enrolled_at(self, enrolled_at):
        """Sets the enrolled_at of this LoyaltyAccount.

        The timestamp when enrollment occurred, in RFC 3339 format.

        :param enrolled_at: The enrolled_at of this LoyaltyAccount.
        :type enrolled_at: str
        """

        self._enrolled_at = enrolled_at

    @property
    def expiring_point_deadlines(self):
        """Gets the expiring_point_deadlines of this LoyaltyAccount.

        The schedule for when points expire in the loyalty account balance. This field is present only if the account has points that are scheduled to expire.   The total number of points in this field equals the number of points in the `balance` field.

        :return: The expiring_point_deadlines of this LoyaltyAccount.
        :rtype: List[LoyaltyAccountExpiringPointDeadline]
        """
        return self._expiring_point_deadlines

    @expiring_point_deadlines.setter
    def expiring_point_deadlines(self, expiring_point_deadlines):
        """Sets the expiring_point_deadlines of this LoyaltyAccount.

        The schedule for when points expire in the loyalty account balance. This field is present only if the account has points that are scheduled to expire.   The total number of points in this field equals the number of points in the `balance` field.

        :param expiring_point_deadlines: The expiring_point_deadlines of this LoyaltyAccount.
        :type expiring_point_deadlines: List[LoyaltyAccountExpiringPointDeadline]
        """

        self._expiring_point_deadlines = expiring_point_deadlines

    @property
    def id(self):
        """Gets the id of this LoyaltyAccount.

        The Square-assigned ID of the loyalty account.

        :return: The id of this LoyaltyAccount.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoyaltyAccount.

        The Square-assigned ID of the loyalty account.

        :param id: The id of this LoyaltyAccount.
        :type id: str
        """
        if id is not None and len(id) > 36:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `36`")

        self._id = id

    @property
    def lifetime_points(self):
        """Gets the lifetime_points of this LoyaltyAccount.

        The total points accrued during the lifetime of the account.

        :return: The lifetime_points of this LoyaltyAccount.
        :rtype: int
        """
        return self._lifetime_points

    @lifetime_points.setter
    def lifetime_points(self, lifetime_points):
        """Sets the lifetime_points of this LoyaltyAccount.

        The total points accrued during the lifetime of the account.

        :param lifetime_points: The lifetime_points of this LoyaltyAccount.
        :type lifetime_points: int
        """
        if lifetime_points is not None and lifetime_points < 0:
            raise ValueError("Invalid value for `lifetime_points`, must be a value greater than or equal to `0`")

        self._lifetime_points = lifetime_points

    @property
    def mapping(self):
        """Gets the mapping of this LoyaltyAccount.


        :return: The mapping of this LoyaltyAccount.
        :rtype: LoyaltyAccountMapping
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this LoyaltyAccount.


        :param mapping: The mapping of this LoyaltyAccount.
        :type mapping: LoyaltyAccountMapping
        """

        self._mapping = mapping

    @property
    def program_id(self):
        """Gets the program_id of this LoyaltyAccount.

        The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) to which the account belongs.

        :return: The program_id of this LoyaltyAccount.
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this LoyaltyAccount.

        The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) to which the account belongs.

        :param program_id: The program_id of this LoyaltyAccount.
        :type program_id: str
        """
        if program_id is None:
            raise ValueError("Invalid value for `program_id`, must not be `None`")
        if program_id is not None and len(program_id) > 36:
            raise ValueError("Invalid value for `program_id`, length must be less than or equal to `36`")
        if program_id is not None and len(program_id) < 1:
            raise ValueError("Invalid value for `program_id`, length must be greater than or equal to `1`")

        self._program_id = program_id

    @property
    def updated_at(self):
        """Gets the updated_at of this LoyaltyAccount.

        The timestamp when the loyalty account was last updated, in RFC 3339 format.

        :return: The updated_at of this LoyaltyAccount.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LoyaltyAccount.

        The timestamp when the loyalty account was last updated, in RFC 3339 format.

        :param updated_at: The updated_at of this LoyaltyAccount.
        :type updated_at: str
        """

        self._updated_at = updated_at
