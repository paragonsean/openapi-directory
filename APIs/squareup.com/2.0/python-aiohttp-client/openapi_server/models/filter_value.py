# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FilterValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all: List[str]=None, any: List[str]=None, _none: List[str]=None):
        """FilterValue - a model defined in OpenAPI

        :param all: The all of this FilterValue.
        :param any: The any of this FilterValue.
        :param _none: The _none of this FilterValue.
        """
        self.openapi_types = {
            'all': List[str],
            'any': List[str],
            '_none': List[str]
        }

        self.attribute_map = {
            'all': 'all',
            'any': 'any',
            '_none': 'none'
        }

        self._all = all
        self._any = any
        self.__none = _none

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilterValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FilterValue of this FilterValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all(self):
        """Gets the all of this FilterValue.

        A list of terms that must be present on the field of the resource.

        :return: The all of this FilterValue.
        :rtype: List[str]
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this FilterValue.

        A list of terms that must be present on the field of the resource.

        :param all: The all of this FilterValue.
        :type all: List[str]
        """

        self._all = all

    @property
    def any(self):
        """Gets the any of this FilterValue.

        A list of terms where at least one of them must be present on the field of the resource.

        :return: The any of this FilterValue.
        :rtype: List[str]
        """
        return self._any

    @any.setter
    def any(self, any):
        """Sets the any of this FilterValue.

        A list of terms where at least one of them must be present on the field of the resource.

        :param any: The any of this FilterValue.
        :type any: List[str]
        """

        self._any = any

    @property
    def _none(self):
        """Gets the _none of this FilterValue.

        A list of terms that must not be present on the field the resource

        :return: The _none of this FilterValue.
        :rtype: List[str]
        """
        return self.__none

    @_none.setter
    def _none(self, _none):
        """Sets the _none of this FilterValue.

        A list of terms that must not be present on the field the resource

        :param _none: The _none of this FilterValue.
        :type _none: List[str]
        """

        self.__none = _none
