# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Employee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, email: str=None, first_name: str=None, id: str=None, is_owner: bool=None, last_name: str=None, location_ids: List[str]=None, phone_number: str=None, status: str=None, updated_at: str=None):
        """Employee - a model defined in OpenAPI

        :param created_at: The created_at of this Employee.
        :param email: The email of this Employee.
        :param first_name: The first_name of this Employee.
        :param id: The id of this Employee.
        :param is_owner: The is_owner of this Employee.
        :param last_name: The last_name of this Employee.
        :param location_ids: The location_ids of this Employee.
        :param phone_number: The phone_number of this Employee.
        :param status: The status of this Employee.
        :param updated_at: The updated_at of this Employee.
        """
        self.openapi_types = {
            'created_at': str,
            'email': str,
            'first_name': str,
            'id': str,
            'is_owner': bool,
            'last_name': str,
            'location_ids': List[str],
            'phone_number': str,
            'status': str,
            'updated_at': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'email': 'email',
            'first_name': 'first_name',
            'id': 'id',
            'is_owner': 'is_owner',
            'last_name': 'last_name',
            'location_ids': 'location_ids',
            'phone_number': 'phone_number',
            'status': 'status',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._email = email
        self._first_name = first_name
        self._id = id
        self._is_owner = is_owner
        self._last_name = last_name
        self._location_ids = location_ids
        self._phone_number = phone_number
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Employee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Employee of this Employee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Employee.

        A read-only timestamp in RFC 3339 format.

        :return: The created_at of this Employee.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Employee.

        A read-only timestamp in RFC 3339 format.

        :param created_at: The created_at of this Employee.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this Employee.

        The employee's email address

        :return: The email of this Employee.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Employee.

        The employee's email address

        :param email: The email of this Employee.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Employee.

        The employee's first name.

        :return: The first_name of this Employee.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Employee.

        The employee's first name.

        :param first_name: The first_name of this Employee.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Employee.

        UUID for this object.

        :return: The id of this Employee.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Employee.

        UUID for this object.

        :param id: The id of this Employee.
        :type id: str
        """

        self._id = id

    @property
    def is_owner(self):
        """Gets the is_owner of this Employee.

        Whether this employee is the owner of the merchant. Each merchant has one owner employee, and that employee has full authority over the account.

        :return: The is_owner of this Employee.
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this Employee.

        Whether this employee is the owner of the merchant. Each merchant has one owner employee, and that employee has full authority over the account.

        :param is_owner: The is_owner of this Employee.
        :type is_owner: bool
        """

        self._is_owner = is_owner

    @property
    def last_name(self):
        """Gets the last_name of this Employee.

        The employee's last name.

        :return: The last_name of this Employee.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Employee.

        The employee's last name.

        :param last_name: The last_name of this Employee.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def location_ids(self):
        """Gets the location_ids of this Employee.

        A list of location IDs where this employee has access to.

        :return: The location_ids of this Employee.
        :rtype: List[str]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """Sets the location_ids of this Employee.

        A list of location IDs where this employee has access to.

        :param location_ids: The location_ids of this Employee.
        :type location_ids: List[str]
        """

        self._location_ids = location_ids

    @property
    def phone_number(self):
        """Gets the phone_number of this Employee.

        The employee's phone number in E.164 format, i.e. \"+12125554250\"

        :return: The phone_number of this Employee.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Employee.

        The employee's phone number in E.164 format, i.e. \"+12125554250\"

        :param phone_number: The phone_number of this Employee.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def status(self):
        """Gets the status of this Employee.

        Specifies the status of the employees being fetched.

        :return: The status of this Employee.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Employee.

        Specifies the status of the employees being fetched.

        :param status: The status of this Employee.
        :type status: str
        """

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this Employee.

        A read-only timestamp in RFC 3339 format.

        :return: The updated_at of this Employee.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Employee.

        A read-only timestamp in RFC 3339 format.

        :param updated_at: The updated_at of this Employee.
        :type updated_at: str
        """

        self._updated_at = updated_at
