# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoyaltyEventTypeFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, types: List[str]=None):
        """LoyaltyEventTypeFilter - a model defined in OpenAPI

        :param types: The types of this LoyaltyEventTypeFilter.
        """
        self.openapi_types = {
            'types': List[str]
        }

        self.attribute_map = {
            'types': 'types'
        }

        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyEventTypeFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyEventTypeFilter of this LoyaltyEventTypeFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def types(self):
        """Gets the types of this LoyaltyEventTypeFilter.

        The loyalty event types used to filter the result. If multiple values are specified, the endpoint uses a  logical OR to combine them.

        :return: The types of this LoyaltyEventTypeFilter.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this LoyaltyEventTypeFilter.

        The loyalty event types used to filter the result. If multiple values are specified, the endpoint uses a  logical OR to combine them.

        :param types: The types of this LoyaltyEventTypeFilter.
        :type types: List[str]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")

        self._types = types
