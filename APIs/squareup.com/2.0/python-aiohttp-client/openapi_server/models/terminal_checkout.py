# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_checkout_options import DeviceCheckoutOptions
from openapi_server.models.money import Money
from openapi_server import util


class TerminalCheckout(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: Money=None, app_id: str=None, cancel_reason: str=None, created_at: str=None, deadline_duration: str=None, device_options: DeviceCheckoutOptions=None, id: str=None, location_id: str=None, note: str=None, payment_ids: List[str]=None, payment_type: str=None, reference_id: str=None, status: str=None, updated_at: str=None):
        """TerminalCheckout - a model defined in OpenAPI

        :param amount_money: The amount_money of this TerminalCheckout.
        :param app_id: The app_id of this TerminalCheckout.
        :param cancel_reason: The cancel_reason of this TerminalCheckout.
        :param created_at: The created_at of this TerminalCheckout.
        :param deadline_duration: The deadline_duration of this TerminalCheckout.
        :param device_options: The device_options of this TerminalCheckout.
        :param id: The id of this TerminalCheckout.
        :param location_id: The location_id of this TerminalCheckout.
        :param note: The note of this TerminalCheckout.
        :param payment_ids: The payment_ids of this TerminalCheckout.
        :param payment_type: The payment_type of this TerminalCheckout.
        :param reference_id: The reference_id of this TerminalCheckout.
        :param status: The status of this TerminalCheckout.
        :param updated_at: The updated_at of this TerminalCheckout.
        """
        self.openapi_types = {
            'amount_money': Money,
            'app_id': str,
            'cancel_reason': str,
            'created_at': str,
            'deadline_duration': str,
            'device_options': DeviceCheckoutOptions,
            'id': str,
            'location_id': str,
            'note': str,
            'payment_ids': List[str],
            'payment_type': str,
            'reference_id': str,
            'status': str,
            'updated_at': str
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'app_id': 'app_id',
            'cancel_reason': 'cancel_reason',
            'created_at': 'created_at',
            'deadline_duration': 'deadline_duration',
            'device_options': 'device_options',
            'id': 'id',
            'location_id': 'location_id',
            'note': 'note',
            'payment_ids': 'payment_ids',
            'payment_type': 'payment_type',
            'reference_id': 'reference_id',
            'status': 'status',
            'updated_at': 'updated_at'
        }

        self._amount_money = amount_money
        self._app_id = app_id
        self._cancel_reason = cancel_reason
        self._created_at = created_at
        self._deadline_duration = deadline_duration
        self._device_options = device_options
        self._id = id
        self._location_id = location_id
        self._note = note
        self._payment_ids = payment_ids
        self._payment_type = payment_type
        self._reference_id = reference_id
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TerminalCheckout':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TerminalCheckout of this TerminalCheckout.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this TerminalCheckout.


        :return: The amount_money of this TerminalCheckout.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this TerminalCheckout.


        :param amount_money: The amount_money of this TerminalCheckout.
        :type amount_money: Money
        """
        if amount_money is None:
            raise ValueError("Invalid value for `amount_money`, must not be `None`")

        self._amount_money = amount_money

    @property
    def app_id(self):
        """Gets the app_id of this TerminalCheckout.

        The ID of the application that created the checkout.

        :return: The app_id of this TerminalCheckout.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this TerminalCheckout.

        The ID of the application that created the checkout.

        :param app_id: The app_id of this TerminalCheckout.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def cancel_reason(self):
        """Gets the cancel_reason of this TerminalCheckout.

        Present if the status is `CANCELED`.

        :return: The cancel_reason of this TerminalCheckout.
        :rtype: str
        """
        return self._cancel_reason

    @cancel_reason.setter
    def cancel_reason(self, cancel_reason):
        """Sets the cancel_reason of this TerminalCheckout.

        Present if the status is `CANCELED`.

        :param cancel_reason: The cancel_reason of this TerminalCheckout.
        :type cancel_reason: str
        """

        self._cancel_reason = cancel_reason

    @property
    def created_at(self):
        """Gets the created_at of this TerminalCheckout.

        The time when the `TerminalCheckout` was created, as an RFC 3339 timestamp.

        :return: The created_at of this TerminalCheckout.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TerminalCheckout.

        The time when the `TerminalCheckout` was created, as an RFC 3339 timestamp.

        :param created_at: The created_at of this TerminalCheckout.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def deadline_duration(self):
        """Gets the deadline_duration of this TerminalCheckout.

        An RFC 3339 duration, after which the checkout is automatically canceled. A `TerminalCheckout` that is `PENDING` is automatically `CANCELED` and has a cancellation reason of `TIMED_OUT`.  Default: 5 minutes from creation  Maximum: 5 minutes

        :return: The deadline_duration of this TerminalCheckout.
        :rtype: str
        """
        return self._deadline_duration

    @deadline_duration.setter
    def deadline_duration(self, deadline_duration):
        """Sets the deadline_duration of this TerminalCheckout.

        An RFC 3339 duration, after which the checkout is automatically canceled. A `TerminalCheckout` that is `PENDING` is automatically `CANCELED` and has a cancellation reason of `TIMED_OUT`.  Default: 5 minutes from creation  Maximum: 5 minutes

        :param deadline_duration: The deadline_duration of this TerminalCheckout.
        :type deadline_duration: str
        """

        self._deadline_duration = deadline_duration

    @property
    def device_options(self):
        """Gets the device_options of this TerminalCheckout.


        :return: The device_options of this TerminalCheckout.
        :rtype: DeviceCheckoutOptions
        """
        return self._device_options

    @device_options.setter
    def device_options(self, device_options):
        """Sets the device_options of this TerminalCheckout.


        :param device_options: The device_options of this TerminalCheckout.
        :type device_options: DeviceCheckoutOptions
        """
        if device_options is None:
            raise ValueError("Invalid value for `device_options`, must not be `None`")

        self._device_options = device_options

    @property
    def id(self):
        """Gets the id of this TerminalCheckout.

        A unique ID for this `TerminalCheckout`.

        :return: The id of this TerminalCheckout.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TerminalCheckout.

        A unique ID for this `TerminalCheckout`.

        :param id: The id of this TerminalCheckout.
        :type id: str
        """
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")
        if id is not None and len(id) < 10:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `10`")

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this TerminalCheckout.

        The location of the device where the `TerminalCheckout` was directed.

        :return: The location_id of this TerminalCheckout.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this TerminalCheckout.

        The location of the device where the `TerminalCheckout` was directed.

        :param location_id: The location_id of this TerminalCheckout.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def note(self):
        """Gets the note of this TerminalCheckout.

        An optional note to associate with the checkout, as well as with any payments used to complete the checkout.

        :return: The note of this TerminalCheckout.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this TerminalCheckout.

        An optional note to associate with the checkout, as well as with any payments used to complete the checkout.

        :param note: The note of this TerminalCheckout.
        :type note: str
        """
        if note is not None and len(note) > 250:
            raise ValueError("Invalid value for `note`, length must be less than or equal to `250`")

        self._note = note

    @property
    def payment_ids(self):
        """Gets the payment_ids of this TerminalCheckout.

        A list of IDs for payments created by this `TerminalCheckout`.

        :return: The payment_ids of this TerminalCheckout.
        :rtype: List[str]
        """
        return self._payment_ids

    @payment_ids.setter
    def payment_ids(self, payment_ids):
        """Sets the payment_ids of this TerminalCheckout.

        A list of IDs for payments created by this `TerminalCheckout`.

        :param payment_ids: The payment_ids of this TerminalCheckout.
        :type payment_ids: List[str]
        """

        self._payment_ids = payment_ids

    @property
    def payment_type(self):
        """Gets the payment_type of this TerminalCheckout.

        The type of payment the terminal should attempt to capture from. Defaults to `CARD_PRESENT`.

        :return: The payment_type of this TerminalCheckout.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this TerminalCheckout.

        The type of payment the terminal should attempt to capture from. Defaults to `CARD_PRESENT`.

        :param payment_type: The payment_type of this TerminalCheckout.
        :type payment_type: str
        """

        self._payment_type = payment_type

    @property
    def reference_id(self):
        """Gets the reference_id of this TerminalCheckout.

        An optional user-defined reference ID that can be used to associate this `TerminalCheckout` to another entity in an external system. For example, an order ID generated by a third-party shopping cart. The ID is also associated with any payments used to complete the checkout.

        :return: The reference_id of this TerminalCheckout.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this TerminalCheckout.

        An optional user-defined reference ID that can be used to associate this `TerminalCheckout` to another entity in an external system. For example, an order ID generated by a third-party shopping cart. The ID is also associated with any payments used to complete the checkout.

        :param reference_id: The reference_id of this TerminalCheckout.
        :type reference_id: str
        """
        if reference_id is not None and len(reference_id) > 40:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `40`")

        self._reference_id = reference_id

    @property
    def status(self):
        """Gets the status of this TerminalCheckout.

        The status of the `TerminalCheckout`. Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, `COMPLETED`

        :return: The status of this TerminalCheckout.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TerminalCheckout.

        The status of the `TerminalCheckout`. Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, `COMPLETED`

        :param status: The status of this TerminalCheckout.
        :type status: str
        """

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this TerminalCheckout.

        The time when the `TerminalCheckout` was last updated, as an RFC 3339 timestamp.

        :return: The updated_at of this TerminalCheckout.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TerminalCheckout.

        The time when the `TerminalCheckout` was last updated, as an RFC 3339 timestamp.

        :param updated_at: The updated_at of this TerminalCheckout.
        :type updated_at: str
        """

        self._updated_at = updated_at
