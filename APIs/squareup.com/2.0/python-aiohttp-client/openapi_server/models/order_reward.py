# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderReward(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, reward_tier_id: str=None):
        """OrderReward - a model defined in OpenAPI

        :param id: The id of this OrderReward.
        :param reward_tier_id: The reward_tier_id of this OrderReward.
        """
        self.openapi_types = {
            'id': str,
            'reward_tier_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'reward_tier_id': 'reward_tier_id'
        }

        self._id = id
        self._reward_tier_id = reward_tier_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderReward':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderReward of this OrderReward.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OrderReward.

        The identifier of the reward.

        :return: The id of this OrderReward.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderReward.

        The identifier of the reward.

        :param id: The id of this OrderReward.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def reward_tier_id(self):
        """Gets the reward_tier_id of this OrderReward.

        The identifier of the reward tier corresponding to this reward.

        :return: The reward_tier_id of this OrderReward.
        :rtype: str
        """
        return self._reward_tier_id

    @reward_tier_id.setter
    def reward_tier_id(self, reward_tier_id):
        """Sets the reward_tier_id of this OrderReward.

        The identifier of the reward tier corresponding to this reward.

        :param reward_tier_id: The reward_tier_id of this OrderReward.
        :type reward_tier_id: str
        """
        if reward_tier_id is None:
            raise ValueError("Invalid value for `reward_tier_id`, must not be `None`")
        if reward_tier_id is not None and len(reward_tier_id) < 1:
            raise ValueError("Invalid value for `reward_tier_id`, length must be greater than or equal to `1`")

        self._reward_tier_id = reward_tier_id
