# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogProductSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_products: bool=None, name: str=None, product_ids_all: List[str]=None, product_ids_any: List[str]=None, quantity_exact: int=None, quantity_max: int=None, quantity_min: int=None):
        """CatalogProductSet - a model defined in OpenAPI

        :param all_products: The all_products of this CatalogProductSet.
        :param name: The name of this CatalogProductSet.
        :param product_ids_all: The product_ids_all of this CatalogProductSet.
        :param product_ids_any: The product_ids_any of this CatalogProductSet.
        :param quantity_exact: The quantity_exact of this CatalogProductSet.
        :param quantity_max: The quantity_max of this CatalogProductSet.
        :param quantity_min: The quantity_min of this CatalogProductSet.
        """
        self.openapi_types = {
            'all_products': bool,
            'name': str,
            'product_ids_all': List[str],
            'product_ids_any': List[str],
            'quantity_exact': int,
            'quantity_max': int,
            'quantity_min': int
        }

        self.attribute_map = {
            'all_products': 'all_products',
            'name': 'name',
            'product_ids_all': 'product_ids_all',
            'product_ids_any': 'product_ids_any',
            'quantity_exact': 'quantity_exact',
            'quantity_max': 'quantity_max',
            'quantity_min': 'quantity_min'
        }

        self._all_products = all_products
        self._name = name
        self._product_ids_all = product_ids_all
        self._product_ids_any = product_ids_any
        self._quantity_exact = quantity_exact
        self._quantity_max = quantity_max
        self._quantity_min = quantity_min

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogProductSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogProductSet of this CatalogProductSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_products(self):
        """Gets the all_products of this CatalogProductSet.

        If set to `true`, the product set will include every item in the catalog. Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.

        :return: The all_products of this CatalogProductSet.
        :rtype: bool
        """
        return self._all_products

    @all_products.setter
    def all_products(self, all_products):
        """Sets the all_products of this CatalogProductSet.

        If set to `true`, the product set will include every item in the catalog. Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.

        :param all_products: The all_products of this CatalogProductSet.
        :type all_products: bool
        """

        self._all_products = all_products

    @property
    def name(self):
        """Gets the name of this CatalogProductSet.

        User-defined name for the product set. For example, \"Clearance Items\" or \"Winter Sale Items\".

        :return: The name of this CatalogProductSet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogProductSet.

        User-defined name for the product set. For example, \"Clearance Items\" or \"Winter Sale Items\".

        :param name: The name of this CatalogProductSet.
        :type name: str
        """

        self._name = name

    @property
    def product_ids_all(self):
        """Gets the product_ids_all of this CatalogProductSet.

        Unique IDs for any `CatalogObject` included in this product set. All objects in this set must be included in an order for a pricing rule to apply.  Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.  Max: 500 catalog object IDs.

        :return: The product_ids_all of this CatalogProductSet.
        :rtype: List[str]
        """
        return self._product_ids_all

    @product_ids_all.setter
    def product_ids_all(self, product_ids_all):
        """Sets the product_ids_all of this CatalogProductSet.

        Unique IDs for any `CatalogObject` included in this product set. All objects in this set must be included in an order for a pricing rule to apply.  Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.  Max: 500 catalog object IDs.

        :param product_ids_all: The product_ids_all of this CatalogProductSet.
        :type product_ids_all: List[str]
        """

        self._product_ids_all = product_ids_all

    @property
    def product_ids_any(self):
        """Gets the product_ids_any of this CatalogProductSet.

         Unique IDs for any `CatalogObject` included in this product set. Any number of these catalog objects can be in an order for a pricing rule to apply.  This can be used with `product_ids_all` in a parent `CatalogProductSet` to match groups of products for a bulk discount, such as a discount for an entree and side combo.  Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.  Max: 500 catalog object IDs.

        :return: The product_ids_any of this CatalogProductSet.
        :rtype: List[str]
        """
        return self._product_ids_any

    @product_ids_any.setter
    def product_ids_any(self, product_ids_any):
        """Sets the product_ids_any of this CatalogProductSet.

         Unique IDs for any `CatalogObject` included in this product set. Any number of these catalog objects can be in an order for a pricing rule to apply.  This can be used with `product_ids_all` in a parent `CatalogProductSet` to match groups of products for a bulk discount, such as a discount for an entree and side combo.  Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.  Max: 500 catalog object IDs.

        :param product_ids_any: The product_ids_any of this CatalogProductSet.
        :type product_ids_any: List[str]
        """

        self._product_ids_any = product_ids_any

    @property
    def quantity_exact(self):
        """Gets the quantity_exact of this CatalogProductSet.

        If set, there must be exactly this many items from `products_any` or `products_all` in the cart for the discount to apply.  Cannot be combined with either `quantity_min` or `quantity_max`.

        :return: The quantity_exact of this CatalogProductSet.
        :rtype: int
        """
        return self._quantity_exact

    @quantity_exact.setter
    def quantity_exact(self, quantity_exact):
        """Sets the quantity_exact of this CatalogProductSet.

        If set, there must be exactly this many items from `products_any` or `products_all` in the cart for the discount to apply.  Cannot be combined with either `quantity_min` or `quantity_max`.

        :param quantity_exact: The quantity_exact of this CatalogProductSet.
        :type quantity_exact: int
        """

        self._quantity_exact = quantity_exact

    @property
    def quantity_max(self):
        """Gets the quantity_max of this CatalogProductSet.

        If set, the pricing rule will apply to a maximum of this many items from `products_any` or `products_all`.

        :return: The quantity_max of this CatalogProductSet.
        :rtype: int
        """
        return self._quantity_max

    @quantity_max.setter
    def quantity_max(self, quantity_max):
        """Sets the quantity_max of this CatalogProductSet.

        If set, the pricing rule will apply to a maximum of this many items from `products_any` or `products_all`.

        :param quantity_max: The quantity_max of this CatalogProductSet.
        :type quantity_max: int
        """

        self._quantity_max = quantity_max

    @property
    def quantity_min(self):
        """Gets the quantity_min of this CatalogProductSet.

        If set, there must be at least this many items from `products_any` or `products_all` in a cart for the discount to apply. See `quantity_exact`. Defaults to 0 if `quantity_exact`, `quantity_min` and `quantity_max` are all unspecified.

        :return: The quantity_min of this CatalogProductSet.
        :rtype: int
        """
        return self._quantity_min

    @quantity_min.setter
    def quantity_min(self, quantity_min):
        """Sets the quantity_min of this CatalogProductSet.

        If set, there must be at least this many items from `products_any` or `products_all` in a cart for the discount to apply. See `quantity_exact`. Defaults to 0 if `quantity_exact`, `quantity_min` and `quantity_max` are all unspecified.

        :param quantity_min: The quantity_min of this CatalogProductSet.
        :type quantity_min: int
        """

        self._quantity_min = quantity_min
