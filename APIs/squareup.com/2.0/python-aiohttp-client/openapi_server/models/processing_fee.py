# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class ProcessingFee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: Money=None, effective_at: str=None, type: str=None):
        """ProcessingFee - a model defined in OpenAPI

        :param amount_money: The amount_money of this ProcessingFee.
        :param effective_at: The effective_at of this ProcessingFee.
        :param type: The type of this ProcessingFee.
        """
        self.openapi_types = {
            'amount_money': Money,
            'effective_at': str,
            'type': str
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'effective_at': 'effective_at',
            'type': 'type'
        }

        self._amount_money = amount_money
        self._effective_at = effective_at
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProcessingFee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProcessingFee of this ProcessingFee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this ProcessingFee.


        :return: The amount_money of this ProcessingFee.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this ProcessingFee.


        :param amount_money: The amount_money of this ProcessingFee.
        :type amount_money: Money
        """

        self._amount_money = amount_money

    @property
    def effective_at(self):
        """Gets the effective_at of this ProcessingFee.

        The timestamp of when the fee takes effect, in RFC 3339 format.

        :return: The effective_at of this ProcessingFee.
        :rtype: str
        """
        return self._effective_at

    @effective_at.setter
    def effective_at(self, effective_at):
        """Sets the effective_at of this ProcessingFee.

        The timestamp of when the fee takes effect, in RFC 3339 format.

        :param effective_at: The effective_at of this ProcessingFee.
        :type effective_at: str
        """

        self._effective_at = effective_at

    @property
    def type(self):
        """Gets the type of this ProcessingFee.

        The type of fee assessed or adjusted. The fee type can be `INITIAL` or `ADJUSTMENT`.

        :return: The type of this ProcessingFee.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProcessingFee.

        The type of fee assessed or adjusted. The fee type can be `INITIAL` or `ADJUSTMENT`.

        :param type: The type of this ProcessingFee.
        :type type: str
        """

        self._type = type
