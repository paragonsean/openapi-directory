# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class BusinessAppointmentSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alignment_time: str=None, any_team_member_booking_enabled: bool=None, cancellation_fee_money: Money=None, cancellation_policy: str=None, cancellation_policy_text: str=None, cancellation_window_seconds: int=None, location_types: List[str]=None, max_appointments_per_day_limit: int=None, max_appointments_per_day_limit_type: str=None, max_booking_lead_time_seconds: int=None, min_booking_lead_time_seconds: int=None, multiple_service_booking_enabled: bool=None, skip_booking_flow_staff_selection: bool=None):
        """BusinessAppointmentSettings - a model defined in OpenAPI

        :param alignment_time: The alignment_time of this BusinessAppointmentSettings.
        :param any_team_member_booking_enabled: The any_team_member_booking_enabled of this BusinessAppointmentSettings.
        :param cancellation_fee_money: The cancellation_fee_money of this BusinessAppointmentSettings.
        :param cancellation_policy: The cancellation_policy of this BusinessAppointmentSettings.
        :param cancellation_policy_text: The cancellation_policy_text of this BusinessAppointmentSettings.
        :param cancellation_window_seconds: The cancellation_window_seconds of this BusinessAppointmentSettings.
        :param location_types: The location_types of this BusinessAppointmentSettings.
        :param max_appointments_per_day_limit: The max_appointments_per_day_limit of this BusinessAppointmentSettings.
        :param max_appointments_per_day_limit_type: The max_appointments_per_day_limit_type of this BusinessAppointmentSettings.
        :param max_booking_lead_time_seconds: The max_booking_lead_time_seconds of this BusinessAppointmentSettings.
        :param min_booking_lead_time_seconds: The min_booking_lead_time_seconds of this BusinessAppointmentSettings.
        :param multiple_service_booking_enabled: The multiple_service_booking_enabled of this BusinessAppointmentSettings.
        :param skip_booking_flow_staff_selection: The skip_booking_flow_staff_selection of this BusinessAppointmentSettings.
        """
        self.openapi_types = {
            'alignment_time': str,
            'any_team_member_booking_enabled': bool,
            'cancellation_fee_money': Money,
            'cancellation_policy': str,
            'cancellation_policy_text': str,
            'cancellation_window_seconds': int,
            'location_types': List[str],
            'max_appointments_per_day_limit': int,
            'max_appointments_per_day_limit_type': str,
            'max_booking_lead_time_seconds': int,
            'min_booking_lead_time_seconds': int,
            'multiple_service_booking_enabled': bool,
            'skip_booking_flow_staff_selection': bool
        }

        self.attribute_map = {
            'alignment_time': 'alignment_time',
            'any_team_member_booking_enabled': 'any_team_member_booking_enabled',
            'cancellation_fee_money': 'cancellation_fee_money',
            'cancellation_policy': 'cancellation_policy',
            'cancellation_policy_text': 'cancellation_policy_text',
            'cancellation_window_seconds': 'cancellation_window_seconds',
            'location_types': 'location_types',
            'max_appointments_per_day_limit': 'max_appointments_per_day_limit',
            'max_appointments_per_day_limit_type': 'max_appointments_per_day_limit_type',
            'max_booking_lead_time_seconds': 'max_booking_lead_time_seconds',
            'min_booking_lead_time_seconds': 'min_booking_lead_time_seconds',
            'multiple_service_booking_enabled': 'multiple_service_booking_enabled',
            'skip_booking_flow_staff_selection': 'skip_booking_flow_staff_selection'
        }

        self._alignment_time = alignment_time
        self._any_team_member_booking_enabled = any_team_member_booking_enabled
        self._cancellation_fee_money = cancellation_fee_money
        self._cancellation_policy = cancellation_policy
        self._cancellation_policy_text = cancellation_policy_text
        self._cancellation_window_seconds = cancellation_window_seconds
        self._location_types = location_types
        self._max_appointments_per_day_limit = max_appointments_per_day_limit
        self._max_appointments_per_day_limit_type = max_appointments_per_day_limit_type
        self._max_booking_lead_time_seconds = max_booking_lead_time_seconds
        self._min_booking_lead_time_seconds = min_booking_lead_time_seconds
        self._multiple_service_booking_enabled = multiple_service_booking_enabled
        self._skip_booking_flow_staff_selection = skip_booking_flow_staff_selection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BusinessAppointmentSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BusinessAppointmentSettings of this BusinessAppointmentSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alignment_time(self):
        """Gets the alignment_time of this BusinessAppointmentSettings.

        The time unit of the service duration for bookings.

        :return: The alignment_time of this BusinessAppointmentSettings.
        :rtype: str
        """
        return self._alignment_time

    @alignment_time.setter
    def alignment_time(self, alignment_time):
        """Sets the alignment_time of this BusinessAppointmentSettings.

        The time unit of the service duration for bookings.

        :param alignment_time: The alignment_time of this BusinessAppointmentSettings.
        :type alignment_time: str
        """

        self._alignment_time = alignment_time

    @property
    def any_team_member_booking_enabled(self):
        """Gets the any_team_member_booking_enabled of this BusinessAppointmentSettings.

        Indicates whether a customer can choose from all available time slots and have a staff member assigned automatically (`true`) or not (`false`).

        :return: The any_team_member_booking_enabled of this BusinessAppointmentSettings.
        :rtype: bool
        """
        return self._any_team_member_booking_enabled

    @any_team_member_booking_enabled.setter
    def any_team_member_booking_enabled(self, any_team_member_booking_enabled):
        """Sets the any_team_member_booking_enabled of this BusinessAppointmentSettings.

        Indicates whether a customer can choose from all available time slots and have a staff member assigned automatically (`true`) or not (`false`).

        :param any_team_member_booking_enabled: The any_team_member_booking_enabled of this BusinessAppointmentSettings.
        :type any_team_member_booking_enabled: bool
        """

        self._any_team_member_booking_enabled = any_team_member_booking_enabled

    @property
    def cancellation_fee_money(self):
        """Gets the cancellation_fee_money of this BusinessAppointmentSettings.


        :return: The cancellation_fee_money of this BusinessAppointmentSettings.
        :rtype: Money
        """
        return self._cancellation_fee_money

    @cancellation_fee_money.setter
    def cancellation_fee_money(self, cancellation_fee_money):
        """Sets the cancellation_fee_money of this BusinessAppointmentSettings.


        :param cancellation_fee_money: The cancellation_fee_money of this BusinessAppointmentSettings.
        :type cancellation_fee_money: Money
        """

        self._cancellation_fee_money = cancellation_fee_money

    @property
    def cancellation_policy(self):
        """Gets the cancellation_policy of this BusinessAppointmentSettings.

        The cancellation policy adopted by the seller.

        :return: The cancellation_policy of this BusinessAppointmentSettings.
        :rtype: str
        """
        return self._cancellation_policy

    @cancellation_policy.setter
    def cancellation_policy(self, cancellation_policy):
        """Sets the cancellation_policy of this BusinessAppointmentSettings.

        The cancellation policy adopted by the seller.

        :param cancellation_policy: The cancellation_policy of this BusinessAppointmentSettings.
        :type cancellation_policy: str
        """

        self._cancellation_policy = cancellation_policy

    @property
    def cancellation_policy_text(self):
        """Gets the cancellation_policy_text of this BusinessAppointmentSettings.

        The free-form text of the seller's cancellation policy.

        :return: The cancellation_policy_text of this BusinessAppointmentSettings.
        :rtype: str
        """
        return self._cancellation_policy_text

    @cancellation_policy_text.setter
    def cancellation_policy_text(self, cancellation_policy_text):
        """Sets the cancellation_policy_text of this BusinessAppointmentSettings.

        The free-form text of the seller's cancellation policy.

        :param cancellation_policy_text: The cancellation_policy_text of this BusinessAppointmentSettings.
        :type cancellation_policy_text: str
        """

        self._cancellation_policy_text = cancellation_policy_text

    @property
    def cancellation_window_seconds(self):
        """Gets the cancellation_window_seconds of this BusinessAppointmentSettings.

        The cut-off time in seconds for allowing clients to cancel or reschedule an appointment.

        :return: The cancellation_window_seconds of this BusinessAppointmentSettings.
        :rtype: int
        """
        return self._cancellation_window_seconds

    @cancellation_window_seconds.setter
    def cancellation_window_seconds(self, cancellation_window_seconds):
        """Sets the cancellation_window_seconds of this BusinessAppointmentSettings.

        The cut-off time in seconds for allowing clients to cancel or reschedule an appointment.

        :param cancellation_window_seconds: The cancellation_window_seconds of this BusinessAppointmentSettings.
        :type cancellation_window_seconds: int
        """

        self._cancellation_window_seconds = cancellation_window_seconds

    @property
    def location_types(self):
        """Gets the location_types of this BusinessAppointmentSettings.

        Types of the location allowed for bookings.

        :return: The location_types of this BusinessAppointmentSettings.
        :rtype: List[str]
        """
        return self._location_types

    @location_types.setter
    def location_types(self, location_types):
        """Sets the location_types of this BusinessAppointmentSettings.

        Types of the location allowed for bookings.

        :param location_types: The location_types of this BusinessAppointmentSettings.
        :type location_types: List[str]
        """

        self._location_types = location_types

    @property
    def max_appointments_per_day_limit(self):
        """Gets the max_appointments_per_day_limit of this BusinessAppointmentSettings.

        The maximum number of daily appointments per team member or per location.

        :return: The max_appointments_per_day_limit of this BusinessAppointmentSettings.
        :rtype: int
        """
        return self._max_appointments_per_day_limit

    @max_appointments_per_day_limit.setter
    def max_appointments_per_day_limit(self, max_appointments_per_day_limit):
        """Sets the max_appointments_per_day_limit of this BusinessAppointmentSettings.

        The maximum number of daily appointments per team member or per location.

        :param max_appointments_per_day_limit: The max_appointments_per_day_limit of this BusinessAppointmentSettings.
        :type max_appointments_per_day_limit: int
        """

        self._max_appointments_per_day_limit = max_appointments_per_day_limit

    @property
    def max_appointments_per_day_limit_type(self):
        """Gets the max_appointments_per_day_limit_type of this BusinessAppointmentSettings.

        Indicates whether the daily appointment limit applies to team members or to business locations.

        :return: The max_appointments_per_day_limit_type of this BusinessAppointmentSettings.
        :rtype: str
        """
        return self._max_appointments_per_day_limit_type

    @max_appointments_per_day_limit_type.setter
    def max_appointments_per_day_limit_type(self, max_appointments_per_day_limit_type):
        """Sets the max_appointments_per_day_limit_type of this BusinessAppointmentSettings.

        Indicates whether the daily appointment limit applies to team members or to business locations.

        :param max_appointments_per_day_limit_type: The max_appointments_per_day_limit_type of this BusinessAppointmentSettings.
        :type max_appointments_per_day_limit_type: str
        """

        self._max_appointments_per_day_limit_type = max_appointments_per_day_limit_type

    @property
    def max_booking_lead_time_seconds(self):
        """Gets the max_booking_lead_time_seconds of this BusinessAppointmentSettings.

        The maximum lead time in seconds before a service can be booked. Bookings must be created at most this far ahead of the booking's starting time.

        :return: The max_booking_lead_time_seconds of this BusinessAppointmentSettings.
        :rtype: int
        """
        return self._max_booking_lead_time_seconds

    @max_booking_lead_time_seconds.setter
    def max_booking_lead_time_seconds(self, max_booking_lead_time_seconds):
        """Sets the max_booking_lead_time_seconds of this BusinessAppointmentSettings.

        The maximum lead time in seconds before a service can be booked. Bookings must be created at most this far ahead of the booking's starting time.

        :param max_booking_lead_time_seconds: The max_booking_lead_time_seconds of this BusinessAppointmentSettings.
        :type max_booking_lead_time_seconds: int
        """

        self._max_booking_lead_time_seconds = max_booking_lead_time_seconds

    @property
    def min_booking_lead_time_seconds(self):
        """Gets the min_booking_lead_time_seconds of this BusinessAppointmentSettings.

        The minimum lead time in seconds before a service can be booked. Bookings must be created at least this far ahead of the booking's starting time.

        :return: The min_booking_lead_time_seconds of this BusinessAppointmentSettings.
        :rtype: int
        """
        return self._min_booking_lead_time_seconds

    @min_booking_lead_time_seconds.setter
    def min_booking_lead_time_seconds(self, min_booking_lead_time_seconds):
        """Sets the min_booking_lead_time_seconds of this BusinessAppointmentSettings.

        The minimum lead time in seconds before a service can be booked. Bookings must be created at least this far ahead of the booking's starting time.

        :param min_booking_lead_time_seconds: The min_booking_lead_time_seconds of this BusinessAppointmentSettings.
        :type min_booking_lead_time_seconds: int
        """

        self._min_booking_lead_time_seconds = min_booking_lead_time_seconds

    @property
    def multiple_service_booking_enabled(self):
        """Gets the multiple_service_booking_enabled of this BusinessAppointmentSettings.

        Indicates whether a customer can book multiple services in a single online booking.

        :return: The multiple_service_booking_enabled of this BusinessAppointmentSettings.
        :rtype: bool
        """
        return self._multiple_service_booking_enabled

    @multiple_service_booking_enabled.setter
    def multiple_service_booking_enabled(self, multiple_service_booking_enabled):
        """Sets the multiple_service_booking_enabled of this BusinessAppointmentSettings.

        Indicates whether a customer can book multiple services in a single online booking.

        :param multiple_service_booking_enabled: The multiple_service_booking_enabled of this BusinessAppointmentSettings.
        :type multiple_service_booking_enabled: bool
        """

        self._multiple_service_booking_enabled = multiple_service_booking_enabled

    @property
    def skip_booking_flow_staff_selection(self):
        """Gets the skip_booking_flow_staff_selection of this BusinessAppointmentSettings.

        Indicates whether customers has an assigned staff member (`true`) or can select s staff member of their choice (`false`).

        :return: The skip_booking_flow_staff_selection of this BusinessAppointmentSettings.
        :rtype: bool
        """
        return self._skip_booking_flow_staff_selection

    @skip_booking_flow_staff_selection.setter
    def skip_booking_flow_staff_selection(self, skip_booking_flow_staff_selection):
        """Sets the skip_booking_flow_staff_selection of this BusinessAppointmentSettings.

        Indicates whether customers has an assigned staff member (`true`) or can select s staff member of their choice (`false`).

        :param skip_booking_flow_staff_selection: The skip_booking_flow_staff_selection of this BusinessAppointmentSettings.
        :type skip_booking_flow_staff_selection: bool
        """

        self._skip_booking_flow_staff_selection = skip_booking_flow_staff_selection
