# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class JobAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annual_rate: Money=None, hourly_rate: Money=None, job_title: str=None, pay_type: str=None, weekly_hours: int=None):
        """JobAssignment - a model defined in OpenAPI

        :param annual_rate: The annual_rate of this JobAssignment.
        :param hourly_rate: The hourly_rate of this JobAssignment.
        :param job_title: The job_title of this JobAssignment.
        :param pay_type: The pay_type of this JobAssignment.
        :param weekly_hours: The weekly_hours of this JobAssignment.
        """
        self.openapi_types = {
            'annual_rate': Money,
            'hourly_rate': Money,
            'job_title': str,
            'pay_type': str,
            'weekly_hours': int
        }

        self.attribute_map = {
            'annual_rate': 'annual_rate',
            'hourly_rate': 'hourly_rate',
            'job_title': 'job_title',
            'pay_type': 'pay_type',
            'weekly_hours': 'weekly_hours'
        }

        self._annual_rate = annual_rate
        self._hourly_rate = hourly_rate
        self._job_title = job_title
        self._pay_type = pay_type
        self._weekly_hours = weekly_hours

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobAssignment of this JobAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annual_rate(self):
        """Gets the annual_rate of this JobAssignment.


        :return: The annual_rate of this JobAssignment.
        :rtype: Money
        """
        return self._annual_rate

    @annual_rate.setter
    def annual_rate(self, annual_rate):
        """Sets the annual_rate of this JobAssignment.


        :param annual_rate: The annual_rate of this JobAssignment.
        :type annual_rate: Money
        """

        self._annual_rate = annual_rate

    @property
    def hourly_rate(self):
        """Gets the hourly_rate of this JobAssignment.


        :return: The hourly_rate of this JobAssignment.
        :rtype: Money
        """
        return self._hourly_rate

    @hourly_rate.setter
    def hourly_rate(self, hourly_rate):
        """Sets the hourly_rate of this JobAssignment.


        :param hourly_rate: The hourly_rate of this JobAssignment.
        :type hourly_rate: Money
        """

        self._hourly_rate = hourly_rate

    @property
    def job_title(self):
        """Gets the job_title of this JobAssignment.

        The title of the job.

        :return: The job_title of this JobAssignment.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this JobAssignment.

        The title of the job.

        :param job_title: The job_title of this JobAssignment.
        :type job_title: str
        """
        if job_title is None:
            raise ValueError("Invalid value for `job_title`, must not be `None`")
        if job_title is not None and len(job_title) < 1:
            raise ValueError("Invalid value for `job_title`, length must be greater than or equal to `1`")

        self._job_title = job_title

    @property
    def pay_type(self):
        """Gets the pay_type of this JobAssignment.

        The current pay type for the job assignment used to calculate the pay amount in a pay period.

        :return: The pay_type of this JobAssignment.
        :rtype: str
        """
        return self._pay_type

    @pay_type.setter
    def pay_type(self, pay_type):
        """Sets the pay_type of this JobAssignment.

        The current pay type for the job assignment used to calculate the pay amount in a pay period.

        :param pay_type: The pay_type of this JobAssignment.
        :type pay_type: str
        """
        if pay_type is None:
            raise ValueError("Invalid value for `pay_type`, must not be `None`")

        self._pay_type = pay_type

    @property
    def weekly_hours(self):
        """Gets the weekly_hours of this JobAssignment.

        The planned hours per week for the job. Set if the job `PayType` is `SALARY`.

        :return: The weekly_hours of this JobAssignment.
        :rtype: int
        """
        return self._weekly_hours

    @weekly_hours.setter
    def weekly_hours(self, weekly_hours):
        """Sets the weekly_hours of this JobAssignment.

        The planned hours per week for the job. Set if the job `PayType` is `SALARY`.

        :param weekly_hours: The weekly_hours of this JobAssignment.
        :type weekly_hours: int
        """

        self._weekly_hours = weekly_hours
