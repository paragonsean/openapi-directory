# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server.models.order_fulfillment import OrderFulfillment
from openapi_server.models.order_line_item import OrderLineItem
from openapi_server.models.order_line_item_discount import OrderLineItemDiscount
from openapi_server.models.order_line_item_tax import OrderLineItemTax
from openapi_server.models.order_money_amounts import OrderMoneyAmounts
from openapi_server.models.order_pricing_options import OrderPricingOptions
from openapi_server.models.order_return import OrderReturn
from openapi_server.models.order_reward import OrderReward
from openapi_server.models.order_rounding_adjustment import OrderRoundingAdjustment
from openapi_server.models.order_service_charge import OrderServiceCharge
from openapi_server.models.order_source import OrderSource
from openapi_server.models.refund import Refund
from openapi_server.models.tender import Tender
from openapi_server import util


class Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed_at: str=None, created_at: str=None, customer_id: str=None, discounts: List[OrderLineItemDiscount]=None, fulfillments: List[OrderFulfillment]=None, id: str=None, line_items: List[OrderLineItem]=None, location_id: str=None, metadata: Dict[str, str]=None, net_amounts: OrderMoneyAmounts=None, pricing_options: OrderPricingOptions=None, reference_id: str=None, refunds: List[Refund]=None, return_amounts: OrderMoneyAmounts=None, returns: List[OrderReturn]=None, rewards: List[OrderReward]=None, rounding_adjustment: OrderRoundingAdjustment=None, service_charges: List[OrderServiceCharge]=None, source: OrderSource=None, state: str=None, taxes: List[OrderLineItemTax]=None, tenders: List[Tender]=None, total_discount_money: Money=None, total_money: Money=None, total_service_charge_money: Money=None, total_tax_money: Money=None, total_tip_money: Money=None, updated_at: str=None, version: int=None):
        """Order - a model defined in OpenAPI

        :param closed_at: The closed_at of this Order.
        :param created_at: The created_at of this Order.
        :param customer_id: The customer_id of this Order.
        :param discounts: The discounts of this Order.
        :param fulfillments: The fulfillments of this Order.
        :param id: The id of this Order.
        :param line_items: The line_items of this Order.
        :param location_id: The location_id of this Order.
        :param metadata: The metadata of this Order.
        :param net_amounts: The net_amounts of this Order.
        :param pricing_options: The pricing_options of this Order.
        :param reference_id: The reference_id of this Order.
        :param refunds: The refunds of this Order.
        :param return_amounts: The return_amounts of this Order.
        :param returns: The returns of this Order.
        :param rewards: The rewards of this Order.
        :param rounding_adjustment: The rounding_adjustment of this Order.
        :param service_charges: The service_charges of this Order.
        :param source: The source of this Order.
        :param state: The state of this Order.
        :param taxes: The taxes of this Order.
        :param tenders: The tenders of this Order.
        :param total_discount_money: The total_discount_money of this Order.
        :param total_money: The total_money of this Order.
        :param total_service_charge_money: The total_service_charge_money of this Order.
        :param total_tax_money: The total_tax_money of this Order.
        :param total_tip_money: The total_tip_money of this Order.
        :param updated_at: The updated_at of this Order.
        :param version: The version of this Order.
        """
        self.openapi_types = {
            'closed_at': str,
            'created_at': str,
            'customer_id': str,
            'discounts': List[OrderLineItemDiscount],
            'fulfillments': List[OrderFulfillment],
            'id': str,
            'line_items': List[OrderLineItem],
            'location_id': str,
            'metadata': Dict[str, str],
            'net_amounts': OrderMoneyAmounts,
            'pricing_options': OrderPricingOptions,
            'reference_id': str,
            'refunds': List[Refund],
            'return_amounts': OrderMoneyAmounts,
            'returns': List[OrderReturn],
            'rewards': List[OrderReward],
            'rounding_adjustment': OrderRoundingAdjustment,
            'service_charges': List[OrderServiceCharge],
            'source': OrderSource,
            'state': str,
            'taxes': List[OrderLineItemTax],
            'tenders': List[Tender],
            'total_discount_money': Money,
            'total_money': Money,
            'total_service_charge_money': Money,
            'total_tax_money': Money,
            'total_tip_money': Money,
            'updated_at': str,
            'version': int
        }

        self.attribute_map = {
            'closed_at': 'closed_at',
            'created_at': 'created_at',
            'customer_id': 'customer_id',
            'discounts': 'discounts',
            'fulfillments': 'fulfillments',
            'id': 'id',
            'line_items': 'line_items',
            'location_id': 'location_id',
            'metadata': 'metadata',
            'net_amounts': 'net_amounts',
            'pricing_options': 'pricing_options',
            'reference_id': 'reference_id',
            'refunds': 'refunds',
            'return_amounts': 'return_amounts',
            'returns': 'returns',
            'rewards': 'rewards',
            'rounding_adjustment': 'rounding_adjustment',
            'service_charges': 'service_charges',
            'source': 'source',
            'state': 'state',
            'taxes': 'taxes',
            'tenders': 'tenders',
            'total_discount_money': 'total_discount_money',
            'total_money': 'total_money',
            'total_service_charge_money': 'total_service_charge_money',
            'total_tax_money': 'total_tax_money',
            'total_tip_money': 'total_tip_money',
            'updated_at': 'updated_at',
            'version': 'version'
        }

        self._closed_at = closed_at
        self._created_at = created_at
        self._customer_id = customer_id
        self._discounts = discounts
        self._fulfillments = fulfillments
        self._id = id
        self._line_items = line_items
        self._location_id = location_id
        self._metadata = metadata
        self._net_amounts = net_amounts
        self._pricing_options = pricing_options
        self._reference_id = reference_id
        self._refunds = refunds
        self._return_amounts = return_amounts
        self._returns = returns
        self._rewards = rewards
        self._rounding_adjustment = rounding_adjustment
        self._service_charges = service_charges
        self._source = source
        self._state = state
        self._taxes = taxes
        self._tenders = tenders
        self._total_discount_money = total_discount_money
        self._total_money = total_money
        self._total_service_charge_money = total_service_charge_money
        self._total_tax_money = total_tax_money
        self._total_tip_money = total_tip_money
        self._updated_at = updated_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order of this Order.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed_at(self):
        """Gets the closed_at of this Order.

        The timestamp for when the order reached a terminal [state](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderState), in RFC 3339 format (for example \"2016-09-04T23:59:33.123Z\").

        :return: The closed_at of this Order.
        :rtype: str
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at):
        """Sets the closed_at of this Order.

        The timestamp for when the order reached a terminal [state](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderState), in RFC 3339 format (for example \"2016-09-04T23:59:33.123Z\").

        :param closed_at: The closed_at of this Order.
        :type closed_at: str
        """

        self._closed_at = closed_at

    @property
    def created_at(self):
        """Gets the created_at of this Order.

        The timestamp for when the order was created, in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").

        :return: The created_at of this Order.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Order.

        The timestamp for when the order was created, in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").

        :param created_at: The created_at of this Order.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def customer_id(self):
        """Gets the customer_id of this Order.

        The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) associated with the order.  __IMPORTANT:__ You should specify a `customer_id` if you want the corresponding payment transactions to be explicitly linked to the customer in the Seller Dashboard. If this field is omitted, the  `customer_id` assigned to any underlying `Payment` objects is ignored and might result in the  creation of new [instant profiles](https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).

        :return: The customer_id of this Order.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Order.

        The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) associated with the order.  __IMPORTANT:__ You should specify a `customer_id` if you want the corresponding payment transactions to be explicitly linked to the customer in the Seller Dashboard. If this field is omitted, the  `customer_id` assigned to any underlying `Payment` objects is ignored and might result in the  creation of new [instant profiles](https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).

        :param customer_id: The customer_id of this Order.
        :type customer_id: str
        """
        if customer_id is not None and len(customer_id) > 191:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `191`")

        self._customer_id = customer_id

    @property
    def discounts(self):
        """Gets the discounts of this Order.

        The list of all discounts associated with the order.  Discounts can be scoped to either `ORDER` or `LINE_ITEM`. For discounts scoped to `LINE_ITEM`, an `OrderLineItemAppliedDiscount` must be added to each line item that the discount applies to. For discounts with `ORDER` scope, the server generates an `OrderLineItemAppliedDiscount` for every line item.  __IMPORTANT__: If `LINE_ITEM` scope is set on any discounts in this field, using the deprecated `line_items.discounts` field results in an error. Use `line_items.applied_discounts` instead.

        :return: The discounts of this Order.
        :rtype: List[OrderLineItemDiscount]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this Order.

        The list of all discounts associated with the order.  Discounts can be scoped to either `ORDER` or `LINE_ITEM`. For discounts scoped to `LINE_ITEM`, an `OrderLineItemAppliedDiscount` must be added to each line item that the discount applies to. For discounts with `ORDER` scope, the server generates an `OrderLineItemAppliedDiscount` for every line item.  __IMPORTANT__: If `LINE_ITEM` scope is set on any discounts in this field, using the deprecated `line_items.discounts` field results in an error. Use `line_items.applied_discounts` instead.

        :param discounts: The discounts of this Order.
        :type discounts: List[OrderLineItemDiscount]
        """

        self._discounts = discounts

    @property
    def fulfillments(self):
        """Gets the fulfillments of this Order.

        Details about order fulfillment.  Orders can only be created with at most one fulfillment. However, orders returned by the API might contain multiple fulfillments.

        :return: The fulfillments of this Order.
        :rtype: List[OrderFulfillment]
        """
        return self._fulfillments

    @fulfillments.setter
    def fulfillments(self, fulfillments):
        """Sets the fulfillments of this Order.

        Details about order fulfillment.  Orders can only be created with at most one fulfillment. However, orders returned by the API might contain multiple fulfillments.

        :param fulfillments: The fulfillments of this Order.
        :type fulfillments: List[OrderFulfillment]
        """

        self._fulfillments = fulfillments

    @property
    def id(self):
        """Gets the id of this Order.

        The order's unique ID.

        :return: The id of this Order.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Order.

        The order's unique ID.

        :param id: The id of this Order.
        :type id: str
        """

        self._id = id

    @property
    def line_items(self):
        """Gets the line_items of this Order.

        The line items included in the order.

        :return: The line_items of this Order.
        :rtype: List[OrderLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this Order.

        The line items included in the order.

        :param line_items: The line_items of this Order.
        :type line_items: List[OrderLineItem]
        """

        self._line_items = line_items

    @property
    def location_id(self):
        """Gets the location_id of this Order.

        The ID of the seller location that this order is associated with.

        :return: The location_id of this Order.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Order.

        The ID of the seller location that this order is associated with.

        :param location_id: The location_id of this Order.
        :type location_id: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")
        if location_id is not None and len(location_id) < 1:
            raise ValueError("Invalid value for `location_id`, length must be greater than or equal to `1`")

        self._location_id = location_id

    @property
    def metadata(self):
        """Gets the metadata of this Order.

        Application-defined data attached to this order. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).

        :return: The metadata of this Order.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Order.

        Application-defined data attached to this order. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).

        :param metadata: The metadata of this Order.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def net_amounts(self):
        """Gets the net_amounts of this Order.


        :return: The net_amounts of this Order.
        :rtype: OrderMoneyAmounts
        """
        return self._net_amounts

    @net_amounts.setter
    def net_amounts(self, net_amounts):
        """Sets the net_amounts of this Order.


        :param net_amounts: The net_amounts of this Order.
        :type net_amounts: OrderMoneyAmounts
        """

        self._net_amounts = net_amounts

    @property
    def pricing_options(self):
        """Gets the pricing_options of this Order.


        :return: The pricing_options of this Order.
        :rtype: OrderPricingOptions
        """
        return self._pricing_options

    @pricing_options.setter
    def pricing_options(self, pricing_options):
        """Sets the pricing_options of this Order.


        :param pricing_options: The pricing_options of this Order.
        :type pricing_options: OrderPricingOptions
        """

        self._pricing_options = pricing_options

    @property
    def reference_id(self):
        """Gets the reference_id of this Order.

        A client-specified ID to associate an entity in another system with this order.

        :return: The reference_id of this Order.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this Order.

        A client-specified ID to associate an entity in another system with this order.

        :param reference_id: The reference_id of this Order.
        :type reference_id: str
        """
        if reference_id is not None and len(reference_id) > 40:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `40`")

        self._reference_id = reference_id

    @property
    def refunds(self):
        """Gets the refunds of this Order.

        The refunds that are part of this order.

        :return: The refunds of this Order.
        :rtype: List[Refund]
        """
        return self._refunds

    @refunds.setter
    def refunds(self, refunds):
        """Sets the refunds of this Order.

        The refunds that are part of this order.

        :param refunds: The refunds of this Order.
        :type refunds: List[Refund]
        """

        self._refunds = refunds

    @property
    def return_amounts(self):
        """Gets the return_amounts of this Order.


        :return: The return_amounts of this Order.
        :rtype: OrderMoneyAmounts
        """
        return self._return_amounts

    @return_amounts.setter
    def return_amounts(self, return_amounts):
        """Sets the return_amounts of this Order.


        :param return_amounts: The return_amounts of this Order.
        :type return_amounts: OrderMoneyAmounts
        """

        self._return_amounts = return_amounts

    @property
    def returns(self):
        """Gets the returns of this Order.

        A collection of items from sale orders being returned in this one. Normally part of an itemized return or exchange. There is exactly one `Return` object per sale `Order` being referenced.

        :return: The returns of this Order.
        :rtype: List[OrderReturn]
        """
        return self._returns

    @returns.setter
    def returns(self, returns):
        """Sets the returns of this Order.

        A collection of items from sale orders being returned in this one. Normally part of an itemized return or exchange. There is exactly one `Return` object per sale `Order` being referenced.

        :param returns: The returns of this Order.
        :type returns: List[OrderReturn]
        """

        self._returns = returns

    @property
    def rewards(self):
        """Gets the rewards of this Order.

        A set-like list of Rewards that have been added to the Order.

        :return: The rewards of this Order.
        :rtype: List[OrderReward]
        """
        return self._rewards

    @rewards.setter
    def rewards(self, rewards):
        """Sets the rewards of this Order.

        A set-like list of Rewards that have been added to the Order.

        :param rewards: The rewards of this Order.
        :type rewards: List[OrderReward]
        """

        self._rewards = rewards

    @property
    def rounding_adjustment(self):
        """Gets the rounding_adjustment of this Order.


        :return: The rounding_adjustment of this Order.
        :rtype: OrderRoundingAdjustment
        """
        return self._rounding_adjustment

    @rounding_adjustment.setter
    def rounding_adjustment(self, rounding_adjustment):
        """Sets the rounding_adjustment of this Order.


        :param rounding_adjustment: The rounding_adjustment of this Order.
        :type rounding_adjustment: OrderRoundingAdjustment
        """

        self._rounding_adjustment = rounding_adjustment

    @property
    def service_charges(self):
        """Gets the service_charges of this Order.

        A list of service charges applied to the order.

        :return: The service_charges of this Order.
        :rtype: List[OrderServiceCharge]
        """
        return self._service_charges

    @service_charges.setter
    def service_charges(self, service_charges):
        """Sets the service_charges of this Order.

        A list of service charges applied to the order.

        :param service_charges: The service_charges of this Order.
        :type service_charges: List[OrderServiceCharge]
        """

        self._service_charges = service_charges

    @property
    def source(self):
        """Gets the source of this Order.


        :return: The source of this Order.
        :rtype: OrderSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Order.


        :param source: The source of this Order.
        :type source: OrderSource
        """

        self._source = source

    @property
    def state(self):
        """Gets the state of this Order.

        The current state of the order: `OPEN`, `COMPLETED`, or `CANCELED`.

        :return: The state of this Order.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Order.

        The current state of the order: `OPEN`, `COMPLETED`, or `CANCELED`.

        :param state: The state of this Order.
        :type state: str
        """

        self._state = state

    @property
    def taxes(self):
        """Gets the taxes of this Order.

        The list of all taxes associated with the order.  Taxes can be scoped to either `ORDER` or `LINE_ITEM`. For taxes with `LINE_ITEM` scope, an `OrderLineItemAppliedTax` must be added to each line item that the tax applies to. For taxes with `ORDER` scope, the server generates an `OrderLineItemAppliedTax` for every line item.  On reads, each tax in the list includes the total amount of that tax applied to the order.  __IMPORTANT__: If `LINE_ITEM` scope is set on any taxes in this field, using the deprecated `line_items.taxes` field results in an error. Use `line_items.applied_taxes` instead.

        :return: The taxes of this Order.
        :rtype: List[OrderLineItemTax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this Order.

        The list of all taxes associated with the order.  Taxes can be scoped to either `ORDER` or `LINE_ITEM`. For taxes with `LINE_ITEM` scope, an `OrderLineItemAppliedTax` must be added to each line item that the tax applies to. For taxes with `ORDER` scope, the server generates an `OrderLineItemAppliedTax` for every line item.  On reads, each tax in the list includes the total amount of that tax applied to the order.  __IMPORTANT__: If `LINE_ITEM` scope is set on any taxes in this field, using the deprecated `line_items.taxes` field results in an error. Use `line_items.applied_taxes` instead.

        :param taxes: The taxes of this Order.
        :type taxes: List[OrderLineItemTax]
        """

        self._taxes = taxes

    @property
    def tenders(self):
        """Gets the tenders of this Order.

        The tenders that were used to pay for the order.

        :return: The tenders of this Order.
        :rtype: List[Tender]
        """
        return self._tenders

    @tenders.setter
    def tenders(self, tenders):
        """Sets the tenders of this Order.

        The tenders that were used to pay for the order.

        :param tenders: The tenders of this Order.
        :type tenders: List[Tender]
        """

        self._tenders = tenders

    @property
    def total_discount_money(self):
        """Gets the total_discount_money of this Order.


        :return: The total_discount_money of this Order.
        :rtype: Money
        """
        return self._total_discount_money

    @total_discount_money.setter
    def total_discount_money(self, total_discount_money):
        """Sets the total_discount_money of this Order.


        :param total_discount_money: The total_discount_money of this Order.
        :type total_discount_money: Money
        """

        self._total_discount_money = total_discount_money

    @property
    def total_money(self):
        """Gets the total_money of this Order.


        :return: The total_money of this Order.
        :rtype: Money
        """
        return self._total_money

    @total_money.setter
    def total_money(self, total_money):
        """Sets the total_money of this Order.


        :param total_money: The total_money of this Order.
        :type total_money: Money
        """

        self._total_money = total_money

    @property
    def total_service_charge_money(self):
        """Gets the total_service_charge_money of this Order.


        :return: The total_service_charge_money of this Order.
        :rtype: Money
        """
        return self._total_service_charge_money

    @total_service_charge_money.setter
    def total_service_charge_money(self, total_service_charge_money):
        """Sets the total_service_charge_money of this Order.


        :param total_service_charge_money: The total_service_charge_money of this Order.
        :type total_service_charge_money: Money
        """

        self._total_service_charge_money = total_service_charge_money

    @property
    def total_tax_money(self):
        """Gets the total_tax_money of this Order.


        :return: The total_tax_money of this Order.
        :rtype: Money
        """
        return self._total_tax_money

    @total_tax_money.setter
    def total_tax_money(self, total_tax_money):
        """Sets the total_tax_money of this Order.


        :param total_tax_money: The total_tax_money of this Order.
        :type total_tax_money: Money
        """

        self._total_tax_money = total_tax_money

    @property
    def total_tip_money(self):
        """Gets the total_tip_money of this Order.


        :return: The total_tip_money of this Order.
        :rtype: Money
        """
        return self._total_tip_money

    @total_tip_money.setter
    def total_tip_money(self, total_tip_money):
        """Sets the total_tip_money of this Order.


        :param total_tip_money: The total_tip_money of this Order.
        :type total_tip_money: Money
        """

        self._total_tip_money = total_tip_money

    @property
    def updated_at(self):
        """Gets the updated_at of this Order.

        The timestamp for when the order was last updated, in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").

        :return: The updated_at of this Order.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Order.

        The timestamp for when the order was last updated, in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").

        :param updated_at: The updated_at of this Order.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this Order.

        The version number, which is incremented each time an update is committed to the order. Orders not created through the API do not include a version number and therefore cannot be updated.  [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).

        :return: The version of this Order.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Order.

        The version number, which is incremented each time an update is committed to the order. Orders not created through the API do not include a version number and therefore cannot be updated.  [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).

        :param version: The version of this Order.
        :type version: int
        """

        self._version = version
