# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_category import CatalogCategory
from openapi_server.models.catalog_custom_attribute_definition import CatalogCustomAttributeDefinition
from openapi_server.models.catalog_custom_attribute_value import CatalogCustomAttributeValue
from openapi_server.models.catalog_discount import CatalogDiscount
from openapi_server.models.catalog_image import CatalogImage
from openapi_server.models.catalog_item import CatalogItem
from openapi_server.models.catalog_item_option import CatalogItemOption
from openapi_server.models.catalog_item_option_value import CatalogItemOptionValue
from openapi_server.models.catalog_item_variation import CatalogItemVariation
from openapi_server.models.catalog_measurement_unit import CatalogMeasurementUnit
from openapi_server.models.catalog_modifier import CatalogModifier
from openapi_server.models.catalog_modifier_list import CatalogModifierList
from openapi_server.models.catalog_pricing_rule import CatalogPricingRule
from openapi_server.models.catalog_product_set import CatalogProductSet
from openapi_server.models.catalog_quick_amounts_settings import CatalogQuickAmountsSettings
from openapi_server.models.catalog_subscription_plan import CatalogSubscriptionPlan
from openapi_server.models.catalog_tax import CatalogTax
from openapi_server.models.catalog_time_period import CatalogTimePeriod
from openapi_server.models.catalog_v1_id import CatalogV1Id
from openapi_server import util


class CatalogObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, absent_at_location_ids: List[str]=None, catalog_v1_ids: List[CatalogV1Id]=None, category_data: CatalogCategory=None, custom_attribute_definition_data: CatalogCustomAttributeDefinition=None, custom_attribute_values: Dict[str, CatalogCustomAttributeValue]=None, discount_data: CatalogDiscount=None, id: str=None, image_data: CatalogImage=None, image_id: str=None, is_deleted: bool=None, item_data: CatalogItem=None, item_option_data: CatalogItemOption=None, item_option_value_data: CatalogItemOptionValue=None, item_variation_data: CatalogItemVariation=None, measurement_unit_data: CatalogMeasurementUnit=None, modifier_data: CatalogModifier=None, modifier_list_data: CatalogModifierList=None, present_at_all_locations: bool=None, present_at_location_ids: List[str]=None, pricing_rule_data: CatalogPricingRule=None, product_set_data: CatalogProductSet=None, quick_amounts_settings_data: CatalogQuickAmountsSettings=None, subscription_plan_data: CatalogSubscriptionPlan=None, tax_data: CatalogTax=None, time_period_data: CatalogTimePeriod=None, type: str=None, updated_at: str=None, version: int=None):
        """CatalogObject - a model defined in OpenAPI

        :param absent_at_location_ids: The absent_at_location_ids of this CatalogObject.
        :param catalog_v1_ids: The catalog_v1_ids of this CatalogObject.
        :param category_data: The category_data of this CatalogObject.
        :param custom_attribute_definition_data: The custom_attribute_definition_data of this CatalogObject.
        :param custom_attribute_values: The custom_attribute_values of this CatalogObject.
        :param discount_data: The discount_data of this CatalogObject.
        :param id: The id of this CatalogObject.
        :param image_data: The image_data of this CatalogObject.
        :param image_id: The image_id of this CatalogObject.
        :param is_deleted: The is_deleted of this CatalogObject.
        :param item_data: The item_data of this CatalogObject.
        :param item_option_data: The item_option_data of this CatalogObject.
        :param item_option_value_data: The item_option_value_data of this CatalogObject.
        :param item_variation_data: The item_variation_data of this CatalogObject.
        :param measurement_unit_data: The measurement_unit_data of this CatalogObject.
        :param modifier_data: The modifier_data of this CatalogObject.
        :param modifier_list_data: The modifier_list_data of this CatalogObject.
        :param present_at_all_locations: The present_at_all_locations of this CatalogObject.
        :param present_at_location_ids: The present_at_location_ids of this CatalogObject.
        :param pricing_rule_data: The pricing_rule_data of this CatalogObject.
        :param product_set_data: The product_set_data of this CatalogObject.
        :param quick_amounts_settings_data: The quick_amounts_settings_data of this CatalogObject.
        :param subscription_plan_data: The subscription_plan_data of this CatalogObject.
        :param tax_data: The tax_data of this CatalogObject.
        :param time_period_data: The time_period_data of this CatalogObject.
        :param type: The type of this CatalogObject.
        :param updated_at: The updated_at of this CatalogObject.
        :param version: The version of this CatalogObject.
        """
        self.openapi_types = {
            'absent_at_location_ids': List[str],
            'catalog_v1_ids': List[CatalogV1Id],
            'category_data': CatalogCategory,
            'custom_attribute_definition_data': CatalogCustomAttributeDefinition,
            'custom_attribute_values': Dict[str, CatalogCustomAttributeValue],
            'discount_data': CatalogDiscount,
            'id': str,
            'image_data': CatalogImage,
            'image_id': str,
            'is_deleted': bool,
            'item_data': CatalogItem,
            'item_option_data': CatalogItemOption,
            'item_option_value_data': CatalogItemOptionValue,
            'item_variation_data': CatalogItemVariation,
            'measurement_unit_data': CatalogMeasurementUnit,
            'modifier_data': CatalogModifier,
            'modifier_list_data': CatalogModifierList,
            'present_at_all_locations': bool,
            'present_at_location_ids': List[str],
            'pricing_rule_data': CatalogPricingRule,
            'product_set_data': CatalogProductSet,
            'quick_amounts_settings_data': CatalogQuickAmountsSettings,
            'subscription_plan_data': CatalogSubscriptionPlan,
            'tax_data': CatalogTax,
            'time_period_data': CatalogTimePeriod,
            'type': str,
            'updated_at': str,
            'version': int
        }

        self.attribute_map = {
            'absent_at_location_ids': 'absent_at_location_ids',
            'catalog_v1_ids': 'catalog_v1_ids',
            'category_data': 'category_data',
            'custom_attribute_definition_data': 'custom_attribute_definition_data',
            'custom_attribute_values': 'custom_attribute_values',
            'discount_data': 'discount_data',
            'id': 'id',
            'image_data': 'image_data',
            'image_id': 'image_id',
            'is_deleted': 'is_deleted',
            'item_data': 'item_data',
            'item_option_data': 'item_option_data',
            'item_option_value_data': 'item_option_value_data',
            'item_variation_data': 'item_variation_data',
            'measurement_unit_data': 'measurement_unit_data',
            'modifier_data': 'modifier_data',
            'modifier_list_data': 'modifier_list_data',
            'present_at_all_locations': 'present_at_all_locations',
            'present_at_location_ids': 'present_at_location_ids',
            'pricing_rule_data': 'pricing_rule_data',
            'product_set_data': 'product_set_data',
            'quick_amounts_settings_data': 'quick_amounts_settings_data',
            'subscription_plan_data': 'subscription_plan_data',
            'tax_data': 'tax_data',
            'time_period_data': 'time_period_data',
            'type': 'type',
            'updated_at': 'updated_at',
            'version': 'version'
        }

        self._absent_at_location_ids = absent_at_location_ids
        self._catalog_v1_ids = catalog_v1_ids
        self._category_data = category_data
        self._custom_attribute_definition_data = custom_attribute_definition_data
        self._custom_attribute_values = custom_attribute_values
        self._discount_data = discount_data
        self._id = id
        self._image_data = image_data
        self._image_id = image_id
        self._is_deleted = is_deleted
        self._item_data = item_data
        self._item_option_data = item_option_data
        self._item_option_value_data = item_option_value_data
        self._item_variation_data = item_variation_data
        self._measurement_unit_data = measurement_unit_data
        self._modifier_data = modifier_data
        self._modifier_list_data = modifier_list_data
        self._present_at_all_locations = present_at_all_locations
        self._present_at_location_ids = present_at_location_ids
        self._pricing_rule_data = pricing_rule_data
        self._product_set_data = product_set_data
        self._quick_amounts_settings_data = quick_amounts_settings_data
        self._subscription_plan_data = subscription_plan_data
        self._tax_data = tax_data
        self._time_period_data = time_period_data
        self._type = type
        self._updated_at = updated_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogObject of this CatalogObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def absent_at_location_ids(self):
        """Gets the absent_at_location_ids of this CatalogObject.

        A list of locations where the object is not present, even if `present_at_all_locations` is `true`. This can include locations that are deactivated.

        :return: The absent_at_location_ids of this CatalogObject.
        :rtype: List[str]
        """
        return self._absent_at_location_ids

    @absent_at_location_ids.setter
    def absent_at_location_ids(self, absent_at_location_ids):
        """Sets the absent_at_location_ids of this CatalogObject.

        A list of locations where the object is not present, even if `present_at_all_locations` is `true`. This can include locations that are deactivated.

        :param absent_at_location_ids: The absent_at_location_ids of this CatalogObject.
        :type absent_at_location_ids: List[str]
        """

        self._absent_at_location_ids = absent_at_location_ids

    @property
    def catalog_v1_ids(self):
        """Gets the catalog_v1_ids of this CatalogObject.

        The Connect v1 IDs for this object at each location where it is present, where they differ from the object's Connect V2 ID. The field will only be present for objects that have been created or modified by legacy APIs.

        :return: The catalog_v1_ids of this CatalogObject.
        :rtype: List[CatalogV1Id]
        """
        return self._catalog_v1_ids

    @catalog_v1_ids.setter
    def catalog_v1_ids(self, catalog_v1_ids):
        """Sets the catalog_v1_ids of this CatalogObject.

        The Connect v1 IDs for this object at each location where it is present, where they differ from the object's Connect V2 ID. The field will only be present for objects that have been created or modified by legacy APIs.

        :param catalog_v1_ids: The catalog_v1_ids of this CatalogObject.
        :type catalog_v1_ids: List[CatalogV1Id]
        """

        self._catalog_v1_ids = catalog_v1_ids

    @property
    def category_data(self):
        """Gets the category_data of this CatalogObject.


        :return: The category_data of this CatalogObject.
        :rtype: CatalogCategory
        """
        return self._category_data

    @category_data.setter
    def category_data(self, category_data):
        """Sets the category_data of this CatalogObject.


        :param category_data: The category_data of this CatalogObject.
        :type category_data: CatalogCategory
        """

        self._category_data = category_data

    @property
    def custom_attribute_definition_data(self):
        """Gets the custom_attribute_definition_data of this CatalogObject.


        :return: The custom_attribute_definition_data of this CatalogObject.
        :rtype: CatalogCustomAttributeDefinition
        """
        return self._custom_attribute_definition_data

    @custom_attribute_definition_data.setter
    def custom_attribute_definition_data(self, custom_attribute_definition_data):
        """Sets the custom_attribute_definition_data of this CatalogObject.


        :param custom_attribute_definition_data: The custom_attribute_definition_data of this CatalogObject.
        :type custom_attribute_definition_data: CatalogCustomAttributeDefinition
        """

        self._custom_attribute_definition_data = custom_attribute_definition_data

    @property
    def custom_attribute_values(self):
        """Gets the custom_attribute_values of this CatalogObject.

        A map (key-value pairs) of application-defined custom attribute values. The value of a key-value pair is a [CatalogCustomAttributeValue](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeValue) object. The key is the `key` attribute value defined in the associated [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition) object defined by the application making the request.  If the `CatalogCustomAttributeDefinition` object is defined by another application, the `CatalogCustomAttributeDefinition`'s key attribute value is prefixed by the defining application ID. For example, if the `CatalogCustomAttributeDefinition` has a `key` attribute of `\"cocoa_brand\"` and the defining application ID is `\"abcd1234\"`, the key in the map is `\"abcd1234:cocoa_brand\"` if the application making the request is different from the application defining the custom attribute definition. Otherwise, the key used in the map is simply `\"cocoa_brand\"`.  Application-defined custom attributes that are set at a global (location-independent) level. Custom attribute values are intended to store additional information about a catalog object or associations with an entity in another system. Do not use custom attributes to store any sensitive information (personally identifiable information, card details, etc.).

        :return: The custom_attribute_values of this CatalogObject.
        :rtype: Dict[str, CatalogCustomAttributeValue]
        """
        return self._custom_attribute_values

    @custom_attribute_values.setter
    def custom_attribute_values(self, custom_attribute_values):
        """Sets the custom_attribute_values of this CatalogObject.

        A map (key-value pairs) of application-defined custom attribute values. The value of a key-value pair is a [CatalogCustomAttributeValue](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeValue) object. The key is the `key` attribute value defined in the associated [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition) object defined by the application making the request.  If the `CatalogCustomAttributeDefinition` object is defined by another application, the `CatalogCustomAttributeDefinition`'s key attribute value is prefixed by the defining application ID. For example, if the `CatalogCustomAttributeDefinition` has a `key` attribute of `\"cocoa_brand\"` and the defining application ID is `\"abcd1234\"`, the key in the map is `\"abcd1234:cocoa_brand\"` if the application making the request is different from the application defining the custom attribute definition. Otherwise, the key used in the map is simply `\"cocoa_brand\"`.  Application-defined custom attributes that are set at a global (location-independent) level. Custom attribute values are intended to store additional information about a catalog object or associations with an entity in another system. Do not use custom attributes to store any sensitive information (personally identifiable information, card details, etc.).

        :param custom_attribute_values: The custom_attribute_values of this CatalogObject.
        :type custom_attribute_values: Dict[str, CatalogCustomAttributeValue]
        """

        self._custom_attribute_values = custom_attribute_values

    @property
    def discount_data(self):
        """Gets the discount_data of this CatalogObject.


        :return: The discount_data of this CatalogObject.
        :rtype: CatalogDiscount
        """
        return self._discount_data

    @discount_data.setter
    def discount_data(self, discount_data):
        """Sets the discount_data of this CatalogObject.


        :param discount_data: The discount_data of this CatalogObject.
        :type discount_data: CatalogDiscount
        """

        self._discount_data = discount_data

    @property
    def id(self):
        """Gets the id of this CatalogObject.

        An identifier to reference this object in the catalog. When a new `CatalogObject` is inserted, the client should set the id to a temporary identifier starting with a \"`#`\" character. Other objects being inserted or updated within the same request may use this identifier to refer to the new object.  When the server receives the new object, it will supply a unique identifier that replaces the temporary identifier for all future references.

        :return: The id of this CatalogObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CatalogObject.

        An identifier to reference this object in the catalog. When a new `CatalogObject` is inserted, the client should set the id to a temporary identifier starting with a \"`#`\" character. Other objects being inserted or updated within the same request may use this identifier to refer to the new object.  When the server receives the new object, it will supply a unique identifier that replaces the temporary identifier for all future references.

        :param id: The id of this CatalogObject.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def image_data(self):
        """Gets the image_data of this CatalogObject.


        :return: The image_data of this CatalogObject.
        :rtype: CatalogImage
        """
        return self._image_data

    @image_data.setter
    def image_data(self, image_data):
        """Sets the image_data of this CatalogObject.


        :param image_data: The image_data of this CatalogObject.
        :type image_data: CatalogImage
        """

        self._image_data = image_data

    @property
    def image_id(self):
        """Gets the image_id of this CatalogObject.

        Identifies the `CatalogImage` attached to this `CatalogObject`.

        :return: The image_id of this CatalogObject.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this CatalogObject.

        Identifies the `CatalogImage` attached to this `CatalogObject`.

        :param image_id: The image_id of this CatalogObject.
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def is_deleted(self):
        """Gets the is_deleted of this CatalogObject.

        If `true`, the object has been deleted from the database. Must be `false` for new objects being inserted. When deleted, the `updated_at` field will equal the deletion time.

        :return: The is_deleted of this CatalogObject.
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this CatalogObject.

        If `true`, the object has been deleted from the database. Must be `false` for new objects being inserted. When deleted, the `updated_at` field will equal the deletion time.

        :param is_deleted: The is_deleted of this CatalogObject.
        :type is_deleted: bool
        """

        self._is_deleted = is_deleted

    @property
    def item_data(self):
        """Gets the item_data of this CatalogObject.


        :return: The item_data of this CatalogObject.
        :rtype: CatalogItem
        """
        return self._item_data

    @item_data.setter
    def item_data(self, item_data):
        """Sets the item_data of this CatalogObject.


        :param item_data: The item_data of this CatalogObject.
        :type item_data: CatalogItem
        """

        self._item_data = item_data

    @property
    def item_option_data(self):
        """Gets the item_option_data of this CatalogObject.


        :return: The item_option_data of this CatalogObject.
        :rtype: CatalogItemOption
        """
        return self._item_option_data

    @item_option_data.setter
    def item_option_data(self, item_option_data):
        """Sets the item_option_data of this CatalogObject.


        :param item_option_data: The item_option_data of this CatalogObject.
        :type item_option_data: CatalogItemOption
        """

        self._item_option_data = item_option_data

    @property
    def item_option_value_data(self):
        """Gets the item_option_value_data of this CatalogObject.


        :return: The item_option_value_data of this CatalogObject.
        :rtype: CatalogItemOptionValue
        """
        return self._item_option_value_data

    @item_option_value_data.setter
    def item_option_value_data(self, item_option_value_data):
        """Sets the item_option_value_data of this CatalogObject.


        :param item_option_value_data: The item_option_value_data of this CatalogObject.
        :type item_option_value_data: CatalogItemOptionValue
        """

        self._item_option_value_data = item_option_value_data

    @property
    def item_variation_data(self):
        """Gets the item_variation_data of this CatalogObject.


        :return: The item_variation_data of this CatalogObject.
        :rtype: CatalogItemVariation
        """
        return self._item_variation_data

    @item_variation_data.setter
    def item_variation_data(self, item_variation_data):
        """Sets the item_variation_data of this CatalogObject.


        :param item_variation_data: The item_variation_data of this CatalogObject.
        :type item_variation_data: CatalogItemVariation
        """

        self._item_variation_data = item_variation_data

    @property
    def measurement_unit_data(self):
        """Gets the measurement_unit_data of this CatalogObject.


        :return: The measurement_unit_data of this CatalogObject.
        :rtype: CatalogMeasurementUnit
        """
        return self._measurement_unit_data

    @measurement_unit_data.setter
    def measurement_unit_data(self, measurement_unit_data):
        """Sets the measurement_unit_data of this CatalogObject.


        :param measurement_unit_data: The measurement_unit_data of this CatalogObject.
        :type measurement_unit_data: CatalogMeasurementUnit
        """

        self._measurement_unit_data = measurement_unit_data

    @property
    def modifier_data(self):
        """Gets the modifier_data of this CatalogObject.


        :return: The modifier_data of this CatalogObject.
        :rtype: CatalogModifier
        """
        return self._modifier_data

    @modifier_data.setter
    def modifier_data(self, modifier_data):
        """Sets the modifier_data of this CatalogObject.


        :param modifier_data: The modifier_data of this CatalogObject.
        :type modifier_data: CatalogModifier
        """

        self._modifier_data = modifier_data

    @property
    def modifier_list_data(self):
        """Gets the modifier_list_data of this CatalogObject.


        :return: The modifier_list_data of this CatalogObject.
        :rtype: CatalogModifierList
        """
        return self._modifier_list_data

    @modifier_list_data.setter
    def modifier_list_data(self, modifier_list_data):
        """Sets the modifier_list_data of this CatalogObject.


        :param modifier_list_data: The modifier_list_data of this CatalogObject.
        :type modifier_list_data: CatalogModifierList
        """

        self._modifier_list_data = modifier_list_data

    @property
    def present_at_all_locations(self):
        """Gets the present_at_all_locations of this CatalogObject.

        If `true`, this object is present at all locations (including future locations), except where specified in the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations), except where specified in the `present_at_location_ids` field. If not specified, defaults to `true`.

        :return: The present_at_all_locations of this CatalogObject.
        :rtype: bool
        """
        return self._present_at_all_locations

    @present_at_all_locations.setter
    def present_at_all_locations(self, present_at_all_locations):
        """Sets the present_at_all_locations of this CatalogObject.

        If `true`, this object is present at all locations (including future locations), except where specified in the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations), except where specified in the `present_at_location_ids` field. If not specified, defaults to `true`.

        :param present_at_all_locations: The present_at_all_locations of this CatalogObject.
        :type present_at_all_locations: bool
        """

        self._present_at_all_locations = present_at_all_locations

    @property
    def present_at_location_ids(self):
        """Gets the present_at_location_ids of this CatalogObject.

        A list of locations where the object is present, even if `present_at_all_locations` is `false`. This can include locations that are deactivated.

        :return: The present_at_location_ids of this CatalogObject.
        :rtype: List[str]
        """
        return self._present_at_location_ids

    @present_at_location_ids.setter
    def present_at_location_ids(self, present_at_location_ids):
        """Sets the present_at_location_ids of this CatalogObject.

        A list of locations where the object is present, even if `present_at_all_locations` is `false`. This can include locations that are deactivated.

        :param present_at_location_ids: The present_at_location_ids of this CatalogObject.
        :type present_at_location_ids: List[str]
        """

        self._present_at_location_ids = present_at_location_ids

    @property
    def pricing_rule_data(self):
        """Gets the pricing_rule_data of this CatalogObject.


        :return: The pricing_rule_data of this CatalogObject.
        :rtype: CatalogPricingRule
        """
        return self._pricing_rule_data

    @pricing_rule_data.setter
    def pricing_rule_data(self, pricing_rule_data):
        """Sets the pricing_rule_data of this CatalogObject.


        :param pricing_rule_data: The pricing_rule_data of this CatalogObject.
        :type pricing_rule_data: CatalogPricingRule
        """

        self._pricing_rule_data = pricing_rule_data

    @property
    def product_set_data(self):
        """Gets the product_set_data of this CatalogObject.


        :return: The product_set_data of this CatalogObject.
        :rtype: CatalogProductSet
        """
        return self._product_set_data

    @product_set_data.setter
    def product_set_data(self, product_set_data):
        """Sets the product_set_data of this CatalogObject.


        :param product_set_data: The product_set_data of this CatalogObject.
        :type product_set_data: CatalogProductSet
        """

        self._product_set_data = product_set_data

    @property
    def quick_amounts_settings_data(self):
        """Gets the quick_amounts_settings_data of this CatalogObject.


        :return: The quick_amounts_settings_data of this CatalogObject.
        :rtype: CatalogQuickAmountsSettings
        """
        return self._quick_amounts_settings_data

    @quick_amounts_settings_data.setter
    def quick_amounts_settings_data(self, quick_amounts_settings_data):
        """Sets the quick_amounts_settings_data of this CatalogObject.


        :param quick_amounts_settings_data: The quick_amounts_settings_data of this CatalogObject.
        :type quick_amounts_settings_data: CatalogQuickAmountsSettings
        """

        self._quick_amounts_settings_data = quick_amounts_settings_data

    @property
    def subscription_plan_data(self):
        """Gets the subscription_plan_data of this CatalogObject.


        :return: The subscription_plan_data of this CatalogObject.
        :rtype: CatalogSubscriptionPlan
        """
        return self._subscription_plan_data

    @subscription_plan_data.setter
    def subscription_plan_data(self, subscription_plan_data):
        """Sets the subscription_plan_data of this CatalogObject.


        :param subscription_plan_data: The subscription_plan_data of this CatalogObject.
        :type subscription_plan_data: CatalogSubscriptionPlan
        """

        self._subscription_plan_data = subscription_plan_data

    @property
    def tax_data(self):
        """Gets the tax_data of this CatalogObject.


        :return: The tax_data of this CatalogObject.
        :rtype: CatalogTax
        """
        return self._tax_data

    @tax_data.setter
    def tax_data(self, tax_data):
        """Sets the tax_data of this CatalogObject.


        :param tax_data: The tax_data of this CatalogObject.
        :type tax_data: CatalogTax
        """

        self._tax_data = tax_data

    @property
    def time_period_data(self):
        """Gets the time_period_data of this CatalogObject.


        :return: The time_period_data of this CatalogObject.
        :rtype: CatalogTimePeriod
        """
        return self._time_period_data

    @time_period_data.setter
    def time_period_data(self, time_period_data):
        """Sets the time_period_data of this CatalogObject.


        :param time_period_data: The time_period_data of this CatalogObject.
        :type time_period_data: CatalogTimePeriod
        """

        self._time_period_data = time_period_data

    @property
    def type(self):
        """Gets the type of this CatalogObject.

        The type of this object. Each object type has expected properties expressed in a structured format within its corresponding `*_data` field below.

        :return: The type of this CatalogObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CatalogObject.

        The type of this object. Each object type has expected properties expressed in a structured format within its corresponding `*_data` field below.

        :param type: The type of this CatalogObject.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this CatalogObject.

        Last modification [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) in RFC 3339 format, e.g., `\"2016-08-15T23:59:33.123Z\"` would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.

        :return: The updated_at of this CatalogObject.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CatalogObject.

        Last modification [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) in RFC 3339 format, e.g., `\"2016-08-15T23:59:33.123Z\"` would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.

        :param updated_at: The updated_at of this CatalogObject.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this CatalogObject.

        The version of the object. When updating an object, the version supplied must match the version in the database, otherwise the write will be rejected as conflicting.

        :return: The version of this CatalogObject.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CatalogObject.

        The version of the object. When updating an object, the version supplied must match the version in the database, otherwise the write will be rejected as conflicting.

        :param version: The version of this CatalogObject.
        :type version: int
        """

        self._version = version
