# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class LoyaltyProgramRewardDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_object_ids: List[str]=None, discount_type: str=None, fixed_discount_money: Money=None, max_discount_money: Money=None, percentage_discount: str=None, scope: str=None):
        """LoyaltyProgramRewardDefinition - a model defined in OpenAPI

        :param catalog_object_ids: The catalog_object_ids of this LoyaltyProgramRewardDefinition.
        :param discount_type: The discount_type of this LoyaltyProgramRewardDefinition.
        :param fixed_discount_money: The fixed_discount_money of this LoyaltyProgramRewardDefinition.
        :param max_discount_money: The max_discount_money of this LoyaltyProgramRewardDefinition.
        :param percentage_discount: The percentage_discount of this LoyaltyProgramRewardDefinition.
        :param scope: The scope of this LoyaltyProgramRewardDefinition.
        """
        self.openapi_types = {
            'catalog_object_ids': List[str],
            'discount_type': str,
            'fixed_discount_money': Money,
            'max_discount_money': Money,
            'percentage_discount': str,
            'scope': str
        }

        self.attribute_map = {
            'catalog_object_ids': 'catalog_object_ids',
            'discount_type': 'discount_type',
            'fixed_discount_money': 'fixed_discount_money',
            'max_discount_money': 'max_discount_money',
            'percentage_discount': 'percentage_discount',
            'scope': 'scope'
        }

        self._catalog_object_ids = catalog_object_ids
        self._discount_type = discount_type
        self._fixed_discount_money = fixed_discount_money
        self._max_discount_money = max_discount_money
        self._percentage_discount = percentage_discount
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyProgramRewardDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyProgramRewardDefinition of this LoyaltyProgramRewardDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_object_ids(self):
        """Gets the catalog_object_ids of this LoyaltyProgramRewardDefinition.

        The list of catalog objects to which this reward can be applied. They are either all item-variation ids or category ids, depending on the `type` field. DEPRECATED at version 2020-12-16. You can find this information in the `product_set_data.product_ids_any` field of the `PRODUCT_SET` catalog object referenced by the pricing rule.

        :return: The catalog_object_ids of this LoyaltyProgramRewardDefinition.
        :rtype: List[str]
        """
        return self._catalog_object_ids

    @catalog_object_ids.setter
    def catalog_object_ids(self, catalog_object_ids):
        """Sets the catalog_object_ids of this LoyaltyProgramRewardDefinition.

        The list of catalog objects to which this reward can be applied. They are either all item-variation ids or category ids, depending on the `type` field. DEPRECATED at version 2020-12-16. You can find this information in the `product_set_data.product_ids_any` field of the `PRODUCT_SET` catalog object referenced by the pricing rule.

        :param catalog_object_ids: The catalog_object_ids of this LoyaltyProgramRewardDefinition.
        :type catalog_object_ids: List[str]
        """

        self._catalog_object_ids = catalog_object_ids

    @property
    def discount_type(self):
        """Gets the discount_type of this LoyaltyProgramRewardDefinition.

        The type of discount the reward tier offers. DEPRECATED at version 2020-12-16. You can find this information in the `discount_data.discount_type` field of the `DISCOUNT` catalog object referenced by the pricing rule.

        :return: The discount_type of this LoyaltyProgramRewardDefinition.
        :rtype: str
        """
        return self._discount_type

    @discount_type.setter
    def discount_type(self, discount_type):
        """Sets the discount_type of this LoyaltyProgramRewardDefinition.

        The type of discount the reward tier offers. DEPRECATED at version 2020-12-16. You can find this information in the `discount_data.discount_type` field of the `DISCOUNT` catalog object referenced by the pricing rule.

        :param discount_type: The discount_type of this LoyaltyProgramRewardDefinition.
        :type discount_type: str
        """
        if discount_type is None:
            raise ValueError("Invalid value for `discount_type`, must not be `None`")

        self._discount_type = discount_type

    @property
    def fixed_discount_money(self):
        """Gets the fixed_discount_money of this LoyaltyProgramRewardDefinition.


        :return: The fixed_discount_money of this LoyaltyProgramRewardDefinition.
        :rtype: Money
        """
        return self._fixed_discount_money

    @fixed_discount_money.setter
    def fixed_discount_money(self, fixed_discount_money):
        """Sets the fixed_discount_money of this LoyaltyProgramRewardDefinition.


        :param fixed_discount_money: The fixed_discount_money of this LoyaltyProgramRewardDefinition.
        :type fixed_discount_money: Money
        """

        self._fixed_discount_money = fixed_discount_money

    @property
    def max_discount_money(self):
        """Gets the max_discount_money of this LoyaltyProgramRewardDefinition.


        :return: The max_discount_money of this LoyaltyProgramRewardDefinition.
        :rtype: Money
        """
        return self._max_discount_money

    @max_discount_money.setter
    def max_discount_money(self, max_discount_money):
        """Sets the max_discount_money of this LoyaltyProgramRewardDefinition.


        :param max_discount_money: The max_discount_money of this LoyaltyProgramRewardDefinition.
        :type max_discount_money: Money
        """

        self._max_discount_money = max_discount_money

    @property
    def percentage_discount(self):
        """Gets the percentage_discount of this LoyaltyProgramRewardDefinition.

        The fixed percentage of the discount. Present if `discount_type` is `FIXED_PERCENTAGE`. For example, a 7.25% off discount will be represented as \"7.25\". DEPRECATED at version 2020-12-16. You can find this information in the `discount_data.percentage` field of the `DISCOUNT` catalog object referenced by the pricing rule.

        :return: The percentage_discount of this LoyaltyProgramRewardDefinition.
        :rtype: str
        """
        return self._percentage_discount

    @percentage_discount.setter
    def percentage_discount(self, percentage_discount):
        """Sets the percentage_discount of this LoyaltyProgramRewardDefinition.

        The fixed percentage of the discount. Present if `discount_type` is `FIXED_PERCENTAGE`. For example, a 7.25% off discount will be represented as \"7.25\". DEPRECATED at version 2020-12-16. You can find this information in the `discount_data.percentage` field of the `DISCOUNT` catalog object referenced by the pricing rule.

        :param percentage_discount: The percentage_discount of this LoyaltyProgramRewardDefinition.
        :type percentage_discount: str
        """

        self._percentage_discount = percentage_discount

    @property
    def scope(self):
        """Gets the scope of this LoyaltyProgramRewardDefinition.

        Indicates the scope of the reward tier. DEPRECATED at version 2020-12-16. You can find this information in the `discount_target_scope` field of the `PRICING_RULE` catalog object and the `product_set_data` field of the `PRODUCT_SET` catalog object referenced by the pricing rule. For `ORDER` scopes, the target scope is `WHOLE_PURCHASE` and `all_products` is true. For `ITEM_VARIATION` and `CATEGORY` scopes, the target scope is `LINE_ITEM` and `product_ids_any` is a list of catalog object IDs of the given type.

        :return: The scope of this LoyaltyProgramRewardDefinition.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this LoyaltyProgramRewardDefinition.

        Indicates the scope of the reward tier. DEPRECATED at version 2020-12-16. You can find this information in the `discount_target_scope` field of the `PRICING_RULE` catalog object and the `product_set_data` field of the `PRODUCT_SET` catalog object referenced by the pricing rule. For `ORDER` scopes, the target scope is `WHOLE_PURCHASE` and `all_products` is true. For `ITEM_VARIATION` and `CATEGORY` scopes, the target scope is `LINE_ITEM` and `product_ids_any` is a list of catalog object IDs of the given type.

        :param scope: The scope of this LoyaltyProgramRewardDefinition.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")

        self._scope = scope
