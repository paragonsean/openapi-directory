# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvoiceCustomField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, placement: str=None, value: str=None):
        """InvoiceCustomField - a model defined in OpenAPI

        :param label: The label of this InvoiceCustomField.
        :param placement: The placement of this InvoiceCustomField.
        :param value: The value of this InvoiceCustomField.
        """
        self.openapi_types = {
            'label': str,
            'placement': str,
            'value': str
        }

        self.attribute_map = {
            'label': 'label',
            'placement': 'placement',
            'value': 'value'
        }

        self._label = label
        self._placement = placement
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceCustomField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceCustomField of this InvoiceCustomField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this InvoiceCustomField.

        The label or title of the custom field. This field is required for a custom field.

        :return: The label of this InvoiceCustomField.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this InvoiceCustomField.

        The label or title of the custom field. This field is required for a custom field.

        :param label: The label of this InvoiceCustomField.
        :type label: str
        """
        if label is not None and len(label) > 30:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `30`")

        self._label = label

    @property
    def placement(self):
        """Gets the placement of this InvoiceCustomField.

        The location of the custom field on the invoice. This field is required for a custom field.

        :return: The placement of this InvoiceCustomField.
        :rtype: str
        """
        return self._placement

    @placement.setter
    def placement(self, placement):
        """Sets the placement of this InvoiceCustomField.

        The location of the custom field on the invoice. This field is required for a custom field.

        :param placement: The placement of this InvoiceCustomField.
        :type placement: str
        """

        self._placement = placement

    @property
    def value(self):
        """Gets the value of this InvoiceCustomField.

        The text of the custom field. If omitted, only the label is rendered.

        :return: The value of this InvoiceCustomField.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InvoiceCustomField.

        The text of the custom field. If omitted, only the label is rendered.

        :param value: The value of this InvoiceCustomField.
        :type value: str
        """
        if value is not None and len(value) > 2000:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `2000`")

        self._value = value
