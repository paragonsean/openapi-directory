# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invoice import Invoice
from openapi_server import util


class UpdateInvoiceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields_to_clear: List[str]=None, idempotency_key: str=None, invoice: Invoice=None):
        """UpdateInvoiceRequest - a model defined in OpenAPI

        :param fields_to_clear: The fields_to_clear of this UpdateInvoiceRequest.
        :param idempotency_key: The idempotency_key of this UpdateInvoiceRequest.
        :param invoice: The invoice of this UpdateInvoiceRequest.
        """
        self.openapi_types = {
            'fields_to_clear': List[str],
            'idempotency_key': str,
            'invoice': Invoice
        }

        self.attribute_map = {
            'fields_to_clear': 'fields_to_clear',
            'idempotency_key': 'idempotency_key',
            'invoice': 'invoice'
        }

        self._fields_to_clear = fields_to_clear
        self._idempotency_key = idempotency_key
        self._invoice = invoice

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateInvoiceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateInvoiceRequest of this UpdateInvoiceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields_to_clear(self):
        """Gets the fields_to_clear of this UpdateInvoiceRequest.

        The list of fields to clear. For examples, see [Update an invoice](https://developer.squareup.com/docs/invoices-api/overview#update-an-invoice).

        :return: The fields_to_clear of this UpdateInvoiceRequest.
        :rtype: List[str]
        """
        return self._fields_to_clear

    @fields_to_clear.setter
    def fields_to_clear(self, fields_to_clear):
        """Sets the fields_to_clear of this UpdateInvoiceRequest.

        The list of fields to clear. For examples, see [Update an invoice](https://developer.squareup.com/docs/invoices-api/overview#update-an-invoice).

        :param fields_to_clear: The fields_to_clear of this UpdateInvoiceRequest.
        :type fields_to_clear: List[str]
        """

        self._fields_to_clear = fields_to_clear

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this UpdateInvoiceRequest.

        A unique string that identifies the `UpdateInvoice` request. If you do not provide `idempotency_key` (or provide an empty string as the value), the endpoint treats each request as independent.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).

        :return: The idempotency_key of this UpdateInvoiceRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this UpdateInvoiceRequest.

        A unique string that identifies the `UpdateInvoice` request. If you do not provide `idempotency_key` (or provide an empty string as the value), the endpoint treats each request as independent.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).

        :param idempotency_key: The idempotency_key of this UpdateInvoiceRequest.
        :type idempotency_key: str
        """
        if idempotency_key is not None and len(idempotency_key) > 128:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `128`")

        self._idempotency_key = idempotency_key

    @property
    def invoice(self):
        """Gets the invoice of this UpdateInvoiceRequest.


        :return: The invoice of this UpdateInvoiceRequest.
        :rtype: Invoice
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this UpdateInvoiceRequest.


        :param invoice: The invoice of this UpdateInvoiceRequest.
        :type invoice: Invoice
        """
        if invoice is None:
            raise ValueError("Invalid value for `invoice`, must not be `None`")

        self._invoice = invoice
