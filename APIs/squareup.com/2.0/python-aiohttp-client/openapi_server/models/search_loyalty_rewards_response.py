# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server.models.loyalty_reward import LoyaltyReward
from openapi_server import util


class SearchLoyaltyRewardsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cursor: str=None, errors: List[Error]=None, rewards: List[LoyaltyReward]=None):
        """SearchLoyaltyRewardsResponse - a model defined in OpenAPI

        :param cursor: The cursor of this SearchLoyaltyRewardsResponse.
        :param errors: The errors of this SearchLoyaltyRewardsResponse.
        :param rewards: The rewards of this SearchLoyaltyRewardsResponse.
        """
        self.openapi_types = {
            'cursor': str,
            'errors': List[Error],
            'rewards': List[LoyaltyReward]
        }

        self.attribute_map = {
            'cursor': 'cursor',
            'errors': 'errors',
            'rewards': 'rewards'
        }

        self._cursor = cursor
        self._errors = errors
        self._rewards = rewards

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchLoyaltyRewardsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchLoyaltyRewardsResponse of this SearchLoyaltyRewardsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cursor(self):
        """Gets the cursor of this SearchLoyaltyRewardsResponse.

        The pagination cursor to be used in a subsequent  request. If empty, this is the final response.

        :return: The cursor of this SearchLoyaltyRewardsResponse.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this SearchLoyaltyRewardsResponse.

        The pagination cursor to be used in a subsequent  request. If empty, this is the final response.

        :param cursor: The cursor of this SearchLoyaltyRewardsResponse.
        :type cursor: str
        """

        self._cursor = cursor

    @property
    def errors(self):
        """Gets the errors of this SearchLoyaltyRewardsResponse.

        Any errors that occurred during the request.

        :return: The errors of this SearchLoyaltyRewardsResponse.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this SearchLoyaltyRewardsResponse.

        Any errors that occurred during the request.

        :param errors: The errors of this SearchLoyaltyRewardsResponse.
        :type errors: List[Error]
        """

        self._errors = errors

    @property
    def rewards(self):
        """Gets the rewards of this SearchLoyaltyRewardsResponse.

        The loyalty rewards that satisfy the search criteria. These are returned in descending order by `updated_at`.

        :return: The rewards of this SearchLoyaltyRewardsResponse.
        :rtype: List[LoyaltyReward]
        """
        return self._rewards

    @rewards.setter
    def rewards(self, rewards):
        """Sets the rewards of this SearchLoyaltyRewardsResponse.

        The loyalty rewards that satisfy the search criteria. These are returned in descending order by `updated_at`.

        :param rewards: The rewards of this SearchLoyaltyRewardsResponse.
        :type rewards: List[LoyaltyReward]
        """

        self._rewards = rewards
