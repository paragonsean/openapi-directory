# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_object import CatalogObject
from openapi_server import util


class UpsertCatalogObjectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, idempotency_key: str=None, object: CatalogObject=None):
        """UpsertCatalogObjectRequest - a model defined in OpenAPI

        :param idempotency_key: The idempotency_key of this UpsertCatalogObjectRequest.
        :param object: The object of this UpsertCatalogObjectRequest.
        """
        self.openapi_types = {
            'idempotency_key': str,
            'object': CatalogObject
        }

        self.attribute_map = {
            'idempotency_key': 'idempotency_key',
            'object': 'object'
        }

        self._idempotency_key = idempotency_key
        self._object = object

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpsertCatalogObjectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpsertCatalogObjectRequest of this UpsertCatalogObjectRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this UpsertCatalogObjectRequest.

        A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you're unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.

        :return: The idempotency_key of this UpsertCatalogObjectRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this UpsertCatalogObjectRequest.

        A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you're unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.

        :param idempotency_key: The idempotency_key of this UpsertCatalogObjectRequest.
        :type idempotency_key: str
        """
        if idempotency_key is None:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if idempotency_key is not None and len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key

    @property
    def object(self):
        """Gets the object of this UpsertCatalogObjectRequest.


        :return: The object of this UpsertCatalogObjectRequest.
        :rtype: CatalogObject
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this UpsertCatalogObjectRequest.


        :param object: The object of this UpsertCatalogObjectRequest.
        :type object: CatalogObject
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")

        self._object = object
