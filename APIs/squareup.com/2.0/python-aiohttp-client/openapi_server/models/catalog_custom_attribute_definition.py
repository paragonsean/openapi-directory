# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_custom_attribute_definition_number_config import CatalogCustomAttributeDefinitionNumberConfig
from openapi_server.models.catalog_custom_attribute_definition_selection_config import CatalogCustomAttributeDefinitionSelectionConfig
from openapi_server.models.catalog_custom_attribute_definition_string_config import CatalogCustomAttributeDefinitionStringConfig
from openapi_server.models.source_application import SourceApplication
import re
from openapi_server import util


class CatalogCustomAttributeDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_object_types: List[str]=None, app_visibility: str=None, custom_attribute_usage_count: int=None, description: str=None, key: str=None, name: str=None, number_config: CatalogCustomAttributeDefinitionNumberConfig=None, selection_config: CatalogCustomAttributeDefinitionSelectionConfig=None, seller_visibility: str=None, source_application: SourceApplication=None, string_config: CatalogCustomAttributeDefinitionStringConfig=None, type: str=None):
        """CatalogCustomAttributeDefinition - a model defined in OpenAPI

        :param allowed_object_types: The allowed_object_types of this CatalogCustomAttributeDefinition.
        :param app_visibility: The app_visibility of this CatalogCustomAttributeDefinition.
        :param custom_attribute_usage_count: The custom_attribute_usage_count of this CatalogCustomAttributeDefinition.
        :param description: The description of this CatalogCustomAttributeDefinition.
        :param key: The key of this CatalogCustomAttributeDefinition.
        :param name: The name of this CatalogCustomAttributeDefinition.
        :param number_config: The number_config of this CatalogCustomAttributeDefinition.
        :param selection_config: The selection_config of this CatalogCustomAttributeDefinition.
        :param seller_visibility: The seller_visibility of this CatalogCustomAttributeDefinition.
        :param source_application: The source_application of this CatalogCustomAttributeDefinition.
        :param string_config: The string_config of this CatalogCustomAttributeDefinition.
        :param type: The type of this CatalogCustomAttributeDefinition.
        """
        self.openapi_types = {
            'allowed_object_types': List[str],
            'app_visibility': str,
            'custom_attribute_usage_count': int,
            'description': str,
            'key': str,
            'name': str,
            'number_config': CatalogCustomAttributeDefinitionNumberConfig,
            'selection_config': CatalogCustomAttributeDefinitionSelectionConfig,
            'seller_visibility': str,
            'source_application': SourceApplication,
            'string_config': CatalogCustomAttributeDefinitionStringConfig,
            'type': str
        }

        self.attribute_map = {
            'allowed_object_types': 'allowed_object_types',
            'app_visibility': 'app_visibility',
            'custom_attribute_usage_count': 'custom_attribute_usage_count',
            'description': 'description',
            'key': 'key',
            'name': 'name',
            'number_config': 'number_config',
            'selection_config': 'selection_config',
            'seller_visibility': 'seller_visibility',
            'source_application': 'source_application',
            'string_config': 'string_config',
            'type': 'type'
        }

        self._allowed_object_types = allowed_object_types
        self._app_visibility = app_visibility
        self._custom_attribute_usage_count = custom_attribute_usage_count
        self._description = description
        self._key = key
        self._name = name
        self._number_config = number_config
        self._selection_config = selection_config
        self._seller_visibility = seller_visibility
        self._source_application = source_application
        self._string_config = string_config
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogCustomAttributeDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogCustomAttributeDefinition of this CatalogCustomAttributeDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_object_types(self):
        """Gets the allowed_object_types of this CatalogCustomAttributeDefinition.

        The set of Catalog Object Types that this Custom Attribute may be applied to. Currently, only `ITEM` and `ITEM_VARIATION` are allowed. At least one type must be included.

        :return: The allowed_object_types of this CatalogCustomAttributeDefinition.
        :rtype: List[str]
        """
        return self._allowed_object_types

    @allowed_object_types.setter
    def allowed_object_types(self, allowed_object_types):
        """Sets the allowed_object_types of this CatalogCustomAttributeDefinition.

        The set of Catalog Object Types that this Custom Attribute may be applied to. Currently, only `ITEM` and `ITEM_VARIATION` are allowed. At least one type must be included.

        :param allowed_object_types: The allowed_object_types of this CatalogCustomAttributeDefinition.
        :type allowed_object_types: List[str]
        """
        if allowed_object_types is None:
            raise ValueError("Invalid value for `allowed_object_types`, must not be `None`")

        self._allowed_object_types = allowed_object_types

    @property
    def app_visibility(self):
        """Gets the app_visibility of this CatalogCustomAttributeDefinition.

        The visibility of a custom attribute to applications other than the application that created the attribute.

        :return: The app_visibility of this CatalogCustomAttributeDefinition.
        :rtype: str
        """
        return self._app_visibility

    @app_visibility.setter
    def app_visibility(self, app_visibility):
        """Sets the app_visibility of this CatalogCustomAttributeDefinition.

        The visibility of a custom attribute to applications other than the application that created the attribute.

        :param app_visibility: The app_visibility of this CatalogCustomAttributeDefinition.
        :type app_visibility: str
        """

        self._app_visibility = app_visibility

    @property
    def custom_attribute_usage_count(self):
        """Gets the custom_attribute_usage_count of this CatalogCustomAttributeDefinition.

        __Read-only.__ The number of custom attributes that reference this custom attribute definition. Set by the server in response to a ListCatalog request with `include_counts` set to `true`.  If the actual count is greater than 100, `custom_attribute_usage_count` will be set to `100`.

        :return: The custom_attribute_usage_count of this CatalogCustomAttributeDefinition.
        :rtype: int
        """
        return self._custom_attribute_usage_count

    @custom_attribute_usage_count.setter
    def custom_attribute_usage_count(self, custom_attribute_usage_count):
        """Sets the custom_attribute_usage_count of this CatalogCustomAttributeDefinition.

        __Read-only.__ The number of custom attributes that reference this custom attribute definition. Set by the server in response to a ListCatalog request with `include_counts` set to `true`.  If the actual count is greater than 100, `custom_attribute_usage_count` will be set to `100`.

        :param custom_attribute_usage_count: The custom_attribute_usage_count of this CatalogCustomAttributeDefinition.
        :type custom_attribute_usage_count: int
        """

        self._custom_attribute_usage_count = custom_attribute_usage_count

    @property
    def description(self):
        """Gets the description of this CatalogCustomAttributeDefinition.

        Seller-oriented description of the meaning of this Custom Attribute, any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.

        :return: The description of this CatalogCustomAttributeDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CatalogCustomAttributeDefinition.

        Seller-oriented description of the meaning of this Custom Attribute, any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.

        :param description: The description of this CatalogCustomAttributeDefinition.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")

        self._description = description

    @property
    def key(self):
        """Gets the key of this CatalogCustomAttributeDefinition.

        The name of the desired custom attribute key that can be used to access the custom attribute value on catalog objects. Cannot be modified after the custom attribute definition has been created. Must be between 1 and 60 characters, and may only contain the characters `[a-zA-Z0-9_-]`.

        :return: The key of this CatalogCustomAttributeDefinition.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CatalogCustomAttributeDefinition.

        The name of the desired custom attribute key that can be used to access the custom attribute value on catalog objects. Cannot be modified after the custom attribute definition has been created. Must be between 1 and 60 characters, and may only contain the characters `[a-zA-Z0-9_-]`.

        :param key: The key of this CatalogCustomAttributeDefinition.
        :type key: str
        """
        if key is not None and len(key) > 60:
            raise ValueError("Invalid value for `key`, length must be less than or equal to `60`")
        if key is not None and len(key) < 1:
            raise ValueError("Invalid value for `key`, length must be greater than or equal to `1`")
        if key is not None and not re.search(r'^[a-zA-Z0-9_-]*$', key):
            raise ValueError("Invalid value for `key`, must be a follow pattern or equal to `/^[a-zA-Z0-9_-]*$/`")

        self._key = key

    @property
    def name(self):
        """Gets the name of this CatalogCustomAttributeDefinition.

         The name of this definition for API and seller-facing UI purposes. The name must be unique within the (merchant, application) pair. Required. May not be empty and may not exceed 255 characters. Can be modified after creation.

        :return: The name of this CatalogCustomAttributeDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogCustomAttributeDefinition.

         The name of this definition for API and seller-facing UI purposes. The name must be unique within the (merchant, application) pair. Required. May not be empty and may not exceed 255 characters. Can be modified after creation.

        :param name: The name of this CatalogCustomAttributeDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def number_config(self):
        """Gets the number_config of this CatalogCustomAttributeDefinition.


        :return: The number_config of this CatalogCustomAttributeDefinition.
        :rtype: CatalogCustomAttributeDefinitionNumberConfig
        """
        return self._number_config

    @number_config.setter
    def number_config(self, number_config):
        """Sets the number_config of this CatalogCustomAttributeDefinition.


        :param number_config: The number_config of this CatalogCustomAttributeDefinition.
        :type number_config: CatalogCustomAttributeDefinitionNumberConfig
        """

        self._number_config = number_config

    @property
    def selection_config(self):
        """Gets the selection_config of this CatalogCustomAttributeDefinition.


        :return: The selection_config of this CatalogCustomAttributeDefinition.
        :rtype: CatalogCustomAttributeDefinitionSelectionConfig
        """
        return self._selection_config

    @selection_config.setter
    def selection_config(self, selection_config):
        """Sets the selection_config of this CatalogCustomAttributeDefinition.


        :param selection_config: The selection_config of this CatalogCustomAttributeDefinition.
        :type selection_config: CatalogCustomAttributeDefinitionSelectionConfig
        """

        self._selection_config = selection_config

    @property
    def seller_visibility(self):
        """Gets the seller_visibility of this CatalogCustomAttributeDefinition.

        The visibility of a custom attribute in seller-facing UIs (including Square Point of Sale applications and Square Dashboard). May be modified.

        :return: The seller_visibility of this CatalogCustomAttributeDefinition.
        :rtype: str
        """
        return self._seller_visibility

    @seller_visibility.setter
    def seller_visibility(self, seller_visibility):
        """Sets the seller_visibility of this CatalogCustomAttributeDefinition.

        The visibility of a custom attribute in seller-facing UIs (including Square Point of Sale applications and Square Dashboard). May be modified.

        :param seller_visibility: The seller_visibility of this CatalogCustomAttributeDefinition.
        :type seller_visibility: str
        """

        self._seller_visibility = seller_visibility

    @property
    def source_application(self):
        """Gets the source_application of this CatalogCustomAttributeDefinition.


        :return: The source_application of this CatalogCustomAttributeDefinition.
        :rtype: SourceApplication
        """
        return self._source_application

    @source_application.setter
    def source_application(self, source_application):
        """Sets the source_application of this CatalogCustomAttributeDefinition.


        :param source_application: The source_application of this CatalogCustomAttributeDefinition.
        :type source_application: SourceApplication
        """

        self._source_application = source_application

    @property
    def string_config(self):
        """Gets the string_config of this CatalogCustomAttributeDefinition.


        :return: The string_config of this CatalogCustomAttributeDefinition.
        :rtype: CatalogCustomAttributeDefinitionStringConfig
        """
        return self._string_config

    @string_config.setter
    def string_config(self, string_config):
        """Sets the string_config of this CatalogCustomAttributeDefinition.


        :param string_config: The string_config of this CatalogCustomAttributeDefinition.
        :type string_config: CatalogCustomAttributeDefinitionStringConfig
        """

        self._string_config = string_config

    @property
    def type(self):
        """Gets the type of this CatalogCustomAttributeDefinition.

        The type of this custom attribute. Cannot be modified after creation. Required.

        :return: The type of this CatalogCustomAttributeDefinition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CatalogCustomAttributeDefinition.

        The type of this custom attribute. Cannot be modified after creation. Required.

        :param type: The type of this CatalogCustomAttributeDefinition.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
