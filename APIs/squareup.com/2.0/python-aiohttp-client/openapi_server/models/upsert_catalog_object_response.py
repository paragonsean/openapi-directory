# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_id_mapping import CatalogIdMapping
from openapi_server.models.catalog_object import CatalogObject
from openapi_server.models.error import Error
from openapi_server import util


class UpsertCatalogObjectResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_object: CatalogObject=None, errors: List[Error]=None, id_mappings: List[CatalogIdMapping]=None):
        """UpsertCatalogObjectResponse - a model defined in OpenAPI

        :param catalog_object: The catalog_object of this UpsertCatalogObjectResponse.
        :param errors: The errors of this UpsertCatalogObjectResponse.
        :param id_mappings: The id_mappings of this UpsertCatalogObjectResponse.
        """
        self.openapi_types = {
            'catalog_object': CatalogObject,
            'errors': List[Error],
            'id_mappings': List[CatalogIdMapping]
        }

        self.attribute_map = {
            'catalog_object': 'catalog_object',
            'errors': 'errors',
            'id_mappings': 'id_mappings'
        }

        self._catalog_object = catalog_object
        self._errors = errors
        self._id_mappings = id_mappings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpsertCatalogObjectResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpsertCatalogObjectResponse of this UpsertCatalogObjectResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_object(self):
        """Gets the catalog_object of this UpsertCatalogObjectResponse.


        :return: The catalog_object of this UpsertCatalogObjectResponse.
        :rtype: CatalogObject
        """
        return self._catalog_object

    @catalog_object.setter
    def catalog_object(self, catalog_object):
        """Sets the catalog_object of this UpsertCatalogObjectResponse.


        :param catalog_object: The catalog_object of this UpsertCatalogObjectResponse.
        :type catalog_object: CatalogObject
        """

        self._catalog_object = catalog_object

    @property
    def errors(self):
        """Gets the errors of this UpsertCatalogObjectResponse.

        Any errors that occurred during the request.

        :return: The errors of this UpsertCatalogObjectResponse.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this UpsertCatalogObjectResponse.

        Any errors that occurred during the request.

        :param errors: The errors of this UpsertCatalogObjectResponse.
        :type errors: List[Error]
        """

        self._errors = errors

    @property
    def id_mappings(self):
        """Gets the id_mappings of this UpsertCatalogObjectResponse.

        The mapping between client and server IDs for this upsert.

        :return: The id_mappings of this UpsertCatalogObjectResponse.
        :rtype: List[CatalogIdMapping]
        """
        return self._id_mappings

    @id_mappings.setter
    def id_mappings(self, id_mappings):
        """Sets the id_mappings of this UpsertCatalogObjectResponse.

        The mapping between client and server IDs for this upsert.

        :param id_mappings: The id_mappings of this UpsertCatalogObjectResponse.
        :type id_mappings: List[CatalogIdMapping]
        """

        self._id_mappings = id_mappings
