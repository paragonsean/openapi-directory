# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderLineItemPricingBlocklistsBlockedDiscount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discount_catalog_object_id: str=None, discount_uid: str=None, uid: str=None):
        """OrderLineItemPricingBlocklistsBlockedDiscount - a model defined in OpenAPI

        :param discount_catalog_object_id: The discount_catalog_object_id of this OrderLineItemPricingBlocklistsBlockedDiscount.
        :param discount_uid: The discount_uid of this OrderLineItemPricingBlocklistsBlockedDiscount.
        :param uid: The uid of this OrderLineItemPricingBlocklistsBlockedDiscount.
        """
        self.openapi_types = {
            'discount_catalog_object_id': str,
            'discount_uid': str,
            'uid': str
        }

        self.attribute_map = {
            'discount_catalog_object_id': 'discount_catalog_object_id',
            'discount_uid': 'discount_uid',
            'uid': 'uid'
        }

        self._discount_catalog_object_id = discount_catalog_object_id
        self._discount_uid = discount_uid
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderLineItemPricingBlocklistsBlockedDiscount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderLineItemPricingBlocklistsBlockedDiscount of this OrderLineItemPricingBlocklistsBlockedDiscount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discount_catalog_object_id(self):
        """Gets the discount_catalog_object_id of this OrderLineItemPricingBlocklistsBlockedDiscount.

        The `catalog_object_id` of the discount that should be blocked.  Use this field to block catalog discounts. For ad hoc discounts, use the  `discount_uid` field.

        :return: The discount_catalog_object_id of this OrderLineItemPricingBlocklistsBlockedDiscount.
        :rtype: str
        """
        return self._discount_catalog_object_id

    @discount_catalog_object_id.setter
    def discount_catalog_object_id(self, discount_catalog_object_id):
        """Sets the discount_catalog_object_id of this OrderLineItemPricingBlocklistsBlockedDiscount.

        The `catalog_object_id` of the discount that should be blocked.  Use this field to block catalog discounts. For ad hoc discounts, use the  `discount_uid` field.

        :param discount_catalog_object_id: The discount_catalog_object_id of this OrderLineItemPricingBlocklistsBlockedDiscount.
        :type discount_catalog_object_id: str
        """
        if discount_catalog_object_id is not None and len(discount_catalog_object_id) > 192:
            raise ValueError("Invalid value for `discount_catalog_object_id`, length must be less than or equal to `192`")

        self._discount_catalog_object_id = discount_catalog_object_id

    @property
    def discount_uid(self):
        """Gets the discount_uid of this OrderLineItemPricingBlocklistsBlockedDiscount.

        The `uid` of the discount that should be blocked. Use this field to block  ad hoc discounts. For catalog discounts, use the `discount_catalog_object_id` field.

        :return: The discount_uid of this OrderLineItemPricingBlocklistsBlockedDiscount.
        :rtype: str
        """
        return self._discount_uid

    @discount_uid.setter
    def discount_uid(self, discount_uid):
        """Sets the discount_uid of this OrderLineItemPricingBlocklistsBlockedDiscount.

        The `uid` of the discount that should be blocked. Use this field to block  ad hoc discounts. For catalog discounts, use the `discount_catalog_object_id` field.

        :param discount_uid: The discount_uid of this OrderLineItemPricingBlocklistsBlockedDiscount.
        :type discount_uid: str
        """
        if discount_uid is not None and len(discount_uid) > 60:
            raise ValueError("Invalid value for `discount_uid`, length must be less than or equal to `60`")

        self._discount_uid = discount_uid

    @property
    def uid(self):
        """Gets the uid of this OrderLineItemPricingBlocklistsBlockedDiscount.

        A unique ID of the `BlockedDiscount` within the order.

        :return: The uid of this OrderLineItemPricingBlocklistsBlockedDiscount.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OrderLineItemPricingBlocklistsBlockedDiscount.

        A unique ID of the `BlockedDiscount` within the order.

        :param uid: The uid of this OrderLineItemPricingBlocklistsBlockedDiscount.
        :type uid: str
        """
        if uid is not None and len(uid) > 60:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `60`")

        self._uid = uid
