# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class OrderLineItemAppliedTax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_money: Money=None, tax_uid: str=None, uid: str=None):
        """OrderLineItemAppliedTax - a model defined in OpenAPI

        :param applied_money: The applied_money of this OrderLineItemAppliedTax.
        :param tax_uid: The tax_uid of this OrderLineItemAppliedTax.
        :param uid: The uid of this OrderLineItemAppliedTax.
        """
        self.openapi_types = {
            'applied_money': Money,
            'tax_uid': str,
            'uid': str
        }

        self.attribute_map = {
            'applied_money': 'applied_money',
            'tax_uid': 'tax_uid',
            'uid': 'uid'
        }

        self._applied_money = applied_money
        self._tax_uid = tax_uid
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderLineItemAppliedTax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderLineItemAppliedTax of this OrderLineItemAppliedTax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_money(self):
        """Gets the applied_money of this OrderLineItemAppliedTax.


        :return: The applied_money of this OrderLineItemAppliedTax.
        :rtype: Money
        """
        return self._applied_money

    @applied_money.setter
    def applied_money(self, applied_money):
        """Sets the applied_money of this OrderLineItemAppliedTax.


        :param applied_money: The applied_money of this OrderLineItemAppliedTax.
        :type applied_money: Money
        """

        self._applied_money = applied_money

    @property
    def tax_uid(self):
        """Gets the tax_uid of this OrderLineItemAppliedTax.

        The `uid` of the tax for which this applied tax represents. It must reference a tax present in the `order.taxes` field.  This field is immutable. To change which taxes apply to a line item, delete and add a new `OrderLineItemAppliedTax`.

        :return: The tax_uid of this OrderLineItemAppliedTax.
        :rtype: str
        """
        return self._tax_uid

    @tax_uid.setter
    def tax_uid(self, tax_uid):
        """Sets the tax_uid of this OrderLineItemAppliedTax.

        The `uid` of the tax for which this applied tax represents. It must reference a tax present in the `order.taxes` field.  This field is immutable. To change which taxes apply to a line item, delete and add a new `OrderLineItemAppliedTax`.

        :param tax_uid: The tax_uid of this OrderLineItemAppliedTax.
        :type tax_uid: str
        """
        if tax_uid is None:
            raise ValueError("Invalid value for `tax_uid`, must not be `None`")
        if tax_uid is not None and len(tax_uid) > 60:
            raise ValueError("Invalid value for `tax_uid`, length must be less than or equal to `60`")
        if tax_uid is not None and len(tax_uid) < 1:
            raise ValueError("Invalid value for `tax_uid`, length must be greater than or equal to `1`")

        self._tax_uid = tax_uid

    @property
    def uid(self):
        """Gets the uid of this OrderLineItemAppliedTax.

        A unique ID that identifies the applied tax only within this order.

        :return: The uid of this OrderLineItemAppliedTax.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OrderLineItemAppliedTax.

        A unique ID that identifies the applied tax only within this order.

        :param uid: The uid of this OrderLineItemAppliedTax.
        :type uid: str
        """
        if uid is not None and len(uid) > 60:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `60`")

        self._uid = uid
