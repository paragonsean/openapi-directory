# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.business_appointment_settings import BusinessAppointmentSettings
from openapi_server import util


class BusinessBookingProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_user_cancel: bool=None, booking_enabled: bool=None, booking_policy: str=None, business_appointment_settings: BusinessAppointmentSettings=None, created_at: str=None, customer_timezone_choice: str=None, seller_id: str=None):
        """BusinessBookingProfile - a model defined in OpenAPI

        :param allow_user_cancel: The allow_user_cancel of this BusinessBookingProfile.
        :param booking_enabled: The booking_enabled of this BusinessBookingProfile.
        :param booking_policy: The booking_policy of this BusinessBookingProfile.
        :param business_appointment_settings: The business_appointment_settings of this BusinessBookingProfile.
        :param created_at: The created_at of this BusinessBookingProfile.
        :param customer_timezone_choice: The customer_timezone_choice of this BusinessBookingProfile.
        :param seller_id: The seller_id of this BusinessBookingProfile.
        """
        self.openapi_types = {
            'allow_user_cancel': bool,
            'booking_enabled': bool,
            'booking_policy': str,
            'business_appointment_settings': BusinessAppointmentSettings,
            'created_at': str,
            'customer_timezone_choice': str,
            'seller_id': str
        }

        self.attribute_map = {
            'allow_user_cancel': 'allow_user_cancel',
            'booking_enabled': 'booking_enabled',
            'booking_policy': 'booking_policy',
            'business_appointment_settings': 'business_appointment_settings',
            'created_at': 'created_at',
            'customer_timezone_choice': 'customer_timezone_choice',
            'seller_id': 'seller_id'
        }

        self._allow_user_cancel = allow_user_cancel
        self._booking_enabled = booking_enabled
        self._booking_policy = booking_policy
        self._business_appointment_settings = business_appointment_settings
        self._created_at = created_at
        self._customer_timezone_choice = customer_timezone_choice
        self._seller_id = seller_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BusinessBookingProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BusinessBookingProfile of this BusinessBookingProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_user_cancel(self):
        """Gets the allow_user_cancel of this BusinessBookingProfile.

        Indicates whether customers can cancel or reschedule their own bookings (`true`) or not (`false`).

        :return: The allow_user_cancel of this BusinessBookingProfile.
        :rtype: bool
        """
        return self._allow_user_cancel

    @allow_user_cancel.setter
    def allow_user_cancel(self, allow_user_cancel):
        """Sets the allow_user_cancel of this BusinessBookingProfile.

        Indicates whether customers can cancel or reschedule their own bookings (`true`) or not (`false`).

        :param allow_user_cancel: The allow_user_cancel of this BusinessBookingProfile.
        :type allow_user_cancel: bool
        """

        self._allow_user_cancel = allow_user_cancel

    @property
    def booking_enabled(self):
        """Gets the booking_enabled of this BusinessBookingProfile.

        Indicates whether the seller is open for booking.

        :return: The booking_enabled of this BusinessBookingProfile.
        :rtype: bool
        """
        return self._booking_enabled

    @booking_enabled.setter
    def booking_enabled(self, booking_enabled):
        """Sets the booking_enabled of this BusinessBookingProfile.

        Indicates whether the seller is open for booking.

        :param booking_enabled: The booking_enabled of this BusinessBookingProfile.
        :type booking_enabled: bool
        """

        self._booking_enabled = booking_enabled

    @property
    def booking_policy(self):
        """Gets the booking_policy of this BusinessBookingProfile.

        The policy for the seller to automatically accept booking requests (`ACCEPT_ALL`) or not (`REQUIRES_ACCEPTANCE`).

        :return: The booking_policy of this BusinessBookingProfile.
        :rtype: str
        """
        return self._booking_policy

    @booking_policy.setter
    def booking_policy(self, booking_policy):
        """Sets the booking_policy of this BusinessBookingProfile.

        The policy for the seller to automatically accept booking requests (`ACCEPT_ALL`) or not (`REQUIRES_ACCEPTANCE`).

        :param booking_policy: The booking_policy of this BusinessBookingProfile.
        :type booking_policy: str
        """

        self._booking_policy = booking_policy

    @property
    def business_appointment_settings(self):
        """Gets the business_appointment_settings of this BusinessBookingProfile.


        :return: The business_appointment_settings of this BusinessBookingProfile.
        :rtype: BusinessAppointmentSettings
        """
        return self._business_appointment_settings

    @business_appointment_settings.setter
    def business_appointment_settings(self, business_appointment_settings):
        """Sets the business_appointment_settings of this BusinessBookingProfile.


        :param business_appointment_settings: The business_appointment_settings of this BusinessBookingProfile.
        :type business_appointment_settings: BusinessAppointmentSettings
        """

        self._business_appointment_settings = business_appointment_settings

    @property
    def created_at(self):
        """Gets the created_at of this BusinessBookingProfile.

        The RFC 3339 timestamp specifying the booking's creation time.

        :return: The created_at of this BusinessBookingProfile.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BusinessBookingProfile.

        The RFC 3339 timestamp specifying the booking's creation time.

        :param created_at: The created_at of this BusinessBookingProfile.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def customer_timezone_choice(self):
        """Gets the customer_timezone_choice of this BusinessBookingProfile.

        The choice of customer's time zone information of a booking. The Square online booking site and all notifications to customers uses either the seller location’s time zone or the time zone the customer chooses at booking.

        :return: The customer_timezone_choice of this BusinessBookingProfile.
        :rtype: str
        """
        return self._customer_timezone_choice

    @customer_timezone_choice.setter
    def customer_timezone_choice(self, customer_timezone_choice):
        """Sets the customer_timezone_choice of this BusinessBookingProfile.

        The choice of customer's time zone information of a booking. The Square online booking site and all notifications to customers uses either the seller location’s time zone or the time zone the customer chooses at booking.

        :param customer_timezone_choice: The customer_timezone_choice of this BusinessBookingProfile.
        :type customer_timezone_choice: str
        """

        self._customer_timezone_choice = customer_timezone_choice

    @property
    def seller_id(self):
        """Gets the seller_id of this BusinessBookingProfile.

        The ID of the seller, obtainable using the Merchants API.

        :return: The seller_id of this BusinessBookingProfile.
        :rtype: str
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this BusinessBookingProfile.

        The ID of the seller, obtainable using the Merchants API.

        :param seller_id: The seller_id of this BusinessBookingProfile.
        :type seller_id: str
        """

        self._seller_id = seller_id
