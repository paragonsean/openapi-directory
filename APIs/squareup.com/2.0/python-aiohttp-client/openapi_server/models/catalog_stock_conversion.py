# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogStockConversion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nonstockable_quantity: str=None, stockable_item_variation_id: str=None, stockable_quantity: str=None):
        """CatalogStockConversion - a model defined in OpenAPI

        :param nonstockable_quantity: The nonstockable_quantity of this CatalogStockConversion.
        :param stockable_item_variation_id: The stockable_item_variation_id of this CatalogStockConversion.
        :param stockable_quantity: The stockable_quantity of this CatalogStockConversion.
        """
        self.openapi_types = {
            'nonstockable_quantity': str,
            'stockable_item_variation_id': str,
            'stockable_quantity': str
        }

        self.attribute_map = {
            'nonstockable_quantity': 'nonstockable_quantity',
            'stockable_item_variation_id': 'stockable_item_variation_id',
            'stockable_quantity': 'stockable_quantity'
        }

        self._nonstockable_quantity = nonstockable_quantity
        self._stockable_item_variation_id = stockable_item_variation_id
        self._stockable_quantity = stockable_quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogStockConversion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogStockConversion of this CatalogStockConversion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nonstockable_quantity(self):
        """Gets the nonstockable_quantity of this CatalogStockConversion.

        The converted equivalent quantity of the non-stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)  in its measurement unit. The `stockable_quantity` value and this `nonstockable_quantity` value together define the conversion ratio between stockable item variation and the non-stockable item variation. It accepts a decimal number in a string format that can take up to 10 digits before the decimal point and up to 5 digits after the decimal point.

        :return: The nonstockable_quantity of this CatalogStockConversion.
        :rtype: str
        """
        return self._nonstockable_quantity

    @nonstockable_quantity.setter
    def nonstockable_quantity(self, nonstockable_quantity):
        """Sets the nonstockable_quantity of this CatalogStockConversion.

        The converted equivalent quantity of the non-stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)  in its measurement unit. The `stockable_quantity` value and this `nonstockable_quantity` value together define the conversion ratio between stockable item variation and the non-stockable item variation. It accepts a decimal number in a string format that can take up to 10 digits before the decimal point and up to 5 digits after the decimal point.

        :param nonstockable_quantity: The nonstockable_quantity of this CatalogStockConversion.
        :type nonstockable_quantity: str
        """
        if nonstockable_quantity is None:
            raise ValueError("Invalid value for `nonstockable_quantity`, must not be `None`")
        if nonstockable_quantity is not None and len(nonstockable_quantity) > 16:
            raise ValueError("Invalid value for `nonstockable_quantity`, length must be less than or equal to `16`")
        if nonstockable_quantity is not None and len(nonstockable_quantity) < 1:
            raise ValueError("Invalid value for `nonstockable_quantity`, length must be greater than or equal to `1`")

        self._nonstockable_quantity = nonstockable_quantity

    @property
    def stockable_item_variation_id(self):
        """Gets the stockable_item_variation_id of this CatalogStockConversion.

        References to the stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) for this stock conversion. Selling, receiving or recounting the non-stockable `CatalogItemVariation`  defined with a stock conversion results in adjustments of this stockable `CatalogItemVariation`. This immutable field must reference a stockable `CatalogItemVariation` that shares the parent [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) of the converted `CatalogItemVariation.`

        :return: The stockable_item_variation_id of this CatalogStockConversion.
        :rtype: str
        """
        return self._stockable_item_variation_id

    @stockable_item_variation_id.setter
    def stockable_item_variation_id(self, stockable_item_variation_id):
        """Sets the stockable_item_variation_id of this CatalogStockConversion.

        References to the stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) for this stock conversion. Selling, receiving or recounting the non-stockable `CatalogItemVariation`  defined with a stock conversion results in adjustments of this stockable `CatalogItemVariation`. This immutable field must reference a stockable `CatalogItemVariation` that shares the parent [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) of the converted `CatalogItemVariation.`

        :param stockable_item_variation_id: The stockable_item_variation_id of this CatalogStockConversion.
        :type stockable_item_variation_id: str
        """
        if stockable_item_variation_id is None:
            raise ValueError("Invalid value for `stockable_item_variation_id`, must not be `None`")
        if stockable_item_variation_id is not None and len(stockable_item_variation_id) < 1:
            raise ValueError("Invalid value for `stockable_item_variation_id`, length must be greater than or equal to `1`")

        self._stockable_item_variation_id = stockable_item_variation_id

    @property
    def stockable_quantity(self):
        """Gets the stockable_quantity of this CatalogStockConversion.

        The quantity of the stockable item variation (as identified by `stockable_item_variation_id`)  equivalent to the non-stockable item variation quantity (as specified in `nonstockable_quantity`)  as defined by this stock conversion.  It accepts a decimal number in a string format that can take up to 10 digits before the decimal point and up to 5 digits after the decimal point.

        :return: The stockable_quantity of this CatalogStockConversion.
        :rtype: str
        """
        return self._stockable_quantity

    @stockable_quantity.setter
    def stockable_quantity(self, stockable_quantity):
        """Sets the stockable_quantity of this CatalogStockConversion.

        The quantity of the stockable item variation (as identified by `stockable_item_variation_id`)  equivalent to the non-stockable item variation quantity (as specified in `nonstockable_quantity`)  as defined by this stock conversion.  It accepts a decimal number in a string format that can take up to 10 digits before the decimal point and up to 5 digits after the decimal point.

        :param stockable_quantity: The stockable_quantity of this CatalogStockConversion.
        :type stockable_quantity: str
        """
        if stockable_quantity is None:
            raise ValueError("Invalid value for `stockable_quantity`, must not be `None`")
        if stockable_quantity is not None and len(stockable_quantity) > 16:
            raise ValueError("Invalid value for `stockable_quantity`, length must be less than or equal to `16`")
        if stockable_quantity is not None and len(stockable_quantity) < 1:
            raise ValueError("Invalid value for `stockable_quantity`, length must be greater than or equal to `1`")

        self._stockable_quantity = stockable_quantity
