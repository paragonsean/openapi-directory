# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class CatalogDiscount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: Money=None, discount_type: str=None, label_color: str=None, modify_tax_basis: str=None, name: str=None, percentage: str=None, pin_required: bool=None):
        """CatalogDiscount - a model defined in OpenAPI

        :param amount_money: The amount_money of this CatalogDiscount.
        :param discount_type: The discount_type of this CatalogDiscount.
        :param label_color: The label_color of this CatalogDiscount.
        :param modify_tax_basis: The modify_tax_basis of this CatalogDiscount.
        :param name: The name of this CatalogDiscount.
        :param percentage: The percentage of this CatalogDiscount.
        :param pin_required: The pin_required of this CatalogDiscount.
        """
        self.openapi_types = {
            'amount_money': Money,
            'discount_type': str,
            'label_color': str,
            'modify_tax_basis': str,
            'name': str,
            'percentage': str,
            'pin_required': bool
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'discount_type': 'discount_type',
            'label_color': 'label_color',
            'modify_tax_basis': 'modify_tax_basis',
            'name': 'name',
            'percentage': 'percentage',
            'pin_required': 'pin_required'
        }

        self._amount_money = amount_money
        self._discount_type = discount_type
        self._label_color = label_color
        self._modify_tax_basis = modify_tax_basis
        self._name = name
        self._percentage = percentage
        self._pin_required = pin_required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDiscount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogDiscount of this CatalogDiscount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this CatalogDiscount.


        :return: The amount_money of this CatalogDiscount.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this CatalogDiscount.


        :param amount_money: The amount_money of this CatalogDiscount.
        :type amount_money: Money
        """

        self._amount_money = amount_money

    @property
    def discount_type(self):
        """Gets the discount_type of this CatalogDiscount.

        Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale.

        :return: The discount_type of this CatalogDiscount.
        :rtype: str
        """
        return self._discount_type

    @discount_type.setter
    def discount_type(self, discount_type):
        """Sets the discount_type of this CatalogDiscount.

        Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale.

        :param discount_type: The discount_type of this CatalogDiscount.
        :type discount_type: str
        """

        self._discount_type = discount_type

    @property
    def label_color(self):
        """Gets the label_color of this CatalogDiscount.

        The color of the discount display label in the Square Point of Sale app. This must be a valid hex color code.

        :return: The label_color of this CatalogDiscount.
        :rtype: str
        """
        return self._label_color

    @label_color.setter
    def label_color(self, label_color):
        """Sets the label_color of this CatalogDiscount.

        The color of the discount display label in the Square Point of Sale app. This must be a valid hex color code.

        :param label_color: The label_color of this CatalogDiscount.
        :type label_color: str
        """

        self._label_color = label_color

    @property
    def modify_tax_basis(self):
        """Gets the modify_tax_basis of this CatalogDiscount.

        Indicates whether this discount should reduce the price used to calculate tax.  Most discounts should use `MODIFY_TAX_BASIS`. However, in some circumstances taxes must be calculated based on an item's price, ignoring a particular discount. For example, in many US jurisdictions, a manufacturer coupon or instant rebate reduces the price a customer pays but does not reduce the sale price used to calculate how much sales tax is due. In this case, the discount representing that manufacturer coupon should have `DO_NOT_MODIFY_TAX_BASIS` for this field.  If you are unsure whether you need to use this field, consult your tax professional.

        :return: The modify_tax_basis of this CatalogDiscount.
        :rtype: str
        """
        return self._modify_tax_basis

    @modify_tax_basis.setter
    def modify_tax_basis(self, modify_tax_basis):
        """Sets the modify_tax_basis of this CatalogDiscount.

        Indicates whether this discount should reduce the price used to calculate tax.  Most discounts should use `MODIFY_TAX_BASIS`. However, in some circumstances taxes must be calculated based on an item's price, ignoring a particular discount. For example, in many US jurisdictions, a manufacturer coupon or instant rebate reduces the price a customer pays but does not reduce the sale price used to calculate how much sales tax is due. In this case, the discount representing that manufacturer coupon should have `DO_NOT_MODIFY_TAX_BASIS` for this field.  If you are unsure whether you need to use this field, consult your tax professional.

        :param modify_tax_basis: The modify_tax_basis of this CatalogDiscount.
        :type modify_tax_basis: str
        """

        self._modify_tax_basis = modify_tax_basis

    @property
    def name(self):
        """Gets the name of this CatalogDiscount.

        The discount name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.

        :return: The name of this CatalogDiscount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogDiscount.

        The discount name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.

        :param name: The name of this CatalogDiscount.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this CatalogDiscount.

        The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type` is `VARIABLE_PERCENTAGE`.  Do not use this field for amount-based or variable discounts.

        :return: The percentage of this CatalogDiscount.
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this CatalogDiscount.

        The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type` is `VARIABLE_PERCENTAGE`.  Do not use this field for amount-based or variable discounts.

        :param percentage: The percentage of this CatalogDiscount.
        :type percentage: str
        """

        self._percentage = percentage

    @property
    def pin_required(self):
        """Gets the pin_required of this CatalogDiscount.

        Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment in the Square Point of Sale app.

        :return: The pin_required of this CatalogDiscount.
        :rtype: bool
        """
        return self._pin_required

    @pin_required.setter
    def pin_required(self, pin_required):
        """Sets the pin_required of this CatalogDiscount.

        Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment in the Square Point of Sale app.

        :param pin_required: The pin_required of this CatalogDiscount.
        :type pin_required: bool
        """

        self._pin_required = pin_required
