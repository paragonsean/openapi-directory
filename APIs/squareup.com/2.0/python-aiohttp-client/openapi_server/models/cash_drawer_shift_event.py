# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class CashDrawerShiftEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, description: str=None, employee_id: str=None, event_money: Money=None, event_type: str=None, id: str=None):
        """CashDrawerShiftEvent - a model defined in OpenAPI

        :param created_at: The created_at of this CashDrawerShiftEvent.
        :param description: The description of this CashDrawerShiftEvent.
        :param employee_id: The employee_id of this CashDrawerShiftEvent.
        :param event_money: The event_money of this CashDrawerShiftEvent.
        :param event_type: The event_type of this CashDrawerShiftEvent.
        :param id: The id of this CashDrawerShiftEvent.
        """
        self.openapi_types = {
            'created_at': str,
            'description': str,
            'employee_id': str,
            'event_money': Money,
            'event_type': str,
            'id': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'description': 'description',
            'employee_id': 'employee_id',
            'event_money': 'event_money',
            'event_type': 'event_type',
            'id': 'id'
        }

        self._created_at = created_at
        self._description = description
        self._employee_id = employee_id
        self._event_money = event_money
        self._event_type = event_type
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CashDrawerShiftEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CashDrawerShiftEvent of this CashDrawerShiftEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this CashDrawerShiftEvent.

        The event time in ISO 8601 format.

        :return: The created_at of this CashDrawerShiftEvent.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CashDrawerShiftEvent.

        The event time in ISO 8601 format.

        :param created_at: The created_at of this CashDrawerShiftEvent.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this CashDrawerShiftEvent.

        An optional description of the event, entered by the employee that created the event.

        :return: The description of this CashDrawerShiftEvent.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CashDrawerShiftEvent.

        An optional description of the event, entered by the employee that created the event.

        :param description: The description of this CashDrawerShiftEvent.
        :type description: str
        """

        self._description = description

    @property
    def employee_id(self):
        """Gets the employee_id of this CashDrawerShiftEvent.

        The ID of the employee that created the event.

        :return: The employee_id of this CashDrawerShiftEvent.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this CashDrawerShiftEvent.

        The ID of the employee that created the event.

        :param employee_id: The employee_id of this CashDrawerShiftEvent.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def event_money(self):
        """Gets the event_money of this CashDrawerShiftEvent.


        :return: The event_money of this CashDrawerShiftEvent.
        :rtype: Money
        """
        return self._event_money

    @event_money.setter
    def event_money(self, event_money):
        """Sets the event_money of this CashDrawerShiftEvent.


        :param event_money: The event_money of this CashDrawerShiftEvent.
        :type event_money: Money
        """

        self._event_money = event_money

    @property
    def event_type(self):
        """Gets the event_type of this CashDrawerShiftEvent.

        The type of cash drawer shift event.

        :return: The event_type of this CashDrawerShiftEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this CashDrawerShiftEvent.

        The type of cash drawer shift event.

        :param event_type: The event_type of this CashDrawerShiftEvent.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def id(self):
        """Gets the id of this CashDrawerShiftEvent.

        The unique ID of the event.

        :return: The id of this CashDrawerShiftEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CashDrawerShiftEvent.

        The unique ID of the event.

        :param id: The id of this CashDrawerShiftEvent.
        :type id: str
        """

        self._id = id
