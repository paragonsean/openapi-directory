# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogQueryPrefix(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_name: str=None, attribute_prefix: str=None):
        """CatalogQueryPrefix - a model defined in OpenAPI

        :param attribute_name: The attribute_name of this CatalogQueryPrefix.
        :param attribute_prefix: The attribute_prefix of this CatalogQueryPrefix.
        """
        self.openapi_types = {
            'attribute_name': str,
            'attribute_prefix': str
        }

        self.attribute_map = {
            'attribute_name': 'attribute_name',
            'attribute_prefix': 'attribute_prefix'
        }

        self._attribute_name = attribute_name
        self._attribute_prefix = attribute_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogQueryPrefix':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogQueryPrefix of this CatalogQueryPrefix.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_name(self):
        """Gets the attribute_name of this CatalogQueryPrefix.

        The name of the attribute to be searched.

        :return: The attribute_name of this CatalogQueryPrefix.
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this CatalogQueryPrefix.

        The name of the attribute to be searched.

        :param attribute_name: The attribute_name of this CatalogQueryPrefix.
        :type attribute_name: str
        """
        if attribute_name is None:
            raise ValueError("Invalid value for `attribute_name`, must not be `None`")
        if attribute_name is not None and len(attribute_name) < 1:
            raise ValueError("Invalid value for `attribute_name`, length must be greater than or equal to `1`")

        self._attribute_name = attribute_name

    @property
    def attribute_prefix(self):
        """Gets the attribute_prefix of this CatalogQueryPrefix.

        The desired prefix of the search attribute value.

        :return: The attribute_prefix of this CatalogQueryPrefix.
        :rtype: str
        """
        return self._attribute_prefix

    @attribute_prefix.setter
    def attribute_prefix(self, attribute_prefix):
        """Sets the attribute_prefix of this CatalogQueryPrefix.

        The desired prefix of the search attribute value.

        :param attribute_prefix: The attribute_prefix of this CatalogQueryPrefix.
        :type attribute_prefix: str
        """
        if attribute_prefix is None:
            raise ValueError("Invalid value for `attribute_prefix`, must not be `None`")
        if attribute_prefix is not None and len(attribute_prefix) < 1:
            raise ValueError("Invalid value for `attribute_prefix`, length must be greater than or equal to `1`")

        self._attribute_prefix = attribute_prefix
