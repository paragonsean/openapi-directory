# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_recipient import AdditionalRecipient
from openapi_server.models.money import Money
from openapi_server import util


class Refund(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_recipients: List[AdditionalRecipient]=None, amount_money: Money=None, created_at: str=None, id: str=None, location_id: str=None, processing_fee_money: Money=None, reason: str=None, status: str=None, tender_id: str=None, transaction_id: str=None):
        """Refund - a model defined in OpenAPI

        :param additional_recipients: The additional_recipients of this Refund.
        :param amount_money: The amount_money of this Refund.
        :param created_at: The created_at of this Refund.
        :param id: The id of this Refund.
        :param location_id: The location_id of this Refund.
        :param processing_fee_money: The processing_fee_money of this Refund.
        :param reason: The reason of this Refund.
        :param status: The status of this Refund.
        :param tender_id: The tender_id of this Refund.
        :param transaction_id: The transaction_id of this Refund.
        """
        self.openapi_types = {
            'additional_recipients': List[AdditionalRecipient],
            'amount_money': Money,
            'created_at': str,
            'id': str,
            'location_id': str,
            'processing_fee_money': Money,
            'reason': str,
            'status': str,
            'tender_id': str,
            'transaction_id': str
        }

        self.attribute_map = {
            'additional_recipients': 'additional_recipients',
            'amount_money': 'amount_money',
            'created_at': 'created_at',
            'id': 'id',
            'location_id': 'location_id',
            'processing_fee_money': 'processing_fee_money',
            'reason': 'reason',
            'status': 'status',
            'tender_id': 'tender_id',
            'transaction_id': 'transaction_id'
        }

        self._additional_recipients = additional_recipients
        self._amount_money = amount_money
        self._created_at = created_at
        self._id = id
        self._location_id = location_id
        self._processing_fee_money = processing_fee_money
        self._reason = reason
        self._status = status
        self._tender_id = tender_id
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Refund':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Refund of this Refund.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_recipients(self):
        """Gets the additional_recipients of this Refund.

        Additional recipients (other than the merchant) receiving a portion of this refund. For example, fees assessed on a refund of a purchase by a third party integration.

        :return: The additional_recipients of this Refund.
        :rtype: List[AdditionalRecipient]
        """
        return self._additional_recipients

    @additional_recipients.setter
    def additional_recipients(self, additional_recipients):
        """Sets the additional_recipients of this Refund.

        Additional recipients (other than the merchant) receiving a portion of this refund. For example, fees assessed on a refund of a purchase by a third party integration.

        :param additional_recipients: The additional_recipients of this Refund.
        :type additional_recipients: List[AdditionalRecipient]
        """

        self._additional_recipients = additional_recipients

    @property
    def amount_money(self):
        """Gets the amount_money of this Refund.


        :return: The amount_money of this Refund.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this Refund.


        :param amount_money: The amount_money of this Refund.
        :type amount_money: Money
        """
        if amount_money is None:
            raise ValueError("Invalid value for `amount_money`, must not be `None`")

        self._amount_money = amount_money

    @property
    def created_at(self):
        """Gets the created_at of this Refund.

        The timestamp for when the refund was created, in RFC 3339 format.

        :return: The created_at of this Refund.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Refund.

        The timestamp for when the refund was created, in RFC 3339 format.

        :param created_at: The created_at of this Refund.
        :type created_at: str
        """
        if created_at is not None and len(created_at) > 32:
            raise ValueError("Invalid value for `created_at`, length must be less than or equal to `32`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Refund.

        The refund's unique ID.

        :return: The id of this Refund.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Refund.

        The refund's unique ID.

        :param id: The id of this Refund.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this Refund.

        The ID of the refund's associated location.

        :return: The location_id of this Refund.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Refund.

        The ID of the refund's associated location.

        :param location_id: The location_id of this Refund.
        :type location_id: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")
        if location_id is not None and len(location_id) > 50:
            raise ValueError("Invalid value for `location_id`, length must be less than or equal to `50`")

        self._location_id = location_id

    @property
    def processing_fee_money(self):
        """Gets the processing_fee_money of this Refund.


        :return: The processing_fee_money of this Refund.
        :rtype: Money
        """
        return self._processing_fee_money

    @processing_fee_money.setter
    def processing_fee_money(self, processing_fee_money):
        """Sets the processing_fee_money of this Refund.


        :param processing_fee_money: The processing_fee_money of this Refund.
        :type processing_fee_money: Money
        """

        self._processing_fee_money = processing_fee_money

    @property
    def reason(self):
        """Gets the reason of this Refund.

        The reason for the refund being issued.

        :return: The reason of this Refund.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Refund.

        The reason for the refund being issued.

        :param reason: The reason of this Refund.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")
        if reason is not None and len(reason) > 192:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `192`")

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this Refund.

        The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`).

        :return: The status of this Refund.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Refund.

        The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`).

        :param status: The status of this Refund.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tender_id(self):
        """Gets the tender_id of this Refund.

        The ID of the refunded tender.

        :return: The tender_id of this Refund.
        :rtype: str
        """
        return self._tender_id

    @tender_id.setter
    def tender_id(self, tender_id):
        """Sets the tender_id of this Refund.

        The ID of the refunded tender.

        :param tender_id: The tender_id of this Refund.
        :type tender_id: str
        """
        if tender_id is None:
            raise ValueError("Invalid value for `tender_id`, must not be `None`")
        if tender_id is not None and len(tender_id) > 192:
            raise ValueError("Invalid value for `tender_id`, length must be less than or equal to `192`")

        self._tender_id = tender_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this Refund.

        The ID of the transaction that the refunded tender is part of.

        :return: The transaction_id of this Refund.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this Refund.

        The ID of the transaction that the refunded tender is part of.

        :param transaction_id: The transaction_id of this Refund.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")
        if transaction_id is not None and len(transaction_id) > 192:
            raise ValueError("Invalid value for `transaction_id`, length must be less than or equal to `192`")

        self._transaction_id = transaction_id
