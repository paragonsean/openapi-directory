# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class RefundPaymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: Money=None, app_fee_money: Money=None, idempotency_key: str=None, payment_id: str=None, reason: str=None):
        """RefundPaymentRequest - a model defined in OpenAPI

        :param amount_money: The amount_money of this RefundPaymentRequest.
        :param app_fee_money: The app_fee_money of this RefundPaymentRequest.
        :param idempotency_key: The idempotency_key of this RefundPaymentRequest.
        :param payment_id: The payment_id of this RefundPaymentRequest.
        :param reason: The reason of this RefundPaymentRequest.
        """
        self.openapi_types = {
            'amount_money': Money,
            'app_fee_money': Money,
            'idempotency_key': str,
            'payment_id': str,
            'reason': str
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'app_fee_money': 'app_fee_money',
            'idempotency_key': 'idempotency_key',
            'payment_id': 'payment_id',
            'reason': 'reason'
        }

        self._amount_money = amount_money
        self._app_fee_money = app_fee_money
        self._idempotency_key = idempotency_key
        self._payment_id = payment_id
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RefundPaymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RefundPaymentRequest of this RefundPaymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this RefundPaymentRequest.


        :return: The amount_money of this RefundPaymentRequest.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this RefundPaymentRequest.


        :param amount_money: The amount_money of this RefundPaymentRequest.
        :type amount_money: Money
        """
        if amount_money is None:
            raise ValueError("Invalid value for `amount_money`, must not be `None`")

        self._amount_money = amount_money

    @property
    def app_fee_money(self):
        """Gets the app_fee_money of this RefundPaymentRequest.


        :return: The app_fee_money of this RefundPaymentRequest.
        :rtype: Money
        """
        return self._app_fee_money

    @app_fee_money.setter
    def app_fee_money(self, app_fee_money):
        """Sets the app_fee_money of this RefundPaymentRequest.


        :param app_fee_money: The app_fee_money of this RefundPaymentRequest.
        :type app_fee_money: Money
        """

        self._app_fee_money = app_fee_money

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this RefundPaymentRequest.

         A unique string that identifies this `RefundPayment` request. The key can be any valid string but must be unique for every `RefundPayment` request.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).

        :return: The idempotency_key of this RefundPaymentRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this RefundPaymentRequest.

         A unique string that identifies this `RefundPayment` request. The key can be any valid string but must be unique for every `RefundPayment` request.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).

        :param idempotency_key: The idempotency_key of this RefundPaymentRequest.
        :type idempotency_key: str
        """
        if idempotency_key is None:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if idempotency_key is not None and len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key

    @property
    def payment_id(self):
        """Gets the payment_id of this RefundPaymentRequest.

        The unique ID of the payment being refunded.

        :return: The payment_id of this RefundPaymentRequest.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this RefundPaymentRequest.

        The unique ID of the payment being refunded.

        :param payment_id: The payment_id of this RefundPaymentRequest.
        :type payment_id: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")
        if payment_id is not None and len(payment_id) < 1:
            raise ValueError("Invalid value for `payment_id`, length must be greater than or equal to `1`")

        self._payment_id = payment_id

    @property
    def reason(self):
        """Gets the reason of this RefundPaymentRequest.

        A description of the reason for the refund.

        :return: The reason of this RefundPaymentRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this RefundPaymentRequest.

        A description of the reason for the refund.

        :param reason: The reason of this RefundPaymentRequest.
        :type reason: str
        """
        if reason is not None and len(reason) > 192:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `192`")

        self._reason = reason
