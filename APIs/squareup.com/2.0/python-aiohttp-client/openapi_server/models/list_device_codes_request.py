# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListDeviceCodesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cursor: str=None, location_id: str=None, product_type: str=None, status: List[str]=None):
        """ListDeviceCodesRequest - a model defined in OpenAPI

        :param cursor: The cursor of this ListDeviceCodesRequest.
        :param location_id: The location_id of this ListDeviceCodesRequest.
        :param product_type: The product_type of this ListDeviceCodesRequest.
        :param status: The status of this ListDeviceCodesRequest.
        """
        self.openapi_types = {
            'cursor': str,
            'location_id': str,
            'product_type': str,
            'status': List[str]
        }

        self.attribute_map = {
            'cursor': 'cursor',
            'location_id': 'location_id',
            'product_type': 'product_type',
            'status': 'status'
        }

        self._cursor = cursor
        self._location_id = location_id
        self._product_type = product_type
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListDeviceCodesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListDeviceCodesRequest of this ListDeviceCodesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cursor(self):
        """Gets the cursor of this ListDeviceCodesRequest.

        A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.

        :return: The cursor of this ListDeviceCodesRequest.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this ListDeviceCodesRequest.

        A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.

        :param cursor: The cursor of this ListDeviceCodesRequest.
        :type cursor: str
        """

        self._cursor = cursor

    @property
    def location_id(self):
        """Gets the location_id of this ListDeviceCodesRequest.

        If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty.

        :return: The location_id of this ListDeviceCodesRequest.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ListDeviceCodesRequest.

        If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty.

        :param location_id: The location_id of this ListDeviceCodesRequest.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def product_type(self):
        """Gets the product_type of this ListDeviceCodesRequest.

        If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty.

        :return: The product_type of this ListDeviceCodesRequest.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this ListDeviceCodesRequest.

        If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty.

        :param product_type: The product_type of this ListDeviceCodesRequest.
        :type product_type: str
        """

        self._product_type = product_type

    @property
    def status(self):
        """Gets the status of this ListDeviceCodesRequest.

        If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status `PAIRED` and `UNPAIRED` if empty.

        :return: The status of this ListDeviceCodesRequest.
        :rtype: List[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ListDeviceCodesRequest.

        If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status `PAIRED` and `UNPAIRED` if empty.

        :param status: The status of this ListDeviceCodesRequest.
        :type status: List[str]
        """

        self._status = status
