# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_money_amounts import OrderMoneyAmounts
from openapi_server.models.order_return_discount import OrderReturnDiscount
from openapi_server.models.order_return_line_item import OrderReturnLineItem
from openapi_server.models.order_return_service_charge import OrderReturnServiceCharge
from openapi_server.models.order_return_tax import OrderReturnTax
from openapi_server.models.order_rounding_adjustment import OrderRoundingAdjustment
from openapi_server import util


class OrderReturn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, return_amounts: OrderMoneyAmounts=None, return_discounts: List[OrderReturnDiscount]=None, return_line_items: List[OrderReturnLineItem]=None, return_service_charges: List[OrderReturnServiceCharge]=None, return_taxes: List[OrderReturnTax]=None, rounding_adjustment: OrderRoundingAdjustment=None, source_order_id: str=None, uid: str=None):
        """OrderReturn - a model defined in OpenAPI

        :param return_amounts: The return_amounts of this OrderReturn.
        :param return_discounts: The return_discounts of this OrderReturn.
        :param return_line_items: The return_line_items of this OrderReturn.
        :param return_service_charges: The return_service_charges of this OrderReturn.
        :param return_taxes: The return_taxes of this OrderReturn.
        :param rounding_adjustment: The rounding_adjustment of this OrderReturn.
        :param source_order_id: The source_order_id of this OrderReturn.
        :param uid: The uid of this OrderReturn.
        """
        self.openapi_types = {
            'return_amounts': OrderMoneyAmounts,
            'return_discounts': List[OrderReturnDiscount],
            'return_line_items': List[OrderReturnLineItem],
            'return_service_charges': List[OrderReturnServiceCharge],
            'return_taxes': List[OrderReturnTax],
            'rounding_adjustment': OrderRoundingAdjustment,
            'source_order_id': str,
            'uid': str
        }

        self.attribute_map = {
            'return_amounts': 'return_amounts',
            'return_discounts': 'return_discounts',
            'return_line_items': 'return_line_items',
            'return_service_charges': 'return_service_charges',
            'return_taxes': 'return_taxes',
            'rounding_adjustment': 'rounding_adjustment',
            'source_order_id': 'source_order_id',
            'uid': 'uid'
        }

        self._return_amounts = return_amounts
        self._return_discounts = return_discounts
        self._return_line_items = return_line_items
        self._return_service_charges = return_service_charges
        self._return_taxes = return_taxes
        self._rounding_adjustment = rounding_adjustment
        self._source_order_id = source_order_id
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderReturn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderReturn of this OrderReturn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def return_amounts(self):
        """Gets the return_amounts of this OrderReturn.


        :return: The return_amounts of this OrderReturn.
        :rtype: OrderMoneyAmounts
        """
        return self._return_amounts

    @return_amounts.setter
    def return_amounts(self, return_amounts):
        """Sets the return_amounts of this OrderReturn.


        :param return_amounts: The return_amounts of this OrderReturn.
        :type return_amounts: OrderMoneyAmounts
        """

        self._return_amounts = return_amounts

    @property
    def return_discounts(self):
        """Gets the return_discounts of this OrderReturn.

        A collection of references to discounts being returned for an order, including the total applied discount amount to be returned. The discounts must reference a top-level discount ID from the source order.

        :return: The return_discounts of this OrderReturn.
        :rtype: List[OrderReturnDiscount]
        """
        return self._return_discounts

    @return_discounts.setter
    def return_discounts(self, return_discounts):
        """Sets the return_discounts of this OrderReturn.

        A collection of references to discounts being returned for an order, including the total applied discount amount to be returned. The discounts must reference a top-level discount ID from the source order.

        :param return_discounts: The return_discounts of this OrderReturn.
        :type return_discounts: List[OrderReturnDiscount]
        """

        self._return_discounts = return_discounts

    @property
    def return_line_items(self):
        """Gets the return_line_items of this OrderReturn.

        A collection of line items that are being returned.

        :return: The return_line_items of this OrderReturn.
        :rtype: List[OrderReturnLineItem]
        """
        return self._return_line_items

    @return_line_items.setter
    def return_line_items(self, return_line_items):
        """Sets the return_line_items of this OrderReturn.

        A collection of line items that are being returned.

        :param return_line_items: The return_line_items of this OrderReturn.
        :type return_line_items: List[OrderReturnLineItem]
        """

        self._return_line_items = return_line_items

    @property
    def return_service_charges(self):
        """Gets the return_service_charges of this OrderReturn.

        A collection of service charges that are being returned.

        :return: The return_service_charges of this OrderReturn.
        :rtype: List[OrderReturnServiceCharge]
        """
        return self._return_service_charges

    @return_service_charges.setter
    def return_service_charges(self, return_service_charges):
        """Sets the return_service_charges of this OrderReturn.

        A collection of service charges that are being returned.

        :param return_service_charges: The return_service_charges of this OrderReturn.
        :type return_service_charges: List[OrderReturnServiceCharge]
        """

        self._return_service_charges = return_service_charges

    @property
    def return_taxes(self):
        """Gets the return_taxes of this OrderReturn.

        A collection of references to taxes being returned for an order, including the total applied tax amount to be returned. The taxes must reference a top-level tax ID from the source order.

        :return: The return_taxes of this OrderReturn.
        :rtype: List[OrderReturnTax]
        """
        return self._return_taxes

    @return_taxes.setter
    def return_taxes(self, return_taxes):
        """Sets the return_taxes of this OrderReturn.

        A collection of references to taxes being returned for an order, including the total applied tax amount to be returned. The taxes must reference a top-level tax ID from the source order.

        :param return_taxes: The return_taxes of this OrderReturn.
        :type return_taxes: List[OrderReturnTax]
        """

        self._return_taxes = return_taxes

    @property
    def rounding_adjustment(self):
        """Gets the rounding_adjustment of this OrderReturn.


        :return: The rounding_adjustment of this OrderReturn.
        :rtype: OrderRoundingAdjustment
        """
        return self._rounding_adjustment

    @rounding_adjustment.setter
    def rounding_adjustment(self, rounding_adjustment):
        """Sets the rounding_adjustment of this OrderReturn.


        :param rounding_adjustment: The rounding_adjustment of this OrderReturn.
        :type rounding_adjustment: OrderRoundingAdjustment
        """

        self._rounding_adjustment = rounding_adjustment

    @property
    def source_order_id(self):
        """Gets the source_order_id of this OrderReturn.

        An order that contains the original sale of these return line items. This is unset for unlinked returns.

        :return: The source_order_id of this OrderReturn.
        :rtype: str
        """
        return self._source_order_id

    @source_order_id.setter
    def source_order_id(self, source_order_id):
        """Sets the source_order_id of this OrderReturn.

        An order that contains the original sale of these return line items. This is unset for unlinked returns.

        :param source_order_id: The source_order_id of this OrderReturn.
        :type source_order_id: str
        """

        self._source_order_id = source_order_id

    @property
    def uid(self):
        """Gets the uid of this OrderReturn.

        A unique ID that identifies the return only within this order.

        :return: The uid of this OrderReturn.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OrderReturn.

        A unique ID that identifies the return only within this order.

        :param uid: The uid of this OrderReturn.
        :type uid: str
        """
        if uid is not None and len(uid) > 60:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `60`")

        self._uid = uid
