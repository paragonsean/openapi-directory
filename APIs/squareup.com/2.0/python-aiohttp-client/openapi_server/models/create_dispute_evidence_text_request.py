# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateDisputeEvidenceTextRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evidence_text: str=None, evidence_type: str=None, idempotency_key: str=None):
        """CreateDisputeEvidenceTextRequest - a model defined in OpenAPI

        :param evidence_text: The evidence_text of this CreateDisputeEvidenceTextRequest.
        :param evidence_type: The evidence_type of this CreateDisputeEvidenceTextRequest.
        :param idempotency_key: The idempotency_key of this CreateDisputeEvidenceTextRequest.
        """
        self.openapi_types = {
            'evidence_text': str,
            'evidence_type': str,
            'idempotency_key': str
        }

        self.attribute_map = {
            'evidence_text': 'evidence_text',
            'evidence_type': 'evidence_type',
            'idempotency_key': 'idempotency_key'
        }

        self._evidence_text = evidence_text
        self._evidence_type = evidence_type
        self._idempotency_key = idempotency_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDisputeEvidenceTextRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDisputeEvidenceTextRequest of this CreateDisputeEvidenceTextRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evidence_text(self):
        """Gets the evidence_text of this CreateDisputeEvidenceTextRequest.

        The evidence string.

        :return: The evidence_text of this CreateDisputeEvidenceTextRequest.
        :rtype: str
        """
        return self._evidence_text

    @evidence_text.setter
    def evidence_text(self, evidence_text):
        """Sets the evidence_text of this CreateDisputeEvidenceTextRequest.

        The evidence string.

        :param evidence_text: The evidence_text of this CreateDisputeEvidenceTextRequest.
        :type evidence_text: str
        """
        if evidence_text is None:
            raise ValueError("Invalid value for `evidence_text`, must not be `None`")
        if evidence_text is not None and len(evidence_text) > 500:
            raise ValueError("Invalid value for `evidence_text`, length must be less than or equal to `500`")
        if evidence_text is not None and len(evidence_text) < 1:
            raise ValueError("Invalid value for `evidence_text`, length must be greater than or equal to `1`")

        self._evidence_text = evidence_text

    @property
    def evidence_type(self):
        """Gets the evidence_type of this CreateDisputeEvidenceTextRequest.

        The type of evidence you are uploading.

        :return: The evidence_type of this CreateDisputeEvidenceTextRequest.
        :rtype: str
        """
        return self._evidence_type

    @evidence_type.setter
    def evidence_type(self, evidence_type):
        """Sets the evidence_type of this CreateDisputeEvidenceTextRequest.

        The type of evidence you are uploading.

        :param evidence_type: The evidence_type of this CreateDisputeEvidenceTextRequest.
        :type evidence_type: str
        """

        self._evidence_type = evidence_type

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this CreateDisputeEvidenceTextRequest.

        The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).

        :return: The idempotency_key of this CreateDisputeEvidenceTextRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this CreateDisputeEvidenceTextRequest.

        The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).

        :param idempotency_key: The idempotency_key of this CreateDisputeEvidenceTextRequest.
        :type idempotency_key: str
        """
        if idempotency_key is None:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if idempotency_key is not None and len(idempotency_key) > 45:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `45`")
        if idempotency_key is not None and len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key
