# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_item_option_value_for_item_variation import CatalogItemOptionValueForItemVariation
from openapi_server.models.catalog_stock_conversion import CatalogStockConversion
from openapi_server.models.item_variation_location_overrides import ItemVariationLocationOverrides
from openapi_server.models.money import Money
from openapi_server import util


class CatalogItemVariation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_for_booking: bool=None, inventory_alert_threshold: int=None, inventory_alert_type: str=None, item_id: str=None, item_option_values: List[CatalogItemOptionValueForItemVariation]=None, location_overrides: List[ItemVariationLocationOverrides]=None, measurement_unit_id: str=None, name: str=None, ordinal: int=None, price_money: Money=None, pricing_type: str=None, service_duration: int=None, sku: str=None, stockable: bool=None, stockable_conversion: CatalogStockConversion=None, team_member_ids: List[str]=None, track_inventory: bool=None, upc: str=None, user_data: str=None):
        """CatalogItemVariation - a model defined in OpenAPI

        :param available_for_booking: The available_for_booking of this CatalogItemVariation.
        :param inventory_alert_threshold: The inventory_alert_threshold of this CatalogItemVariation.
        :param inventory_alert_type: The inventory_alert_type of this CatalogItemVariation.
        :param item_id: The item_id of this CatalogItemVariation.
        :param item_option_values: The item_option_values of this CatalogItemVariation.
        :param location_overrides: The location_overrides of this CatalogItemVariation.
        :param measurement_unit_id: The measurement_unit_id of this CatalogItemVariation.
        :param name: The name of this CatalogItemVariation.
        :param ordinal: The ordinal of this CatalogItemVariation.
        :param price_money: The price_money of this CatalogItemVariation.
        :param pricing_type: The pricing_type of this CatalogItemVariation.
        :param service_duration: The service_duration of this CatalogItemVariation.
        :param sku: The sku of this CatalogItemVariation.
        :param stockable: The stockable of this CatalogItemVariation.
        :param stockable_conversion: The stockable_conversion of this CatalogItemVariation.
        :param team_member_ids: The team_member_ids of this CatalogItemVariation.
        :param track_inventory: The track_inventory of this CatalogItemVariation.
        :param upc: The upc of this CatalogItemVariation.
        :param user_data: The user_data of this CatalogItemVariation.
        """
        self.openapi_types = {
            'available_for_booking': bool,
            'inventory_alert_threshold': int,
            'inventory_alert_type': str,
            'item_id': str,
            'item_option_values': List[CatalogItemOptionValueForItemVariation],
            'location_overrides': List[ItemVariationLocationOverrides],
            'measurement_unit_id': str,
            'name': str,
            'ordinal': int,
            'price_money': Money,
            'pricing_type': str,
            'service_duration': int,
            'sku': str,
            'stockable': bool,
            'stockable_conversion': CatalogStockConversion,
            'team_member_ids': List[str],
            'track_inventory': bool,
            'upc': str,
            'user_data': str
        }

        self.attribute_map = {
            'available_for_booking': 'available_for_booking',
            'inventory_alert_threshold': 'inventory_alert_threshold',
            'inventory_alert_type': 'inventory_alert_type',
            'item_id': 'item_id',
            'item_option_values': 'item_option_values',
            'location_overrides': 'location_overrides',
            'measurement_unit_id': 'measurement_unit_id',
            'name': 'name',
            'ordinal': 'ordinal',
            'price_money': 'price_money',
            'pricing_type': 'pricing_type',
            'service_duration': 'service_duration',
            'sku': 'sku',
            'stockable': 'stockable',
            'stockable_conversion': 'stockable_conversion',
            'team_member_ids': 'team_member_ids',
            'track_inventory': 'track_inventory',
            'upc': 'upc',
            'user_data': 'user_data'
        }

        self._available_for_booking = available_for_booking
        self._inventory_alert_threshold = inventory_alert_threshold
        self._inventory_alert_type = inventory_alert_type
        self._item_id = item_id
        self._item_option_values = item_option_values
        self._location_overrides = location_overrides
        self._measurement_unit_id = measurement_unit_id
        self._name = name
        self._ordinal = ordinal
        self._price_money = price_money
        self._pricing_type = pricing_type
        self._service_duration = service_duration
        self._sku = sku
        self._stockable = stockable
        self._stockable_conversion = stockable_conversion
        self._team_member_ids = team_member_ids
        self._track_inventory = track_inventory
        self._upc = upc
        self._user_data = user_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogItemVariation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogItemVariation of this CatalogItemVariation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_for_booking(self):
        """Gets the available_for_booking of this CatalogItemVariation.

        If the `CatalogItem` that owns this item variation is of type `APPOINTMENTS_SERVICE`, a bool representing whether this service is available for booking.

        :return: The available_for_booking of this CatalogItemVariation.
        :rtype: bool
        """
        return self._available_for_booking

    @available_for_booking.setter
    def available_for_booking(self, available_for_booking):
        """Sets the available_for_booking of this CatalogItemVariation.

        If the `CatalogItem` that owns this item variation is of type `APPOINTMENTS_SERVICE`, a bool representing whether this service is available for booking.

        :param available_for_booking: The available_for_booking of this CatalogItemVariation.
        :type available_for_booking: bool
        """

        self._available_for_booking = available_for_booking

    @property
    def inventory_alert_threshold(self):
        """Gets the inventory_alert_threshold of this CatalogItemVariation.

        If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type` is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.  This value is always an integer.

        :return: The inventory_alert_threshold of this CatalogItemVariation.
        :rtype: int
        """
        return self._inventory_alert_threshold

    @inventory_alert_threshold.setter
    def inventory_alert_threshold(self, inventory_alert_threshold):
        """Sets the inventory_alert_threshold of this CatalogItemVariation.

        If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type` is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.  This value is always an integer.

        :param inventory_alert_threshold: The inventory_alert_threshold of this CatalogItemVariation.
        :type inventory_alert_threshold: int
        """

        self._inventory_alert_threshold = inventory_alert_threshold

    @property
    def inventory_alert_type(self):
        """Gets the inventory_alert_type of this CatalogItemVariation.

        Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`.

        :return: The inventory_alert_type of this CatalogItemVariation.
        :rtype: str
        """
        return self._inventory_alert_type

    @inventory_alert_type.setter
    def inventory_alert_type(self, inventory_alert_type):
        """Sets the inventory_alert_type of this CatalogItemVariation.

        Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`.

        :param inventory_alert_type: The inventory_alert_type of this CatalogItemVariation.
        :type inventory_alert_type: str
        """

        self._inventory_alert_type = inventory_alert_type

    @property
    def item_id(self):
        """Gets the item_id of this CatalogItemVariation.

        The ID of the `CatalogItem` associated with this item variation.

        :return: The item_id of this CatalogItemVariation.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this CatalogItemVariation.

        The ID of the `CatalogItem` associated with this item variation.

        :param item_id: The item_id of this CatalogItemVariation.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def item_option_values(self):
        """Gets the item_option_values of this CatalogItemVariation.

        List of item option values associated with this item variation. Listed in the same order as the item options of the parent item.

        :return: The item_option_values of this CatalogItemVariation.
        :rtype: List[CatalogItemOptionValueForItemVariation]
        """
        return self._item_option_values

    @item_option_values.setter
    def item_option_values(self, item_option_values):
        """Sets the item_option_values of this CatalogItemVariation.

        List of item option values associated with this item variation. Listed in the same order as the item options of the parent item.

        :param item_option_values: The item_option_values of this CatalogItemVariation.
        :type item_option_values: List[CatalogItemOptionValueForItemVariation]
        """

        self._item_option_values = item_option_values

    @property
    def location_overrides(self):
        """Gets the location_overrides of this CatalogItemVariation.

        Per-location price and inventory overrides.

        :return: The location_overrides of this CatalogItemVariation.
        :rtype: List[ItemVariationLocationOverrides]
        """
        return self._location_overrides

    @location_overrides.setter
    def location_overrides(self, location_overrides):
        """Sets the location_overrides of this CatalogItemVariation.

        Per-location price and inventory overrides.

        :param location_overrides: The location_overrides of this CatalogItemVariation.
        :type location_overrides: List[ItemVariationLocationOverrides]
        """

        self._location_overrides = location_overrides

    @property
    def measurement_unit_id(self):
        """Gets the measurement_unit_id of this CatalogItemVariation.

        ID of the ‘CatalogMeasurementUnit’ that is used to measure the quantity sold of this item variation. If left unset, the item will be sold in whole quantities.

        :return: The measurement_unit_id of this CatalogItemVariation.
        :rtype: str
        """
        return self._measurement_unit_id

    @measurement_unit_id.setter
    def measurement_unit_id(self, measurement_unit_id):
        """Sets the measurement_unit_id of this CatalogItemVariation.

        ID of the ‘CatalogMeasurementUnit’ that is used to measure the quantity sold of this item variation. If left unset, the item will be sold in whole quantities.

        :param measurement_unit_id: The measurement_unit_id of this CatalogItemVariation.
        :type measurement_unit_id: str
        """

        self._measurement_unit_id = measurement_unit_id

    @property
    def name(self):
        """Gets the name of this CatalogItemVariation.

        The item variation's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.

        :return: The name of this CatalogItemVariation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogItemVariation.

        The item variation's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.

        :param name: The name of this CatalogItemVariation.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def ordinal(self):
        """Gets the ordinal of this CatalogItemVariation.

        The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal for each item variation within a parent `CatalogItem` is set according to the item variations's position. On reads, the value is not guaranteed to be sequential or unique.

        :return: The ordinal of this CatalogItemVariation.
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this CatalogItemVariation.

        The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal for each item variation within a parent `CatalogItem` is set according to the item variations's position. On reads, the value is not guaranteed to be sequential or unique.

        :param ordinal: The ordinal of this CatalogItemVariation.
        :type ordinal: int
        """

        self._ordinal = ordinal

    @property
    def price_money(self):
        """Gets the price_money of this CatalogItemVariation.


        :return: The price_money of this CatalogItemVariation.
        :rtype: Money
        """
        return self._price_money

    @price_money.setter
    def price_money(self, price_money):
        """Sets the price_money of this CatalogItemVariation.


        :param price_money: The price_money of this CatalogItemVariation.
        :type price_money: Money
        """

        self._price_money = price_money

    @property
    def pricing_type(self):
        """Gets the pricing_type of this CatalogItemVariation.

        Indicates whether the item variation's price is fixed or determined at the time of sale.

        :return: The pricing_type of this CatalogItemVariation.
        :rtype: str
        """
        return self._pricing_type

    @pricing_type.setter
    def pricing_type(self, pricing_type):
        """Sets the pricing_type of this CatalogItemVariation.

        Indicates whether the item variation's price is fixed or determined at the time of sale.

        :param pricing_type: The pricing_type of this CatalogItemVariation.
        :type pricing_type: str
        """

        self._pricing_type = pricing_type

    @property
    def service_duration(self):
        """Gets the service_duration of this CatalogItemVariation.

        If the `CatalogItem` that owns this item variation is of type `APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For example, a 30 minute appointment would have the value `1800000`, which is equal to 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).

        :return: The service_duration of this CatalogItemVariation.
        :rtype: int
        """
        return self._service_duration

    @service_duration.setter
    def service_duration(self, service_duration):
        """Sets the service_duration of this CatalogItemVariation.

        If the `CatalogItem` that owns this item variation is of type `APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For example, a 30 minute appointment would have the value `1800000`, which is equal to 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).

        :param service_duration: The service_duration of this CatalogItemVariation.
        :type service_duration: int
        """

        self._service_duration = service_duration

    @property
    def sku(self):
        """Gets the sku of this CatalogItemVariation.

        The item variation's SKU, if any. This is a searchable attribute for use in applicable query filters.

        :return: The sku of this CatalogItemVariation.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this CatalogItemVariation.

        The item variation's SKU, if any. This is a searchable attribute for use in applicable query filters.

        :param sku: The sku of this CatalogItemVariation.
        :type sku: str
        """

        self._sku = sku

    @property
    def stockable(self):
        """Gets the stockable of this CatalogItemVariation.

        Whether stock is counted directly on this variation (TRUE) or only on its components (FALSE). For backward compatibility missing values will be interpreted as TRUE.

        :return: The stockable of this CatalogItemVariation.
        :rtype: bool
        """
        return self._stockable

    @stockable.setter
    def stockable(self, stockable):
        """Sets the stockable of this CatalogItemVariation.

        Whether stock is counted directly on this variation (TRUE) or only on its components (FALSE). For backward compatibility missing values will be interpreted as TRUE.

        :param stockable: The stockable of this CatalogItemVariation.
        :type stockable: bool
        """

        self._stockable = stockable

    @property
    def stockable_conversion(self):
        """Gets the stockable_conversion of this CatalogItemVariation.


        :return: The stockable_conversion of this CatalogItemVariation.
        :rtype: CatalogStockConversion
        """
        return self._stockable_conversion

    @stockable_conversion.setter
    def stockable_conversion(self, stockable_conversion):
        """Sets the stockable_conversion of this CatalogItemVariation.


        :param stockable_conversion: The stockable_conversion of this CatalogItemVariation.
        :type stockable_conversion: CatalogStockConversion
        """

        self._stockable_conversion = stockable_conversion

    @property
    def team_member_ids(self):
        """Gets the team_member_ids of this CatalogItemVariation.

        Tokens of employees that can perform the service represented by this variation. Only valid for variations of type `APPOINTMENTS_SERVICE`.

        :return: The team_member_ids of this CatalogItemVariation.
        :rtype: List[str]
        """
        return self._team_member_ids

    @team_member_ids.setter
    def team_member_ids(self, team_member_ids):
        """Sets the team_member_ids of this CatalogItemVariation.

        Tokens of employees that can perform the service represented by this variation. Only valid for variations of type `APPOINTMENTS_SERVICE`.

        :param team_member_ids: The team_member_ids of this CatalogItemVariation.
        :type team_member_ids: List[str]
        """

        self._team_member_ids = team_member_ids

    @property
    def track_inventory(self):
        """Gets the track_inventory of this CatalogItemVariation.

        If `true`, inventory tracking is active for the variation.

        :return: The track_inventory of this CatalogItemVariation.
        :rtype: bool
        """
        return self._track_inventory

    @track_inventory.setter
    def track_inventory(self, track_inventory):
        """Sets the track_inventory of this CatalogItemVariation.

        If `true`, inventory tracking is active for the variation.

        :param track_inventory: The track_inventory of this CatalogItemVariation.
        :type track_inventory: bool
        """

        self._track_inventory = track_inventory

    @property
    def upc(self):
        """Gets the upc of this CatalogItemVariation.

        The universal product code (UPC) of the item variation, if any. This is a searchable attribute for use in applicable query filters.  The value of this attribute should be a number of 12-14 digits long.  This restriction is enforced on the Square Seller Dashboard, Square Point of Sale or Retail Point of Sale apps, where this attribute shows in the GTIN field. If a non-compliant UPC value is assigned to this attribute using the API, the value is not editable on the Seller Dashboard, Square Point of Sale or Retail Point of Sale apps unless it is updated to fit the expected format.

        :return: The upc of this CatalogItemVariation.
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """Sets the upc of this CatalogItemVariation.

        The universal product code (UPC) of the item variation, if any. This is a searchable attribute for use in applicable query filters.  The value of this attribute should be a number of 12-14 digits long.  This restriction is enforced on the Square Seller Dashboard, Square Point of Sale or Retail Point of Sale apps, where this attribute shows in the GTIN field. If a non-compliant UPC value is assigned to this attribute using the API, the value is not editable on the Seller Dashboard, Square Point of Sale or Retail Point of Sale apps unless it is updated to fit the expected format.

        :param upc: The upc of this CatalogItemVariation.
        :type upc: str
        """

        self._upc = upc

    @property
    def user_data(self):
        """Gets the user_data of this CatalogItemVariation.

        Arbitrary user metadata to associate with the item variation. This attribute value length is of Unicode code points.

        :return: The user_data of this CatalogItemVariation.
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this CatalogItemVariation.

        Arbitrary user metadata to associate with the item variation. This attribute value length is of Unicode code points.

        :param user_data: The user_data of this CatalogItemVariation.
        :type user_data: str
        """
        if user_data is not None and len(user_data) > 255:
            raise ValueError("Invalid value for `user_data`, length must be less than or equal to `255`")

        self._user_data = user_data
