# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server.models.order_line_item_applied_tax import OrderLineItemAppliedTax
from openapi_server import util


class OrderServiceCharge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: Money=None, applied_money: Money=None, applied_taxes: List[OrderLineItemAppliedTax]=None, calculation_phase: str=None, catalog_object_id: str=None, catalog_version: int=None, metadata: Dict[str, str]=None, name: str=None, percentage: str=None, taxable: bool=None, total_money: Money=None, total_tax_money: Money=None, type: str=None, uid: str=None):
        """OrderServiceCharge - a model defined in OpenAPI

        :param amount_money: The amount_money of this OrderServiceCharge.
        :param applied_money: The applied_money of this OrderServiceCharge.
        :param applied_taxes: The applied_taxes of this OrderServiceCharge.
        :param calculation_phase: The calculation_phase of this OrderServiceCharge.
        :param catalog_object_id: The catalog_object_id of this OrderServiceCharge.
        :param catalog_version: The catalog_version of this OrderServiceCharge.
        :param metadata: The metadata of this OrderServiceCharge.
        :param name: The name of this OrderServiceCharge.
        :param percentage: The percentage of this OrderServiceCharge.
        :param taxable: The taxable of this OrderServiceCharge.
        :param total_money: The total_money of this OrderServiceCharge.
        :param total_tax_money: The total_tax_money of this OrderServiceCharge.
        :param type: The type of this OrderServiceCharge.
        :param uid: The uid of this OrderServiceCharge.
        """
        self.openapi_types = {
            'amount_money': Money,
            'applied_money': Money,
            'applied_taxes': List[OrderLineItemAppliedTax],
            'calculation_phase': str,
            'catalog_object_id': str,
            'catalog_version': int,
            'metadata': Dict[str, str],
            'name': str,
            'percentage': str,
            'taxable': bool,
            'total_money': Money,
            'total_tax_money': Money,
            'type': str,
            'uid': str
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'applied_money': 'applied_money',
            'applied_taxes': 'applied_taxes',
            'calculation_phase': 'calculation_phase',
            'catalog_object_id': 'catalog_object_id',
            'catalog_version': 'catalog_version',
            'metadata': 'metadata',
            'name': 'name',
            'percentage': 'percentage',
            'taxable': 'taxable',
            'total_money': 'total_money',
            'total_tax_money': 'total_tax_money',
            'type': 'type',
            'uid': 'uid'
        }

        self._amount_money = amount_money
        self._applied_money = applied_money
        self._applied_taxes = applied_taxes
        self._calculation_phase = calculation_phase
        self._catalog_object_id = catalog_object_id
        self._catalog_version = catalog_version
        self._metadata = metadata
        self._name = name
        self._percentage = percentage
        self._taxable = taxable
        self._total_money = total_money
        self._total_tax_money = total_tax_money
        self._type = type
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderServiceCharge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderServiceCharge of this OrderServiceCharge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this OrderServiceCharge.


        :return: The amount_money of this OrderServiceCharge.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this OrderServiceCharge.


        :param amount_money: The amount_money of this OrderServiceCharge.
        :type amount_money: Money
        """

        self._amount_money = amount_money

    @property
    def applied_money(self):
        """Gets the applied_money of this OrderServiceCharge.


        :return: The applied_money of this OrderServiceCharge.
        :rtype: Money
        """
        return self._applied_money

    @applied_money.setter
    def applied_money(self, applied_money):
        """Sets the applied_money of this OrderServiceCharge.


        :param applied_money: The applied_money of this OrderServiceCharge.
        :type applied_money: Money
        """

        self._applied_money = applied_money

    @property
    def applied_taxes(self):
        """Gets the applied_taxes of this OrderServiceCharge.

        The list of references to the taxes applied to this service charge. Each `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level `OrderLineItemTax` that is being applied to this service charge. On reads, the amount applied is populated.  An `OrderLineItemAppliedTax` is automatically created on every taxable service charge for all `ORDER` scoped taxes that are added to the order. `OrderLineItemAppliedTax` records for `LINE_ITEM` scoped taxes must be added in requests for the tax to apply to any taxable service charge. Taxable service charges have the `taxable` field set to `true` and calculated in the `SUBTOTAL_PHASE`.  To change the amount of a tax, modify the referenced top-level tax.

        :return: The applied_taxes of this OrderServiceCharge.
        :rtype: List[OrderLineItemAppliedTax]
        """
        return self._applied_taxes

    @applied_taxes.setter
    def applied_taxes(self, applied_taxes):
        """Sets the applied_taxes of this OrderServiceCharge.

        The list of references to the taxes applied to this service charge. Each `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level `OrderLineItemTax` that is being applied to this service charge. On reads, the amount applied is populated.  An `OrderLineItemAppliedTax` is automatically created on every taxable service charge for all `ORDER` scoped taxes that are added to the order. `OrderLineItemAppliedTax` records for `LINE_ITEM` scoped taxes must be added in requests for the tax to apply to any taxable service charge. Taxable service charges have the `taxable` field set to `true` and calculated in the `SUBTOTAL_PHASE`.  To change the amount of a tax, modify the referenced top-level tax.

        :param applied_taxes: The applied_taxes of this OrderServiceCharge.
        :type applied_taxes: List[OrderLineItemAppliedTax]
        """

        self._applied_taxes = applied_taxes

    @property
    def calculation_phase(self):
        """Gets the calculation_phase of this OrderServiceCharge.

        The calculation phase at which to apply the service charge.

        :return: The calculation_phase of this OrderServiceCharge.
        :rtype: str
        """
        return self._calculation_phase

    @calculation_phase.setter
    def calculation_phase(self, calculation_phase):
        """Sets the calculation_phase of this OrderServiceCharge.

        The calculation phase at which to apply the service charge.

        :param calculation_phase: The calculation_phase of this OrderServiceCharge.
        :type calculation_phase: str
        """

        self._calculation_phase = calculation_phase

    @property
    def catalog_object_id(self):
        """Gets the catalog_object_id of this OrderServiceCharge.

        The catalog object ID referencing the service charge [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject).

        :return: The catalog_object_id of this OrderServiceCharge.
        :rtype: str
        """
        return self._catalog_object_id

    @catalog_object_id.setter
    def catalog_object_id(self, catalog_object_id):
        """Sets the catalog_object_id of this OrderServiceCharge.

        The catalog object ID referencing the service charge [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject).

        :param catalog_object_id: The catalog_object_id of this OrderServiceCharge.
        :type catalog_object_id: str
        """
        if catalog_object_id is not None and len(catalog_object_id) > 192:
            raise ValueError("Invalid value for `catalog_object_id`, length must be less than or equal to `192`")

        self._catalog_object_id = catalog_object_id

    @property
    def catalog_version(self):
        """Gets the catalog_version of this OrderServiceCharge.

        The version of the catalog object that this service charge references.

        :return: The catalog_version of this OrderServiceCharge.
        :rtype: int
        """
        return self._catalog_version

    @catalog_version.setter
    def catalog_version(self, catalog_version):
        """Sets the catalog_version of this OrderServiceCharge.

        The version of the catalog object that this service charge references.

        :param catalog_version: The catalog_version of this OrderServiceCharge.
        :type catalog_version: int
        """

        self._catalog_version = catalog_version

    @property
    def metadata(self):
        """Gets the metadata of this OrderServiceCharge.

        Application-defined data attached to this service charge. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).

        :return: The metadata of this OrderServiceCharge.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OrderServiceCharge.

        Application-defined data attached to this service charge. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).

        :param metadata: The metadata of this OrderServiceCharge.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this OrderServiceCharge.

        The name of the service charge.

        :return: The name of this OrderServiceCharge.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderServiceCharge.

        The name of the service charge.

        :param name: The name of this OrderServiceCharge.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this OrderServiceCharge.

        The service charge percentage as a string representation of a decimal number. For example, `\"7.25\"` indicates a service charge of 7.25%.  Exactly 1 of `percentage` or `amount_money` should be set.

        :return: The percentage of this OrderServiceCharge.
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this OrderServiceCharge.

        The service charge percentage as a string representation of a decimal number. For example, `\"7.25\"` indicates a service charge of 7.25%.  Exactly 1 of `percentage` or `amount_money` should be set.

        :param percentage: The percentage of this OrderServiceCharge.
        :type percentage: str
        """
        if percentage is not None and len(percentage) > 10:
            raise ValueError("Invalid value for `percentage`, length must be less than or equal to `10`")

        self._percentage = percentage

    @property
    def taxable(self):
        """Gets the taxable of this OrderServiceCharge.

        Indicates whether the service charge can be taxed. If set to `true`, order-level taxes automatically apply to the service charge. Note that service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.

        :return: The taxable of this OrderServiceCharge.
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """Sets the taxable of this OrderServiceCharge.

        Indicates whether the service charge can be taxed. If set to `true`, order-level taxes automatically apply to the service charge. Note that service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.

        :param taxable: The taxable of this OrderServiceCharge.
        :type taxable: bool
        """

        self._taxable = taxable

    @property
    def total_money(self):
        """Gets the total_money of this OrderServiceCharge.


        :return: The total_money of this OrderServiceCharge.
        :rtype: Money
        """
        return self._total_money

    @total_money.setter
    def total_money(self, total_money):
        """Sets the total_money of this OrderServiceCharge.


        :param total_money: The total_money of this OrderServiceCharge.
        :type total_money: Money
        """

        self._total_money = total_money

    @property
    def total_tax_money(self):
        """Gets the total_tax_money of this OrderServiceCharge.


        :return: The total_tax_money of this OrderServiceCharge.
        :rtype: Money
        """
        return self._total_tax_money

    @total_tax_money.setter
    def total_tax_money(self, total_tax_money):
        """Sets the total_tax_money of this OrderServiceCharge.


        :param total_tax_money: The total_tax_money of this OrderServiceCharge.
        :type total_tax_money: Money
        """

        self._total_tax_money = total_tax_money

    @property
    def type(self):
        """Gets the type of this OrderServiceCharge.

        The type of the service charge.

        :return: The type of this OrderServiceCharge.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderServiceCharge.

        The type of the service charge.

        :param type: The type of this OrderServiceCharge.
        :type type: str
        """

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this OrderServiceCharge.

        A unique ID that identifies the service charge only within this order.

        :return: The uid of this OrderServiceCharge.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OrderServiceCharge.

        A unique ID that identifies the service charge only within this order.

        :param uid: The uid of this OrderServiceCharge.
        :type uid: str
        """
        if uid is not None and len(uid) > 60:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `60`")

        self._uid = uid
