# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class OrderLineItemDiscount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: Money=None, applied_money: Money=None, catalog_object_id: str=None, catalog_version: int=None, metadata: Dict[str, str]=None, name: str=None, percentage: str=None, pricing_rule_id: str=None, reward_ids: List[str]=None, scope: str=None, type: str=None, uid: str=None):
        """OrderLineItemDiscount - a model defined in OpenAPI

        :param amount_money: The amount_money of this OrderLineItemDiscount.
        :param applied_money: The applied_money of this OrderLineItemDiscount.
        :param catalog_object_id: The catalog_object_id of this OrderLineItemDiscount.
        :param catalog_version: The catalog_version of this OrderLineItemDiscount.
        :param metadata: The metadata of this OrderLineItemDiscount.
        :param name: The name of this OrderLineItemDiscount.
        :param percentage: The percentage of this OrderLineItemDiscount.
        :param pricing_rule_id: The pricing_rule_id of this OrderLineItemDiscount.
        :param reward_ids: The reward_ids of this OrderLineItemDiscount.
        :param scope: The scope of this OrderLineItemDiscount.
        :param type: The type of this OrderLineItemDiscount.
        :param uid: The uid of this OrderLineItemDiscount.
        """
        self.openapi_types = {
            'amount_money': Money,
            'applied_money': Money,
            'catalog_object_id': str,
            'catalog_version': int,
            'metadata': Dict[str, str],
            'name': str,
            'percentage': str,
            'pricing_rule_id': str,
            'reward_ids': List[str],
            'scope': str,
            'type': str,
            'uid': str
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'applied_money': 'applied_money',
            'catalog_object_id': 'catalog_object_id',
            'catalog_version': 'catalog_version',
            'metadata': 'metadata',
            'name': 'name',
            'percentage': 'percentage',
            'pricing_rule_id': 'pricing_rule_id',
            'reward_ids': 'reward_ids',
            'scope': 'scope',
            'type': 'type',
            'uid': 'uid'
        }

        self._amount_money = amount_money
        self._applied_money = applied_money
        self._catalog_object_id = catalog_object_id
        self._catalog_version = catalog_version
        self._metadata = metadata
        self._name = name
        self._percentage = percentage
        self._pricing_rule_id = pricing_rule_id
        self._reward_ids = reward_ids
        self._scope = scope
        self._type = type
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderLineItemDiscount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderLineItemDiscount of this OrderLineItemDiscount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this OrderLineItemDiscount.


        :return: The amount_money of this OrderLineItemDiscount.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this OrderLineItemDiscount.


        :param amount_money: The amount_money of this OrderLineItemDiscount.
        :type amount_money: Money
        """

        self._amount_money = amount_money

    @property
    def applied_money(self):
        """Gets the applied_money of this OrderLineItemDiscount.


        :return: The applied_money of this OrderLineItemDiscount.
        :rtype: Money
        """
        return self._applied_money

    @applied_money.setter
    def applied_money(self, applied_money):
        """Sets the applied_money of this OrderLineItemDiscount.


        :param applied_money: The applied_money of this OrderLineItemDiscount.
        :type applied_money: Money
        """

        self._applied_money = applied_money

    @property
    def catalog_object_id(self):
        """Gets the catalog_object_id of this OrderLineItemDiscount.

        The catalog object ID referencing [CatalogDiscount](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogDiscount).

        :return: The catalog_object_id of this OrderLineItemDiscount.
        :rtype: str
        """
        return self._catalog_object_id

    @catalog_object_id.setter
    def catalog_object_id(self, catalog_object_id):
        """Sets the catalog_object_id of this OrderLineItemDiscount.

        The catalog object ID referencing [CatalogDiscount](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogDiscount).

        :param catalog_object_id: The catalog_object_id of this OrderLineItemDiscount.
        :type catalog_object_id: str
        """
        if catalog_object_id is not None and len(catalog_object_id) > 192:
            raise ValueError("Invalid value for `catalog_object_id`, length must be less than or equal to `192`")

        self._catalog_object_id = catalog_object_id

    @property
    def catalog_version(self):
        """Gets the catalog_version of this OrderLineItemDiscount.

        The version of the catalog object that this discount references.

        :return: The catalog_version of this OrderLineItemDiscount.
        :rtype: int
        """
        return self._catalog_version

    @catalog_version.setter
    def catalog_version(self, catalog_version):
        """Sets the catalog_version of this OrderLineItemDiscount.

        The version of the catalog object that this discount references.

        :param catalog_version: The catalog_version of this OrderLineItemDiscount.
        :type catalog_version: int
        """

        self._catalog_version = catalog_version

    @property
    def metadata(self):
        """Gets the metadata of this OrderLineItemDiscount.

        Application-defined data attached to this discount. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).

        :return: The metadata of this OrderLineItemDiscount.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OrderLineItemDiscount.

        Application-defined data attached to this discount. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).

        :param metadata: The metadata of this OrderLineItemDiscount.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this OrderLineItemDiscount.

        The discount's name.

        :return: The name of this OrderLineItemDiscount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderLineItemDiscount.

        The discount's name.

        :param name: The name of this OrderLineItemDiscount.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this OrderLineItemDiscount.

        The percentage of the discount, as a string representation of a decimal number. A value of `7.25` corresponds to a percentage of 7.25%.  `percentage` is not set for amount-based discounts.

        :return: The percentage of this OrderLineItemDiscount.
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this OrderLineItemDiscount.

        The percentage of the discount, as a string representation of a decimal number. A value of `7.25` corresponds to a percentage of 7.25%.  `percentage` is not set for amount-based discounts.

        :param percentage: The percentage of this OrderLineItemDiscount.
        :type percentage: str
        """
        if percentage is not None and len(percentage) > 10:
            raise ValueError("Invalid value for `percentage`, length must be less than or equal to `10`")

        self._percentage = percentage

    @property
    def pricing_rule_id(self):
        """Gets the pricing_rule_id of this OrderLineItemDiscount.

        The object ID of a [pricing rule](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule) to be applied  automatically to this discount. The specification and application of the discounts, to  which a `pricing_rule_id` is assigned, are completely controlled by the corresponding  pricing rule.

        :return: The pricing_rule_id of this OrderLineItemDiscount.
        :rtype: str
        """
        return self._pricing_rule_id

    @pricing_rule_id.setter
    def pricing_rule_id(self, pricing_rule_id):
        """Sets the pricing_rule_id of this OrderLineItemDiscount.

        The object ID of a [pricing rule](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule) to be applied  automatically to this discount. The specification and application of the discounts, to  which a `pricing_rule_id` is assigned, are completely controlled by the corresponding  pricing rule.

        :param pricing_rule_id: The pricing_rule_id of this OrderLineItemDiscount.
        :type pricing_rule_id: str
        """

        self._pricing_rule_id = pricing_rule_id

    @property
    def reward_ids(self):
        """Gets the reward_ids of this OrderLineItemDiscount.

        The reward IDs corresponding to this discount. The application and specification of discounts that have `reward_ids` are completely controlled by the backing criteria corresponding to the reward tiers of the rewards that are added to the order through the Loyalty API. To manually unapply discounts that are the result of added rewards, the rewards must be removed from the order through the Loyalty API.

        :return: The reward_ids of this OrderLineItemDiscount.
        :rtype: List[str]
        """
        return self._reward_ids

    @reward_ids.setter
    def reward_ids(self, reward_ids):
        """Sets the reward_ids of this OrderLineItemDiscount.

        The reward IDs corresponding to this discount. The application and specification of discounts that have `reward_ids` are completely controlled by the backing criteria corresponding to the reward tiers of the rewards that are added to the order through the Loyalty API. To manually unapply discounts that are the result of added rewards, the rewards must be removed from the order through the Loyalty API.

        :param reward_ids: The reward_ids of this OrderLineItemDiscount.
        :type reward_ids: List[str]
        """

        self._reward_ids = reward_ids

    @property
    def scope(self):
        """Gets the scope of this OrderLineItemDiscount.

        Indicates the level at which the discount applies. For `ORDER` scoped discounts, Square generates references in `applied_discounts` on all order line items that do not have them. For `LINE_ITEM` scoped discounts, the discount only applies to line items with a discount reference in their `applied_discounts` field.  This field is immutable. To change the scope of a discount, you must delete the discount and re-add it as a new discount.

        :return: The scope of this OrderLineItemDiscount.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this OrderLineItemDiscount.

        Indicates the level at which the discount applies. For `ORDER` scoped discounts, Square generates references in `applied_discounts` on all order line items that do not have them. For `LINE_ITEM` scoped discounts, the discount only applies to line items with a discount reference in their `applied_discounts` field.  This field is immutable. To change the scope of a discount, you must delete the discount and re-add it as a new discount.

        :param scope: The scope of this OrderLineItemDiscount.
        :type scope: str
        """

        self._scope = scope

    @property
    def type(self):
        """Gets the type of this OrderLineItemDiscount.

        The type of the discount.  Discounts that do not reference a catalog object ID must have a type of `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.

        :return: The type of this OrderLineItemDiscount.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderLineItemDiscount.

        The type of the discount.  Discounts that do not reference a catalog object ID must have a type of `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.

        :param type: The type of this OrderLineItemDiscount.
        :type type: str
        """

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this OrderLineItemDiscount.

        A unique ID that identifies the discount only within this order.

        :return: The uid of this OrderLineItemDiscount.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OrderLineItemDiscount.

        A unique ID that identifies the discount only within this order.

        :param uid: The uid of this OrderLineItemDiscount.
        :type uid: str
        """
        if uid is not None and len(uid) > 60:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `60`")

        self._uid = uid
