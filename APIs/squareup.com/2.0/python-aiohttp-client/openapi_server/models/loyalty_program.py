# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.loyalty_program_accrual_rule import LoyaltyProgramAccrualRule
from openapi_server.models.loyalty_program_expiration_policy import LoyaltyProgramExpirationPolicy
from openapi_server.models.loyalty_program_reward_tier import LoyaltyProgramRewardTier
from openapi_server.models.loyalty_program_terminology import LoyaltyProgramTerminology
from openapi_server import util


class LoyaltyProgram(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accrual_rules: List[LoyaltyProgramAccrualRule]=None, created_at: str=None, expiration_policy: LoyaltyProgramExpirationPolicy=None, id: str=None, location_ids: List[str]=None, reward_tiers: List[LoyaltyProgramRewardTier]=None, status: str=None, terminology: LoyaltyProgramTerminology=None, updated_at: str=None):
        """LoyaltyProgram - a model defined in OpenAPI

        :param accrual_rules: The accrual_rules of this LoyaltyProgram.
        :param created_at: The created_at of this LoyaltyProgram.
        :param expiration_policy: The expiration_policy of this LoyaltyProgram.
        :param id: The id of this LoyaltyProgram.
        :param location_ids: The location_ids of this LoyaltyProgram.
        :param reward_tiers: The reward_tiers of this LoyaltyProgram.
        :param status: The status of this LoyaltyProgram.
        :param terminology: The terminology of this LoyaltyProgram.
        :param updated_at: The updated_at of this LoyaltyProgram.
        """
        self.openapi_types = {
            'accrual_rules': List[LoyaltyProgramAccrualRule],
            'created_at': str,
            'expiration_policy': LoyaltyProgramExpirationPolicy,
            'id': str,
            'location_ids': List[str],
            'reward_tiers': List[LoyaltyProgramRewardTier],
            'status': str,
            'terminology': LoyaltyProgramTerminology,
            'updated_at': str
        }

        self.attribute_map = {
            'accrual_rules': 'accrual_rules',
            'created_at': 'created_at',
            'expiration_policy': 'expiration_policy',
            'id': 'id',
            'location_ids': 'location_ids',
            'reward_tiers': 'reward_tiers',
            'status': 'status',
            'terminology': 'terminology',
            'updated_at': 'updated_at'
        }

        self._accrual_rules = accrual_rules
        self._created_at = created_at
        self._expiration_policy = expiration_policy
        self._id = id
        self._location_ids = location_ids
        self._reward_tiers = reward_tiers
        self._status = status
        self._terminology = terminology
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyProgram':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyProgram of this LoyaltyProgram.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accrual_rules(self):
        """Gets the accrual_rules of this LoyaltyProgram.

        Defines how buyers can earn loyalty points.

        :return: The accrual_rules of this LoyaltyProgram.
        :rtype: List[LoyaltyProgramAccrualRule]
        """
        return self._accrual_rules

    @accrual_rules.setter
    def accrual_rules(self, accrual_rules):
        """Sets the accrual_rules of this LoyaltyProgram.

        Defines how buyers can earn loyalty points.

        :param accrual_rules: The accrual_rules of this LoyaltyProgram.
        :type accrual_rules: List[LoyaltyProgramAccrualRule]
        """
        if accrual_rules is None:
            raise ValueError("Invalid value for `accrual_rules`, must not be `None`")

        self._accrual_rules = accrual_rules

    @property
    def created_at(self):
        """Gets the created_at of this LoyaltyProgram.

        The timestamp when the program was created, in RFC 3339 format.

        :return: The created_at of this LoyaltyProgram.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LoyaltyProgram.

        The timestamp when the program was created, in RFC 3339 format.

        :param created_at: The created_at of this LoyaltyProgram.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")
        if created_at is not None and len(created_at) < 1:
            raise ValueError("Invalid value for `created_at`, length must be greater than or equal to `1`")

        self._created_at = created_at

    @property
    def expiration_policy(self):
        """Gets the expiration_policy of this LoyaltyProgram.


        :return: The expiration_policy of this LoyaltyProgram.
        :rtype: LoyaltyProgramExpirationPolicy
        """
        return self._expiration_policy

    @expiration_policy.setter
    def expiration_policy(self, expiration_policy):
        """Sets the expiration_policy of this LoyaltyProgram.


        :param expiration_policy: The expiration_policy of this LoyaltyProgram.
        :type expiration_policy: LoyaltyProgramExpirationPolicy
        """

        self._expiration_policy = expiration_policy

    @property
    def id(self):
        """Gets the id of this LoyaltyProgram.

        The Square-assigned ID of the loyalty program. Updates to  the loyalty program do not modify the identifier.

        :return: The id of this LoyaltyProgram.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoyaltyProgram.

        The Square-assigned ID of the loyalty program. Updates to  the loyalty program do not modify the identifier.

        :param id: The id of this LoyaltyProgram.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 36:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `36`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def location_ids(self):
        """Gets the location_ids of this LoyaltyProgram.

        The [locations](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) at which the program is active.

        :return: The location_ids of this LoyaltyProgram.
        :rtype: List[str]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """Sets the location_ids of this LoyaltyProgram.

        The [locations](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) at which the program is active.

        :param location_ids: The location_ids of this LoyaltyProgram.
        :type location_ids: List[str]
        """
        if location_ids is None:
            raise ValueError("Invalid value for `location_ids`, must not be `None`")

        self._location_ids = location_ids

    @property
    def reward_tiers(self):
        """Gets the reward_tiers of this LoyaltyProgram.

        The list of rewards for buyers, sorted by ascending points.

        :return: The reward_tiers of this LoyaltyProgram.
        :rtype: List[LoyaltyProgramRewardTier]
        """
        return self._reward_tiers

    @reward_tiers.setter
    def reward_tiers(self, reward_tiers):
        """Sets the reward_tiers of this LoyaltyProgram.

        The list of rewards for buyers, sorted by ascending points.

        :param reward_tiers: The reward_tiers of this LoyaltyProgram.
        :type reward_tiers: List[LoyaltyProgramRewardTier]
        """
        if reward_tiers is None:
            raise ValueError("Invalid value for `reward_tiers`, must not be `None`")

        self._reward_tiers = reward_tiers

    @property
    def status(self):
        """Gets the status of this LoyaltyProgram.

        Whether the program is currently active.

        :return: The status of this LoyaltyProgram.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LoyaltyProgram.

        Whether the program is currently active.

        :param status: The status of this LoyaltyProgram.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def terminology(self):
        """Gets the terminology of this LoyaltyProgram.


        :return: The terminology of this LoyaltyProgram.
        :rtype: LoyaltyProgramTerminology
        """
        return self._terminology

    @terminology.setter
    def terminology(self, terminology):
        """Sets the terminology of this LoyaltyProgram.


        :param terminology: The terminology of this LoyaltyProgram.
        :type terminology: LoyaltyProgramTerminology
        """
        if terminology is None:
            raise ValueError("Invalid value for `terminology`, must not be `None`")

        self._terminology = terminology

    @property
    def updated_at(self):
        """Gets the updated_at of this LoyaltyProgram.

        The timestamp when the reward was last updated, in RFC 3339 format.

        :return: The updated_at of this LoyaltyProgram.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LoyaltyProgram.

        The timestamp when the reward was last updated, in RFC 3339 format.

        :param updated_at: The updated_at of this LoyaltyProgram.
        :type updated_at: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")
        if updated_at is not None and len(updated_at) < 1:
            raise ValueError("Invalid value for `updated_at`, length must be greater than or equal to `1`")

        self._updated_at = updated_at
