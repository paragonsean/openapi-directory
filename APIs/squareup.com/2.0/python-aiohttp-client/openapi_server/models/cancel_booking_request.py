# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CancelBookingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, booking_version: int=None, idempotency_key: str=None):
        """CancelBookingRequest - a model defined in OpenAPI

        :param booking_version: The booking_version of this CancelBookingRequest.
        :param idempotency_key: The idempotency_key of this CancelBookingRequest.
        """
        self.openapi_types = {
            'booking_version': int,
            'idempotency_key': str
        }

        self.attribute_map = {
            'booking_version': 'booking_version',
            'idempotency_key': 'idempotency_key'
        }

        self._booking_version = booking_version
        self._idempotency_key = idempotency_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancelBookingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CancelBookingRequest of this CancelBookingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def booking_version(self):
        """Gets the booking_version of this CancelBookingRequest.

        The revision number for the booking used for optimistic concurrency.

        :return: The booking_version of this CancelBookingRequest.
        :rtype: int
        """
        return self._booking_version

    @booking_version.setter
    def booking_version(self, booking_version):
        """Sets the booking_version of this CancelBookingRequest.

        The revision number for the booking used for optimistic concurrency.

        :param booking_version: The booking_version of this CancelBookingRequest.
        :type booking_version: int
        """
        if booking_version is not None and booking_version < 0:
            raise ValueError("Invalid value for `booking_version`, must be a value greater than or equal to `0`")

        self._booking_version = booking_version

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this CancelBookingRequest.

        A unique key to make this request an idempotent operation.

        :return: The idempotency_key of this CancelBookingRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this CancelBookingRequest.

        A unique key to make this request an idempotent operation.

        :param idempotency_key: The idempotency_key of this CancelBookingRequest.
        :type idempotency_key: str
        """
        if idempotency_key is not None and len(idempotency_key) > 255:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `255`")

        self._idempotency_key = idempotency_key
