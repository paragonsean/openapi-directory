# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dispute_evidence_file import DisputeEvidenceFile
from openapi_server import util


class DisputeEvidence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dispute_id: str=None, evidence_file: DisputeEvidenceFile=None, evidence_id: str=None, evidence_text: str=None, evidence_type: str=None, id: str=None, uploaded_at: str=None):
        """DisputeEvidence - a model defined in OpenAPI

        :param dispute_id: The dispute_id of this DisputeEvidence.
        :param evidence_file: The evidence_file of this DisputeEvidence.
        :param evidence_id: The evidence_id of this DisputeEvidence.
        :param evidence_text: The evidence_text of this DisputeEvidence.
        :param evidence_type: The evidence_type of this DisputeEvidence.
        :param id: The id of this DisputeEvidence.
        :param uploaded_at: The uploaded_at of this DisputeEvidence.
        """
        self.openapi_types = {
            'dispute_id': str,
            'evidence_file': DisputeEvidenceFile,
            'evidence_id': str,
            'evidence_text': str,
            'evidence_type': str,
            'id': str,
            'uploaded_at': str
        }

        self.attribute_map = {
            'dispute_id': 'dispute_id',
            'evidence_file': 'evidence_file',
            'evidence_id': 'evidence_id',
            'evidence_text': 'evidence_text',
            'evidence_type': 'evidence_type',
            'id': 'id',
            'uploaded_at': 'uploaded_at'
        }

        self._dispute_id = dispute_id
        self._evidence_file = evidence_file
        self._evidence_id = evidence_id
        self._evidence_text = evidence_text
        self._evidence_type = evidence_type
        self._id = id
        self._uploaded_at = uploaded_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisputeEvidence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisputeEvidence of this DisputeEvidence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dispute_id(self):
        """Gets the dispute_id of this DisputeEvidence.

        The ID of the dispute the evidence is associated with.

        :return: The dispute_id of this DisputeEvidence.
        :rtype: str
        """
        return self._dispute_id

    @dispute_id.setter
    def dispute_id(self, dispute_id):
        """Sets the dispute_id of this DisputeEvidence.

        The ID of the dispute the evidence is associated with.

        :param dispute_id: The dispute_id of this DisputeEvidence.
        :type dispute_id: str
        """
        if dispute_id is not None and len(dispute_id) > 40:
            raise ValueError("Invalid value for `dispute_id`, length must be less than or equal to `40`")
        if dispute_id is not None and len(dispute_id) < 1:
            raise ValueError("Invalid value for `dispute_id`, length must be greater than or equal to `1`")

        self._dispute_id = dispute_id

    @property
    def evidence_file(self):
        """Gets the evidence_file of this DisputeEvidence.


        :return: The evidence_file of this DisputeEvidence.
        :rtype: DisputeEvidenceFile
        """
        return self._evidence_file

    @evidence_file.setter
    def evidence_file(self, evidence_file):
        """Sets the evidence_file of this DisputeEvidence.


        :param evidence_file: The evidence_file of this DisputeEvidence.
        :type evidence_file: DisputeEvidenceFile
        """

        self._evidence_file = evidence_file

    @property
    def evidence_id(self):
        """Gets the evidence_id of this DisputeEvidence.

        The Square-generated ID of the evidence.

        :return: The evidence_id of this DisputeEvidence.
        :rtype: str
        """
        return self._evidence_id

    @evidence_id.setter
    def evidence_id(self, evidence_id):
        """Sets the evidence_id of this DisputeEvidence.

        The Square-generated ID of the evidence.

        :param evidence_id: The evidence_id of this DisputeEvidence.
        :type evidence_id: str
        """
        if evidence_id is not None and len(evidence_id) > 40:
            raise ValueError("Invalid value for `evidence_id`, length must be less than or equal to `40`")
        if evidence_id is not None and len(evidence_id) < 1:
            raise ValueError("Invalid value for `evidence_id`, length must be greater than or equal to `1`")

        self._evidence_id = evidence_id

    @property
    def evidence_text(self):
        """Gets the evidence_text of this DisputeEvidence.

        Raw text

        :return: The evidence_text of this DisputeEvidence.
        :rtype: str
        """
        return self._evidence_text

    @evidence_text.setter
    def evidence_text(self, evidence_text):
        """Sets the evidence_text of this DisputeEvidence.

        Raw text

        :param evidence_text: The evidence_text of this DisputeEvidence.
        :type evidence_text: str
        """
        if evidence_text is not None and len(evidence_text) > 500:
            raise ValueError("Invalid value for `evidence_text`, length must be less than or equal to `500`")
        if evidence_text is not None and len(evidence_text) < 1:
            raise ValueError("Invalid value for `evidence_text`, length must be greater than or equal to `1`")

        self._evidence_text = evidence_text

    @property
    def evidence_type(self):
        """Gets the evidence_type of this DisputeEvidence.

        The type of the evidence.

        :return: The evidence_type of this DisputeEvidence.
        :rtype: str
        """
        return self._evidence_type

    @evidence_type.setter
    def evidence_type(self, evidence_type):
        """Sets the evidence_type of this DisputeEvidence.

        The type of the evidence.

        :param evidence_type: The evidence_type of this DisputeEvidence.
        :type evidence_type: str
        """

        self._evidence_type = evidence_type

    @property
    def id(self):
        """Gets the id of this DisputeEvidence.

        The Square-generated ID of the evidence.

        :return: The id of this DisputeEvidence.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DisputeEvidence.

        The Square-generated ID of the evidence.

        :param id: The id of this DisputeEvidence.
        :type id: str
        """
        if id is not None and len(id) > 40:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `40`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this DisputeEvidence.

        The time when the next action is due, in RFC 3339 format.

        :return: The uploaded_at of this DisputeEvidence.
        :rtype: str
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this DisputeEvidence.

        The time when the next action is due, in RFC 3339 format.

        :param uploaded_at: The uploaded_at of this DisputeEvidence.
        :type uploaded_at: str
        """
        if uploaded_at is not None and len(uploaded_at) > 40:
            raise ValueError("Invalid value for `uploaded_at`, length must be less than or equal to `40`")
        if uploaded_at is not None and len(uploaded_at) < 1:
            raise ValueError("Invalid value for `uploaded_at`, length must be greater than or equal to `1`")

        self._uploaded_at = uploaded_at
