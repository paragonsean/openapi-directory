# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_break import ModelBreak
from openapi_server.models.shift_wage import ShiftWage
from openapi_server import util


class Shift(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, breaks: List[ModelBreak]=None, created_at: str=None, employee_id: str=None, end_at: str=None, id: str=None, location_id: str=None, start_at: str=None, status: str=None, team_member_id: str=None, timezone: str=None, updated_at: str=None, version: int=None, wage: ShiftWage=None):
        """Shift - a model defined in OpenAPI

        :param breaks: The breaks of this Shift.
        :param created_at: The created_at of this Shift.
        :param employee_id: The employee_id of this Shift.
        :param end_at: The end_at of this Shift.
        :param id: The id of this Shift.
        :param location_id: The location_id of this Shift.
        :param start_at: The start_at of this Shift.
        :param status: The status of this Shift.
        :param team_member_id: The team_member_id of this Shift.
        :param timezone: The timezone of this Shift.
        :param updated_at: The updated_at of this Shift.
        :param version: The version of this Shift.
        :param wage: The wage of this Shift.
        """
        self.openapi_types = {
            'breaks': List[ModelBreak],
            'created_at': str,
            'employee_id': str,
            'end_at': str,
            'id': str,
            'location_id': str,
            'start_at': str,
            'status': str,
            'team_member_id': str,
            'timezone': str,
            'updated_at': str,
            'version': int,
            'wage': ShiftWage
        }

        self.attribute_map = {
            'breaks': 'breaks',
            'created_at': 'created_at',
            'employee_id': 'employee_id',
            'end_at': 'end_at',
            'id': 'id',
            'location_id': 'location_id',
            'start_at': 'start_at',
            'status': 'status',
            'team_member_id': 'team_member_id',
            'timezone': 'timezone',
            'updated_at': 'updated_at',
            'version': 'version',
            'wage': 'wage'
        }

        self._breaks = breaks
        self._created_at = created_at
        self._employee_id = employee_id
        self._end_at = end_at
        self._id = id
        self._location_id = location_id
        self._start_at = start_at
        self._status = status
        self._team_member_id = team_member_id
        self._timezone = timezone
        self._updated_at = updated_at
        self._version = version
        self._wage = wage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Shift':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Shift of this Shift.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def breaks(self):
        """Gets the breaks of this Shift.

        A list of all the paid or unpaid breaks that were taken during this shift.

        :return: The breaks of this Shift.
        :rtype: List[ModelBreak]
        """
        return self._breaks

    @breaks.setter
    def breaks(self, breaks):
        """Sets the breaks of this Shift.

        A list of all the paid or unpaid breaks that were taken during this shift.

        :param breaks: The breaks of this Shift.
        :type breaks: List[ModelBreak]
        """

        self._breaks = breaks

    @property
    def created_at(self):
        """Gets the created_at of this Shift.

        A read-only timestamp in RFC 3339 format; presented in UTC.

        :return: The created_at of this Shift.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Shift.

        A read-only timestamp in RFC 3339 format; presented in UTC.

        :param created_at: The created_at of this Shift.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def employee_id(self):
        """Gets the employee_id of this Shift.

        The ID of the employee this shift belongs to. DEPRECATED at version 2020-08-26. Use `team_member_id` instead.

        :return: The employee_id of this Shift.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this Shift.

        The ID of the employee this shift belongs to. DEPRECATED at version 2020-08-26. Use `team_member_id` instead.

        :param employee_id: The employee_id of this Shift.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def end_at(self):
        """Gets the end_at of this Shift.

        RFC 3339; shifted to the timezone + offset. Precision up to the minute is respected; seconds are truncated.

        :return: The end_at of this Shift.
        :rtype: str
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this Shift.

        RFC 3339; shifted to the timezone + offset. Precision up to the minute is respected; seconds are truncated.

        :param end_at: The end_at of this Shift.
        :type end_at: str
        """

        self._end_at = end_at

    @property
    def id(self):
        """Gets the id of this Shift.

        The UUID for this object.

        :return: The id of this Shift.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Shift.

        The UUID for this object.

        :param id: The id of this Shift.
        :type id: str
        """
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this Shift.

        The ID of the location this shift occurred at. The location should be based on where the employee clocked in.

        :return: The location_id of this Shift.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Shift.

        The ID of the location this shift occurred at. The location should be based on where the employee clocked in.

        :param location_id: The location_id of this Shift.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def start_at(self):
        """Gets the start_at of this Shift.

        RFC 3339; shifted to the location timezone + offset. Precision up to the minute is respected; seconds are truncated.

        :return: The start_at of this Shift.
        :rtype: str
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this Shift.

        RFC 3339; shifted to the location timezone + offset. Precision up to the minute is respected; seconds are truncated.

        :param start_at: The start_at of this Shift.
        :type start_at: str
        """
        if start_at is None:
            raise ValueError("Invalid value for `start_at`, must not be `None`")
        if start_at is not None and len(start_at) < 1:
            raise ValueError("Invalid value for `start_at`, length must be greater than or equal to `1`")

        self._start_at = start_at

    @property
    def status(self):
        """Gets the status of this Shift.

        Describes the working state of the current `Shift`.

        :return: The status of this Shift.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Shift.

        Describes the working state of the current `Shift`.

        :param status: The status of this Shift.
        :type status: str
        """

        self._status = status

    @property
    def team_member_id(self):
        """Gets the team_member_id of this Shift.

        The ID of the team member this shift belongs to. Replaced `employee_id` at version \"2020-08-26\".

        :return: The team_member_id of this Shift.
        :rtype: str
        """
        return self._team_member_id

    @team_member_id.setter
    def team_member_id(self, team_member_id):
        """Sets the team_member_id of this Shift.

        The ID of the team member this shift belongs to. Replaced `employee_id` at version \"2020-08-26\".

        :param team_member_id: The team_member_id of this Shift.
        :type team_member_id: str
        """

        self._team_member_id = team_member_id

    @property
    def timezone(self):
        """Gets the timezone of this Shift.

        The read-only convenience value that is calculated from the location based on the `location_id`. Format: the IANA timezone database identifier for the location timezone.

        :return: The timezone of this Shift.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Shift.

        The read-only convenience value that is calculated from the location based on the `location_id`. Format: the IANA timezone database identifier for the location timezone.

        :param timezone: The timezone of this Shift.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def updated_at(self):
        """Gets the updated_at of this Shift.

        A read-only timestamp in RFC 3339 format; presented in UTC.

        :return: The updated_at of this Shift.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Shift.

        A read-only timestamp in RFC 3339 format; presented in UTC.

        :param updated_at: The updated_at of this Shift.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this Shift.

        Used for resolving concurrency issues. The request fails if the version provided does not match the server version at the time of the request. If not provided, Square executes a blind write; potentially overwriting data from another write.

        :return: The version of this Shift.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Shift.

        Used for resolving concurrency issues. The request fails if the version provided does not match the server version at the time of the request. If not provided, Square executes a blind write; potentially overwriting data from another write.

        :param version: The version of this Shift.
        :type version: int
        """

        self._version = version

    @property
    def wage(self):
        """Gets the wage of this Shift.


        :return: The wage of this Shift.
        :rtype: ShiftWage
        """
        return self._wage

    @wage.setter
    def wage(self, wage):
        """Sets the wage of this Shift.


        :param wage: The wage of this Shift.
        :type wage: ShiftWage
        """

        self._wage = wage
