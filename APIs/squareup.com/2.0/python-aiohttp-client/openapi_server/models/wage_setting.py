# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_assignment import JobAssignment
from openapi_server import util


class WageSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, is_overtime_exempt: bool=None, job_assignments: List[JobAssignment]=None, team_member_id: str=None, updated_at: str=None, version: int=None):
        """WageSetting - a model defined in OpenAPI

        :param created_at: The created_at of this WageSetting.
        :param is_overtime_exempt: The is_overtime_exempt of this WageSetting.
        :param job_assignments: The job_assignments of this WageSetting.
        :param team_member_id: The team_member_id of this WageSetting.
        :param updated_at: The updated_at of this WageSetting.
        :param version: The version of this WageSetting.
        """
        self.openapi_types = {
            'created_at': str,
            'is_overtime_exempt': bool,
            'job_assignments': List[JobAssignment],
            'team_member_id': str,
            'updated_at': str,
            'version': int
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'is_overtime_exempt': 'is_overtime_exempt',
            'job_assignments': 'job_assignments',
            'team_member_id': 'team_member_id',
            'updated_at': 'updated_at',
            'version': 'version'
        }

        self._created_at = created_at
        self._is_overtime_exempt = is_overtime_exempt
        self._job_assignments = job_assignments
        self._team_member_id = team_member_id
        self._updated_at = updated_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WageSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WageSetting of this WageSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this WageSetting.

        The timestamp, in RFC 3339 format, describing when the wage setting object was created. For example, \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\".

        :return: The created_at of this WageSetting.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WageSetting.

        The timestamp, in RFC 3339 format, describing when the wage setting object was created. For example, \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\".

        :param created_at: The created_at of this WageSetting.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def is_overtime_exempt(self):
        """Gets the is_overtime_exempt of this WageSetting.

        Whether the team member is exempt from the overtime rules of the seller's country.

        :return: The is_overtime_exempt of this WageSetting.
        :rtype: bool
        """
        return self._is_overtime_exempt

    @is_overtime_exempt.setter
    def is_overtime_exempt(self, is_overtime_exempt):
        """Sets the is_overtime_exempt of this WageSetting.

        Whether the team member is exempt from the overtime rules of the seller's country.

        :param is_overtime_exempt: The is_overtime_exempt of this WageSetting.
        :type is_overtime_exempt: bool
        """

        self._is_overtime_exempt = is_overtime_exempt

    @property
    def job_assignments(self):
        """Gets the job_assignments of this WageSetting.

        Required. The ordered list of jobs that the team member is assigned to. The first job assignment is considered the team member's primary job.  The minimum length is 1 and the maximum length is 12.

        :return: The job_assignments of this WageSetting.
        :rtype: List[JobAssignment]
        """
        return self._job_assignments

    @job_assignments.setter
    def job_assignments(self, job_assignments):
        """Sets the job_assignments of this WageSetting.

        Required. The ordered list of jobs that the team member is assigned to. The first job assignment is considered the team member's primary job.  The minimum length is 1 and the maximum length is 12.

        :param job_assignments: The job_assignments of this WageSetting.
        :type job_assignments: List[JobAssignment]
        """

        self._job_assignments = job_assignments

    @property
    def team_member_id(self):
        """Gets the team_member_id of this WageSetting.

        The unique ID of the `TeamMember` whom this wage setting describes.

        :return: The team_member_id of this WageSetting.
        :rtype: str
        """
        return self._team_member_id

    @team_member_id.setter
    def team_member_id(self, team_member_id):
        """Sets the team_member_id of this WageSetting.

        The unique ID of the `TeamMember` whom this wage setting describes.

        :param team_member_id: The team_member_id of this WageSetting.
        :type team_member_id: str
        """

        self._team_member_id = team_member_id

    @property
    def updated_at(self):
        """Gets the updated_at of this WageSetting.

        The timestamp, in RFC 3339 format, describing when the wage setting object was last updated. For example, \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\".

        :return: The updated_at of this WageSetting.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this WageSetting.

        The timestamp, in RFC 3339 format, describing when the wage setting object was last updated. For example, \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\".

        :param updated_at: The updated_at of this WageSetting.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this WageSetting.

        Used for resolving concurrency issues. The request fails if the version provided does not match the server version at the time of the request. If not provided, Square executes a blind write, potentially overwriting data from another write. For more information, see [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency).

        :return: The version of this WageSetting.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this WageSetting.

        Used for resolving concurrency issues. The request fails if the version provided does not match the server version at the time of the request. If not provided, Square executes a blind write, potentially overwriting data from another write. For more information, see [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency).

        :param version: The version of this WageSetting.
        :type version: int
        """

        self._version = version
