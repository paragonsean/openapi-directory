# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_recipient import AdditionalRecipient
from openapi_server.models.address import Address
from openapi_server.models.order import Order
from openapi_server import util


class Checkout(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_recipients: List[AdditionalRecipient]=None, ask_for_shipping_address: bool=None, checkout_page_url: str=None, created_at: str=None, id: str=None, merchant_support_email: str=None, order: Order=None, pre_populate_buyer_email: str=None, pre_populate_shipping_address: Address=None, redirect_url: str=None):
        """Checkout - a model defined in OpenAPI

        :param additional_recipients: The additional_recipients of this Checkout.
        :param ask_for_shipping_address: The ask_for_shipping_address of this Checkout.
        :param checkout_page_url: The checkout_page_url of this Checkout.
        :param created_at: The created_at of this Checkout.
        :param id: The id of this Checkout.
        :param merchant_support_email: The merchant_support_email of this Checkout.
        :param order: The order of this Checkout.
        :param pre_populate_buyer_email: The pre_populate_buyer_email of this Checkout.
        :param pre_populate_shipping_address: The pre_populate_shipping_address of this Checkout.
        :param redirect_url: The redirect_url of this Checkout.
        """
        self.openapi_types = {
            'additional_recipients': List[AdditionalRecipient],
            'ask_for_shipping_address': bool,
            'checkout_page_url': str,
            'created_at': str,
            'id': str,
            'merchant_support_email': str,
            'order': Order,
            'pre_populate_buyer_email': str,
            'pre_populate_shipping_address': Address,
            'redirect_url': str
        }

        self.attribute_map = {
            'additional_recipients': 'additional_recipients',
            'ask_for_shipping_address': 'ask_for_shipping_address',
            'checkout_page_url': 'checkout_page_url',
            'created_at': 'created_at',
            'id': 'id',
            'merchant_support_email': 'merchant_support_email',
            'order': 'order',
            'pre_populate_buyer_email': 'pre_populate_buyer_email',
            'pre_populate_shipping_address': 'pre_populate_shipping_address',
            'redirect_url': 'redirect_url'
        }

        self._additional_recipients = additional_recipients
        self._ask_for_shipping_address = ask_for_shipping_address
        self._checkout_page_url = checkout_page_url
        self._created_at = created_at
        self._id = id
        self._merchant_support_email = merchant_support_email
        self._order = order
        self._pre_populate_buyer_email = pre_populate_buyer_email
        self._pre_populate_shipping_address = pre_populate_shipping_address
        self._redirect_url = redirect_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Checkout':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Checkout of this Checkout.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_recipients(self):
        """Gets the additional_recipients of this Checkout.

        Additional recipients (other than the merchant) receiving a portion of this checkout. For example, fees assessed on the purchase by a third party integration.

        :return: The additional_recipients of this Checkout.
        :rtype: List[AdditionalRecipient]
        """
        return self._additional_recipients

    @additional_recipients.setter
    def additional_recipients(self, additional_recipients):
        """Sets the additional_recipients of this Checkout.

        Additional recipients (other than the merchant) receiving a portion of this checkout. For example, fees assessed on the purchase by a third party integration.

        :param additional_recipients: The additional_recipients of this Checkout.
        :type additional_recipients: List[AdditionalRecipient]
        """

        self._additional_recipients = additional_recipients

    @property
    def ask_for_shipping_address(self):
        """Gets the ask_for_shipping_address of this Checkout.

        If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: `false`.

        :return: The ask_for_shipping_address of this Checkout.
        :rtype: bool
        """
        return self._ask_for_shipping_address

    @ask_for_shipping_address.setter
    def ask_for_shipping_address(self, ask_for_shipping_address):
        """Sets the ask_for_shipping_address of this Checkout.

        If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: `false`.

        :param ask_for_shipping_address: The ask_for_shipping_address of this Checkout.
        :type ask_for_shipping_address: bool
        """

        self._ask_for_shipping_address = ask_for_shipping_address

    @property
    def checkout_page_url(self):
        """Gets the checkout_page_url of this Checkout.

        The URL that the buyer's browser should be redirected to after the checkout is completed.

        :return: The checkout_page_url of this Checkout.
        :rtype: str
        """
        return self._checkout_page_url

    @checkout_page_url.setter
    def checkout_page_url(self, checkout_page_url):
        """Sets the checkout_page_url of this Checkout.

        The URL that the buyer's browser should be redirected to after the checkout is completed.

        :param checkout_page_url: The checkout_page_url of this Checkout.
        :type checkout_page_url: str
        """

        self._checkout_page_url = checkout_page_url

    @property
    def created_at(self):
        """Gets the created_at of this Checkout.

        The time when the checkout was created, in RFC 3339 format.

        :return: The created_at of this Checkout.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Checkout.

        The time when the checkout was created, in RFC 3339 format.

        :param created_at: The created_at of this Checkout.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Checkout.

        ID generated by Square Checkout when a new checkout is requested.

        :return: The id of this Checkout.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Checkout.

        ID generated by Square Checkout when a new checkout is requested.

        :param id: The id of this Checkout.
        :type id: str
        """

        self._id = id

    @property
    def merchant_support_email(self):
        """Gets the merchant_support_email of this Checkout.

        The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default: none; only exists if explicitly set.

        :return: The merchant_support_email of this Checkout.
        :rtype: str
        """
        return self._merchant_support_email

    @merchant_support_email.setter
    def merchant_support_email(self, merchant_support_email):
        """Sets the merchant_support_email of this Checkout.

        The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default: none; only exists if explicitly set.

        :param merchant_support_email: The merchant_support_email of this Checkout.
        :type merchant_support_email: str
        """

        self._merchant_support_email = merchant_support_email

    @property
    def order(self):
        """Gets the order of this Checkout.


        :return: The order of this Checkout.
        :rtype: Order
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Checkout.


        :param order: The order of this Checkout.
        :type order: Order
        """

        self._order = order

    @property
    def pre_populate_buyer_email(self):
        """Gets the pre_populate_buyer_email of this Checkout.

        If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.

        :return: The pre_populate_buyer_email of this Checkout.
        :rtype: str
        """
        return self._pre_populate_buyer_email

    @pre_populate_buyer_email.setter
    def pre_populate_buyer_email(self, pre_populate_buyer_email):
        """Sets the pre_populate_buyer_email of this Checkout.

        If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.

        :param pre_populate_buyer_email: The pre_populate_buyer_email of this Checkout.
        :type pre_populate_buyer_email: str
        """

        self._pre_populate_buyer_email = pre_populate_buyer_email

    @property
    def pre_populate_shipping_address(self):
        """Gets the pre_populate_shipping_address of this Checkout.


        :return: The pre_populate_shipping_address of this Checkout.
        :rtype: Address
        """
        return self._pre_populate_shipping_address

    @pre_populate_shipping_address.setter
    def pre_populate_shipping_address(self, pre_populate_shipping_address):
        """Sets the pre_populate_shipping_address of this Checkout.


        :param pre_populate_shipping_address: The pre_populate_shipping_address of this Checkout.
        :type pre_populate_shipping_address: Address
        """

        self._pre_populate_shipping_address = pre_populate_shipping_address

    @property
    def redirect_url(self):
        """Gets the redirect_url of this Checkout.

        The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  <pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.

        :return: The redirect_url of this Checkout.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this Checkout.

        The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  <pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.

        :param redirect_url: The redirect_url of this Checkout.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url
