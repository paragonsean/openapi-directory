# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.shift_query import ShiftQuery
from openapi_server import util


class SearchShiftsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cursor: str=None, limit: int=None, query: ShiftQuery=None):
        """SearchShiftsRequest - a model defined in OpenAPI

        :param cursor: The cursor of this SearchShiftsRequest.
        :param limit: The limit of this SearchShiftsRequest.
        :param query: The query of this SearchShiftsRequest.
        """
        self.openapi_types = {
            'cursor': str,
            'limit': int,
            'query': ShiftQuery
        }

        self.attribute_map = {
            'cursor': 'cursor',
            'limit': 'limit',
            'query': 'query'
        }

        self._cursor = cursor
        self._limit = limit
        self._query = query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchShiftsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchShiftsRequest of this SearchShiftsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cursor(self):
        """Gets the cursor of this SearchShiftsRequest.

        An opaque cursor for fetching the next page.

        :return: The cursor of this SearchShiftsRequest.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this SearchShiftsRequest.

        An opaque cursor for fetching the next page.

        :param cursor: The cursor of this SearchShiftsRequest.
        :type cursor: str
        """

        self._cursor = cursor

    @property
    def limit(self):
        """Gets the limit of this SearchShiftsRequest.

        The number of resources in a page (200 by default).

        :return: The limit of this SearchShiftsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchShiftsRequest.

        The number of resources in a page (200 by default).

        :param limit: The limit of this SearchShiftsRequest.
        :type limit: int
        """
        if limit is not None and limit > 200:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `200`")
        if limit is not None and limit < 1:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")

        self._limit = limit

    @property
    def query(self):
        """Gets the query of this SearchShiftsRequest.


        :return: The query of this SearchShiftsRequest.
        :rtype: ShiftQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchShiftsRequest.


        :param query: The query of this SearchShiftsRequest.
        :type query: ShiftQuery
        """

        self._query = query
