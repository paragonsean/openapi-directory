# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_phase import SubscriptionPhase
from openapi_server import util


class CatalogSubscriptionPlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, phases: List[SubscriptionPhase]=None):
        """CatalogSubscriptionPlan - a model defined in OpenAPI

        :param name: The name of this CatalogSubscriptionPlan.
        :param phases: The phases of this CatalogSubscriptionPlan.
        """
        self.openapi_types = {
            'name': str,
            'phases': List[SubscriptionPhase]
        }

        self.attribute_map = {
            'name': 'name',
            'phases': 'phases'
        }

        self._name = name
        self._phases = phases

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogSubscriptionPlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogSubscriptionPlan of this CatalogSubscriptionPlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CatalogSubscriptionPlan.

        The name of the plan.

        :return: The name of this CatalogSubscriptionPlan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogSubscriptionPlan.

        The name of the plan.

        :param name: The name of this CatalogSubscriptionPlan.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def phases(self):
        """Gets the phases of this CatalogSubscriptionPlan.

        A list of SubscriptionPhase containing the [SubscriptionPhase](https://developer.squareup.com/reference/square_2021-08-18/objects/SubscriptionPhase) for this plan.

        :return: The phases of this CatalogSubscriptionPlan.
        :rtype: List[SubscriptionPhase]
        """
        return self._phases

    @phases.setter
    def phases(self, phases):
        """Sets the phases of this CatalogSubscriptionPlan.

        A list of SubscriptionPhase containing the [SubscriptionPhase](https://developer.squareup.com/reference/square_2021-08-18/objects/SubscriptionPhase) for this plan.

        :param phases: The phases of this CatalogSubscriptionPlan.
        :type phases: List[SubscriptionPhase]
        """
        if phases is None:
            raise ValueError("Invalid value for `phases`, must not be `None`")

        self._phases = phases
