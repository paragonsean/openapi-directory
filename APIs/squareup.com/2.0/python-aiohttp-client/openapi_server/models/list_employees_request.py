# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListEmployeesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cursor: str=None, limit: int=None, location_id: str=None, status: str=None):
        """ListEmployeesRequest - a model defined in OpenAPI

        :param cursor: The cursor of this ListEmployeesRequest.
        :param limit: The limit of this ListEmployeesRequest.
        :param location_id: The location_id of this ListEmployeesRequest.
        :param status: The status of this ListEmployeesRequest.
        """
        self.openapi_types = {
            'cursor': str,
            'limit': int,
            'location_id': str,
            'status': str
        }

        self.attribute_map = {
            'cursor': 'cursor',
            'limit': 'limit',
            'location_id': 'location_id',
            'status': 'status'
        }

        self._cursor = cursor
        self._limit = limit
        self._location_id = location_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListEmployeesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListEmployeesRequest of this ListEmployeesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cursor(self):
        """Gets the cursor of this ListEmployeesRequest.

        The token required to retrieve the specified page of results.

        :return: The cursor of this ListEmployeesRequest.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this ListEmployeesRequest.

        The token required to retrieve the specified page of results.

        :param cursor: The cursor of this ListEmployeesRequest.
        :type cursor: str
        """

        self._cursor = cursor

    @property
    def limit(self):
        """Gets the limit of this ListEmployeesRequest.

        The number of employees to be returned on each page.

        :return: The limit of this ListEmployeesRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListEmployeesRequest.

        The number of employees to be returned on each page.

        :param limit: The limit of this ListEmployeesRequest.
        :type limit: int
        """

        self._limit = limit

    @property
    def location_id(self):
        """Gets the location_id of this ListEmployeesRequest.

        

        :return: The location_id of this ListEmployeesRequest.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ListEmployeesRequest.

        

        :param location_id: The location_id of this ListEmployeesRequest.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def status(self):
        """Gets the status of this ListEmployeesRequest.

        Specifies the EmployeeStatus to filter the employee by.

        :return: The status of this ListEmployeesRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ListEmployeesRequest.

        Specifies the EmployeeStatus to filter the employee by.

        :param status: The status of this ListEmployeesRequest.
        :type status: str
        """

        self._status = status
