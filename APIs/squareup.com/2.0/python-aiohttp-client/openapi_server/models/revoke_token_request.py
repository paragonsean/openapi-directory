# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RevokeTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, client_id: str=None, merchant_id: str=None, revoke_only_access_token: bool=None):
        """RevokeTokenRequest - a model defined in OpenAPI

        :param access_token: The access_token of this RevokeTokenRequest.
        :param client_id: The client_id of this RevokeTokenRequest.
        :param merchant_id: The merchant_id of this RevokeTokenRequest.
        :param revoke_only_access_token: The revoke_only_access_token of this RevokeTokenRequest.
        """
        self.openapi_types = {
            'access_token': str,
            'client_id': str,
            'merchant_id': str,
            'revoke_only_access_token': bool
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'client_id': 'client_id',
            'merchant_id': 'merchant_id',
            'revoke_only_access_token': 'revoke_only_access_token'
        }

        self._access_token = access_token
        self._client_id = client_id
        self._merchant_id = merchant_id
        self._revoke_only_access_token = revoke_only_access_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RevokeTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RevokeTokenRequest of this RevokeTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this RevokeTokenRequest.

        The access token of the merchant whose token you want to revoke. Do not provide a value for merchant_id if you provide this parameter.

        :return: The access_token of this RevokeTokenRequest.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this RevokeTokenRequest.

        The access token of the merchant whose token you want to revoke. Do not provide a value for merchant_id if you provide this parameter.

        :param access_token: The access_token of this RevokeTokenRequest.
        :type access_token: str
        """
        if access_token is not None and len(access_token) > 1024:
            raise ValueError("Invalid value for `access_token`, length must be less than or equal to `1024`")
        if access_token is not None and len(access_token) < 2:
            raise ValueError("Invalid value for `access_token`, length must be greater than or equal to `2`")

        self._access_token = access_token

    @property
    def client_id(self):
        """Gets the client_id of this RevokeTokenRequest.

        The Square issued ID for your application, available from the [developer dashboard](https://developer.squareup.com/apps).

        :return: The client_id of this RevokeTokenRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this RevokeTokenRequest.

        The Square issued ID for your application, available from the [developer dashboard](https://developer.squareup.com/apps).

        :param client_id: The client_id of this RevokeTokenRequest.
        :type client_id: str
        """
        if client_id is not None and len(client_id) > 191:
            raise ValueError("Invalid value for `client_id`, length must be less than or equal to `191`")

        self._client_id = client_id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this RevokeTokenRequest.

        The ID of the merchant whose token you want to revoke. Do not provide a value for access_token if you provide this parameter.

        :return: The merchant_id of this RevokeTokenRequest.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this RevokeTokenRequest.

        The ID of the merchant whose token you want to revoke. Do not provide a value for access_token if you provide this parameter.

        :param merchant_id: The merchant_id of this RevokeTokenRequest.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def revoke_only_access_token(self):
        """Gets the revoke_only_access_token of this RevokeTokenRequest.

        If `true`, terminate the given single access token, but do not terminate the entire authorization. Default: `false`

        :return: The revoke_only_access_token of this RevokeTokenRequest.
        :rtype: bool
        """
        return self._revoke_only_access_token

    @revoke_only_access_token.setter
    def revoke_only_access_token(self, revoke_only_access_token):
        """Sets the revoke_only_access_token of this RevokeTokenRequest.

        If `true`, terminate the given single access token, but do not terminate the entire authorization. Default: `false`

        :param revoke_only_access_token: The revoke_only_access_token of this RevokeTokenRequest.
        :type revoke_only_access_token: bool
        """

        self._revoke_only_access_token = revoke_only_access_token
