# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class AdditionalRecipient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: Money=None, description: str=None, location_id: str=None, receivable_id: str=None):
        """AdditionalRecipient - a model defined in OpenAPI

        :param amount_money: The amount_money of this AdditionalRecipient.
        :param description: The description of this AdditionalRecipient.
        :param location_id: The location_id of this AdditionalRecipient.
        :param receivable_id: The receivable_id of this AdditionalRecipient.
        """
        self.openapi_types = {
            'amount_money': Money,
            'description': str,
            'location_id': str,
            'receivable_id': str
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'description': 'description',
            'location_id': 'location_id',
            'receivable_id': 'receivable_id'
        }

        self._amount_money = amount_money
        self._description = description
        self._location_id = location_id
        self._receivable_id = receivable_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalRecipient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalRecipient of this AdditionalRecipient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this AdditionalRecipient.


        :return: The amount_money of this AdditionalRecipient.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this AdditionalRecipient.


        :param amount_money: The amount_money of this AdditionalRecipient.
        :type amount_money: Money
        """
        if amount_money is None:
            raise ValueError("Invalid value for `amount_money`, must not be `None`")

        self._amount_money = amount_money

    @property
    def description(self):
        """Gets the description of this AdditionalRecipient.

        The description of the additional recipient.

        :return: The description of this AdditionalRecipient.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AdditionalRecipient.

        The description of the additional recipient.

        :param description: The description of this AdditionalRecipient.
        :type description: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")

        self._description = description

    @property
    def location_id(self):
        """Gets the location_id of this AdditionalRecipient.

        The location ID for a recipient (other than the merchant) receiving a portion of this tender.

        :return: The location_id of this AdditionalRecipient.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this AdditionalRecipient.

        The location ID for a recipient (other than the merchant) receiving a portion of this tender.

        :param location_id: The location_id of this AdditionalRecipient.
        :type location_id: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")
        if location_id is not None and len(location_id) > 50:
            raise ValueError("Invalid value for `location_id`, length must be less than or equal to `50`")
        if location_id is not None and len(location_id) < 1:
            raise ValueError("Invalid value for `location_id`, length must be greater than or equal to `1`")

        self._location_id = location_id

    @property
    def receivable_id(self):
        """Gets the receivable_id of this AdditionalRecipient.

        The unique ID for this [AdditionalRecipientReceivable](https://developer.squareup.com/reference/square_2021-08-18/objects/AdditionalRecipientReceivable), assigned by the server.

        :return: The receivable_id of this AdditionalRecipient.
        :rtype: str
        """
        return self._receivable_id

    @receivable_id.setter
    def receivable_id(self, receivable_id):
        """Sets the receivable_id of this AdditionalRecipient.

        The unique ID for this [AdditionalRecipientReceivable](https://developer.squareup.com/reference/square_2021-08-18/objects/AdditionalRecipientReceivable), assigned by the server.

        :param receivable_id: The receivable_id of this AdditionalRecipient.
        :type receivable_id: str
        """
        if receivable_id is not None and len(receivable_id) > 192:
            raise ValueError("Invalid value for `receivable_id`, length must be less than or equal to `192`")

        self._receivable_id = receivable_id
