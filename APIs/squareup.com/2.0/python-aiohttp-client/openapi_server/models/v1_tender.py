# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.v1_money import V1Money
from openapi_server import util


class V1Tender(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_brand: str=None, change_back_money: V1Money=None, employee_id: str=None, entry_method: str=None, id: str=None, is_exchange: bool=None, name: str=None, pan_suffix: str=None, payment_note: str=None, receipt_url: str=None, refunded_money: V1Money=None, settled_at: str=None, tendered_at: str=None, tendered_money: V1Money=None, total_money: V1Money=None, type: str=None):
        """V1Tender - a model defined in OpenAPI

        :param card_brand: The card_brand of this V1Tender.
        :param change_back_money: The change_back_money of this V1Tender.
        :param employee_id: The employee_id of this V1Tender.
        :param entry_method: The entry_method of this V1Tender.
        :param id: The id of this V1Tender.
        :param is_exchange: The is_exchange of this V1Tender.
        :param name: The name of this V1Tender.
        :param pan_suffix: The pan_suffix of this V1Tender.
        :param payment_note: The payment_note of this V1Tender.
        :param receipt_url: The receipt_url of this V1Tender.
        :param refunded_money: The refunded_money of this V1Tender.
        :param settled_at: The settled_at of this V1Tender.
        :param tendered_at: The tendered_at of this V1Tender.
        :param tendered_money: The tendered_money of this V1Tender.
        :param total_money: The total_money of this V1Tender.
        :param type: The type of this V1Tender.
        """
        self.openapi_types = {
            'card_brand': str,
            'change_back_money': V1Money,
            'employee_id': str,
            'entry_method': str,
            'id': str,
            'is_exchange': bool,
            'name': str,
            'pan_suffix': str,
            'payment_note': str,
            'receipt_url': str,
            'refunded_money': V1Money,
            'settled_at': str,
            'tendered_at': str,
            'tendered_money': V1Money,
            'total_money': V1Money,
            'type': str
        }

        self.attribute_map = {
            'card_brand': 'card_brand',
            'change_back_money': 'change_back_money',
            'employee_id': 'employee_id',
            'entry_method': 'entry_method',
            'id': 'id',
            'is_exchange': 'is_exchange',
            'name': 'name',
            'pan_suffix': 'pan_suffix',
            'payment_note': 'payment_note',
            'receipt_url': 'receipt_url',
            'refunded_money': 'refunded_money',
            'settled_at': 'settled_at',
            'tendered_at': 'tendered_at',
            'tendered_money': 'tendered_money',
            'total_money': 'total_money',
            'type': 'type'
        }

        self._card_brand = card_brand
        self._change_back_money = change_back_money
        self._employee_id = employee_id
        self._entry_method = entry_method
        self._id = id
        self._is_exchange = is_exchange
        self._name = name
        self._pan_suffix = pan_suffix
        self._payment_note = payment_note
        self._receipt_url = receipt_url
        self._refunded_money = refunded_money
        self._settled_at = settled_at
        self._tendered_at = tendered_at
        self._tendered_money = tendered_money
        self._total_money = total_money
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V1Tender':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V1Tender of this V1Tender.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_brand(self):
        """Gets the card_brand of this V1Tender.

        The brand of credit card provided.

        :return: The card_brand of this V1Tender.
        :rtype: str
        """
        return self._card_brand

    @card_brand.setter
    def card_brand(self, card_brand):
        """Sets the card_brand of this V1Tender.

        The brand of credit card provided.

        :param card_brand: The card_brand of this V1Tender.
        :type card_brand: str
        """

        self._card_brand = card_brand

    @property
    def change_back_money(self):
        """Gets the change_back_money of this V1Tender.


        :return: The change_back_money of this V1Tender.
        :rtype: V1Money
        """
        return self._change_back_money

    @change_back_money.setter
    def change_back_money(self, change_back_money):
        """Sets the change_back_money of this V1Tender.


        :param change_back_money: The change_back_money of this V1Tender.
        :type change_back_money: V1Money
        """

        self._change_back_money = change_back_money

    @property
    def employee_id(self):
        """Gets the employee_id of this V1Tender.

        The ID of the employee that processed the tender.

        :return: The employee_id of this V1Tender.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this V1Tender.

        The ID of the employee that processed the tender.

        :param employee_id: The employee_id of this V1Tender.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def entry_method(self):
        """Gets the entry_method of this V1Tender.

        The tender's unique ID.

        :return: The entry_method of this V1Tender.
        :rtype: str
        """
        return self._entry_method

    @entry_method.setter
    def entry_method(self, entry_method):
        """Sets the entry_method of this V1Tender.

        The tender's unique ID.

        :param entry_method: The entry_method of this V1Tender.
        :type entry_method: str
        """

        self._entry_method = entry_method

    @property
    def id(self):
        """Gets the id of this V1Tender.

        The tender's unique ID.

        :return: The id of this V1Tender.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1Tender.

        The tender's unique ID.

        :param id: The id of this V1Tender.
        :type id: str
        """

        self._id = id

    @property
    def is_exchange(self):
        """Gets the is_exchange of this V1Tender.

        Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange.

        :return: The is_exchange of this V1Tender.
        :rtype: bool
        """
        return self._is_exchange

    @is_exchange.setter
    def is_exchange(self, is_exchange):
        """Sets the is_exchange of this V1Tender.

        Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange.

        :param is_exchange: The is_exchange of this V1Tender.
        :type is_exchange: bool
        """

        self._is_exchange = is_exchange

    @property
    def name(self):
        """Gets the name of this V1Tender.

        A human-readable description of the tender.

        :return: The name of this V1Tender.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1Tender.

        A human-readable description of the tender.

        :param name: The name of this V1Tender.
        :type name: str
        """

        self._name = name

    @property
    def pan_suffix(self):
        """Gets the pan_suffix of this V1Tender.

        The last four digits of the provided credit card's account number.

        :return: The pan_suffix of this V1Tender.
        :rtype: str
        """
        return self._pan_suffix

    @pan_suffix.setter
    def pan_suffix(self, pan_suffix):
        """Sets the pan_suffix of this V1Tender.

        The last four digits of the provided credit card's account number.

        :param pan_suffix: The pan_suffix of this V1Tender.
        :type pan_suffix: str
        """

        self._pan_suffix = pan_suffix

    @property
    def payment_note(self):
        """Gets the payment_note of this V1Tender.

        Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER.

        :return: The payment_note of this V1Tender.
        :rtype: str
        """
        return self._payment_note

    @payment_note.setter
    def payment_note(self, payment_note):
        """Sets the payment_note of this V1Tender.

        Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER.

        :param payment_note: The payment_note of this V1Tender.
        :type payment_note: str
        """

        self._payment_note = payment_note

    @property
    def receipt_url(self):
        """Gets the receipt_url of this V1Tender.

        The URL of the receipt for the tender.

        :return: The receipt_url of this V1Tender.
        :rtype: str
        """
        return self._receipt_url

    @receipt_url.setter
    def receipt_url(self, receipt_url):
        """Sets the receipt_url of this V1Tender.

        The URL of the receipt for the tender.

        :param receipt_url: The receipt_url of this V1Tender.
        :type receipt_url: str
        """

        self._receipt_url = receipt_url

    @property
    def refunded_money(self):
        """Gets the refunded_money of this V1Tender.


        :return: The refunded_money of this V1Tender.
        :rtype: V1Money
        """
        return self._refunded_money

    @refunded_money.setter
    def refunded_money(self, refunded_money):
        """Sets the refunded_money of this V1Tender.


        :param refunded_money: The refunded_money of this V1Tender.
        :type refunded_money: V1Money
        """

        self._refunded_money = refunded_money

    @property
    def settled_at(self):
        """Gets the settled_at of this V1Tender.

        The time when the tender was settled, in ISO 8601 format.

        :return: The settled_at of this V1Tender.
        :rtype: str
        """
        return self._settled_at

    @settled_at.setter
    def settled_at(self, settled_at):
        """Sets the settled_at of this V1Tender.

        The time when the tender was settled, in ISO 8601 format.

        :param settled_at: The settled_at of this V1Tender.
        :type settled_at: str
        """

        self._settled_at = settled_at

    @property
    def tendered_at(self):
        """Gets the tendered_at of this V1Tender.

        The time when the tender was created, in ISO 8601 format.

        :return: The tendered_at of this V1Tender.
        :rtype: str
        """
        return self._tendered_at

    @tendered_at.setter
    def tendered_at(self, tendered_at):
        """Sets the tendered_at of this V1Tender.

        The time when the tender was created, in ISO 8601 format.

        :param tendered_at: The tendered_at of this V1Tender.
        :type tendered_at: str
        """

        self._tendered_at = tendered_at

    @property
    def tendered_money(self):
        """Gets the tendered_money of this V1Tender.


        :return: The tendered_money of this V1Tender.
        :rtype: V1Money
        """
        return self._tendered_money

    @tendered_money.setter
    def tendered_money(self, tendered_money):
        """Sets the tendered_money of this V1Tender.


        :param tendered_money: The tendered_money of this V1Tender.
        :type tendered_money: V1Money
        """

        self._tendered_money = tendered_money

    @property
    def total_money(self):
        """Gets the total_money of this V1Tender.


        :return: The total_money of this V1Tender.
        :rtype: V1Money
        """
        return self._total_money

    @total_money.setter
    def total_money(self, total_money):
        """Sets the total_money of this V1Tender.


        :param total_money: The total_money of this V1Tender.
        :type total_money: V1Money
        """

        self._total_money = total_money

    @property
    def type(self):
        """Gets the type of this V1Tender.

        The type of tender.

        :return: The type of this V1Tender.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1Tender.

        The type of tender.

        :param type: The type of this V1Tender.
        :type type: str
        """

        self._type = type
