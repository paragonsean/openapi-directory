# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.measurement_unit_custom import MeasurementUnitCustom
from openapi_server import util


class MeasurementUnit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area_unit: str=None, custom_unit: MeasurementUnitCustom=None, generic_unit: str=None, length_unit: str=None, time_unit: str=None, type: str=None, volume_unit: str=None, weight_unit: str=None):
        """MeasurementUnit - a model defined in OpenAPI

        :param area_unit: The area_unit of this MeasurementUnit.
        :param custom_unit: The custom_unit of this MeasurementUnit.
        :param generic_unit: The generic_unit of this MeasurementUnit.
        :param length_unit: The length_unit of this MeasurementUnit.
        :param time_unit: The time_unit of this MeasurementUnit.
        :param type: The type of this MeasurementUnit.
        :param volume_unit: The volume_unit of this MeasurementUnit.
        :param weight_unit: The weight_unit of this MeasurementUnit.
        """
        self.openapi_types = {
            'area_unit': str,
            'custom_unit': MeasurementUnitCustom,
            'generic_unit': str,
            'length_unit': str,
            'time_unit': str,
            'type': str,
            'volume_unit': str,
            'weight_unit': str
        }

        self.attribute_map = {
            'area_unit': 'area_unit',
            'custom_unit': 'custom_unit',
            'generic_unit': 'generic_unit',
            'length_unit': 'length_unit',
            'time_unit': 'time_unit',
            'type': 'type',
            'volume_unit': 'volume_unit',
            'weight_unit': 'weight_unit'
        }

        self._area_unit = area_unit
        self._custom_unit = custom_unit
        self._generic_unit = generic_unit
        self._length_unit = length_unit
        self._time_unit = time_unit
        self._type = type
        self._volume_unit = volume_unit
        self._weight_unit = weight_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeasurementUnit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MeasurementUnit of this MeasurementUnit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area_unit(self):
        """Gets the area_unit of this MeasurementUnit.

        Represents a standard area unit.

        :return: The area_unit of this MeasurementUnit.
        :rtype: str
        """
        return self._area_unit

    @area_unit.setter
    def area_unit(self, area_unit):
        """Sets the area_unit of this MeasurementUnit.

        Represents a standard area unit.

        :param area_unit: The area_unit of this MeasurementUnit.
        :type area_unit: str
        """

        self._area_unit = area_unit

    @property
    def custom_unit(self):
        """Gets the custom_unit of this MeasurementUnit.


        :return: The custom_unit of this MeasurementUnit.
        :rtype: MeasurementUnitCustom
        """
        return self._custom_unit

    @custom_unit.setter
    def custom_unit(self, custom_unit):
        """Sets the custom_unit of this MeasurementUnit.


        :param custom_unit: The custom_unit of this MeasurementUnit.
        :type custom_unit: MeasurementUnitCustom
        """

        self._custom_unit = custom_unit

    @property
    def generic_unit(self):
        """Gets the generic_unit of this MeasurementUnit.

        Reserved for API integrations that lack the ability to specify a real measurement unit

        :return: The generic_unit of this MeasurementUnit.
        :rtype: str
        """
        return self._generic_unit

    @generic_unit.setter
    def generic_unit(self, generic_unit):
        """Sets the generic_unit of this MeasurementUnit.

        Reserved for API integrations that lack the ability to specify a real measurement unit

        :param generic_unit: The generic_unit of this MeasurementUnit.
        :type generic_unit: str
        """

        self._generic_unit = generic_unit

    @property
    def length_unit(self):
        """Gets the length_unit of this MeasurementUnit.

        Represents a standard length unit.

        :return: The length_unit of this MeasurementUnit.
        :rtype: str
        """
        return self._length_unit

    @length_unit.setter
    def length_unit(self, length_unit):
        """Sets the length_unit of this MeasurementUnit.

        Represents a standard length unit.

        :param length_unit: The length_unit of this MeasurementUnit.
        :type length_unit: str
        """

        self._length_unit = length_unit

    @property
    def time_unit(self):
        """Gets the time_unit of this MeasurementUnit.

        Represents a standard unit of time.

        :return: The time_unit of this MeasurementUnit.
        :rtype: str
        """
        return self._time_unit

    @time_unit.setter
    def time_unit(self, time_unit):
        """Sets the time_unit of this MeasurementUnit.

        Represents a standard unit of time.

        :param time_unit: The time_unit of this MeasurementUnit.
        :type time_unit: str
        """

        self._time_unit = time_unit

    @property
    def type(self):
        """Gets the type of this MeasurementUnit.

        Represents the type of the measurement unit.

        :return: The type of this MeasurementUnit.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MeasurementUnit.

        Represents the type of the measurement unit.

        :param type: The type of this MeasurementUnit.
        :type type: str
        """

        self._type = type

    @property
    def volume_unit(self):
        """Gets the volume_unit of this MeasurementUnit.

        Represents a standard volume unit.

        :return: The volume_unit of this MeasurementUnit.
        :rtype: str
        """
        return self._volume_unit

    @volume_unit.setter
    def volume_unit(self, volume_unit):
        """Sets the volume_unit of this MeasurementUnit.

        Represents a standard volume unit.

        :param volume_unit: The volume_unit of this MeasurementUnit.
        :type volume_unit: str
        """

        self._volume_unit = volume_unit

    @property
    def weight_unit(self):
        """Gets the weight_unit of this MeasurementUnit.

        Represents a standard unit of weight or mass.

        :return: The weight_unit of this MeasurementUnit.
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this MeasurementUnit.

        Represents a standard unit of weight or mass.

        :param weight_unit: The weight_unit of this MeasurementUnit.
        :type weight_unit: str
        """

        self._weight_unit = weight_unit
