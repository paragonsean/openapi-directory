# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_object_batch import CatalogObjectBatch
from openapi_server import util


class BatchUpsertCatalogObjectsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batches: List[CatalogObjectBatch]=None, idempotency_key: str=None):
        """BatchUpsertCatalogObjectsRequest - a model defined in OpenAPI

        :param batches: The batches of this BatchUpsertCatalogObjectsRequest.
        :param idempotency_key: The idempotency_key of this BatchUpsertCatalogObjectsRequest.
        """
        self.openapi_types = {
            'batches': List[CatalogObjectBatch],
            'idempotency_key': str
        }

        self.attribute_map = {
            'batches': 'batches',
            'idempotency_key': 'idempotency_key'
        }

        self._batches = batches
        self._idempotency_key = idempotency_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchUpsertCatalogObjectsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchUpsertCatalogObjectsRequest of this BatchUpsertCatalogObjectsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batches(self):
        """Gets the batches of this BatchUpsertCatalogObjectsRequest.

        A batch of CatalogObjects to be inserted/updated atomically. The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error in one batch will not affect other batches within the same request.  For each object, its `updated_at` field is ignored and replaced with a current [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), and its `is_deleted` field must not be set to `true`.  To modify an existing object, supply its ID. To create a new object, use an ID starting with `#`. These IDs may be used to create relationships between an object and attributes of other objects that reference it. For example, you can create a CatalogItem with ID `#ABC` and a CatalogItemVariation with its `item_id` attribute set to `#ABC` in order to associate the CatalogItemVariation with its parent CatalogItem.  Any `#`-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.  Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will be inserted or updated.

        :return: The batches of this BatchUpsertCatalogObjectsRequest.
        :rtype: List[CatalogObjectBatch]
        """
        return self._batches

    @batches.setter
    def batches(self, batches):
        """Sets the batches of this BatchUpsertCatalogObjectsRequest.

        A batch of CatalogObjects to be inserted/updated atomically. The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error in one batch will not affect other batches within the same request.  For each object, its `updated_at` field is ignored and replaced with a current [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), and its `is_deleted` field must not be set to `true`.  To modify an existing object, supply its ID. To create a new object, use an ID starting with `#`. These IDs may be used to create relationships between an object and attributes of other objects that reference it. For example, you can create a CatalogItem with ID `#ABC` and a CatalogItemVariation with its `item_id` attribute set to `#ABC` in order to associate the CatalogItemVariation with its parent CatalogItem.  Any `#`-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.  Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will be inserted or updated.

        :param batches: The batches of this BatchUpsertCatalogObjectsRequest.
        :type batches: List[CatalogObjectBatch]
        """
        if batches is None:
            raise ValueError("Invalid value for `batches`, must not be `None`")

        self._batches = batches

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this BatchUpsertCatalogObjectsRequest.

        A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you're unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.

        :return: The idempotency_key of this BatchUpsertCatalogObjectsRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this BatchUpsertCatalogObjectsRequest.

        A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you're unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.

        :param idempotency_key: The idempotency_key of this BatchUpsertCatalogObjectsRequest.
        :type idempotency_key: str
        """
        if idempotency_key is None:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if idempotency_key is not None and len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key
