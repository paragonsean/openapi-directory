# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.shift import Shift
from openapi_server import util


class CreateShiftRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, idempotency_key: str=None, shift: Shift=None):
        """CreateShiftRequest - a model defined in OpenAPI

        :param idempotency_key: The idempotency_key of this CreateShiftRequest.
        :param shift: The shift of this CreateShiftRequest.
        """
        self.openapi_types = {
            'idempotency_key': str,
            'shift': Shift
        }

        self.attribute_map = {
            'idempotency_key': 'idempotency_key',
            'shift': 'shift'
        }

        self._idempotency_key = idempotency_key
        self._shift = shift

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateShiftRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateShiftRequest of this CreateShiftRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this CreateShiftRequest.

        A unique string value to ensure the idempotency of the operation.

        :return: The idempotency_key of this CreateShiftRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this CreateShiftRequest.

        A unique string value to ensure the idempotency of the operation.

        :param idempotency_key: The idempotency_key of this CreateShiftRequest.
        :type idempotency_key: str
        """
        if idempotency_key is not None and len(idempotency_key) > 128:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `128`")

        self._idempotency_key = idempotency_key

    @property
    def shift(self):
        """Gets the shift of this CreateShiftRequest.


        :return: The shift of this CreateShiftRequest.
        :rtype: Shift
        """
        return self._shift

    @shift.setter
    def shift(self, shift):
        """Sets the shift of this CreateShiftRequest.


        :param shift: The shift of this CreateShiftRequest.
        :type shift: Shift
        """
        if shift is None:
            raise ValueError("Invalid value for `shift`, must not be `None`")

        self._shift = shift
