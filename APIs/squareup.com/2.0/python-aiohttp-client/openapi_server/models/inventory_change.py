# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_measurement_unit import CatalogMeasurementUnit
from openapi_server.models.inventory_adjustment import InventoryAdjustment
from openapi_server.models.inventory_physical_count import InventoryPhysicalCount
from openapi_server.models.inventory_transfer import InventoryTransfer
from openapi_server import util


class InventoryChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjustment: InventoryAdjustment=None, measurement_unit: CatalogMeasurementUnit=None, measurement_unit_id: str=None, physical_count: InventoryPhysicalCount=None, transfer: InventoryTransfer=None, type: str=None):
        """InventoryChange - a model defined in OpenAPI

        :param adjustment: The adjustment of this InventoryChange.
        :param measurement_unit: The measurement_unit of this InventoryChange.
        :param measurement_unit_id: The measurement_unit_id of this InventoryChange.
        :param physical_count: The physical_count of this InventoryChange.
        :param transfer: The transfer of this InventoryChange.
        :param type: The type of this InventoryChange.
        """
        self.openapi_types = {
            'adjustment': InventoryAdjustment,
            'measurement_unit': CatalogMeasurementUnit,
            'measurement_unit_id': str,
            'physical_count': InventoryPhysicalCount,
            'transfer': InventoryTransfer,
            'type': str
        }

        self.attribute_map = {
            'adjustment': 'adjustment',
            'measurement_unit': 'measurement_unit',
            'measurement_unit_id': 'measurement_unit_id',
            'physical_count': 'physical_count',
            'transfer': 'transfer',
            'type': 'type'
        }

        self._adjustment = adjustment
        self._measurement_unit = measurement_unit
        self._measurement_unit_id = measurement_unit_id
        self._physical_count = physical_count
        self._transfer = transfer
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InventoryChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InventoryChange of this InventoryChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjustment(self):
        """Gets the adjustment of this InventoryChange.


        :return: The adjustment of this InventoryChange.
        :rtype: InventoryAdjustment
        """
        return self._adjustment

    @adjustment.setter
    def adjustment(self, adjustment):
        """Sets the adjustment of this InventoryChange.


        :param adjustment: The adjustment of this InventoryChange.
        :type adjustment: InventoryAdjustment
        """

        self._adjustment = adjustment

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this InventoryChange.


        :return: The measurement_unit of this InventoryChange.
        :rtype: CatalogMeasurementUnit
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this InventoryChange.


        :param measurement_unit: The measurement_unit of this InventoryChange.
        :type measurement_unit: CatalogMeasurementUnit
        """

        self._measurement_unit = measurement_unit

    @property
    def measurement_unit_id(self):
        """Gets the measurement_unit_id of this InventoryChange.

        The ID of the [CatalogMeasurementUnit](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogMeasurementUnit) object representing the catalog measurement unit associated with the inventory change.

        :return: The measurement_unit_id of this InventoryChange.
        :rtype: str
        """
        return self._measurement_unit_id

    @measurement_unit_id.setter
    def measurement_unit_id(self, measurement_unit_id):
        """Sets the measurement_unit_id of this InventoryChange.

        The ID of the [CatalogMeasurementUnit](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogMeasurementUnit) object representing the catalog measurement unit associated with the inventory change.

        :param measurement_unit_id: The measurement_unit_id of this InventoryChange.
        :type measurement_unit_id: str
        """

        self._measurement_unit_id = measurement_unit_id

    @property
    def physical_count(self):
        """Gets the physical_count of this InventoryChange.


        :return: The physical_count of this InventoryChange.
        :rtype: InventoryPhysicalCount
        """
        return self._physical_count

    @physical_count.setter
    def physical_count(self, physical_count):
        """Sets the physical_count of this InventoryChange.


        :param physical_count: The physical_count of this InventoryChange.
        :type physical_count: InventoryPhysicalCount
        """

        self._physical_count = physical_count

    @property
    def transfer(self):
        """Gets the transfer of this InventoryChange.


        :return: The transfer of this InventoryChange.
        :rtype: InventoryTransfer
        """
        return self._transfer

    @transfer.setter
    def transfer(self, transfer):
        """Sets the transfer of this InventoryChange.


        :param transfer: The transfer of this InventoryChange.
        :type transfer: InventoryTransfer
        """

        self._transfer = transfer

    @property
    def type(self):
        """Gets the type of this InventoryChange.

        Indicates how the inventory change is applied. See [InventoryChangeType](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryChangeType) for all possible values.

        :return: The type of this InventoryChange.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InventoryChange.

        Indicates how the inventory change is applied. See [InventoryChangeType](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryChangeType) for all possible values.

        :param type: The type of this InventoryChange.
        :type type: str
        """

        self._type = type
