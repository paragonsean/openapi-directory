# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server.models.processing_fee import ProcessingFee
from openapi_server import util


class PaymentRefund(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: Money=None, app_fee_money: Money=None, created_at: str=None, id: str=None, location_id: str=None, order_id: str=None, payment_id: str=None, processing_fee: List[ProcessingFee]=None, reason: str=None, status: str=None, updated_at: str=None):
        """PaymentRefund - a model defined in OpenAPI

        :param amount_money: The amount_money of this PaymentRefund.
        :param app_fee_money: The app_fee_money of this PaymentRefund.
        :param created_at: The created_at of this PaymentRefund.
        :param id: The id of this PaymentRefund.
        :param location_id: The location_id of this PaymentRefund.
        :param order_id: The order_id of this PaymentRefund.
        :param payment_id: The payment_id of this PaymentRefund.
        :param processing_fee: The processing_fee of this PaymentRefund.
        :param reason: The reason of this PaymentRefund.
        :param status: The status of this PaymentRefund.
        :param updated_at: The updated_at of this PaymentRefund.
        """
        self.openapi_types = {
            'amount_money': Money,
            'app_fee_money': Money,
            'created_at': str,
            'id': str,
            'location_id': str,
            'order_id': str,
            'payment_id': str,
            'processing_fee': List[ProcessingFee],
            'reason': str,
            'status': str,
            'updated_at': str
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'app_fee_money': 'app_fee_money',
            'created_at': 'created_at',
            'id': 'id',
            'location_id': 'location_id',
            'order_id': 'order_id',
            'payment_id': 'payment_id',
            'processing_fee': 'processing_fee',
            'reason': 'reason',
            'status': 'status',
            'updated_at': 'updated_at'
        }

        self._amount_money = amount_money
        self._app_fee_money = app_fee_money
        self._created_at = created_at
        self._id = id
        self._location_id = location_id
        self._order_id = order_id
        self._payment_id = payment_id
        self._processing_fee = processing_fee
        self._reason = reason
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentRefund':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentRefund of this PaymentRefund.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this PaymentRefund.


        :return: The amount_money of this PaymentRefund.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this PaymentRefund.


        :param amount_money: The amount_money of this PaymentRefund.
        :type amount_money: Money
        """
        if amount_money is None:
            raise ValueError("Invalid value for `amount_money`, must not be `None`")

        self._amount_money = amount_money

    @property
    def app_fee_money(self):
        """Gets the app_fee_money of this PaymentRefund.


        :return: The app_fee_money of this PaymentRefund.
        :rtype: Money
        """
        return self._app_fee_money

    @app_fee_money.setter
    def app_fee_money(self, app_fee_money):
        """Sets the app_fee_money of this PaymentRefund.


        :param app_fee_money: The app_fee_money of this PaymentRefund.
        :type app_fee_money: Money
        """

        self._app_fee_money = app_fee_money

    @property
    def created_at(self):
        """Gets the created_at of this PaymentRefund.

        The timestamp of when the refund was created, in RFC 3339 format.

        :return: The created_at of this PaymentRefund.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PaymentRefund.

        The timestamp of when the refund was created, in RFC 3339 format.

        :param created_at: The created_at of this PaymentRefund.
        :type created_at: str
        """
        if created_at is not None and len(created_at) > 32:
            raise ValueError("Invalid value for `created_at`, length must be less than or equal to `32`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this PaymentRefund.

        The unique ID for this refund, generated by Square.

        :return: The id of this PaymentRefund.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentRefund.

        The unique ID for this refund, generated by Square.

        :param id: The id of this PaymentRefund.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this PaymentRefund.

        The location ID associated with the payment this refund is attached to.

        :return: The location_id of this PaymentRefund.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this PaymentRefund.

        The location ID associated with the payment this refund is attached to.

        :param location_id: The location_id of this PaymentRefund.
        :type location_id: str
        """
        if location_id is not None and len(location_id) > 50:
            raise ValueError("Invalid value for `location_id`, length must be less than or equal to `50`")

        self._location_id = location_id

    @property
    def order_id(self):
        """Gets the order_id of this PaymentRefund.

        The ID of the order associated with the refund.

        :return: The order_id of this PaymentRefund.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PaymentRefund.

        The ID of the order associated with the refund.

        :param order_id: The order_id of this PaymentRefund.
        :type order_id: str
        """
        if order_id is not None and len(order_id) > 192:
            raise ValueError("Invalid value for `order_id`, length must be less than or equal to `192`")

        self._order_id = order_id

    @property
    def payment_id(self):
        """Gets the payment_id of this PaymentRefund.

        The ID of the payment associated with this refund.

        :return: The payment_id of this PaymentRefund.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PaymentRefund.

        The ID of the payment associated with this refund.

        :param payment_id: The payment_id of this PaymentRefund.
        :type payment_id: str
        """
        if payment_id is not None and len(payment_id) > 192:
            raise ValueError("Invalid value for `payment_id`, length must be less than or equal to `192`")

        self._payment_id = payment_id

    @property
    def processing_fee(self):
        """Gets the processing_fee of this PaymentRefund.

        Processing fees and fee adjustments assessed by Square for this refund.

        :return: The processing_fee of this PaymentRefund.
        :rtype: List[ProcessingFee]
        """
        return self._processing_fee

    @processing_fee.setter
    def processing_fee(self, processing_fee):
        """Sets the processing_fee of this PaymentRefund.

        Processing fees and fee adjustments assessed by Square for this refund.

        :param processing_fee: The processing_fee of this PaymentRefund.
        :type processing_fee: List[ProcessingFee]
        """

        self._processing_fee = processing_fee

    @property
    def reason(self):
        """Gets the reason of this PaymentRefund.

        The reason for the refund.

        :return: The reason of this PaymentRefund.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this PaymentRefund.

        The reason for the refund.

        :param reason: The reason of this PaymentRefund.
        :type reason: str
        """
        if reason is not None and len(reason) > 192:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `192`")

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this PaymentRefund.

        The refund's status: - `PENDING` - Awaiting approval. - `COMPLETED` - Successfully completed. - `REJECTED` - The refund was rejected. - `FAILED` - An error occurred.

        :return: The status of this PaymentRefund.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentRefund.

        The refund's status: - `PENDING` - Awaiting approval. - `COMPLETED` - Successfully completed. - `REJECTED` - The refund was rejected. - `FAILED` - An error occurred.

        :param status: The status of this PaymentRefund.
        :type status: str
        """
        if status is not None and len(status) > 50:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `50`")

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this PaymentRefund.

        The timestamp of when the refund was last updated, in RFC 3339 format.

        :return: The updated_at of this PaymentRefund.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PaymentRefund.

        The timestamp of when the refund was last updated, in RFC 3339 format.

        :param updated_at: The updated_at of this PaymentRefund.
        :type updated_at: str
        """
        if updated_at is not None and len(updated_at) > 32:
            raise ValueError("Invalid value for `updated_at`, length must be less than or equal to `32`")

        self._updated_at = updated_at
