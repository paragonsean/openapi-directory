# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order import Order
from openapi_server.models.order_reward import OrderReward
from openapi_server import util


class CalculateOrderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, order: Order=None, proposed_rewards: List[OrderReward]=None):
        """CalculateOrderRequest - a model defined in OpenAPI

        :param order: The order of this CalculateOrderRequest.
        :param proposed_rewards: The proposed_rewards of this CalculateOrderRequest.
        """
        self.openapi_types = {
            'order': Order,
            'proposed_rewards': List[OrderReward]
        }

        self.attribute_map = {
            'order': 'order',
            'proposed_rewards': 'proposed_rewards'
        }

        self._order = order
        self._proposed_rewards = proposed_rewards

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculateOrderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalculateOrderRequest of this CalculateOrderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def order(self):
        """Gets the order of this CalculateOrderRequest.


        :return: The order of this CalculateOrderRequest.
        :rtype: Order
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CalculateOrderRequest.


        :param order: The order of this CalculateOrderRequest.
        :type order: Order
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")

        self._order = order

    @property
    def proposed_rewards(self):
        """Gets the proposed_rewards of this CalculateOrderRequest.

        Identifies one or more loyalty reward tiers to apply during the order calculation. The discounts defined by the reward tiers are added to the order only to preview the effect of applying the specified rewards. The rewards do not correspond to actual redemptions; that is, no `reward`s are created. Therefore, the reward `id`s are random strings used only to reference the reward tier.

        :return: The proposed_rewards of this CalculateOrderRequest.
        :rtype: List[OrderReward]
        """
        return self._proposed_rewards

    @proposed_rewards.setter
    def proposed_rewards(self, proposed_rewards):
        """Sets the proposed_rewards of this CalculateOrderRequest.

        Identifies one or more loyalty reward tiers to apply during the order calculation. The discounts defined by the reward tiers are added to the order only to preview the effect of applying the specified rewards. The rewards do not correspond to actual redemptions; that is, no `reward`s are created. Therefore, the reward `id`s are random strings used only to reference the reward tier.

        :param proposed_rewards: The proposed_rewards of this CalculateOrderRequest.
        :type proposed_rewards: List[OrderReward]
        """

        self._proposed_rewards = proposed_rewards
