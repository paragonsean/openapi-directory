# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisputedPayment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payment_id: str=None):
        """DisputedPayment - a model defined in OpenAPI

        :param payment_id: The payment_id of this DisputedPayment.
        """
        self.openapi_types = {
            'payment_id': str
        }

        self.attribute_map = {
            'payment_id': 'payment_id'
        }

        self._payment_id = payment_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisputedPayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisputedPayment of this DisputedPayment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payment_id(self):
        """Gets the payment_id of this DisputedPayment.

        Square-generated unique ID of the payment being disputed.

        :return: The payment_id of this DisputedPayment.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this DisputedPayment.

        Square-generated unique ID of the payment being disputed.

        :param payment_id: The payment_id of this DisputedPayment.
        :type payment_id: str
        """
        if payment_id is not None and len(payment_id) > 192:
            raise ValueError("Invalid value for `payment_id`, length must be less than or equal to `192`")
        if payment_id is not None and len(payment_id) < 1:
            raise ValueError("Invalid value for `payment_id`, length must be greater than or equal to `1`")

        self._payment_id = payment_id
