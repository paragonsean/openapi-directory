# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ObtainTokenResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, expires_at: str=None, id_token: str=None, merchant_id: str=None, plan_id: str=None, refresh_token: str=None, short_lived: bool=None, subscription_id: str=None, token_type: str=None):
        """ObtainTokenResponse - a model defined in OpenAPI

        :param access_token: The access_token of this ObtainTokenResponse.
        :param expires_at: The expires_at of this ObtainTokenResponse.
        :param id_token: The id_token of this ObtainTokenResponse.
        :param merchant_id: The merchant_id of this ObtainTokenResponse.
        :param plan_id: The plan_id of this ObtainTokenResponse.
        :param refresh_token: The refresh_token of this ObtainTokenResponse.
        :param short_lived: The short_lived of this ObtainTokenResponse.
        :param subscription_id: The subscription_id of this ObtainTokenResponse.
        :param token_type: The token_type of this ObtainTokenResponse.
        """
        self.openapi_types = {
            'access_token': str,
            'expires_at': str,
            'id_token': str,
            'merchant_id': str,
            'plan_id': str,
            'refresh_token': str,
            'short_lived': bool,
            'subscription_id': str,
            'token_type': str
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'expires_at': 'expires_at',
            'id_token': 'id_token',
            'merchant_id': 'merchant_id',
            'plan_id': 'plan_id',
            'refresh_token': 'refresh_token',
            'short_lived': 'short_lived',
            'subscription_id': 'subscription_id',
            'token_type': 'token_type'
        }

        self._access_token = access_token
        self._expires_at = expires_at
        self._id_token = id_token
        self._merchant_id = merchant_id
        self._plan_id = plan_id
        self._refresh_token = refresh_token
        self._short_lived = short_lived
        self._subscription_id = subscription_id
        self._token_type = token_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObtainTokenResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObtainTokenResponse of this ObtainTokenResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this ObtainTokenResponse.

        A valid OAuth access token. OAuth access tokens are 64 bytes long. Provide the access token in a header with every request to Connect API endpoints. See [OAuth API: Walkthrough](https://developer.squareup.com/docs/oauth-api/walkthrough) for more information.

        :return: The access_token of this ObtainTokenResponse.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this ObtainTokenResponse.

        A valid OAuth access token. OAuth access tokens are 64 bytes long. Provide the access token in a header with every request to Connect API endpoints. See [OAuth API: Walkthrough](https://developer.squareup.com/docs/oauth-api/walkthrough) for more information.

        :param access_token: The access_token of this ObtainTokenResponse.
        :type access_token: str
        """
        if access_token is not None and len(access_token) > 1024:
            raise ValueError("Invalid value for `access_token`, length must be less than or equal to `1024`")
        if access_token is not None and len(access_token) < 2:
            raise ValueError("Invalid value for `access_token`, length must be greater than or equal to `2`")

        self._access_token = access_token

    @property
    def expires_at(self):
        """Gets the expires_at of this ObtainTokenResponse.

        The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.

        :return: The expires_at of this ObtainTokenResponse.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this ObtainTokenResponse.

        The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.

        :param expires_at: The expires_at of this ObtainTokenResponse.
        :type expires_at: str
        """
        if expires_at is not None and len(expires_at) > 48:
            raise ValueError("Invalid value for `expires_at`, length must be less than or equal to `48`")
        if expires_at is not None and len(expires_at) < 20:
            raise ValueError("Invalid value for `expires_at`, length must be greater than or equal to `20`")

        self._expires_at = expires_at

    @property
    def id_token(self):
        """Gets the id_token of this ObtainTokenResponse.

        Then OpenID token belonging to this this person. Only present if the OPENID scope is included in the authorize request.

        :return: The id_token of this ObtainTokenResponse.
        :rtype: str
        """
        return self._id_token

    @id_token.setter
    def id_token(self, id_token):
        """Sets the id_token of this ObtainTokenResponse.

        Then OpenID token belonging to this this person. Only present if the OPENID scope is included in the authorize request.

        :param id_token: The id_token of this ObtainTokenResponse.
        :type id_token: str
        """

        self._id_token = id_token

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ObtainTokenResponse.

        The ID of the authorizing merchant's business.

        :return: The merchant_id of this ObtainTokenResponse.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ObtainTokenResponse.

        The ID of the authorizing merchant's business.

        :param merchant_id: The merchant_id of this ObtainTokenResponse.
        :type merchant_id: str
        """
        if merchant_id is not None and len(merchant_id) > 191:
            raise ValueError("Invalid value for `merchant_id`, length must be less than or equal to `191`")
        if merchant_id is not None and len(merchant_id) < 8:
            raise ValueError("Invalid value for `merchant_id`, length must be greater than or equal to `8`")

        self._merchant_id = merchant_id

    @property
    def plan_id(self):
        """Gets the plan_id of this ObtainTokenResponse.

        __LEGACY FIELD__. The ID of the subscription plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization.

        :return: The plan_id of this ObtainTokenResponse.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this ObtainTokenResponse.

        __LEGACY FIELD__. The ID of the subscription plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization.

        :param plan_id: The plan_id of this ObtainTokenResponse.
        :type plan_id: str
        """

        self._plan_id = plan_id

    @property
    def refresh_token(self):
        """Gets the refresh_token of this ObtainTokenResponse.

        A refresh token. OAuth refresh tokens are 64 bytes long. For more information, see [OAuth access token management](https://developer.squareup.com/docs/oauth-api/how-it-works#oauth-access-token-management).

        :return: The refresh_token of this ObtainTokenResponse.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this ObtainTokenResponse.

        A refresh token. OAuth refresh tokens are 64 bytes long. For more information, see [OAuth access token management](https://developer.squareup.com/docs/oauth-api/how-it-works#oauth-access-token-management).

        :param refresh_token: The refresh_token of this ObtainTokenResponse.
        :type refresh_token: str
        """
        if refresh_token is not None and len(refresh_token) > 1024:
            raise ValueError("Invalid value for `refresh_token`, length must be less than or equal to `1024`")
        if refresh_token is not None and len(refresh_token) < 2:
            raise ValueError("Invalid value for `refresh_token`, length must be greater than or equal to `2`")

        self._refresh_token = refresh_token

    @property
    def short_lived(self):
        """Gets the short_lived of this ObtainTokenResponse.

        A boolean indicating the access token is a short-lived access token. The short-lived access token returned in the response will expire in 24 hours.

        :return: The short_lived of this ObtainTokenResponse.
        :rtype: bool
        """
        return self._short_lived

    @short_lived.setter
    def short_lived(self, short_lived):
        """Sets the short_lived of this ObtainTokenResponse.

        A boolean indicating the access token is a short-lived access token. The short-lived access token returned in the response will expire in 24 hours.

        :param short_lived: The short_lived of this ObtainTokenResponse.
        :type short_lived: bool
        """

        self._short_lived = short_lived

    @property
    def subscription_id(self):
        """Gets the subscription_id of this ObtainTokenResponse.

        __LEGACY FIELD__. The ID of a subscription plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization.

        :return: The subscription_id of this ObtainTokenResponse.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this ObtainTokenResponse.

        __LEGACY FIELD__. The ID of a subscription plan the merchant signed up for. Only present if the merchant signed up for a subscription during authorization.

        :param subscription_id: The subscription_id of this ObtainTokenResponse.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def token_type(self):
        """Gets the token_type of this ObtainTokenResponse.

        This value is always _bearer_.

        :return: The token_type of this ObtainTokenResponse.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this ObtainTokenResponse.

        This value is always _bearer_.

        :param token_type: The token_type of this ObtainTokenResponse.
        :type token_type: str
        """
        if token_type is not None and len(token_type) > 10:
            raise ValueError("Invalid value for `token_type`, length must be less than or equal to `10`")
        if token_type is not None and len(token_type) < 2:
            raise ValueError("Invalid value for `token_type`, length must be greater than or equal to `2`")

        self._token_type = token_type
