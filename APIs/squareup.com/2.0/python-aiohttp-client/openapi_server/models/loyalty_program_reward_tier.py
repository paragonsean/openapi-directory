# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_object_reference import CatalogObjectReference
from openapi_server.models.loyalty_program_reward_definition import LoyaltyProgramRewardDefinition
from openapi_server import util


class LoyaltyProgramRewardTier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, definition: LoyaltyProgramRewardDefinition=None, id: str=None, name: str=None, points: int=None, pricing_rule_reference: CatalogObjectReference=None):
        """LoyaltyProgramRewardTier - a model defined in OpenAPI

        :param created_at: The created_at of this LoyaltyProgramRewardTier.
        :param definition: The definition of this LoyaltyProgramRewardTier.
        :param id: The id of this LoyaltyProgramRewardTier.
        :param name: The name of this LoyaltyProgramRewardTier.
        :param points: The points of this LoyaltyProgramRewardTier.
        :param pricing_rule_reference: The pricing_rule_reference of this LoyaltyProgramRewardTier.
        """
        self.openapi_types = {
            'created_at': str,
            'definition': LoyaltyProgramRewardDefinition,
            'id': str,
            'name': str,
            'points': int,
            'pricing_rule_reference': CatalogObjectReference
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'definition': 'definition',
            'id': 'id',
            'name': 'name',
            'points': 'points',
            'pricing_rule_reference': 'pricing_rule_reference'
        }

        self._created_at = created_at
        self._definition = definition
        self._id = id
        self._name = name
        self._points = points
        self._pricing_rule_reference = pricing_rule_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyProgramRewardTier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyProgramRewardTier of this LoyaltyProgramRewardTier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this LoyaltyProgramRewardTier.

        The timestamp when the reward tier was created, in RFC 3339 format.

        :return: The created_at of this LoyaltyProgramRewardTier.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LoyaltyProgramRewardTier.

        The timestamp when the reward tier was created, in RFC 3339 format.

        :param created_at: The created_at of this LoyaltyProgramRewardTier.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def definition(self):
        """Gets the definition of this LoyaltyProgramRewardTier.


        :return: The definition of this LoyaltyProgramRewardTier.
        :rtype: LoyaltyProgramRewardDefinition
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this LoyaltyProgramRewardTier.


        :param definition: The definition of this LoyaltyProgramRewardTier.
        :type definition: LoyaltyProgramRewardDefinition
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")

        self._definition = definition

    @property
    def id(self):
        """Gets the id of this LoyaltyProgramRewardTier.

        The Square-assigned ID of the reward tier.

        :return: The id of this LoyaltyProgramRewardTier.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoyaltyProgramRewardTier.

        The Square-assigned ID of the reward tier.

        :param id: The id of this LoyaltyProgramRewardTier.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 36:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `36`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this LoyaltyProgramRewardTier.

        The name of the reward tier.

        :return: The name of this LoyaltyProgramRewardTier.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoyaltyProgramRewardTier.

        The name of the reward tier.

        :param name: The name of this LoyaltyProgramRewardTier.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def points(self):
        """Gets the points of this LoyaltyProgramRewardTier.

        The points exchanged for the reward tier.

        :return: The points of this LoyaltyProgramRewardTier.
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this LoyaltyProgramRewardTier.

        The points exchanged for the reward tier.

        :param points: The points of this LoyaltyProgramRewardTier.
        :type points: int
        """
        if points is None:
            raise ValueError("Invalid value for `points`, must not be `None`")
        if points is not None and points < 1:
            raise ValueError("Invalid value for `points`, must be a value greater than or equal to `1`")

        self._points = points

    @property
    def pricing_rule_reference(self):
        """Gets the pricing_rule_reference of this LoyaltyProgramRewardTier.


        :return: The pricing_rule_reference of this LoyaltyProgramRewardTier.
        :rtype: CatalogObjectReference
        """
        return self._pricing_rule_reference

    @pricing_rule_reference.setter
    def pricing_rule_reference(self, pricing_rule_reference):
        """Sets the pricing_rule_reference of this LoyaltyProgramRewardTier.


        :param pricing_rule_reference: The pricing_rule_reference of this LoyaltyProgramRewardTier.
        :type pricing_rule_reference: CatalogObjectReference
        """

        self._pricing_rule_reference = pricing_rule_reference
