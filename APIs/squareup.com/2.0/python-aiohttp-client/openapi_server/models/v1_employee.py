# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class V1Employee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorized_location_ids: List[str]=None, created_at: str=None, email: str=None, external_id: str=None, first_name: str=None, id: str=None, last_name: str=None, role_ids: List[str]=None, status: str=None, updated_at: str=None):
        """V1Employee - a model defined in OpenAPI

        :param authorized_location_ids: The authorized_location_ids of this V1Employee.
        :param created_at: The created_at of this V1Employee.
        :param email: The email of this V1Employee.
        :param external_id: The external_id of this V1Employee.
        :param first_name: The first_name of this V1Employee.
        :param id: The id of this V1Employee.
        :param last_name: The last_name of this V1Employee.
        :param role_ids: The role_ids of this V1Employee.
        :param status: The status of this V1Employee.
        :param updated_at: The updated_at of this V1Employee.
        """
        self.openapi_types = {
            'authorized_location_ids': List[str],
            'created_at': str,
            'email': str,
            'external_id': str,
            'first_name': str,
            'id': str,
            'last_name': str,
            'role_ids': List[str],
            'status': str,
            'updated_at': str
        }

        self.attribute_map = {
            'authorized_location_ids': 'authorized_location_ids',
            'created_at': 'created_at',
            'email': 'email',
            'external_id': 'external_id',
            'first_name': 'first_name',
            'id': 'id',
            'last_name': 'last_name',
            'role_ids': 'role_ids',
            'status': 'status',
            'updated_at': 'updated_at'
        }

        self._authorized_location_ids = authorized_location_ids
        self._created_at = created_at
        self._email = email
        self._external_id = external_id
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._role_ids = role_ids
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V1Employee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V1Employee of this V1Employee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorized_location_ids(self):
        """Gets the authorized_location_ids of this V1Employee.

        The IDs of the locations the employee is allowed to clock in at.

        :return: The authorized_location_ids of this V1Employee.
        :rtype: List[str]
        """
        return self._authorized_location_ids

    @authorized_location_ids.setter
    def authorized_location_ids(self, authorized_location_ids):
        """Sets the authorized_location_ids of this V1Employee.

        The IDs of the locations the employee is allowed to clock in at.

        :param authorized_location_ids: The authorized_location_ids of this V1Employee.
        :type authorized_location_ids: List[str]
        """

        self._authorized_location_ids = authorized_location_ids

    @property
    def created_at(self):
        """Gets the created_at of this V1Employee.

        The time when the employee entity was created, in ISO 8601 format.

        :return: The created_at of this V1Employee.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V1Employee.

        The time when the employee entity was created, in ISO 8601 format.

        :param created_at: The created_at of this V1Employee.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this V1Employee.

        The employee's email address.

        :return: The email of this V1Employee.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this V1Employee.

        The employee's email address.

        :param email: The email of this V1Employee.
        :type email: str
        """

        self._email = email

    @property
    def external_id(self):
        """Gets the external_id of this V1Employee.

        An ID the merchant can set to associate the employee with an entity in another system.

        :return: The external_id of this V1Employee.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this V1Employee.

        An ID the merchant can set to associate the employee with an entity in another system.

        :param external_id: The external_id of this V1Employee.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def first_name(self):
        """Gets the first_name of this V1Employee.

        The employee's first name.

        :return: The first_name of this V1Employee.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this V1Employee.

        The employee's first name.

        :param first_name: The first_name of this V1Employee.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this V1Employee.

        The employee's unique ID.

        :return: The id of this V1Employee.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1Employee.

        The employee's unique ID.

        :param id: The id of this V1Employee.
        :type id: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this V1Employee.

        The employee's last name.

        :return: The last_name of this V1Employee.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this V1Employee.

        The employee's last name.

        :param last_name: The last_name of this V1Employee.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def role_ids(self):
        """Gets the role_ids of this V1Employee.

        The ids of the employee's associated roles. Currently, you can specify only one or zero roles per employee.

        :return: The role_ids of this V1Employee.
        :rtype: List[str]
        """
        return self._role_ids

    @role_ids.setter
    def role_ids(self, role_ids):
        """Sets the role_ids of this V1Employee.

        The ids of the employee's associated roles. Currently, you can specify only one or zero roles per employee.

        :param role_ids: The role_ids of this V1Employee.
        :type role_ids: List[str]
        """

        self._role_ids = role_ids

    @property
    def status(self):
        """Gets the status of this V1Employee.

        Whether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard.

        :return: The status of this V1Employee.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V1Employee.

        Whether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard.

        :param status: The status of this V1Employee.
        :type status: str
        """

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this V1Employee.

        The time when the employee entity was most recently updated, in ISO 8601 format.

        :return: The updated_at of this V1Employee.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this V1Employee.

        The time when the employee entity was most recently updated, in ISO 8601 format.

        :param updated_at: The updated_at of this V1Employee.
        :type updated_at: str
        """

        self._updated_at = updated_at
