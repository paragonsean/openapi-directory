# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvoiceAcceptedPaymentMethods(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bank_account: bool=None, card: bool=None, square_gift_card: bool=None):
        """InvoiceAcceptedPaymentMethods - a model defined in OpenAPI

        :param bank_account: The bank_account of this InvoiceAcceptedPaymentMethods.
        :param card: The card of this InvoiceAcceptedPaymentMethods.
        :param square_gift_card: The square_gift_card of this InvoiceAcceptedPaymentMethods.
        """
        self.openapi_types = {
            'bank_account': bool,
            'card': bool,
            'square_gift_card': bool
        }

        self.attribute_map = {
            'bank_account': 'bank_account',
            'card': 'card',
            'square_gift_card': 'square_gift_card'
        }

        self._bank_account = bank_account
        self._card = card
        self._square_gift_card = square_gift_card

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceAcceptedPaymentMethods':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceAcceptedPaymentMethods of this InvoiceAcceptedPaymentMethods.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bank_account(self):
        """Gets the bank_account of this InvoiceAcceptedPaymentMethods.

        Indicates whether bank transfer payments are accepted. The default value is `false`.  This option is allowed only for invoices that have a single payment request of type `BALANCE`.

        :return: The bank_account of this InvoiceAcceptedPaymentMethods.
        :rtype: bool
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this InvoiceAcceptedPaymentMethods.

        Indicates whether bank transfer payments are accepted. The default value is `false`.  This option is allowed only for invoices that have a single payment request of type `BALANCE`.

        :param bank_account: The bank_account of this InvoiceAcceptedPaymentMethods.
        :type bank_account: bool
        """

        self._bank_account = bank_account

    @property
    def card(self):
        """Gets the card of this InvoiceAcceptedPaymentMethods.

        Indicates whether credit card or debit card payments are accepted. The default value is `false`.

        :return: The card of this InvoiceAcceptedPaymentMethods.
        :rtype: bool
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this InvoiceAcceptedPaymentMethods.

        Indicates whether credit card or debit card payments are accepted. The default value is `false`.

        :param card: The card of this InvoiceAcceptedPaymentMethods.
        :type card: bool
        """

        self._card = card

    @property
    def square_gift_card(self):
        """Gets the square_gift_card of this InvoiceAcceptedPaymentMethods.

        Indicates whether Square gift card payments are accepted. The default value is `false`.

        :return: The square_gift_card of this InvoiceAcceptedPaymentMethods.
        :rtype: bool
        """
        return self._square_gift_card

    @square_gift_card.setter
    def square_gift_card(self, square_gift_card):
        """Sets the square_gift_card of this InvoiceAcceptedPaymentMethods.

        Indicates whether Square gift card payments are accepted. The default value is `false`.

        :param square_gift_card: The square_gift_card of this InvoiceAcceptedPaymentMethods.
        :type square_gift_card: bool
        """

        self._square_gift_card = square_gift_card
