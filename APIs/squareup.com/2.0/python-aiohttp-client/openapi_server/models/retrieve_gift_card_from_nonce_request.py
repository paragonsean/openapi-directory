# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RetrieveGiftCardFromNonceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nonce: str=None):
        """RetrieveGiftCardFromNonceRequest - a model defined in OpenAPI

        :param nonce: The nonce of this RetrieveGiftCardFromNonceRequest.
        """
        self.openapi_types = {
            'nonce': str
        }

        self.attribute_map = {
            'nonce': 'nonce'
        }

        self._nonce = nonce

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetrieveGiftCardFromNonceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetrieveGiftCardFromNonceRequest of this RetrieveGiftCardFromNonceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nonce(self):
        """Gets the nonce of this RetrieveGiftCardFromNonceRequest.

        The nonce of the gift card to retrieve.

        :return: The nonce of this RetrieveGiftCardFromNonceRequest.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this RetrieveGiftCardFromNonceRequest.

        The nonce of the gift card to retrieve.

        :param nonce: The nonce of this RetrieveGiftCardFromNonceRequest.
        :type nonce: str
        """
        if nonce is None:
            raise ValueError("Invalid value for `nonce`, must not be `None`")
        if nonce is not None and len(nonce) < 1:
            raise ValueError("Invalid value for `nonce`, length must be greater than or equal to `1`")

        self._nonce = nonce
