# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_attribute_filter import CustomAttributeFilter
from openapi_server import util


class SearchCatalogItemsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_ids: List[str]=None, cursor: str=None, custom_attribute_filters: List[CustomAttributeFilter]=None, enabled_location_ids: List[str]=None, limit: int=None, product_types: List[str]=None, sort_order: str=None, stock_levels: List[str]=None, text_filter: str=None):
        """SearchCatalogItemsRequest - a model defined in OpenAPI

        :param category_ids: The category_ids of this SearchCatalogItemsRequest.
        :param cursor: The cursor of this SearchCatalogItemsRequest.
        :param custom_attribute_filters: The custom_attribute_filters of this SearchCatalogItemsRequest.
        :param enabled_location_ids: The enabled_location_ids of this SearchCatalogItemsRequest.
        :param limit: The limit of this SearchCatalogItemsRequest.
        :param product_types: The product_types of this SearchCatalogItemsRequest.
        :param sort_order: The sort_order of this SearchCatalogItemsRequest.
        :param stock_levels: The stock_levels of this SearchCatalogItemsRequest.
        :param text_filter: The text_filter of this SearchCatalogItemsRequest.
        """
        self.openapi_types = {
            'category_ids': List[str],
            'cursor': str,
            'custom_attribute_filters': List[CustomAttributeFilter],
            'enabled_location_ids': List[str],
            'limit': int,
            'product_types': List[str],
            'sort_order': str,
            'stock_levels': List[str],
            'text_filter': str
        }

        self.attribute_map = {
            'category_ids': 'category_ids',
            'cursor': 'cursor',
            'custom_attribute_filters': 'custom_attribute_filters',
            'enabled_location_ids': 'enabled_location_ids',
            'limit': 'limit',
            'product_types': 'product_types',
            'sort_order': 'sort_order',
            'stock_levels': 'stock_levels',
            'text_filter': 'text_filter'
        }

        self._category_ids = category_ids
        self._cursor = cursor
        self._custom_attribute_filters = custom_attribute_filters
        self._enabled_location_ids = enabled_location_ids
        self._limit = limit
        self._product_types = product_types
        self._sort_order = sort_order
        self._stock_levels = stock_levels
        self._text_filter = text_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchCatalogItemsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchCatalogItemsRequest of this SearchCatalogItemsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_ids(self):
        """Gets the category_ids of this SearchCatalogItemsRequest.

        The category id query expression to return items containing the specified category IDs.

        :return: The category_ids of this SearchCatalogItemsRequest.
        :rtype: List[str]
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids):
        """Sets the category_ids of this SearchCatalogItemsRequest.

        The category id query expression to return items containing the specified category IDs.

        :param category_ids: The category_ids of this SearchCatalogItemsRequest.
        :type category_ids: List[str]
        """

        self._category_ids = category_ids

    @property
    def cursor(self):
        """Gets the cursor of this SearchCatalogItemsRequest.

        The pagination token, returned in the previous response, used to fetch the next batch of pending results.

        :return: The cursor of this SearchCatalogItemsRequest.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this SearchCatalogItemsRequest.

        The pagination token, returned in the previous response, used to fetch the next batch of pending results.

        :param cursor: The cursor of this SearchCatalogItemsRequest.
        :type cursor: str
        """

        self._cursor = cursor

    @property
    def custom_attribute_filters(self):
        """Gets the custom_attribute_filters of this SearchCatalogItemsRequest.

        The customer-attribute filter to return items or item variations matching the specified custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in a single call to the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.

        :return: The custom_attribute_filters of this SearchCatalogItemsRequest.
        :rtype: List[CustomAttributeFilter]
        """
        return self._custom_attribute_filters

    @custom_attribute_filters.setter
    def custom_attribute_filters(self, custom_attribute_filters):
        """Sets the custom_attribute_filters of this SearchCatalogItemsRequest.

        The customer-attribute filter to return items or item variations matching the specified custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in a single call to the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.

        :param custom_attribute_filters: The custom_attribute_filters of this SearchCatalogItemsRequest.
        :type custom_attribute_filters: List[CustomAttributeFilter]
        """

        self._custom_attribute_filters = custom_attribute_filters

    @property
    def enabled_location_ids(self):
        """Gets the enabled_location_ids of this SearchCatalogItemsRequest.

        The enabled-location query expression to return items and item variations having specified enabled locations.

        :return: The enabled_location_ids of this SearchCatalogItemsRequest.
        :rtype: List[str]
        """
        return self._enabled_location_ids

    @enabled_location_ids.setter
    def enabled_location_ids(self, enabled_location_ids):
        """Sets the enabled_location_ids of this SearchCatalogItemsRequest.

        The enabled-location query expression to return items and item variations having specified enabled locations.

        :param enabled_location_ids: The enabled_location_ids of this SearchCatalogItemsRequest.
        :type enabled_location_ids: List[str]
        """

        self._enabled_location_ids = enabled_location_ids

    @property
    def limit(self):
        """Gets the limit of this SearchCatalogItemsRequest.

        The maximum number of results to return per page. The default value is 100.

        :return: The limit of this SearchCatalogItemsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchCatalogItemsRequest.

        The maximum number of results to return per page. The default value is 100.

        :param limit: The limit of this SearchCatalogItemsRequest.
        :type limit: int
        """
        if limit is not None and limit > 100:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `100`")

        self._limit = limit

    @property
    def product_types(self):
        """Gets the product_types of this SearchCatalogItemsRequest.

        The product types query expression to return items or item variations having the specified product types.

        :return: The product_types of this SearchCatalogItemsRequest.
        :rtype: List[str]
        """
        return self._product_types

    @product_types.setter
    def product_types(self, product_types):
        """Sets the product_types of this SearchCatalogItemsRequest.

        The product types query expression to return items or item variations having the specified product types.

        :param product_types: The product_types of this SearchCatalogItemsRequest.
        :type product_types: List[str]
        """

        self._product_types = product_types

    @property
    def sort_order(self):
        """Gets the sort_order of this SearchCatalogItemsRequest.

        The order to sort the results by item names. The default sort order is ascending (`ASC`).

        :return: The sort_order of this SearchCatalogItemsRequest.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SearchCatalogItemsRequest.

        The order to sort the results by item names. The default sort order is ascending (`ASC`).

        :param sort_order: The sort_order of this SearchCatalogItemsRequest.
        :type sort_order: str
        """

        self._sort_order = sort_order

    @property
    def stock_levels(self):
        """Gets the stock_levels of this SearchCatalogItemsRequest.

        The stock-level query expression to return item variations with the specified stock levels.

        :return: The stock_levels of this SearchCatalogItemsRequest.
        :rtype: List[str]
        """
        return self._stock_levels

    @stock_levels.setter
    def stock_levels(self, stock_levels):
        """Sets the stock_levels of this SearchCatalogItemsRequest.

        The stock-level query expression to return item variations with the specified stock levels.

        :param stock_levels: The stock_levels of this SearchCatalogItemsRequest.
        :type stock_levels: List[str]
        """

        self._stock_levels = stock_levels

    @property
    def text_filter(self):
        """Gets the text_filter of this SearchCatalogItemsRequest.

        The text filter expression to return items or item variations containing specified text in the `name`, `description`, or `abbreviation` attribute value of an item, or in the `name`, `sku`, or `upc` attribute value of an item variation.

        :return: The text_filter of this SearchCatalogItemsRequest.
        :rtype: str
        """
        return self._text_filter

    @text_filter.setter
    def text_filter(self, text_filter):
        """Sets the text_filter of this SearchCatalogItemsRequest.

        The text filter expression to return items or item variations containing specified text in the `name`, `description`, or `abbreviation` attribute value of an item, or in the `name`, `sku`, or `upc` attribute value of an item variation.

        :param text_filter: The text_filter of this SearchCatalogItemsRequest.
        :type text_filter: str
        """

        self._text_filter = text_filter
