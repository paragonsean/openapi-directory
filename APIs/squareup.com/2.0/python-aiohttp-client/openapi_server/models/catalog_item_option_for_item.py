# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogItemOptionForItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item_option_id: str=None):
        """CatalogItemOptionForItem - a model defined in OpenAPI

        :param item_option_id: The item_option_id of this CatalogItemOptionForItem.
        """
        self.openapi_types = {
            'item_option_id': str
        }

        self.attribute_map = {
            'item_option_id': 'item_option_id'
        }

        self._item_option_id = item_option_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogItemOptionForItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogItemOptionForItem of this CatalogItemOptionForItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_option_id(self):
        """Gets the item_option_id of this CatalogItemOptionForItem.

        The unique id of the item option, used to form the dimensions of the item option matrix in a specified order.

        :return: The item_option_id of this CatalogItemOptionForItem.
        :rtype: str
        """
        return self._item_option_id

    @item_option_id.setter
    def item_option_id(self, item_option_id):
        """Sets the item_option_id of this CatalogItemOptionForItem.

        The unique id of the item option, used to form the dimensions of the item option matrix in a specified order.

        :param item_option_id: The item_option_id of this CatalogItemOptionForItem.
        :type item_option_id: str
        """

        self._item_option_id = item_option_id
