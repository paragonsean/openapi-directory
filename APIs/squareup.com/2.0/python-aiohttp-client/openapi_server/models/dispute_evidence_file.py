# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisputeEvidenceFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filename: str=None, filetype: str=None):
        """DisputeEvidenceFile - a model defined in OpenAPI

        :param filename: The filename of this DisputeEvidenceFile.
        :param filetype: The filetype of this DisputeEvidenceFile.
        """
        self.openapi_types = {
            'filename': str,
            'filetype': str
        }

        self.attribute_map = {
            'filename': 'filename',
            'filetype': 'filetype'
        }

        self._filename = filename
        self._filetype = filetype

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisputeEvidenceFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisputeEvidenceFile of this DisputeEvidenceFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filename(self):
        """Gets the filename of this DisputeEvidenceFile.

        The file name including the file extension. For example: \"receipt.tiff\".

        :return: The filename of this DisputeEvidenceFile.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this DisputeEvidenceFile.

        The file name including the file extension. For example: \"receipt.tiff\".

        :param filename: The filename of this DisputeEvidenceFile.
        :type filename: str
        """
        if filename is not None and len(filename) > 40:
            raise ValueError("Invalid value for `filename`, length must be less than or equal to `40`")
        if filename is not None and len(filename) < 1:
            raise ValueError("Invalid value for `filename`, length must be greater than or equal to `1`")

        self._filename = filename

    @property
    def filetype(self):
        """Gets the filetype of this DisputeEvidenceFile.

        Dispute evidence files must be application/pdf, image/heic, image/heif, image/jpeg, image/png, or image/tiff formats.

        :return: The filetype of this DisputeEvidenceFile.
        :rtype: str
        """
        return self._filetype

    @filetype.setter
    def filetype(self, filetype):
        """Sets the filetype of this DisputeEvidenceFile.

        Dispute evidence files must be application/pdf, image/heic, image/heif, image/jpeg, image/png, or image/tiff formats.

        :param filetype: The filetype of this DisputeEvidenceFile.
        :type filetype: str
        """
        if filetype is not None and len(filetype) > 40:
            raise ValueError("Invalid value for `filetype`, length must be less than or equal to `40`")
        if filetype is not None and len(filetype) < 1:
            raise ValueError("Invalid value for `filetype`, length must be greater than or equal to `1`")

        self._filetype = filetype
