# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util


class Card(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: Address=None, bin: str=None, card_brand: str=None, card_type: str=None, cardholder_name: str=None, customer_id: str=None, enabled: bool=None, exp_month: int=None, exp_year: int=None, fingerprint: str=None, id: str=None, last_4: str=None, prepaid_type: str=None, reference_id: str=None, version: int=None):
        """Card - a model defined in OpenAPI

        :param billing_address: The billing_address of this Card.
        :param bin: The bin of this Card.
        :param card_brand: The card_brand of this Card.
        :param card_type: The card_type of this Card.
        :param cardholder_name: The cardholder_name of this Card.
        :param customer_id: The customer_id of this Card.
        :param enabled: The enabled of this Card.
        :param exp_month: The exp_month of this Card.
        :param exp_year: The exp_year of this Card.
        :param fingerprint: The fingerprint of this Card.
        :param id: The id of this Card.
        :param last_4: The last_4 of this Card.
        :param prepaid_type: The prepaid_type of this Card.
        :param reference_id: The reference_id of this Card.
        :param version: The version of this Card.
        """
        self.openapi_types = {
            'billing_address': Address,
            'bin': str,
            'card_brand': str,
            'card_type': str,
            'cardholder_name': str,
            'customer_id': str,
            'enabled': bool,
            'exp_month': int,
            'exp_year': int,
            'fingerprint': str,
            'id': str,
            'last_4': str,
            'prepaid_type': str,
            'reference_id': str,
            'version': int
        }

        self.attribute_map = {
            'billing_address': 'billing_address',
            'bin': 'bin',
            'card_brand': 'card_brand',
            'card_type': 'card_type',
            'cardholder_name': 'cardholder_name',
            'customer_id': 'customer_id',
            'enabled': 'enabled',
            'exp_month': 'exp_month',
            'exp_year': 'exp_year',
            'fingerprint': 'fingerprint',
            'id': 'id',
            'last_4': 'last_4',
            'prepaid_type': 'prepaid_type',
            'reference_id': 'reference_id',
            'version': 'version'
        }

        self._billing_address = billing_address
        self._bin = bin
        self._card_brand = card_brand
        self._card_type = card_type
        self._cardholder_name = cardholder_name
        self._customer_id = customer_id
        self._enabled = enabled
        self._exp_month = exp_month
        self._exp_year = exp_year
        self._fingerprint = fingerprint
        self._id = id
        self._last_4 = last_4
        self._prepaid_type = prepaid_type
        self._reference_id = reference_id
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Card':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Card of this Card.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this Card.


        :return: The billing_address of this Card.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this Card.


        :param billing_address: The billing_address of this Card.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def bin(self):
        """Gets the bin of this Card.

        The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API returns this field.

        :return: The bin of this Card.
        :rtype: str
        """
        return self._bin

    @bin.setter
    def bin(self, bin):
        """Sets the bin of this Card.

        The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API returns this field.

        :param bin: The bin of this Card.
        :type bin: str
        """
        if bin is not None and len(bin) > 6:
            raise ValueError("Invalid value for `bin`, length must be less than or equal to `6`")

        self._bin = bin

    @property
    def card_brand(self):
        """Gets the card_brand of this Card.

        The card's brand.

        :return: The card_brand of this Card.
        :rtype: str
        """
        return self._card_brand

    @card_brand.setter
    def card_brand(self, card_brand):
        """Sets the card_brand of this Card.

        The card's brand.

        :param card_brand: The card_brand of this Card.
        :type card_brand: str
        """

        self._card_brand = card_brand

    @property
    def card_type(self):
        """Gets the card_type of this Card.

        The type of the card. The Card object includes this field only in response to Payments API calls.

        :return: The card_type of this Card.
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this Card.

        The type of the card. The Card object includes this field only in response to Payments API calls.

        :param card_type: The card_type of this Card.
        :type card_type: str
        """

        self._card_type = card_type

    @property
    def cardholder_name(self):
        """Gets the cardholder_name of this Card.

        The name of the cardholder.

        :return: The cardholder_name of this Card.
        :rtype: str
        """
        return self._cardholder_name

    @cardholder_name.setter
    def cardholder_name(self, cardholder_name):
        """Sets the cardholder_name of this Card.

        The name of the cardholder.

        :param cardholder_name: The cardholder_name of this Card.
        :type cardholder_name: str
        """
        if cardholder_name is not None and len(cardholder_name) > 96:
            raise ValueError("Invalid value for `cardholder_name`, length must be less than or equal to `96`")

        self._cardholder_name = cardholder_name

    @property
    def customer_id(self):
        """Gets the customer_id of this Card.

        The ID of a customer created using the Customers API to be associated with the card.

        :return: The customer_id of this Card.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Card.

        The ID of a customer created using the Customers API to be associated with the card.

        :param customer_id: The customer_id of this Card.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def enabled(self):
        """Gets the enabled of this Card.

        Indicates whether or not a card can be used for payments.

        :return: The enabled of this Card.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Card.

        Indicates whether or not a card can be used for payments.

        :param enabled: The enabled of this Card.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def exp_month(self):
        """Gets the exp_month of this Card.

        The expiration month of the associated card as an integer between 1 and 12.

        :return: The exp_month of this Card.
        :rtype: int
        """
        return self._exp_month

    @exp_month.setter
    def exp_month(self, exp_month):
        """Sets the exp_month of this Card.

        The expiration month of the associated card as an integer between 1 and 12.

        :param exp_month: The exp_month of this Card.
        :type exp_month: int
        """

        self._exp_month = exp_month

    @property
    def exp_year(self):
        """Gets the exp_year of this Card.

        The four-digit year of the card's expiration date.

        :return: The exp_year of this Card.
        :rtype: int
        """
        return self._exp_year

    @exp_year.setter
    def exp_year(self, exp_year):
        """Sets the exp_year of this Card.

        The four-digit year of the card's expiration date.

        :param exp_year: The exp_year of this Card.
        :type exp_year: int
        """

        self._exp_year = exp_year

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Card.

        __Not currently set.__ Intended as a Square-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.

        :return: The fingerprint of this Card.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Card.

        __Not currently set.__ Intended as a Square-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.

        :param fingerprint: The fingerprint of this Card.
        :type fingerprint: str
        """
        if fingerprint is not None and len(fingerprint) > 255:
            raise ValueError("Invalid value for `fingerprint`, length must be less than or equal to `255`")

        self._fingerprint = fingerprint

    @property
    def id(self):
        """Gets the id of this Card.

        Unique ID for this card. Generated by Square.

        :return: The id of this Card.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Card.

        Unique ID for this card. Generated by Square.

        :param id: The id of this Card.
        :type id: str
        """
        if id is not None and len(id) > 64:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `64`")

        self._id = id

    @property
    def last_4(self):
        """Gets the last_4 of this Card.

        The last 4 digits of the card number.

        :return: The last_4 of this Card.
        :rtype: str
        """
        return self._last_4

    @last_4.setter
    def last_4(self, last_4):
        """Sets the last_4 of this Card.

        The last 4 digits of the card number.

        :param last_4: The last_4 of this Card.
        :type last_4: str
        """
        if last_4 is not None and len(last_4) > 4:
            raise ValueError("Invalid value for `last_4`, length must be less than or equal to `4`")

        self._last_4 = last_4

    @property
    def prepaid_type(self):
        """Gets the prepaid_type of this Card.

        Indicates whether the Card is prepaid or not. The Card object includes this field only in response to Payments API calls.

        :return: The prepaid_type of this Card.
        :rtype: str
        """
        return self._prepaid_type

    @prepaid_type.setter
    def prepaid_type(self, prepaid_type):
        """Sets the prepaid_type of this Card.

        Indicates whether the Card is prepaid or not. The Card object includes this field only in response to Payments API calls.

        :param prepaid_type: The prepaid_type of this Card.
        :type prepaid_type: str
        """

        self._prepaid_type = prepaid_type

    @property
    def reference_id(self):
        """Gets the reference_id of this Card.

        An optional user-defined reference ID that associates this card with another entity in an external system. For example, a customer ID from an external customer management system.

        :return: The reference_id of this Card.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this Card.

        An optional user-defined reference ID that associates this card with another entity in an external system. For example, a customer ID from an external customer management system.

        :param reference_id: The reference_id of this Card.
        :type reference_id: str
        """
        if reference_id is not None and len(reference_id) > 128:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `128`")

        self._reference_id = reference_id

    @property
    def version(self):
        """Gets the version of this Card.

        Current version number of the card. Increments with each card update. Requests to update an existing Card object will be rejected unless the version in the request matches the current version for the Card.

        :return: The version of this Card.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Card.

        Current version number of the card. Increments with each card update. Requests to update an existing Card object will be rejected unless the version in the request matches the current version for the Card.

        :param version: The version of this Card.
        :type version: int
        """

        self._version = version
