# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogInfoResponseLimits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_delete_max_object_ids: int=None, batch_retrieve_max_object_ids: int=None, batch_upsert_max_objects_per_batch: int=None, batch_upsert_max_total_objects: int=None, search_max_page_limit: int=None, update_item_modifier_lists_max_item_ids: int=None, update_item_modifier_lists_max_modifier_lists_to_disable: int=None, update_item_modifier_lists_max_modifier_lists_to_enable: int=None, update_item_taxes_max_item_ids: int=None, update_item_taxes_max_taxes_to_disable: int=None, update_item_taxes_max_taxes_to_enable: int=None):
        """CatalogInfoResponseLimits - a model defined in OpenAPI

        :param batch_delete_max_object_ids: The batch_delete_max_object_ids of this CatalogInfoResponseLimits.
        :param batch_retrieve_max_object_ids: The batch_retrieve_max_object_ids of this CatalogInfoResponseLimits.
        :param batch_upsert_max_objects_per_batch: The batch_upsert_max_objects_per_batch of this CatalogInfoResponseLimits.
        :param batch_upsert_max_total_objects: The batch_upsert_max_total_objects of this CatalogInfoResponseLimits.
        :param search_max_page_limit: The search_max_page_limit of this CatalogInfoResponseLimits.
        :param update_item_modifier_lists_max_item_ids: The update_item_modifier_lists_max_item_ids of this CatalogInfoResponseLimits.
        :param update_item_modifier_lists_max_modifier_lists_to_disable: The update_item_modifier_lists_max_modifier_lists_to_disable of this CatalogInfoResponseLimits.
        :param update_item_modifier_lists_max_modifier_lists_to_enable: The update_item_modifier_lists_max_modifier_lists_to_enable of this CatalogInfoResponseLimits.
        :param update_item_taxes_max_item_ids: The update_item_taxes_max_item_ids of this CatalogInfoResponseLimits.
        :param update_item_taxes_max_taxes_to_disable: The update_item_taxes_max_taxes_to_disable of this CatalogInfoResponseLimits.
        :param update_item_taxes_max_taxes_to_enable: The update_item_taxes_max_taxes_to_enable of this CatalogInfoResponseLimits.
        """
        self.openapi_types = {
            'batch_delete_max_object_ids': int,
            'batch_retrieve_max_object_ids': int,
            'batch_upsert_max_objects_per_batch': int,
            'batch_upsert_max_total_objects': int,
            'search_max_page_limit': int,
            'update_item_modifier_lists_max_item_ids': int,
            'update_item_modifier_lists_max_modifier_lists_to_disable': int,
            'update_item_modifier_lists_max_modifier_lists_to_enable': int,
            'update_item_taxes_max_item_ids': int,
            'update_item_taxes_max_taxes_to_disable': int,
            'update_item_taxes_max_taxes_to_enable': int
        }

        self.attribute_map = {
            'batch_delete_max_object_ids': 'batch_delete_max_object_ids',
            'batch_retrieve_max_object_ids': 'batch_retrieve_max_object_ids',
            'batch_upsert_max_objects_per_batch': 'batch_upsert_max_objects_per_batch',
            'batch_upsert_max_total_objects': 'batch_upsert_max_total_objects',
            'search_max_page_limit': 'search_max_page_limit',
            'update_item_modifier_lists_max_item_ids': 'update_item_modifier_lists_max_item_ids',
            'update_item_modifier_lists_max_modifier_lists_to_disable': 'update_item_modifier_lists_max_modifier_lists_to_disable',
            'update_item_modifier_lists_max_modifier_lists_to_enable': 'update_item_modifier_lists_max_modifier_lists_to_enable',
            'update_item_taxes_max_item_ids': 'update_item_taxes_max_item_ids',
            'update_item_taxes_max_taxes_to_disable': 'update_item_taxes_max_taxes_to_disable',
            'update_item_taxes_max_taxes_to_enable': 'update_item_taxes_max_taxes_to_enable'
        }

        self._batch_delete_max_object_ids = batch_delete_max_object_ids
        self._batch_retrieve_max_object_ids = batch_retrieve_max_object_ids
        self._batch_upsert_max_objects_per_batch = batch_upsert_max_objects_per_batch
        self._batch_upsert_max_total_objects = batch_upsert_max_total_objects
        self._search_max_page_limit = search_max_page_limit
        self._update_item_modifier_lists_max_item_ids = update_item_modifier_lists_max_item_ids
        self._update_item_modifier_lists_max_modifier_lists_to_disable = update_item_modifier_lists_max_modifier_lists_to_disable
        self._update_item_modifier_lists_max_modifier_lists_to_enable = update_item_modifier_lists_max_modifier_lists_to_enable
        self._update_item_taxes_max_item_ids = update_item_taxes_max_item_ids
        self._update_item_taxes_max_taxes_to_disable = update_item_taxes_max_taxes_to_disable
        self._update_item_taxes_max_taxes_to_enable = update_item_taxes_max_taxes_to_enable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogInfoResponseLimits':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogInfoResponseLimits of this CatalogInfoResponseLimits.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_delete_max_object_ids(self):
        """Gets the batch_delete_max_object_ids of this CatalogInfoResponseLimits.

        The maximum number of object IDs that may be included in a single `/v2/catalog/batch-delete` request.

        :return: The batch_delete_max_object_ids of this CatalogInfoResponseLimits.
        :rtype: int
        """
        return self._batch_delete_max_object_ids

    @batch_delete_max_object_ids.setter
    def batch_delete_max_object_ids(self, batch_delete_max_object_ids):
        """Sets the batch_delete_max_object_ids of this CatalogInfoResponseLimits.

        The maximum number of object IDs that may be included in a single `/v2/catalog/batch-delete` request.

        :param batch_delete_max_object_ids: The batch_delete_max_object_ids of this CatalogInfoResponseLimits.
        :type batch_delete_max_object_ids: int
        """

        self._batch_delete_max_object_ids = batch_delete_max_object_ids

    @property
    def batch_retrieve_max_object_ids(self):
        """Gets the batch_retrieve_max_object_ids of this CatalogInfoResponseLimits.

        The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve` request.

        :return: The batch_retrieve_max_object_ids of this CatalogInfoResponseLimits.
        :rtype: int
        """
        return self._batch_retrieve_max_object_ids

    @batch_retrieve_max_object_ids.setter
    def batch_retrieve_max_object_ids(self, batch_retrieve_max_object_ids):
        """Sets the batch_retrieve_max_object_ids of this CatalogInfoResponseLimits.

        The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve` request.

        :param batch_retrieve_max_object_ids: The batch_retrieve_max_object_ids of this CatalogInfoResponseLimits.
        :type batch_retrieve_max_object_ids: int
        """

        self._batch_retrieve_max_object_ids = batch_retrieve_max_object_ids

    @property
    def batch_upsert_max_objects_per_batch(self):
        """Gets the batch_upsert_max_objects_per_batch of this CatalogInfoResponseLimits.

        The maximum number of objects that may appear within a single batch in a `/v2/catalog/batch-upsert` request.

        :return: The batch_upsert_max_objects_per_batch of this CatalogInfoResponseLimits.
        :rtype: int
        """
        return self._batch_upsert_max_objects_per_batch

    @batch_upsert_max_objects_per_batch.setter
    def batch_upsert_max_objects_per_batch(self, batch_upsert_max_objects_per_batch):
        """Sets the batch_upsert_max_objects_per_batch of this CatalogInfoResponseLimits.

        The maximum number of objects that may appear within a single batch in a `/v2/catalog/batch-upsert` request.

        :param batch_upsert_max_objects_per_batch: The batch_upsert_max_objects_per_batch of this CatalogInfoResponseLimits.
        :type batch_upsert_max_objects_per_batch: int
        """

        self._batch_upsert_max_objects_per_batch = batch_upsert_max_objects_per_batch

    @property
    def batch_upsert_max_total_objects(self):
        """Gets the batch_upsert_max_total_objects of this CatalogInfoResponseLimits.

        The maximum number of objects that may appear across all batches in a `/v2/catalog/batch-upsert` request.

        :return: The batch_upsert_max_total_objects of this CatalogInfoResponseLimits.
        :rtype: int
        """
        return self._batch_upsert_max_total_objects

    @batch_upsert_max_total_objects.setter
    def batch_upsert_max_total_objects(self, batch_upsert_max_total_objects):
        """Sets the batch_upsert_max_total_objects of this CatalogInfoResponseLimits.

        The maximum number of objects that may appear across all batches in a `/v2/catalog/batch-upsert` request.

        :param batch_upsert_max_total_objects: The batch_upsert_max_total_objects of this CatalogInfoResponseLimits.
        :type batch_upsert_max_total_objects: int
        """

        self._batch_upsert_max_total_objects = batch_upsert_max_total_objects

    @property
    def search_max_page_limit(self):
        """Gets the search_max_page_limit of this CatalogInfoResponseLimits.

        The maximum number of results that may be returned in a page of a `/v2/catalog/search` response.

        :return: The search_max_page_limit of this CatalogInfoResponseLimits.
        :rtype: int
        """
        return self._search_max_page_limit

    @search_max_page_limit.setter
    def search_max_page_limit(self, search_max_page_limit):
        """Sets the search_max_page_limit of this CatalogInfoResponseLimits.

        The maximum number of results that may be returned in a page of a `/v2/catalog/search` response.

        :param search_max_page_limit: The search_max_page_limit of this CatalogInfoResponseLimits.
        :type search_max_page_limit: int
        """

        self._search_max_page_limit = search_max_page_limit

    @property
    def update_item_modifier_lists_max_item_ids(self):
        """Gets the update_item_modifier_lists_max_item_ids of this CatalogInfoResponseLimits.

        The maximum number of item IDs that may be included in a single `/v2/catalog/update-item-modifier-lists` request.

        :return: The update_item_modifier_lists_max_item_ids of this CatalogInfoResponseLimits.
        :rtype: int
        """
        return self._update_item_modifier_lists_max_item_ids

    @update_item_modifier_lists_max_item_ids.setter
    def update_item_modifier_lists_max_item_ids(self, update_item_modifier_lists_max_item_ids):
        """Sets the update_item_modifier_lists_max_item_ids of this CatalogInfoResponseLimits.

        The maximum number of item IDs that may be included in a single `/v2/catalog/update-item-modifier-lists` request.

        :param update_item_modifier_lists_max_item_ids: The update_item_modifier_lists_max_item_ids of this CatalogInfoResponseLimits.
        :type update_item_modifier_lists_max_item_ids: int
        """

        self._update_item_modifier_lists_max_item_ids = update_item_modifier_lists_max_item_ids

    @property
    def update_item_modifier_lists_max_modifier_lists_to_disable(self):
        """Gets the update_item_modifier_lists_max_modifier_lists_to_disable of this CatalogInfoResponseLimits.

        The maximum number of modifier list IDs to be disabled that may be included in a single `/v2/catalog/update-item-modifier-lists` request.

        :return: The update_item_modifier_lists_max_modifier_lists_to_disable of this CatalogInfoResponseLimits.
        :rtype: int
        """
        return self._update_item_modifier_lists_max_modifier_lists_to_disable

    @update_item_modifier_lists_max_modifier_lists_to_disable.setter
    def update_item_modifier_lists_max_modifier_lists_to_disable(self, update_item_modifier_lists_max_modifier_lists_to_disable):
        """Sets the update_item_modifier_lists_max_modifier_lists_to_disable of this CatalogInfoResponseLimits.

        The maximum number of modifier list IDs to be disabled that may be included in a single `/v2/catalog/update-item-modifier-lists` request.

        :param update_item_modifier_lists_max_modifier_lists_to_disable: The update_item_modifier_lists_max_modifier_lists_to_disable of this CatalogInfoResponseLimits.
        :type update_item_modifier_lists_max_modifier_lists_to_disable: int
        """

        self._update_item_modifier_lists_max_modifier_lists_to_disable = update_item_modifier_lists_max_modifier_lists_to_disable

    @property
    def update_item_modifier_lists_max_modifier_lists_to_enable(self):
        """Gets the update_item_modifier_lists_max_modifier_lists_to_enable of this CatalogInfoResponseLimits.

        The maximum number of modifier list IDs to be enabled that may be included in a single `/v2/catalog/update-item-modifier-lists` request.

        :return: The update_item_modifier_lists_max_modifier_lists_to_enable of this CatalogInfoResponseLimits.
        :rtype: int
        """
        return self._update_item_modifier_lists_max_modifier_lists_to_enable

    @update_item_modifier_lists_max_modifier_lists_to_enable.setter
    def update_item_modifier_lists_max_modifier_lists_to_enable(self, update_item_modifier_lists_max_modifier_lists_to_enable):
        """Sets the update_item_modifier_lists_max_modifier_lists_to_enable of this CatalogInfoResponseLimits.

        The maximum number of modifier list IDs to be enabled that may be included in a single `/v2/catalog/update-item-modifier-lists` request.

        :param update_item_modifier_lists_max_modifier_lists_to_enable: The update_item_modifier_lists_max_modifier_lists_to_enable of this CatalogInfoResponseLimits.
        :type update_item_modifier_lists_max_modifier_lists_to_enable: int
        """

        self._update_item_modifier_lists_max_modifier_lists_to_enable = update_item_modifier_lists_max_modifier_lists_to_enable

    @property
    def update_item_taxes_max_item_ids(self):
        """Gets the update_item_taxes_max_item_ids of this CatalogInfoResponseLimits.

        The maximum number of item IDs that may be included in a single `/v2/catalog/update-item-taxes` request.

        :return: The update_item_taxes_max_item_ids of this CatalogInfoResponseLimits.
        :rtype: int
        """
        return self._update_item_taxes_max_item_ids

    @update_item_taxes_max_item_ids.setter
    def update_item_taxes_max_item_ids(self, update_item_taxes_max_item_ids):
        """Sets the update_item_taxes_max_item_ids of this CatalogInfoResponseLimits.

        The maximum number of item IDs that may be included in a single `/v2/catalog/update-item-taxes` request.

        :param update_item_taxes_max_item_ids: The update_item_taxes_max_item_ids of this CatalogInfoResponseLimits.
        :type update_item_taxes_max_item_ids: int
        """

        self._update_item_taxes_max_item_ids = update_item_taxes_max_item_ids

    @property
    def update_item_taxes_max_taxes_to_disable(self):
        """Gets the update_item_taxes_max_taxes_to_disable of this CatalogInfoResponseLimits.

        The maximum number of tax IDs to be disabled that may be included in a single `/v2/catalog/update-item-taxes` request.

        :return: The update_item_taxes_max_taxes_to_disable of this CatalogInfoResponseLimits.
        :rtype: int
        """
        return self._update_item_taxes_max_taxes_to_disable

    @update_item_taxes_max_taxes_to_disable.setter
    def update_item_taxes_max_taxes_to_disable(self, update_item_taxes_max_taxes_to_disable):
        """Sets the update_item_taxes_max_taxes_to_disable of this CatalogInfoResponseLimits.

        The maximum number of tax IDs to be disabled that may be included in a single `/v2/catalog/update-item-taxes` request.

        :param update_item_taxes_max_taxes_to_disable: The update_item_taxes_max_taxes_to_disable of this CatalogInfoResponseLimits.
        :type update_item_taxes_max_taxes_to_disable: int
        """

        self._update_item_taxes_max_taxes_to_disable = update_item_taxes_max_taxes_to_disable

    @property
    def update_item_taxes_max_taxes_to_enable(self):
        """Gets the update_item_taxes_max_taxes_to_enable of this CatalogInfoResponseLimits.

        The maximum number of tax IDs to be enabled that may be included in a single `/v2/catalog/update-item-taxes` request.

        :return: The update_item_taxes_max_taxes_to_enable of this CatalogInfoResponseLimits.
        :rtype: int
        """
        return self._update_item_taxes_max_taxes_to_enable

    @update_item_taxes_max_taxes_to_enable.setter
    def update_item_taxes_max_taxes_to_enable(self, update_item_taxes_max_taxes_to_enable):
        """Sets the update_item_taxes_max_taxes_to_enable of this CatalogInfoResponseLimits.

        The maximum number of tax IDs to be enabled that may be included in a single `/v2/catalog/update-item-taxes` request.

        :param update_item_taxes_max_taxes_to_enable: The update_item_taxes_max_taxes_to_enable of this CatalogInfoResponseLimits.
        :type update_item_taxes_max_taxes_to_enable: int
        """

        self._update_item_taxes_max_taxes_to_enable = update_item_taxes_max_taxes_to_enable
