# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.charge_request_additional_recipient import ChargeRequestAdditionalRecipient
from openapi_server.models.create_order_request import CreateOrderRequest
from openapi_server import util


class CreateCheckoutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_recipients: List[ChargeRequestAdditionalRecipient]=None, ask_for_shipping_address: bool=None, idempotency_key: str=None, merchant_support_email: str=None, note: str=None, order: CreateOrderRequest=None, pre_populate_buyer_email: str=None, pre_populate_shipping_address: Address=None, redirect_url: str=None):
        """CreateCheckoutRequest - a model defined in OpenAPI

        :param additional_recipients: The additional_recipients of this CreateCheckoutRequest.
        :param ask_for_shipping_address: The ask_for_shipping_address of this CreateCheckoutRequest.
        :param idempotency_key: The idempotency_key of this CreateCheckoutRequest.
        :param merchant_support_email: The merchant_support_email of this CreateCheckoutRequest.
        :param note: The note of this CreateCheckoutRequest.
        :param order: The order of this CreateCheckoutRequest.
        :param pre_populate_buyer_email: The pre_populate_buyer_email of this CreateCheckoutRequest.
        :param pre_populate_shipping_address: The pre_populate_shipping_address of this CreateCheckoutRequest.
        :param redirect_url: The redirect_url of this CreateCheckoutRequest.
        """
        self.openapi_types = {
            'additional_recipients': List[ChargeRequestAdditionalRecipient],
            'ask_for_shipping_address': bool,
            'idempotency_key': str,
            'merchant_support_email': str,
            'note': str,
            'order': CreateOrderRequest,
            'pre_populate_buyer_email': str,
            'pre_populate_shipping_address': Address,
            'redirect_url': str
        }

        self.attribute_map = {
            'additional_recipients': 'additional_recipients',
            'ask_for_shipping_address': 'ask_for_shipping_address',
            'idempotency_key': 'idempotency_key',
            'merchant_support_email': 'merchant_support_email',
            'note': 'note',
            'order': 'order',
            'pre_populate_buyer_email': 'pre_populate_buyer_email',
            'pre_populate_shipping_address': 'pre_populate_shipping_address',
            'redirect_url': 'redirect_url'
        }

        self._additional_recipients = additional_recipients
        self._ask_for_shipping_address = ask_for_shipping_address
        self._idempotency_key = idempotency_key
        self._merchant_support_email = merchant_support_email
        self._note = note
        self._order = order
        self._pre_populate_buyer_email = pre_populate_buyer_email
        self._pre_populate_shipping_address = pre_populate_shipping_address
        self._redirect_url = redirect_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCheckoutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCheckoutRequest of this CreateCheckoutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_recipients(self):
        """Gets the additional_recipients of this CreateCheckoutRequest.

        The basic primitive of a multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the `amount_money` value in your `additional_recipients` field cannot be more than 90% of the `total_money` calculated by Square for your order. The `location_id` must be a valid seller location where the checkout is occurring.  This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.  This field is currently not supported in the Square Sandbox.

        :return: The additional_recipients of this CreateCheckoutRequest.
        :rtype: List[ChargeRequestAdditionalRecipient]
        """
        return self._additional_recipients

    @additional_recipients.setter
    def additional_recipients(self, additional_recipients):
        """Sets the additional_recipients of this CreateCheckoutRequest.

        The basic primitive of a multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the `amount_money` value in your `additional_recipients` field cannot be more than 90% of the `total_money` calculated by Square for your order. The `location_id` must be a valid seller location where the checkout is occurring.  This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.  This field is currently not supported in the Square Sandbox.

        :param additional_recipients: The additional_recipients of this CreateCheckoutRequest.
        :type additional_recipients: List[ChargeRequestAdditionalRecipient]
        """

        self._additional_recipients = additional_recipients

    @property
    def ask_for_shipping_address(self):
        """Gets the ask_for_shipping_address of this CreateCheckoutRequest.

        If `true`, Square Checkout collects shipping information on your behalf and stores  that information with the transaction information in the Square Seller Dashboard.  Default: `false`.

        :return: The ask_for_shipping_address of this CreateCheckoutRequest.
        :rtype: bool
        """
        return self._ask_for_shipping_address

    @ask_for_shipping_address.setter
    def ask_for_shipping_address(self, ask_for_shipping_address):
        """Sets the ask_for_shipping_address of this CreateCheckoutRequest.

        If `true`, Square Checkout collects shipping information on your behalf and stores  that information with the transaction information in the Square Seller Dashboard.  Default: `false`.

        :param ask_for_shipping_address: The ask_for_shipping_address of this CreateCheckoutRequest.
        :type ask_for_shipping_address: bool
        """

        self._ask_for_shipping_address = ask_for_shipping_address

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this CreateCheckoutRequest.

        A unique string that identifies this checkout among others you have created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you are  unsure whether a particular checkout was created successfully, you can attempt it again with the same idempotency key and all the same other parameters without worrying about creating duplicates.  You should use a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).

        :return: The idempotency_key of this CreateCheckoutRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this CreateCheckoutRequest.

        A unique string that identifies this checkout among others you have created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you are  unsure whether a particular checkout was created successfully, you can attempt it again with the same idempotency key and all the same other parameters without worrying about creating duplicates.  You should use a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).

        :param idempotency_key: The idempotency_key of this CreateCheckoutRequest.
        :type idempotency_key: str
        """
        if idempotency_key is None:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if idempotency_key is not None and len(idempotency_key) > 192:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `192`")
        if idempotency_key is not None and len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key

    @property
    def merchant_support_email(self):
        """Gets the merchant_support_email of this CreateCheckoutRequest.

        The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the seller.  If this value is not set, the confirmation page and email display the primary email address associated with the seller's Square account.  Default: none; only exists if explicitly set.

        :return: The merchant_support_email of this CreateCheckoutRequest.
        :rtype: str
        """
        return self._merchant_support_email

    @merchant_support_email.setter
    def merchant_support_email(self, merchant_support_email):
        """Sets the merchant_support_email of this CreateCheckoutRequest.

        The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the seller.  If this value is not set, the confirmation page and email display the primary email address associated with the seller's Square account.  Default: none; only exists if explicitly set.

        :param merchant_support_email: The merchant_support_email of this CreateCheckoutRequest.
        :type merchant_support_email: str
        """
        if merchant_support_email is not None and len(merchant_support_email) > 254:
            raise ValueError("Invalid value for `merchant_support_email`, length must be less than or equal to `254`")

        self._merchant_support_email = merchant_support_email

    @property
    def note(self):
        """Gets the note of this CreateCheckoutRequest.

        An optional note to associate with the `checkout` object.  This value cannot exceed 60 characters.

        :return: The note of this CreateCheckoutRequest.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CreateCheckoutRequest.

        An optional note to associate with the `checkout` object.  This value cannot exceed 60 characters.

        :param note: The note of this CreateCheckoutRequest.
        :type note: str
        """
        if note is not None and len(note) > 60:
            raise ValueError("Invalid value for `note`, length must be less than or equal to `60`")

        self._note = note

    @property
    def order(self):
        """Gets the order of this CreateCheckoutRequest.


        :return: The order of this CreateCheckoutRequest.
        :rtype: CreateOrderRequest
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CreateCheckoutRequest.


        :param order: The order of this CreateCheckoutRequest.
        :type order: CreateOrderRequest
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")

        self._order = order

    @property
    def pre_populate_buyer_email(self):
        """Gets the pre_populate_buyer_email of this CreateCheckoutRequest.

        If provided, the buyer's email is prepopulated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.

        :return: The pre_populate_buyer_email of this CreateCheckoutRequest.
        :rtype: str
        """
        return self._pre_populate_buyer_email

    @pre_populate_buyer_email.setter
    def pre_populate_buyer_email(self, pre_populate_buyer_email):
        """Sets the pre_populate_buyer_email of this CreateCheckoutRequest.

        If provided, the buyer's email is prepopulated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.

        :param pre_populate_buyer_email: The pre_populate_buyer_email of this CreateCheckoutRequest.
        :type pre_populate_buyer_email: str
        """
        if pre_populate_buyer_email is not None and len(pre_populate_buyer_email) > 254:
            raise ValueError("Invalid value for `pre_populate_buyer_email`, length must be less than or equal to `254`")

        self._pre_populate_buyer_email = pre_populate_buyer_email

    @property
    def pre_populate_shipping_address(self):
        """Gets the pre_populate_shipping_address of this CreateCheckoutRequest.


        :return: The pre_populate_shipping_address of this CreateCheckoutRequest.
        :rtype: Address
        """
        return self._pre_populate_shipping_address

    @pre_populate_shipping_address.setter
    def pre_populate_shipping_address(self, pre_populate_shipping_address):
        """Sets the pre_populate_shipping_address of this CreateCheckoutRequest.


        :param pre_populate_shipping_address: The pre_populate_shipping_address of this CreateCheckoutRequest.
        :type pre_populate_shipping_address: Address
        """

        self._pre_populate_shipping_address = pre_populate_shipping_address

    @property
    def redirect_url(self):
        """Gets the redirect_url of this CreateCheckoutRequest.

        The URL to redirect to after the checkout is completed with `checkoutId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect URL is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  <pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>  If you do not provide a redirect URL, Square Checkout displays an order confirmation page on your behalf; however, it is strongly recommended that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.  Default: none; only exists if explicitly set.

        :return: The redirect_url of this CreateCheckoutRequest.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this CreateCheckoutRequest.

        The URL to redirect to after the checkout is completed with `checkoutId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect URL is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  <pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>  If you do not provide a redirect URL, Square Checkout displays an order confirmation page on your behalf; however, it is strongly recommended that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.  Default: none; only exists if explicitly set.

        :param redirect_url: The redirect_url of this CreateCheckoutRequest.
        :type redirect_url: str
        """
        if redirect_url is not None and len(redirect_url) > 800:
            raise ValueError("Invalid value for `redirect_url`, length must be less than or equal to `800`")

        self._redirect_url = redirect_url
