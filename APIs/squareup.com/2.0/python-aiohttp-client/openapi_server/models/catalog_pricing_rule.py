# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogPricingRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_products_id: str=None, customer_group_ids_any: List[str]=None, discount_id: str=None, exclude_products_id: str=None, exclude_strategy: str=None, match_products_id: str=None, name: str=None, time_period_ids: List[str]=None, valid_from_date: str=None, valid_from_local_time: str=None, valid_until_date: str=None, valid_until_local_time: str=None):
        """CatalogPricingRule - a model defined in OpenAPI

        :param apply_products_id: The apply_products_id of this CatalogPricingRule.
        :param customer_group_ids_any: The customer_group_ids_any of this CatalogPricingRule.
        :param discount_id: The discount_id of this CatalogPricingRule.
        :param exclude_products_id: The exclude_products_id of this CatalogPricingRule.
        :param exclude_strategy: The exclude_strategy of this CatalogPricingRule.
        :param match_products_id: The match_products_id of this CatalogPricingRule.
        :param name: The name of this CatalogPricingRule.
        :param time_period_ids: The time_period_ids of this CatalogPricingRule.
        :param valid_from_date: The valid_from_date of this CatalogPricingRule.
        :param valid_from_local_time: The valid_from_local_time of this CatalogPricingRule.
        :param valid_until_date: The valid_until_date of this CatalogPricingRule.
        :param valid_until_local_time: The valid_until_local_time of this CatalogPricingRule.
        """
        self.openapi_types = {
            'apply_products_id': str,
            'customer_group_ids_any': List[str],
            'discount_id': str,
            'exclude_products_id': str,
            'exclude_strategy': str,
            'match_products_id': str,
            'name': str,
            'time_period_ids': List[str],
            'valid_from_date': str,
            'valid_from_local_time': str,
            'valid_until_date': str,
            'valid_until_local_time': str
        }

        self.attribute_map = {
            'apply_products_id': 'apply_products_id',
            'customer_group_ids_any': 'customer_group_ids_any',
            'discount_id': 'discount_id',
            'exclude_products_id': 'exclude_products_id',
            'exclude_strategy': 'exclude_strategy',
            'match_products_id': 'match_products_id',
            'name': 'name',
            'time_period_ids': 'time_period_ids',
            'valid_from_date': 'valid_from_date',
            'valid_from_local_time': 'valid_from_local_time',
            'valid_until_date': 'valid_until_date',
            'valid_until_local_time': 'valid_until_local_time'
        }

        self._apply_products_id = apply_products_id
        self._customer_group_ids_any = customer_group_ids_any
        self._discount_id = discount_id
        self._exclude_products_id = exclude_products_id
        self._exclude_strategy = exclude_strategy
        self._match_products_id = match_products_id
        self._name = name
        self._time_period_ids = time_period_ids
        self._valid_from_date = valid_from_date
        self._valid_from_local_time = valid_from_local_time
        self._valid_until_date = valid_until_date
        self._valid_until_local_time = valid_until_local_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogPricingRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogPricingRule of this CatalogPricingRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_products_id(self):
        """Gets the apply_products_id of this CatalogPricingRule.

        __Deprecated__: Please use the `exclude_products_id` field to apply an exclude set instead. Exclude sets allow better control over quantity ranges and offer more flexibility for which matched items receive a discount.  `CatalogProductSet` to apply the pricing to. An apply rule matches within the subset of the cart that fits the match rules (the match set). An apply rule can only match once in the match set. If not supplied, the pricing will be applied to all products in the match set. Other products retain their base price, or a price generated by other rules.

        :return: The apply_products_id of this CatalogPricingRule.
        :rtype: str
        """
        return self._apply_products_id

    @apply_products_id.setter
    def apply_products_id(self, apply_products_id):
        """Sets the apply_products_id of this CatalogPricingRule.

        __Deprecated__: Please use the `exclude_products_id` field to apply an exclude set instead. Exclude sets allow better control over quantity ranges and offer more flexibility for which matched items receive a discount.  `CatalogProductSet` to apply the pricing to. An apply rule matches within the subset of the cart that fits the match rules (the match set). An apply rule can only match once in the match set. If not supplied, the pricing will be applied to all products in the match set. Other products retain their base price, or a price generated by other rules.

        :param apply_products_id: The apply_products_id of this CatalogPricingRule.
        :type apply_products_id: str
        """

        self._apply_products_id = apply_products_id

    @property
    def customer_group_ids_any(self):
        """Gets the customer_group_ids_any of this CatalogPricingRule.

        A list of IDs of customer groups, the members of which are eligible for discounts specified in this pricing rule. Notice that a group ID is generated by the Customers API. If this field is not set, the specified discount applies to matched products sold to anyone whether the buyer has a customer profile created or not. If this `customer_group_ids_any` field is set, the specified discount applies only to matched products sold to customers belonging to the specified customer groups.

        :return: The customer_group_ids_any of this CatalogPricingRule.
        :rtype: List[str]
        """
        return self._customer_group_ids_any

    @customer_group_ids_any.setter
    def customer_group_ids_any(self, customer_group_ids_any):
        """Sets the customer_group_ids_any of this CatalogPricingRule.

        A list of IDs of customer groups, the members of which are eligible for discounts specified in this pricing rule. Notice that a group ID is generated by the Customers API. If this field is not set, the specified discount applies to matched products sold to anyone whether the buyer has a customer profile created or not. If this `customer_group_ids_any` field is set, the specified discount applies only to matched products sold to customers belonging to the specified customer groups.

        :param customer_group_ids_any: The customer_group_ids_any of this CatalogPricingRule.
        :type customer_group_ids_any: List[str]
        """

        self._customer_group_ids_any = customer_group_ids_any

    @property
    def discount_id(self):
        """Gets the discount_id of this CatalogPricingRule.

        Unique ID for the `CatalogDiscount` to take off the price of all matched items.

        :return: The discount_id of this CatalogPricingRule.
        :rtype: str
        """
        return self._discount_id

    @discount_id.setter
    def discount_id(self, discount_id):
        """Sets the discount_id of this CatalogPricingRule.

        Unique ID for the `CatalogDiscount` to take off the price of all matched items.

        :param discount_id: The discount_id of this CatalogPricingRule.
        :type discount_id: str
        """

        self._discount_id = discount_id

    @property
    def exclude_products_id(self):
        """Gets the exclude_products_id of this CatalogPricingRule.

        `CatalogProductSet` to exclude from the pricing rule. An exclude rule matches within the subset of the cart that fits the match rules (the match set). An exclude rule can only match once in the match set. If not supplied, the pricing will be applied to all products in the match set. Other products retain their base price, or a price generated by other rules.

        :return: The exclude_products_id of this CatalogPricingRule.
        :rtype: str
        """
        return self._exclude_products_id

    @exclude_products_id.setter
    def exclude_products_id(self, exclude_products_id):
        """Sets the exclude_products_id of this CatalogPricingRule.

        `CatalogProductSet` to exclude from the pricing rule. An exclude rule matches within the subset of the cart that fits the match rules (the match set). An exclude rule can only match once in the match set. If not supplied, the pricing will be applied to all products in the match set. Other products retain their base price, or a price generated by other rules.

        :param exclude_products_id: The exclude_products_id of this CatalogPricingRule.
        :type exclude_products_id: str
        """

        self._exclude_products_id = exclude_products_id

    @property
    def exclude_strategy(self):
        """Gets the exclude_strategy of this CatalogPricingRule.

        If an `exclude_products_id` was given, controls which subset of matched products is excluded from any discounts.  Default value: `LEAST_EXPENSIVE`

        :return: The exclude_strategy of this CatalogPricingRule.
        :rtype: str
        """
        return self._exclude_strategy

    @exclude_strategy.setter
    def exclude_strategy(self, exclude_strategy):
        """Sets the exclude_strategy of this CatalogPricingRule.

        If an `exclude_products_id` was given, controls which subset of matched products is excluded from any discounts.  Default value: `LEAST_EXPENSIVE`

        :param exclude_strategy: The exclude_strategy of this CatalogPricingRule.
        :type exclude_strategy: str
        """

        self._exclude_strategy = exclude_strategy

    @property
    def match_products_id(self):
        """Gets the match_products_id of this CatalogPricingRule.

        Unique ID for the `CatalogProductSet` that will be matched by this rule. A match rule matches within the entire cart, and can match multiple times. This field will always be set.

        :return: The match_products_id of this CatalogPricingRule.
        :rtype: str
        """
        return self._match_products_id

    @match_products_id.setter
    def match_products_id(self, match_products_id):
        """Sets the match_products_id of this CatalogPricingRule.

        Unique ID for the `CatalogProductSet` that will be matched by this rule. A match rule matches within the entire cart, and can match multiple times. This field will always be set.

        :param match_products_id: The match_products_id of this CatalogPricingRule.
        :type match_products_id: str
        """

        self._match_products_id = match_products_id

    @property
    def name(self):
        """Gets the name of this CatalogPricingRule.

        User-defined name for the pricing rule. For example, \"Buy one get one free\" or \"10% off\".

        :return: The name of this CatalogPricingRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogPricingRule.

        User-defined name for the pricing rule. For example, \"Buy one get one free\" or \"10% off\".

        :param name: The name of this CatalogPricingRule.
        :type name: str
        """

        self._name = name

    @property
    def time_period_ids(self):
        """Gets the time_period_ids of this CatalogPricingRule.

        A list of unique IDs for the catalog time periods when this pricing rule is in effect. If left unset, the pricing rule is always in effect.

        :return: The time_period_ids of this CatalogPricingRule.
        :rtype: List[str]
        """
        return self._time_period_ids

    @time_period_ids.setter
    def time_period_ids(self, time_period_ids):
        """Sets the time_period_ids of this CatalogPricingRule.

        A list of unique IDs for the catalog time periods when this pricing rule is in effect. If left unset, the pricing rule is always in effect.

        :param time_period_ids: The time_period_ids of this CatalogPricingRule.
        :type time_period_ids: List[str]
        """

        self._time_period_ids = time_period_ids

    @property
    def valid_from_date(self):
        """Gets the valid_from_date of this CatalogPricingRule.

        Represents the date the Pricing Rule is valid from. Represented in RFC 3339 full-date format (YYYY-MM-DD).

        :return: The valid_from_date of this CatalogPricingRule.
        :rtype: str
        """
        return self._valid_from_date

    @valid_from_date.setter
    def valid_from_date(self, valid_from_date):
        """Sets the valid_from_date of this CatalogPricingRule.

        Represents the date the Pricing Rule is valid from. Represented in RFC 3339 full-date format (YYYY-MM-DD).

        :param valid_from_date: The valid_from_date of this CatalogPricingRule.
        :type valid_from_date: str
        """

        self._valid_from_date = valid_from_date

    @property
    def valid_from_local_time(self):
        """Gets the valid_from_local_time of this CatalogPricingRule.

        Represents the local time the pricing rule should be valid from. Represented in RFC 3339 partial-time format (HH:MM:SS). Partial seconds will be truncated.

        :return: The valid_from_local_time of this CatalogPricingRule.
        :rtype: str
        """
        return self._valid_from_local_time

    @valid_from_local_time.setter
    def valid_from_local_time(self, valid_from_local_time):
        """Sets the valid_from_local_time of this CatalogPricingRule.

        Represents the local time the pricing rule should be valid from. Represented in RFC 3339 partial-time format (HH:MM:SS). Partial seconds will be truncated.

        :param valid_from_local_time: The valid_from_local_time of this CatalogPricingRule.
        :type valid_from_local_time: str
        """

        self._valid_from_local_time = valid_from_local_time

    @property
    def valid_until_date(self):
        """Gets the valid_until_date of this CatalogPricingRule.

        Represents the date the Pricing Rule is valid until. Represented in RFC 3339 full-date format (YYYY-MM-DD).

        :return: The valid_until_date of this CatalogPricingRule.
        :rtype: str
        """
        return self._valid_until_date

    @valid_until_date.setter
    def valid_until_date(self, valid_until_date):
        """Sets the valid_until_date of this CatalogPricingRule.

        Represents the date the Pricing Rule is valid until. Represented in RFC 3339 full-date format (YYYY-MM-DD).

        :param valid_until_date: The valid_until_date of this CatalogPricingRule.
        :type valid_until_date: str
        """

        self._valid_until_date = valid_until_date

    @property
    def valid_until_local_time(self):
        """Gets the valid_until_local_time of this CatalogPricingRule.

        Represents the local time the pricing rule should be valid until. Represented in RFC 3339 partial-time format (HH:MM:SS). Partial seconds will be truncated.

        :return: The valid_until_local_time of this CatalogPricingRule.
        :rtype: str
        """
        return self._valid_until_local_time

    @valid_until_local_time.setter
    def valid_until_local_time(self, valid_until_local_time):
        """Sets the valid_until_local_time of this CatalogPricingRule.

        Represents the local time the pricing rule should be valid until. Represented in RFC 3339 partial-time format (HH:MM:SS). Partial seconds will be truncated.

        :param valid_until_local_time: The valid_until_local_time of this CatalogPricingRule.
        :type valid_until_local_time: str
        """

        self._valid_until_local_time = valid_until_local_time
