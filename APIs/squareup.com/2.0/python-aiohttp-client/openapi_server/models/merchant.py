# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Merchant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_name: str=None, country: str=None, currency: str=None, id: str=None, language_code: str=None, main_location_id: str=None, status: str=None):
        """Merchant - a model defined in OpenAPI

        :param business_name: The business_name of this Merchant.
        :param country: The country of this Merchant.
        :param currency: The currency of this Merchant.
        :param id: The id of this Merchant.
        :param language_code: The language_code of this Merchant.
        :param main_location_id: The main_location_id of this Merchant.
        :param status: The status of this Merchant.
        """
        self.openapi_types = {
            'business_name': str,
            'country': str,
            'currency': str,
            'id': str,
            'language_code': str,
            'main_location_id': str,
            'status': str
        }

        self.attribute_map = {
            'business_name': 'business_name',
            'country': 'country',
            'currency': 'currency',
            'id': 'id',
            'language_code': 'language_code',
            'main_location_id': 'main_location_id',
            'status': 'status'
        }

        self._business_name = business_name
        self._country = country
        self._currency = currency
        self._id = id
        self._language_code = language_code
        self._main_location_id = main_location_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Merchant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Merchant of this Merchant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_name(self):
        """Gets the business_name of this Merchant.

        The business name of the merchant.

        :return: The business_name of this Merchant.
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name):
        """Sets the business_name of this Merchant.

        The business name of the merchant.

        :param business_name: The business_name of this Merchant.
        :type business_name: str
        """

        self._business_name = business_name

    @property
    def country(self):
        """Gets the country of this Merchant.

        The country code associated with the merchant account, in ISO 3166 format.

        :return: The country of this Merchant.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Merchant.

        The country code associated with the merchant account, in ISO 3166 format.

        :param country: The country of this Merchant.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def currency(self):
        """Gets the currency of this Merchant.

        The currency associated with the merchant account, in ISO 4217 format.

        :return: The currency of this Merchant.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Merchant.

        The currency associated with the merchant account, in ISO 4217 format.

        :param currency: The currency of this Merchant.
        :type currency: str
        """

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this Merchant.

        The Square-issued ID of the merchant.

        :return: The id of this Merchant.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Merchant.

        The Square-issued ID of the merchant.

        :param id: The id of this Merchant.
        :type id: str
        """

        self._id = id

    @property
    def language_code(self):
        """Gets the language_code of this Merchant.

        The language code associated with the merchant account, in BCP 47 format.

        :return: The language_code of this Merchant.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this Merchant.

        The language code associated with the merchant account, in BCP 47 format.

        :param language_code: The language_code of this Merchant.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def main_location_id(self):
        """Gets the main_location_id of this Merchant.

        The ID of the main `Location` for this merchant.

        :return: The main_location_id of this Merchant.
        :rtype: str
        """
        return self._main_location_id

    @main_location_id.setter
    def main_location_id(self, main_location_id):
        """Sets the main_location_id of this Merchant.

        The ID of the main `Location` for this merchant.

        :param main_location_id: The main_location_id of this Merchant.
        :type main_location_id: str
        """

        self._main_location_id = main_location_id

    @property
    def status(self):
        """Gets the status of this Merchant.

        The merchant status, active or inactive.

        :return: The status of this Merchant.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Merchant.

        The merchant status, active or inactive.

        :param status: The status of this Merchant.
        :type status: str
        """

        self._status = status
