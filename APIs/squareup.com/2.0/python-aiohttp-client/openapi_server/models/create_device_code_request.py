# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_code import DeviceCode
from openapi_server import util


class CreateDeviceCodeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_code: DeviceCode=None, idempotency_key: str=None):
        """CreateDeviceCodeRequest - a model defined in OpenAPI

        :param device_code: The device_code of this CreateDeviceCodeRequest.
        :param idempotency_key: The idempotency_key of this CreateDeviceCodeRequest.
        """
        self.openapi_types = {
            'device_code': DeviceCode,
            'idempotency_key': str
        }

        self.attribute_map = {
            'device_code': 'device_code',
            'idempotency_key': 'idempotency_key'
        }

        self._device_code = device_code
        self._idempotency_key = idempotency_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDeviceCodeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDeviceCodeRequest of this CreateDeviceCodeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_code(self):
        """Gets the device_code of this CreateDeviceCodeRequest.


        :return: The device_code of this CreateDeviceCodeRequest.
        :rtype: DeviceCode
        """
        return self._device_code

    @device_code.setter
    def device_code(self, device_code):
        """Sets the device_code of this CreateDeviceCodeRequest.


        :param device_code: The device_code of this CreateDeviceCodeRequest.
        :type device_code: DeviceCode
        """
        if device_code is None:
            raise ValueError("Invalid value for `device_code`, must not be `None`")

        self._device_code = device_code

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this CreateDeviceCodeRequest.

        A unique string that identifies this CreateDeviceCode request. Keys can be any valid string but must be unique for every CreateDeviceCode request.  See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.

        :return: The idempotency_key of this CreateDeviceCodeRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this CreateDeviceCodeRequest.

        A unique string that identifies this CreateDeviceCode request. Keys can be any valid string but must be unique for every CreateDeviceCode request.  See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.

        :param idempotency_key: The idempotency_key of this CreateDeviceCodeRequest.
        :type idempotency_key: str
        """
        if idempotency_key is None:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if idempotency_key is not None and len(idempotency_key) > 128:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `128`")
        if idempotency_key is not None and len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key
