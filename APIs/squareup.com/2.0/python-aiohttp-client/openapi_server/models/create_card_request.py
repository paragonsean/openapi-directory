# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.card import Card
from openapi_server import util


class CreateCardRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card: Card=None, idempotency_key: str=None, source_id: str=None, verification_token: str=None):
        """CreateCardRequest - a model defined in OpenAPI

        :param card: The card of this CreateCardRequest.
        :param idempotency_key: The idempotency_key of this CreateCardRequest.
        :param source_id: The source_id of this CreateCardRequest.
        :param verification_token: The verification_token of this CreateCardRequest.
        """
        self.openapi_types = {
            'card': Card,
            'idempotency_key': str,
            'source_id': str,
            'verification_token': str
        }

        self.attribute_map = {
            'card': 'card',
            'idempotency_key': 'idempotency_key',
            'source_id': 'source_id',
            'verification_token': 'verification_token'
        }

        self._card = card
        self._idempotency_key = idempotency_key
        self._source_id = source_id
        self._verification_token = verification_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCardRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCardRequest of this CreateCardRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card(self):
        """Gets the card of this CreateCardRequest.


        :return: The card of this CreateCardRequest.
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this CreateCardRequest.


        :param card: The card of this CreateCardRequest.
        :type card: Card
        """
        if card is None:
            raise ValueError("Invalid value for `card`, must not be `None`")

        self._card = card

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this CreateCardRequest.

        A unique string that identifies this CreateCard request. Keys can be any valid string and must be unique for every request.  Max: 45 characters  See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.

        :return: The idempotency_key of this CreateCardRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this CreateCardRequest.

        A unique string that identifies this CreateCard request. Keys can be any valid string and must be unique for every request.  Max: 45 characters  See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.

        :param idempotency_key: The idempotency_key of this CreateCardRequest.
        :type idempotency_key: str
        """
        if idempotency_key is None:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if idempotency_key is not None and len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key

    @property
    def source_id(self):
        """Gets the source_id of this CreateCardRequest.

        The ID of the source which represents the card information to be stored. This can be a card nonce or a payment id.

        :return: The source_id of this CreateCardRequest.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this CreateCardRequest.

        The ID of the source which represents the card information to be stored. This can be a card nonce or a payment id.

        :param source_id: The source_id of this CreateCardRequest.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")
        if source_id is not None and len(source_id) > 16384:
            raise ValueError("Invalid value for `source_id`, length must be less than or equal to `16384`")
        if source_id is not None and len(source_id) < 1:
            raise ValueError("Invalid value for `source_id`, length must be greater than or equal to `1`")

        self._source_id = source_id

    @property
    def verification_token(self):
        """Gets the verification_token of this CreateCardRequest.

        An identifying token generated by [Payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer). Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.  See the [SCA Overview](https://developer.squareup.com/docs/sca-overview).

        :return: The verification_token of this CreateCardRequest.
        :rtype: str
        """
        return self._verification_token

    @verification_token.setter
    def verification_token(self, verification_token):
        """Sets the verification_token of this CreateCardRequest.

        An identifying token generated by [Payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer). Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.  See the [SCA Overview](https://developer.squareup.com/docs/sca-overview).

        :param verification_token: The verification_token of this CreateCardRequest.
        :type verification_token: str
        """

        self._verification_token = verification_token
