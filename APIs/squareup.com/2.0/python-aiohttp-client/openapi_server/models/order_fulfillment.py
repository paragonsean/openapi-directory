# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_fulfillment_pickup_details import OrderFulfillmentPickupDetails
from openapi_server.models.order_fulfillment_shipment_details import OrderFulfillmentShipmentDetails
from openapi_server import util


class OrderFulfillment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata: Dict[str, str]=None, pickup_details: OrderFulfillmentPickupDetails=None, shipment_details: OrderFulfillmentShipmentDetails=None, state: str=None, type: str=None, uid: str=None):
        """OrderFulfillment - a model defined in OpenAPI

        :param metadata: The metadata of this OrderFulfillment.
        :param pickup_details: The pickup_details of this OrderFulfillment.
        :param shipment_details: The shipment_details of this OrderFulfillment.
        :param state: The state of this OrderFulfillment.
        :param type: The type of this OrderFulfillment.
        :param uid: The uid of this OrderFulfillment.
        """
        self.openapi_types = {
            'metadata': Dict[str, str],
            'pickup_details': OrderFulfillmentPickupDetails,
            'shipment_details': OrderFulfillmentShipmentDetails,
            'state': str,
            'type': str,
            'uid': str
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'pickup_details': 'pickup_details',
            'shipment_details': 'shipment_details',
            'state': 'state',
            'type': 'type',
            'uid': 'uid'
        }

        self._metadata = metadata
        self._pickup_details = pickup_details
        self._shipment_details = shipment_details
        self._state = state
        self._type = type
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderFulfillment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderFulfillment of this OrderFulfillment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self):
        """Gets the metadata of this OrderFulfillment.

        Application-defined data attached to this fulfillment. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).

        :return: The metadata of this OrderFulfillment.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OrderFulfillment.

        Application-defined data attached to this fulfillment. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).

        :param metadata: The metadata of this OrderFulfillment.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def pickup_details(self):
        """Gets the pickup_details of this OrderFulfillment.


        :return: The pickup_details of this OrderFulfillment.
        :rtype: OrderFulfillmentPickupDetails
        """
        return self._pickup_details

    @pickup_details.setter
    def pickup_details(self, pickup_details):
        """Sets the pickup_details of this OrderFulfillment.


        :param pickup_details: The pickup_details of this OrderFulfillment.
        :type pickup_details: OrderFulfillmentPickupDetails
        """

        self._pickup_details = pickup_details

    @property
    def shipment_details(self):
        """Gets the shipment_details of this OrderFulfillment.


        :return: The shipment_details of this OrderFulfillment.
        :rtype: OrderFulfillmentShipmentDetails
        """
        return self._shipment_details

    @shipment_details.setter
    def shipment_details(self, shipment_details):
        """Sets the shipment_details of this OrderFulfillment.


        :param shipment_details: The shipment_details of this OrderFulfillment.
        :type shipment_details: OrderFulfillmentShipmentDetails
        """

        self._shipment_details = shipment_details

    @property
    def state(self):
        """Gets the state of this OrderFulfillment.

        The state of the fulfillment.

        :return: The state of this OrderFulfillment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this OrderFulfillment.

        The state of the fulfillment.

        :param state: The state of this OrderFulfillment.
        :type state: str
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this OrderFulfillment.

        The type of the fulfillment.

        :return: The type of this OrderFulfillment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderFulfillment.

        The type of the fulfillment.

        :param type: The type of this OrderFulfillment.
        :type type: str
        """

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this OrderFulfillment.

        A unique ID that identifies the fulfillment only within this order.

        :return: The uid of this OrderFulfillment.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OrderFulfillment.

        A unique ID that identifies the fulfillment only within this order.

        :param uid: The uid of this OrderFulfillment.
        :type uid: str
        """
        if uid is not None and len(uid) > 60:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `60`")

        self._uid = uid
