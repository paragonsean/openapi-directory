# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dispute_evidence_created_webhook_data import DisputeEvidenceCreatedWebhookData
from openapi_server import util


class DisputeEvidenceCreatedWebhook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, data: DisputeEvidenceCreatedWebhookData=None, event_id: str=None, location_id: str=None, merchant_id: str=None, type: str=None):
        """DisputeEvidenceCreatedWebhook - a model defined in OpenAPI

        :param created_at: The created_at of this DisputeEvidenceCreatedWebhook.
        :param data: The data of this DisputeEvidenceCreatedWebhook.
        :param event_id: The event_id of this DisputeEvidenceCreatedWebhook.
        :param location_id: The location_id of this DisputeEvidenceCreatedWebhook.
        :param merchant_id: The merchant_id of this DisputeEvidenceCreatedWebhook.
        :param type: The type of this DisputeEvidenceCreatedWebhook.
        """
        self.openapi_types = {
            'created_at': str,
            'data': DisputeEvidenceCreatedWebhookData,
            'event_id': str,
            'location_id': str,
            'merchant_id': str,
            'type': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'data': 'data',
            'event_id': 'event_id',
            'location_id': 'location_id',
            'merchant_id': 'merchant_id',
            'type': 'type'
        }

        self._created_at = created_at
        self._data = data
        self._event_id = event_id
        self._location_id = location_id
        self._merchant_id = merchant_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisputeEvidenceCreatedWebhook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisputeEvidenceCreatedWebhook of this DisputeEvidenceCreatedWebhook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this DisputeEvidenceCreatedWebhook.

        Timestamp of when the webhook event was created, in RFC 3339 format.

        :return: The created_at of this DisputeEvidenceCreatedWebhook.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DisputeEvidenceCreatedWebhook.

        Timestamp of when the webhook event was created, in RFC 3339 format.

        :param created_at: The created_at of this DisputeEvidenceCreatedWebhook.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def data(self):
        """Gets the data of this DisputeEvidenceCreatedWebhook.


        :return: The data of this DisputeEvidenceCreatedWebhook.
        :rtype: DisputeEvidenceCreatedWebhookData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this DisputeEvidenceCreatedWebhook.


        :param data: The data of this DisputeEvidenceCreatedWebhook.
        :type data: DisputeEvidenceCreatedWebhookData
        """

        self._data = data

    @property
    def event_id(self):
        """Gets the event_id of this DisputeEvidenceCreatedWebhook.

        A unique ID for the webhook event.

        :return: The event_id of this DisputeEvidenceCreatedWebhook.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this DisputeEvidenceCreatedWebhook.

        A unique ID for the webhook event.

        :param event_id: The event_id of this DisputeEvidenceCreatedWebhook.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def location_id(self):
        """Gets the location_id of this DisputeEvidenceCreatedWebhook.

        The ID of the target location associated with the event.

        :return: The location_id of this DisputeEvidenceCreatedWebhook.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this DisputeEvidenceCreatedWebhook.

        The ID of the target location associated with the event.

        :param location_id: The location_id of this DisputeEvidenceCreatedWebhook.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this DisputeEvidenceCreatedWebhook.

        The ID of the target merchant associated with the event.

        :return: The merchant_id of this DisputeEvidenceCreatedWebhook.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this DisputeEvidenceCreatedWebhook.

        The ID of the target merchant associated with the event.

        :param merchant_id: The merchant_id of this DisputeEvidenceCreatedWebhook.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def type(self):
        """Gets the type of this DisputeEvidenceCreatedWebhook.

        The type of event this represents.

        :return: The type of this DisputeEvidenceCreatedWebhook.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DisputeEvidenceCreatedWebhook.

        The type of event this represents.

        :param type: The type of this DisputeEvidenceCreatedWebhook.
        :type type: str
        """

        self._type = type
