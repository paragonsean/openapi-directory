# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ObtainTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, client_secret: str=None, code: str=None, grant_type: str=None, migration_token: str=None, redirect_uri: str=None, refresh_token: str=None, scopes: List[str]=None, short_lived: bool=None):
        """ObtainTokenRequest - a model defined in OpenAPI

        :param client_id: The client_id of this ObtainTokenRequest.
        :param client_secret: The client_secret of this ObtainTokenRequest.
        :param code: The code of this ObtainTokenRequest.
        :param grant_type: The grant_type of this ObtainTokenRequest.
        :param migration_token: The migration_token of this ObtainTokenRequest.
        :param redirect_uri: The redirect_uri of this ObtainTokenRequest.
        :param refresh_token: The refresh_token of this ObtainTokenRequest.
        :param scopes: The scopes of this ObtainTokenRequest.
        :param short_lived: The short_lived of this ObtainTokenRequest.
        """
        self.openapi_types = {
            'client_id': str,
            'client_secret': str,
            'code': str,
            'grant_type': str,
            'migration_token': str,
            'redirect_uri': str,
            'refresh_token': str,
            'scopes': List[str],
            'short_lived': bool
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'client_secret': 'client_secret',
            'code': 'code',
            'grant_type': 'grant_type',
            'migration_token': 'migration_token',
            'redirect_uri': 'redirect_uri',
            'refresh_token': 'refresh_token',
            'scopes': 'scopes',
            'short_lived': 'short_lived'
        }

        self._client_id = client_id
        self._client_secret = client_secret
        self._code = code
        self._grant_type = grant_type
        self._migration_token = migration_token
        self._redirect_uri = redirect_uri
        self._refresh_token = refresh_token
        self._scopes = scopes
        self._short_lived = short_lived

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObtainTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObtainTokenRequest of this ObtainTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this ObtainTokenRequest.

        The Square-issued ID of your application, available from the [developer dashboard](https://developer.squareup.com/apps).

        :return: The client_id of this ObtainTokenRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ObtainTokenRequest.

        The Square-issued ID of your application, available from the [developer dashboard](https://developer.squareup.com/apps).

        :param client_id: The client_id of this ObtainTokenRequest.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")
        if client_id is not None and len(client_id) > 191:
            raise ValueError("Invalid value for `client_id`, length must be less than or equal to `191`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this ObtainTokenRequest.

        The Square-issued application secret for your application, available from the [developer dashboard](https://developer.squareup.com/apps).

        :return: The client_secret of this ObtainTokenRequest.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this ObtainTokenRequest.

        The Square-issued application secret for your application, available from the [developer dashboard](https://developer.squareup.com/apps).

        :param client_secret: The client_secret of this ObtainTokenRequest.
        :type client_secret: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")
        if client_secret is not None and len(client_secret) > 1024:
            raise ValueError("Invalid value for `client_secret`, length must be less than or equal to `1024`")
        if client_secret is not None and len(client_secret) < 2:
            raise ValueError("Invalid value for `client_secret`, length must be greater than or equal to `2`")

        self._client_secret = client_secret

    @property
    def code(self):
        """Gets the code of this ObtainTokenRequest.

        The authorization code to exchange. This is required if `grant_type` is set to `authorization_code`, to indicate that the application wants to exchange an authorization code for an OAuth access token.

        :return: The code of this ObtainTokenRequest.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ObtainTokenRequest.

        The authorization code to exchange. This is required if `grant_type` is set to `authorization_code`, to indicate that the application wants to exchange an authorization code for an OAuth access token.

        :param code: The code of this ObtainTokenRequest.
        :type code: str
        """
        if code is not None and len(code) > 191:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `191`")
        if code is not None and len(code) < 0:
            raise ValueError("Invalid value for `code`, length must be greater than or equal to `0`")

        self._code = code

    @property
    def grant_type(self):
        """Gets the grant_type of this ObtainTokenRequest.

        Specifies the method to request an OAuth access token. Valid values are: `authorization_code`, `refresh_token`, and `migration_token`

        :return: The grant_type of this ObtainTokenRequest.
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this ObtainTokenRequest.

        Specifies the method to request an OAuth access token. Valid values are: `authorization_code`, `refresh_token`, and `migration_token`

        :param grant_type: The grant_type of this ObtainTokenRequest.
        :type grant_type: str
        """
        if grant_type is None:
            raise ValueError("Invalid value for `grant_type`, must not be `None`")
        if grant_type is not None and len(grant_type) > 20:
            raise ValueError("Invalid value for `grant_type`, length must be less than or equal to `20`")
        if grant_type is not None and len(grant_type) < 10:
            raise ValueError("Invalid value for `grant_type`, length must be greater than or equal to `10`")

        self._grant_type = grant_type

    @property
    def migration_token(self):
        """Gets the migration_token of this ObtainTokenRequest.

        Legacy OAuth access token obtained using a Connect API version prior to 2019-03-13. This parameter is required if `grant_type` is set to `migration_token` to indicate that the application wants to get a replacement OAuth access token. The response also returns a refresh token. For more information, see [Migrate to Using Refresh Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).

        :return: The migration_token of this ObtainTokenRequest.
        :rtype: str
        """
        return self._migration_token

    @migration_token.setter
    def migration_token(self, migration_token):
        """Sets the migration_token of this ObtainTokenRequest.

        Legacy OAuth access token obtained using a Connect API version prior to 2019-03-13. This parameter is required if `grant_type` is set to `migration_token` to indicate that the application wants to get a replacement OAuth access token. The response also returns a refresh token. For more information, see [Migrate to Using Refresh Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).

        :param migration_token: The migration_token of this ObtainTokenRequest.
        :type migration_token: str
        """
        if migration_token is not None and len(migration_token) > 1024:
            raise ValueError("Invalid value for `migration_token`, length must be less than or equal to `1024`")
        if migration_token is not None and len(migration_token) < 2:
            raise ValueError("Invalid value for `migration_token`, length must be greater than or equal to `2`")

        self._migration_token = migration_token

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this ObtainTokenRequest.

        The redirect URL assigned in the [developer dashboard](https://developer.squareup.com/apps).

        :return: The redirect_uri of this ObtainTokenRequest.
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this ObtainTokenRequest.

        The redirect URL assigned in the [developer dashboard](https://developer.squareup.com/apps).

        :param redirect_uri: The redirect_uri of this ObtainTokenRequest.
        :type redirect_uri: str
        """
        if redirect_uri is not None and len(redirect_uri) > 2048:
            raise ValueError("Invalid value for `redirect_uri`, length must be less than or equal to `2048`")
        if redirect_uri is not None and len(redirect_uri) < 0:
            raise ValueError("Invalid value for `redirect_uri`, length must be greater than or equal to `0`")

        self._redirect_uri = redirect_uri

    @property
    def refresh_token(self):
        """Gets the refresh_token of this ObtainTokenRequest.

        A valid refresh token for generating a new OAuth access token. A valid refresh token is required if `grant_type` is set to `refresh_token` , to indicate the application wants a replacement for an expired OAuth access token.

        :return: The refresh_token of this ObtainTokenRequest.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this ObtainTokenRequest.

        A valid refresh token for generating a new OAuth access token. A valid refresh token is required if `grant_type` is set to `refresh_token` , to indicate the application wants a replacement for an expired OAuth access token.

        :param refresh_token: The refresh_token of this ObtainTokenRequest.
        :type refresh_token: str
        """
        if refresh_token is not None and len(refresh_token) > 1024:
            raise ValueError("Invalid value for `refresh_token`, length must be less than or equal to `1024`")
        if refresh_token is not None and len(refresh_token) < 2:
            raise ValueError("Invalid value for `refresh_token`, length must be greater than or equal to `2`")

        self._refresh_token = refresh_token

    @property
    def scopes(self):
        """Gets the scopes of this ObtainTokenRequest.

        A JSON list of strings representing the permissions the application is requesting. For example: \"`[\"MERCHANT_PROFILE_READ\",\"PAYMENTS_READ\",\"BANK_ACCOUNTS_READ\"]`\" The access token returned in the response is granted the permissions that comprise the intersection between the requested list of permissions, and those that belong to the provided refresh token.

        :return: The scopes of this ObtainTokenRequest.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ObtainTokenRequest.

        A JSON list of strings representing the permissions the application is requesting. For example: \"`[\"MERCHANT_PROFILE_READ\",\"PAYMENTS_READ\",\"BANK_ACCOUNTS_READ\"]`\" The access token returned in the response is granted the permissions that comprise the intersection between the requested list of permissions, and those that belong to the provided refresh token.

        :param scopes: The scopes of this ObtainTokenRequest.
        :type scopes: List[str]
        """

        self._scopes = scopes

    @property
    def short_lived(self):
        """Gets the short_lived of this ObtainTokenRequest.

        A boolean indicating a request for a short-lived access token. The short-lived access token returned in the response will expire in 24 hours.

        :return: The short_lived of this ObtainTokenRequest.
        :rtype: bool
        """
        return self._short_lived

    @short_lived.setter
    def short_lived(self, short_lived):
        """Sets the short_lived of this ObtainTokenRequest.

        A boolean indicating a request for a short-lived access token. The short-lived access token returned in the response will expire in 24 hours.

        :param short_lived: The short_lived of this ObtainTokenRequest.
        :type short_lived: bool
        """

        self._short_lived = short_lived
