# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class CatalogQuickAmount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Money=None, ordinal: int=None, score: int=None, type: str=None):
        """CatalogQuickAmount - a model defined in OpenAPI

        :param amount: The amount of this CatalogQuickAmount.
        :param ordinal: The ordinal of this CatalogQuickAmount.
        :param score: The score of this CatalogQuickAmount.
        :param type: The type of this CatalogQuickAmount.
        """
        self.openapi_types = {
            'amount': Money,
            'ordinal': int,
            'score': int,
            'type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'ordinal': 'ordinal',
            'score': 'score',
            'type': 'type'
        }

        self._amount = amount
        self._ordinal = ordinal
        self._score = score
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogQuickAmount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogQuickAmount of this CatalogQuickAmount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CatalogQuickAmount.


        :return: The amount of this CatalogQuickAmount.
        :rtype: Money
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CatalogQuickAmount.


        :param amount: The amount of this CatalogQuickAmount.
        :type amount: Money
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def ordinal(self):
        """Gets the ordinal of this CatalogQuickAmount.

        The order in which this Quick Amount should be displayed.

        :return: The ordinal of this CatalogQuickAmount.
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this CatalogQuickAmount.

        The order in which this Quick Amount should be displayed.

        :param ordinal: The ordinal of this CatalogQuickAmount.
        :type ordinal: int
        """

        self._ordinal = ordinal

    @property
    def score(self):
        """Gets the score of this CatalogQuickAmount.

        Describes the ranking of the Quick Amount provided by machine learning model, in the range [0, 100]. MANUAL type amount will always have score = 100.

        :return: The score of this CatalogQuickAmount.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this CatalogQuickAmount.

        Describes the ranking of the Quick Amount provided by machine learning model, in the range [0, 100]. MANUAL type amount will always have score = 100.

        :param score: The score of this CatalogQuickAmount.
        :type score: int
        """

        self._score = score

    @property
    def type(self):
        """Gets the type of this CatalogQuickAmount.

        Represents the type of the Quick Amount.

        :return: The type of this CatalogQuickAmount.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CatalogQuickAmount.

        Represents the type of the Quick Amount.

        :param type: The type of this CatalogQuickAmount.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
