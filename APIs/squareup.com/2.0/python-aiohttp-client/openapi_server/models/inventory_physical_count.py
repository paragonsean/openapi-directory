# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_application import SourceApplication
from openapi_server import util


class InventoryPhysicalCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_object_id: str=None, catalog_object_type: str=None, created_at: str=None, employee_id: str=None, id: str=None, location_id: str=None, occurred_at: str=None, quantity: str=None, reference_id: str=None, source: SourceApplication=None, state: str=None):
        """InventoryPhysicalCount - a model defined in OpenAPI

        :param catalog_object_id: The catalog_object_id of this InventoryPhysicalCount.
        :param catalog_object_type: The catalog_object_type of this InventoryPhysicalCount.
        :param created_at: The created_at of this InventoryPhysicalCount.
        :param employee_id: The employee_id of this InventoryPhysicalCount.
        :param id: The id of this InventoryPhysicalCount.
        :param location_id: The location_id of this InventoryPhysicalCount.
        :param occurred_at: The occurred_at of this InventoryPhysicalCount.
        :param quantity: The quantity of this InventoryPhysicalCount.
        :param reference_id: The reference_id of this InventoryPhysicalCount.
        :param source: The source of this InventoryPhysicalCount.
        :param state: The state of this InventoryPhysicalCount.
        """
        self.openapi_types = {
            'catalog_object_id': str,
            'catalog_object_type': str,
            'created_at': str,
            'employee_id': str,
            'id': str,
            'location_id': str,
            'occurred_at': str,
            'quantity': str,
            'reference_id': str,
            'source': SourceApplication,
            'state': str
        }

        self.attribute_map = {
            'catalog_object_id': 'catalog_object_id',
            'catalog_object_type': 'catalog_object_type',
            'created_at': 'created_at',
            'employee_id': 'employee_id',
            'id': 'id',
            'location_id': 'location_id',
            'occurred_at': 'occurred_at',
            'quantity': 'quantity',
            'reference_id': 'reference_id',
            'source': 'source',
            'state': 'state'
        }

        self._catalog_object_id = catalog_object_id
        self._catalog_object_type = catalog_object_type
        self._created_at = created_at
        self._employee_id = employee_id
        self._id = id
        self._location_id = location_id
        self._occurred_at = occurred_at
        self._quantity = quantity
        self._reference_id = reference_id
        self._source = source
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InventoryPhysicalCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InventoryPhysicalCount of this InventoryPhysicalCount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_object_id(self):
        """Gets the catalog_object_id of this InventoryPhysicalCount.

        The Square-generated ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.

        :return: The catalog_object_id of this InventoryPhysicalCount.
        :rtype: str
        """
        return self._catalog_object_id

    @catalog_object_id.setter
    def catalog_object_id(self, catalog_object_id):
        """Sets the catalog_object_id of this InventoryPhysicalCount.

        The Square-generated ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.

        :param catalog_object_id: The catalog_object_id of this InventoryPhysicalCount.
        :type catalog_object_id: str
        """
        if catalog_object_id is not None and len(catalog_object_id) > 100:
            raise ValueError("Invalid value for `catalog_object_id`, length must be less than or equal to `100`")

        self._catalog_object_id = catalog_object_id

    @property
    def catalog_object_type(self):
        """Gets the catalog_object_type of this InventoryPhysicalCount.

        The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only supported for the `ITEM_VARIATION` type.

        :return: The catalog_object_type of this InventoryPhysicalCount.
        :rtype: str
        """
        return self._catalog_object_type

    @catalog_object_type.setter
    def catalog_object_type(self, catalog_object_type):
        """Sets the catalog_object_type of this InventoryPhysicalCount.

        The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only supported for the `ITEM_VARIATION` type.

        :param catalog_object_type: The catalog_object_type of this InventoryPhysicalCount.
        :type catalog_object_type: str
        """
        if catalog_object_type is not None and len(catalog_object_type) > 14:
            raise ValueError("Invalid value for `catalog_object_type`, length must be less than or equal to `14`")

        self._catalog_object_type = catalog_object_type

    @property
    def created_at(self):
        """Gets the created_at of this InventoryPhysicalCount.

        An RFC 3339-formatted timestamp that indicates when the physical count is received.

        :return: The created_at of this InventoryPhysicalCount.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InventoryPhysicalCount.

        An RFC 3339-formatted timestamp that indicates when the physical count is received.

        :param created_at: The created_at of this InventoryPhysicalCount.
        :type created_at: str
        """
        if created_at is not None and len(created_at) > 34:
            raise ValueError("Invalid value for `created_at`, length must be less than or equal to `34`")

        self._created_at = created_at

    @property
    def employee_id(self):
        """Gets the employee_id of this InventoryPhysicalCount.

        The Square-generated ID of the [Employee](https://developer.squareup.com/reference/square_2021-08-18/objects/Employee) responsible for the physical count.

        :return: The employee_id of this InventoryPhysicalCount.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this InventoryPhysicalCount.

        The Square-generated ID of the [Employee](https://developer.squareup.com/reference/square_2021-08-18/objects/Employee) responsible for the physical count.

        :param employee_id: The employee_id of this InventoryPhysicalCount.
        :type employee_id: str
        """
        if employee_id is not None and len(employee_id) > 100:
            raise ValueError("Invalid value for `employee_id`, length must be less than or equal to `100`")

        self._employee_id = employee_id

    @property
    def id(self):
        """Gets the id of this InventoryPhysicalCount.

        A unique Square-generated ID for the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount).

        :return: The id of this InventoryPhysicalCount.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InventoryPhysicalCount.

        A unique Square-generated ID for the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount).

        :param id: The id of this InventoryPhysicalCount.
        :type id: str
        """
        if id is not None and len(id) > 100:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `100`")

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this InventoryPhysicalCount.

        The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related quantity of items is being tracked.

        :return: The location_id of this InventoryPhysicalCount.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this InventoryPhysicalCount.

        The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related quantity of items is being tracked.

        :param location_id: The location_id of this InventoryPhysicalCount.
        :type location_id: str
        """
        if location_id is not None and len(location_id) > 100:
            raise ValueError("Invalid value for `location_id`, length must be less than or equal to `100`")

        self._location_id = location_id

    @property
    def occurred_at(self):
        """Gets the occurred_at of this InventoryPhysicalCount.

        A client-generated RFC 3339-formatted timestamp that indicates when the physical count was examined. For physical count updates, the `occurred_at` timestamp cannot be older than 24 hours or in the future relative to the time of the request.

        :return: The occurred_at of this InventoryPhysicalCount.
        :rtype: str
        """
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        """Sets the occurred_at of this InventoryPhysicalCount.

        A client-generated RFC 3339-formatted timestamp that indicates when the physical count was examined. For physical count updates, the `occurred_at` timestamp cannot be older than 24 hours or in the future relative to the time of the request.

        :param occurred_at: The occurred_at of this InventoryPhysicalCount.
        :type occurred_at: str
        """
        if occurred_at is not None and len(occurred_at) > 34:
            raise ValueError("Invalid value for `occurred_at`, length must be less than or equal to `34`")

        self._occurred_at = occurred_at

    @property
    def quantity(self):
        """Gets the quantity of this InventoryPhysicalCount.

        The number of items affected by the physical count as a decimal string. The number can support up to 5 digits after the decimal point.

        :return: The quantity of this InventoryPhysicalCount.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InventoryPhysicalCount.

        The number of items affected by the physical count as a decimal string. The number can support up to 5 digits after the decimal point.

        :param quantity: The quantity of this InventoryPhysicalCount.
        :type quantity: str
        """
        if quantity is not None and len(quantity) > 26:
            raise ValueError("Invalid value for `quantity`, length must be less than or equal to `26`")

        self._quantity = quantity

    @property
    def reference_id(self):
        """Gets the reference_id of this InventoryPhysicalCount.

        An optional ID provided by the application to tie the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to an external system.

        :return: The reference_id of this InventoryPhysicalCount.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this InventoryPhysicalCount.

        An optional ID provided by the application to tie the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to an external system.

        :param reference_id: The reference_id of this InventoryPhysicalCount.
        :type reference_id: str
        """
        if reference_id is not None and len(reference_id) > 255:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `255`")

        self._reference_id = reference_id

    @property
    def source(self):
        """Gets the source of this InventoryPhysicalCount.


        :return: The source of this InventoryPhysicalCount.
        :rtype: SourceApplication
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this InventoryPhysicalCount.


        :param source: The source of this InventoryPhysicalCount.
        :type source: SourceApplication
        """

        self._source = source

    @property
    def state(self):
        """Gets the state of this InventoryPhysicalCount.

        The current [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the related quantity of items.

        :return: The state of this InventoryPhysicalCount.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InventoryPhysicalCount.

        The current [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the related quantity of items.

        :param state: The state of this InventoryPhysicalCount.
        :type state: str
        """

        self._state = state
