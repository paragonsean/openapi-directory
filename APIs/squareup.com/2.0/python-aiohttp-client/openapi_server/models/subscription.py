# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, canceled_date: str=None, card_id: str=None, charged_through_date: str=None, created_at: str=None, customer_id: str=None, id: str=None, invoice_ids: List[str]=None, location_id: str=None, plan_id: str=None, price_override_money: Money=None, start_date: str=None, status: str=None, tax_percentage: str=None, timezone: str=None, version: int=None):
        """Subscription - a model defined in OpenAPI

        :param canceled_date: The canceled_date of this Subscription.
        :param card_id: The card_id of this Subscription.
        :param charged_through_date: The charged_through_date of this Subscription.
        :param created_at: The created_at of this Subscription.
        :param customer_id: The customer_id of this Subscription.
        :param id: The id of this Subscription.
        :param invoice_ids: The invoice_ids of this Subscription.
        :param location_id: The location_id of this Subscription.
        :param plan_id: The plan_id of this Subscription.
        :param price_override_money: The price_override_money of this Subscription.
        :param start_date: The start_date of this Subscription.
        :param status: The status of this Subscription.
        :param tax_percentage: The tax_percentage of this Subscription.
        :param timezone: The timezone of this Subscription.
        :param version: The version of this Subscription.
        """
        self.openapi_types = {
            'canceled_date': str,
            'card_id': str,
            'charged_through_date': str,
            'created_at': str,
            'customer_id': str,
            'id': str,
            'invoice_ids': List[str],
            'location_id': str,
            'plan_id': str,
            'price_override_money': Money,
            'start_date': str,
            'status': str,
            'tax_percentage': str,
            'timezone': str,
            'version': int
        }

        self.attribute_map = {
            'canceled_date': 'canceled_date',
            'card_id': 'card_id',
            'charged_through_date': 'charged_through_date',
            'created_at': 'created_at',
            'customer_id': 'customer_id',
            'id': 'id',
            'invoice_ids': 'invoice_ids',
            'location_id': 'location_id',
            'plan_id': 'plan_id',
            'price_override_money': 'price_override_money',
            'start_date': 'start_date',
            'status': 'status',
            'tax_percentage': 'tax_percentage',
            'timezone': 'timezone',
            'version': 'version'
        }

        self._canceled_date = canceled_date
        self._card_id = card_id
        self._charged_through_date = charged_through_date
        self._created_at = created_at
        self._customer_id = customer_id
        self._id = id
        self._invoice_ids = invoice_ids
        self._location_id = location_id
        self._plan_id = plan_id
        self._price_override_money = price_override_money
        self._start_date = start_date
        self._status = status
        self._tax_percentage = tax_percentage
        self._timezone = timezone
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def canceled_date(self):
        """Gets the canceled_date of this Subscription.

        The subscription cancellation date, in YYYY-MM-DD format (for example, 2013-01-15). On this date, the subscription status changes to `CANCELED` and the subscription billing stops. If you don't set this field, the subscription plan dictates if and when subscription ends.  You cannot update this field, you can only clear it.

        :return: The canceled_date of this Subscription.
        :rtype: str
        """
        return self._canceled_date

    @canceled_date.setter
    def canceled_date(self, canceled_date):
        """Sets the canceled_date of this Subscription.

        The subscription cancellation date, in YYYY-MM-DD format (for example, 2013-01-15). On this date, the subscription status changes to `CANCELED` and the subscription billing stops. If you don't set this field, the subscription plan dictates if and when subscription ends.  You cannot update this field, you can only clear it.

        :param canceled_date: The canceled_date of this Subscription.
        :type canceled_date: str
        """

        self._canceled_date = canceled_date

    @property
    def card_id(self):
        """Gets the card_id of this Subscription.

        The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card) that is charged for the subscription.

        :return: The card_id of this Subscription.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this Subscription.

        The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card) that is charged for the subscription.

        :param card_id: The card_id of this Subscription.
        :type card_id: str
        """

        self._card_id = card_id

    @property
    def charged_through_date(self):
        """Gets the charged_through_date of this Subscription.

        The date up to which the customer is invoiced for the subscription, in YYYY-MM-DD format (for example, 2013-01-15).  After the invoice is sent for a given billing period, this date will be the last day of the billing period. For example, suppose for the month of May a customer gets an invoice (or charged the card) on May 1. For the monthly billing scenario, this date is then set to May 31.

        :return: The charged_through_date of this Subscription.
        :rtype: str
        """
        return self._charged_through_date

    @charged_through_date.setter
    def charged_through_date(self, charged_through_date):
        """Sets the charged_through_date of this Subscription.

        The date up to which the customer is invoiced for the subscription, in YYYY-MM-DD format (for example, 2013-01-15).  After the invoice is sent for a given billing period, this date will be the last day of the billing period. For example, suppose for the month of May a customer gets an invoice (or charged the card) on May 1. For the monthly billing scenario, this date is then set to May 31.

        :param charged_through_date: The charged_through_date of this Subscription.
        :type charged_through_date: str
        """

        self._charged_through_date = charged_through_date

    @property
    def created_at(self):
        """Gets the created_at of this Subscription.

        The timestamp when the subscription was created, in RFC 3339 format.

        :return: The created_at of this Subscription.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Subscription.

        The timestamp when the subscription was created, in RFC 3339 format.

        :param created_at: The created_at of this Subscription.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def customer_id(self):
        """Gets the customer_id of this Subscription.

        The ID of the associated [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.

        :return: The customer_id of this Subscription.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Subscription.

        The ID of the associated [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.

        :param customer_id: The customer_id of this Subscription.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def id(self):
        """Gets the id of this Subscription.

        The Square-assigned ID of the subscription.

        :return: The id of this Subscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.

        The Square-assigned ID of the subscription.

        :param id: The id of this Subscription.
        :type id: str
        """
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")

        self._id = id

    @property
    def invoice_ids(self):
        """Gets the invoice_ids of this Subscription.

        The IDs of the [invoices](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) created for the subscription, listed in order when the invoices were created (oldest invoices appear first).

        :return: The invoice_ids of this Subscription.
        :rtype: List[str]
        """
        return self._invoice_ids

    @invoice_ids.setter
    def invoice_ids(self, invoice_ids):
        """Sets the invoice_ids of this Subscription.

        The IDs of the [invoices](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) created for the subscription, listed in order when the invoices were created (oldest invoices appear first).

        :param invoice_ids: The invoice_ids of this Subscription.
        :type invoice_ids: List[str]
        """

        self._invoice_ids = invoice_ids

    @property
    def location_id(self):
        """Gets the location_id of this Subscription.

        The ID of the location associated with the subscription.

        :return: The location_id of this Subscription.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Subscription.

        The ID of the location associated with the subscription.

        :param location_id: The location_id of this Subscription.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def plan_id(self):
        """Gets the plan_id of this Subscription.

        The ID of the associated [subscription plan](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogSubscriptionPlan).

        :return: The plan_id of this Subscription.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this Subscription.

        The ID of the associated [subscription plan](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogSubscriptionPlan).

        :param plan_id: The plan_id of this Subscription.
        :type plan_id: str
        """

        self._plan_id = plan_id

    @property
    def price_override_money(self):
        """Gets the price_override_money of this Subscription.


        :return: The price_override_money of this Subscription.
        :rtype: Money
        """
        return self._price_override_money

    @price_override_money.setter
    def price_override_money(self, price_override_money):
        """Sets the price_override_money of this Subscription.


        :param price_override_money: The price_override_money of this Subscription.
        :type price_override_money: Money
        """

        self._price_override_money = price_override_money

    @property
    def start_date(self):
        """Gets the start_date of this Subscription.

        The start date of the subscription, in YYYY-MM-DD format (for example, 2013-01-15).

        :return: The start_date of this Subscription.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Subscription.

        The start date of the subscription, in YYYY-MM-DD format (for example, 2013-01-15).

        :param start_date: The start_date of this Subscription.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this Subscription.

        The current status of the subscription.

        :return: The status of this Subscription.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Subscription.

        The current status of the subscription.

        :param status: The status of this Subscription.
        :type status: str
        """

        self._status = status

    @property
    def tax_percentage(self):
        """Gets the tax_percentage of this Subscription.

        The tax amount applied when billing the subscription. The percentage is expressed in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign. For example, a value of `7.5` corresponds to 7.5%.

        :return: The tax_percentage of this Subscription.
        :rtype: str
        """
        return self._tax_percentage

    @tax_percentage.setter
    def tax_percentage(self, tax_percentage):
        """Sets the tax_percentage of this Subscription.

        The tax amount applied when billing the subscription. The percentage is expressed in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign. For example, a value of `7.5` corresponds to 7.5%.

        :param tax_percentage: The tax_percentage of this Subscription.
        :type tax_percentage: str
        """

        self._tax_percentage = tax_percentage

    @property
    def timezone(self):
        """Gets the timezone of this Subscription.

        Timezone that will be used in date calculations for the subscription. Defaults to the timezone of the location based on `location_id`. Format: the IANA Timezone Database identifier for the location timezone (for example, `America/Los_Angeles`).

        :return: The timezone of this Subscription.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Subscription.

        Timezone that will be used in date calculations for the subscription. Defaults to the timezone of the location based on `location_id`. Format: the IANA Timezone Database identifier for the location timezone (for example, `America/Los_Angeles`).

        :param timezone: The timezone of this Subscription.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def version(self):
        """Gets the version of this Subscription.

        The version of the object. When updating an object, the version supplied must match the version in the database, otherwise the write will be rejected as conflicting.

        :return: The version of this Subscription.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Subscription.

        The version of the object. When updating an object, the version supplied must match the version in the database, otherwise the write will be rejected as conflicting.

        :param version: The version of this Subscription.
        :type version: int
        """

        self._version = version
