# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaxIds(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eu_vat: str=None, fr_naf: str=None, fr_siret: str=None):
        """TaxIds - a model defined in OpenAPI

        :param eu_vat: The eu_vat of this TaxIds.
        :param fr_naf: The fr_naf of this TaxIds.
        :param fr_siret: The fr_siret of this TaxIds.
        """
        self.openapi_types = {
            'eu_vat': str,
            'fr_naf': str,
            'fr_siret': str
        }

        self.attribute_map = {
            'eu_vat': 'eu_vat',
            'fr_naf': 'fr_naf',
            'fr_siret': 'fr_siret'
        }

        self._eu_vat = eu_vat
        self._fr_naf = fr_naf
        self._fr_siret = fr_siret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxIds':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxIds of this TaxIds.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eu_vat(self):
        """Gets the eu_vat of this TaxIds.

        The EU VAT number for this location. For example, \"IE3426675K\". If the EU VAT number is present, it is well-formed and has been validated with VIES, the VAT Information Exchange System.

        :return: The eu_vat of this TaxIds.
        :rtype: str
        """
        return self._eu_vat

    @eu_vat.setter
    def eu_vat(self, eu_vat):
        """Sets the eu_vat of this TaxIds.

        The EU VAT number for this location. For example, \"IE3426675K\". If the EU VAT number is present, it is well-formed and has been validated with VIES, the VAT Information Exchange System.

        :param eu_vat: The eu_vat of this TaxIds.
        :type eu_vat: str
        """

        self._eu_vat = eu_vat

    @property
    def fr_naf(self):
        """Gets the fr_naf of this TaxIds.

        The French government uses the NAF (Nomenclature des Activités Françaises) to display and track economic statistical data. This is also called the APE (Activite Principale de l’Entreprise) code. For example, 6910Z.

        :return: The fr_naf of this TaxIds.
        :rtype: str
        """
        return self._fr_naf

    @fr_naf.setter
    def fr_naf(self, fr_naf):
        """Sets the fr_naf of this TaxIds.

        The French government uses the NAF (Nomenclature des Activités Françaises) to display and track economic statistical data. This is also called the APE (Activite Principale de l’Entreprise) code. For example, 6910Z.

        :param fr_naf: The fr_naf of this TaxIds.
        :type fr_naf: str
        """

        self._fr_naf = fr_naf

    @property
    def fr_siret(self):
        """Gets the fr_siret of this TaxIds.

        The SIRET (Système d'Identification du Répertoire des Entreprises et de leurs Etablissements) number is a 14 digits code issued by the French INSEE. For example, \"39922799000021\".

        :return: The fr_siret of this TaxIds.
        :rtype: str
        """
        return self._fr_siret

    @fr_siret.setter
    def fr_siret(self, fr_siret):
        """Sets the fr_siret of this TaxIds.

        The SIRET (Système d'Identification du Répertoire des Entreprises et de leurs Etablissements) number is a 14 digits code issued by the French INSEE. For example, \"39922799000021\".

        :param fr_siret: The fr_siret of this TaxIds.
        :type fr_siret: str
        """

        self._fr_siret = fr_siret
