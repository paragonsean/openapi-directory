# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InventoryAdjustmentGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_state: str=None, id: str=None, root_adjustment_id: str=None, to_state: str=None):
        """InventoryAdjustmentGroup - a model defined in OpenAPI

        :param from_state: The from_state of this InventoryAdjustmentGroup.
        :param id: The id of this InventoryAdjustmentGroup.
        :param root_adjustment_id: The root_adjustment_id of this InventoryAdjustmentGroup.
        :param to_state: The to_state of this InventoryAdjustmentGroup.
        """
        self.openapi_types = {
            'from_state': str,
            'id': str,
            'root_adjustment_id': str,
            'to_state': str
        }

        self.attribute_map = {
            'from_state': 'from_state',
            'id': 'id',
            'root_adjustment_id': 'root_adjustment_id',
            'to_state': 'to_state'
        }

        self._from_state = from_state
        self._id = id
        self._root_adjustment_id = root_adjustment_id
        self._to_state = to_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InventoryAdjustmentGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InventoryAdjustmentGroup of this InventoryAdjustmentGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_state(self):
        """Gets the from_state of this InventoryAdjustmentGroup.

        Representative `from_state` for adjustments within the group. For example, for a group adjustment from `IN_STOCK` to `SOLD`, there can be two component adjustments in the group: one from `IN_STOCK`to `COMPOSED` and the other one from `COMPOSED` to `SOLD`. Here, the representative `from_state` for the `InventoryAdjustmentGroup` is `IN_STOCK`.

        :return: The from_state of this InventoryAdjustmentGroup.
        :rtype: str
        """
        return self._from_state

    @from_state.setter
    def from_state(self, from_state):
        """Sets the from_state of this InventoryAdjustmentGroup.

        Representative `from_state` for adjustments within the group. For example, for a group adjustment from `IN_STOCK` to `SOLD`, there can be two component adjustments in the group: one from `IN_STOCK`to `COMPOSED` and the other one from `COMPOSED` to `SOLD`. Here, the representative `from_state` for the `InventoryAdjustmentGroup` is `IN_STOCK`.

        :param from_state: The from_state of this InventoryAdjustmentGroup.
        :type from_state: str
        """

        self._from_state = from_state

    @property
    def id(self):
        """Gets the id of this InventoryAdjustmentGroup.

        A unique ID generated by Square for the `InventoryAdjustmentGroup`.

        :return: The id of this InventoryAdjustmentGroup.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InventoryAdjustmentGroup.

        A unique ID generated by Square for the `InventoryAdjustmentGroup`.

        :param id: The id of this InventoryAdjustmentGroup.
        :type id: str
        """
        if id is not None and len(id) > 100:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `100`")

        self._id = id

    @property
    def root_adjustment_id(self):
        """Gets the root_adjustment_id of this InventoryAdjustmentGroup.

        The inventory adjustment of the composed variation.

        :return: The root_adjustment_id of this InventoryAdjustmentGroup.
        :rtype: str
        """
        return self._root_adjustment_id

    @root_adjustment_id.setter
    def root_adjustment_id(self, root_adjustment_id):
        """Sets the root_adjustment_id of this InventoryAdjustmentGroup.

        The inventory adjustment of the composed variation.

        :param root_adjustment_id: The root_adjustment_id of this InventoryAdjustmentGroup.
        :type root_adjustment_id: str
        """
        if root_adjustment_id is not None and len(root_adjustment_id) > 100:
            raise ValueError("Invalid value for `root_adjustment_id`, length must be less than or equal to `100`")

        self._root_adjustment_id = root_adjustment_id

    @property
    def to_state(self):
        """Gets the to_state of this InventoryAdjustmentGroup.

        Representative `to_state` for adjustments within group. For example, for a group adjustment from `IN_STOCK` to `SOLD`, the two component adjustments in the group can be from `IN_STOCK` to `COMPOSED` and from `COMPOSED` to `SOLD`.  Here, the representative `to_state` of the `InventoryAdjustmentGroup` is `SOLD`.

        :return: The to_state of this InventoryAdjustmentGroup.
        :rtype: str
        """
        return self._to_state

    @to_state.setter
    def to_state(self, to_state):
        """Sets the to_state of this InventoryAdjustmentGroup.

        Representative `to_state` for adjustments within group. For example, for a group adjustment from `IN_STOCK` to `SOLD`, the two component adjustments in the group can be from `IN_STOCK` to `COMPOSED` and from `COMPOSED` to `SOLD`.  Here, the representative `to_state` of the `InventoryAdjustmentGroup` is `SOLD`.

        :param to_state: The to_state of this InventoryAdjustmentGroup.
        :type to_state: str
        """

        self._to_state = to_state
