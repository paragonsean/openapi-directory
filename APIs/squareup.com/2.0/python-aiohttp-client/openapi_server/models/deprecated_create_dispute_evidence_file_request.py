# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeprecatedCreateDisputeEvidenceFileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, evidence_type: str=None, idempotency_key: str=None):
        """DeprecatedCreateDisputeEvidenceFileRequest - a model defined in OpenAPI

        :param content_type: The content_type of this DeprecatedCreateDisputeEvidenceFileRequest.
        :param evidence_type: The evidence_type of this DeprecatedCreateDisputeEvidenceFileRequest.
        :param idempotency_key: The idempotency_key of this DeprecatedCreateDisputeEvidenceFileRequest.
        """
        self.openapi_types = {
            'content_type': str,
            'evidence_type': str,
            'idempotency_key': str
        }

        self.attribute_map = {
            'content_type': 'content_type',
            'evidence_type': 'evidence_type',
            'idempotency_key': 'idempotency_key'
        }

        self._content_type = content_type
        self._evidence_type = evidence_type
        self._idempotency_key = idempotency_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeprecatedCreateDisputeEvidenceFileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeprecatedCreateDisputeEvidenceFileRequest of this DeprecatedCreateDisputeEvidenceFileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this DeprecatedCreateDisputeEvidenceFileRequest.

        The MIME type of the uploaded file. The type can be image/heic, image/heif, image/jpeg, application/pdf, image/png, or image/tiff.

        :return: The content_type of this DeprecatedCreateDisputeEvidenceFileRequest.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this DeprecatedCreateDisputeEvidenceFileRequest.

        The MIME type of the uploaded file. The type can be image/heic, image/heif, image/jpeg, application/pdf, image/png, or image/tiff.

        :param content_type: The content_type of this DeprecatedCreateDisputeEvidenceFileRequest.
        :type content_type: str
        """
        if content_type is not None and len(content_type) > 40:
            raise ValueError("Invalid value for `content_type`, length must be less than or equal to `40`")
        if content_type is not None and len(content_type) < 1:
            raise ValueError("Invalid value for `content_type`, length must be greater than or equal to `1`")

        self._content_type = content_type

    @property
    def evidence_type(self):
        """Gets the evidence_type of this DeprecatedCreateDisputeEvidenceFileRequest.

        The type of evidence you are uploading.

        :return: The evidence_type of this DeprecatedCreateDisputeEvidenceFileRequest.
        :rtype: str
        """
        return self._evidence_type

    @evidence_type.setter
    def evidence_type(self, evidence_type):
        """Sets the evidence_type of this DeprecatedCreateDisputeEvidenceFileRequest.

        The type of evidence you are uploading.

        :param evidence_type: The evidence_type of this DeprecatedCreateDisputeEvidenceFileRequest.
        :type evidence_type: str
        """

        self._evidence_type = evidence_type

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this DeprecatedCreateDisputeEvidenceFileRequest.

        The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).

        :return: The idempotency_key of this DeprecatedCreateDisputeEvidenceFileRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this DeprecatedCreateDisputeEvidenceFileRequest.

        The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).

        :param idempotency_key: The idempotency_key of this DeprecatedCreateDisputeEvidenceFileRequest.
        :type idempotency_key: str
        """
        if idempotency_key is None:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if idempotency_key is not None and len(idempotency_key) > 45:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `45`")
        if idempotency_key is not None and len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key
