# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogTax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applies_to_custom_amounts: bool=None, calculation_phase: str=None, enabled: bool=None, inclusion_type: str=None, name: str=None, percentage: str=None):
        """CatalogTax - a model defined in OpenAPI

        :param applies_to_custom_amounts: The applies_to_custom_amounts of this CatalogTax.
        :param calculation_phase: The calculation_phase of this CatalogTax.
        :param enabled: The enabled of this CatalogTax.
        :param inclusion_type: The inclusion_type of this CatalogTax.
        :param name: The name of this CatalogTax.
        :param percentage: The percentage of this CatalogTax.
        """
        self.openapi_types = {
            'applies_to_custom_amounts': bool,
            'calculation_phase': str,
            'enabled': bool,
            'inclusion_type': str,
            'name': str,
            'percentage': str
        }

        self.attribute_map = {
            'applies_to_custom_amounts': 'applies_to_custom_amounts',
            'calculation_phase': 'calculation_phase',
            'enabled': 'enabled',
            'inclusion_type': 'inclusion_type',
            'name': 'name',
            'percentage': 'percentage'
        }

        self._applies_to_custom_amounts = applies_to_custom_amounts
        self._calculation_phase = calculation_phase
        self._enabled = enabled
        self._inclusion_type = inclusion_type
        self._name = name
        self._percentage = percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogTax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogTax of this CatalogTax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applies_to_custom_amounts(self):
        """Gets the applies_to_custom_amounts of this CatalogTax.

        If `true`, the fee applies to custom amounts entered into the Square Point of Sale app that are not associated with a particular `CatalogItem`.

        :return: The applies_to_custom_amounts of this CatalogTax.
        :rtype: bool
        """
        return self._applies_to_custom_amounts

    @applies_to_custom_amounts.setter
    def applies_to_custom_amounts(self, applies_to_custom_amounts):
        """Sets the applies_to_custom_amounts of this CatalogTax.

        If `true`, the fee applies to custom amounts entered into the Square Point of Sale app that are not associated with a particular `CatalogItem`.

        :param applies_to_custom_amounts: The applies_to_custom_amounts of this CatalogTax.
        :type applies_to_custom_amounts: bool
        """

        self._applies_to_custom_amounts = applies_to_custom_amounts

    @property
    def calculation_phase(self):
        """Gets the calculation_phase of this CatalogTax.

        Whether the tax is calculated based on a payment's subtotal or total.

        :return: The calculation_phase of this CatalogTax.
        :rtype: str
        """
        return self._calculation_phase

    @calculation_phase.setter
    def calculation_phase(self, calculation_phase):
        """Sets the calculation_phase of this CatalogTax.

        Whether the tax is calculated based on a payment's subtotal or total.

        :param calculation_phase: The calculation_phase of this CatalogTax.
        :type calculation_phase: str
        """

        self._calculation_phase = calculation_phase

    @property
    def enabled(self):
        """Gets the enabled of this CatalogTax.

        A Boolean flag to indicate whether the tax is displayed as enabled (`true`) in the Square Point of Sale app or not (`false`).

        :return: The enabled of this CatalogTax.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CatalogTax.

        A Boolean flag to indicate whether the tax is displayed as enabled (`true`) in the Square Point of Sale app or not (`false`).

        :param enabled: The enabled of this CatalogTax.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def inclusion_type(self):
        """Gets the inclusion_type of this CatalogTax.

        Whether the tax is `ADDITIVE` or `INCLUSIVE`.

        :return: The inclusion_type of this CatalogTax.
        :rtype: str
        """
        return self._inclusion_type

    @inclusion_type.setter
    def inclusion_type(self, inclusion_type):
        """Sets the inclusion_type of this CatalogTax.

        Whether the tax is `ADDITIVE` or `INCLUSIVE`.

        :param inclusion_type: The inclusion_type of this CatalogTax.
        :type inclusion_type: str
        """

        self._inclusion_type = inclusion_type

    @property
    def name(self):
        """Gets the name of this CatalogTax.

        The tax's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.

        :return: The name of this CatalogTax.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogTax.

        The tax's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.

        :param name: The name of this CatalogTax.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this CatalogTax.

        The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign. A value of `7.5` corresponds to 7.5%.

        :return: The percentage of this CatalogTax.
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this CatalogTax.

        The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign. A value of `7.5` corresponds to 7.5%.

        :param percentage: The percentage of this CatalogTax.
        :type percentage: str
        """

        self._percentage = percentage
