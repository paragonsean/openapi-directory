# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class GiftCardActivityRedeem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: Money=None, payment_id: str=None, reference_id: str=None):
        """GiftCardActivityRedeem - a model defined in OpenAPI

        :param amount_money: The amount_money of this GiftCardActivityRedeem.
        :param payment_id: The payment_id of this GiftCardActivityRedeem.
        :param reference_id: The reference_id of this GiftCardActivityRedeem.
        """
        self.openapi_types = {
            'amount_money': Money,
            'payment_id': str,
            'reference_id': str
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'payment_id': 'payment_id',
            'reference_id': 'reference_id'
        }

        self._amount_money = amount_money
        self._payment_id = payment_id
        self._reference_id = reference_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GiftCardActivityRedeem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GiftCardActivityRedeem of this GiftCardActivityRedeem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this GiftCardActivityRedeem.


        :return: The amount_money of this GiftCardActivityRedeem.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this GiftCardActivityRedeem.


        :param amount_money: The amount_money of this GiftCardActivityRedeem.
        :type amount_money: Money
        """
        if amount_money is None:
            raise ValueError("Invalid value for `amount_money`, must not be `None`")

        self._amount_money = amount_money

    @property
    def payment_id(self):
        """Gets the payment_id of this GiftCardActivityRedeem.

        When the Square Payments API is used, Redeem is not called on the Gift Cards API. However, when Square reads a Redeem activity from the Gift Cards API, developers need to know the associated `payment_id`.

        :return: The payment_id of this GiftCardActivityRedeem.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this GiftCardActivityRedeem.

        When the Square Payments API is used, Redeem is not called on the Gift Cards API. However, when Square reads a Redeem activity from the Gift Cards API, developers need to know the associated `payment_id`.

        :param payment_id: The payment_id of this GiftCardActivityRedeem.
        :type payment_id: str
        """

        self._payment_id = payment_id

    @property
    def reference_id(self):
        """Gets the reference_id of this GiftCardActivityRedeem.

        A client-specified ID to associate an entity, in another system, with this gift card activity. This can be used to track the order or payment related information when the Square Orders API is not being used.

        :return: The reference_id of this GiftCardActivityRedeem.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this GiftCardActivityRedeem.

        A client-specified ID to associate an entity, in another system, with this gift card activity. This can be used to track the order or payment related information when the Square Orders API is not being used.

        :param reference_id: The reference_id of this GiftCardActivityRedeem.
        :type reference_id: str
        """

        self._reference_id = reference_id
