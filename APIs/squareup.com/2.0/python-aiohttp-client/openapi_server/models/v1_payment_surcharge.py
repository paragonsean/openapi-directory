# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.v1_money import V1Money
from openapi_server.models.v1_payment_tax import V1PaymentTax
from openapi_server import util


class V1PaymentSurcharge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: V1Money=None, applied_money: V1Money=None, name: str=None, rate: str=None, surcharge_id: str=None, taxable: bool=None, taxes: List[V1PaymentTax]=None, type: str=None):
        """V1PaymentSurcharge - a model defined in OpenAPI

        :param amount_money: The amount_money of this V1PaymentSurcharge.
        :param applied_money: The applied_money of this V1PaymentSurcharge.
        :param name: The name of this V1PaymentSurcharge.
        :param rate: The rate of this V1PaymentSurcharge.
        :param surcharge_id: The surcharge_id of this V1PaymentSurcharge.
        :param taxable: The taxable of this V1PaymentSurcharge.
        :param taxes: The taxes of this V1PaymentSurcharge.
        :param type: The type of this V1PaymentSurcharge.
        """
        self.openapi_types = {
            'amount_money': V1Money,
            'applied_money': V1Money,
            'name': str,
            'rate': str,
            'surcharge_id': str,
            'taxable': bool,
            'taxes': List[V1PaymentTax],
            'type': str
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'applied_money': 'applied_money',
            'name': 'name',
            'rate': 'rate',
            'surcharge_id': 'surcharge_id',
            'taxable': 'taxable',
            'taxes': 'taxes',
            'type': 'type'
        }

        self._amount_money = amount_money
        self._applied_money = applied_money
        self._name = name
        self._rate = rate
        self._surcharge_id = surcharge_id
        self._taxable = taxable
        self._taxes = taxes
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V1PaymentSurcharge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V1PaymentSurcharge of this V1PaymentSurcharge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this V1PaymentSurcharge.


        :return: The amount_money of this V1PaymentSurcharge.
        :rtype: V1Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this V1PaymentSurcharge.


        :param amount_money: The amount_money of this V1PaymentSurcharge.
        :type amount_money: V1Money
        """

        self._amount_money = amount_money

    @property
    def applied_money(self):
        """Gets the applied_money of this V1PaymentSurcharge.


        :return: The applied_money of this V1PaymentSurcharge.
        :rtype: V1Money
        """
        return self._applied_money

    @applied_money.setter
    def applied_money(self, applied_money):
        """Sets the applied_money of this V1PaymentSurcharge.


        :param applied_money: The applied_money of this V1PaymentSurcharge.
        :type applied_money: V1Money
        """

        self._applied_money = applied_money

    @property
    def name(self):
        """Gets the name of this V1PaymentSurcharge.

        The name of the surcharge.

        :return: The name of this V1PaymentSurcharge.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1PaymentSurcharge.

        The name of the surcharge.

        :param name: The name of this V1PaymentSurcharge.
        :type name: str
        """

        self._name = name

    @property
    def rate(self):
        """Gets the rate of this V1PaymentSurcharge.

        The amount of the surcharge as a percentage. The percentage is provided as a string representing the decimal equivalent of the percentage. For example, \"0.7\" corresponds to a 7% surcharge. Exactly one of rate or amount_money should be set.

        :return: The rate of this V1PaymentSurcharge.
        :rtype: str
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this V1PaymentSurcharge.

        The amount of the surcharge as a percentage. The percentage is provided as a string representing the decimal equivalent of the percentage. For example, \"0.7\" corresponds to a 7% surcharge. Exactly one of rate or amount_money should be set.

        :param rate: The rate of this V1PaymentSurcharge.
        :type rate: str
        """

        self._rate = rate

    @property
    def surcharge_id(self):
        """Gets the surcharge_id of this V1PaymentSurcharge.

        A Square-issued unique identifier associated with the surcharge.

        :return: The surcharge_id of this V1PaymentSurcharge.
        :rtype: str
        """
        return self._surcharge_id

    @surcharge_id.setter
    def surcharge_id(self, surcharge_id):
        """Sets the surcharge_id of this V1PaymentSurcharge.

        A Square-issued unique identifier associated with the surcharge.

        :param surcharge_id: The surcharge_id of this V1PaymentSurcharge.
        :type surcharge_id: str
        """

        self._surcharge_id = surcharge_id

    @property
    def taxable(self):
        """Gets the taxable of this V1PaymentSurcharge.

        Indicates whether the surcharge is taxable.

        :return: The taxable of this V1PaymentSurcharge.
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """Sets the taxable of this V1PaymentSurcharge.

        Indicates whether the surcharge is taxable.

        :param taxable: The taxable of this V1PaymentSurcharge.
        :type taxable: bool
        """

        self._taxable = taxable

    @property
    def taxes(self):
        """Gets the taxes of this V1PaymentSurcharge.

        The list of taxes that should be applied to the surcharge.

        :return: The taxes of this V1PaymentSurcharge.
        :rtype: List[V1PaymentTax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this V1PaymentSurcharge.

        The list of taxes that should be applied to the surcharge.

        :param taxes: The taxes of this V1PaymentSurcharge.
        :type taxes: List[V1PaymentTax]
        """

        self._taxes = taxes

    @property
    def type(self):
        """Gets the type of this V1PaymentSurcharge.

        Indicates the source of the surcharge. For example, if it was applied as an automatic gratuity for a large group.

        :return: The type of this V1PaymentSurcharge.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1PaymentSurcharge.

        Indicates the source of the surcharge. For example, if it was applied as an automatic gratuity for a large group.

        :param type: The type of this V1PaymentSurcharge.
        :type type: str
        """

        self._type = type
