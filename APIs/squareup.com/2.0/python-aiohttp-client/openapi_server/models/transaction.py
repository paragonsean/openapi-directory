# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.refund import Refund
from openapi_server.models.tender import Tender
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, created_at: str=None, id: str=None, location_id: str=None, order_id: str=None, product: str=None, reference_id: str=None, refunds: List[Refund]=None, shipping_address: Address=None, tenders: List[Tender]=None):
        """Transaction - a model defined in OpenAPI

        :param client_id: The client_id of this Transaction.
        :param created_at: The created_at of this Transaction.
        :param id: The id of this Transaction.
        :param location_id: The location_id of this Transaction.
        :param order_id: The order_id of this Transaction.
        :param product: The product of this Transaction.
        :param reference_id: The reference_id of this Transaction.
        :param refunds: The refunds of this Transaction.
        :param shipping_address: The shipping_address of this Transaction.
        :param tenders: The tenders of this Transaction.
        """
        self.openapi_types = {
            'client_id': str,
            'created_at': str,
            'id': str,
            'location_id': str,
            'order_id': str,
            'product': str,
            'reference_id': str,
            'refunds': List[Refund],
            'shipping_address': Address,
            'tenders': List[Tender]
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'created_at': 'created_at',
            'id': 'id',
            'location_id': 'location_id',
            'order_id': 'order_id',
            'product': 'product',
            'reference_id': 'reference_id',
            'refunds': 'refunds',
            'shipping_address': 'shipping_address',
            'tenders': 'tenders'
        }

        self._client_id = client_id
        self._created_at = created_at
        self._id = id
        self._location_id = location_id
        self._order_id = order_id
        self._product = product
        self._reference_id = reference_id
        self._refunds = refunds
        self._shipping_address = shipping_address
        self._tenders = tenders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this Transaction.

        If the transaction was created in the Square Point of Sale app, this value is the ID generated for the transaction by Square Point of Sale.  This ID has no relationship to the transaction's canonical `id`, which is generated by Square's backend servers. This value is generated for bookkeeping purposes, in case the transaction cannot immediately be completed (for example, if the transaction is processed in offline mode).  It is not currently possible with the Connect API to perform a transaction lookup by this value.

        :return: The client_id of this Transaction.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Transaction.

        If the transaction was created in the Square Point of Sale app, this value is the ID generated for the transaction by Square Point of Sale.  This ID has no relationship to the transaction's canonical `id`, which is generated by Square's backend servers. This value is generated for bookkeeping purposes, in case the transaction cannot immediately be completed (for example, if the transaction is processed in offline mode).  It is not currently possible with the Connect API to perform a transaction lookup by this value.

        :param client_id: The client_id of this Transaction.
        :type client_id: str
        """
        if client_id is not None and len(client_id) > 192:
            raise ValueError("Invalid value for `client_id`, length must be less than or equal to `192`")

        self._client_id = client_id

    @property
    def created_at(self):
        """Gets the created_at of this Transaction.

        The timestamp for when the transaction was created, in RFC 3339 format.

        :return: The created_at of this Transaction.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Transaction.

        The timestamp for when the transaction was created, in RFC 3339 format.

        :param created_at: The created_at of this Transaction.
        :type created_at: str
        """
        if created_at is not None and len(created_at) > 32:
            raise ValueError("Invalid value for `created_at`, length must be less than or equal to `32`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Transaction.

        The transaction's unique ID, issued by Square payments servers.

        :return: The id of this Transaction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.

        The transaction's unique ID, issued by Square payments servers.

        :param id: The id of this Transaction.
        :type id: str
        """
        if id is not None and len(id) > 192:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `192`")

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this Transaction.

        The ID of the transaction's associated location.

        :return: The location_id of this Transaction.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Transaction.

        The ID of the transaction's associated location.

        :param location_id: The location_id of this Transaction.
        :type location_id: str
        """
        if location_id is not None and len(location_id) > 50:
            raise ValueError("Invalid value for `location_id`, length must be less than or equal to `50`")

        self._location_id = location_id

    @property
    def order_id(self):
        """Gets the order_id of this Transaction.

        The order_id is an identifier for the order associated with this transaction, if any.

        :return: The order_id of this Transaction.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Transaction.

        The order_id is an identifier for the order associated with this transaction, if any.

        :param order_id: The order_id of this Transaction.
        :type order_id: str
        """
        if order_id is not None and len(order_id) > 192:
            raise ValueError("Invalid value for `order_id`, length must be less than or equal to `192`")

        self._order_id = order_id

    @property
    def product(self):
        """Gets the product of this Transaction.

        The Square product that processed the transaction.

        :return: The product of this Transaction.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Transaction.

        The Square product that processed the transaction.

        :param product: The product of this Transaction.
        :type product: str
        """

        self._product = product

    @property
    def reference_id(self):
        """Gets the reference_id of this Transaction.

        If the transaction was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge) endpoint, this value is the same as the value provided for the `reference_id` parameter in the request to that endpoint. Otherwise, it is not set.

        :return: The reference_id of this Transaction.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this Transaction.

        If the transaction was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge) endpoint, this value is the same as the value provided for the `reference_id` parameter in the request to that endpoint. Otherwise, it is not set.

        :param reference_id: The reference_id of this Transaction.
        :type reference_id: str
        """
        if reference_id is not None and len(reference_id) > 40:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `40`")

        self._reference_id = reference_id

    @property
    def refunds(self):
        """Gets the refunds of this Transaction.

        Refunds that have been applied to any tender in the transaction.

        :return: The refunds of this Transaction.
        :rtype: List[Refund]
        """
        return self._refunds

    @refunds.setter
    def refunds(self, refunds):
        """Sets the refunds of this Transaction.

        Refunds that have been applied to any tender in the transaction.

        :param refunds: The refunds of this Transaction.
        :type refunds: List[Refund]
        """

        self._refunds = refunds

    @property
    def shipping_address(self):
        """Gets the shipping_address of this Transaction.


        :return: The shipping_address of this Transaction.
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this Transaction.


        :param shipping_address: The shipping_address of this Transaction.
        :type shipping_address: Address
        """

        self._shipping_address = shipping_address

    @property
    def tenders(self):
        """Gets the tenders of this Transaction.

        The tenders used to pay in the transaction.

        :return: The tenders of this Transaction.
        :rtype: List[Tender]
        """
        return self._tenders

    @tenders.setter
    def tenders(self, tenders):
        """Sets the tenders of this Transaction.

        The tenders used to pay in the transaction.

        :param tenders: The tenders of this Transaction.
        :type tenders: List[Tender]
        """

        self._tenders = tenders
