# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.appointment_segment import AppointmentSegment
from openapi_server import util


class Booking(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appointment_segments: List[AppointmentSegment]=None, created_at: str=None, customer_id: str=None, customer_note: str=None, id: str=None, location_id: str=None, seller_note: str=None, start_at: str=None, status: str=None, updated_at: str=None, version: int=None):
        """Booking - a model defined in OpenAPI

        :param appointment_segments: The appointment_segments of this Booking.
        :param created_at: The created_at of this Booking.
        :param customer_id: The customer_id of this Booking.
        :param customer_note: The customer_note of this Booking.
        :param id: The id of this Booking.
        :param location_id: The location_id of this Booking.
        :param seller_note: The seller_note of this Booking.
        :param start_at: The start_at of this Booking.
        :param status: The status of this Booking.
        :param updated_at: The updated_at of this Booking.
        :param version: The version of this Booking.
        """
        self.openapi_types = {
            'appointment_segments': List[AppointmentSegment],
            'created_at': str,
            'customer_id': str,
            'customer_note': str,
            'id': str,
            'location_id': str,
            'seller_note': str,
            'start_at': str,
            'status': str,
            'updated_at': str,
            'version': int
        }

        self.attribute_map = {
            'appointment_segments': 'appointment_segments',
            'created_at': 'created_at',
            'customer_id': 'customer_id',
            'customer_note': 'customer_note',
            'id': 'id',
            'location_id': 'location_id',
            'seller_note': 'seller_note',
            'start_at': 'start_at',
            'status': 'status',
            'updated_at': 'updated_at',
            'version': 'version'
        }

        self._appointment_segments = appointment_segments
        self._created_at = created_at
        self._customer_id = customer_id
        self._customer_note = customer_note
        self._id = id
        self._location_id = location_id
        self._seller_note = seller_note
        self._start_at = start_at
        self._status = status
        self._updated_at = updated_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Booking':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Booking of this Booking.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appointment_segments(self):
        """Gets the appointment_segments of this Booking.

        A list of appointment segments for this booking.

        :return: The appointment_segments of this Booking.
        :rtype: List[AppointmentSegment]
        """
        return self._appointment_segments

    @appointment_segments.setter
    def appointment_segments(self, appointment_segments):
        """Sets the appointment_segments of this Booking.

        A list of appointment segments for this booking.

        :param appointment_segments: The appointment_segments of this Booking.
        :type appointment_segments: List[AppointmentSegment]
        """

        self._appointment_segments = appointment_segments

    @property
    def created_at(self):
        """Gets the created_at of this Booking.

        The timestamp specifying the creation time of this booking, in RFC 3339 format.

        :return: The created_at of this Booking.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Booking.

        The timestamp specifying the creation time of this booking, in RFC 3339 format.

        :param created_at: The created_at of this Booking.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def customer_id(self):
        """Gets the customer_id of this Booking.

        The ID of the [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) object representing the customer attending this booking

        :return: The customer_id of this Booking.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Booking.

        The ID of the [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) object representing the customer attending this booking

        :param customer_id: The customer_id of this Booking.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def customer_note(self):
        """Gets the customer_note of this Booking.

        The free-text field for the customer to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a relevant [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.

        :return: The customer_note of this Booking.
        :rtype: str
        """
        return self._customer_note

    @customer_note.setter
    def customer_note(self, customer_note):
        """Sets the customer_note of this Booking.

        The free-text field for the customer to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a relevant [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.

        :param customer_note: The customer_note of this Booking.
        :type customer_note: str
        """
        if customer_note is not None and len(customer_note) > 4096:
            raise ValueError("Invalid value for `customer_note`, length must be less than or equal to `4096`")

        self._customer_note = customer_note

    @property
    def id(self):
        """Gets the id of this Booking.

        A unique ID of this object representing a booking.

        :return: The id of this Booking.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Booking.

        A unique ID of this object representing a booking.

        :param id: The id of this Booking.
        :type id: str
        """

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this Booking.

        The ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) object representing the location where the booked service is provided.

        :return: The location_id of this Booking.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Booking.

        The ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) object representing the location where the booked service is provided.

        :param location_id: The location_id of this Booking.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def seller_note(self):
        """Gets the seller_note of this Booking.

        The free-text field for the seller to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a specific [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance. This field should not be visible to customers.

        :return: The seller_note of this Booking.
        :rtype: str
        """
        return self._seller_note

    @seller_note.setter
    def seller_note(self, seller_note):
        """Sets the seller_note of this Booking.

        The free-text field for the seller to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a specific [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance. This field should not be visible to customers.

        :param seller_note: The seller_note of this Booking.
        :type seller_note: str
        """
        if seller_note is not None and len(seller_note) > 4096:
            raise ValueError("Invalid value for `seller_note`, length must be less than or equal to `4096`")

        self._seller_note = seller_note

    @property
    def start_at(self):
        """Gets the start_at of this Booking.

        The timestamp specifying the starting time of this booking, in RFC 3339 format.

        :return: The start_at of this Booking.
        :rtype: str
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this Booking.

        The timestamp specifying the starting time of this booking, in RFC 3339 format.

        :param start_at: The start_at of this Booking.
        :type start_at: str
        """

        self._start_at = start_at

    @property
    def status(self):
        """Gets the status of this Booking.

        The status of the booking, describing where the booking stands with respect to the booking state machine.

        :return: The status of this Booking.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Booking.

        The status of the booking, describing where the booking stands with respect to the booking state machine.

        :param status: The status of this Booking.
        :type status: str
        """

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this Booking.

        The timestamp specifying the most recent update time of this booking, in RFC 3339 format.

        :return: The updated_at of this Booking.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Booking.

        The timestamp specifying the most recent update time of this booking, in RFC 3339 format.

        :param updated_at: The updated_at of this Booking.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this Booking.

        The revision number for the booking used for optimistic concurrency.

        :return: The version of this Booking.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Booking.

        The revision number for the booking used for optimistic concurrency.

        :param version: The version of this Booking.
        :type version: int
        """
        if version is not None and version < 0:
            raise ValueError("Invalid value for `version`, must be a value greater than or equal to `0`")

        self._version = version
