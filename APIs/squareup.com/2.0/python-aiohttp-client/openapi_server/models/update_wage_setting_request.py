# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.wage_setting import WageSetting
from openapi_server import util


class UpdateWageSettingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, wage_setting: WageSetting=None):
        """UpdateWageSettingRequest - a model defined in OpenAPI

        :param wage_setting: The wage_setting of this UpdateWageSettingRequest.
        """
        self.openapi_types = {
            'wage_setting': WageSetting
        }

        self.attribute_map = {
            'wage_setting': 'wage_setting'
        }

        self._wage_setting = wage_setting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateWageSettingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateWageSettingRequest of this UpdateWageSettingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def wage_setting(self):
        """Gets the wage_setting of this UpdateWageSettingRequest.


        :return: The wage_setting of this UpdateWageSettingRequest.
        :rtype: WageSetting
        """
        return self._wage_setting

    @wage_setting.setter
    def wage_setting(self, wage_setting):
        """Sets the wage_setting of this UpdateWageSettingRequest.


        :param wage_setting: The wage_setting of this UpdateWageSettingRequest.
        :type wage_setting: WageSetting
        """
        if wage_setting is None:
            raise ValueError("Invalid value for `wage_setting`, must not be `None`")

        self._wage_setting = wage_setting
