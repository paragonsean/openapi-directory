# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListGiftCardActivitiesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_time: str=None, cursor: str=None, end_time: str=None, gift_card_id: str=None, limit: int=None, location_id: str=None, sort_order: str=None, type: str=None):
        """ListGiftCardActivitiesRequest - a model defined in OpenAPI

        :param begin_time: The begin_time of this ListGiftCardActivitiesRequest.
        :param cursor: The cursor of this ListGiftCardActivitiesRequest.
        :param end_time: The end_time of this ListGiftCardActivitiesRequest.
        :param gift_card_id: The gift_card_id of this ListGiftCardActivitiesRequest.
        :param limit: The limit of this ListGiftCardActivitiesRequest.
        :param location_id: The location_id of this ListGiftCardActivitiesRequest.
        :param sort_order: The sort_order of this ListGiftCardActivitiesRequest.
        :param type: The type of this ListGiftCardActivitiesRequest.
        """
        self.openapi_types = {
            'begin_time': str,
            'cursor': str,
            'end_time': str,
            'gift_card_id': str,
            'limit': int,
            'location_id': str,
            'sort_order': str,
            'type': str
        }

        self.attribute_map = {
            'begin_time': 'begin_time',
            'cursor': 'cursor',
            'end_time': 'end_time',
            'gift_card_id': 'gift_card_id',
            'limit': 'limit',
            'location_id': 'location_id',
            'sort_order': 'sort_order',
            'type': 'type'
        }

        self._begin_time = begin_time
        self._cursor = cursor
        self._end_time = end_time
        self._gift_card_id = gift_card_id
        self._limit = limit
        self._location_id = location_id
        self._sort_order = sort_order
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListGiftCardActivitiesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListGiftCardActivitiesRequest of this ListGiftCardActivitiesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_time(self):
        """Gets the begin_time of this ListGiftCardActivitiesRequest.

        The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.

        :return: The begin_time of this ListGiftCardActivitiesRequest.
        :rtype: str
        """
        return self._begin_time

    @begin_time.setter
    def begin_time(self, begin_time):
        """Sets the begin_time of this ListGiftCardActivitiesRequest.

        The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.

        :param begin_time: The begin_time of this ListGiftCardActivitiesRequest.
        :type begin_time: str
        """

        self._begin_time = begin_time

    @property
    def cursor(self):
        """Gets the cursor of this ListGiftCardActivitiesRequest.

        A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If you do not provide the cursor, the call returns the first page of the results.

        :return: The cursor of this ListGiftCardActivitiesRequest.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this ListGiftCardActivitiesRequest.

        A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If you do not provide the cursor, the call returns the first page of the results.

        :param cursor: The cursor of this ListGiftCardActivitiesRequest.
        :type cursor: str
        """

        self._cursor = cursor

    @property
    def end_time(self):
        """Gets the end_time of this ListGiftCardActivitiesRequest.

        The timestamp for the end of the reporting period, in RFC 3339 format. Inclusive. Default: The current time.

        :return: The end_time of this ListGiftCardActivitiesRequest.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ListGiftCardActivitiesRequest.

        The timestamp for the end of the reporting period, in RFC 3339 format. Inclusive. Default: The current time.

        :param end_time: The end_time of this ListGiftCardActivitiesRequest.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def gift_card_id(self):
        """Gets the gift_card_id of this ListGiftCardActivitiesRequest.

        If you provide a gift card ID, the endpoint returns activities that belong  to the specified gift card. Otherwise, the endpoint returns all gift card activities for  the seller.

        :return: The gift_card_id of this ListGiftCardActivitiesRequest.
        :rtype: str
        """
        return self._gift_card_id

    @gift_card_id.setter
    def gift_card_id(self, gift_card_id):
        """Sets the gift_card_id of this ListGiftCardActivitiesRequest.

        If you provide a gift card ID, the endpoint returns activities that belong  to the specified gift card. Otherwise, the endpoint returns all gift card activities for  the seller.

        :param gift_card_id: The gift_card_id of this ListGiftCardActivitiesRequest.
        :type gift_card_id: str
        """
        if gift_card_id is not None and len(gift_card_id) > 50:
            raise ValueError("Invalid value for `gift_card_id`, length must be less than or equal to `50`")

        self._gift_card_id = gift_card_id

    @property
    def limit(self):
        """Gets the limit of this ListGiftCardActivitiesRequest.

        If you provide a limit value, the endpoint returns the specified number  of results (or less) per page. A maximum value is 100. The default value is 50.

        :return: The limit of this ListGiftCardActivitiesRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListGiftCardActivitiesRequest.

        If you provide a limit value, the endpoint returns the specified number  of results (or less) per page. A maximum value is 100. The default value is 50.

        :param limit: The limit of this ListGiftCardActivitiesRequest.
        :type limit: int
        """
        if limit is not None and limit > 100:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `100`")
        if limit is not None and limit < 1:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")

        self._limit = limit

    @property
    def location_id(self):
        """Gets the location_id of this ListGiftCardActivitiesRequest.

        If you provide a location ID, the endpoint returns gift card activities for that location.  Otherwise, the endpoint returns gift card activities for all locations.

        :return: The location_id of this ListGiftCardActivitiesRequest.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ListGiftCardActivitiesRequest.

        If you provide a location ID, the endpoint returns gift card activities for that location.  Otherwise, the endpoint returns gift card activities for all locations.

        :param location_id: The location_id of this ListGiftCardActivitiesRequest.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def sort_order(self):
        """Gets the sort_order of this ListGiftCardActivitiesRequest.

        The order in which the endpoint returns the activities, based on `created_at`. - `ASC` - Oldest to newest. - `DESC` - Newest to oldest (default).

        :return: The sort_order of this ListGiftCardActivitiesRequest.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ListGiftCardActivitiesRequest.

        The order in which the endpoint returns the activities, based on `created_at`. - `ASC` - Oldest to newest. - `DESC` - Newest to oldest (default).

        :param sort_order: The sort_order of this ListGiftCardActivitiesRequest.
        :type sort_order: str
        """

        self._sort_order = sort_order

    @property
    def type(self):
        """Gets the type of this ListGiftCardActivitiesRequest.

        If you provide a type, the endpoint returns gift card activities of this type.  Otherwise, the endpoint returns all types of gift card activities.

        :return: The type of this ListGiftCardActivitiesRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ListGiftCardActivitiesRequest.

        If you provide a type, the endpoint returns gift card activities of this type.  Otherwise, the endpoint returns all types of gift card activities.

        :param type: The type of this ListGiftCardActivitiesRequest.
        :type type: str
        """

        self._type = type
