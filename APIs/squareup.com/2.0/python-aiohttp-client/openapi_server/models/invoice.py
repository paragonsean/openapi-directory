# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invoice_accepted_payment_methods import InvoiceAcceptedPaymentMethods
from openapi_server.models.invoice_custom_field import InvoiceCustomField
from openapi_server.models.invoice_payment_request import InvoicePaymentRequest
from openapi_server.models.invoice_recipient import InvoiceRecipient
from openapi_server.models.money import Money
from openapi_server import util


class Invoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted_payment_methods: InvoiceAcceptedPaymentMethods=None, created_at: str=None, custom_fields: List[InvoiceCustomField]=None, delivery_method: object=None, description: str=None, id: str=None, invoice_number: str=None, location_id: str=None, next_payment_amount_money: Money=None, order_id: str=None, payment_requests: List[InvoicePaymentRequest]=None, primary_recipient: InvoiceRecipient=None, public_url: str=None, scheduled_at: str=None, status: str=None, subscription_id: str=None, timezone: str=None, title: str=None, updated_at: str=None, version: int=None):
        """Invoice - a model defined in OpenAPI

        :param accepted_payment_methods: The accepted_payment_methods of this Invoice.
        :param created_at: The created_at of this Invoice.
        :param custom_fields: The custom_fields of this Invoice.
        :param delivery_method: The delivery_method of this Invoice.
        :param description: The description of this Invoice.
        :param id: The id of this Invoice.
        :param invoice_number: The invoice_number of this Invoice.
        :param location_id: The location_id of this Invoice.
        :param next_payment_amount_money: The next_payment_amount_money of this Invoice.
        :param order_id: The order_id of this Invoice.
        :param payment_requests: The payment_requests of this Invoice.
        :param primary_recipient: The primary_recipient of this Invoice.
        :param public_url: The public_url of this Invoice.
        :param scheduled_at: The scheduled_at of this Invoice.
        :param status: The status of this Invoice.
        :param subscription_id: The subscription_id of this Invoice.
        :param timezone: The timezone of this Invoice.
        :param title: The title of this Invoice.
        :param updated_at: The updated_at of this Invoice.
        :param version: The version of this Invoice.
        """
        self.openapi_types = {
            'accepted_payment_methods': InvoiceAcceptedPaymentMethods,
            'created_at': str,
            'custom_fields': List[InvoiceCustomField],
            'delivery_method': object,
            'description': str,
            'id': str,
            'invoice_number': str,
            'location_id': str,
            'next_payment_amount_money': Money,
            'order_id': str,
            'payment_requests': List[InvoicePaymentRequest],
            'primary_recipient': InvoiceRecipient,
            'public_url': str,
            'scheduled_at': str,
            'status': str,
            'subscription_id': str,
            'timezone': str,
            'title': str,
            'updated_at': str,
            'version': int
        }

        self.attribute_map = {
            'accepted_payment_methods': 'accepted_payment_methods',
            'created_at': 'created_at',
            'custom_fields': 'custom_fields',
            'delivery_method': 'delivery_method',
            'description': 'description',
            'id': 'id',
            'invoice_number': 'invoice_number',
            'location_id': 'location_id',
            'next_payment_amount_money': 'next_payment_amount_money',
            'order_id': 'order_id',
            'payment_requests': 'payment_requests',
            'primary_recipient': 'primary_recipient',
            'public_url': 'public_url',
            'scheduled_at': 'scheduled_at',
            'status': 'status',
            'subscription_id': 'subscription_id',
            'timezone': 'timezone',
            'title': 'title',
            'updated_at': 'updated_at',
            'version': 'version'
        }

        self._accepted_payment_methods = accepted_payment_methods
        self._created_at = created_at
        self._custom_fields = custom_fields
        self._delivery_method = delivery_method
        self._description = description
        self._id = id
        self._invoice_number = invoice_number
        self._location_id = location_id
        self._next_payment_amount_money = next_payment_amount_money
        self._order_id = order_id
        self._payment_requests = payment_requests
        self._primary_recipient = primary_recipient
        self._public_url = public_url
        self._scheduled_at = scheduled_at
        self._status = status
        self._subscription_id = subscription_id
        self._timezone = timezone
        self._title = title
        self._updated_at = updated_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Invoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Invoice of this Invoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted_payment_methods(self):
        """Gets the accepted_payment_methods of this Invoice.


        :return: The accepted_payment_methods of this Invoice.
        :rtype: InvoiceAcceptedPaymentMethods
        """
        return self._accepted_payment_methods

    @accepted_payment_methods.setter
    def accepted_payment_methods(self, accepted_payment_methods):
        """Sets the accepted_payment_methods of this Invoice.


        :param accepted_payment_methods: The accepted_payment_methods of this Invoice.
        :type accepted_payment_methods: InvoiceAcceptedPaymentMethods
        """

        self._accepted_payment_methods = accepted_payment_methods

    @property
    def created_at(self):
        """Gets the created_at of this Invoice.

        The timestamp when the invoice was created, in RFC 3339 format.

        :return: The created_at of this Invoice.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Invoice.

        The timestamp when the invoice was created, in RFC 3339 format.

        :param created_at: The created_at of this Invoice.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Invoice.

        Additional seller-defined fields to render on the invoice. These fields are visible to sellers and buyers on the Square-hosted invoice page and in emailed or PDF copies of invoices. For more information, see [Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).  Adding custom fields to an invoice requires an  [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).  Max: 2 custom fields

        :return: The custom_fields of this Invoice.
        :rtype: List[InvoiceCustomField]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Invoice.

        Additional seller-defined fields to render on the invoice. These fields are visible to sellers and buyers on the Square-hosted invoice page and in emailed or PDF copies of invoices. For more information, see [Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).  Adding custom fields to an invoice requires an  [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).  Max: 2 custom fields

        :param custom_fields: The custom_fields of this Invoice.
        :type custom_fields: List[InvoiceCustomField]
        """

        self._custom_fields = custom_fields

    @property
    def delivery_method(self):
        """Gets the delivery_method of this Invoice.


        :return: The delivery_method of this Invoice.
        :rtype: object
        """
        return self._delivery_method

    @delivery_method.setter
    def delivery_method(self, delivery_method):
        """Sets the delivery_method of this Invoice.


        :param delivery_method: The delivery_method of this Invoice.
        :type delivery_method: object
        """

        self._delivery_method = delivery_method

    @property
    def description(self):
        """Gets the description of this Invoice.

        The description of the invoice. This is visible to the customer receiving the invoice.

        :return: The description of this Invoice.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Invoice.

        The description of the invoice. This is visible to the customer receiving the invoice.

        :param description: The description of this Invoice.
        :type description: str
        """
        if description is not None and len(description) > 65536:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `65536`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this Invoice.

        The Square-assigned ID of the invoice.

        :return: The id of this Invoice.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invoice.

        The Square-assigned ID of the invoice.

        :param id: The id of this Invoice.
        :type id: str
        """

        self._id = id

    @property
    def invoice_number(self):
        """Gets the invoice_number of this Invoice.

        A user-friendly invoice number. The value is unique within a location. If not provided when creating an invoice, Square assigns a value. It increments from 1 and padded with zeros making it 7 characters long (for example, 0000001 and 0000002).

        :return: The invoice_number of this Invoice.
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this Invoice.

        A user-friendly invoice number. The value is unique within a location. If not provided when creating an invoice, Square assigns a value. It increments from 1 and padded with zeros making it 7 characters long (for example, 0000001 and 0000002).

        :param invoice_number: The invoice_number of this Invoice.
        :type invoice_number: str
        """
        if invoice_number is not None and len(invoice_number) > 191:
            raise ValueError("Invalid value for `invoice_number`, length must be less than or equal to `191`")
        if invoice_number is not None and len(invoice_number) < 1:
            raise ValueError("Invalid value for `invoice_number`, length must be greater than or equal to `1`")

        self._invoice_number = invoice_number

    @property
    def location_id(self):
        """Gets the location_id of this Invoice.

        The ID of the location that this invoice is associated with.   If specified in a `CreateInvoice` request, the value must match the `location_id` of the associated order.

        :return: The location_id of this Invoice.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Invoice.

        The ID of the location that this invoice is associated with.   If specified in a `CreateInvoice` request, the value must match the `location_id` of the associated order.

        :param location_id: The location_id of this Invoice.
        :type location_id: str
        """
        if location_id is not None and len(location_id) > 255:
            raise ValueError("Invalid value for `location_id`, length must be less than or equal to `255`")
        if location_id is not None and len(location_id) < 1:
            raise ValueError("Invalid value for `location_id`, length must be greater than or equal to `1`")

        self._location_id = location_id

    @property
    def next_payment_amount_money(self):
        """Gets the next_payment_amount_money of this Invoice.


        :return: The next_payment_amount_money of this Invoice.
        :rtype: Money
        """
        return self._next_payment_amount_money

    @next_payment_amount_money.setter
    def next_payment_amount_money(self, next_payment_amount_money):
        """Sets the next_payment_amount_money of this Invoice.


        :param next_payment_amount_money: The next_payment_amount_money of this Invoice.
        :type next_payment_amount_money: Money
        """

        self._next_payment_amount_money = next_payment_amount_money

    @property
    def order_id(self):
        """Gets the order_id of this Invoice.

        The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) for which the invoice is created.  This field is required when creating an invoice, and the order must be in the `OPEN` state.  To view the line items and other information for the associated order, call the  [RetrieveOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/retrieve-order) endpoint using the order ID.

        :return: The order_id of this Invoice.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Invoice.

        The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) for which the invoice is created.  This field is required when creating an invoice, and the order must be in the `OPEN` state.  To view the line items and other information for the associated order, call the  [RetrieveOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/retrieve-order) endpoint using the order ID.

        :param order_id: The order_id of this Invoice.
        :type order_id: str
        """
        if order_id is not None and len(order_id) > 255:
            raise ValueError("Invalid value for `order_id`, length must be less than or equal to `255`")
        if order_id is not None and len(order_id) < 1:
            raise ValueError("Invalid value for `order_id`, length must be greater than or equal to `1`")

        self._order_id = order_id

    @property
    def payment_requests(self):
        """Gets the payment_requests of this Invoice.

        The payment schedule for the invoice, represented by one or more payment requests that define payment settings, such as amount due and due date. An invoice supports the following payment request combinations: - One balance - One deposit with one balance - 2–12 installments  - One deposit with 2–12 installments  This field is required when creating an invoice. It must contain at least one payment request.  All payment requests for the invoice must equal the total order amount. For more information, see  [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).  Adding `INSTALLMENT` payment requests to an invoice requires an  [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).

        :return: The payment_requests of this Invoice.
        :rtype: List[InvoicePaymentRequest]
        """
        return self._payment_requests

    @payment_requests.setter
    def payment_requests(self, payment_requests):
        """Sets the payment_requests of this Invoice.

        The payment schedule for the invoice, represented by one or more payment requests that define payment settings, such as amount due and due date. An invoice supports the following payment request combinations: - One balance - One deposit with one balance - 2–12 installments  - One deposit with 2–12 installments  This field is required when creating an invoice. It must contain at least one payment request.  All payment requests for the invoice must equal the total order amount. For more information, see  [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).  Adding `INSTALLMENT` payment requests to an invoice requires an  [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).

        :param payment_requests: The payment_requests of this Invoice.
        :type payment_requests: List[InvoicePaymentRequest]
        """

        self._payment_requests = payment_requests

    @property
    def primary_recipient(self):
        """Gets the primary_recipient of this Invoice.


        :return: The primary_recipient of this Invoice.
        :rtype: InvoiceRecipient
        """
        return self._primary_recipient

    @primary_recipient.setter
    def primary_recipient(self, primary_recipient):
        """Sets the primary_recipient of this Invoice.


        :param primary_recipient: The primary_recipient of this Invoice.
        :type primary_recipient: InvoiceRecipient
        """

        self._primary_recipient = primary_recipient

    @property
    def public_url(self):
        """Gets the public_url of this Invoice.

        The URL of the Square-hosted invoice page. After you publish the invoice using the `PublishInvoice` endpoint, Square hosts the invoice page and returns the page URL in the response.

        :return: The public_url of this Invoice.
        :rtype: str
        """
        return self._public_url

    @public_url.setter
    def public_url(self, public_url):
        """Sets the public_url of this Invoice.

        The URL of the Square-hosted invoice page. After you publish the invoice using the `PublishInvoice` endpoint, Square hosts the invoice page and returns the page URL in the response.

        :param public_url: The public_url of this Invoice.
        :type public_url: str
        """

        self._public_url = public_url

    @property
    def scheduled_at(self):
        """Gets the scheduled_at of this Invoice.

        The timestamp when the invoice is scheduled for processing, in RFC 3339 format. After the invoice is published, Square processes the invoice on the specified date, according to the delivery method and payment request settings.  If the field is not set, Square processes the invoice immediately after it is published.

        :return: The scheduled_at of this Invoice.
        :rtype: str
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at):
        """Sets the scheduled_at of this Invoice.

        The timestamp when the invoice is scheduled for processing, in RFC 3339 format. After the invoice is published, Square processes the invoice on the specified date, according to the delivery method and payment request settings.  If the field is not set, Square processes the invoice immediately after it is published.

        :param scheduled_at: The scheduled_at of this Invoice.
        :type scheduled_at: str
        """

        self._scheduled_at = scheduled_at

    @property
    def status(self):
        """Gets the status of this Invoice.

        The status of the invoice.

        :return: The status of this Invoice.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Invoice.

        The status of the invoice.

        :param status: The status of this Invoice.
        :type status: str
        """

        self._status = status

    @property
    def subscription_id(self):
        """Gets the subscription_id of this Invoice.

        The ID of the [subscription](https://developer.squareup.com/reference/square_2021-08-18/objects/Subscription) associated with the invoice. This field is present only on subscription billing invoices.

        :return: The subscription_id of this Invoice.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this Invoice.

        The ID of the [subscription](https://developer.squareup.com/reference/square_2021-08-18/objects/Subscription) associated with the invoice. This field is present only on subscription billing invoices.

        :param subscription_id: The subscription_id of this Invoice.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def timezone(self):
        """Gets the timezone of this Invoice.

        The time zone used to interpret calendar dates on the invoice, such as `due_date`. When an invoice is created, this field is set to the `timezone` specified for the seller location. The value cannot be changed.  For example, a payment `due_date` of 2021-03-09 with a `timezone` of America/Los\\_Angeles becomes overdue at midnight on March 9 in America/Los\\_Angeles (which equals a UTC timestamp of 2021-03-10T08:00:00Z).

        :return: The timezone of this Invoice.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Invoice.

        The time zone used to interpret calendar dates on the invoice, such as `due_date`. When an invoice is created, this field is set to the `timezone` specified for the seller location. The value cannot be changed.  For example, a payment `due_date` of 2021-03-09 with a `timezone` of America/Los\\_Angeles becomes overdue at midnight on March 9 in America/Los\\_Angeles (which equals a UTC timestamp of 2021-03-10T08:00:00Z).

        :param timezone: The timezone of this Invoice.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def title(self):
        """Gets the title of this Invoice.

        The title of the invoice.

        :return: The title of this Invoice.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Invoice.

        The title of the invoice.

        :param title: The title of this Invoice.
        :type title: str
        """
        if title is not None and len(title) > 255:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `255`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Invoice.

        The timestamp when the invoice was last updated, in RFC 3339 format.

        :return: The updated_at of this Invoice.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Invoice.

        The timestamp when the invoice was last updated, in RFC 3339 format.

        :param updated_at: The updated_at of this Invoice.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this Invoice.

        The Square-assigned version number, which is incremented each time an update is committed to the invoice.

        :return: The version of this Invoice.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Invoice.

        The Square-assigned version number, which is incremented each time an update is committed to the invoice.

        :param version: The version of this Invoice.
        :type version: int
        """

        self._version = version
