# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogCustomAttributeDefinitionNumberConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, precision: int=None):
        """CatalogCustomAttributeDefinitionNumberConfig - a model defined in OpenAPI

        :param precision: The precision of this CatalogCustomAttributeDefinitionNumberConfig.
        """
        self.openapi_types = {
            'precision': int
        }

        self.attribute_map = {
            'precision': 'precision'
        }

        self._precision = precision

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogCustomAttributeDefinitionNumberConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogCustomAttributeDefinitionNumberConfig of this CatalogCustomAttributeDefinitionNumberConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def precision(self):
        """Gets the precision of this CatalogCustomAttributeDefinitionNumberConfig.

        An integer between 0 and 5 that represents the maximum number of positions allowed after the decimal in number custom attribute values For example:  - if the precision is 0, the quantity can be 1, 2, 3, etc. - if the precision is 1, the quantity can be 0.1, 0.2, etc. - if the precision is 2, the quantity can be 0.01, 0.12, etc.  Default: 5

        :return: The precision of this CatalogCustomAttributeDefinitionNumberConfig.
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this CatalogCustomAttributeDefinitionNumberConfig.

        An integer between 0 and 5 that represents the maximum number of positions allowed after the decimal in number custom attribute values For example:  - if the precision is 0, the quantity can be 1, 2, 3, etc. - if the precision is 1, the quantity can be 0.1, 0.2, etc. - if the precision is 2, the quantity can be 0.01, 0.12, etc.  Default: 5

        :param precision: The precision of this CatalogCustomAttributeDefinitionNumberConfig.
        :type precision: int
        """
        if precision is not None and precision > 5:
            raise ValueError("Invalid value for `precision`, must be a value less than or equal to `5`")
        if precision is not None and precision < 0:
            raise ValueError("Invalid value for `precision`, must be a value greater than or equal to `0`")

        self._precision = precision
