# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogItemOptionValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, description: str=None, item_option_id: str=None, name: str=None, ordinal: int=None):
        """CatalogItemOptionValue - a model defined in OpenAPI

        :param color: The color of this CatalogItemOptionValue.
        :param description: The description of this CatalogItemOptionValue.
        :param item_option_id: The item_option_id of this CatalogItemOptionValue.
        :param name: The name of this CatalogItemOptionValue.
        :param ordinal: The ordinal of this CatalogItemOptionValue.
        """
        self.openapi_types = {
            'color': str,
            'description': str,
            'item_option_id': str,
            'name': str,
            'ordinal': int
        }

        self.attribute_map = {
            'color': 'color',
            'description': 'description',
            'item_option_id': 'item_option_id',
            'name': 'name',
            'ordinal': 'ordinal'
        }

        self._color = color
        self._description = description
        self._item_option_id = item_option_id
        self._name = name
        self._ordinal = ordinal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogItemOptionValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogItemOptionValue of this CatalogItemOptionValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this CatalogItemOptionValue.

        The HTML-supported hex color for the item option (e.g., \"#ff8d4e85\"). Only displayed if `show_colors` is enabled on the parent `ItemOption`. When left unset, `color` defaults to white (\"#ffffff\") when `show_colors` is enabled on the parent `ItemOption`.

        :return: The color of this CatalogItemOptionValue.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CatalogItemOptionValue.

        The HTML-supported hex color for the item option (e.g., \"#ff8d4e85\"). Only displayed if `show_colors` is enabled on the parent `ItemOption`. When left unset, `color` defaults to white (\"#ffffff\") when `show_colors` is enabled on the parent `ItemOption`.

        :param color: The color of this CatalogItemOptionValue.
        :type color: str
        """

        self._color = color

    @property
    def description(self):
        """Gets the description of this CatalogItemOptionValue.

        A human-readable description for the option value. This is a searchable attribute for use in applicable query filters.

        :return: The description of this CatalogItemOptionValue.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CatalogItemOptionValue.

        A human-readable description for the option value. This is a searchable attribute for use in applicable query filters.

        :param description: The description of this CatalogItemOptionValue.
        :type description: str
        """

        self._description = description

    @property
    def item_option_id(self):
        """Gets the item_option_id of this CatalogItemOptionValue.

        Unique ID of the associated item option.

        :return: The item_option_id of this CatalogItemOptionValue.
        :rtype: str
        """
        return self._item_option_id

    @item_option_id.setter
    def item_option_id(self, item_option_id):
        """Sets the item_option_id of this CatalogItemOptionValue.

        Unique ID of the associated item option.

        :param item_option_id: The item_option_id of this CatalogItemOptionValue.
        :type item_option_id: str
        """

        self._item_option_id = item_option_id

    @property
    def name(self):
        """Gets the name of this CatalogItemOptionValue.

        Name of this item option value. This is a searchable attribute for use in applicable query filters.

        :return: The name of this CatalogItemOptionValue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogItemOptionValue.

        Name of this item option value. This is a searchable attribute for use in applicable query filters.

        :param name: The name of this CatalogItemOptionValue.
        :type name: str
        """

        self._name = name

    @property
    def ordinal(self):
        """Gets the ordinal of this CatalogItemOptionValue.

        Determines where this option value appears in a list of option values.

        :return: The ordinal of this CatalogItemOptionValue.
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this CatalogItemOptionValue.

        Determines where this option value appears in a list of option values.

        :param ordinal: The ordinal of this CatalogItemOptionValue.
        :type ordinal: int
        """

        self._ordinal = ordinal
