# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.card import Card
from openapi_server.models.card_payment_timeline import CardPaymentTimeline
from openapi_server.models.device_details import DeviceDetails
from openapi_server.models.error import Error
from openapi_server import util


class CardPaymentDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_cryptogram: str=None, application_identifier: str=None, application_name: str=None, auth_result_code: str=None, avs_status: str=None, card: Card=None, card_payment_timeline: CardPaymentTimeline=None, cvv_status: str=None, device_details: DeviceDetails=None, entry_method: str=None, errors: List[Error]=None, refund_requires_card_presence: bool=None, statement_description: str=None, status: str=None, verification_method: str=None, verification_results: str=None):
        """CardPaymentDetails - a model defined in OpenAPI

        :param application_cryptogram: The application_cryptogram of this CardPaymentDetails.
        :param application_identifier: The application_identifier of this CardPaymentDetails.
        :param application_name: The application_name of this CardPaymentDetails.
        :param auth_result_code: The auth_result_code of this CardPaymentDetails.
        :param avs_status: The avs_status of this CardPaymentDetails.
        :param card: The card of this CardPaymentDetails.
        :param card_payment_timeline: The card_payment_timeline of this CardPaymentDetails.
        :param cvv_status: The cvv_status of this CardPaymentDetails.
        :param device_details: The device_details of this CardPaymentDetails.
        :param entry_method: The entry_method of this CardPaymentDetails.
        :param errors: The errors of this CardPaymentDetails.
        :param refund_requires_card_presence: The refund_requires_card_presence of this CardPaymentDetails.
        :param statement_description: The statement_description of this CardPaymentDetails.
        :param status: The status of this CardPaymentDetails.
        :param verification_method: The verification_method of this CardPaymentDetails.
        :param verification_results: The verification_results of this CardPaymentDetails.
        """
        self.openapi_types = {
            'application_cryptogram': str,
            'application_identifier': str,
            'application_name': str,
            'auth_result_code': str,
            'avs_status': str,
            'card': Card,
            'card_payment_timeline': CardPaymentTimeline,
            'cvv_status': str,
            'device_details': DeviceDetails,
            'entry_method': str,
            'errors': List[Error],
            'refund_requires_card_presence': bool,
            'statement_description': str,
            'status': str,
            'verification_method': str,
            'verification_results': str
        }

        self.attribute_map = {
            'application_cryptogram': 'application_cryptogram',
            'application_identifier': 'application_identifier',
            'application_name': 'application_name',
            'auth_result_code': 'auth_result_code',
            'avs_status': 'avs_status',
            'card': 'card',
            'card_payment_timeline': 'card_payment_timeline',
            'cvv_status': 'cvv_status',
            'device_details': 'device_details',
            'entry_method': 'entry_method',
            'errors': 'errors',
            'refund_requires_card_presence': 'refund_requires_card_presence',
            'statement_description': 'statement_description',
            'status': 'status',
            'verification_method': 'verification_method',
            'verification_results': 'verification_results'
        }

        self._application_cryptogram = application_cryptogram
        self._application_identifier = application_identifier
        self._application_name = application_name
        self._auth_result_code = auth_result_code
        self._avs_status = avs_status
        self._card = card
        self._card_payment_timeline = card_payment_timeline
        self._cvv_status = cvv_status
        self._device_details = device_details
        self._entry_method = entry_method
        self._errors = errors
        self._refund_requires_card_presence = refund_requires_card_presence
        self._statement_description = statement_description
        self._status = status
        self._verification_method = verification_method
        self._verification_results = verification_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardPaymentDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardPaymentDetails of this CardPaymentDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_cryptogram(self):
        """Gets the application_cryptogram of this CardPaymentDetails.

        For EMV payments, the cryptogram generated for the payment.

        :return: The application_cryptogram of this CardPaymentDetails.
        :rtype: str
        """
        return self._application_cryptogram

    @application_cryptogram.setter
    def application_cryptogram(self, application_cryptogram):
        """Sets the application_cryptogram of this CardPaymentDetails.

        For EMV payments, the cryptogram generated for the payment.

        :param application_cryptogram: The application_cryptogram of this CardPaymentDetails.
        :type application_cryptogram: str
        """
        if application_cryptogram is not None and len(application_cryptogram) > 16:
            raise ValueError("Invalid value for `application_cryptogram`, length must be less than or equal to `16`")

        self._application_cryptogram = application_cryptogram

    @property
    def application_identifier(self):
        """Gets the application_identifier of this CardPaymentDetails.

        For EMV payments, the application ID identifies the EMV application used for the payment.

        :return: The application_identifier of this CardPaymentDetails.
        :rtype: str
        """
        return self._application_identifier

    @application_identifier.setter
    def application_identifier(self, application_identifier):
        """Sets the application_identifier of this CardPaymentDetails.

        For EMV payments, the application ID identifies the EMV application used for the payment.

        :param application_identifier: The application_identifier of this CardPaymentDetails.
        :type application_identifier: str
        """
        if application_identifier is not None and len(application_identifier) > 32:
            raise ValueError("Invalid value for `application_identifier`, length must be less than or equal to `32`")

        self._application_identifier = application_identifier

    @property
    def application_name(self):
        """Gets the application_name of this CardPaymentDetails.

        For EMV payments, the human-readable name of the EMV application used for the payment.

        :return: The application_name of this CardPaymentDetails.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this CardPaymentDetails.

        For EMV payments, the human-readable name of the EMV application used for the payment.

        :param application_name: The application_name of this CardPaymentDetails.
        :type application_name: str
        """
        if application_name is not None and len(application_name) > 16:
            raise ValueError("Invalid value for `application_name`, length must be less than or equal to `16`")

        self._application_name = application_name

    @property
    def auth_result_code(self):
        """Gets the auth_result_code of this CardPaymentDetails.

        The status code returned by the card issuer that describes the payment's authorization status.

        :return: The auth_result_code of this CardPaymentDetails.
        :rtype: str
        """
        return self._auth_result_code

    @auth_result_code.setter
    def auth_result_code(self, auth_result_code):
        """Sets the auth_result_code of this CardPaymentDetails.

        The status code returned by the card issuer that describes the payment's authorization status.

        :param auth_result_code: The auth_result_code of this CardPaymentDetails.
        :type auth_result_code: str
        """
        if auth_result_code is not None and len(auth_result_code) > 10:
            raise ValueError("Invalid value for `auth_result_code`, length must be less than or equal to `10`")

        self._auth_result_code = auth_result_code

    @property
    def avs_status(self):
        """Gets the avs_status of this CardPaymentDetails.

        The status code returned from the Address Verification System (AVS) check. The code can be `AVS_ACCEPTED`, `AVS_REJECTED`, or `AVS_NOT_CHECKED`.

        :return: The avs_status of this CardPaymentDetails.
        :rtype: str
        """
        return self._avs_status

    @avs_status.setter
    def avs_status(self, avs_status):
        """Sets the avs_status of this CardPaymentDetails.

        The status code returned from the Address Verification System (AVS) check. The code can be `AVS_ACCEPTED`, `AVS_REJECTED`, or `AVS_NOT_CHECKED`.

        :param avs_status: The avs_status of this CardPaymentDetails.
        :type avs_status: str
        """
        if avs_status is not None and len(avs_status) > 50:
            raise ValueError("Invalid value for `avs_status`, length must be less than or equal to `50`")

        self._avs_status = avs_status

    @property
    def card(self):
        """Gets the card of this CardPaymentDetails.


        :return: The card of this CardPaymentDetails.
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this CardPaymentDetails.


        :param card: The card of this CardPaymentDetails.
        :type card: Card
        """

        self._card = card

    @property
    def card_payment_timeline(self):
        """Gets the card_payment_timeline of this CardPaymentDetails.


        :return: The card_payment_timeline of this CardPaymentDetails.
        :rtype: CardPaymentTimeline
        """
        return self._card_payment_timeline

    @card_payment_timeline.setter
    def card_payment_timeline(self, card_payment_timeline):
        """Sets the card_payment_timeline of this CardPaymentDetails.


        :param card_payment_timeline: The card_payment_timeline of this CardPaymentDetails.
        :type card_payment_timeline: CardPaymentTimeline
        """

        self._card_payment_timeline = card_payment_timeline

    @property
    def cvv_status(self):
        """Gets the cvv_status of this CardPaymentDetails.

        The status code returned from the Card Verification Value (CVV) check. The code can be `CVV_ACCEPTED`, `CVV_REJECTED`, or `CVV_NOT_CHECKED`.

        :return: The cvv_status of this CardPaymentDetails.
        :rtype: str
        """
        return self._cvv_status

    @cvv_status.setter
    def cvv_status(self, cvv_status):
        """Sets the cvv_status of this CardPaymentDetails.

        The status code returned from the Card Verification Value (CVV) check. The code can be `CVV_ACCEPTED`, `CVV_REJECTED`, or `CVV_NOT_CHECKED`.

        :param cvv_status: The cvv_status of this CardPaymentDetails.
        :type cvv_status: str
        """
        if cvv_status is not None and len(cvv_status) > 50:
            raise ValueError("Invalid value for `cvv_status`, length must be less than or equal to `50`")

        self._cvv_status = cvv_status

    @property
    def device_details(self):
        """Gets the device_details of this CardPaymentDetails.


        :return: The device_details of this CardPaymentDetails.
        :rtype: DeviceDetails
        """
        return self._device_details

    @device_details.setter
    def device_details(self, device_details):
        """Sets the device_details of this CardPaymentDetails.


        :param device_details: The device_details of this CardPaymentDetails.
        :type device_details: DeviceDetails
        """

        self._device_details = device_details

    @property
    def entry_method(self):
        """Gets the entry_method of this CardPaymentDetails.

        The method used to enter the card's details for the payment. The method can be `KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`.

        :return: The entry_method of this CardPaymentDetails.
        :rtype: str
        """
        return self._entry_method

    @entry_method.setter
    def entry_method(self, entry_method):
        """Sets the entry_method of this CardPaymentDetails.

        The method used to enter the card's details for the payment. The method can be `KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`.

        :param entry_method: The entry_method of this CardPaymentDetails.
        :type entry_method: str
        """
        if entry_method is not None and len(entry_method) > 50:
            raise ValueError("Invalid value for `entry_method`, length must be less than or equal to `50`")

        self._entry_method = entry_method

    @property
    def errors(self):
        """Gets the errors of this CardPaymentDetails.

        Information about errors encountered during the request.

        :return: The errors of this CardPaymentDetails.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this CardPaymentDetails.

        Information about errors encountered during the request.

        :param errors: The errors of this CardPaymentDetails.
        :type errors: List[Error]
        """

        self._errors = errors

    @property
    def refund_requires_card_presence(self):
        """Gets the refund_requires_card_presence of this CardPaymentDetails.

        Whether the card must be physically present for the payment to be refunded.  If set to `true`, the card must be present.

        :return: The refund_requires_card_presence of this CardPaymentDetails.
        :rtype: bool
        """
        return self._refund_requires_card_presence

    @refund_requires_card_presence.setter
    def refund_requires_card_presence(self, refund_requires_card_presence):
        """Sets the refund_requires_card_presence of this CardPaymentDetails.

        Whether the card must be physically present for the payment to be refunded.  If set to `true`, the card must be present.

        :param refund_requires_card_presence: The refund_requires_card_presence of this CardPaymentDetails.
        :type refund_requires_card_presence: bool
        """

        self._refund_requires_card_presence = refund_requires_card_presence

    @property
    def statement_description(self):
        """Gets the statement_description of this CardPaymentDetails.

        The statement description sent to the card networks.  Note: The actual statement description varies and is likely to be truncated and appended with additional information on a per issuer basis.

        :return: The statement_description of this CardPaymentDetails.
        :rtype: str
        """
        return self._statement_description

    @statement_description.setter
    def statement_description(self, statement_description):
        """Sets the statement_description of this CardPaymentDetails.

        The statement description sent to the card networks.  Note: The actual statement description varies and is likely to be truncated and appended with additional information on a per issuer basis.

        :param statement_description: The statement_description of this CardPaymentDetails.
        :type statement_description: str
        """
        if statement_description is not None and len(statement_description) > 50:
            raise ValueError("Invalid value for `statement_description`, length must be less than or equal to `50`")

        self._statement_description = statement_description

    @property
    def status(self):
        """Gets the status of this CardPaymentDetails.

        The card payment's current state. The state can be AUTHORIZED, CAPTURED, VOIDED, or FAILED.

        :return: The status of this CardPaymentDetails.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CardPaymentDetails.

        The card payment's current state. The state can be AUTHORIZED, CAPTURED, VOIDED, or FAILED.

        :param status: The status of this CardPaymentDetails.
        :type status: str
        """
        if status is not None and len(status) > 50:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `50`")

        self._status = status

    @property
    def verification_method(self):
        """Gets the verification_method of this CardPaymentDetails.

        For EMV payments, the method used to verify the cardholder's identity. The method can be `PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`.

        :return: The verification_method of this CardPaymentDetails.
        :rtype: str
        """
        return self._verification_method

    @verification_method.setter
    def verification_method(self, verification_method):
        """Sets the verification_method of this CardPaymentDetails.

        For EMV payments, the method used to verify the cardholder's identity. The method can be `PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`.

        :param verification_method: The verification_method of this CardPaymentDetails.
        :type verification_method: str
        """
        if verification_method is not None and len(verification_method) > 50:
            raise ValueError("Invalid value for `verification_method`, length must be less than or equal to `50`")

        self._verification_method = verification_method

    @property
    def verification_results(self):
        """Gets the verification_results of this CardPaymentDetails.

        For EMV payments, the results of the cardholder verification. The result can be `SUCCESS`, `FAILURE`, or `UNKNOWN`.

        :return: The verification_results of this CardPaymentDetails.
        :rtype: str
        """
        return self._verification_results

    @verification_results.setter
    def verification_results(self, verification_results):
        """Sets the verification_results of this CardPaymentDetails.

        For EMV payments, the results of the cardholder verification. The result can be `SUCCESS`, `FAILURE`, or `UNKNOWN`.

        :param verification_results: The verification_results of this CardPaymentDetails.
        :type verification_results: str
        """
        if verification_results is not None and len(verification_results) > 50:
            raise ValueError("Invalid value for `verification_results`, length must be less than or equal to `50`")

        self._verification_results = verification_results
