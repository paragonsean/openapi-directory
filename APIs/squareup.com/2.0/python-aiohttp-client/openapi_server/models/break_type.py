# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BreakType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, break_name: str=None, created_at: str=None, expected_duration: str=None, id: str=None, is_paid: bool=None, location_id: str=None, updated_at: str=None, version: int=None):
        """BreakType - a model defined in OpenAPI

        :param break_name: The break_name of this BreakType.
        :param created_at: The created_at of this BreakType.
        :param expected_duration: The expected_duration of this BreakType.
        :param id: The id of this BreakType.
        :param is_paid: The is_paid of this BreakType.
        :param location_id: The location_id of this BreakType.
        :param updated_at: The updated_at of this BreakType.
        :param version: The version of this BreakType.
        """
        self.openapi_types = {
            'break_name': str,
            'created_at': str,
            'expected_duration': str,
            'id': str,
            'is_paid': bool,
            'location_id': str,
            'updated_at': str,
            'version': int
        }

        self.attribute_map = {
            'break_name': 'break_name',
            'created_at': 'created_at',
            'expected_duration': 'expected_duration',
            'id': 'id',
            'is_paid': 'is_paid',
            'location_id': 'location_id',
            'updated_at': 'updated_at',
            'version': 'version'
        }

        self._break_name = break_name
        self._created_at = created_at
        self._expected_duration = expected_duration
        self._id = id
        self._is_paid = is_paid
        self._location_id = location_id
        self._updated_at = updated_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BreakType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BreakType of this BreakType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def break_name(self):
        """Gets the break_name of this BreakType.

        A human-readable name for this type of break. The name is displayed to employees in Square products.

        :return: The break_name of this BreakType.
        :rtype: str
        """
        return self._break_name

    @break_name.setter
    def break_name(self, break_name):
        """Sets the break_name of this BreakType.

        A human-readable name for this type of break. The name is displayed to employees in Square products.

        :param break_name: The break_name of this BreakType.
        :type break_name: str
        """
        if break_name is None:
            raise ValueError("Invalid value for `break_name`, must not be `None`")
        if break_name is not None and len(break_name) < 1:
            raise ValueError("Invalid value for `break_name`, length must be greater than or equal to `1`")

        self._break_name = break_name

    @property
    def created_at(self):
        """Gets the created_at of this BreakType.

        A read-only timestamp in RFC 3339 format.

        :return: The created_at of this BreakType.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BreakType.

        A read-only timestamp in RFC 3339 format.

        :param created_at: The created_at of this BreakType.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def expected_duration(self):
        """Gets the expected_duration of this BreakType.

        Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of this break. Precision less than minutes is truncated.

        :return: The expected_duration of this BreakType.
        :rtype: str
        """
        return self._expected_duration

    @expected_duration.setter
    def expected_duration(self, expected_duration):
        """Sets the expected_duration of this BreakType.

        Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of this break. Precision less than minutes is truncated.

        :param expected_duration: The expected_duration of this BreakType.
        :type expected_duration: str
        """
        if expected_duration is None:
            raise ValueError("Invalid value for `expected_duration`, must not be `None`")
        if expected_duration is not None and len(expected_duration) < 1:
            raise ValueError("Invalid value for `expected_duration`, length must be greater than or equal to `1`")

        self._expected_duration = expected_duration

    @property
    def id(self):
        """Gets the id of this BreakType.

        The UUID for this object.

        :return: The id of this BreakType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BreakType.

        The UUID for this object.

        :param id: The id of this BreakType.
        :type id: str
        """
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")

        self._id = id

    @property
    def is_paid(self):
        """Gets the is_paid of this BreakType.

        Whether this break counts towards time worked for compensation purposes.

        :return: The is_paid of this BreakType.
        :rtype: bool
        """
        return self._is_paid

    @is_paid.setter
    def is_paid(self, is_paid):
        """Sets the is_paid of this BreakType.

        Whether this break counts towards time worked for compensation purposes.

        :param is_paid: The is_paid of this BreakType.
        :type is_paid: bool
        """
        if is_paid is None:
            raise ValueError("Invalid value for `is_paid`, must not be `None`")

        self._is_paid = is_paid

    @property
    def location_id(self):
        """Gets the location_id of this BreakType.

        The ID of the business location this type of break applies to.

        :return: The location_id of this BreakType.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this BreakType.

        The ID of the business location this type of break applies to.

        :param location_id: The location_id of this BreakType.
        :type location_id: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")
        if location_id is not None and len(location_id) < 1:
            raise ValueError("Invalid value for `location_id`, length must be greater than or equal to `1`")

        self._location_id = location_id

    @property
    def updated_at(self):
        """Gets the updated_at of this BreakType.

        A read-only timestamp in RFC 3339 format.

        :return: The updated_at of this BreakType.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BreakType.

        A read-only timestamp in RFC 3339 format.

        :param updated_at: The updated_at of this BreakType.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this BreakType.

        Used for resolving concurrency issues. The request fails if the version provided does not match the server version at the time of the request. If a value is not provided, Square's servers execute a \"blind\" write; potentially overwriting another writer's data.

        :return: The version of this BreakType.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BreakType.

        Used for resolving concurrency issues. The request fails if the version provided does not match the server version at the time of the request. If a value is not provided, Square's servers execute a \"blind\" write; potentially overwriting another writer's data.

        :param version: The version of this BreakType.
        :type version: int
        """

        self._version = version
