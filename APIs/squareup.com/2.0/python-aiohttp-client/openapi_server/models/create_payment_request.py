# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.cash_payment_details import CashPaymentDetails
from openapi_server.models.external_payment_details import ExternalPaymentDetails
from openapi_server.models.money import Money
from openapi_server import util


class CreatePaymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_partial_authorization: bool=None, amount_money: Money=None, app_fee_money: Money=None, autocomplete: bool=None, billing_address: Address=None, buyer_email_address: str=None, cash_details: CashPaymentDetails=None, customer_id: str=None, delay_duration: str=None, external_details: ExternalPaymentDetails=None, idempotency_key: str=None, location_id: str=None, note: str=None, order_id: str=None, reference_id: str=None, shipping_address: Address=None, source_id: str=None, statement_description_identifier: str=None, tip_money: Money=None, verification_token: str=None):
        """CreatePaymentRequest - a model defined in OpenAPI

        :param accept_partial_authorization: The accept_partial_authorization of this CreatePaymentRequest.
        :param amount_money: The amount_money of this CreatePaymentRequest.
        :param app_fee_money: The app_fee_money of this CreatePaymentRequest.
        :param autocomplete: The autocomplete of this CreatePaymentRequest.
        :param billing_address: The billing_address of this CreatePaymentRequest.
        :param buyer_email_address: The buyer_email_address of this CreatePaymentRequest.
        :param cash_details: The cash_details of this CreatePaymentRequest.
        :param customer_id: The customer_id of this CreatePaymentRequest.
        :param delay_duration: The delay_duration of this CreatePaymentRequest.
        :param external_details: The external_details of this CreatePaymentRequest.
        :param idempotency_key: The idempotency_key of this CreatePaymentRequest.
        :param location_id: The location_id of this CreatePaymentRequest.
        :param note: The note of this CreatePaymentRequest.
        :param order_id: The order_id of this CreatePaymentRequest.
        :param reference_id: The reference_id of this CreatePaymentRequest.
        :param shipping_address: The shipping_address of this CreatePaymentRequest.
        :param source_id: The source_id of this CreatePaymentRequest.
        :param statement_description_identifier: The statement_description_identifier of this CreatePaymentRequest.
        :param tip_money: The tip_money of this CreatePaymentRequest.
        :param verification_token: The verification_token of this CreatePaymentRequest.
        """
        self.openapi_types = {
            'accept_partial_authorization': bool,
            'amount_money': Money,
            'app_fee_money': Money,
            'autocomplete': bool,
            'billing_address': Address,
            'buyer_email_address': str,
            'cash_details': CashPaymentDetails,
            'customer_id': str,
            'delay_duration': str,
            'external_details': ExternalPaymentDetails,
            'idempotency_key': str,
            'location_id': str,
            'note': str,
            'order_id': str,
            'reference_id': str,
            'shipping_address': Address,
            'source_id': str,
            'statement_description_identifier': str,
            'tip_money': Money,
            'verification_token': str
        }

        self.attribute_map = {
            'accept_partial_authorization': 'accept_partial_authorization',
            'amount_money': 'amount_money',
            'app_fee_money': 'app_fee_money',
            'autocomplete': 'autocomplete',
            'billing_address': 'billing_address',
            'buyer_email_address': 'buyer_email_address',
            'cash_details': 'cash_details',
            'customer_id': 'customer_id',
            'delay_duration': 'delay_duration',
            'external_details': 'external_details',
            'idempotency_key': 'idempotency_key',
            'location_id': 'location_id',
            'note': 'note',
            'order_id': 'order_id',
            'reference_id': 'reference_id',
            'shipping_address': 'shipping_address',
            'source_id': 'source_id',
            'statement_description_identifier': 'statement_description_identifier',
            'tip_money': 'tip_money',
            'verification_token': 'verification_token'
        }

        self._accept_partial_authorization = accept_partial_authorization
        self._amount_money = amount_money
        self._app_fee_money = app_fee_money
        self._autocomplete = autocomplete
        self._billing_address = billing_address
        self._buyer_email_address = buyer_email_address
        self._cash_details = cash_details
        self._customer_id = customer_id
        self._delay_duration = delay_duration
        self._external_details = external_details
        self._idempotency_key = idempotency_key
        self._location_id = location_id
        self._note = note
        self._order_id = order_id
        self._reference_id = reference_id
        self._shipping_address = shipping_address
        self._source_id = source_id
        self._statement_description_identifier = statement_description_identifier
        self._tip_money = tip_money
        self._verification_token = verification_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePaymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePaymentRequest of this CreatePaymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_partial_authorization(self):
        """Gets the accept_partial_authorization of this CreatePaymentRequest.

        If set to `true` and charging a Square Gift Card, a payment might be returned with `amount_money` equal to less than what was requested. For example, a request for $20 when charging a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card payment. This field cannot be `true` when `autocomplete = true`.  For more information, see [Partial amount with Square Gift Cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).  Default: false

        :return: The accept_partial_authorization of this CreatePaymentRequest.
        :rtype: bool
        """
        return self._accept_partial_authorization

    @accept_partial_authorization.setter
    def accept_partial_authorization(self, accept_partial_authorization):
        """Sets the accept_partial_authorization of this CreatePaymentRequest.

        If set to `true` and charging a Square Gift Card, a payment might be returned with `amount_money` equal to less than what was requested. For example, a request for $20 when charging a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card payment. This field cannot be `true` when `autocomplete = true`.  For more information, see [Partial amount with Square Gift Cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).  Default: false

        :param accept_partial_authorization: The accept_partial_authorization of this CreatePaymentRequest.
        :type accept_partial_authorization: bool
        """

        self._accept_partial_authorization = accept_partial_authorization

    @property
    def amount_money(self):
        """Gets the amount_money of this CreatePaymentRequest.


        :return: The amount_money of this CreatePaymentRequest.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this CreatePaymentRequest.


        :param amount_money: The amount_money of this CreatePaymentRequest.
        :type amount_money: Money
        """
        if amount_money is None:
            raise ValueError("Invalid value for `amount_money`, must not be `None`")

        self._amount_money = amount_money

    @property
    def app_fee_money(self):
        """Gets the app_fee_money of this CreatePaymentRequest.


        :return: The app_fee_money of this CreatePaymentRequest.
        :rtype: Money
        """
        return self._app_fee_money

    @app_fee_money.setter
    def app_fee_money(self, app_fee_money):
        """Sets the app_fee_money of this CreatePaymentRequest.


        :param app_fee_money: The app_fee_money of this CreatePaymentRequest.
        :type app_fee_money: Money
        """

        self._app_fee_money = app_fee_money

    @property
    def autocomplete(self):
        """Gets the autocomplete of this CreatePaymentRequest.

        If set to `true`, this payment will be completed when possible. If set to `false`, this payment is held in an approved state until either explicitly completed (captured) or canceled (voided). For more information, see [Delayed capture](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).  Default: true

        :return: The autocomplete of this CreatePaymentRequest.
        :rtype: bool
        """
        return self._autocomplete

    @autocomplete.setter
    def autocomplete(self, autocomplete):
        """Sets the autocomplete of this CreatePaymentRequest.

        If set to `true`, this payment will be completed when possible. If set to `false`, this payment is held in an approved state until either explicitly completed (captured) or canceled (voided). For more information, see [Delayed capture](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).  Default: true

        :param autocomplete: The autocomplete of this CreatePaymentRequest.
        :type autocomplete: bool
        """

        self._autocomplete = autocomplete

    @property
    def billing_address(self):
        """Gets the billing_address of this CreatePaymentRequest.


        :return: The billing_address of this CreatePaymentRequest.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CreatePaymentRequest.


        :param billing_address: The billing_address of this CreatePaymentRequest.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def buyer_email_address(self):
        """Gets the buyer_email_address of this CreatePaymentRequest.

        The buyer's email address.

        :return: The buyer_email_address of this CreatePaymentRequest.
        :rtype: str
        """
        return self._buyer_email_address

    @buyer_email_address.setter
    def buyer_email_address(self, buyer_email_address):
        """Sets the buyer_email_address of this CreatePaymentRequest.

        The buyer's email address.

        :param buyer_email_address: The buyer_email_address of this CreatePaymentRequest.
        :type buyer_email_address: str
        """
        if buyer_email_address is not None and len(buyer_email_address) > 255:
            raise ValueError("Invalid value for `buyer_email_address`, length must be less than or equal to `255`")

        self._buyer_email_address = buyer_email_address

    @property
    def cash_details(self):
        """Gets the cash_details of this CreatePaymentRequest.


        :return: The cash_details of this CreatePaymentRequest.
        :rtype: CashPaymentDetails
        """
        return self._cash_details

    @cash_details.setter
    def cash_details(self, cash_details):
        """Sets the cash_details of this CreatePaymentRequest.


        :param cash_details: The cash_details of this CreatePaymentRequest.
        :type cash_details: CashPaymentDetails
        """

        self._cash_details = cash_details

    @property
    def customer_id(self):
        """Gets the customer_id of this CreatePaymentRequest.

        The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.  This is required if the `source_id` refers to a card on file created using the Customers API.

        :return: The customer_id of this CreatePaymentRequest.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CreatePaymentRequest.

        The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.  This is required if the `source_id` refers to a card on file created using the Customers API.

        :param customer_id: The customer_id of this CreatePaymentRequest.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def delay_duration(self):
        """Gets the delay_duration of this CreatePaymentRequest.

        The duration of time after the payment's creation when Square automatically cancels the payment. This automatic cancellation applies only to payments that do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.  This parameter should be specified as a time duration, in RFC 3339 format, with a minimum value of 1 minute.  Note: This feature is only supported for card payments. This parameter can only be set for a delayed capture payment (`autocomplete=false`).  Default:  - Card-present payments: \"PT36H\" (36 hours) from the creation time. - Card-not-present payments: \"P7D\" (7 days) from the creation time.

        :return: The delay_duration of this CreatePaymentRequest.
        :rtype: str
        """
        return self._delay_duration

    @delay_duration.setter
    def delay_duration(self, delay_duration):
        """Sets the delay_duration of this CreatePaymentRequest.

        The duration of time after the payment's creation when Square automatically cancels the payment. This automatic cancellation applies only to payments that do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.  This parameter should be specified as a time duration, in RFC 3339 format, with a minimum value of 1 minute.  Note: This feature is only supported for card payments. This parameter can only be set for a delayed capture payment (`autocomplete=false`).  Default:  - Card-present payments: \"PT36H\" (36 hours) from the creation time. - Card-not-present payments: \"P7D\" (7 days) from the creation time.

        :param delay_duration: The delay_duration of this CreatePaymentRequest.
        :type delay_duration: str
        """

        self._delay_duration = delay_duration

    @property
    def external_details(self):
        """Gets the external_details of this CreatePaymentRequest.


        :return: The external_details of this CreatePaymentRequest.
        :rtype: ExternalPaymentDetails
        """
        return self._external_details

    @external_details.setter
    def external_details(self, external_details):
        """Sets the external_details of this CreatePaymentRequest.


        :param external_details: The external_details of this CreatePaymentRequest.
        :type external_details: ExternalPaymentDetails
        """

        self._external_details = external_details

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this CreatePaymentRequest.

        A unique string that identifies this `CreatePayment` request. Keys can be any valid string but must be unique for every `CreatePayment` request.  Max: 45 characters  Note: The number of allowed characters might be less than the stated maximum, if multi-byte characters are used.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).

        :return: The idempotency_key of this CreatePaymentRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this CreatePaymentRequest.

        A unique string that identifies this `CreatePayment` request. Keys can be any valid string but must be unique for every `CreatePayment` request.  Max: 45 characters  Note: The number of allowed characters might be less than the stated maximum, if multi-byte characters are used.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).

        :param idempotency_key: The idempotency_key of this CreatePaymentRequest.
        :type idempotency_key: str
        """
        if idempotency_key is None:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if idempotency_key is not None and len(idempotency_key) > 45:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `45`")
        if idempotency_key is not None and len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key

    @property
    def location_id(self):
        """Gets the location_id of this CreatePaymentRequest.

        The location ID to associate with the payment. If not specified, the default location is used.

        :return: The location_id of this CreatePaymentRequest.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this CreatePaymentRequest.

        The location ID to associate with the payment. If not specified, the default location is used.

        :param location_id: The location_id of this CreatePaymentRequest.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def note(self):
        """Gets the note of this CreatePaymentRequest.

        An optional note to be entered by the developer when creating a payment.  Limit 500 characters.

        :return: The note of this CreatePaymentRequest.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CreatePaymentRequest.

        An optional note to be entered by the developer when creating a payment.  Limit 500 characters.

        :param note: The note of this CreatePaymentRequest.
        :type note: str
        """
        if note is not None and len(note) > 500:
            raise ValueError("Invalid value for `note`, length must be less than or equal to `500`")

        self._note = note

    @property
    def order_id(self):
        """Gets the order_id of this CreatePaymentRequest.

        Associates a previously created order with this payment.

        :return: The order_id of this CreatePaymentRequest.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this CreatePaymentRequest.

        Associates a previously created order with this payment.

        :param order_id: The order_id of this CreatePaymentRequest.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def reference_id(self):
        """Gets the reference_id of this CreatePaymentRequest.

        A user-defined ID to associate with the payment.  You can use this field to associate the payment to an entity in an external system  (for example, you might specify an order ID that is generated by a third-party shopping cart).  Limit 40 characters.

        :return: The reference_id of this CreatePaymentRequest.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this CreatePaymentRequest.

        A user-defined ID to associate with the payment.  You can use this field to associate the payment to an entity in an external system  (for example, you might specify an order ID that is generated by a third-party shopping cart).  Limit 40 characters.

        :param reference_id: The reference_id of this CreatePaymentRequest.
        :type reference_id: str
        """
        if reference_id is not None and len(reference_id) > 40:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `40`")

        self._reference_id = reference_id

    @property
    def shipping_address(self):
        """Gets the shipping_address of this CreatePaymentRequest.


        :return: The shipping_address of this CreatePaymentRequest.
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this CreatePaymentRequest.


        :param shipping_address: The shipping_address of this CreatePaymentRequest.
        :type shipping_address: Address
        """

        self._shipping_address = shipping_address

    @property
    def source_id(self):
        """Gets the source_id of this CreatePaymentRequest.

        The ID for the source of funds for this payment. This can be a payment token  (card nonce) generated by the Square payment form or a card on file made with the  Customers API. If recording a payment that the seller  received outside of Square, specify either \"CASH\" or \"EXTERNAL\".  For more information, see  [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).

        :return: The source_id of this CreatePaymentRequest.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this CreatePaymentRequest.

        The ID for the source of funds for this payment. This can be a payment token  (card nonce) generated by the Square payment form or a card on file made with the  Customers API. If recording a payment that the seller  received outside of Square, specify either \"CASH\" or \"EXTERNAL\".  For more information, see  [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).

        :param source_id: The source_id of this CreatePaymentRequest.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")
        if source_id is not None and len(source_id) < 1:
            raise ValueError("Invalid value for `source_id`, length must be greater than or equal to `1`")

        self._source_id = source_id

    @property
    def statement_description_identifier(self):
        """Gets the statement_description_identifier of this CreatePaymentRequest.

        Optional additional payment information to include on the customer's card statement as part of the statement description. This can be, for example, an invoice number, ticket number, or short description that uniquely identifies the purchase.  Note that the `statement_description_identifier` might get truncated on the statement description to fit the required information including the Square identifier (SQ *) and name of the seller taking the payment.

        :return: The statement_description_identifier of this CreatePaymentRequest.
        :rtype: str
        """
        return self._statement_description_identifier

    @statement_description_identifier.setter
    def statement_description_identifier(self, statement_description_identifier):
        """Sets the statement_description_identifier of this CreatePaymentRequest.

        Optional additional payment information to include on the customer's card statement as part of the statement description. This can be, for example, an invoice number, ticket number, or short description that uniquely identifies the purchase.  Note that the `statement_description_identifier` might get truncated on the statement description to fit the required information including the Square identifier (SQ *) and name of the seller taking the payment.

        :param statement_description_identifier: The statement_description_identifier of this CreatePaymentRequest.
        :type statement_description_identifier: str
        """
        if statement_description_identifier is not None and len(statement_description_identifier) > 20:
            raise ValueError("Invalid value for `statement_description_identifier`, length must be less than or equal to `20`")

        self._statement_description_identifier = statement_description_identifier

    @property
    def tip_money(self):
        """Gets the tip_money of this CreatePaymentRequest.


        :return: The tip_money of this CreatePaymentRequest.
        :rtype: Money
        """
        return self._tip_money

    @tip_money.setter
    def tip_money(self, tip_money):
        """Sets the tip_money of this CreatePaymentRequest.


        :param tip_money: The tip_money of this CreatePaymentRequest.
        :type tip_money: Money
        """

        self._tip_money = tip_money

    @property
    def verification_token(self):
        """Gets the verification_token of this CreatePaymentRequest.

        An identifying token generated by [payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer). Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.  For more information, see [SCA Overview](https://developer.squareup.com/docs/sca-overview).

        :return: The verification_token of this CreatePaymentRequest.
        :rtype: str
        """
        return self._verification_token

    @verification_token.setter
    def verification_token(self, verification_token):
        """Sets the verification_token of this CreatePaymentRequest.

        An identifying token generated by [payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer). Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.  For more information, see [SCA Overview](https://developer.squareup.com/docs/sca-overview).

        :param verification_token: The verification_token of this CreatePaymentRequest.
        :type verification_token: str
        """

        self._verification_token = verification_token
