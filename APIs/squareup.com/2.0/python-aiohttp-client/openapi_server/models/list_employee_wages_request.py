# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListEmployeeWagesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cursor: str=None, employee_id: str=None, limit: int=None):
        """ListEmployeeWagesRequest - a model defined in OpenAPI

        :param cursor: The cursor of this ListEmployeeWagesRequest.
        :param employee_id: The employee_id of this ListEmployeeWagesRequest.
        :param limit: The limit of this ListEmployeeWagesRequest.
        """
        self.openapi_types = {
            'cursor': str,
            'employee_id': str,
            'limit': int
        }

        self.attribute_map = {
            'cursor': 'cursor',
            'employee_id': 'employee_id',
            'limit': 'limit'
        }

        self._cursor = cursor
        self._employee_id = employee_id
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListEmployeeWagesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListEmployeeWagesRequest of this ListEmployeeWagesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cursor(self):
        """Gets the cursor of this ListEmployeeWagesRequest.

        A pointer to the next page of `EmployeeWage` results to fetch.

        :return: The cursor of this ListEmployeeWagesRequest.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this ListEmployeeWagesRequest.

        A pointer to the next page of `EmployeeWage` results to fetch.

        :param cursor: The cursor of this ListEmployeeWagesRequest.
        :type cursor: str
        """

        self._cursor = cursor

    @property
    def employee_id(self):
        """Gets the employee_id of this ListEmployeeWagesRequest.

        Filter the returned wages to only those that are associated with the specified employee.

        :return: The employee_id of this ListEmployeeWagesRequest.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this ListEmployeeWagesRequest.

        Filter the returned wages to only those that are associated with the specified employee.

        :param employee_id: The employee_id of this ListEmployeeWagesRequest.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def limit(self):
        """Gets the limit of this ListEmployeeWagesRequest.

        The maximum number of `EmployeeWage` results to return per page. The number can range between 1 and 200. The default is 200.

        :return: The limit of this ListEmployeeWagesRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListEmployeeWagesRequest.

        The maximum number of `EmployeeWage` results to return per page. The number can range between 1 and 200. The default is 200.

        :param limit: The limit of this ListEmployeeWagesRequest.
        :type limit: int
        """
        if limit is not None and limit > 200:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `200`")
        if limit is not None and limit < 1:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")

        self._limit = limit
