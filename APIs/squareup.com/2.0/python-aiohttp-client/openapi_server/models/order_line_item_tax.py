# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class OrderLineItemTax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_money: Money=None, auto_applied: bool=None, catalog_object_id: str=None, catalog_version: int=None, metadata: Dict[str, str]=None, name: str=None, percentage: str=None, scope: str=None, type: str=None, uid: str=None):
        """OrderLineItemTax - a model defined in OpenAPI

        :param applied_money: The applied_money of this OrderLineItemTax.
        :param auto_applied: The auto_applied of this OrderLineItemTax.
        :param catalog_object_id: The catalog_object_id of this OrderLineItemTax.
        :param catalog_version: The catalog_version of this OrderLineItemTax.
        :param metadata: The metadata of this OrderLineItemTax.
        :param name: The name of this OrderLineItemTax.
        :param percentage: The percentage of this OrderLineItemTax.
        :param scope: The scope of this OrderLineItemTax.
        :param type: The type of this OrderLineItemTax.
        :param uid: The uid of this OrderLineItemTax.
        """
        self.openapi_types = {
            'applied_money': Money,
            'auto_applied': bool,
            'catalog_object_id': str,
            'catalog_version': int,
            'metadata': Dict[str, str],
            'name': str,
            'percentage': str,
            'scope': str,
            'type': str,
            'uid': str
        }

        self.attribute_map = {
            'applied_money': 'applied_money',
            'auto_applied': 'auto_applied',
            'catalog_object_id': 'catalog_object_id',
            'catalog_version': 'catalog_version',
            'metadata': 'metadata',
            'name': 'name',
            'percentage': 'percentage',
            'scope': 'scope',
            'type': 'type',
            'uid': 'uid'
        }

        self._applied_money = applied_money
        self._auto_applied = auto_applied
        self._catalog_object_id = catalog_object_id
        self._catalog_version = catalog_version
        self._metadata = metadata
        self._name = name
        self._percentage = percentage
        self._scope = scope
        self._type = type
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderLineItemTax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderLineItemTax of this OrderLineItemTax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_money(self):
        """Gets the applied_money of this OrderLineItemTax.


        :return: The applied_money of this OrderLineItemTax.
        :rtype: Money
        """
        return self._applied_money

    @applied_money.setter
    def applied_money(self, applied_money):
        """Sets the applied_money of this OrderLineItemTax.


        :param applied_money: The applied_money of this OrderLineItemTax.
        :type applied_money: Money
        """

        self._applied_money = applied_money

    @property
    def auto_applied(self):
        """Gets the auto_applied of this OrderLineItemTax.

        Determines whether the tax was automatically applied to the order based on the catalog configuration. For an example, see  [Automatically Apply Taxes to an Order](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes).

        :return: The auto_applied of this OrderLineItemTax.
        :rtype: bool
        """
        return self._auto_applied

    @auto_applied.setter
    def auto_applied(self, auto_applied):
        """Sets the auto_applied of this OrderLineItemTax.

        Determines whether the tax was automatically applied to the order based on the catalog configuration. For an example, see  [Automatically Apply Taxes to an Order](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes).

        :param auto_applied: The auto_applied of this OrderLineItemTax.
        :type auto_applied: bool
        """

        self._auto_applied = auto_applied

    @property
    def catalog_object_id(self):
        """Gets the catalog_object_id of this OrderLineItemTax.

        The catalog object ID referencing [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax).

        :return: The catalog_object_id of this OrderLineItemTax.
        :rtype: str
        """
        return self._catalog_object_id

    @catalog_object_id.setter
    def catalog_object_id(self, catalog_object_id):
        """Sets the catalog_object_id of this OrderLineItemTax.

        The catalog object ID referencing [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax).

        :param catalog_object_id: The catalog_object_id of this OrderLineItemTax.
        :type catalog_object_id: str
        """
        if catalog_object_id is not None and len(catalog_object_id) > 192:
            raise ValueError("Invalid value for `catalog_object_id`, length must be less than or equal to `192`")

        self._catalog_object_id = catalog_object_id

    @property
    def catalog_version(self):
        """Gets the catalog_version of this OrderLineItemTax.

        The version of the catalog object that this tax references.

        :return: The catalog_version of this OrderLineItemTax.
        :rtype: int
        """
        return self._catalog_version

    @catalog_version.setter
    def catalog_version(self, catalog_version):
        """Sets the catalog_version of this OrderLineItemTax.

        The version of the catalog object that this tax references.

        :param catalog_version: The catalog_version of this OrderLineItemTax.
        :type catalog_version: int
        """

        self._catalog_version = catalog_version

    @property
    def metadata(self):
        """Gets the metadata of this OrderLineItemTax.

        Application-defined data attached to this tax. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).

        :return: The metadata of this OrderLineItemTax.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OrderLineItemTax.

        Application-defined data attached to this tax. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).

        :param metadata: The metadata of this OrderLineItemTax.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this OrderLineItemTax.

        The tax's name.

        :return: The name of this OrderLineItemTax.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderLineItemTax.

        The tax's name.

        :param name: The name of this OrderLineItemTax.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this OrderLineItemTax.

        The percentage of the tax, as a string representation of a decimal number. For example, a value of `\"7.25\"` corresponds to a percentage of 7.25%.

        :return: The percentage of this OrderLineItemTax.
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this OrderLineItemTax.

        The percentage of the tax, as a string representation of a decimal number. For example, a value of `\"7.25\"` corresponds to a percentage of 7.25%.

        :param percentage: The percentage of this OrderLineItemTax.
        :type percentage: str
        """
        if percentage is not None and len(percentage) > 10:
            raise ValueError("Invalid value for `percentage`, length must be less than or equal to `10`")

        self._percentage = percentage

    @property
    def scope(self):
        """Gets the scope of this OrderLineItemTax.

        Indicates the level at which the tax applies. For `ORDER` scoped taxes, Square generates references in `applied_taxes` on all order line items that do not have them. For `LINE_ITEM` scoped taxes, the tax only applies to line items with references in their `applied_taxes` field.  This field is immutable. To change the scope, you must delete the tax and re-add it as a new tax.

        :return: The scope of this OrderLineItemTax.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this OrderLineItemTax.

        Indicates the level at which the tax applies. For `ORDER` scoped taxes, Square generates references in `applied_taxes` on all order line items that do not have them. For `LINE_ITEM` scoped taxes, the tax only applies to line items with references in their `applied_taxes` field.  This field is immutable. To change the scope, you must delete the tax and re-add it as a new tax.

        :param scope: The scope of this OrderLineItemTax.
        :type scope: str
        """

        self._scope = scope

    @property
    def type(self):
        """Gets the type of this OrderLineItemTax.

        Indicates the calculation method used to apply the tax.

        :return: The type of this OrderLineItemTax.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderLineItemTax.

        Indicates the calculation method used to apply the tax.

        :param type: The type of this OrderLineItemTax.
        :type type: str
        """

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this OrderLineItemTax.

        A unique ID that identifies the tax only within this order.

        :return: The uid of this OrderLineItemTax.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OrderLineItemTax.

        A unique ID that identifies the tax only within this order.

        :param uid: The uid of this OrderLineItemTax.
        :type uid: str
        """
        if uid is not None and len(uid) > 60:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `60`")

        self._uid = uid
