# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchRetrieveInventoryChangesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_object_ids: List[str]=None, cursor: str=None, location_ids: List[str]=None, states: List[str]=None, types: List[str]=None, updated_after: str=None, updated_before: str=None):
        """BatchRetrieveInventoryChangesRequest - a model defined in OpenAPI

        :param catalog_object_ids: The catalog_object_ids of this BatchRetrieveInventoryChangesRequest.
        :param cursor: The cursor of this BatchRetrieveInventoryChangesRequest.
        :param location_ids: The location_ids of this BatchRetrieveInventoryChangesRequest.
        :param states: The states of this BatchRetrieveInventoryChangesRequest.
        :param types: The types of this BatchRetrieveInventoryChangesRequest.
        :param updated_after: The updated_after of this BatchRetrieveInventoryChangesRequest.
        :param updated_before: The updated_before of this BatchRetrieveInventoryChangesRequest.
        """
        self.openapi_types = {
            'catalog_object_ids': List[str],
            'cursor': str,
            'location_ids': List[str],
            'states': List[str],
            'types': List[str],
            'updated_after': str,
            'updated_before': str
        }

        self.attribute_map = {
            'catalog_object_ids': 'catalog_object_ids',
            'cursor': 'cursor',
            'location_ids': 'location_ids',
            'states': 'states',
            'types': 'types',
            'updated_after': 'updated_after',
            'updated_before': 'updated_before'
        }

        self._catalog_object_ids = catalog_object_ids
        self._cursor = cursor
        self._location_ids = location_ids
        self._states = states
        self._types = types
        self._updated_after = updated_after
        self._updated_before = updated_before

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchRetrieveInventoryChangesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchRetrieveInventoryChangesRequest of this BatchRetrieveInventoryChangesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_object_ids(self):
        """Gets the catalog_object_ids of this BatchRetrieveInventoryChangesRequest.

        The filter to return results by `CatalogObject` ID. The filter is only applicable when set. The default value is null.

        :return: The catalog_object_ids of this BatchRetrieveInventoryChangesRequest.
        :rtype: List[str]
        """
        return self._catalog_object_ids

    @catalog_object_ids.setter
    def catalog_object_ids(self, catalog_object_ids):
        """Sets the catalog_object_ids of this BatchRetrieveInventoryChangesRequest.

        The filter to return results by `CatalogObject` ID. The filter is only applicable when set. The default value is null.

        :param catalog_object_ids: The catalog_object_ids of this BatchRetrieveInventoryChangesRequest.
        :type catalog_object_ids: List[str]
        """

        self._catalog_object_ids = catalog_object_ids

    @property
    def cursor(self):
        """Gets the cursor of this BatchRetrieveInventoryChangesRequest.

        A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.

        :return: The cursor of this BatchRetrieveInventoryChangesRequest.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this BatchRetrieveInventoryChangesRequest.

        A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.

        :param cursor: The cursor of this BatchRetrieveInventoryChangesRequest.
        :type cursor: str
        """

        self._cursor = cursor

    @property
    def location_ids(self):
        """Gets the location_ids of this BatchRetrieveInventoryChangesRequest.

        The filter to return results by `Location` ID.  The filter is only applicable when set. The default value is null.

        :return: The location_ids of this BatchRetrieveInventoryChangesRequest.
        :rtype: List[str]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """Sets the location_ids of this BatchRetrieveInventoryChangesRequest.

        The filter to return results by `Location` ID.  The filter is only applicable when set. The default value is null.

        :param location_ids: The location_ids of this BatchRetrieveInventoryChangesRequest.
        :type location_ids: List[str]
        """

        self._location_ids = location_ids

    @property
    def states(self):
        """Gets the states of this BatchRetrieveInventoryChangesRequest.

        The filter to return `ADJUSTMENT` query results by `InventoryState`. This filter is only applied when set. The default value is null.

        :return: The states of this BatchRetrieveInventoryChangesRequest.
        :rtype: List[str]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this BatchRetrieveInventoryChangesRequest.

        The filter to return `ADJUSTMENT` query results by `InventoryState`. This filter is only applied when set. The default value is null.

        :param states: The states of this BatchRetrieveInventoryChangesRequest.
        :type states: List[str]
        """

        self._states = states

    @property
    def types(self):
        """Gets the types of this BatchRetrieveInventoryChangesRequest.

        The filter to return results by `InventoryChangeType` values other than `TRANSFER`. The default value is `[PHYSICAL_COUNT, ADJUSTMENT]`.

        :return: The types of this BatchRetrieveInventoryChangesRequest.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this BatchRetrieveInventoryChangesRequest.

        The filter to return results by `InventoryChangeType` values other than `TRANSFER`. The default value is `[PHYSICAL_COUNT, ADJUSTMENT]`.

        :param types: The types of this BatchRetrieveInventoryChangesRequest.
        :type types: List[str]
        """

        self._types = types

    @property
    def updated_after(self):
        """Gets the updated_after of this BatchRetrieveInventoryChangesRequest.

        The filter to return results with their `calculated_at` value   after the given time as specified in an RFC 3339 timestamp.  The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).

        :return: The updated_after of this BatchRetrieveInventoryChangesRequest.
        :rtype: str
        """
        return self._updated_after

    @updated_after.setter
    def updated_after(self, updated_after):
        """Sets the updated_after of this BatchRetrieveInventoryChangesRequest.

        The filter to return results with their `calculated_at` value   after the given time as specified in an RFC 3339 timestamp.  The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).

        :param updated_after: The updated_after of this BatchRetrieveInventoryChangesRequest.
        :type updated_after: str
        """

        self._updated_after = updated_after

    @property
    def updated_before(self):
        """Gets the updated_before of this BatchRetrieveInventoryChangesRequest.

        The filter to return results with their `created_at` or `calculated_at` value   strictly before the given time as specified in an RFC 3339 timestamp.  The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).

        :return: The updated_before of this BatchRetrieveInventoryChangesRequest.
        :rtype: str
        """
        return self._updated_before

    @updated_before.setter
    def updated_before(self, updated_before):
        """Sets the updated_before of this BatchRetrieveInventoryChangesRequest.

        The filter to return results with their `created_at` or `calculated_at` value   strictly before the given time as specified in an RFC 3339 timestamp.  The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).

        :param updated_before: The updated_before of this BatchRetrieveInventoryChangesRequest.
        :type updated_before: str
        """

        self._updated_before = updated_before
