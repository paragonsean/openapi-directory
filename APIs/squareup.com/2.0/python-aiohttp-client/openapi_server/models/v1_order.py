# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.error import Error
from openapi_server.models.v1_money import V1Money
from openapi_server.models.v1_order_history_entry import V1OrderHistoryEntry
from openapi_server.models.v1_tender import V1Tender
from openapi_server import util


class V1Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, btc_price_satoshi: float=None, btc_receive_address: str=None, buyer_email: str=None, buyer_note: str=None, canceled_note: str=None, completed_note: str=None, created_at: str=None, errors: List[Error]=None, expires_at: str=None, id: str=None, order_history: List[V1OrderHistoryEntry]=None, payment_id: str=None, promo_code: str=None, recipient_name: str=None, recipient_phone_number: str=None, refunded_note: str=None, shipping_address: Address=None, state: str=None, subtotal_money: V1Money=None, tender: V1Tender=None, total_discount_money: V1Money=None, total_price_money: V1Money=None, total_shipping_money: V1Money=None, total_tax_money: V1Money=None, updated_at: str=None):
        """V1Order - a model defined in OpenAPI

        :param btc_price_satoshi: The btc_price_satoshi of this V1Order.
        :param btc_receive_address: The btc_receive_address of this V1Order.
        :param buyer_email: The buyer_email of this V1Order.
        :param buyer_note: The buyer_note of this V1Order.
        :param canceled_note: The canceled_note of this V1Order.
        :param completed_note: The completed_note of this V1Order.
        :param created_at: The created_at of this V1Order.
        :param errors: The errors of this V1Order.
        :param expires_at: The expires_at of this V1Order.
        :param id: The id of this V1Order.
        :param order_history: The order_history of this V1Order.
        :param payment_id: The payment_id of this V1Order.
        :param promo_code: The promo_code of this V1Order.
        :param recipient_name: The recipient_name of this V1Order.
        :param recipient_phone_number: The recipient_phone_number of this V1Order.
        :param refunded_note: The refunded_note of this V1Order.
        :param shipping_address: The shipping_address of this V1Order.
        :param state: The state of this V1Order.
        :param subtotal_money: The subtotal_money of this V1Order.
        :param tender: The tender of this V1Order.
        :param total_discount_money: The total_discount_money of this V1Order.
        :param total_price_money: The total_price_money of this V1Order.
        :param total_shipping_money: The total_shipping_money of this V1Order.
        :param total_tax_money: The total_tax_money of this V1Order.
        :param updated_at: The updated_at of this V1Order.
        """
        self.openapi_types = {
            'btc_price_satoshi': float,
            'btc_receive_address': str,
            'buyer_email': str,
            'buyer_note': str,
            'canceled_note': str,
            'completed_note': str,
            'created_at': str,
            'errors': List[Error],
            'expires_at': str,
            'id': str,
            'order_history': List[V1OrderHistoryEntry],
            'payment_id': str,
            'promo_code': str,
            'recipient_name': str,
            'recipient_phone_number': str,
            'refunded_note': str,
            'shipping_address': Address,
            'state': str,
            'subtotal_money': V1Money,
            'tender': V1Tender,
            'total_discount_money': V1Money,
            'total_price_money': V1Money,
            'total_shipping_money': V1Money,
            'total_tax_money': V1Money,
            'updated_at': str
        }

        self.attribute_map = {
            'btc_price_satoshi': 'btc_price_satoshi',
            'btc_receive_address': 'btc_receive_address',
            'buyer_email': 'buyer_email',
            'buyer_note': 'buyer_note',
            'canceled_note': 'canceled_note',
            'completed_note': 'completed_note',
            'created_at': 'created_at',
            'errors': 'errors',
            'expires_at': 'expires_at',
            'id': 'id',
            'order_history': 'order_history',
            'payment_id': 'payment_id',
            'promo_code': 'promo_code',
            'recipient_name': 'recipient_name',
            'recipient_phone_number': 'recipient_phone_number',
            'refunded_note': 'refunded_note',
            'shipping_address': 'shipping_address',
            'state': 'state',
            'subtotal_money': 'subtotal_money',
            'tender': 'tender',
            'total_discount_money': 'total_discount_money',
            'total_price_money': 'total_price_money',
            'total_shipping_money': 'total_shipping_money',
            'total_tax_money': 'total_tax_money',
            'updated_at': 'updated_at'
        }

        self._btc_price_satoshi = btc_price_satoshi
        self._btc_receive_address = btc_receive_address
        self._buyer_email = buyer_email
        self._buyer_note = buyer_note
        self._canceled_note = canceled_note
        self._completed_note = completed_note
        self._created_at = created_at
        self._errors = errors
        self._expires_at = expires_at
        self._id = id
        self._order_history = order_history
        self._payment_id = payment_id
        self._promo_code = promo_code
        self._recipient_name = recipient_name
        self._recipient_phone_number = recipient_phone_number
        self._refunded_note = refunded_note
        self._shipping_address = shipping_address
        self._state = state
        self._subtotal_money = subtotal_money
        self._tender = tender
        self._total_discount_money = total_discount_money
        self._total_price_money = total_price_money
        self._total_shipping_money = total_shipping_money
        self._total_tax_money = total_tax_money
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V1Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V1Order of this V1Order.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def btc_price_satoshi(self):
        """Gets the btc_price_satoshi of this V1Order.

        For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC).

        :return: The btc_price_satoshi of this V1Order.
        :rtype: float
        """
        return self._btc_price_satoshi

    @btc_price_satoshi.setter
    def btc_price_satoshi(self, btc_price_satoshi):
        """Sets the btc_price_satoshi of this V1Order.

        For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC).

        :param btc_price_satoshi: The btc_price_satoshi of this V1Order.
        :type btc_price_satoshi: float
        """

        self._btc_price_satoshi = btc_price_satoshi

    @property
    def btc_receive_address(self):
        """Gets the btc_receive_address of this V1Order.

        For Bitcoin transactions, the address that the buyer sent Bitcoin to.

        :return: The btc_receive_address of this V1Order.
        :rtype: str
        """
        return self._btc_receive_address

    @btc_receive_address.setter
    def btc_receive_address(self, btc_receive_address):
        """Sets the btc_receive_address of this V1Order.

        For Bitcoin transactions, the address that the buyer sent Bitcoin to.

        :param btc_receive_address: The btc_receive_address of this V1Order.
        :type btc_receive_address: str
        """

        self._btc_receive_address = btc_receive_address

    @property
    def buyer_email(self):
        """Gets the buyer_email of this V1Order.

        The email address of the order's buyer.

        :return: The buyer_email of this V1Order.
        :rtype: str
        """
        return self._buyer_email

    @buyer_email.setter
    def buyer_email(self, buyer_email):
        """Sets the buyer_email of this V1Order.

        The email address of the order's buyer.

        :param buyer_email: The buyer_email of this V1Order.
        :type buyer_email: str
        """

        self._buyer_email = buyer_email

    @property
    def buyer_note(self):
        """Gets the buyer_note of this V1Order.

        A note provided by the buyer when the order was created, if any.

        :return: The buyer_note of this V1Order.
        :rtype: str
        """
        return self._buyer_note

    @buyer_note.setter
    def buyer_note(self, buyer_note):
        """Sets the buyer_note of this V1Order.

        A note provided by the buyer when the order was created, if any.

        :param buyer_note: The buyer_note of this V1Order.
        :type buyer_note: str
        """

        self._buyer_note = buyer_note

    @property
    def canceled_note(self):
        """Gets the canceled_note of this V1Order.

        A note provided by the merchant when the order's state was set to CANCELED, if any.

        :return: The canceled_note of this V1Order.
        :rtype: str
        """
        return self._canceled_note

    @canceled_note.setter
    def canceled_note(self, canceled_note):
        """Sets the canceled_note of this V1Order.

        A note provided by the merchant when the order's state was set to CANCELED, if any.

        :param canceled_note: The canceled_note of this V1Order.
        :type canceled_note: str
        """

        self._canceled_note = canceled_note

    @property
    def completed_note(self):
        """Gets the completed_note of this V1Order.

        A note provided by the merchant when the order's state was set to COMPLETED, if any

        :return: The completed_note of this V1Order.
        :rtype: str
        """
        return self._completed_note

    @completed_note.setter
    def completed_note(self, completed_note):
        """Sets the completed_note of this V1Order.

        A note provided by the merchant when the order's state was set to COMPLETED, if any

        :param completed_note: The completed_note of this V1Order.
        :type completed_note: str
        """

        self._completed_note = completed_note

    @property
    def created_at(self):
        """Gets the created_at of this V1Order.

        The time when the order was created, in ISO 8601 format.

        :return: The created_at of this V1Order.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V1Order.

        The time when the order was created, in ISO 8601 format.

        :param created_at: The created_at of this V1Order.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def errors(self):
        """Gets the errors of this V1Order.

        Any errors that occurred during the request.

        :return: The errors of this V1Order.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this V1Order.

        Any errors that occurred during the request.

        :param errors: The errors of this V1Order.
        :type errors: List[Error]
        """

        self._errors = errors

    @property
    def expires_at(self):
        """Gets the expires_at of this V1Order.

        The time when the order expires if no action is taken, in ISO 8601 format.

        :return: The expires_at of this V1Order.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this V1Order.

        The time when the order expires if no action is taken, in ISO 8601 format.

        :param expires_at: The expires_at of this V1Order.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this V1Order.

        The order's unique identifier.

        :return: The id of this V1Order.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1Order.

        The order's unique identifier.

        :param id: The id of this V1Order.
        :type id: str
        """

        self._id = id

    @property
    def order_history(self):
        """Gets the order_history of this V1Order.

        The history of actions associated with the order.

        :return: The order_history of this V1Order.
        :rtype: List[V1OrderHistoryEntry]
        """
        return self._order_history

    @order_history.setter
    def order_history(self, order_history):
        """Sets the order_history of this V1Order.

        The history of actions associated with the order.

        :param order_history: The order_history of this V1Order.
        :type order_history: List[V1OrderHistoryEntry]
        """

        self._order_history = order_history

    @property
    def payment_id(self):
        """Gets the payment_id of this V1Order.

        The unique identifier of the payment associated with the order.

        :return: The payment_id of this V1Order.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this V1Order.

        The unique identifier of the payment associated with the order.

        :param payment_id: The payment_id of this V1Order.
        :type payment_id: str
        """

        self._payment_id = payment_id

    @property
    def promo_code(self):
        """Gets the promo_code of this V1Order.

        The promo code provided by the buyer, if any.

        :return: The promo_code of this V1Order.
        :rtype: str
        """
        return self._promo_code

    @promo_code.setter
    def promo_code(self, promo_code):
        """Sets the promo_code of this V1Order.

        The promo code provided by the buyer, if any.

        :param promo_code: The promo_code of this V1Order.
        :type promo_code: str
        """

        self._promo_code = promo_code

    @property
    def recipient_name(self):
        """Gets the recipient_name of this V1Order.

        The name of the order's buyer.

        :return: The recipient_name of this V1Order.
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this V1Order.

        The name of the order's buyer.

        :param recipient_name: The recipient_name of this V1Order.
        :type recipient_name: str
        """

        self._recipient_name = recipient_name

    @property
    def recipient_phone_number(self):
        """Gets the recipient_phone_number of this V1Order.

        The phone number to use for the order's delivery.

        :return: The recipient_phone_number of this V1Order.
        :rtype: str
        """
        return self._recipient_phone_number

    @recipient_phone_number.setter
    def recipient_phone_number(self, recipient_phone_number):
        """Sets the recipient_phone_number of this V1Order.

        The phone number to use for the order's delivery.

        :param recipient_phone_number: The recipient_phone_number of this V1Order.
        :type recipient_phone_number: str
        """

        self._recipient_phone_number = recipient_phone_number

    @property
    def refunded_note(self):
        """Gets the refunded_note of this V1Order.

        A note provided by the merchant when the order's state was set to REFUNDED, if any.

        :return: The refunded_note of this V1Order.
        :rtype: str
        """
        return self._refunded_note

    @refunded_note.setter
    def refunded_note(self, refunded_note):
        """Sets the refunded_note of this V1Order.

        A note provided by the merchant when the order's state was set to REFUNDED, if any.

        :param refunded_note: The refunded_note of this V1Order.
        :type refunded_note: str
        """

        self._refunded_note = refunded_note

    @property
    def shipping_address(self):
        """Gets the shipping_address of this V1Order.


        :return: The shipping_address of this V1Order.
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this V1Order.


        :param shipping_address: The shipping_address of this V1Order.
        :type shipping_address: Address
        """

        self._shipping_address = shipping_address

    @property
    def state(self):
        """Gets the state of this V1Order.

        Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.

        :return: The state of this V1Order.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this V1Order.

        Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.

        :param state: The state of this V1Order.
        :type state: str
        """

        self._state = state

    @property
    def subtotal_money(self):
        """Gets the subtotal_money of this V1Order.


        :return: The subtotal_money of this V1Order.
        :rtype: V1Money
        """
        return self._subtotal_money

    @subtotal_money.setter
    def subtotal_money(self, subtotal_money):
        """Sets the subtotal_money of this V1Order.


        :param subtotal_money: The subtotal_money of this V1Order.
        :type subtotal_money: V1Money
        """

        self._subtotal_money = subtotal_money

    @property
    def tender(self):
        """Gets the tender of this V1Order.


        :return: The tender of this V1Order.
        :rtype: V1Tender
        """
        return self._tender

    @tender.setter
    def tender(self, tender):
        """Sets the tender of this V1Order.


        :param tender: The tender of this V1Order.
        :type tender: V1Tender
        """

        self._tender = tender

    @property
    def total_discount_money(self):
        """Gets the total_discount_money of this V1Order.


        :return: The total_discount_money of this V1Order.
        :rtype: V1Money
        """
        return self._total_discount_money

    @total_discount_money.setter
    def total_discount_money(self, total_discount_money):
        """Sets the total_discount_money of this V1Order.


        :param total_discount_money: The total_discount_money of this V1Order.
        :type total_discount_money: V1Money
        """

        self._total_discount_money = total_discount_money

    @property
    def total_price_money(self):
        """Gets the total_price_money of this V1Order.


        :return: The total_price_money of this V1Order.
        :rtype: V1Money
        """
        return self._total_price_money

    @total_price_money.setter
    def total_price_money(self, total_price_money):
        """Sets the total_price_money of this V1Order.


        :param total_price_money: The total_price_money of this V1Order.
        :type total_price_money: V1Money
        """

        self._total_price_money = total_price_money

    @property
    def total_shipping_money(self):
        """Gets the total_shipping_money of this V1Order.


        :return: The total_shipping_money of this V1Order.
        :rtype: V1Money
        """
        return self._total_shipping_money

    @total_shipping_money.setter
    def total_shipping_money(self, total_shipping_money):
        """Sets the total_shipping_money of this V1Order.


        :param total_shipping_money: The total_shipping_money of this V1Order.
        :type total_shipping_money: V1Money
        """

        self._total_shipping_money = total_shipping_money

    @property
    def total_tax_money(self):
        """Gets the total_tax_money of this V1Order.


        :return: The total_tax_money of this V1Order.
        :rtype: V1Money
        """
        return self._total_tax_money

    @total_tax_money.setter
    def total_tax_money(self, total_tax_money):
        """Sets the total_tax_money of this V1Order.


        :param total_tax_money: The total_tax_money of this V1Order.
        :type total_tax_money: V1Money
        """

        self._total_tax_money = total_tax_money

    @property
    def updated_at(self):
        """Gets the updated_at of this V1Order.

        The time when the order was last modified, in ISO 8601 format.

        :return: The updated_at of this V1Order.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this V1Order.

        The time when the order was last modified, in ISO 8601 format.

        :param updated_at: The updated_at of this V1Order.
        :type updated_at: str
        """

        self._updated_at = updated_at
