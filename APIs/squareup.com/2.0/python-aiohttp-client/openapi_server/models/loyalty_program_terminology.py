# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoyaltyProgramTerminology(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, one: str=None, other: str=None):
        """LoyaltyProgramTerminology - a model defined in OpenAPI

        :param one: The one of this LoyaltyProgramTerminology.
        :param other: The other of this LoyaltyProgramTerminology.
        """
        self.openapi_types = {
            'one': str,
            'other': str
        }

        self.attribute_map = {
            'one': 'one',
            'other': 'other'
        }

        self._one = one
        self._other = other

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyProgramTerminology':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyProgramTerminology of this LoyaltyProgramTerminology.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def one(self):
        """Gets the one of this LoyaltyProgramTerminology.

        A singular unit for a point (for example, 1 point is called 1 star).

        :return: The one of this LoyaltyProgramTerminology.
        :rtype: str
        """
        return self._one

    @one.setter
    def one(self, one):
        """Sets the one of this LoyaltyProgramTerminology.

        A singular unit for a point (for example, 1 point is called 1 star).

        :param one: The one of this LoyaltyProgramTerminology.
        :type one: str
        """
        if one is None:
            raise ValueError("Invalid value for `one`, must not be `None`")
        if one is not None and len(one) < 1:
            raise ValueError("Invalid value for `one`, length must be greater than or equal to `1`")

        self._one = one

    @property
    def other(self):
        """Gets the other of this LoyaltyProgramTerminology.

        A plural unit for point (for example, 10 points is called 10 stars).

        :return: The other of this LoyaltyProgramTerminology.
        :rtype: str
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this LoyaltyProgramTerminology.

        A plural unit for point (for example, 10 points is called 10 stars).

        :param other: The other of this LoyaltyProgramTerminology.
        :type other: str
        """
        if other is None:
            raise ValueError("Invalid value for `other`, must not be `None`")
        if other is not None and len(other) < 1:
            raise ValueError("Invalid value for `other`, length must be greater than or equal to `1`")

        self._other = other
