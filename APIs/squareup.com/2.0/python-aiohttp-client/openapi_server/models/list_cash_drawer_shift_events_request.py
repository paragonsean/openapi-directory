# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListCashDrawerShiftEventsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cursor: str=None, limit: int=None, location_id: str=None):
        """ListCashDrawerShiftEventsRequest - a model defined in OpenAPI

        :param cursor: The cursor of this ListCashDrawerShiftEventsRequest.
        :param limit: The limit of this ListCashDrawerShiftEventsRequest.
        :param location_id: The location_id of this ListCashDrawerShiftEventsRequest.
        """
        self.openapi_types = {
            'cursor': str,
            'limit': int,
            'location_id': str
        }

        self.attribute_map = {
            'cursor': 'cursor',
            'limit': 'limit',
            'location_id': 'location_id'
        }

        self._cursor = cursor
        self._limit = limit
        self._location_id = location_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListCashDrawerShiftEventsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListCashDrawerShiftEventsRequest of this ListCashDrawerShiftEventsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cursor(self):
        """Gets the cursor of this ListCashDrawerShiftEventsRequest.

        Opaque cursor for fetching the next page of results.

        :return: The cursor of this ListCashDrawerShiftEventsRequest.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this ListCashDrawerShiftEventsRequest.

        Opaque cursor for fetching the next page of results.

        :param cursor: The cursor of this ListCashDrawerShiftEventsRequest.
        :type cursor: str
        """

        self._cursor = cursor

    @property
    def limit(self):
        """Gets the limit of this ListCashDrawerShiftEventsRequest.

        Number of resources to be returned in a page of results (200 by default, 1000 max).

        :return: The limit of this ListCashDrawerShiftEventsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListCashDrawerShiftEventsRequest.

        Number of resources to be returned in a page of results (200 by default, 1000 max).

        :param limit: The limit of this ListCashDrawerShiftEventsRequest.
        :type limit: int
        """
        if limit is not None and limit > 1000:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `1000`")

        self._limit = limit

    @property
    def location_id(self):
        """Gets the location_id of this ListCashDrawerShiftEventsRequest.

        The ID of the location to list cash drawer shifts for.

        :return: The location_id of this ListCashDrawerShiftEventsRequest.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ListCashDrawerShiftEventsRequest.

        The ID of the location to list cash drawer shifts for.

        :param location_id: The location_id of this ListCashDrawerShiftEventsRequest.
        :type location_id: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")
        if location_id is not None and len(location_id) < 1:
            raise ValueError("Invalid value for `location_id`, length must be greater than or equal to `1`")

        self._location_id = location_id
