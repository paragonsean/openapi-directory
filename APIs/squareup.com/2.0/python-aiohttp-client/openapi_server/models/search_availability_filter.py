# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.segment_filter import SegmentFilter
from openapi_server.models.time_range import TimeRange
from openapi_server import util


class SearchAvailabilityFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, booking_id: str=None, location_id: str=None, segment_filters: List[SegmentFilter]=None, start_at_range: TimeRange=None):
        """SearchAvailabilityFilter - a model defined in OpenAPI

        :param booking_id: The booking_id of this SearchAvailabilityFilter.
        :param location_id: The location_id of this SearchAvailabilityFilter.
        :param segment_filters: The segment_filters of this SearchAvailabilityFilter.
        :param start_at_range: The start_at_range of this SearchAvailabilityFilter.
        """
        self.openapi_types = {
            'booking_id': str,
            'location_id': str,
            'segment_filters': List[SegmentFilter],
            'start_at_range': TimeRange
        }

        self.attribute_map = {
            'booking_id': 'booking_id',
            'location_id': 'location_id',
            'segment_filters': 'segment_filters',
            'start_at_range': 'start_at_range'
        }

        self._booking_id = booking_id
        self._location_id = location_id
        self._segment_filters = segment_filters
        self._start_at_range = start_at_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchAvailabilityFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchAvailabilityFilter of this SearchAvailabilityFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def booking_id(self):
        """Gets the booking_id of this SearchAvailabilityFilter.

        The query expression to search for availabilities for an existing booking by matching the specified `booking_id` value. This is commonly used to reschedule an appointment. If this expression is specified, the `location_id` and `segment_filters` expressions are not allowed.

        :return: The booking_id of this SearchAvailabilityFilter.
        :rtype: str
        """
        return self._booking_id

    @booking_id.setter
    def booking_id(self, booking_id):
        """Sets the booking_id of this SearchAvailabilityFilter.

        The query expression to search for availabilities for an existing booking by matching the specified `booking_id` value. This is commonly used to reschedule an appointment. If this expression is specified, the `location_id` and `segment_filters` expressions are not allowed.

        :param booking_id: The booking_id of this SearchAvailabilityFilter.
        :type booking_id: str
        """

        self._booking_id = booking_id

    @property
    def location_id(self):
        """Gets the location_id of this SearchAvailabilityFilter.

        The query expression to search for availabilities matching the specified seller location IDs. This query expression is not applicable when `booking_id` is present.

        :return: The location_id of this SearchAvailabilityFilter.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this SearchAvailabilityFilter.

        The query expression to search for availabilities matching the specified seller location IDs. This query expression is not applicable when `booking_id` is present.

        :param location_id: The location_id of this SearchAvailabilityFilter.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def segment_filters(self):
        """Gets the segment_filters of this SearchAvailabilityFilter.

        The list of segment filters to apply. A query with `n` segment filters returns availabilities with `n` segments per availability. It is not applicable when `booking_id` is present.

        :return: The segment_filters of this SearchAvailabilityFilter.
        :rtype: List[SegmentFilter]
        """
        return self._segment_filters

    @segment_filters.setter
    def segment_filters(self, segment_filters):
        """Sets the segment_filters of this SearchAvailabilityFilter.

        The list of segment filters to apply. A query with `n` segment filters returns availabilities with `n` segments per availability. It is not applicable when `booking_id` is present.

        :param segment_filters: The segment_filters of this SearchAvailabilityFilter.
        :type segment_filters: List[SegmentFilter]
        """

        self._segment_filters = segment_filters

    @property
    def start_at_range(self):
        """Gets the start_at_range of this SearchAvailabilityFilter.


        :return: The start_at_range of this SearchAvailabilityFilter.
        :rtype: TimeRange
        """
        return self._start_at_range

    @start_at_range.setter
    def start_at_range(self, start_at_range):
        """Sets the start_at_range of this SearchAvailabilityFilter.


        :param start_at_range: The start_at_range of this SearchAvailabilityFilter.
        :type start_at_range: TimeRange
        """
        if start_at_range is None:
            raise ValueError("Invalid value for `start_at_range`, must not be `None`")

        self._start_at_range = start_at_range
