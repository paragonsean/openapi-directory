# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.terminal_checkout import TerminalCheckout
from openapi_server import util


class CreateTerminalCheckoutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checkout: TerminalCheckout=None, idempotency_key: str=None):
        """CreateTerminalCheckoutRequest - a model defined in OpenAPI

        :param checkout: The checkout of this CreateTerminalCheckoutRequest.
        :param idempotency_key: The idempotency_key of this CreateTerminalCheckoutRequest.
        """
        self.openapi_types = {
            'checkout': TerminalCheckout,
            'idempotency_key': str
        }

        self.attribute_map = {
            'checkout': 'checkout',
            'idempotency_key': 'idempotency_key'
        }

        self._checkout = checkout
        self._idempotency_key = idempotency_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTerminalCheckoutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTerminalCheckoutRequest of this CreateTerminalCheckoutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checkout(self):
        """Gets the checkout of this CreateTerminalCheckoutRequest.


        :return: The checkout of this CreateTerminalCheckoutRequest.
        :rtype: TerminalCheckout
        """
        return self._checkout

    @checkout.setter
    def checkout(self, checkout):
        """Sets the checkout of this CreateTerminalCheckoutRequest.


        :param checkout: The checkout of this CreateTerminalCheckoutRequest.
        :type checkout: TerminalCheckout
        """
        if checkout is None:
            raise ValueError("Invalid value for `checkout`, must not be `None`")

        self._checkout = checkout

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this CreateTerminalCheckoutRequest.

        A unique string that identifies this `CreateCheckout` request. Keys can be any valid string but must be unique for every `CreateCheckout` request.  See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.

        :return: The idempotency_key of this CreateTerminalCheckoutRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this CreateTerminalCheckoutRequest.

        A unique string that identifies this `CreateCheckout` request. Keys can be any valid string but must be unique for every `CreateCheckout` request.  See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.

        :param idempotency_key: The idempotency_key of this CreateTerminalCheckoutRequest.
        :type idempotency_key: str
        """
        if idempotency_key is None:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if idempotency_key is not None and len(idempotency_key) > 64:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `64`")
        if idempotency_key is not None and len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key
