# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.shift_workday import ShiftWorkday
from openapi_server.models.time_range import TimeRange
from openapi_server import util


class ShiftFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, employee_ids: List[str]=None, end: TimeRange=None, location_ids: List[str]=None, start: TimeRange=None, status: str=None, team_member_ids: List[str]=None, workday: ShiftWorkday=None):
        """ShiftFilter - a model defined in OpenAPI

        :param employee_ids: The employee_ids of this ShiftFilter.
        :param end: The end of this ShiftFilter.
        :param location_ids: The location_ids of this ShiftFilter.
        :param start: The start of this ShiftFilter.
        :param status: The status of this ShiftFilter.
        :param team_member_ids: The team_member_ids of this ShiftFilter.
        :param workday: The workday of this ShiftFilter.
        """
        self.openapi_types = {
            'employee_ids': List[str],
            'end': TimeRange,
            'location_ids': List[str],
            'start': TimeRange,
            'status': str,
            'team_member_ids': List[str],
            'workday': ShiftWorkday
        }

        self.attribute_map = {
            'employee_ids': 'employee_ids',
            'end': 'end',
            'location_ids': 'location_ids',
            'start': 'start',
            'status': 'status',
            'team_member_ids': 'team_member_ids',
            'workday': 'workday'
        }

        self._employee_ids = employee_ids
        self._end = end
        self._location_ids = location_ids
        self._start = start
        self._status = status
        self._team_member_ids = team_member_ids
        self._workday = workday

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShiftFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShiftFilter of this ShiftFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def employee_ids(self):
        """Gets the employee_ids of this ShiftFilter.

        Fetch shifts for the specified employees. DEPRECATED at version 2020-08-26. Use `team_member_ids` instead.

        :return: The employee_ids of this ShiftFilter.
        :rtype: List[str]
        """
        return self._employee_ids

    @employee_ids.setter
    def employee_ids(self, employee_ids):
        """Sets the employee_ids of this ShiftFilter.

        Fetch shifts for the specified employees. DEPRECATED at version 2020-08-26. Use `team_member_ids` instead.

        :param employee_ids: The employee_ids of this ShiftFilter.
        :type employee_ids: List[str]
        """

        self._employee_ids = employee_ids

    @property
    def end(self):
        """Gets the end of this ShiftFilter.


        :return: The end of this ShiftFilter.
        :rtype: TimeRange
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this ShiftFilter.


        :param end: The end of this ShiftFilter.
        :type end: TimeRange
        """

        self._end = end

    @property
    def location_ids(self):
        """Gets the location_ids of this ShiftFilter.

        Fetch shifts for the specified location.

        :return: The location_ids of this ShiftFilter.
        :rtype: List[str]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """Sets the location_ids of this ShiftFilter.

        Fetch shifts for the specified location.

        :param location_ids: The location_ids of this ShiftFilter.
        :type location_ids: List[str]
        """
        if location_ids is None:
            raise ValueError("Invalid value for `location_ids`, must not be `None`")

        self._location_ids = location_ids

    @property
    def start(self):
        """Gets the start of this ShiftFilter.


        :return: The start of this ShiftFilter.
        :rtype: TimeRange
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ShiftFilter.


        :param start: The start of this ShiftFilter.
        :type start: TimeRange
        """

        self._start = start

    @property
    def status(self):
        """Gets the status of this ShiftFilter.

        Fetch a `Shift` instance by `Shift.status`.

        :return: The status of this ShiftFilter.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ShiftFilter.

        Fetch a `Shift` instance by `Shift.status`.

        :param status: The status of this ShiftFilter.
        :type status: str
        """

        self._status = status

    @property
    def team_member_ids(self):
        """Gets the team_member_ids of this ShiftFilter.

        Fetch shifts for the specified team members. Replaced `employee_ids` at version \"2020-08-26\".

        :return: The team_member_ids of this ShiftFilter.
        :rtype: List[str]
        """
        return self._team_member_ids

    @team_member_ids.setter
    def team_member_ids(self, team_member_ids):
        """Sets the team_member_ids of this ShiftFilter.

        Fetch shifts for the specified team members. Replaced `employee_ids` at version \"2020-08-26\".

        :param team_member_ids: The team_member_ids of this ShiftFilter.
        :type team_member_ids: List[str]
        """
        if team_member_ids is None:
            raise ValueError("Invalid value for `team_member_ids`, must not be `None`")

        self._team_member_ids = team_member_ids

    @property
    def workday(self):
        """Gets the workday of this ShiftFilter.


        :return: The workday of this ShiftFilter.
        :rtype: ShiftWorkday
        """
        return self._workday

    @workday.setter
    def workday(self, workday):
        """Sets the workday of this ShiftFilter.


        :param workday: The workday of this ShiftFilter.
        :type workday: ShiftWorkday
        """

        self._workday = workday
