# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TipSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_tipping: bool=None, custom_tip_field: bool=None, separate_tip_screen: bool=None, smart_tipping: bool=None, tip_percentages: List[int]=None):
        """TipSettings - a model defined in OpenAPI

        :param allow_tipping: The allow_tipping of this TipSettings.
        :param custom_tip_field: The custom_tip_field of this TipSettings.
        :param separate_tip_screen: The separate_tip_screen of this TipSettings.
        :param smart_tipping: The smart_tipping of this TipSettings.
        :param tip_percentages: The tip_percentages of this TipSettings.
        """
        self.openapi_types = {
            'allow_tipping': bool,
            'custom_tip_field': bool,
            'separate_tip_screen': bool,
            'smart_tipping': bool,
            'tip_percentages': List[int]
        }

        self.attribute_map = {
            'allow_tipping': 'allow_tipping',
            'custom_tip_field': 'custom_tip_field',
            'separate_tip_screen': 'separate_tip_screen',
            'smart_tipping': 'smart_tipping',
            'tip_percentages': 'tip_percentages'
        }

        self._allow_tipping = allow_tipping
        self._custom_tip_field = custom_tip_field
        self._separate_tip_screen = separate_tip_screen
        self._smart_tipping = smart_tipping
        self._tip_percentages = tip_percentages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TipSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TipSettings of this TipSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_tipping(self):
        """Gets the allow_tipping of this TipSettings.

        Indicates whether tipping is enabled for this checkout. Defaults to false.

        :return: The allow_tipping of this TipSettings.
        :rtype: bool
        """
        return self._allow_tipping

    @allow_tipping.setter
    def allow_tipping(self, allow_tipping):
        """Sets the allow_tipping of this TipSettings.

        Indicates whether tipping is enabled for this checkout. Defaults to false.

        :param allow_tipping: The allow_tipping of this TipSettings.
        :type allow_tipping: bool
        """

        self._allow_tipping = allow_tipping

    @property
    def custom_tip_field(self):
        """Gets the custom_tip_field of this TipSettings.

        Indicates whether custom tip amounts are allowed during the checkout flow. Defaults to false.

        :return: The custom_tip_field of this TipSettings.
        :rtype: bool
        """
        return self._custom_tip_field

    @custom_tip_field.setter
    def custom_tip_field(self, custom_tip_field):
        """Sets the custom_tip_field of this TipSettings.

        Indicates whether custom tip amounts are allowed during the checkout flow. Defaults to false.

        :param custom_tip_field: The custom_tip_field of this TipSettings.
        :type custom_tip_field: bool
        """

        self._custom_tip_field = custom_tip_field

    @property
    def separate_tip_screen(self):
        """Gets the separate_tip_screen of this TipSettings.

        Indicates whether tip options should be presented on the screen before presenting the signature screen during card payment. Defaults to false.

        :return: The separate_tip_screen of this TipSettings.
        :rtype: bool
        """
        return self._separate_tip_screen

    @separate_tip_screen.setter
    def separate_tip_screen(self, separate_tip_screen):
        """Sets the separate_tip_screen of this TipSettings.

        Indicates whether tip options should be presented on the screen before presenting the signature screen during card payment. Defaults to false.

        :param separate_tip_screen: The separate_tip_screen of this TipSettings.
        :type separate_tip_screen: bool
        """

        self._separate_tip_screen = separate_tip_screen

    @property
    def smart_tipping(self):
        """Gets the smart_tipping of this TipSettings.

        Enables the \"Smart Tip Amounts\" behavior. Exact tipping options depend on the region in which the Square seller is active.  For payments under 10.00, in the Australia, Canada, Ireland, United Kingdom, and United States, tipping options are presented as no tip, .50, 1.00 or 2.00.  For payment amounts of 10.00 or greater, tipping options are presented as the following percentages: 0%, 5%, 10%, 15%.  If set to true, the `tip_percentages` settings is ignored. Defaults to false.  To learn more about smart tipping, see [Accept Tips with the Square App](https://squareup.com/help/us/en/article/5069-accept-tips-with-the-square-app).

        :return: The smart_tipping of this TipSettings.
        :rtype: bool
        """
        return self._smart_tipping

    @smart_tipping.setter
    def smart_tipping(self, smart_tipping):
        """Sets the smart_tipping of this TipSettings.

        Enables the \"Smart Tip Amounts\" behavior. Exact tipping options depend on the region in which the Square seller is active.  For payments under 10.00, in the Australia, Canada, Ireland, United Kingdom, and United States, tipping options are presented as no tip, .50, 1.00 or 2.00.  For payment amounts of 10.00 or greater, tipping options are presented as the following percentages: 0%, 5%, 10%, 15%.  If set to true, the `tip_percentages` settings is ignored. Defaults to false.  To learn more about smart tipping, see [Accept Tips with the Square App](https://squareup.com/help/us/en/article/5069-accept-tips-with-the-square-app).

        :param smart_tipping: The smart_tipping of this TipSettings.
        :type smart_tipping: bool
        """

        self._smart_tipping = smart_tipping

    @property
    def tip_percentages(self):
        """Gets the tip_percentages of this TipSettings.

        A list of tip percentages that should be presented during the checkout flow, specified as up to 3 non-negative integers from 0 to 100 (inclusive). Defaults to 15, 20, and 25.

        :return: The tip_percentages of this TipSettings.
        :rtype: List[int]
        """
        return self._tip_percentages

    @tip_percentages.setter
    def tip_percentages(self, tip_percentages):
        """Sets the tip_percentages of this TipSettings.

        A list of tip percentages that should be presented during the checkout flow, specified as up to 3 non-negative integers from 0 to 100 (inclusive). Defaults to 15, 20, and 25.

        :param tip_percentages: The tip_percentages of this TipSettings.
        :type tip_percentages: List[int]
        """

        self._tip_percentages = tip_percentages
