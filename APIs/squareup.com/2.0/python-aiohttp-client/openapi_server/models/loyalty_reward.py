# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoyaltyReward(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, id: str=None, loyalty_account_id: str=None, order_id: str=None, points: int=None, redeemed_at: str=None, reward_tier_id: str=None, status: str=None, updated_at: str=None):
        """LoyaltyReward - a model defined in OpenAPI

        :param created_at: The created_at of this LoyaltyReward.
        :param id: The id of this LoyaltyReward.
        :param loyalty_account_id: The loyalty_account_id of this LoyaltyReward.
        :param order_id: The order_id of this LoyaltyReward.
        :param points: The points of this LoyaltyReward.
        :param redeemed_at: The redeemed_at of this LoyaltyReward.
        :param reward_tier_id: The reward_tier_id of this LoyaltyReward.
        :param status: The status of this LoyaltyReward.
        :param updated_at: The updated_at of this LoyaltyReward.
        """
        self.openapi_types = {
            'created_at': str,
            'id': str,
            'loyalty_account_id': str,
            'order_id': str,
            'points': int,
            'redeemed_at': str,
            'reward_tier_id': str,
            'status': str,
            'updated_at': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'id': 'id',
            'loyalty_account_id': 'loyalty_account_id',
            'order_id': 'order_id',
            'points': 'points',
            'redeemed_at': 'redeemed_at',
            'reward_tier_id': 'reward_tier_id',
            'status': 'status',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._id = id
        self._loyalty_account_id = loyalty_account_id
        self._order_id = order_id
        self._points = points
        self._redeemed_at = redeemed_at
        self._reward_tier_id = reward_tier_id
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyReward':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyReward of this LoyaltyReward.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this LoyaltyReward.

        The timestamp when the reward was created, in RFC 3339 format.

        :return: The created_at of this LoyaltyReward.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LoyaltyReward.

        The timestamp when the reward was created, in RFC 3339 format.

        :param created_at: The created_at of this LoyaltyReward.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this LoyaltyReward.

        The Square-assigned ID of the loyalty reward.

        :return: The id of this LoyaltyReward.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoyaltyReward.

        The Square-assigned ID of the loyalty reward.

        :param id: The id of this LoyaltyReward.
        :type id: str
        """
        if id is not None and len(id) > 36:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `36`")

        self._id = id

    @property
    def loyalty_account_id(self):
        """Gets the loyalty_account_id of this LoyaltyReward.

        The Square-assigned ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) to which the reward belongs.

        :return: The loyalty_account_id of this LoyaltyReward.
        :rtype: str
        """
        return self._loyalty_account_id

    @loyalty_account_id.setter
    def loyalty_account_id(self, loyalty_account_id):
        """Sets the loyalty_account_id of this LoyaltyReward.

        The Square-assigned ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) to which the reward belongs.

        :param loyalty_account_id: The loyalty_account_id of this LoyaltyReward.
        :type loyalty_account_id: str
        """
        if loyalty_account_id is None:
            raise ValueError("Invalid value for `loyalty_account_id`, must not be `None`")
        if loyalty_account_id is not None and len(loyalty_account_id) > 36:
            raise ValueError("Invalid value for `loyalty_account_id`, length must be less than or equal to `36`")
        if loyalty_account_id is not None and len(loyalty_account_id) < 1:
            raise ValueError("Invalid value for `loyalty_account_id`, length must be greater than or equal to `1`")

        self._loyalty_account_id = loyalty_account_id

    @property
    def order_id(self):
        """Gets the order_id of this LoyaltyReward.

        The Square-assigned ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) to which the reward is attached.

        :return: The order_id of this LoyaltyReward.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this LoyaltyReward.

        The Square-assigned ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) to which the reward is attached.

        :param order_id: The order_id of this LoyaltyReward.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def points(self):
        """Gets the points of this LoyaltyReward.

        The number of loyalty points used for the reward.

        :return: The points of this LoyaltyReward.
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this LoyaltyReward.

        The number of loyalty points used for the reward.

        :param points: The points of this LoyaltyReward.
        :type points: int
        """
        if points is not None and points < 1:
            raise ValueError("Invalid value for `points`, must be a value greater than or equal to `1`")

        self._points = points

    @property
    def redeemed_at(self):
        """Gets the redeemed_at of this LoyaltyReward.

        The timestamp when the reward was redeemed, in RFC 3339 format.

        :return: The redeemed_at of this LoyaltyReward.
        :rtype: str
        """
        return self._redeemed_at

    @redeemed_at.setter
    def redeemed_at(self, redeemed_at):
        """Sets the redeemed_at of this LoyaltyReward.

        The timestamp when the reward was redeemed, in RFC 3339 format.

        :param redeemed_at: The redeemed_at of this LoyaltyReward.
        :type redeemed_at: str
        """

        self._redeemed_at = redeemed_at

    @property
    def reward_tier_id(self):
        """Gets the reward_tier_id of this LoyaltyReward.

        The Square-assigned ID of the [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) used to create the reward.

        :return: The reward_tier_id of this LoyaltyReward.
        :rtype: str
        """
        return self._reward_tier_id

    @reward_tier_id.setter
    def reward_tier_id(self, reward_tier_id):
        """Sets the reward_tier_id of this LoyaltyReward.

        The Square-assigned ID of the [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) used to create the reward.

        :param reward_tier_id: The reward_tier_id of this LoyaltyReward.
        :type reward_tier_id: str
        """
        if reward_tier_id is None:
            raise ValueError("Invalid value for `reward_tier_id`, must not be `None`")
        if reward_tier_id is not None and len(reward_tier_id) > 36:
            raise ValueError("Invalid value for `reward_tier_id`, length must be less than or equal to `36`")
        if reward_tier_id is not None and len(reward_tier_id) < 1:
            raise ValueError("Invalid value for `reward_tier_id`, length must be greater than or equal to `1`")

        self._reward_tier_id = reward_tier_id

    @property
    def status(self):
        """Gets the status of this LoyaltyReward.

        The status of a loyalty reward.

        :return: The status of this LoyaltyReward.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LoyaltyReward.

        The status of a loyalty reward.

        :param status: The status of this LoyaltyReward.
        :type status: str
        """

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this LoyaltyReward.

        The timestamp when the reward was last updated, in RFC 3339 format.

        :return: The updated_at of this LoyaltyReward.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LoyaltyReward.

        The timestamp when the reward was last updated, in RFC 3339 format.

        :param updated_at: The updated_at of this LoyaltyReward.
        :type updated_at: str
        """

        self._updated_at = updated_at
