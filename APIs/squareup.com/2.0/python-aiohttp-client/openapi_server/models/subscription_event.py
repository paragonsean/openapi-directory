# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, effective_date: str=None, id: str=None, info: object=None, plan_id: str=None, subscription_event_type: str=None):
        """SubscriptionEvent - a model defined in OpenAPI

        :param effective_date: The effective_date of this SubscriptionEvent.
        :param id: The id of this SubscriptionEvent.
        :param info: The info of this SubscriptionEvent.
        :param plan_id: The plan_id of this SubscriptionEvent.
        :param subscription_event_type: The subscription_event_type of this SubscriptionEvent.
        """
        self.openapi_types = {
            'effective_date': str,
            'id': str,
            'info': object,
            'plan_id': str,
            'subscription_event_type': str
        }

        self.attribute_map = {
            'effective_date': 'effective_date',
            'id': 'id',
            'info': 'info',
            'plan_id': 'plan_id',
            'subscription_event_type': 'subscription_event_type'
        }

        self._effective_date = effective_date
        self._id = id
        self._info = info
        self._plan_id = plan_id
        self._subscription_event_type = subscription_event_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionEvent of this SubscriptionEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effective_date(self):
        """Gets the effective_date of this SubscriptionEvent.

        The date, in YYYY-MM-DD format (for example, 2013-01-15), when the subscription event went into effect.

        :return: The effective_date of this SubscriptionEvent.
        :rtype: str
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this SubscriptionEvent.

        The date, in YYYY-MM-DD format (for example, 2013-01-15), when the subscription event went into effect.

        :param effective_date: The effective_date of this SubscriptionEvent.
        :type effective_date: str
        """
        if effective_date is None:
            raise ValueError("Invalid value for `effective_date`, must not be `None`")

        self._effective_date = effective_date

    @property
    def id(self):
        """Gets the id of this SubscriptionEvent.

        The ID of the subscription event.

        :return: The id of this SubscriptionEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionEvent.

        The ID of the subscription event.

        :param id: The id of this SubscriptionEvent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def info(self):
        """Gets the info of this SubscriptionEvent.


        :return: The info of this SubscriptionEvent.
        :rtype: object
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this SubscriptionEvent.


        :param info: The info of this SubscriptionEvent.
        :type info: object
        """

        self._info = info

    @property
    def plan_id(self):
        """Gets the plan_id of this SubscriptionEvent.

        The ID of the subscription plan associated with the subscription.

        :return: The plan_id of this SubscriptionEvent.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this SubscriptionEvent.

        The ID of the subscription plan associated with the subscription.

        :param plan_id: The plan_id of this SubscriptionEvent.
        :type plan_id: str
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")

        self._plan_id = plan_id

    @property
    def subscription_event_type(self):
        """Gets the subscription_event_type of this SubscriptionEvent.

        Type of the subscription event.

        :return: The subscription_event_type of this SubscriptionEvent.
        :rtype: str
        """
        return self._subscription_event_type

    @subscription_event_type.setter
    def subscription_event_type(self, subscription_event_type):
        """Sets the subscription_event_type of this SubscriptionEvent.

        Type of the subscription event.

        :param subscription_event_type: The subscription_event_type of this SubscriptionEvent.
        :type subscription_event_type: str
        """
        if subscription_event_type is None:
            raise ValueError("Invalid value for `subscription_event_type`, must not be `None`")

        self._subscription_event_type = subscription_event_type
