# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class GiftCard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance_money: Money=None, created_at: str=None, customer_ids: List[str]=None, gan: str=None, gan_source: object=None, id: str=None, state: object=None, type: object=None):
        """GiftCard - a model defined in OpenAPI

        :param balance_money: The balance_money of this GiftCard.
        :param created_at: The created_at of this GiftCard.
        :param customer_ids: The customer_ids of this GiftCard.
        :param gan: The gan of this GiftCard.
        :param gan_source: The gan_source of this GiftCard.
        :param id: The id of this GiftCard.
        :param state: The state of this GiftCard.
        :param type: The type of this GiftCard.
        """
        self.openapi_types = {
            'balance_money': Money,
            'created_at': str,
            'customer_ids': List[str],
            'gan': str,
            'gan_source': object,
            'id': str,
            'state': object,
            'type': object
        }

        self.attribute_map = {
            'balance_money': 'balance_money',
            'created_at': 'created_at',
            'customer_ids': 'customer_ids',
            'gan': 'gan',
            'gan_source': 'gan_source',
            'id': 'id',
            'state': 'state',
            'type': 'type'
        }

        self._balance_money = balance_money
        self._created_at = created_at
        self._customer_ids = customer_ids
        self._gan = gan
        self._gan_source = gan_source
        self._id = id
        self._state = state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GiftCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GiftCard of this GiftCard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance_money(self):
        """Gets the balance_money of this GiftCard.


        :return: The balance_money of this GiftCard.
        :rtype: Money
        """
        return self._balance_money

    @balance_money.setter
    def balance_money(self, balance_money):
        """Sets the balance_money of this GiftCard.


        :param balance_money: The balance_money of this GiftCard.
        :type balance_money: Money
        """

        self._balance_money = balance_money

    @property
    def created_at(self):
        """Gets the created_at of this GiftCard.

        The timestamp when the gift card was created, in RFC 3339 format.  In the case of a digital gift card, it is the time when you create a card  (using the Square Point of Sale application, Seller Dashboard, or Gift Cards API).   In the case of a plastic gift card, it is the time when Square associates the card with the  seller at the time of activation.

        :return: The created_at of this GiftCard.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GiftCard.

        The timestamp when the gift card was created, in RFC 3339 format.  In the case of a digital gift card, it is the time when you create a card  (using the Square Point of Sale application, Seller Dashboard, or Gift Cards API).   In the case of a plastic gift card, it is the time when Square associates the card with the  seller at the time of activation.

        :param created_at: The created_at of this GiftCard.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def customer_ids(self):
        """Gets the customer_ids of this GiftCard.

        The IDs of the customers to whom this gift card is linked.

        :return: The customer_ids of this GiftCard.
        :rtype: List[str]
        """
        return self._customer_ids

    @customer_ids.setter
    def customer_ids(self, customer_ids):
        """Sets the customer_ids of this GiftCard.

        The IDs of the customers to whom this gift card is linked.

        :param customer_ids: The customer_ids of this GiftCard.
        :type customer_ids: List[str]
        """

        self._customer_ids = customer_ids

    @property
    def gan(self):
        """Gets the gan of this GiftCard.

        The gift card account number.

        :return: The gan of this GiftCard.
        :rtype: str
        """
        return self._gan

    @gan.setter
    def gan(self, gan):
        """Sets the gan of this GiftCard.

        The gift card account number.

        :param gan: The gan of this GiftCard.
        :type gan: str
        """

        self._gan = gan

    @property
    def gan_source(self):
        """Gets the gan_source of this GiftCard.


        :return: The gan_source of this GiftCard.
        :rtype: object
        """
        return self._gan_source

    @gan_source.setter
    def gan_source(self, gan_source):
        """Sets the gan_source of this GiftCard.


        :param gan_source: The gan_source of this GiftCard.
        :type gan_source: object
        """

        self._gan_source = gan_source

    @property
    def id(self):
        """Gets the id of this GiftCard.

        The Square-assigned ID of the gift card.

        :return: The id of this GiftCard.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GiftCard.

        The Square-assigned ID of the gift card.

        :param id: The id of this GiftCard.
        :type id: str
        """

        self._id = id

    @property
    def state(self):
        """Gets the state of this GiftCard.


        :return: The state of this GiftCard.
        :rtype: object
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GiftCard.


        :param state: The state of this GiftCard.
        :type state: object
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this GiftCard.


        :return: The type of this GiftCard.
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GiftCard.


        :param type: The type of this GiftCard.
        :type type: object
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
