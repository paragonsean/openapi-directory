# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_item_modifier_list_info import CatalogItemModifierListInfo
from openapi_server.models.catalog_item_option_for_item import CatalogItemOptionForItem
from openapi_server.models.catalog_object import CatalogObject
from openapi_server import util


class CatalogItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abbreviation: str=None, available_electronically: bool=None, available_for_pickup: bool=None, available_online: bool=None, category_id: str=None, description: str=None, item_options: List[CatalogItemOptionForItem]=None, label_color: str=None, modifier_list_info: List[CatalogItemModifierListInfo]=None, name: str=None, product_type: str=None, skip_modifier_screen: bool=None, sort_name: str=None, tax_ids: List[str]=None, variations: List[CatalogObject]=None):
        """CatalogItem - a model defined in OpenAPI

        :param abbreviation: The abbreviation of this CatalogItem.
        :param available_electronically: The available_electronically of this CatalogItem.
        :param available_for_pickup: The available_for_pickup of this CatalogItem.
        :param available_online: The available_online of this CatalogItem.
        :param category_id: The category_id of this CatalogItem.
        :param description: The description of this CatalogItem.
        :param item_options: The item_options of this CatalogItem.
        :param label_color: The label_color of this CatalogItem.
        :param modifier_list_info: The modifier_list_info of this CatalogItem.
        :param name: The name of this CatalogItem.
        :param product_type: The product_type of this CatalogItem.
        :param skip_modifier_screen: The skip_modifier_screen of this CatalogItem.
        :param sort_name: The sort_name of this CatalogItem.
        :param tax_ids: The tax_ids of this CatalogItem.
        :param variations: The variations of this CatalogItem.
        """
        self.openapi_types = {
            'abbreviation': str,
            'available_electronically': bool,
            'available_for_pickup': bool,
            'available_online': bool,
            'category_id': str,
            'description': str,
            'item_options': List[CatalogItemOptionForItem],
            'label_color': str,
            'modifier_list_info': List[CatalogItemModifierListInfo],
            'name': str,
            'product_type': str,
            'skip_modifier_screen': bool,
            'sort_name': str,
            'tax_ids': List[str],
            'variations': List[CatalogObject]
        }

        self.attribute_map = {
            'abbreviation': 'abbreviation',
            'available_electronically': 'available_electronically',
            'available_for_pickup': 'available_for_pickup',
            'available_online': 'available_online',
            'category_id': 'category_id',
            'description': 'description',
            'item_options': 'item_options',
            'label_color': 'label_color',
            'modifier_list_info': 'modifier_list_info',
            'name': 'name',
            'product_type': 'product_type',
            'skip_modifier_screen': 'skip_modifier_screen',
            'sort_name': 'sort_name',
            'tax_ids': 'tax_ids',
            'variations': 'variations'
        }

        self._abbreviation = abbreviation
        self._available_electronically = available_electronically
        self._available_for_pickup = available_for_pickup
        self._available_online = available_online
        self._category_id = category_id
        self._description = description
        self._item_options = item_options
        self._label_color = label_color
        self._modifier_list_info = modifier_list_info
        self._name = name
        self._product_type = product_type
        self._skip_modifier_screen = skip_modifier_screen
        self._sort_name = sort_name
        self._tax_ids = tax_ids
        self._variations = variations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogItem of this CatalogItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abbreviation(self):
        """Gets the abbreviation of this CatalogItem.

        The text of the item's display label in the Square Point of Sale app. Only up to the first five characters of the string are used. This attribute is searchable, and its value length is of Unicode code points.

        :return: The abbreviation of this CatalogItem.
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this CatalogItem.

        The text of the item's display label in the Square Point of Sale app. Only up to the first five characters of the string are used. This attribute is searchable, and its value length is of Unicode code points.

        :param abbreviation: The abbreviation of this CatalogItem.
        :type abbreviation: str
        """
        if abbreviation is not None and len(abbreviation) > 24:
            raise ValueError("Invalid value for `abbreviation`, length must be less than or equal to `24`")

        self._abbreviation = abbreviation

    @property
    def available_electronically(self):
        """Gets the available_electronically of this CatalogItem.

        If `true`, the item can be added to electronically fulfilled orders from the merchant's online store.

        :return: The available_electronically of this CatalogItem.
        :rtype: bool
        """
        return self._available_electronically

    @available_electronically.setter
    def available_electronically(self, available_electronically):
        """Sets the available_electronically of this CatalogItem.

        If `true`, the item can be added to electronically fulfilled orders from the merchant's online store.

        :param available_electronically: The available_electronically of this CatalogItem.
        :type available_electronically: bool
        """

        self._available_electronically = available_electronically

    @property
    def available_for_pickup(self):
        """Gets the available_for_pickup of this CatalogItem.

        If `true`, the item can be added to pickup orders from the merchant's online store.

        :return: The available_for_pickup of this CatalogItem.
        :rtype: bool
        """
        return self._available_for_pickup

    @available_for_pickup.setter
    def available_for_pickup(self, available_for_pickup):
        """Sets the available_for_pickup of this CatalogItem.

        If `true`, the item can be added to pickup orders from the merchant's online store.

        :param available_for_pickup: The available_for_pickup of this CatalogItem.
        :type available_for_pickup: bool
        """

        self._available_for_pickup = available_for_pickup

    @property
    def available_online(self):
        """Gets the available_online of this CatalogItem.

        If `true`, the item can be added to shipping orders from the merchant's online store.

        :return: The available_online of this CatalogItem.
        :rtype: bool
        """
        return self._available_online

    @available_online.setter
    def available_online(self, available_online):
        """Sets the available_online of this CatalogItem.

        If `true`, the item can be added to shipping orders from the merchant's online store.

        :param available_online: The available_online of this CatalogItem.
        :type available_online: bool
        """

        self._available_online = available_online

    @property
    def category_id(self):
        """Gets the category_id of this CatalogItem.

        The ID of the item's category, if any.

        :return: The category_id of this CatalogItem.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this CatalogItem.

        The ID of the item's category, if any.

        :param category_id: The category_id of this CatalogItem.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def description(self):
        """Gets the description of this CatalogItem.

        The item's description. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.

        :return: The description of this CatalogItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CatalogItem.

        The item's description. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.

        :param description: The description of this CatalogItem.
        :type description: str
        """
        if description is not None and len(description) > 4096:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4096`")

        self._description = description

    @property
    def item_options(self):
        """Gets the item_options of this CatalogItem.

        List of item options IDs for this item. Used to manage and group item variations in a specified order.  Maximum: 6 item options.

        :return: The item_options of this CatalogItem.
        :rtype: List[CatalogItemOptionForItem]
        """
        return self._item_options

    @item_options.setter
    def item_options(self, item_options):
        """Sets the item_options of this CatalogItem.

        List of item options IDs for this item. Used to manage and group item variations in a specified order.  Maximum: 6 item options.

        :param item_options: The item_options of this CatalogItem.
        :type item_options: List[CatalogItemOptionForItem]
        """

        self._item_options = item_options

    @property
    def label_color(self):
        """Gets the label_color of this CatalogItem.

        The color of the item's display label in the Square Point of Sale app. This must be a valid hex color code.

        :return: The label_color of this CatalogItem.
        :rtype: str
        """
        return self._label_color

    @label_color.setter
    def label_color(self, label_color):
        """Sets the label_color of this CatalogItem.

        The color of the item's display label in the Square Point of Sale app. This must be a valid hex color code.

        :param label_color: The label_color of this CatalogItem.
        :type label_color: str
        """

        self._label_color = label_color

    @property
    def modifier_list_info(self):
        """Gets the modifier_list_info of this CatalogItem.

        A set of `CatalogItemModifierListInfo` objects representing the modifier lists that apply to this item, along with the overrides and min and max limits that are specific to this item. Modifier lists may also be added to or deleted from an item using `UpdateItemModifierLists`.

        :return: The modifier_list_info of this CatalogItem.
        :rtype: List[CatalogItemModifierListInfo]
        """
        return self._modifier_list_info

    @modifier_list_info.setter
    def modifier_list_info(self, modifier_list_info):
        """Sets the modifier_list_info of this CatalogItem.

        A set of `CatalogItemModifierListInfo` objects representing the modifier lists that apply to this item, along with the overrides and min and max limits that are specific to this item. Modifier lists may also be added to or deleted from an item using `UpdateItemModifierLists`.

        :param modifier_list_info: The modifier_list_info of this CatalogItem.
        :type modifier_list_info: List[CatalogItemModifierListInfo]
        """

        self._modifier_list_info = modifier_list_info

    @property
    def name(self):
        """Gets the name of this CatalogItem.

        The item's name. This is a searchable attribute for use in applicable query filters, its value must not be empty, and the length is of Unicode code points.

        :return: The name of this CatalogItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogItem.

        The item's name. This is a searchable attribute for use in applicable query filters, its value must not be empty, and the length is of Unicode code points.

        :param name: The name of this CatalogItem.
        :type name: str
        """
        if name is not None and len(name) > 512:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `512`")

        self._name = name

    @property
    def product_type(self):
        """Gets the product_type of this CatalogItem.

        The product type of the item. May not be changed once an item has been created.  Only items of product type `REGULAR` or `APPOINTMENTS_SERVICE` may be created by this API; items with other product types are read-only.

        :return: The product_type of this CatalogItem.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this CatalogItem.

        The product type of the item. May not be changed once an item has been created.  Only items of product type `REGULAR` or `APPOINTMENTS_SERVICE` may be created by this API; items with other product types are read-only.

        :param product_type: The product_type of this CatalogItem.
        :type product_type: str
        """

        self._product_type = product_type

    @property
    def skip_modifier_screen(self):
        """Gets the skip_modifier_screen of this CatalogItem.

        If `false`, the Square Point of Sale app will present the `CatalogItem`'s details screen immediately, allowing the merchant to choose `CatalogModifier`s before adding the item to the cart.  This is the default behavior.  If `true`, the Square Point of Sale app will immediately add the item to the cart with the pre-selected modifiers, and merchants can edit modifiers by drilling down onto the item's details.  Third-party clients are encouraged to implement similar behaviors.

        :return: The skip_modifier_screen of this CatalogItem.
        :rtype: bool
        """
        return self._skip_modifier_screen

    @skip_modifier_screen.setter
    def skip_modifier_screen(self, skip_modifier_screen):
        """Sets the skip_modifier_screen of this CatalogItem.

        If `false`, the Square Point of Sale app will present the `CatalogItem`'s details screen immediately, allowing the merchant to choose `CatalogModifier`s before adding the item to the cart.  This is the default behavior.  If `true`, the Square Point of Sale app will immediately add the item to the cart with the pre-selected modifiers, and merchants can edit modifiers by drilling down onto the item's details.  Third-party clients are encouraged to implement similar behaviors.

        :param skip_modifier_screen: The skip_modifier_screen of this CatalogItem.
        :type skip_modifier_screen: bool
        """

        self._skip_modifier_screen = skip_modifier_screen

    @property
    def sort_name(self):
        """Gets the sort_name of this CatalogItem.

        A name to sort the item by. If this name is unspecified, namely, the `sort_name` field is absent, the regular `name` field is used for sorting.  It is currently supported for sellers of the Japanese locale only.

        :return: The sort_name of this CatalogItem.
        :rtype: str
        """
        return self._sort_name

    @sort_name.setter
    def sort_name(self, sort_name):
        """Sets the sort_name of this CatalogItem.

        A name to sort the item by. If this name is unspecified, namely, the `sort_name` field is absent, the regular `name` field is used for sorting.  It is currently supported for sellers of the Japanese locale only.

        :param sort_name: The sort_name of this CatalogItem.
        :type sort_name: str
        """

        self._sort_name = sort_name

    @property
    def tax_ids(self):
        """Gets the tax_ids of this CatalogItem.

        A set of IDs indicating the taxes enabled for this item. When updating an item, any taxes listed here will be added to the item. Taxes may also be added to or deleted from an item using `UpdateItemTaxes`.

        :return: The tax_ids of this CatalogItem.
        :rtype: List[str]
        """
        return self._tax_ids

    @tax_ids.setter
    def tax_ids(self, tax_ids):
        """Sets the tax_ids of this CatalogItem.

        A set of IDs indicating the taxes enabled for this item. When updating an item, any taxes listed here will be added to the item. Taxes may also be added to or deleted from an item using `UpdateItemTaxes`.

        :param tax_ids: The tax_ids of this CatalogItem.
        :type tax_ids: List[str]
        """

        self._tax_ids = tax_ids

    @property
    def variations(self):
        """Gets the variations of this CatalogItem.

        A list of [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) objects for this item. An item must have at least one variation.

        :return: The variations of this CatalogItem.
        :rtype: List[CatalogObject]
        """
        return self._variations

    @variations.setter
    def variations(self, variations):
        """Sets the variations of this CatalogItem.

        A list of [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) objects for this item. An item must have at least one variation.

        :param variations: The variations of this CatalogItem.
        :type variations: List[CatalogObject]
        """

        self._variations = variations
