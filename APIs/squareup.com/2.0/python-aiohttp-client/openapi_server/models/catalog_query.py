# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_query_exact import CatalogQueryExact
from openapi_server.models.catalog_query_item_variations_for_item_option_values import CatalogQueryItemVariationsForItemOptionValues
from openapi_server.models.catalog_query_items_for_item_options import CatalogQueryItemsForItemOptions
from openapi_server.models.catalog_query_items_for_modifier_list import CatalogQueryItemsForModifierList
from openapi_server.models.catalog_query_items_for_tax import CatalogQueryItemsForTax
from openapi_server.models.catalog_query_prefix import CatalogQueryPrefix
from openapi_server.models.catalog_query_range import CatalogQueryRange
from openapi_server.models.catalog_query_set import CatalogQuerySet
from openapi_server.models.catalog_query_sorted_attribute import CatalogQuerySortedAttribute
from openapi_server.models.catalog_query_text import CatalogQueryText
from openapi_server import util


class CatalogQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exact_query: CatalogQueryExact=None, item_variations_for_item_option_values_query: CatalogQueryItemVariationsForItemOptionValues=None, items_for_item_options_query: CatalogQueryItemsForItemOptions=None, items_for_modifier_list_query: CatalogQueryItemsForModifierList=None, items_for_tax_query: CatalogQueryItemsForTax=None, prefix_query: CatalogQueryPrefix=None, range_query: CatalogQueryRange=None, set_query: CatalogQuerySet=None, sorted_attribute_query: CatalogQuerySortedAttribute=None, text_query: CatalogQueryText=None):
        """CatalogQuery - a model defined in OpenAPI

        :param exact_query: The exact_query of this CatalogQuery.
        :param item_variations_for_item_option_values_query: The item_variations_for_item_option_values_query of this CatalogQuery.
        :param items_for_item_options_query: The items_for_item_options_query of this CatalogQuery.
        :param items_for_modifier_list_query: The items_for_modifier_list_query of this CatalogQuery.
        :param items_for_tax_query: The items_for_tax_query of this CatalogQuery.
        :param prefix_query: The prefix_query of this CatalogQuery.
        :param range_query: The range_query of this CatalogQuery.
        :param set_query: The set_query of this CatalogQuery.
        :param sorted_attribute_query: The sorted_attribute_query of this CatalogQuery.
        :param text_query: The text_query of this CatalogQuery.
        """
        self.openapi_types = {
            'exact_query': CatalogQueryExact,
            'item_variations_for_item_option_values_query': CatalogQueryItemVariationsForItemOptionValues,
            'items_for_item_options_query': CatalogQueryItemsForItemOptions,
            'items_for_modifier_list_query': CatalogQueryItemsForModifierList,
            'items_for_tax_query': CatalogQueryItemsForTax,
            'prefix_query': CatalogQueryPrefix,
            'range_query': CatalogQueryRange,
            'set_query': CatalogQuerySet,
            'sorted_attribute_query': CatalogQuerySortedAttribute,
            'text_query': CatalogQueryText
        }

        self.attribute_map = {
            'exact_query': 'exact_query',
            'item_variations_for_item_option_values_query': 'item_variations_for_item_option_values_query',
            'items_for_item_options_query': 'items_for_item_options_query',
            'items_for_modifier_list_query': 'items_for_modifier_list_query',
            'items_for_tax_query': 'items_for_tax_query',
            'prefix_query': 'prefix_query',
            'range_query': 'range_query',
            'set_query': 'set_query',
            'sorted_attribute_query': 'sorted_attribute_query',
            'text_query': 'text_query'
        }

        self._exact_query = exact_query
        self._item_variations_for_item_option_values_query = item_variations_for_item_option_values_query
        self._items_for_item_options_query = items_for_item_options_query
        self._items_for_modifier_list_query = items_for_modifier_list_query
        self._items_for_tax_query = items_for_tax_query
        self._prefix_query = prefix_query
        self._range_query = range_query
        self._set_query = set_query
        self._sorted_attribute_query = sorted_attribute_query
        self._text_query = text_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogQuery of this CatalogQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exact_query(self):
        """Gets the exact_query of this CatalogQuery.


        :return: The exact_query of this CatalogQuery.
        :rtype: CatalogQueryExact
        """
        return self._exact_query

    @exact_query.setter
    def exact_query(self, exact_query):
        """Sets the exact_query of this CatalogQuery.


        :param exact_query: The exact_query of this CatalogQuery.
        :type exact_query: CatalogQueryExact
        """

        self._exact_query = exact_query

    @property
    def item_variations_for_item_option_values_query(self):
        """Gets the item_variations_for_item_option_values_query of this CatalogQuery.


        :return: The item_variations_for_item_option_values_query of this CatalogQuery.
        :rtype: CatalogQueryItemVariationsForItemOptionValues
        """
        return self._item_variations_for_item_option_values_query

    @item_variations_for_item_option_values_query.setter
    def item_variations_for_item_option_values_query(self, item_variations_for_item_option_values_query):
        """Sets the item_variations_for_item_option_values_query of this CatalogQuery.


        :param item_variations_for_item_option_values_query: The item_variations_for_item_option_values_query of this CatalogQuery.
        :type item_variations_for_item_option_values_query: CatalogQueryItemVariationsForItemOptionValues
        """

        self._item_variations_for_item_option_values_query = item_variations_for_item_option_values_query

    @property
    def items_for_item_options_query(self):
        """Gets the items_for_item_options_query of this CatalogQuery.


        :return: The items_for_item_options_query of this CatalogQuery.
        :rtype: CatalogQueryItemsForItemOptions
        """
        return self._items_for_item_options_query

    @items_for_item_options_query.setter
    def items_for_item_options_query(self, items_for_item_options_query):
        """Sets the items_for_item_options_query of this CatalogQuery.


        :param items_for_item_options_query: The items_for_item_options_query of this CatalogQuery.
        :type items_for_item_options_query: CatalogQueryItemsForItemOptions
        """

        self._items_for_item_options_query = items_for_item_options_query

    @property
    def items_for_modifier_list_query(self):
        """Gets the items_for_modifier_list_query of this CatalogQuery.


        :return: The items_for_modifier_list_query of this CatalogQuery.
        :rtype: CatalogQueryItemsForModifierList
        """
        return self._items_for_modifier_list_query

    @items_for_modifier_list_query.setter
    def items_for_modifier_list_query(self, items_for_modifier_list_query):
        """Sets the items_for_modifier_list_query of this CatalogQuery.


        :param items_for_modifier_list_query: The items_for_modifier_list_query of this CatalogQuery.
        :type items_for_modifier_list_query: CatalogQueryItemsForModifierList
        """

        self._items_for_modifier_list_query = items_for_modifier_list_query

    @property
    def items_for_tax_query(self):
        """Gets the items_for_tax_query of this CatalogQuery.


        :return: The items_for_tax_query of this CatalogQuery.
        :rtype: CatalogQueryItemsForTax
        """
        return self._items_for_tax_query

    @items_for_tax_query.setter
    def items_for_tax_query(self, items_for_tax_query):
        """Sets the items_for_tax_query of this CatalogQuery.


        :param items_for_tax_query: The items_for_tax_query of this CatalogQuery.
        :type items_for_tax_query: CatalogQueryItemsForTax
        """

        self._items_for_tax_query = items_for_tax_query

    @property
    def prefix_query(self):
        """Gets the prefix_query of this CatalogQuery.


        :return: The prefix_query of this CatalogQuery.
        :rtype: CatalogQueryPrefix
        """
        return self._prefix_query

    @prefix_query.setter
    def prefix_query(self, prefix_query):
        """Sets the prefix_query of this CatalogQuery.


        :param prefix_query: The prefix_query of this CatalogQuery.
        :type prefix_query: CatalogQueryPrefix
        """

        self._prefix_query = prefix_query

    @property
    def range_query(self):
        """Gets the range_query of this CatalogQuery.


        :return: The range_query of this CatalogQuery.
        :rtype: CatalogQueryRange
        """
        return self._range_query

    @range_query.setter
    def range_query(self, range_query):
        """Sets the range_query of this CatalogQuery.


        :param range_query: The range_query of this CatalogQuery.
        :type range_query: CatalogQueryRange
        """

        self._range_query = range_query

    @property
    def set_query(self):
        """Gets the set_query of this CatalogQuery.


        :return: The set_query of this CatalogQuery.
        :rtype: CatalogQuerySet
        """
        return self._set_query

    @set_query.setter
    def set_query(self, set_query):
        """Sets the set_query of this CatalogQuery.


        :param set_query: The set_query of this CatalogQuery.
        :type set_query: CatalogQuerySet
        """

        self._set_query = set_query

    @property
    def sorted_attribute_query(self):
        """Gets the sorted_attribute_query of this CatalogQuery.


        :return: The sorted_attribute_query of this CatalogQuery.
        :rtype: CatalogQuerySortedAttribute
        """
        return self._sorted_attribute_query

    @sorted_attribute_query.setter
    def sorted_attribute_query(self, sorted_attribute_query):
        """Sets the sorted_attribute_query of this CatalogQuery.


        :param sorted_attribute_query: The sorted_attribute_query of this CatalogQuery.
        :type sorted_attribute_query: CatalogQuerySortedAttribute
        """

        self._sorted_attribute_query = sorted_attribute_query

    @property
    def text_query(self):
        """Gets the text_query of this CatalogQuery.


        :return: The text_query of this CatalogQuery.
        :rtype: CatalogQueryText
        """
        return self._text_query

    @text_query.setter
    def text_query(self, text_query):
        """Sets the text_query of this CatalogQuery.


        :param text_query: The text_query of this CatalogQuery.
        :type text_query: CatalogQueryText
        """

        self._text_query = text_query
