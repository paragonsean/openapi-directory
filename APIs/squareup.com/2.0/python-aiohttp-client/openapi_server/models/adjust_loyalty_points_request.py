# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.loyalty_event_adjust_points import LoyaltyEventAdjustPoints
from openapi_server import util


class AdjustLoyaltyPointsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjust_points: LoyaltyEventAdjustPoints=None, idempotency_key: str=None):
        """AdjustLoyaltyPointsRequest - a model defined in OpenAPI

        :param adjust_points: The adjust_points of this AdjustLoyaltyPointsRequest.
        :param idempotency_key: The idempotency_key of this AdjustLoyaltyPointsRequest.
        """
        self.openapi_types = {
            'adjust_points': LoyaltyEventAdjustPoints,
            'idempotency_key': str
        }

        self.attribute_map = {
            'adjust_points': 'adjust_points',
            'idempotency_key': 'idempotency_key'
        }

        self._adjust_points = adjust_points
        self._idempotency_key = idempotency_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdjustLoyaltyPointsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdjustLoyaltyPointsRequest of this AdjustLoyaltyPointsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjust_points(self):
        """Gets the adjust_points of this AdjustLoyaltyPointsRequest.


        :return: The adjust_points of this AdjustLoyaltyPointsRequest.
        :rtype: LoyaltyEventAdjustPoints
        """
        return self._adjust_points

    @adjust_points.setter
    def adjust_points(self, adjust_points):
        """Sets the adjust_points of this AdjustLoyaltyPointsRequest.


        :param adjust_points: The adjust_points of this AdjustLoyaltyPointsRequest.
        :type adjust_points: LoyaltyEventAdjustPoints
        """
        if adjust_points is None:
            raise ValueError("Invalid value for `adjust_points`, must not be `None`")

        self._adjust_points = adjust_points

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this AdjustLoyaltyPointsRequest.

        A unique string that identifies this `AdjustLoyaltyPoints` request.  Keys can be any valid string, but must be unique for every request.

        :return: The idempotency_key of this AdjustLoyaltyPointsRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this AdjustLoyaltyPointsRequest.

        A unique string that identifies this `AdjustLoyaltyPoints` request.  Keys can be any valid string, but must be unique for every request.

        :param idempotency_key: The idempotency_key of this AdjustLoyaltyPointsRequest.
        :type idempotency_key: str
        """
        if idempotency_key is None:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if idempotency_key is not None and len(idempotency_key) > 128:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `128`")
        if idempotency_key is not None and len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key
