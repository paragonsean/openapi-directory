# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogQuerySortedAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_name: str=None, initial_attribute_value: str=None, sort_order: str=None):
        """CatalogQuerySortedAttribute - a model defined in OpenAPI

        :param attribute_name: The attribute_name of this CatalogQuerySortedAttribute.
        :param initial_attribute_value: The initial_attribute_value of this CatalogQuerySortedAttribute.
        :param sort_order: The sort_order of this CatalogQuerySortedAttribute.
        """
        self.openapi_types = {
            'attribute_name': str,
            'initial_attribute_value': str,
            'sort_order': str
        }

        self.attribute_map = {
            'attribute_name': 'attribute_name',
            'initial_attribute_value': 'initial_attribute_value',
            'sort_order': 'sort_order'
        }

        self._attribute_name = attribute_name
        self._initial_attribute_value = initial_attribute_value
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogQuerySortedAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogQuerySortedAttribute of this CatalogQuerySortedAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_name(self):
        """Gets the attribute_name of this CatalogQuerySortedAttribute.

        The attribute whose value is used as the sort key.

        :return: The attribute_name of this CatalogQuerySortedAttribute.
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this CatalogQuerySortedAttribute.

        The attribute whose value is used as the sort key.

        :param attribute_name: The attribute_name of this CatalogQuerySortedAttribute.
        :type attribute_name: str
        """
        if attribute_name is None:
            raise ValueError("Invalid value for `attribute_name`, must not be `None`")
        if attribute_name is not None and len(attribute_name) < 1:
            raise ValueError("Invalid value for `attribute_name`, length must be greater than or equal to `1`")

        self._attribute_name = attribute_name

    @property
    def initial_attribute_value(self):
        """Gets the initial_attribute_value of this CatalogQuerySortedAttribute.

        The first attribute value to be returned by the query. Ascending sorts will return only objects with this value or greater, while descending sorts will return only objects with this value or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).

        :return: The initial_attribute_value of this CatalogQuerySortedAttribute.
        :rtype: str
        """
        return self._initial_attribute_value

    @initial_attribute_value.setter
    def initial_attribute_value(self, initial_attribute_value):
        """Sets the initial_attribute_value of this CatalogQuerySortedAttribute.

        The first attribute value to be returned by the query. Ascending sorts will return only objects with this value or greater, while descending sorts will return only objects with this value or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).

        :param initial_attribute_value: The initial_attribute_value of this CatalogQuerySortedAttribute.
        :type initial_attribute_value: str
        """

        self._initial_attribute_value = initial_attribute_value

    @property
    def sort_order(self):
        """Gets the sort_order of this CatalogQuerySortedAttribute.

        The desired sort order, `\"ASC\"` (ascending) or `\"DESC\"` (descending).

        :return: The sort_order of this CatalogQuerySortedAttribute.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this CatalogQuerySortedAttribute.

        The desired sort order, `\"ASC\"` (ascending) or `\"DESC\"` (descending).

        :param sort_order: The sort_order of this CatalogQuerySortedAttribute.
        :type sort_order: str
        """

        self._sort_order = sort_order
