# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, created_at: str=None, device_id: str=None, id: str=None, location_id: str=None, name: str=None, pair_by: str=None, paired_at: str=None, product_type: str=None, status: str=None, status_changed_at: str=None):
        """DeviceCode - a model defined in OpenAPI

        :param code: The code of this DeviceCode.
        :param created_at: The created_at of this DeviceCode.
        :param device_id: The device_id of this DeviceCode.
        :param id: The id of this DeviceCode.
        :param location_id: The location_id of this DeviceCode.
        :param name: The name of this DeviceCode.
        :param pair_by: The pair_by of this DeviceCode.
        :param paired_at: The paired_at of this DeviceCode.
        :param product_type: The product_type of this DeviceCode.
        :param status: The status of this DeviceCode.
        :param status_changed_at: The status_changed_at of this DeviceCode.
        """
        self.openapi_types = {
            'code': str,
            'created_at': str,
            'device_id': str,
            'id': str,
            'location_id': str,
            'name': str,
            'pair_by': str,
            'paired_at': str,
            'product_type': str,
            'status': str,
            'status_changed_at': str
        }

        self.attribute_map = {
            'code': 'code',
            'created_at': 'created_at',
            'device_id': 'device_id',
            'id': 'id',
            'location_id': 'location_id',
            'name': 'name',
            'pair_by': 'pair_by',
            'paired_at': 'paired_at',
            'product_type': 'product_type',
            'status': 'status',
            'status_changed_at': 'status_changed_at'
        }

        self._code = code
        self._created_at = created_at
        self._device_id = device_id
        self._id = id
        self._location_id = location_id
        self._name = name
        self._pair_by = pair_by
        self._paired_at = paired_at
        self._product_type = product_type
        self._status = status
        self._status_changed_at = status_changed_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceCode of this DeviceCode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this DeviceCode.

        The unique code that can be used to login.

        :return: The code of this DeviceCode.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this DeviceCode.

        The unique code that can be used to login.

        :param code: The code of this DeviceCode.
        :type code: str
        """

        self._code = code

    @property
    def created_at(self):
        """Gets the created_at of this DeviceCode.

        When this DeviceCode was created. Timestamp in RFC 3339 format.

        :return: The created_at of this DeviceCode.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DeviceCode.

        When this DeviceCode was created. Timestamp in RFC 3339 format.

        :param created_at: The created_at of this DeviceCode.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def device_id(self):
        """Gets the device_id of this DeviceCode.

        The unique id of the device that used this code. Populated when the device is paired up.

        :return: The device_id of this DeviceCode.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceCode.

        The unique id of the device that used this code. Populated when the device is paired up.

        :param device_id: The device_id of this DeviceCode.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def id(self):
        """Gets the id of this DeviceCode.

        The unique id for this device code.

        :return: The id of this DeviceCode.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceCode.

        The unique id for this device code.

        :param id: The id of this DeviceCode.
        :type id: str
        """

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this DeviceCode.

        The location assigned to this code.

        :return: The location_id of this DeviceCode.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this DeviceCode.

        The location assigned to this code.

        :param location_id: The location_id of this DeviceCode.
        :type location_id: str
        """
        if location_id is not None and len(location_id) > 50:
            raise ValueError("Invalid value for `location_id`, length must be less than or equal to `50`")

        self._location_id = location_id

    @property
    def name(self):
        """Gets the name of this DeviceCode.

        An optional user-defined name for the device code.

        :return: The name of this DeviceCode.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceCode.

        An optional user-defined name for the device code.

        :param name: The name of this DeviceCode.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")

        self._name = name

    @property
    def pair_by(self):
        """Gets the pair_by of this DeviceCode.

        When this DeviceCode will expire and no longer login. Timestamp in RFC 3339 format.

        :return: The pair_by of this DeviceCode.
        :rtype: str
        """
        return self._pair_by

    @pair_by.setter
    def pair_by(self, pair_by):
        """Sets the pair_by of this DeviceCode.

        When this DeviceCode will expire and no longer login. Timestamp in RFC 3339 format.

        :param pair_by: The pair_by of this DeviceCode.
        :type pair_by: str
        """

        self._pair_by = pair_by

    @property
    def paired_at(self):
        """Gets the paired_at of this DeviceCode.

        When this DeviceCode was paired. Timestamp in RFC 3339 format.

        :return: The paired_at of this DeviceCode.
        :rtype: str
        """
        return self._paired_at

    @paired_at.setter
    def paired_at(self, paired_at):
        """Sets the paired_at of this DeviceCode.

        When this DeviceCode was paired. Timestamp in RFC 3339 format.

        :param paired_at: The paired_at of this DeviceCode.
        :type paired_at: str
        """

        self._paired_at = paired_at

    @property
    def product_type(self):
        """Gets the product_type of this DeviceCode.

        The targeting product type of the device code.

        :return: The product_type of this DeviceCode.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this DeviceCode.

        The targeting product type of the device code.

        :param product_type: The product_type of this DeviceCode.
        :type product_type: str
        """
        if product_type is None:
            raise ValueError("Invalid value for `product_type`, must not be `None`")

        self._product_type = product_type

    @property
    def status(self):
        """Gets the status of this DeviceCode.

        The pairing status of the device code.

        :return: The status of this DeviceCode.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeviceCode.

        The pairing status of the device code.

        :param status: The status of this DeviceCode.
        :type status: str
        """

        self._status = status

    @property
    def status_changed_at(self):
        """Gets the status_changed_at of this DeviceCode.

        When this DeviceCode's status was last changed. Timestamp in RFC 3339 format.

        :return: The status_changed_at of this DeviceCode.
        :rtype: str
        """
        return self._status_changed_at

    @status_changed_at.setter
    def status_changed_at(self, status_changed_at):
        """Sets the status_changed_at of this DeviceCode.

        When this DeviceCode's status was last changed. Timestamp in RFC 3339 format.

        :param status_changed_at: The status_changed_at of this DeviceCode.
        :type status_changed_at: str
        """

        self._status_changed_at = status_changed_at
