# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerTextFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exact: str=None, fuzzy: str=None):
        """CustomerTextFilter - a model defined in OpenAPI

        :param exact: The exact of this CustomerTextFilter.
        :param fuzzy: The fuzzy of this CustomerTextFilter.
        """
        self.openapi_types = {
            'exact': str,
            'fuzzy': str
        }

        self.attribute_map = {
            'exact': 'exact',
            'fuzzy': 'fuzzy'
        }

        self._exact = exact
        self._fuzzy = fuzzy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerTextFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerTextFilter of this CustomerTextFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exact(self):
        """Gets the exact of this CustomerTextFilter.

        Use the exact filter to select customers whose attributes match exactly the specified query.

        :return: The exact of this CustomerTextFilter.
        :rtype: str
        """
        return self._exact

    @exact.setter
    def exact(self, exact):
        """Sets the exact of this CustomerTextFilter.

        Use the exact filter to select customers whose attributes match exactly the specified query.

        :param exact: The exact of this CustomerTextFilter.
        :type exact: str
        """

        self._exact = exact

    @property
    def fuzzy(self):
        """Gets the fuzzy of this CustomerTextFilter.

        Use the fuzzy filter to select customers whose attributes match the specified query  in a fuzzy manner. When the fuzzy option is used, search queries are tokenized, and then  each query token must be matched somewhere in the searched attribute. For single token queries,  this is effectively the same behavior as a partial match operation.

        :return: The fuzzy of this CustomerTextFilter.
        :rtype: str
        """
        return self._fuzzy

    @fuzzy.setter
    def fuzzy(self, fuzzy):
        """Sets the fuzzy of this CustomerTextFilter.

        Use the fuzzy filter to select customers whose attributes match the specified query  in a fuzzy manner. When the fuzzy option is used, search queries are tokenized, and then  each query token must be matched somewhere in the searched attribute. For single token queries,  this is effectively the same behavior as a partial match operation.

        :param fuzzy: The fuzzy of this CustomerTextFilter.
        :type fuzzy: str
        """

        self._fuzzy = fuzzy
