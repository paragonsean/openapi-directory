# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_recipient import AdditionalRecipient
from openapi_server.models.money import Money
from openapi_server.models.tender_card_details import TenderCardDetails
from openapi_server.models.tender_cash_details import TenderCashDetails
from openapi_server import util


class Tender(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_recipients: List[AdditionalRecipient]=None, amount_money: Money=None, card_details: TenderCardDetails=None, cash_details: TenderCashDetails=None, created_at: str=None, customer_id: str=None, id: str=None, location_id: str=None, note: str=None, payment_id: str=None, processing_fee_money: Money=None, tip_money: Money=None, transaction_id: str=None, type: str=None):
        """Tender - a model defined in OpenAPI

        :param additional_recipients: The additional_recipients of this Tender.
        :param amount_money: The amount_money of this Tender.
        :param card_details: The card_details of this Tender.
        :param cash_details: The cash_details of this Tender.
        :param created_at: The created_at of this Tender.
        :param customer_id: The customer_id of this Tender.
        :param id: The id of this Tender.
        :param location_id: The location_id of this Tender.
        :param note: The note of this Tender.
        :param payment_id: The payment_id of this Tender.
        :param processing_fee_money: The processing_fee_money of this Tender.
        :param tip_money: The tip_money of this Tender.
        :param transaction_id: The transaction_id of this Tender.
        :param type: The type of this Tender.
        """
        self.openapi_types = {
            'additional_recipients': List[AdditionalRecipient],
            'amount_money': Money,
            'card_details': TenderCardDetails,
            'cash_details': TenderCashDetails,
            'created_at': str,
            'customer_id': str,
            'id': str,
            'location_id': str,
            'note': str,
            'payment_id': str,
            'processing_fee_money': Money,
            'tip_money': Money,
            'transaction_id': str,
            'type': str
        }

        self.attribute_map = {
            'additional_recipients': 'additional_recipients',
            'amount_money': 'amount_money',
            'card_details': 'card_details',
            'cash_details': 'cash_details',
            'created_at': 'created_at',
            'customer_id': 'customer_id',
            'id': 'id',
            'location_id': 'location_id',
            'note': 'note',
            'payment_id': 'payment_id',
            'processing_fee_money': 'processing_fee_money',
            'tip_money': 'tip_money',
            'transaction_id': 'transaction_id',
            'type': 'type'
        }

        self._additional_recipients = additional_recipients
        self._amount_money = amount_money
        self._card_details = card_details
        self._cash_details = cash_details
        self._created_at = created_at
        self._customer_id = customer_id
        self._id = id
        self._location_id = location_id
        self._note = note
        self._payment_id = payment_id
        self._processing_fee_money = processing_fee_money
        self._tip_money = tip_money
        self._transaction_id = transaction_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tender':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tender of this Tender.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_recipients(self):
        """Gets the additional_recipients of this Tender.

        Additional recipients (other than the merchant) receiving a portion of this tender. For example, fees assessed on the purchase by a third party integration.

        :return: The additional_recipients of this Tender.
        :rtype: List[AdditionalRecipient]
        """
        return self._additional_recipients

    @additional_recipients.setter
    def additional_recipients(self, additional_recipients):
        """Sets the additional_recipients of this Tender.

        Additional recipients (other than the merchant) receiving a portion of this tender. For example, fees assessed on the purchase by a third party integration.

        :param additional_recipients: The additional_recipients of this Tender.
        :type additional_recipients: List[AdditionalRecipient]
        """

        self._additional_recipients = additional_recipients

    @property
    def amount_money(self):
        """Gets the amount_money of this Tender.


        :return: The amount_money of this Tender.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this Tender.


        :param amount_money: The amount_money of this Tender.
        :type amount_money: Money
        """

        self._amount_money = amount_money

    @property
    def card_details(self):
        """Gets the card_details of this Tender.


        :return: The card_details of this Tender.
        :rtype: TenderCardDetails
        """
        return self._card_details

    @card_details.setter
    def card_details(self, card_details):
        """Sets the card_details of this Tender.


        :param card_details: The card_details of this Tender.
        :type card_details: TenderCardDetails
        """

        self._card_details = card_details

    @property
    def cash_details(self):
        """Gets the cash_details of this Tender.


        :return: The cash_details of this Tender.
        :rtype: TenderCashDetails
        """
        return self._cash_details

    @cash_details.setter
    def cash_details(self, cash_details):
        """Sets the cash_details of this Tender.


        :param cash_details: The cash_details of this Tender.
        :type cash_details: TenderCashDetails
        """

        self._cash_details = cash_details

    @property
    def created_at(self):
        """Gets the created_at of this Tender.

        The timestamp for when the tender was created, in RFC 3339 format.

        :return: The created_at of this Tender.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Tender.

        The timestamp for when the tender was created, in RFC 3339 format.

        :param created_at: The created_at of this Tender.
        :type created_at: str
        """
        if created_at is not None and len(created_at) > 32:
            raise ValueError("Invalid value for `created_at`, length must be less than or equal to `32`")

        self._created_at = created_at

    @property
    def customer_id(self):
        """Gets the customer_id of this Tender.

        If the tender is associated with a customer or represents a customer's card on file, this is the ID of the associated customer.

        :return: The customer_id of this Tender.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Tender.

        If the tender is associated with a customer or represents a customer's card on file, this is the ID of the associated customer.

        :param customer_id: The customer_id of this Tender.
        :type customer_id: str
        """
        if customer_id is not None and len(customer_id) > 191:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `191`")

        self._customer_id = customer_id

    @property
    def id(self):
        """Gets the id of this Tender.

        The tender's unique ID.

        :return: The id of this Tender.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tender.

        The tender's unique ID.

        :param id: The id of this Tender.
        :type id: str
        """
        if id is not None and len(id) > 192:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `192`")

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this Tender.

        The ID of the transaction's associated location.

        :return: The location_id of this Tender.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Tender.

        The ID of the transaction's associated location.

        :param location_id: The location_id of this Tender.
        :type location_id: str
        """
        if location_id is not None and len(location_id) > 50:
            raise ValueError("Invalid value for `location_id`, length must be less than or equal to `50`")

        self._location_id = location_id

    @property
    def note(self):
        """Gets the note of this Tender.

        An optional note associated with the tender at the time of payment.

        :return: The note of this Tender.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Tender.

        An optional note associated with the tender at the time of payment.

        :param note: The note of this Tender.
        :type note: str
        """
        if note is not None and len(note) > 500:
            raise ValueError("Invalid value for `note`, length must be less than or equal to `500`")

        self._note = note

    @property
    def payment_id(self):
        """Gets the payment_id of this Tender.

        The ID of the [Payment](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) that corresponds to this tender. This value is only present for payments created with the v2 Payments API.

        :return: The payment_id of this Tender.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this Tender.

        The ID of the [Payment](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) that corresponds to this tender. This value is only present for payments created with the v2 Payments API.

        :param payment_id: The payment_id of this Tender.
        :type payment_id: str
        """
        if payment_id is not None and len(payment_id) > 192:
            raise ValueError("Invalid value for `payment_id`, length must be less than or equal to `192`")

        self._payment_id = payment_id

    @property
    def processing_fee_money(self):
        """Gets the processing_fee_money of this Tender.


        :return: The processing_fee_money of this Tender.
        :rtype: Money
        """
        return self._processing_fee_money

    @processing_fee_money.setter
    def processing_fee_money(self, processing_fee_money):
        """Sets the processing_fee_money of this Tender.


        :param processing_fee_money: The processing_fee_money of this Tender.
        :type processing_fee_money: Money
        """

        self._processing_fee_money = processing_fee_money

    @property
    def tip_money(self):
        """Gets the tip_money of this Tender.


        :return: The tip_money of this Tender.
        :rtype: Money
        """
        return self._tip_money

    @tip_money.setter
    def tip_money(self, tip_money):
        """Sets the tip_money of this Tender.


        :param tip_money: The tip_money of this Tender.
        :type tip_money: Money
        """

        self._tip_money = tip_money

    @property
    def transaction_id(self):
        """Gets the transaction_id of this Tender.

        The ID of the tender's associated transaction.

        :return: The transaction_id of this Tender.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this Tender.

        The ID of the tender's associated transaction.

        :param transaction_id: The transaction_id of this Tender.
        :type transaction_id: str
        """
        if transaction_id is not None and len(transaction_id) > 192:
            raise ValueError("Invalid value for `transaction_id`, length must be less than or equal to `192`")

        self._transaction_id = transaction_id

    @property
    def type(self):
        """Gets the type of this Tender.

        The type of tender, such as `CARD` or `CASH`.

        :return: The type of this Tender.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Tender.

        The type of tender, such as `CARD` or `CASH`.

        :param type: The type of this Tender.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
