# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchOrdersStateFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, states: List[str]=None):
        """SearchOrdersStateFilter - a model defined in OpenAPI

        :param states: The states of this SearchOrdersStateFilter.
        """
        self.openapi_types = {
            'states': List[str]
        }

        self.attribute_map = {
            'states': 'states'
        }

        self._states = states

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchOrdersStateFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchOrdersStateFilter of this SearchOrdersStateFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def states(self):
        """Gets the states of this SearchOrdersStateFilter.

        States to filter for.

        :return: The states of this SearchOrdersStateFilter.
        :rtype: List[str]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this SearchOrdersStateFilter.

        States to filter for.

        :param states: The states of this SearchOrdersStateFilter.
        :type states: List[str]
        """
        if states is None:
            raise ValueError("Invalid value for `states`, must not be `None`")

        self._states = states
