# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Snippet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, created_at: str=None, id: str=None, site_id: str=None, updated_at: str=None):
        """Snippet - a model defined in OpenAPI

        :param content: The content of this Snippet.
        :param created_at: The created_at of this Snippet.
        :param id: The id of this Snippet.
        :param site_id: The site_id of this Snippet.
        :param updated_at: The updated_at of this Snippet.
        """
        self.openapi_types = {
            'content': str,
            'created_at': str,
            'id': str,
            'site_id': str,
            'updated_at': str
        }

        self.attribute_map = {
            'content': 'content',
            'created_at': 'created_at',
            'id': 'id',
            'site_id': 'site_id',
            'updated_at': 'updated_at'
        }

        self._content = content
        self._created_at = created_at
        self._id = id
        self._site_id = site_id
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Snippet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Snippet of this Snippet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this Snippet.

        The snippet code, which can contain valid HTML, JavaScript, or both.

        :return: The content of this Snippet.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Snippet.

        The snippet code, which can contain valid HTML, JavaScript, or both.

        :param content: The content of this Snippet.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")
        if content is not None and len(content) > 65535:
            raise ValueError("Invalid value for `content`, length must be less than or equal to `65535`")
        if content is not None and len(content) < 1:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `1`")

        self._content = content

    @property
    def created_at(self):
        """Gets the created_at of this Snippet.

        The timestamp of when the snippet was initially added to the site, in RFC 3339 format.

        :return: The created_at of this Snippet.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Snippet.

        The timestamp of when the snippet was initially added to the site, in RFC 3339 format.

        :param created_at: The created_at of this Snippet.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Snippet.

        The Square-assigned ID for the snippet.

        :return: The id of this Snippet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Snippet.

        The Square-assigned ID for the snippet.

        :param id: The id of this Snippet.
        :type id: str
        """
        if id is not None and len(id) > 48:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `48`")

        self._id = id

    @property
    def site_id(self):
        """Gets the site_id of this Snippet.

        The ID of the site that contains the snippet.

        :return: The site_id of this Snippet.
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this Snippet.

        The ID of the site that contains the snippet.

        :param site_id: The site_id of this Snippet.
        :type site_id: str
        """

        self._site_id = site_id

    @property
    def updated_at(self):
        """Gets the updated_at of this Snippet.

        The timestamp of when the snippet was last updated on the site, in RFC 3339 format.

        :return: The updated_at of this Snippet.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Snippet.

        The timestamp of when the snippet was last updated on the site, in RFC 3339 format.

        :param updated_at: The updated_at of this Snippet.
        :type updated_at: str
        """

        self._updated_at = updated_at
