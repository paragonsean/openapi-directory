# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ach_details import ACHDetails
from openapi_server.models.error import Error
from openapi_server import util


class BankAccountPaymentDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_ownership_type: str=None, ach_details: ACHDetails=None, bank_name: str=None, country: str=None, errors: List[Error]=None, fingerprint: str=None, statement_description: str=None, transfer_type: str=None):
        """BankAccountPaymentDetails - a model defined in OpenAPI

        :param account_ownership_type: The account_ownership_type of this BankAccountPaymentDetails.
        :param ach_details: The ach_details of this BankAccountPaymentDetails.
        :param bank_name: The bank_name of this BankAccountPaymentDetails.
        :param country: The country of this BankAccountPaymentDetails.
        :param errors: The errors of this BankAccountPaymentDetails.
        :param fingerprint: The fingerprint of this BankAccountPaymentDetails.
        :param statement_description: The statement_description of this BankAccountPaymentDetails.
        :param transfer_type: The transfer_type of this BankAccountPaymentDetails.
        """
        self.openapi_types = {
            'account_ownership_type': str,
            'ach_details': ACHDetails,
            'bank_name': str,
            'country': str,
            'errors': List[Error],
            'fingerprint': str,
            'statement_description': str,
            'transfer_type': str
        }

        self.attribute_map = {
            'account_ownership_type': 'account_ownership_type',
            'ach_details': 'ach_details',
            'bank_name': 'bank_name',
            'country': 'country',
            'errors': 'errors',
            'fingerprint': 'fingerprint',
            'statement_description': 'statement_description',
            'transfer_type': 'transfer_type'
        }

        self._account_ownership_type = account_ownership_type
        self._ach_details = ach_details
        self._bank_name = bank_name
        self._country = country
        self._errors = errors
        self._fingerprint = fingerprint
        self._statement_description = statement_description
        self._transfer_type = transfer_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccountPaymentDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccountPaymentDetails of this BankAccountPaymentDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_ownership_type(self):
        """Gets the account_ownership_type of this BankAccountPaymentDetails.

        The ownership type of the bank account performing the transfer. The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.

        :return: The account_ownership_type of this BankAccountPaymentDetails.
        :rtype: str
        """
        return self._account_ownership_type

    @account_ownership_type.setter
    def account_ownership_type(self, account_ownership_type):
        """Sets the account_ownership_type of this BankAccountPaymentDetails.

        The ownership type of the bank account performing the transfer. The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.

        :param account_ownership_type: The account_ownership_type of this BankAccountPaymentDetails.
        :type account_ownership_type: str
        """
        if account_ownership_type is not None and len(account_ownership_type) > 50:
            raise ValueError("Invalid value for `account_ownership_type`, length must be less than or equal to `50`")

        self._account_ownership_type = account_ownership_type

    @property
    def ach_details(self):
        """Gets the ach_details of this BankAccountPaymentDetails.


        :return: The ach_details of this BankAccountPaymentDetails.
        :rtype: ACHDetails
        """
        return self._ach_details

    @ach_details.setter
    def ach_details(self, ach_details):
        """Sets the ach_details of this BankAccountPaymentDetails.


        :param ach_details: The ach_details of this BankAccountPaymentDetails.
        :type ach_details: ACHDetails
        """

        self._ach_details = ach_details

    @property
    def bank_name(self):
        """Gets the bank_name of this BankAccountPaymentDetails.

        The name of the bank associated with the bank account.

        :return: The bank_name of this BankAccountPaymentDetails.
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this BankAccountPaymentDetails.

        The name of the bank associated with the bank account.

        :param bank_name: The bank_name of this BankAccountPaymentDetails.
        :type bank_name: str
        """
        if bank_name is not None and len(bank_name) > 100:
            raise ValueError("Invalid value for `bank_name`, length must be less than or equal to `100`")

        self._bank_name = bank_name

    @property
    def country(self):
        """Gets the country of this BankAccountPaymentDetails.

        The two-letter ISO code representing the country the bank account is located in.

        :return: The country of this BankAccountPaymentDetails.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this BankAccountPaymentDetails.

        The two-letter ISO code representing the country the bank account is located in.

        :param country: The country of this BankAccountPaymentDetails.
        :type country: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")
        if country is not None and len(country) < 2:
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `2`")

        self._country = country

    @property
    def errors(self):
        """Gets the errors of this BankAccountPaymentDetails.

        Information about errors encountered during the request.

        :return: The errors of this BankAccountPaymentDetails.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this BankAccountPaymentDetails.

        Information about errors encountered during the request.

        :param errors: The errors of this BankAccountPaymentDetails.
        :type errors: List[Error]
        """

        self._errors = errors

    @property
    def fingerprint(self):
        """Gets the fingerprint of this BankAccountPaymentDetails.

        Uniquely identifies the bank account for this seller and can be used to determine if payments are from the same bank account.

        :return: The fingerprint of this BankAccountPaymentDetails.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this BankAccountPaymentDetails.

        Uniquely identifies the bank account for this seller and can be used to determine if payments are from the same bank account.

        :param fingerprint: The fingerprint of this BankAccountPaymentDetails.
        :type fingerprint: str
        """
        if fingerprint is not None and len(fingerprint) > 255:
            raise ValueError("Invalid value for `fingerprint`, length must be less than or equal to `255`")

        self._fingerprint = fingerprint

    @property
    def statement_description(self):
        """Gets the statement_description of this BankAccountPaymentDetails.

        The statement description as sent to the bank.

        :return: The statement_description of this BankAccountPaymentDetails.
        :rtype: str
        """
        return self._statement_description

    @statement_description.setter
    def statement_description(self, statement_description):
        """Sets the statement_description of this BankAccountPaymentDetails.

        The statement description as sent to the bank.

        :param statement_description: The statement_description of this BankAccountPaymentDetails.
        :type statement_description: str
        """
        if statement_description is not None and len(statement_description) > 1000:
            raise ValueError("Invalid value for `statement_description`, length must be less than or equal to `1000`")

        self._statement_description = statement_description

    @property
    def transfer_type(self):
        """Gets the transfer_type of this BankAccountPaymentDetails.

        The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.

        :return: The transfer_type of this BankAccountPaymentDetails.
        :rtype: str
        """
        return self._transfer_type

    @transfer_type.setter
    def transfer_type(self, transfer_type):
        """Sets the transfer_type of this BankAccountPaymentDetails.

        The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.

        :param transfer_type: The transfer_type of this BankAccountPaymentDetails.
        :type transfer_type: str
        """
        if transfer_type is not None and len(transfer_type) > 50:
            raise ValueError("Invalid value for `transfer_type`, length must be less than or equal to `50`")

        self._transfer_type = transfer_type
