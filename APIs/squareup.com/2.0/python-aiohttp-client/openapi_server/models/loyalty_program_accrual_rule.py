# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class LoyaltyProgramAccrualRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accrual_type: str=None, catalog_object_id: str=None, excluded_category_ids: List[str]=None, excluded_item_variation_ids: List[str]=None, points: int=None, spend_amount_money: Money=None, visit_minimum_amount_money: Money=None):
        """LoyaltyProgramAccrualRule - a model defined in OpenAPI

        :param accrual_type: The accrual_type of this LoyaltyProgramAccrualRule.
        :param catalog_object_id: The catalog_object_id of this LoyaltyProgramAccrualRule.
        :param excluded_category_ids: The excluded_category_ids of this LoyaltyProgramAccrualRule.
        :param excluded_item_variation_ids: The excluded_item_variation_ids of this LoyaltyProgramAccrualRule.
        :param points: The points of this LoyaltyProgramAccrualRule.
        :param spend_amount_money: The spend_amount_money of this LoyaltyProgramAccrualRule.
        :param visit_minimum_amount_money: The visit_minimum_amount_money of this LoyaltyProgramAccrualRule.
        """
        self.openapi_types = {
            'accrual_type': str,
            'catalog_object_id': str,
            'excluded_category_ids': List[str],
            'excluded_item_variation_ids': List[str],
            'points': int,
            'spend_amount_money': Money,
            'visit_minimum_amount_money': Money
        }

        self.attribute_map = {
            'accrual_type': 'accrual_type',
            'catalog_object_id': 'catalog_object_id',
            'excluded_category_ids': 'excluded_category_ids',
            'excluded_item_variation_ids': 'excluded_item_variation_ids',
            'points': 'points',
            'spend_amount_money': 'spend_amount_money',
            'visit_minimum_amount_money': 'visit_minimum_amount_money'
        }

        self._accrual_type = accrual_type
        self._catalog_object_id = catalog_object_id
        self._excluded_category_ids = excluded_category_ids
        self._excluded_item_variation_ids = excluded_item_variation_ids
        self._points = points
        self._spend_amount_money = spend_amount_money
        self._visit_minimum_amount_money = visit_minimum_amount_money

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyProgramAccrualRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyProgramAccrualRule of this LoyaltyProgramAccrualRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accrual_type(self):
        """Gets the accrual_type of this LoyaltyProgramAccrualRule.

        The type of the accrual rule that defines how buyers can earn points.

        :return: The accrual_type of this LoyaltyProgramAccrualRule.
        :rtype: str
        """
        return self._accrual_type

    @accrual_type.setter
    def accrual_type(self, accrual_type):
        """Sets the accrual_type of this LoyaltyProgramAccrualRule.

        The type of the accrual rule that defines how buyers can earn points.

        :param accrual_type: The accrual_type of this LoyaltyProgramAccrualRule.
        :type accrual_type: str
        """
        if accrual_type is None:
            raise ValueError("Invalid value for `accrual_type`, must not be `None`")

        self._accrual_type = accrual_type

    @property
    def catalog_object_id(self):
        """Gets the catalog_object_id of this LoyaltyProgramAccrualRule.

        When the accrual rule is item-based or category-based, this field specifies the ID  of the [catalog object](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) that buyers can purchase to earn points.  If `accrual_type` is `ITEM_VARIATION`, the object is an item variation.  If `accrual_type` is `CATEGORY`, the object is a category.

        :return: The catalog_object_id of this LoyaltyProgramAccrualRule.
        :rtype: str
        """
        return self._catalog_object_id

    @catalog_object_id.setter
    def catalog_object_id(self, catalog_object_id):
        """Sets the catalog_object_id of this LoyaltyProgramAccrualRule.

        When the accrual rule is item-based or category-based, this field specifies the ID  of the [catalog object](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) that buyers can purchase to earn points.  If `accrual_type` is `ITEM_VARIATION`, the object is an item variation.  If `accrual_type` is `CATEGORY`, the object is a category.

        :param catalog_object_id: The catalog_object_id of this LoyaltyProgramAccrualRule.
        :type catalog_object_id: str
        """

        self._catalog_object_id = catalog_object_id

    @property
    def excluded_category_ids(self):
        """Gets the excluded_category_ids of this LoyaltyProgramAccrualRule.

        When the accrual rule is spend-based (`accrual_type` is `SPEND`), this field  lists the IDs of any `CATEGORY` catalog objects that are excluded from points accrual.   You can use the [BatchRetrieveCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-retrieve-catalog-objects)  endpoint to retrieve information about the excluded categories.

        :return: The excluded_category_ids of this LoyaltyProgramAccrualRule.
        :rtype: List[str]
        """
        return self._excluded_category_ids

    @excluded_category_ids.setter
    def excluded_category_ids(self, excluded_category_ids):
        """Sets the excluded_category_ids of this LoyaltyProgramAccrualRule.

        When the accrual rule is spend-based (`accrual_type` is `SPEND`), this field  lists the IDs of any `CATEGORY` catalog objects that are excluded from points accrual.   You can use the [BatchRetrieveCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-retrieve-catalog-objects)  endpoint to retrieve information about the excluded categories.

        :param excluded_category_ids: The excluded_category_ids of this LoyaltyProgramAccrualRule.
        :type excluded_category_ids: List[str]
        """

        self._excluded_category_ids = excluded_category_ids

    @property
    def excluded_item_variation_ids(self):
        """Gets the excluded_item_variation_ids of this LoyaltyProgramAccrualRule.

        When the accrual rule is spend-based (`accrual_type` is `SPEND`), this field  lists the IDs of any `ITEM_VARIATION` catalog objects that are excluded from points accrual.   You can use the [BatchRetrieveCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-retrieve-catalog-objects)  endpoint to retrieve information about the excluded item variations.

        :return: The excluded_item_variation_ids of this LoyaltyProgramAccrualRule.
        :rtype: List[str]
        """
        return self._excluded_item_variation_ids

    @excluded_item_variation_ids.setter
    def excluded_item_variation_ids(self, excluded_item_variation_ids):
        """Sets the excluded_item_variation_ids of this LoyaltyProgramAccrualRule.

        When the accrual rule is spend-based (`accrual_type` is `SPEND`), this field  lists the IDs of any `ITEM_VARIATION` catalog objects that are excluded from points accrual.   You can use the [BatchRetrieveCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-retrieve-catalog-objects)  endpoint to retrieve information about the excluded item variations.

        :param excluded_item_variation_ids: The excluded_item_variation_ids of this LoyaltyProgramAccrualRule.
        :type excluded_item_variation_ids: List[str]
        """

        self._excluded_item_variation_ids = excluded_item_variation_ids

    @property
    def points(self):
        """Gets the points of this LoyaltyProgramAccrualRule.

        The number of points that  buyers earn based on the `accrual_type`.

        :return: The points of this LoyaltyProgramAccrualRule.
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this LoyaltyProgramAccrualRule.

        The number of points that  buyers earn based on the `accrual_type`.

        :param points: The points of this LoyaltyProgramAccrualRule.
        :type points: int
        """
        if points is not None and points < 1:
            raise ValueError("Invalid value for `points`, must be a value greater than or equal to `1`")

        self._points = points

    @property
    def spend_amount_money(self):
        """Gets the spend_amount_money of this LoyaltyProgramAccrualRule.


        :return: The spend_amount_money of this LoyaltyProgramAccrualRule.
        :rtype: Money
        """
        return self._spend_amount_money

    @spend_amount_money.setter
    def spend_amount_money(self, spend_amount_money):
        """Sets the spend_amount_money of this LoyaltyProgramAccrualRule.


        :param spend_amount_money: The spend_amount_money of this LoyaltyProgramAccrualRule.
        :type spend_amount_money: Money
        """

        self._spend_amount_money = spend_amount_money

    @property
    def visit_minimum_amount_money(self):
        """Gets the visit_minimum_amount_money of this LoyaltyProgramAccrualRule.


        :return: The visit_minimum_amount_money of this LoyaltyProgramAccrualRule.
        :rtype: Money
        """
        return self._visit_minimum_amount_money

    @visit_minimum_amount_money.setter
    def visit_minimum_amount_money(self, visit_minimum_amount_money):
        """Sets the visit_minimum_amount_money of this LoyaltyProgramAccrualRule.


        :param visit_minimum_amount_money: The visit_minimum_amount_money of this LoyaltyProgramAccrualRule.
        :type visit_minimum_amount_money: Money
        """

        self._visit_minimum_amount_money = visit_minimum_amount_money
