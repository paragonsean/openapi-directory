# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tip_settings import TipSettings
from openapi_server import util


class DeviceCheckoutOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_id: str=None, skip_receipt_screen: bool=None, tip_settings: TipSettings=None):
        """DeviceCheckoutOptions - a model defined in OpenAPI

        :param device_id: The device_id of this DeviceCheckoutOptions.
        :param skip_receipt_screen: The skip_receipt_screen of this DeviceCheckoutOptions.
        :param tip_settings: The tip_settings of this DeviceCheckoutOptions.
        """
        self.openapi_types = {
            'device_id': str,
            'skip_receipt_screen': bool,
            'tip_settings': TipSettings
        }

        self.attribute_map = {
            'device_id': 'device_id',
            'skip_receipt_screen': 'skip_receipt_screen',
            'tip_settings': 'tip_settings'
        }

        self._device_id = device_id
        self._skip_receipt_screen = skip_receipt_screen
        self._tip_settings = tip_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceCheckoutOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceCheckoutOptions of this DeviceCheckoutOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self):
        """Gets the device_id of this DeviceCheckoutOptions.

        The unique ID of the device intended for this `TerminalCheckout`. A list of `DeviceCode` objects can be retrieved from the /v2/devices/codes endpoint. Match a `DeviceCode.device_id` value with `device_id` to get the associated device code.

        :return: The device_id of this DeviceCheckoutOptions.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceCheckoutOptions.

        The unique ID of the device intended for this `TerminalCheckout`. A list of `DeviceCode` objects can be retrieved from the /v2/devices/codes endpoint. Match a `DeviceCode.device_id` value with `device_id` to get the associated device code.

        :param device_id: The device_id of this DeviceCheckoutOptions.
        :type device_id: str
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")

        self._device_id = device_id

    @property
    def skip_receipt_screen(self):
        """Gets the skip_receipt_screen of this DeviceCheckoutOptions.

        Instructs the device to skip the receipt screen. Defaults to false.

        :return: The skip_receipt_screen of this DeviceCheckoutOptions.
        :rtype: bool
        """
        return self._skip_receipt_screen

    @skip_receipt_screen.setter
    def skip_receipt_screen(self, skip_receipt_screen):
        """Sets the skip_receipt_screen of this DeviceCheckoutOptions.

        Instructs the device to skip the receipt screen. Defaults to false.

        :param skip_receipt_screen: The skip_receipt_screen of this DeviceCheckoutOptions.
        :type skip_receipt_screen: bool
        """

        self._skip_receipt_screen = skip_receipt_screen

    @property
    def tip_settings(self):
        """Gets the tip_settings of this DeviceCheckoutOptions.


        :return: The tip_settings of this DeviceCheckoutOptions.
        :rtype: TipSettings
        """
        return self._tip_settings

    @tip_settings.setter
    def tip_settings(self, tip_settings):
        """Sets the tip_settings of this DeviceCheckoutOptions.


        :param tip_settings: The tip_settings of this DeviceCheckoutOptions.
        :type tip_settings: TipSettings
        """

        self._tip_settings = tip_settings
