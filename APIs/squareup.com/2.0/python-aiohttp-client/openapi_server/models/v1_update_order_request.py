# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class V1UpdateOrderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, canceled_note: str=None, completed_note: str=None, refunded_note: str=None, shipped_tracking_number: str=None):
        """V1UpdateOrderRequest - a model defined in OpenAPI

        :param action: The action of this V1UpdateOrderRequest.
        :param canceled_note: The canceled_note of this V1UpdateOrderRequest.
        :param completed_note: The completed_note of this V1UpdateOrderRequest.
        :param refunded_note: The refunded_note of this V1UpdateOrderRequest.
        :param shipped_tracking_number: The shipped_tracking_number of this V1UpdateOrderRequest.
        """
        self.openapi_types = {
            'action': str,
            'canceled_note': str,
            'completed_note': str,
            'refunded_note': str,
            'shipped_tracking_number': str
        }

        self.attribute_map = {
            'action': 'action',
            'canceled_note': 'canceled_note',
            'completed_note': 'completed_note',
            'refunded_note': 'refunded_note',
            'shipped_tracking_number': 'shipped_tracking_number'
        }

        self._action = action
        self._canceled_note = canceled_note
        self._completed_note = completed_note
        self._refunded_note = refunded_note
        self._shipped_tracking_number = shipped_tracking_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V1UpdateOrderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V1UpdateOrderRequest of this V1UpdateOrderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this V1UpdateOrderRequest.

        The action to perform on the order (COMPLETE, CANCEL, or REFUND).

        :return: The action of this V1UpdateOrderRequest.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this V1UpdateOrderRequest.

        The action to perform on the order (COMPLETE, CANCEL, or REFUND).

        :param action: The action of this V1UpdateOrderRequest.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def canceled_note(self):
        """Gets the canceled_note of this V1UpdateOrderRequest.

        A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.

        :return: The canceled_note of this V1UpdateOrderRequest.
        :rtype: str
        """
        return self._canceled_note

    @canceled_note.setter
    def canceled_note(self, canceled_note):
        """Sets the canceled_note of this V1UpdateOrderRequest.

        A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.

        :param canceled_note: The canceled_note of this V1UpdateOrderRequest.
        :type canceled_note: str
        """

        self._canceled_note = canceled_note

    @property
    def completed_note(self):
        """Gets the completed_note of this V1UpdateOrderRequest.

        A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.

        :return: The completed_note of this V1UpdateOrderRequest.
        :rtype: str
        """
        return self._completed_note

    @completed_note.setter
    def completed_note(self, completed_note):
        """Sets the completed_note of this V1UpdateOrderRequest.

        A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.

        :param completed_note: The completed_note of this V1UpdateOrderRequest.
        :type completed_note: str
        """

        self._completed_note = completed_note

    @property
    def refunded_note(self):
        """Gets the refunded_note of this V1UpdateOrderRequest.

        A merchant-specified note about the refunding of the order. Only valid if action is REFUND.

        :return: The refunded_note of this V1UpdateOrderRequest.
        :rtype: str
        """
        return self._refunded_note

    @refunded_note.setter
    def refunded_note(self, refunded_note):
        """Sets the refunded_note of this V1UpdateOrderRequest.

        A merchant-specified note about the refunding of the order. Only valid if action is REFUND.

        :param refunded_note: The refunded_note of this V1UpdateOrderRequest.
        :type refunded_note: str
        """

        self._refunded_note = refunded_note

    @property
    def shipped_tracking_number(self):
        """Gets the shipped_tracking_number of this V1UpdateOrderRequest.

        The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.

        :return: The shipped_tracking_number of this V1UpdateOrderRequest.
        :rtype: str
        """
        return self._shipped_tracking_number

    @shipped_tracking_number.setter
    def shipped_tracking_number(self, shipped_tracking_number):
        """Sets the shipped_tracking_number of this V1UpdateOrderRequest.

        The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.

        :param shipped_tracking_number: The shipped_tracking_number of this V1UpdateOrderRequest.
        :type shipped_tracking_number: str
        """

        self._shipped_tracking_number = shipped_tracking_number
