# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvoicePaymentReminder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, relative_scheduled_days: int=None, sent_at: str=None, status: str=None, uid: str=None):
        """InvoicePaymentReminder - a model defined in OpenAPI

        :param message: The message of this InvoicePaymentReminder.
        :param relative_scheduled_days: The relative_scheduled_days of this InvoicePaymentReminder.
        :param sent_at: The sent_at of this InvoicePaymentReminder.
        :param status: The status of this InvoicePaymentReminder.
        :param uid: The uid of this InvoicePaymentReminder.
        """
        self.openapi_types = {
            'message': str,
            'relative_scheduled_days': int,
            'sent_at': str,
            'status': str,
            'uid': str
        }

        self.attribute_map = {
            'message': 'message',
            'relative_scheduled_days': 'relative_scheduled_days',
            'sent_at': 'sent_at',
            'status': 'status',
            'uid': 'uid'
        }

        self._message = message
        self._relative_scheduled_days = relative_scheduled_days
        self._sent_at = sent_at
        self._status = status
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoicePaymentReminder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoicePaymentReminder of this InvoicePaymentReminder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this InvoicePaymentReminder.

        The reminder message.

        :return: The message of this InvoicePaymentReminder.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InvoicePaymentReminder.

        The reminder message.

        :param message: The message of this InvoicePaymentReminder.
        :type message: str
        """
        if message is not None and len(message) > 1000:
            raise ValueError("Invalid value for `message`, length must be less than or equal to `1000`")
        if message is not None and len(message) < 1:
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")

        self._message = message

    @property
    def relative_scheduled_days(self):
        """Gets the relative_scheduled_days of this InvoicePaymentReminder.

        The number of days before (a negative number) or after (a positive number) the payment request `due_date` when the reminder is sent. For example, -3 indicates that the reminder should be sent 3 days before the payment request `due_date`.

        :return: The relative_scheduled_days of this InvoicePaymentReminder.
        :rtype: int
        """
        return self._relative_scheduled_days

    @relative_scheduled_days.setter
    def relative_scheduled_days(self, relative_scheduled_days):
        """Sets the relative_scheduled_days of this InvoicePaymentReminder.

        The number of days before (a negative number) or after (a positive number) the payment request `due_date` when the reminder is sent. For example, -3 indicates that the reminder should be sent 3 days before the payment request `due_date`.

        :param relative_scheduled_days: The relative_scheduled_days of this InvoicePaymentReminder.
        :type relative_scheduled_days: int
        """
        if relative_scheduled_days is not None and relative_scheduled_days > 32767:
            raise ValueError("Invalid value for `relative_scheduled_days`, must be a value less than or equal to `32767`")
        if relative_scheduled_days is not None and relative_scheduled_days < -32767:
            raise ValueError("Invalid value for `relative_scheduled_days`, must be a value greater than or equal to `-32767`")

        self._relative_scheduled_days = relative_scheduled_days

    @property
    def sent_at(self):
        """Gets the sent_at of this InvoicePaymentReminder.

        If sent, the timestamp when the reminder was sent, in RFC 3339 format.

        :return: The sent_at of this InvoicePaymentReminder.
        :rtype: str
        """
        return self._sent_at

    @sent_at.setter
    def sent_at(self, sent_at):
        """Sets the sent_at of this InvoicePaymentReminder.

        If sent, the timestamp when the reminder was sent, in RFC 3339 format.

        :param sent_at: The sent_at of this InvoicePaymentReminder.
        :type sent_at: str
        """

        self._sent_at = sent_at

    @property
    def status(self):
        """Gets the status of this InvoicePaymentReminder.

        The status of the reminder.

        :return: The status of this InvoicePaymentReminder.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InvoicePaymentReminder.

        The status of the reminder.

        :param status: The status of this InvoicePaymentReminder.
        :type status: str
        """

        self._status = status

    @property
    def uid(self):
        """Gets the uid of this InvoicePaymentReminder.

        A Square-assigned ID that uniquely identifies the reminder within the `InvoicePaymentRequest`.

        :return: The uid of this InvoicePaymentReminder.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this InvoicePaymentReminder.

        A Square-assigned ID that uniquely identifies the reminder within the `InvoicePaymentRequest`.

        :param uid: The uid of this InvoicePaymentReminder.
        :type uid: str
        """

        self._uid = uid
