# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoyaltyEventOther(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, loyalty_program_id: str=None, points: int=None):
        """LoyaltyEventOther - a model defined in OpenAPI

        :param loyalty_program_id: The loyalty_program_id of this LoyaltyEventOther.
        :param points: The points of this LoyaltyEventOther.
        """
        self.openapi_types = {
            'loyalty_program_id': str,
            'points': int
        }

        self.attribute_map = {
            'loyalty_program_id': 'loyalty_program_id',
            'points': 'points'
        }

        self._loyalty_program_id = loyalty_program_id
        self._points = points

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyEventOther':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyEventOther of this LoyaltyEventOther.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def loyalty_program_id(self):
        """Gets the loyalty_program_id of this LoyaltyEventOther.

        The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).

        :return: The loyalty_program_id of this LoyaltyEventOther.
        :rtype: str
        """
        return self._loyalty_program_id

    @loyalty_program_id.setter
    def loyalty_program_id(self, loyalty_program_id):
        """Sets the loyalty_program_id of this LoyaltyEventOther.

        The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).

        :param loyalty_program_id: The loyalty_program_id of this LoyaltyEventOther.
        :type loyalty_program_id: str
        """
        if loyalty_program_id is None:
            raise ValueError("Invalid value for `loyalty_program_id`, must not be `None`")
        if loyalty_program_id is not None and len(loyalty_program_id) > 36:
            raise ValueError("Invalid value for `loyalty_program_id`, length must be less than or equal to `36`")
        if loyalty_program_id is not None and len(loyalty_program_id) < 1:
            raise ValueError("Invalid value for `loyalty_program_id`, length must be greater than or equal to `1`")

        self._loyalty_program_id = loyalty_program_id

    @property
    def points(self):
        """Gets the points of this LoyaltyEventOther.

        The number of points added or removed.

        :return: The points of this LoyaltyEventOther.
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this LoyaltyEventOther.

        The number of points added or removed.

        :param points: The points of this LoyaltyEventOther.
        :type points: int
        """
        if points is None:
            raise ValueError("Invalid value for `points`, must not be `None`")

        self._points = points
