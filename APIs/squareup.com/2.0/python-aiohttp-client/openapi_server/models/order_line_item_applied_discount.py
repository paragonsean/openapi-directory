# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class OrderLineItemAppliedDiscount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_money: Money=None, discount_uid: str=None, uid: str=None):
        """OrderLineItemAppliedDiscount - a model defined in OpenAPI

        :param applied_money: The applied_money of this OrderLineItemAppliedDiscount.
        :param discount_uid: The discount_uid of this OrderLineItemAppliedDiscount.
        :param uid: The uid of this OrderLineItemAppliedDiscount.
        """
        self.openapi_types = {
            'applied_money': Money,
            'discount_uid': str,
            'uid': str
        }

        self.attribute_map = {
            'applied_money': 'applied_money',
            'discount_uid': 'discount_uid',
            'uid': 'uid'
        }

        self._applied_money = applied_money
        self._discount_uid = discount_uid
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderLineItemAppliedDiscount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderLineItemAppliedDiscount of this OrderLineItemAppliedDiscount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_money(self):
        """Gets the applied_money of this OrderLineItemAppliedDiscount.


        :return: The applied_money of this OrderLineItemAppliedDiscount.
        :rtype: Money
        """
        return self._applied_money

    @applied_money.setter
    def applied_money(self, applied_money):
        """Sets the applied_money of this OrderLineItemAppliedDiscount.


        :param applied_money: The applied_money of this OrderLineItemAppliedDiscount.
        :type applied_money: Money
        """

        self._applied_money = applied_money

    @property
    def discount_uid(self):
        """Gets the discount_uid of this OrderLineItemAppliedDiscount.

        The `uid` of the discount that the applied discount represents. It must reference a discount present in the `order.discounts` field.  This field is immutable. To change which discounts apply to a line item, you must delete the discount and re-add it as a new `OrderLineItemAppliedDiscount`.

        :return: The discount_uid of this OrderLineItemAppliedDiscount.
        :rtype: str
        """
        return self._discount_uid

    @discount_uid.setter
    def discount_uid(self, discount_uid):
        """Sets the discount_uid of this OrderLineItemAppliedDiscount.

        The `uid` of the discount that the applied discount represents. It must reference a discount present in the `order.discounts` field.  This field is immutable. To change which discounts apply to a line item, you must delete the discount and re-add it as a new `OrderLineItemAppliedDiscount`.

        :param discount_uid: The discount_uid of this OrderLineItemAppliedDiscount.
        :type discount_uid: str
        """
        if discount_uid is None:
            raise ValueError("Invalid value for `discount_uid`, must not be `None`")
        if discount_uid is not None and len(discount_uid) > 60:
            raise ValueError("Invalid value for `discount_uid`, length must be less than or equal to `60`")
        if discount_uid is not None and len(discount_uid) < 1:
            raise ValueError("Invalid value for `discount_uid`, length must be greater than or equal to `1`")

        self._discount_uid = discount_uid

    @property
    def uid(self):
        """Gets the uid of this OrderLineItemAppliedDiscount.

        A unique ID that identifies the applied discount only within this order.

        :return: The uid of this OrderLineItemAppliedDiscount.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OrderLineItemAppliedDiscount.

        A unique ID that identifies the applied discount only within this order.

        :param uid: The uid of this OrderLineItemAppliedDiscount.
        :type uid: str
        """
        if uid is not None and len(uid) > 60:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `60`")

        self._uid = uid
