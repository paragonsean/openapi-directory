# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoyaltyEventLocationFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location_ids: List[str]=None):
        """LoyaltyEventLocationFilter - a model defined in OpenAPI

        :param location_ids: The location_ids of this LoyaltyEventLocationFilter.
        """
        self.openapi_types = {
            'location_ids': List[str]
        }

        self.attribute_map = {
            'location_ids': 'location_ids'
        }

        self._location_ids = location_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyEventLocationFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyEventLocationFilter of this LoyaltyEventLocationFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location_ids(self):
        """Gets the location_ids of this LoyaltyEventLocationFilter.

        The [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs for loyalty events to query. If multiple values are specified, the endpoint uses  a logical OR to combine them.

        :return: The location_ids of this LoyaltyEventLocationFilter.
        :rtype: List[str]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """Sets the location_ids of this LoyaltyEventLocationFilter.

        The [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs for loyalty events to query. If multiple values are specified, the endpoint uses  a logical OR to combine them.

        :param location_ids: The location_ids of this LoyaltyEventLocationFilter.
        :type location_ids: List[str]
        """
        if location_ids is None:
            raise ValueError("Invalid value for `location_ids`, must not be `None`")

        self._location_ids = location_ids
