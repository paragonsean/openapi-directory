# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BankAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number_suffix: str=None, account_type: str=None, bank_name: str=None, country: str=None, creditable: bool=None, currency: str=None, debit_mandate_reference_id: str=None, debitable: bool=None, fingerprint: str=None, holder_name: str=None, id: str=None, location_id: str=None, primary_bank_identification_number: str=None, reference_id: str=None, secondary_bank_identification_number: str=None, status: str=None, version: int=None):
        """BankAccount - a model defined in OpenAPI

        :param account_number_suffix: The account_number_suffix of this BankAccount.
        :param account_type: The account_type of this BankAccount.
        :param bank_name: The bank_name of this BankAccount.
        :param country: The country of this BankAccount.
        :param creditable: The creditable of this BankAccount.
        :param currency: The currency of this BankAccount.
        :param debit_mandate_reference_id: The debit_mandate_reference_id of this BankAccount.
        :param debitable: The debitable of this BankAccount.
        :param fingerprint: The fingerprint of this BankAccount.
        :param holder_name: The holder_name of this BankAccount.
        :param id: The id of this BankAccount.
        :param location_id: The location_id of this BankAccount.
        :param primary_bank_identification_number: The primary_bank_identification_number of this BankAccount.
        :param reference_id: The reference_id of this BankAccount.
        :param secondary_bank_identification_number: The secondary_bank_identification_number of this BankAccount.
        :param status: The status of this BankAccount.
        :param version: The version of this BankAccount.
        """
        self.openapi_types = {
            'account_number_suffix': str,
            'account_type': str,
            'bank_name': str,
            'country': str,
            'creditable': bool,
            'currency': str,
            'debit_mandate_reference_id': str,
            'debitable': bool,
            'fingerprint': str,
            'holder_name': str,
            'id': str,
            'location_id': str,
            'primary_bank_identification_number': str,
            'reference_id': str,
            'secondary_bank_identification_number': str,
            'status': str,
            'version': int
        }

        self.attribute_map = {
            'account_number_suffix': 'account_number_suffix',
            'account_type': 'account_type',
            'bank_name': 'bank_name',
            'country': 'country',
            'creditable': 'creditable',
            'currency': 'currency',
            'debit_mandate_reference_id': 'debit_mandate_reference_id',
            'debitable': 'debitable',
            'fingerprint': 'fingerprint',
            'holder_name': 'holder_name',
            'id': 'id',
            'location_id': 'location_id',
            'primary_bank_identification_number': 'primary_bank_identification_number',
            'reference_id': 'reference_id',
            'secondary_bank_identification_number': 'secondary_bank_identification_number',
            'status': 'status',
            'version': 'version'
        }

        self._account_number_suffix = account_number_suffix
        self._account_type = account_type
        self._bank_name = bank_name
        self._country = country
        self._creditable = creditable
        self._currency = currency
        self._debit_mandate_reference_id = debit_mandate_reference_id
        self._debitable = debitable
        self._fingerprint = fingerprint
        self._holder_name = holder_name
        self._id = id
        self._location_id = location_id
        self._primary_bank_identification_number = primary_bank_identification_number
        self._reference_id = reference_id
        self._secondary_bank_identification_number = secondary_bank_identification_number
        self._status = status
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccount of this BankAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number_suffix(self):
        """Gets the account_number_suffix of this BankAccount.

        The last few digits of the account number.

        :return: The account_number_suffix of this BankAccount.
        :rtype: str
        """
        return self._account_number_suffix

    @account_number_suffix.setter
    def account_number_suffix(self, account_number_suffix):
        """Sets the account_number_suffix of this BankAccount.

        The last few digits of the account number.

        :param account_number_suffix: The account_number_suffix of this BankAccount.
        :type account_number_suffix: str
        """
        if account_number_suffix is None:
            raise ValueError("Invalid value for `account_number_suffix`, must not be `None`")
        if account_number_suffix is not None and len(account_number_suffix) < 1:
            raise ValueError("Invalid value for `account_number_suffix`, length must be greater than or equal to `1`")

        self._account_number_suffix = account_number_suffix

    @property
    def account_type(self):
        """Gets the account_type of this BankAccount.

        The financial purpose of the associated bank account.

        :return: The account_type of this BankAccount.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this BankAccount.

        The financial purpose of the associated bank account.

        :param account_type: The account_type of this BankAccount.
        :type account_type: str
        """
        if account_type is None:
            raise ValueError("Invalid value for `account_type`, must not be `None`")

        self._account_type = account_type

    @property
    def bank_name(self):
        """Gets the bank_name of this BankAccount.

        Read only. Name of actual financial institution.  For example \"Bank of America\".

        :return: The bank_name of this BankAccount.
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this BankAccount.

        Read only. Name of actual financial institution.  For example \"Bank of America\".

        :param bank_name: The bank_name of this BankAccount.
        :type bank_name: str
        """
        if bank_name is not None and len(bank_name) > 100:
            raise ValueError("Invalid value for `bank_name`, length must be less than or equal to `100`")

        self._bank_name = bank_name

    @property
    def country(self):
        """Gets the country of this BankAccount.

        The ISO 3166 Alpha-2 country code where the bank account is based.

        :return: The country of this BankAccount.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this BankAccount.

        The ISO 3166 Alpha-2 country code where the bank account is based.

        :param country: The country of this BankAccount.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def creditable(self):
        """Gets the creditable of this BankAccount.

        Indicates whether it is possible for Square to send money to this bank account.

        :return: The creditable of this BankAccount.
        :rtype: bool
        """
        return self._creditable

    @creditable.setter
    def creditable(self, creditable):
        """Sets the creditable of this BankAccount.

        Indicates whether it is possible for Square to send money to this bank account.

        :param creditable: The creditable of this BankAccount.
        :type creditable: bool
        """
        if creditable is None:
            raise ValueError("Invalid value for `creditable`, must not be `None`")

        self._creditable = creditable

    @property
    def currency(self):
        """Gets the currency of this BankAccount.

        The 3-character ISO 4217 currency code indicating the operating currency of the bank account. For example, the currency code for US dollars is `USD`.

        :return: The currency of this BankAccount.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BankAccount.

        The 3-character ISO 4217 currency code indicating the operating currency of the bank account. For example, the currency code for US dollars is `USD`.

        :param currency: The currency of this BankAccount.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def debit_mandate_reference_id(self):
        """Gets the debit_mandate_reference_id of this BankAccount.

        Reference identifier that will be displayed to UK bank account owners when collecting direct debit authorization. Only required for UK bank accounts.

        :return: The debit_mandate_reference_id of this BankAccount.
        :rtype: str
        """
        return self._debit_mandate_reference_id

    @debit_mandate_reference_id.setter
    def debit_mandate_reference_id(self, debit_mandate_reference_id):
        """Sets the debit_mandate_reference_id of this BankAccount.

        Reference identifier that will be displayed to UK bank account owners when collecting direct debit authorization. Only required for UK bank accounts.

        :param debit_mandate_reference_id: The debit_mandate_reference_id of this BankAccount.
        :type debit_mandate_reference_id: str
        """

        self._debit_mandate_reference_id = debit_mandate_reference_id

    @property
    def debitable(self):
        """Gets the debitable of this BankAccount.

        Indicates whether it is possible for Square to take money from this  bank account.

        :return: The debitable of this BankAccount.
        :rtype: bool
        """
        return self._debitable

    @debitable.setter
    def debitable(self, debitable):
        """Sets the debitable of this BankAccount.

        Indicates whether it is possible for Square to take money from this  bank account.

        :param debitable: The debitable of this BankAccount.
        :type debitable: bool
        """
        if debitable is None:
            raise ValueError("Invalid value for `debitable`, must not be `None`")

        self._debitable = debitable

    @property
    def fingerprint(self):
        """Gets the fingerprint of this BankAccount.

        A Square-assigned, unique identifier for the bank account based on the account information. The account fingerprint can be used to compare account entries and determine if the they represent the same real-world bank account.

        :return: The fingerprint of this BankAccount.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this BankAccount.

        A Square-assigned, unique identifier for the bank account based on the account information. The account fingerprint can be used to compare account entries and determine if the they represent the same real-world bank account.

        :param fingerprint: The fingerprint of this BankAccount.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def holder_name(self):
        """Gets the holder_name of this BankAccount.

        Name of the account holder. This name must match the name  on the targeted bank account record.

        :return: The holder_name of this BankAccount.
        :rtype: str
        """
        return self._holder_name

    @holder_name.setter
    def holder_name(self, holder_name):
        """Sets the holder_name of this BankAccount.

        Name of the account holder. This name must match the name  on the targeted bank account record.

        :param holder_name: The holder_name of this BankAccount.
        :type holder_name: str
        """
        if holder_name is None:
            raise ValueError("Invalid value for `holder_name`, must not be `None`")
        if holder_name is not None and len(holder_name) < 1:
            raise ValueError("Invalid value for `holder_name`, length must be greater than or equal to `1`")

        self._holder_name = holder_name

    @property
    def id(self):
        """Gets the id of this BankAccount.

        The unique, Square-issued identifier for the bank account.

        :return: The id of this BankAccount.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankAccount.

        The unique, Square-issued identifier for the bank account.

        :param id: The id of this BankAccount.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 30:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `30`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this BankAccount.

        The location to which the bank account belongs.

        :return: The location_id of this BankAccount.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this BankAccount.

        The location to which the bank account belongs.

        :param location_id: The location_id of this BankAccount.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def primary_bank_identification_number(self):
        """Gets the primary_bank_identification_number of this BankAccount.

        Primary identifier for the bank. For more information, see  [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).

        :return: The primary_bank_identification_number of this BankAccount.
        :rtype: str
        """
        return self._primary_bank_identification_number

    @primary_bank_identification_number.setter
    def primary_bank_identification_number(self, primary_bank_identification_number):
        """Sets the primary_bank_identification_number of this BankAccount.

        Primary identifier for the bank. For more information, see  [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).

        :param primary_bank_identification_number: The primary_bank_identification_number of this BankAccount.
        :type primary_bank_identification_number: str
        """
        if primary_bank_identification_number is None:
            raise ValueError("Invalid value for `primary_bank_identification_number`, must not be `None`")
        if primary_bank_identification_number is not None and len(primary_bank_identification_number) > 40:
            raise ValueError("Invalid value for `primary_bank_identification_number`, length must be less than or equal to `40`")

        self._primary_bank_identification_number = primary_bank_identification_number

    @property
    def reference_id(self):
        """Gets the reference_id of this BankAccount.

        Client-provided identifier for linking the banking account to an entity in a third-party system (for example, a bank account number or a user identifier).

        :return: The reference_id of this BankAccount.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this BankAccount.

        Client-provided identifier for linking the banking account to an entity in a third-party system (for example, a bank account number or a user identifier).

        :param reference_id: The reference_id of this BankAccount.
        :type reference_id: str
        """

        self._reference_id = reference_id

    @property
    def secondary_bank_identification_number(self):
        """Gets the secondary_bank_identification_number of this BankAccount.

        Secondary identifier for the bank. For more information, see  [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).

        :return: The secondary_bank_identification_number of this BankAccount.
        :rtype: str
        """
        return self._secondary_bank_identification_number

    @secondary_bank_identification_number.setter
    def secondary_bank_identification_number(self, secondary_bank_identification_number):
        """Sets the secondary_bank_identification_number of this BankAccount.

        Secondary identifier for the bank. For more information, see  [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).

        :param secondary_bank_identification_number: The secondary_bank_identification_number of this BankAccount.
        :type secondary_bank_identification_number: str
        """
        if secondary_bank_identification_number is not None and len(secondary_bank_identification_number) > 40:
            raise ValueError("Invalid value for `secondary_bank_identification_number`, length must be less than or equal to `40`")

        self._secondary_bank_identification_number = secondary_bank_identification_number

    @property
    def status(self):
        """Gets the status of this BankAccount.

        Read-only. The current verification status of this BankAccount object.

        :return: The status of this BankAccount.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BankAccount.

        Read-only. The current verification status of this BankAccount object.

        :param status: The status of this BankAccount.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def version(self):
        """Gets the version of this BankAccount.

        The current version of the `BankAccount`.

        :return: The version of this BankAccount.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BankAccount.

        The current version of the `BankAccount`.

        :param version: The version of this BankAccount.
        :type version: int
        """

        self._version = version
