# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class OrderReturnLineItemModifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_price_money: Money=None, catalog_object_id: str=None, catalog_version: int=None, name: str=None, source_modifier_uid: str=None, total_price_money: Money=None, uid: str=None):
        """OrderReturnLineItemModifier - a model defined in OpenAPI

        :param base_price_money: The base_price_money of this OrderReturnLineItemModifier.
        :param catalog_object_id: The catalog_object_id of this OrderReturnLineItemModifier.
        :param catalog_version: The catalog_version of this OrderReturnLineItemModifier.
        :param name: The name of this OrderReturnLineItemModifier.
        :param source_modifier_uid: The source_modifier_uid of this OrderReturnLineItemModifier.
        :param total_price_money: The total_price_money of this OrderReturnLineItemModifier.
        :param uid: The uid of this OrderReturnLineItemModifier.
        """
        self.openapi_types = {
            'base_price_money': Money,
            'catalog_object_id': str,
            'catalog_version': int,
            'name': str,
            'source_modifier_uid': str,
            'total_price_money': Money,
            'uid': str
        }

        self.attribute_map = {
            'base_price_money': 'base_price_money',
            'catalog_object_id': 'catalog_object_id',
            'catalog_version': 'catalog_version',
            'name': 'name',
            'source_modifier_uid': 'source_modifier_uid',
            'total_price_money': 'total_price_money',
            'uid': 'uid'
        }

        self._base_price_money = base_price_money
        self._catalog_object_id = catalog_object_id
        self._catalog_version = catalog_version
        self._name = name
        self._source_modifier_uid = source_modifier_uid
        self._total_price_money = total_price_money
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderReturnLineItemModifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderReturnLineItemModifier of this OrderReturnLineItemModifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_price_money(self):
        """Gets the base_price_money of this OrderReturnLineItemModifier.


        :return: The base_price_money of this OrderReturnLineItemModifier.
        :rtype: Money
        """
        return self._base_price_money

    @base_price_money.setter
    def base_price_money(self, base_price_money):
        """Sets the base_price_money of this OrderReturnLineItemModifier.


        :param base_price_money: The base_price_money of this OrderReturnLineItemModifier.
        :type base_price_money: Money
        """

        self._base_price_money = base_price_money

    @property
    def catalog_object_id(self):
        """Gets the catalog_object_id of this OrderReturnLineItemModifier.

        The catalog object ID referencing [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier).

        :return: The catalog_object_id of this OrderReturnLineItemModifier.
        :rtype: str
        """
        return self._catalog_object_id

    @catalog_object_id.setter
    def catalog_object_id(self, catalog_object_id):
        """Sets the catalog_object_id of this OrderReturnLineItemModifier.

        The catalog object ID referencing [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier).

        :param catalog_object_id: The catalog_object_id of this OrderReturnLineItemModifier.
        :type catalog_object_id: str
        """
        if catalog_object_id is not None and len(catalog_object_id) > 192:
            raise ValueError("Invalid value for `catalog_object_id`, length must be less than or equal to `192`")

        self._catalog_object_id = catalog_object_id

    @property
    def catalog_version(self):
        """Gets the catalog_version of this OrderReturnLineItemModifier.

        The version of the catalog object that this line item modifier references.

        :return: The catalog_version of this OrderReturnLineItemModifier.
        :rtype: int
        """
        return self._catalog_version

    @catalog_version.setter
    def catalog_version(self, catalog_version):
        """Sets the catalog_version of this OrderReturnLineItemModifier.

        The version of the catalog object that this line item modifier references.

        :param catalog_version: The catalog_version of this OrderReturnLineItemModifier.
        :type catalog_version: int
        """

        self._catalog_version = catalog_version

    @property
    def name(self):
        """Gets the name of this OrderReturnLineItemModifier.

        The name of the item modifier.

        :return: The name of this OrderReturnLineItemModifier.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderReturnLineItemModifier.

        The name of the item modifier.

        :param name: The name of this OrderReturnLineItemModifier.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def source_modifier_uid(self):
        """Gets the source_modifier_uid of this OrderReturnLineItemModifier.

        The modifier `uid` from the order's line item that contains the original sale of this line item modifier.

        :return: The source_modifier_uid of this OrderReturnLineItemModifier.
        :rtype: str
        """
        return self._source_modifier_uid

    @source_modifier_uid.setter
    def source_modifier_uid(self, source_modifier_uid):
        """Sets the source_modifier_uid of this OrderReturnLineItemModifier.

        The modifier `uid` from the order's line item that contains the original sale of this line item modifier.

        :param source_modifier_uid: The source_modifier_uid of this OrderReturnLineItemModifier.
        :type source_modifier_uid: str
        """
        if source_modifier_uid is not None and len(source_modifier_uid) > 60:
            raise ValueError("Invalid value for `source_modifier_uid`, length must be less than or equal to `60`")

        self._source_modifier_uid = source_modifier_uid

    @property
    def total_price_money(self):
        """Gets the total_price_money of this OrderReturnLineItemModifier.


        :return: The total_price_money of this OrderReturnLineItemModifier.
        :rtype: Money
        """
        return self._total_price_money

    @total_price_money.setter
    def total_price_money(self, total_price_money):
        """Sets the total_price_money of this OrderReturnLineItemModifier.


        :param total_price_money: The total_price_money of this OrderReturnLineItemModifier.
        :type total_price_money: Money
        """

        self._total_price_money = total_price_money

    @property
    def uid(self):
        """Gets the uid of this OrderReturnLineItemModifier.

        A unique ID that identifies the return modifier only within this order.

        :return: The uid of this OrderReturnLineItemModifier.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OrderReturnLineItemModifier.

        A unique ID that identifies the return modifier only within this order.

        :param uid: The uid of this OrderReturnLineItemModifier.
        :type uid: str
        """
        if uid is not None and len(uid) > 60:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `60`")

        self._uid = uid
