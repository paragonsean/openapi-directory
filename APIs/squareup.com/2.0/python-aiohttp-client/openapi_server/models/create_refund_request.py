# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class CreateRefundRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: Money=None, idempotency_key: str=None, reason: str=None, tender_id: str=None):
        """CreateRefundRequest - a model defined in OpenAPI

        :param amount_money: The amount_money of this CreateRefundRequest.
        :param idempotency_key: The idempotency_key of this CreateRefundRequest.
        :param reason: The reason of this CreateRefundRequest.
        :param tender_id: The tender_id of this CreateRefundRequest.
        """
        self.openapi_types = {
            'amount_money': Money,
            'idempotency_key': str,
            'reason': str,
            'tender_id': str
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'idempotency_key': 'idempotency_key',
            'reason': 'reason',
            'tender_id': 'tender_id'
        }

        self._amount_money = amount_money
        self._idempotency_key = idempotency_key
        self._reason = reason
        self._tender_id = tender_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRefundRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRefundRequest of this CreateRefundRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this CreateRefundRequest.


        :return: The amount_money of this CreateRefundRequest.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this CreateRefundRequest.


        :param amount_money: The amount_money of this CreateRefundRequest.
        :type amount_money: Money
        """
        if amount_money is None:
            raise ValueError("Invalid value for `amount_money`, must not be `None`")

        self._amount_money = amount_money

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this CreateRefundRequest.

        A value you specify that uniquely identifies this refund among refunds you've created for the tender.  If you're unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund.  See [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.

        :return: The idempotency_key of this CreateRefundRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this CreateRefundRequest.

        A value you specify that uniquely identifies this refund among refunds you've created for the tender.  If you're unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund.  See [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.

        :param idempotency_key: The idempotency_key of this CreateRefundRequest.
        :type idempotency_key: str
        """
        if idempotency_key is None:
            raise ValueError("Invalid value for `idempotency_key`, must not be `None`")
        if idempotency_key is not None and len(idempotency_key) > 192:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `192`")
        if idempotency_key is not None and len(idempotency_key) < 1:
            raise ValueError("Invalid value for `idempotency_key`, length must be greater than or equal to `1`")

        self._idempotency_key = idempotency_key

    @property
    def reason(self):
        """Gets the reason of this CreateRefundRequest.

        A description of the reason for the refund.  Default value: `Refund via API`

        :return: The reason of this CreateRefundRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CreateRefundRequest.

        A description of the reason for the refund.  Default value: `Refund via API`

        :param reason: The reason of this CreateRefundRequest.
        :type reason: str
        """
        if reason is not None and len(reason) > 192:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `192`")

        self._reason = reason

    @property
    def tender_id(self):
        """Gets the tender_id of this CreateRefundRequest.

        The ID of the tender to refund.  A [`Transaction`](https://developer.squareup.com/reference/square_2021-08-18/objects/Transaction) has one or more `tenders` (i.e., methods of payment) associated with it, and you refund each tender separately with the Connect API.

        :return: The tender_id of this CreateRefundRequest.
        :rtype: str
        """
        return self._tender_id

    @tender_id.setter
    def tender_id(self, tender_id):
        """Sets the tender_id of this CreateRefundRequest.

        The ID of the tender to refund.  A [`Transaction`](https://developer.squareup.com/reference/square_2021-08-18/objects/Transaction) has one or more `tenders` (i.e., methods of payment) associated with it, and you refund each tender separately with the Connect API.

        :param tender_id: The tender_id of this CreateRefundRequest.
        :type tender_id: str
        """
        if tender_id is None:
            raise ValueError("Invalid value for `tender_id`, must not be `None`")
        if tender_id is not None and len(tender_id) > 192:
            raise ValueError("Invalid value for `tender_id`, length must be less than or equal to `192`")
        if tender_id is not None and len(tender_id) < 1:
            raise ValueError("Invalid value for `tender_id`, length must be greater than or equal to `1`")

        self._tender_id = tender_id
