# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class GiftCardActivityRefund(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: Money=None, payment_id: str=None, redeem_activity_id: str=None, reference_id: str=None):
        """GiftCardActivityRefund - a model defined in OpenAPI

        :param amount_money: The amount_money of this GiftCardActivityRefund.
        :param payment_id: The payment_id of this GiftCardActivityRefund.
        :param redeem_activity_id: The redeem_activity_id of this GiftCardActivityRefund.
        :param reference_id: The reference_id of this GiftCardActivityRefund.
        """
        self.openapi_types = {
            'amount_money': Money,
            'payment_id': str,
            'redeem_activity_id': str,
            'reference_id': str
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'payment_id': 'payment_id',
            'redeem_activity_id': 'redeem_activity_id',
            'reference_id': 'reference_id'
        }

        self._amount_money = amount_money
        self._payment_id = payment_id
        self._redeem_activity_id = redeem_activity_id
        self._reference_id = reference_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GiftCardActivityRefund':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GiftCardActivityRefund of this GiftCardActivityRefund.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this GiftCardActivityRefund.


        :return: The amount_money of this GiftCardActivityRefund.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this GiftCardActivityRefund.


        :param amount_money: The amount_money of this GiftCardActivityRefund.
        :type amount_money: Money
        """

        self._amount_money = amount_money

    @property
    def payment_id(self):
        """Gets the payment_id of this GiftCardActivityRefund.

        When the Square Payments API is used, Refund is not called on the Gift Cards API. However, when Square reads a Refund activity from the Gift Cards API, the developer needs to know the ID of the payment (made using this gift card) that is being refunded.

        :return: The payment_id of this GiftCardActivityRefund.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this GiftCardActivityRefund.

        When the Square Payments API is used, Refund is not called on the Gift Cards API. However, when Square reads a Refund activity from the Gift Cards API, the developer needs to know the ID of the payment (made using this gift card) that is being refunded.

        :param payment_id: The payment_id of this GiftCardActivityRefund.
        :type payment_id: str
        """

        self._payment_id = payment_id

    @property
    def redeem_activity_id(self):
        """Gets the redeem_activity_id of this GiftCardActivityRefund.

        The ID for the Redeem activity that needs to be refunded. Hence, the activity it refers to has to be of the REDEEM type.

        :return: The redeem_activity_id of this GiftCardActivityRefund.
        :rtype: str
        """
        return self._redeem_activity_id

    @redeem_activity_id.setter
    def redeem_activity_id(self, redeem_activity_id):
        """Sets the redeem_activity_id of this GiftCardActivityRefund.

        The ID for the Redeem activity that needs to be refunded. Hence, the activity it refers to has to be of the REDEEM type.

        :param redeem_activity_id: The redeem_activity_id of this GiftCardActivityRefund.
        :type redeem_activity_id: str
        """
        if redeem_activity_id is None:
            raise ValueError("Invalid value for `redeem_activity_id`, must not be `None`")

        self._redeem_activity_id = redeem_activity_id

    @property
    def reference_id(self):
        """Gets the reference_id of this GiftCardActivityRefund.

        A client-specified ID to associate an entity, in another system, with this gift card activity. This can be used to track the order or payment related information when the Square Orders API is not being used.

        :return: The reference_id of this GiftCardActivityRefund.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this GiftCardActivityRefund.

        A client-specified ID to associate an entity, in another system, with this gift card activity. This can be used to track the order or payment related information when the Square Orders API is not being used.

        :param reference_id: The reference_id of this GiftCardActivityRefund.
        :type reference_id: str
        """

        self._reference_id = reference_id
