# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util


class InvoiceRecipient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, company_name: str=None, customer_id: str=None, email_address: str=None, family_name: str=None, given_name: str=None, phone_number: str=None):
        """InvoiceRecipient - a model defined in OpenAPI

        :param address: The address of this InvoiceRecipient.
        :param company_name: The company_name of this InvoiceRecipient.
        :param customer_id: The customer_id of this InvoiceRecipient.
        :param email_address: The email_address of this InvoiceRecipient.
        :param family_name: The family_name of this InvoiceRecipient.
        :param given_name: The given_name of this InvoiceRecipient.
        :param phone_number: The phone_number of this InvoiceRecipient.
        """
        self.openapi_types = {
            'address': Address,
            'company_name': str,
            'customer_id': str,
            'email_address': str,
            'family_name': str,
            'given_name': str,
            'phone_number': str
        }

        self.attribute_map = {
            'address': 'address',
            'company_name': 'company_name',
            'customer_id': 'customer_id',
            'email_address': 'email_address',
            'family_name': 'family_name',
            'given_name': 'given_name',
            'phone_number': 'phone_number'
        }

        self._address = address
        self._company_name = company_name
        self._customer_id = customer_id
        self._email_address = email_address
        self._family_name = family_name
        self._given_name = given_name
        self._phone_number = phone_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceRecipient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceRecipient of this InvoiceRecipient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this InvoiceRecipient.


        :return: The address of this InvoiceRecipient.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InvoiceRecipient.


        :param address: The address of this InvoiceRecipient.
        :type address: Address
        """

        self._address = address

    @property
    def company_name(self):
        """Gets the company_name of this InvoiceRecipient.

        The name of the recipient's company.

        :return: The company_name of this InvoiceRecipient.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this InvoiceRecipient.

        The name of the recipient's company.

        :param company_name: The company_name of this InvoiceRecipient.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def customer_id(self):
        """Gets the customer_id of this InvoiceRecipient.

        The ID of the customer. This is the customer profile ID that  you provide when creating a draft invoice.

        :return: The customer_id of this InvoiceRecipient.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this InvoiceRecipient.

        The ID of the customer. This is the customer profile ID that  you provide when creating a draft invoice.

        :param customer_id: The customer_id of this InvoiceRecipient.
        :type customer_id: str
        """
        if customer_id is not None and len(customer_id) > 255:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `255`")
        if customer_id is not None and len(customer_id) < 1:
            raise ValueError("Invalid value for `customer_id`, length must be greater than or equal to `1`")

        self._customer_id = customer_id

    @property
    def email_address(self):
        """Gets the email_address of this InvoiceRecipient.

        The recipient's email address.

        :return: The email_address of this InvoiceRecipient.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this InvoiceRecipient.

        The recipient's email address.

        :param email_address: The email_address of this InvoiceRecipient.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def family_name(self):
        """Gets the family_name of this InvoiceRecipient.

        The recipient's family (that is, last) name.

        :return: The family_name of this InvoiceRecipient.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this InvoiceRecipient.

        The recipient's family (that is, last) name.

        :param family_name: The family_name of this InvoiceRecipient.
        :type family_name: str
        """

        self._family_name = family_name

    @property
    def given_name(self):
        """Gets the given_name of this InvoiceRecipient.

        The recipient's given (that is, first) name.

        :return: The given_name of this InvoiceRecipient.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this InvoiceRecipient.

        The recipient's given (that is, first) name.

        :param given_name: The given_name of this InvoiceRecipient.
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def phone_number(self):
        """Gets the phone_number of this InvoiceRecipient.

        The recipient's phone number.

        :return: The phone_number of this InvoiceRecipient.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this InvoiceRecipient.

        The recipient's phone number.

        :param phone_number: The phone_number of this InvoiceRecipient.
        :type phone_number: str
        """

        self._phone_number = phone_number
