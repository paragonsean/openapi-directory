# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class OrderRoundingAdjustment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: Money=None, name: str=None, uid: str=None):
        """OrderRoundingAdjustment - a model defined in OpenAPI

        :param amount_money: The amount_money of this OrderRoundingAdjustment.
        :param name: The name of this OrderRoundingAdjustment.
        :param uid: The uid of this OrderRoundingAdjustment.
        """
        self.openapi_types = {
            'amount_money': Money,
            'name': str,
            'uid': str
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'name': 'name',
            'uid': 'uid'
        }

        self._amount_money = amount_money
        self._name = name
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderRoundingAdjustment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderRoundingAdjustment of this OrderRoundingAdjustment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this OrderRoundingAdjustment.


        :return: The amount_money of this OrderRoundingAdjustment.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this OrderRoundingAdjustment.


        :param amount_money: The amount_money of this OrderRoundingAdjustment.
        :type amount_money: Money
        """

        self._amount_money = amount_money

    @property
    def name(self):
        """Gets the name of this OrderRoundingAdjustment.

        The name of the rounding adjustment from the original sale order.

        :return: The name of this OrderRoundingAdjustment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderRoundingAdjustment.

        The name of the rounding adjustment from the original sale order.

        :param name: The name of this OrderRoundingAdjustment.
        :type name: str
        """

        self._name = name

    @property
    def uid(self):
        """Gets the uid of this OrderRoundingAdjustment.

        A unique ID that identifies the rounding adjustment only within this order.

        :return: The uid of this OrderRoundingAdjustment.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OrderRoundingAdjustment.

        A unique ID that identifies the rounding adjustment only within this order.

        :param uid: The uid of this OrderRoundingAdjustment.
        :type uid: str
        """
        if uid is not None and len(uid) > 60:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `60`")

        self._uid = uid
