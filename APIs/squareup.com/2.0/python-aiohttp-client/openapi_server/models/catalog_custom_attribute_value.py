# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogCustomAttributeValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boolean_value: bool=None, custom_attribute_definition_id: str=None, key: str=None, name: str=None, number_value: str=None, selection_uid_values: List[str]=None, string_value: str=None, type: str=None):
        """CatalogCustomAttributeValue - a model defined in OpenAPI

        :param boolean_value: The boolean_value of this CatalogCustomAttributeValue.
        :param custom_attribute_definition_id: The custom_attribute_definition_id of this CatalogCustomAttributeValue.
        :param key: The key of this CatalogCustomAttributeValue.
        :param name: The name of this CatalogCustomAttributeValue.
        :param number_value: The number_value of this CatalogCustomAttributeValue.
        :param selection_uid_values: The selection_uid_values of this CatalogCustomAttributeValue.
        :param string_value: The string_value of this CatalogCustomAttributeValue.
        :param type: The type of this CatalogCustomAttributeValue.
        """
        self.openapi_types = {
            'boolean_value': bool,
            'custom_attribute_definition_id': str,
            'key': str,
            'name': str,
            'number_value': str,
            'selection_uid_values': List[str],
            'string_value': str,
            'type': str
        }

        self.attribute_map = {
            'boolean_value': 'boolean_value',
            'custom_attribute_definition_id': 'custom_attribute_definition_id',
            'key': 'key',
            'name': 'name',
            'number_value': 'number_value',
            'selection_uid_values': 'selection_uid_values',
            'string_value': 'string_value',
            'type': 'type'
        }

        self._boolean_value = boolean_value
        self._custom_attribute_definition_id = custom_attribute_definition_id
        self._key = key
        self._name = name
        self._number_value = number_value
        self._selection_uid_values = selection_uid_values
        self._string_value = string_value
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogCustomAttributeValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogCustomAttributeValue of this CatalogCustomAttributeValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boolean_value(self):
        """Gets the boolean_value of this CatalogCustomAttributeValue.

        A `true` or `false` value. Populated if `type` = `BOOLEAN`.

        :return: The boolean_value of this CatalogCustomAttributeValue.
        :rtype: bool
        """
        return self._boolean_value

    @boolean_value.setter
    def boolean_value(self, boolean_value):
        """Sets the boolean_value of this CatalogCustomAttributeValue.

        A `true` or `false` value. Populated if `type` = `BOOLEAN`.

        :param boolean_value: The boolean_value of this CatalogCustomAttributeValue.
        :type boolean_value: bool
        """

        self._boolean_value = boolean_value

    @property
    def custom_attribute_definition_id(self):
        """Gets the custom_attribute_definition_id of this CatalogCustomAttributeValue.

        __Read-only.__ The id of the [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition) this value belongs to.

        :return: The custom_attribute_definition_id of this CatalogCustomAttributeValue.
        :rtype: str
        """
        return self._custom_attribute_definition_id

    @custom_attribute_definition_id.setter
    def custom_attribute_definition_id(self, custom_attribute_definition_id):
        """Sets the custom_attribute_definition_id of this CatalogCustomAttributeValue.

        __Read-only.__ The id of the [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition) this value belongs to.

        :param custom_attribute_definition_id: The custom_attribute_definition_id of this CatalogCustomAttributeValue.
        :type custom_attribute_definition_id: str
        """

        self._custom_attribute_definition_id = custom_attribute_definition_id

    @property
    def key(self):
        """Gets the key of this CatalogCustomAttributeValue.

        __Read-only.__ A copy of key from the associated `CatalogCustomAttributeDefinition`.

        :return: The key of this CatalogCustomAttributeValue.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CatalogCustomAttributeValue.

        __Read-only.__ A copy of key from the associated `CatalogCustomAttributeDefinition`.

        :param key: The key of this CatalogCustomAttributeValue.
        :type key: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this CatalogCustomAttributeValue.

        The name of the custom attribute.

        :return: The name of this CatalogCustomAttributeValue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogCustomAttributeValue.

        The name of the custom attribute.

        :param name: The name of this CatalogCustomAttributeValue.
        :type name: str
        """

        self._name = name

    @property
    def number_value(self):
        """Gets the number_value of this CatalogCustomAttributeValue.

        Populated if `type` = `NUMBER`. Contains a string representation of a decimal number, using a `.` as the decimal separator.

        :return: The number_value of this CatalogCustomAttributeValue.
        :rtype: str
        """
        return self._number_value

    @number_value.setter
    def number_value(self, number_value):
        """Sets the number_value of this CatalogCustomAttributeValue.

        Populated if `type` = `NUMBER`. Contains a string representation of a decimal number, using a `.` as the decimal separator.

        :param number_value: The number_value of this CatalogCustomAttributeValue.
        :type number_value: str
        """

        self._number_value = number_value

    @property
    def selection_uid_values(self):
        """Gets the selection_uid_values of this CatalogCustomAttributeValue.

        One or more choices from `allowed_selections`. Populated if `type` = `SELECTION`.

        :return: The selection_uid_values of this CatalogCustomAttributeValue.
        :rtype: List[str]
        """
        return self._selection_uid_values

    @selection_uid_values.setter
    def selection_uid_values(self, selection_uid_values):
        """Sets the selection_uid_values of this CatalogCustomAttributeValue.

        One or more choices from `allowed_selections`. Populated if `type` = `SELECTION`.

        :param selection_uid_values: The selection_uid_values of this CatalogCustomAttributeValue.
        :type selection_uid_values: List[str]
        """

        self._selection_uid_values = selection_uid_values

    @property
    def string_value(self):
        """Gets the string_value of this CatalogCustomAttributeValue.

        The string value of the custom attribute.  Populated if `type` = `STRING`.

        :return: The string_value of this CatalogCustomAttributeValue.
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this CatalogCustomAttributeValue.

        The string value of the custom attribute.  Populated if `type` = `STRING`.

        :param string_value: The string_value of this CatalogCustomAttributeValue.
        :type string_value: str
        """

        self._string_value = string_value

    @property
    def type(self):
        """Gets the type of this CatalogCustomAttributeValue.

        __Read-only.__ A copy of type from the associated `CatalogCustomAttributeDefinition`.

        :return: The type of this CatalogCustomAttributeValue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CatalogCustomAttributeValue.

        __Read-only.__ A copy of type from the associated `CatalogCustomAttributeDefinition`.

        :param type: The type of this CatalogCustomAttributeValue.
        :type type: str
        """

        self._type = type
