# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class V1EmployeeRole(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, id: str=None, is_owner: bool=None, name: str=None, permissions: List[str]=None, updated_at: str=None):
        """V1EmployeeRole - a model defined in OpenAPI

        :param created_at: The created_at of this V1EmployeeRole.
        :param id: The id of this V1EmployeeRole.
        :param is_owner: The is_owner of this V1EmployeeRole.
        :param name: The name of this V1EmployeeRole.
        :param permissions: The permissions of this V1EmployeeRole.
        :param updated_at: The updated_at of this V1EmployeeRole.
        """
        self.openapi_types = {
            'created_at': str,
            'id': str,
            'is_owner': bool,
            'name': str,
            'permissions': List[str],
            'updated_at': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'id': 'id',
            'is_owner': 'is_owner',
            'name': 'name',
            'permissions': 'permissions',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._id = id
        self._is_owner = is_owner
        self._name = name
        self._permissions = permissions
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V1EmployeeRole':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V1EmployeeRole of this V1EmployeeRole.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this V1EmployeeRole.

        The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created.

        :return: The created_at of this V1EmployeeRole.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V1EmployeeRole.

        The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created.

        :param created_at: The created_at of this V1EmployeeRole.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this V1EmployeeRole.

        The role's unique ID, Can only be set by Square.

        :return: The id of this V1EmployeeRole.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1EmployeeRole.

        The role's unique ID, Can only be set by Square.

        :param id: The id of this V1EmployeeRole.
        :type id: str
        """

        self._id = id

    @property
    def is_owner(self):
        """Gets the is_owner of this V1EmployeeRole.

        If true, employees with this role have all permissions, regardless of the values indicated in permissions.

        :return: The is_owner of this V1EmployeeRole.
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this V1EmployeeRole.

        If true, employees with this role have all permissions, regardless of the values indicated in permissions.

        :param is_owner: The is_owner of this V1EmployeeRole.
        :type is_owner: bool
        """

        self._is_owner = is_owner

    @property
    def name(self):
        """Gets the name of this V1EmployeeRole.

        The role's merchant-defined name.

        :return: The name of this V1EmployeeRole.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1EmployeeRole.

        The role's merchant-defined name.

        :param name: The name of this V1EmployeeRole.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def permissions(self):
        """Gets the permissions of this V1EmployeeRole.

        The role's permissions.

        :return: The permissions of this V1EmployeeRole.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this V1EmployeeRole.

        The role's permissions.

        :param permissions: The permissions of this V1EmployeeRole.
        :type permissions: List[str]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def updated_at(self):
        """Gets the updated_at of this V1EmployeeRole.

        The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated.

        :return: The updated_at of this V1EmployeeRole.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this V1EmployeeRole.

        The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated.

        :param updated_at: The updated_at of this V1EmployeeRole.
        :type updated_at: str
        """

        self._updated_at = updated_at
