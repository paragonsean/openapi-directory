# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invoice_payment_reminder import InvoicePaymentReminder
from openapi_server.models.money import Money
from openapi_server import util


class InvoicePaymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automatic_payment_source: str=None, card_id: str=None, computed_amount_money: Money=None, due_date: str=None, fixed_amount_requested_money: Money=None, percentage_requested: str=None, reminders: List[InvoicePaymentReminder]=None, request_method: str=None, request_type: str=None, rounding_adjustment_included_money: Money=None, tipping_enabled: bool=None, total_completed_amount_money: Money=None, uid: str=None):
        """InvoicePaymentRequest - a model defined in OpenAPI

        :param automatic_payment_source: The automatic_payment_source of this InvoicePaymentRequest.
        :param card_id: The card_id of this InvoicePaymentRequest.
        :param computed_amount_money: The computed_amount_money of this InvoicePaymentRequest.
        :param due_date: The due_date of this InvoicePaymentRequest.
        :param fixed_amount_requested_money: The fixed_amount_requested_money of this InvoicePaymentRequest.
        :param percentage_requested: The percentage_requested of this InvoicePaymentRequest.
        :param reminders: The reminders of this InvoicePaymentRequest.
        :param request_method: The request_method of this InvoicePaymentRequest.
        :param request_type: The request_type of this InvoicePaymentRequest.
        :param rounding_adjustment_included_money: The rounding_adjustment_included_money of this InvoicePaymentRequest.
        :param tipping_enabled: The tipping_enabled of this InvoicePaymentRequest.
        :param total_completed_amount_money: The total_completed_amount_money of this InvoicePaymentRequest.
        :param uid: The uid of this InvoicePaymentRequest.
        """
        self.openapi_types = {
            'automatic_payment_source': str,
            'card_id': str,
            'computed_amount_money': Money,
            'due_date': str,
            'fixed_amount_requested_money': Money,
            'percentage_requested': str,
            'reminders': List[InvoicePaymentReminder],
            'request_method': str,
            'request_type': str,
            'rounding_adjustment_included_money': Money,
            'tipping_enabled': bool,
            'total_completed_amount_money': Money,
            'uid': str
        }

        self.attribute_map = {
            'automatic_payment_source': 'automatic_payment_source',
            'card_id': 'card_id',
            'computed_amount_money': 'computed_amount_money',
            'due_date': 'due_date',
            'fixed_amount_requested_money': 'fixed_amount_requested_money',
            'percentage_requested': 'percentage_requested',
            'reminders': 'reminders',
            'request_method': 'request_method',
            'request_type': 'request_type',
            'rounding_adjustment_included_money': 'rounding_adjustment_included_money',
            'tipping_enabled': 'tipping_enabled',
            'total_completed_amount_money': 'total_completed_amount_money',
            'uid': 'uid'
        }

        self._automatic_payment_source = automatic_payment_source
        self._card_id = card_id
        self._computed_amount_money = computed_amount_money
        self._due_date = due_date
        self._fixed_amount_requested_money = fixed_amount_requested_money
        self._percentage_requested = percentage_requested
        self._reminders = reminders
        self._request_method = request_method
        self._request_type = request_type
        self._rounding_adjustment_included_money = rounding_adjustment_included_money
        self._tipping_enabled = tipping_enabled
        self._total_completed_amount_money = total_completed_amount_money
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoicePaymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoicePaymentRequest of this InvoicePaymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automatic_payment_source(self):
        """Gets the automatic_payment_source of this InvoicePaymentRequest.

        The payment method for an automatic payment.  The default value is `NONE`.

        :return: The automatic_payment_source of this InvoicePaymentRequest.
        :rtype: str
        """
        return self._automatic_payment_source

    @automatic_payment_source.setter
    def automatic_payment_source(self, automatic_payment_source):
        """Sets the automatic_payment_source of this InvoicePaymentRequest.

        The payment method for an automatic payment.  The default value is `NONE`.

        :param automatic_payment_source: The automatic_payment_source of this InvoicePaymentRequest.
        :type automatic_payment_source: str
        """

        self._automatic_payment_source = automatic_payment_source

    @property
    def card_id(self):
        """Gets the card_id of this InvoicePaymentRequest.

        The ID of the credit or debit card on file to charge for the payment request. To get the cards on file for a customer, call [ListCards](https://developer.squareup.com/reference/square_2021-08-18/cards-api/list-cards) and include the `customer_id` of the invoice recipient.

        :return: The card_id of this InvoicePaymentRequest.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this InvoicePaymentRequest.

        The ID of the credit or debit card on file to charge for the payment request. To get the cards on file for a customer, call [ListCards](https://developer.squareup.com/reference/square_2021-08-18/cards-api/list-cards) and include the `customer_id` of the invoice recipient.

        :param card_id: The card_id of this InvoicePaymentRequest.
        :type card_id: str
        """
        if card_id is not None and len(card_id) > 255:
            raise ValueError("Invalid value for `card_id`, length must be less than or equal to `255`")
        if card_id is not None and len(card_id) < 1:
            raise ValueError("Invalid value for `card_id`, length must be greater than or equal to `1`")

        self._card_id = card_id

    @property
    def computed_amount_money(self):
        """Gets the computed_amount_money of this InvoicePaymentRequest.


        :return: The computed_amount_money of this InvoicePaymentRequest.
        :rtype: Money
        """
        return self._computed_amount_money

    @computed_amount_money.setter
    def computed_amount_money(self, computed_amount_money):
        """Sets the computed_amount_money of this InvoicePaymentRequest.


        :param computed_amount_money: The computed_amount_money of this InvoicePaymentRequest.
        :type computed_amount_money: Money
        """

        self._computed_amount_money = computed_amount_money

    @property
    def due_date(self):
        """Gets the due_date of this InvoicePaymentRequest.

        The due date (in the invoice's time zone) for the payment request, in `YYYY-MM-DD` format. This field is required to create a payment request.  After this date, the invoice becomes overdue. For example, a payment `due_date` of 2021-03-09 with a `timezone` of America/Los\\_Angeles becomes overdue at midnight on March 9 in America/Los\\_Angeles (which equals a UTC timestamp of 2021-03-10T08:00:00Z).

        :return: The due_date of this InvoicePaymentRequest.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this InvoicePaymentRequest.

        The due date (in the invoice's time zone) for the payment request, in `YYYY-MM-DD` format. This field is required to create a payment request.  After this date, the invoice becomes overdue. For example, a payment `due_date` of 2021-03-09 with a `timezone` of America/Los\\_Angeles becomes overdue at midnight on March 9 in America/Los\\_Angeles (which equals a UTC timestamp of 2021-03-10T08:00:00Z).

        :param due_date: The due_date of this InvoicePaymentRequest.
        :type due_date: str
        """

        self._due_date = due_date

    @property
    def fixed_amount_requested_money(self):
        """Gets the fixed_amount_requested_money of this InvoicePaymentRequest.


        :return: The fixed_amount_requested_money of this InvoicePaymentRequest.
        :rtype: Money
        """
        return self._fixed_amount_requested_money

    @fixed_amount_requested_money.setter
    def fixed_amount_requested_money(self, fixed_amount_requested_money):
        """Sets the fixed_amount_requested_money of this InvoicePaymentRequest.


        :param fixed_amount_requested_money: The fixed_amount_requested_money of this InvoicePaymentRequest.
        :type fixed_amount_requested_money: Money
        """

        self._fixed_amount_requested_money = fixed_amount_requested_money

    @property
    def percentage_requested(self):
        """Gets the percentage_requested of this InvoicePaymentRequest.

        Specifies the amount for the payment request in percentage:  - When the payment `request_type` is `DEPOSIT`, it is the percentage of the order's total amount. - When the payment `request_type` is `INSTALLMENT`, it is the percentage of the order's total less  the deposit, if requested. The sum of the `percentage_requested` in all installment  payment requests must be equal to 100.  You cannot specify this when the payment `request_type` is `BALANCE` or when the  payment request specifies the `fixed_amount_requested_money` field.

        :return: The percentage_requested of this InvoicePaymentRequest.
        :rtype: str
        """
        return self._percentage_requested

    @percentage_requested.setter
    def percentage_requested(self, percentage_requested):
        """Sets the percentage_requested of this InvoicePaymentRequest.

        Specifies the amount for the payment request in percentage:  - When the payment `request_type` is `DEPOSIT`, it is the percentage of the order's total amount. - When the payment `request_type` is `INSTALLMENT`, it is the percentage of the order's total less  the deposit, if requested. The sum of the `percentage_requested` in all installment  payment requests must be equal to 100.  You cannot specify this when the payment `request_type` is `BALANCE` or when the  payment request specifies the `fixed_amount_requested_money` field.

        :param percentage_requested: The percentage_requested of this InvoicePaymentRequest.
        :type percentage_requested: str
        """

        self._percentage_requested = percentage_requested

    @property
    def reminders(self):
        """Gets the reminders of this InvoicePaymentRequest.

        A list of one or more reminders to send for the payment request.

        :return: The reminders of this InvoicePaymentRequest.
        :rtype: List[InvoicePaymentReminder]
        """
        return self._reminders

    @reminders.setter
    def reminders(self, reminders):
        """Sets the reminders of this InvoicePaymentRequest.

        A list of one or more reminders to send for the payment request.

        :param reminders: The reminders of this InvoicePaymentRequest.
        :type reminders: List[InvoicePaymentReminder]
        """

        self._reminders = reminders

    @property
    def request_method(self):
        """Gets the request_method of this InvoicePaymentRequest.

        Indicates how Square processes the payment request. DEPRECATED at version 2021-01-21. Replaced by the `Invoice.delivery_method` and `InvoicePaymentRequest.automatic_payment_source` fields.  One of the following is required when creating an invoice: - (Recommended) The `delivery_method` field of the invoice. To configure an automatic payment, the `automatic_payment_source` field of the payment request is also required. - This `request_method` field. Note that `invoice` objects returned in responses do not include `request_method`.

        :return: The request_method of this InvoicePaymentRequest.
        :rtype: str
        """
        return self._request_method

    @request_method.setter
    def request_method(self, request_method):
        """Sets the request_method of this InvoicePaymentRequest.

        Indicates how Square processes the payment request. DEPRECATED at version 2021-01-21. Replaced by the `Invoice.delivery_method` and `InvoicePaymentRequest.automatic_payment_source` fields.  One of the following is required when creating an invoice: - (Recommended) The `delivery_method` field of the invoice. To configure an automatic payment, the `automatic_payment_source` field of the payment request is also required. - This `request_method` field. Note that `invoice` objects returned in responses do not include `request_method`.

        :param request_method: The request_method of this InvoicePaymentRequest.
        :type request_method: str
        """

        self._request_method = request_method

    @property
    def request_type(self):
        """Gets the request_type of this InvoicePaymentRequest.

        Identifies the payment request type. This type defines how the payment request amount is determined.  This field is required to create a payment request.

        :return: The request_type of this InvoicePaymentRequest.
        :rtype: str
        """
        return self._request_type

    @request_type.setter
    def request_type(self, request_type):
        """Sets the request_type of this InvoicePaymentRequest.

        Identifies the payment request type. This type defines how the payment request amount is determined.  This field is required to create a payment request.

        :param request_type: The request_type of this InvoicePaymentRequest.
        :type request_type: str
        """

        self._request_type = request_type

    @property
    def rounding_adjustment_included_money(self):
        """Gets the rounding_adjustment_included_money of this InvoicePaymentRequest.


        :return: The rounding_adjustment_included_money of this InvoicePaymentRequest.
        :rtype: Money
        """
        return self._rounding_adjustment_included_money

    @rounding_adjustment_included_money.setter
    def rounding_adjustment_included_money(self, rounding_adjustment_included_money):
        """Sets the rounding_adjustment_included_money of this InvoicePaymentRequest.


        :param rounding_adjustment_included_money: The rounding_adjustment_included_money of this InvoicePaymentRequest.
        :type rounding_adjustment_included_money: Money
        """

        self._rounding_adjustment_included_money = rounding_adjustment_included_money

    @property
    def tipping_enabled(self):
        """Gets the tipping_enabled of this InvoicePaymentRequest.

        If set to true, the Square-hosted invoice page (the `public_url` field of the invoice)  provides a place for the customer to pay a tip.   This field is allowed only on the final payment request   and the payment `request_type` must be `BALANCE` or `INSTALLMENT`.

        :return: The tipping_enabled of this InvoicePaymentRequest.
        :rtype: bool
        """
        return self._tipping_enabled

    @tipping_enabled.setter
    def tipping_enabled(self, tipping_enabled):
        """Sets the tipping_enabled of this InvoicePaymentRequest.

        If set to true, the Square-hosted invoice page (the `public_url` field of the invoice)  provides a place for the customer to pay a tip.   This field is allowed only on the final payment request   and the payment `request_type` must be `BALANCE` or `INSTALLMENT`.

        :param tipping_enabled: The tipping_enabled of this InvoicePaymentRequest.
        :type tipping_enabled: bool
        """

        self._tipping_enabled = tipping_enabled

    @property
    def total_completed_amount_money(self):
        """Gets the total_completed_amount_money of this InvoicePaymentRequest.


        :return: The total_completed_amount_money of this InvoicePaymentRequest.
        :rtype: Money
        """
        return self._total_completed_amount_money

    @total_completed_amount_money.setter
    def total_completed_amount_money(self, total_completed_amount_money):
        """Sets the total_completed_amount_money of this InvoicePaymentRequest.


        :param total_completed_amount_money: The total_completed_amount_money of this InvoicePaymentRequest.
        :type total_completed_amount_money: Money
        """

        self._total_completed_amount_money = total_completed_amount_money

    @property
    def uid(self):
        """Gets the uid of this InvoicePaymentRequest.

        The Square-generated ID of the payment request in an [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice).

        :return: The uid of this InvoicePaymentRequest.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this InvoicePaymentRequest.

        The Square-generated ID of the payment request in an [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice).

        :param uid: The uid of this InvoicePaymentRequest.
        :type uid: str
        """
        if uid is not None and len(uid) > 255:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `255`")
        if uid is not None and len(uid) < 1:
            raise ValueError("Invalid value for `uid`, length must be greater than or equal to `1`")

        self._uid = uid
