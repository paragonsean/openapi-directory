# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_id: str=None, device_installation_id: str=None, device_name: str=None):
        """DeviceDetails - a model defined in OpenAPI

        :param device_id: The device_id of this DeviceDetails.
        :param device_installation_id: The device_installation_id of this DeviceDetails.
        :param device_name: The device_name of this DeviceDetails.
        """
        self.openapi_types = {
            'device_id': str,
            'device_installation_id': str,
            'device_name': str
        }

        self.attribute_map = {
            'device_id': 'device_id',
            'device_installation_id': 'device_installation_id',
            'device_name': 'device_name'
        }

        self._device_id = device_id
        self._device_installation_id = device_installation_id
        self._device_name = device_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceDetails of this DeviceDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self):
        """Gets the device_id of this DeviceDetails.

        The Square-issued ID of the device.

        :return: The device_id of this DeviceDetails.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceDetails.

        The Square-issued ID of the device.

        :param device_id: The device_id of this DeviceDetails.
        :type device_id: str
        """
        if device_id is not None and len(device_id) > 255:
            raise ValueError("Invalid value for `device_id`, length must be less than or equal to `255`")

        self._device_id = device_id

    @property
    def device_installation_id(self):
        """Gets the device_installation_id of this DeviceDetails.

        The Square-issued installation ID for the device.

        :return: The device_installation_id of this DeviceDetails.
        :rtype: str
        """
        return self._device_installation_id

    @device_installation_id.setter
    def device_installation_id(self, device_installation_id):
        """Sets the device_installation_id of this DeviceDetails.

        The Square-issued installation ID for the device.

        :param device_installation_id: The device_installation_id of this DeviceDetails.
        :type device_installation_id: str
        """
        if device_installation_id is not None and len(device_installation_id) > 255:
            raise ValueError("Invalid value for `device_installation_id`, length must be less than or equal to `255`")

        self._device_installation_id = device_installation_id

    @property
    def device_name(self):
        """Gets the device_name of this DeviceDetails.

        The name of the device set by the seller.

        :return: The device_name of this DeviceDetails.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this DeviceDetails.

        The name of the device set by the seller.

        :param device_name: The device_name of this DeviceDetails.
        :type device_name: str
        """
        if device_name is not None and len(device_name) > 255:
            raise ValueError("Invalid value for `device_name`, length must be less than or equal to `255`")

        self._device_name = device_name
