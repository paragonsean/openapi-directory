# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_modifier_override import CatalogModifierOverride
from openapi_server import util


class CatalogItemModifierListInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, max_selected_modifiers: int=None, min_selected_modifiers: int=None, modifier_list_id: str=None, modifier_overrides: List[CatalogModifierOverride]=None):
        """CatalogItemModifierListInfo - a model defined in OpenAPI

        :param enabled: The enabled of this CatalogItemModifierListInfo.
        :param max_selected_modifiers: The max_selected_modifiers of this CatalogItemModifierListInfo.
        :param min_selected_modifiers: The min_selected_modifiers of this CatalogItemModifierListInfo.
        :param modifier_list_id: The modifier_list_id of this CatalogItemModifierListInfo.
        :param modifier_overrides: The modifier_overrides of this CatalogItemModifierListInfo.
        """
        self.openapi_types = {
            'enabled': bool,
            'max_selected_modifiers': int,
            'min_selected_modifiers': int,
            'modifier_list_id': str,
            'modifier_overrides': List[CatalogModifierOverride]
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'max_selected_modifiers': 'max_selected_modifiers',
            'min_selected_modifiers': 'min_selected_modifiers',
            'modifier_list_id': 'modifier_list_id',
            'modifier_overrides': 'modifier_overrides'
        }

        self._enabled = enabled
        self._max_selected_modifiers = max_selected_modifiers
        self._min_selected_modifiers = min_selected_modifiers
        self._modifier_list_id = modifier_list_id
        self._modifier_overrides = modifier_overrides

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogItemModifierListInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogItemModifierListInfo of this CatalogItemModifierListInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this CatalogItemModifierListInfo.

        If `true`, enable this `CatalogModifierList`. The default value is `true`.

        :return: The enabled of this CatalogItemModifierListInfo.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CatalogItemModifierListInfo.

        If `true`, enable this `CatalogModifierList`. The default value is `true`.

        :param enabled: The enabled of this CatalogItemModifierListInfo.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def max_selected_modifiers(self):
        """Gets the max_selected_modifiers of this CatalogItemModifierListInfo.

        If 0 or larger, the largest number of `CatalogModifier`s that can be selected from this `CatalogModifierList`.

        :return: The max_selected_modifiers of this CatalogItemModifierListInfo.
        :rtype: int
        """
        return self._max_selected_modifiers

    @max_selected_modifiers.setter
    def max_selected_modifiers(self, max_selected_modifiers):
        """Sets the max_selected_modifiers of this CatalogItemModifierListInfo.

        If 0 or larger, the largest number of `CatalogModifier`s that can be selected from this `CatalogModifierList`.

        :param max_selected_modifiers: The max_selected_modifiers of this CatalogItemModifierListInfo.
        :type max_selected_modifiers: int
        """

        self._max_selected_modifiers = max_selected_modifiers

    @property
    def min_selected_modifiers(self):
        """Gets the min_selected_modifiers of this CatalogItemModifierListInfo.

        If 0 or larger, the smallest number of `CatalogModifier`s that must be selected from this `CatalogModifierList`.

        :return: The min_selected_modifiers of this CatalogItemModifierListInfo.
        :rtype: int
        """
        return self._min_selected_modifiers

    @min_selected_modifiers.setter
    def min_selected_modifiers(self, min_selected_modifiers):
        """Sets the min_selected_modifiers of this CatalogItemModifierListInfo.

        If 0 or larger, the smallest number of `CatalogModifier`s that must be selected from this `CatalogModifierList`.

        :param min_selected_modifiers: The min_selected_modifiers of this CatalogItemModifierListInfo.
        :type min_selected_modifiers: int
        """

        self._min_selected_modifiers = min_selected_modifiers

    @property
    def modifier_list_id(self):
        """Gets the modifier_list_id of this CatalogItemModifierListInfo.

        The ID of the `CatalogModifierList` controlled by this `CatalogModifierListInfo`.

        :return: The modifier_list_id of this CatalogItemModifierListInfo.
        :rtype: str
        """
        return self._modifier_list_id

    @modifier_list_id.setter
    def modifier_list_id(self, modifier_list_id):
        """Sets the modifier_list_id of this CatalogItemModifierListInfo.

        The ID of the `CatalogModifierList` controlled by this `CatalogModifierListInfo`.

        :param modifier_list_id: The modifier_list_id of this CatalogItemModifierListInfo.
        :type modifier_list_id: str
        """
        if modifier_list_id is None:
            raise ValueError("Invalid value for `modifier_list_id`, must not be `None`")
        if modifier_list_id is not None and len(modifier_list_id) < 1:
            raise ValueError("Invalid value for `modifier_list_id`, length must be greater than or equal to `1`")

        self._modifier_list_id = modifier_list_id

    @property
    def modifier_overrides(self):
        """Gets the modifier_overrides of this CatalogItemModifierListInfo.

        A set of `CatalogModifierOverride` objects that override whether a given `CatalogModifier` is enabled by default.

        :return: The modifier_overrides of this CatalogItemModifierListInfo.
        :rtype: List[CatalogModifierOverride]
        """
        return self._modifier_overrides

    @modifier_overrides.setter
    def modifier_overrides(self, modifier_overrides):
        """Sets the modifier_overrides of this CatalogItemModifierListInfo.

        A set of `CatalogModifierOverride` objects that override whether a given `CatalogModifier` is enabled by default.

        :param modifier_overrides: The modifier_overrides of this CatalogItemModifierListInfo.
        :type modifier_overrides: List[CatalogModifierOverride]
        """

        self._modifier_overrides = modifier_overrides
