# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class SubscriptionPhase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cadence: str=None, ordinal: int=None, periods: int=None, recurring_price_money: Money=None, uid: str=None):
        """SubscriptionPhase - a model defined in OpenAPI

        :param cadence: The cadence of this SubscriptionPhase.
        :param ordinal: The ordinal of this SubscriptionPhase.
        :param periods: The periods of this SubscriptionPhase.
        :param recurring_price_money: The recurring_price_money of this SubscriptionPhase.
        :param uid: The uid of this SubscriptionPhase.
        """
        self.openapi_types = {
            'cadence': str,
            'ordinal': int,
            'periods': int,
            'recurring_price_money': Money,
            'uid': str
        }

        self.attribute_map = {
            'cadence': 'cadence',
            'ordinal': 'ordinal',
            'periods': 'periods',
            'recurring_price_money': 'recurring_price_money',
            'uid': 'uid'
        }

        self._cadence = cadence
        self._ordinal = ordinal
        self._periods = periods
        self._recurring_price_money = recurring_price_money
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionPhase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionPhase of this SubscriptionPhase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cadence(self):
        """Gets the cadence of this SubscriptionPhase.

        The billing cadence of the phase. For example, weekly or monthly. This field cannot be changed after a `SubscriptionPhase` is created.

        :return: The cadence of this SubscriptionPhase.
        :rtype: str
        """
        return self._cadence

    @cadence.setter
    def cadence(self, cadence):
        """Sets the cadence of this SubscriptionPhase.

        The billing cadence of the phase. For example, weekly or monthly. This field cannot be changed after a `SubscriptionPhase` is created.

        :param cadence: The cadence of this SubscriptionPhase.
        :type cadence: str
        """
        if cadence is None:
            raise ValueError("Invalid value for `cadence`, must not be `None`")

        self._cadence = cadence

    @property
    def ordinal(self):
        """Gets the ordinal of this SubscriptionPhase.

        The position this phase appears in the sequence of phases defined for the plan, indexed from 0. This field cannot be changed after a `SubscriptionPhase` is created.

        :return: The ordinal of this SubscriptionPhase.
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this SubscriptionPhase.

        The position this phase appears in the sequence of phases defined for the plan, indexed from 0. This field cannot be changed after a `SubscriptionPhase` is created.

        :param ordinal: The ordinal of this SubscriptionPhase.
        :type ordinal: int
        """

        self._ordinal = ordinal

    @property
    def periods(self):
        """Gets the periods of this SubscriptionPhase.

        The number of `cadence`s the phase lasts. If not set, the phase never ends. Only the last phase can be indefinite. This field cannot be changed after a `SubscriptionPhase` is created.

        :return: The periods of this SubscriptionPhase.
        :rtype: int
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """Sets the periods of this SubscriptionPhase.

        The number of `cadence`s the phase lasts. If not set, the phase never ends. Only the last phase can be indefinite. This field cannot be changed after a `SubscriptionPhase` is created.

        :param periods: The periods of this SubscriptionPhase.
        :type periods: int
        """

        self._periods = periods

    @property
    def recurring_price_money(self):
        """Gets the recurring_price_money of this SubscriptionPhase.


        :return: The recurring_price_money of this SubscriptionPhase.
        :rtype: Money
        """
        return self._recurring_price_money

    @recurring_price_money.setter
    def recurring_price_money(self, recurring_price_money):
        """Sets the recurring_price_money of this SubscriptionPhase.


        :param recurring_price_money: The recurring_price_money of this SubscriptionPhase.
        :type recurring_price_money: Money
        """
        if recurring_price_money is None:
            raise ValueError("Invalid value for `recurring_price_money`, must not be `None`")

        self._recurring_price_money = recurring_price_money

    @property
    def uid(self):
        """Gets the uid of this SubscriptionPhase.

        The Square-assigned ID of the subscription phase. This field cannot be changed after a `SubscriptionPhase` is created.

        :return: The uid of this SubscriptionPhase.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this SubscriptionPhase.

        The Square-assigned ID of the subscription phase. This field cannot be changed after a `SubscriptionPhase` is created.

        :param uid: The uid of this SubscriptionPhase.
        :type uid: str
        """

        self._uid = uid
