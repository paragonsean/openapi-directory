# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkweekConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, id: str=None, start_of_day_local_time: str=None, start_of_week: str=None, updated_at: str=None, version: int=None):
        """WorkweekConfig - a model defined in OpenAPI

        :param created_at: The created_at of this WorkweekConfig.
        :param id: The id of this WorkweekConfig.
        :param start_of_day_local_time: The start_of_day_local_time of this WorkweekConfig.
        :param start_of_week: The start_of_week of this WorkweekConfig.
        :param updated_at: The updated_at of this WorkweekConfig.
        :param version: The version of this WorkweekConfig.
        """
        self.openapi_types = {
            'created_at': str,
            'id': str,
            'start_of_day_local_time': str,
            'start_of_week': str,
            'updated_at': str,
            'version': int
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'id': 'id',
            'start_of_day_local_time': 'start_of_day_local_time',
            'start_of_week': 'start_of_week',
            'updated_at': 'updated_at',
            'version': 'version'
        }

        self._created_at = created_at
        self._id = id
        self._start_of_day_local_time = start_of_day_local_time
        self._start_of_week = start_of_week
        self._updated_at = updated_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkweekConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkweekConfig of this WorkweekConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this WorkweekConfig.

        A read-only timestamp in RFC 3339 format; presented in UTC.

        :return: The created_at of this WorkweekConfig.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WorkweekConfig.

        A read-only timestamp in RFC 3339 format; presented in UTC.

        :param created_at: The created_at of this WorkweekConfig.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this WorkweekConfig.

        The UUID for this object.

        :return: The id of this WorkweekConfig.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkweekConfig.

        The UUID for this object.

        :param id: The id of this WorkweekConfig.
        :type id: str
        """

        self._id = id

    @property
    def start_of_day_local_time(self):
        """Gets the start_of_day_local_time of this WorkweekConfig.

        The local time at which a business week ends. Represented as a string in `HH:MM` format (`HH:MM:SS` is also accepted, but seconds are truncated).

        :return: The start_of_day_local_time of this WorkweekConfig.
        :rtype: str
        """
        return self._start_of_day_local_time

    @start_of_day_local_time.setter
    def start_of_day_local_time(self, start_of_day_local_time):
        """Sets the start_of_day_local_time of this WorkweekConfig.

        The local time at which a business week ends. Represented as a string in `HH:MM` format (`HH:MM:SS` is also accepted, but seconds are truncated).

        :param start_of_day_local_time: The start_of_day_local_time of this WorkweekConfig.
        :type start_of_day_local_time: str
        """
        if start_of_day_local_time is None:
            raise ValueError("Invalid value for `start_of_day_local_time`, must not be `None`")
        if start_of_day_local_time is not None and len(start_of_day_local_time) < 1:
            raise ValueError("Invalid value for `start_of_day_local_time`, length must be greater than or equal to `1`")

        self._start_of_day_local_time = start_of_day_local_time

    @property
    def start_of_week(self):
        """Gets the start_of_week of this WorkweekConfig.

        The day of the week on which a business week ends for compensation purposes.

        :return: The start_of_week of this WorkweekConfig.
        :rtype: str
        """
        return self._start_of_week

    @start_of_week.setter
    def start_of_week(self, start_of_week):
        """Sets the start_of_week of this WorkweekConfig.

        The day of the week on which a business week ends for compensation purposes.

        :param start_of_week: The start_of_week of this WorkweekConfig.
        :type start_of_week: str
        """
        if start_of_week is None:
            raise ValueError("Invalid value for `start_of_week`, must not be `None`")

        self._start_of_week = start_of_week

    @property
    def updated_at(self):
        """Gets the updated_at of this WorkweekConfig.

        A read-only timestamp in RFC 3339 format; presented in UTC.

        :return: The updated_at of this WorkweekConfig.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this WorkweekConfig.

        A read-only timestamp in RFC 3339 format; presented in UTC.

        :param updated_at: The updated_at of this WorkweekConfig.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this WorkweekConfig.

        Used for resolving concurrency issues. The request fails if the version provided does not match the server version at the time of the request. If not provided, Square executes a blind write; potentially overwriting data from another write.

        :return: The version of this WorkweekConfig.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this WorkweekConfig.

        Used for resolving concurrency issues. The request fails if the version provided does not match the server version at the time of the request. If not provided, Square executes a blind write; potentially overwriting data from another write.

        :param version: The version of this WorkweekConfig.
        :type version: int
        """

        self._version = version
