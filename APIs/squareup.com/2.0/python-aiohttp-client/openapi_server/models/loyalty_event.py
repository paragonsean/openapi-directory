# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.loyalty_event_accumulate_points import LoyaltyEventAccumulatePoints
from openapi_server.models.loyalty_event_adjust_points import LoyaltyEventAdjustPoints
from openapi_server.models.loyalty_event_create_reward import LoyaltyEventCreateReward
from openapi_server.models.loyalty_event_delete_reward import LoyaltyEventDeleteReward
from openapi_server.models.loyalty_event_expire_points import LoyaltyEventExpirePoints
from openapi_server.models.loyalty_event_other import LoyaltyEventOther
from openapi_server.models.loyalty_event_redeem_reward import LoyaltyEventRedeemReward
from openapi_server import util


class LoyaltyEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accumulate_points: LoyaltyEventAccumulatePoints=None, adjust_points: LoyaltyEventAdjustPoints=None, create_reward: LoyaltyEventCreateReward=None, created_at: str=None, delete_reward: LoyaltyEventDeleteReward=None, expire_points: LoyaltyEventExpirePoints=None, id: str=None, location_id: str=None, loyalty_account_id: str=None, other_event: LoyaltyEventOther=None, redeem_reward: LoyaltyEventRedeemReward=None, source: str=None, type: str=None):
        """LoyaltyEvent - a model defined in OpenAPI

        :param accumulate_points: The accumulate_points of this LoyaltyEvent.
        :param adjust_points: The adjust_points of this LoyaltyEvent.
        :param create_reward: The create_reward of this LoyaltyEvent.
        :param created_at: The created_at of this LoyaltyEvent.
        :param delete_reward: The delete_reward of this LoyaltyEvent.
        :param expire_points: The expire_points of this LoyaltyEvent.
        :param id: The id of this LoyaltyEvent.
        :param location_id: The location_id of this LoyaltyEvent.
        :param loyalty_account_id: The loyalty_account_id of this LoyaltyEvent.
        :param other_event: The other_event of this LoyaltyEvent.
        :param redeem_reward: The redeem_reward of this LoyaltyEvent.
        :param source: The source of this LoyaltyEvent.
        :param type: The type of this LoyaltyEvent.
        """
        self.openapi_types = {
            'accumulate_points': LoyaltyEventAccumulatePoints,
            'adjust_points': LoyaltyEventAdjustPoints,
            'create_reward': LoyaltyEventCreateReward,
            'created_at': str,
            'delete_reward': LoyaltyEventDeleteReward,
            'expire_points': LoyaltyEventExpirePoints,
            'id': str,
            'location_id': str,
            'loyalty_account_id': str,
            'other_event': LoyaltyEventOther,
            'redeem_reward': LoyaltyEventRedeemReward,
            'source': str,
            'type': str
        }

        self.attribute_map = {
            'accumulate_points': 'accumulate_points',
            'adjust_points': 'adjust_points',
            'create_reward': 'create_reward',
            'created_at': 'created_at',
            'delete_reward': 'delete_reward',
            'expire_points': 'expire_points',
            'id': 'id',
            'location_id': 'location_id',
            'loyalty_account_id': 'loyalty_account_id',
            'other_event': 'other_event',
            'redeem_reward': 'redeem_reward',
            'source': 'source',
            'type': 'type'
        }

        self._accumulate_points = accumulate_points
        self._adjust_points = adjust_points
        self._create_reward = create_reward
        self._created_at = created_at
        self._delete_reward = delete_reward
        self._expire_points = expire_points
        self._id = id
        self._location_id = location_id
        self._loyalty_account_id = loyalty_account_id
        self._other_event = other_event
        self._redeem_reward = redeem_reward
        self._source = source
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyEvent of this LoyaltyEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accumulate_points(self):
        """Gets the accumulate_points of this LoyaltyEvent.


        :return: The accumulate_points of this LoyaltyEvent.
        :rtype: LoyaltyEventAccumulatePoints
        """
        return self._accumulate_points

    @accumulate_points.setter
    def accumulate_points(self, accumulate_points):
        """Sets the accumulate_points of this LoyaltyEvent.


        :param accumulate_points: The accumulate_points of this LoyaltyEvent.
        :type accumulate_points: LoyaltyEventAccumulatePoints
        """

        self._accumulate_points = accumulate_points

    @property
    def adjust_points(self):
        """Gets the adjust_points of this LoyaltyEvent.


        :return: The adjust_points of this LoyaltyEvent.
        :rtype: LoyaltyEventAdjustPoints
        """
        return self._adjust_points

    @adjust_points.setter
    def adjust_points(self, adjust_points):
        """Sets the adjust_points of this LoyaltyEvent.


        :param adjust_points: The adjust_points of this LoyaltyEvent.
        :type adjust_points: LoyaltyEventAdjustPoints
        """

        self._adjust_points = adjust_points

    @property
    def create_reward(self):
        """Gets the create_reward of this LoyaltyEvent.


        :return: The create_reward of this LoyaltyEvent.
        :rtype: LoyaltyEventCreateReward
        """
        return self._create_reward

    @create_reward.setter
    def create_reward(self, create_reward):
        """Sets the create_reward of this LoyaltyEvent.


        :param create_reward: The create_reward of this LoyaltyEvent.
        :type create_reward: LoyaltyEventCreateReward
        """

        self._create_reward = create_reward

    @property
    def created_at(self):
        """Gets the created_at of this LoyaltyEvent.

        The timestamp when the event was created, in RFC 3339 format.

        :return: The created_at of this LoyaltyEvent.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LoyaltyEvent.

        The timestamp when the event was created, in RFC 3339 format.

        :param created_at: The created_at of this LoyaltyEvent.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")
        if created_at is not None and len(created_at) < 1:
            raise ValueError("Invalid value for `created_at`, length must be greater than or equal to `1`")

        self._created_at = created_at

    @property
    def delete_reward(self):
        """Gets the delete_reward of this LoyaltyEvent.


        :return: The delete_reward of this LoyaltyEvent.
        :rtype: LoyaltyEventDeleteReward
        """
        return self._delete_reward

    @delete_reward.setter
    def delete_reward(self, delete_reward):
        """Sets the delete_reward of this LoyaltyEvent.


        :param delete_reward: The delete_reward of this LoyaltyEvent.
        :type delete_reward: LoyaltyEventDeleteReward
        """

        self._delete_reward = delete_reward

    @property
    def expire_points(self):
        """Gets the expire_points of this LoyaltyEvent.


        :return: The expire_points of this LoyaltyEvent.
        :rtype: LoyaltyEventExpirePoints
        """
        return self._expire_points

    @expire_points.setter
    def expire_points(self, expire_points):
        """Sets the expire_points of this LoyaltyEvent.


        :param expire_points: The expire_points of this LoyaltyEvent.
        :type expire_points: LoyaltyEventExpirePoints
        """

        self._expire_points = expire_points

    @property
    def id(self):
        """Gets the id of this LoyaltyEvent.

        The Square-assigned ID of the loyalty event.

        :return: The id of this LoyaltyEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoyaltyEvent.

        The Square-assigned ID of the loyalty event.

        :param id: The id of this LoyaltyEvent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this LoyaltyEvent.

        The ID of the [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the event occurred.

        :return: The location_id of this LoyaltyEvent.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this LoyaltyEvent.

        The ID of the [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the event occurred.

        :param location_id: The location_id of this LoyaltyEvent.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def loyalty_account_id(self):
        """Gets the loyalty_account_id of this LoyaltyEvent.

        The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) in which the event occurred.

        :return: The loyalty_account_id of this LoyaltyEvent.
        :rtype: str
        """
        return self._loyalty_account_id

    @loyalty_account_id.setter
    def loyalty_account_id(self, loyalty_account_id):
        """Sets the loyalty_account_id of this LoyaltyEvent.

        The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) in which the event occurred.

        :param loyalty_account_id: The loyalty_account_id of this LoyaltyEvent.
        :type loyalty_account_id: str
        """
        if loyalty_account_id is None:
            raise ValueError("Invalid value for `loyalty_account_id`, must not be `None`")
        if loyalty_account_id is not None and len(loyalty_account_id) > 36:
            raise ValueError("Invalid value for `loyalty_account_id`, length must be less than or equal to `36`")
        if loyalty_account_id is not None and len(loyalty_account_id) < 1:
            raise ValueError("Invalid value for `loyalty_account_id`, length must be greater than or equal to `1`")

        self._loyalty_account_id = loyalty_account_id

    @property
    def other_event(self):
        """Gets the other_event of this LoyaltyEvent.


        :return: The other_event of this LoyaltyEvent.
        :rtype: LoyaltyEventOther
        """
        return self._other_event

    @other_event.setter
    def other_event(self, other_event):
        """Sets the other_event of this LoyaltyEvent.


        :param other_event: The other_event of this LoyaltyEvent.
        :type other_event: LoyaltyEventOther
        """

        self._other_event = other_event

    @property
    def redeem_reward(self):
        """Gets the redeem_reward of this LoyaltyEvent.


        :return: The redeem_reward of this LoyaltyEvent.
        :rtype: LoyaltyEventRedeemReward
        """
        return self._redeem_reward

    @redeem_reward.setter
    def redeem_reward(self, redeem_reward):
        """Sets the redeem_reward of this LoyaltyEvent.


        :param redeem_reward: The redeem_reward of this LoyaltyEvent.
        :type redeem_reward: LoyaltyEventRedeemReward
        """

        self._redeem_reward = redeem_reward

    @property
    def source(self):
        """Gets the source of this LoyaltyEvent.

        Defines whether the event was generated by the Square Point of Sale.

        :return: The source of this LoyaltyEvent.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this LoyaltyEvent.

        Defines whether the event was generated by the Square Point of Sale.

        :param source: The source of this LoyaltyEvent.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def type(self):
        """Gets the type of this LoyaltyEvent.

        The type of the loyalty event.

        :return: The type of this LoyaltyEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LoyaltyEvent.

        The type of the loyalty event.

        :param type: The type of this LoyaltyEvent.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
