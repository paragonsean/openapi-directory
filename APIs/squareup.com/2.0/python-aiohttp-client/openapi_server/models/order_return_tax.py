# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class OrderReturnTax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_money: Money=None, catalog_object_id: str=None, catalog_version: int=None, name: str=None, percentage: str=None, scope: str=None, source_tax_uid: str=None, type: str=None, uid: str=None):
        """OrderReturnTax - a model defined in OpenAPI

        :param applied_money: The applied_money of this OrderReturnTax.
        :param catalog_object_id: The catalog_object_id of this OrderReturnTax.
        :param catalog_version: The catalog_version of this OrderReturnTax.
        :param name: The name of this OrderReturnTax.
        :param percentage: The percentage of this OrderReturnTax.
        :param scope: The scope of this OrderReturnTax.
        :param source_tax_uid: The source_tax_uid of this OrderReturnTax.
        :param type: The type of this OrderReturnTax.
        :param uid: The uid of this OrderReturnTax.
        """
        self.openapi_types = {
            'applied_money': Money,
            'catalog_object_id': str,
            'catalog_version': int,
            'name': str,
            'percentage': str,
            'scope': str,
            'source_tax_uid': str,
            'type': str,
            'uid': str
        }

        self.attribute_map = {
            'applied_money': 'applied_money',
            'catalog_object_id': 'catalog_object_id',
            'catalog_version': 'catalog_version',
            'name': 'name',
            'percentage': 'percentage',
            'scope': 'scope',
            'source_tax_uid': 'source_tax_uid',
            'type': 'type',
            'uid': 'uid'
        }

        self._applied_money = applied_money
        self._catalog_object_id = catalog_object_id
        self._catalog_version = catalog_version
        self._name = name
        self._percentage = percentage
        self._scope = scope
        self._source_tax_uid = source_tax_uid
        self._type = type
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderReturnTax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderReturnTax of this OrderReturnTax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_money(self):
        """Gets the applied_money of this OrderReturnTax.


        :return: The applied_money of this OrderReturnTax.
        :rtype: Money
        """
        return self._applied_money

    @applied_money.setter
    def applied_money(self, applied_money):
        """Sets the applied_money of this OrderReturnTax.


        :param applied_money: The applied_money of this OrderReturnTax.
        :type applied_money: Money
        """

        self._applied_money = applied_money

    @property
    def catalog_object_id(self):
        """Gets the catalog_object_id of this OrderReturnTax.

        The catalog object ID referencing [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax).

        :return: The catalog_object_id of this OrderReturnTax.
        :rtype: str
        """
        return self._catalog_object_id

    @catalog_object_id.setter
    def catalog_object_id(self, catalog_object_id):
        """Sets the catalog_object_id of this OrderReturnTax.

        The catalog object ID referencing [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax).

        :param catalog_object_id: The catalog_object_id of this OrderReturnTax.
        :type catalog_object_id: str
        """
        if catalog_object_id is not None and len(catalog_object_id) > 192:
            raise ValueError("Invalid value for `catalog_object_id`, length must be less than or equal to `192`")

        self._catalog_object_id = catalog_object_id

    @property
    def catalog_version(self):
        """Gets the catalog_version of this OrderReturnTax.

        The version of the catalog object that this tax references.

        :return: The catalog_version of this OrderReturnTax.
        :rtype: int
        """
        return self._catalog_version

    @catalog_version.setter
    def catalog_version(self, catalog_version):
        """Sets the catalog_version of this OrderReturnTax.

        The version of the catalog object that this tax references.

        :param catalog_version: The catalog_version of this OrderReturnTax.
        :type catalog_version: int
        """

        self._catalog_version = catalog_version

    @property
    def name(self):
        """Gets the name of this OrderReturnTax.

        The tax's name.

        :return: The name of this OrderReturnTax.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderReturnTax.

        The tax's name.

        :param name: The name of this OrderReturnTax.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this OrderReturnTax.

        The percentage of the tax, as a string representation of a decimal number. For example, a value of `\"7.25\"` corresponds to a percentage of 7.25%.

        :return: The percentage of this OrderReturnTax.
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this OrderReturnTax.

        The percentage of the tax, as a string representation of a decimal number. For example, a value of `\"7.25\"` corresponds to a percentage of 7.25%.

        :param percentage: The percentage of this OrderReturnTax.
        :type percentage: str
        """
        if percentage is not None and len(percentage) > 10:
            raise ValueError("Invalid value for `percentage`, length must be less than or equal to `10`")

        self._percentage = percentage

    @property
    def scope(self):
        """Gets the scope of this OrderReturnTax.

        Indicates the level at which the `OrderReturnTax` applies. For `ORDER` scoped taxes, Square generates references in `applied_taxes` on all `OrderReturnLineItem`s. For `LINE_ITEM` scoped taxes, the tax is only applied to `OrderReturnLineItem`s with references in their `applied_discounts` field.

        :return: The scope of this OrderReturnTax.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this OrderReturnTax.

        Indicates the level at which the `OrderReturnTax` applies. For `ORDER` scoped taxes, Square generates references in `applied_taxes` on all `OrderReturnLineItem`s. For `LINE_ITEM` scoped taxes, the tax is only applied to `OrderReturnLineItem`s with references in their `applied_discounts` field.

        :param scope: The scope of this OrderReturnTax.
        :type scope: str
        """

        self._scope = scope

    @property
    def source_tax_uid(self):
        """Gets the source_tax_uid of this OrderReturnTax.

        The tax `uid` from the order that contains the original tax charge.

        :return: The source_tax_uid of this OrderReturnTax.
        :rtype: str
        """
        return self._source_tax_uid

    @source_tax_uid.setter
    def source_tax_uid(self, source_tax_uid):
        """Sets the source_tax_uid of this OrderReturnTax.

        The tax `uid` from the order that contains the original tax charge.

        :param source_tax_uid: The source_tax_uid of this OrderReturnTax.
        :type source_tax_uid: str
        """
        if source_tax_uid is not None and len(source_tax_uid) > 60:
            raise ValueError("Invalid value for `source_tax_uid`, length must be less than or equal to `60`")

        self._source_tax_uid = source_tax_uid

    @property
    def type(self):
        """Gets the type of this OrderReturnTax.

        Indicates the calculation method used to apply the tax.

        :return: The type of this OrderReturnTax.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderReturnTax.

        Indicates the calculation method used to apply the tax.

        :param type: The type of this OrderReturnTax.
        :type type: str
        """

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this OrderReturnTax.

        A unique ID that identifies the returned tax only within this order.

        :return: The uid of this OrderReturnTax.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OrderReturnTax.

        A unique ID that identifies the returned tax only within this order.

        :param uid: The uid of this OrderReturnTax.
        :type uid: str
        """
        if uid is not None and len(uid) > 60:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `60`")

        self._uid = uid
