# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device import Device
from openapi_server.models.v1_money import V1Money
from openapi_server.models.v1_payment_itemization import V1PaymentItemization
from openapi_server.models.v1_payment_surcharge import V1PaymentSurcharge
from openapi_server.models.v1_payment_tax import V1PaymentTax
from openapi_server.models.v1_refund import V1Refund
from openapi_server.models.v1_tender import V1Tender
from openapi_server import util


class V1Payment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additive_tax: List[V1PaymentTax]=None, additive_tax_money: V1Money=None, created_at: str=None, creator_id: str=None, device: Device=None, discount_money: V1Money=None, gross_sales_money: V1Money=None, id: str=None, inclusive_tax: List[V1PaymentTax]=None, inclusive_tax_money: V1Money=None, is_partial: bool=None, itemizations: List[V1PaymentItemization]=None, merchant_id: str=None, net_sales_money: V1Money=None, net_total_money: V1Money=None, payment_url: str=None, processing_fee_money: V1Money=None, receipt_url: str=None, refunded_money: V1Money=None, refunds: List[V1Refund]=None, surcharge_money: V1Money=None, surcharges: List[V1PaymentSurcharge]=None, swedish_rounding_money: V1Money=None, tax_money: V1Money=None, tender: List[V1Tender]=None, tip_money: V1Money=None, total_collected_money: V1Money=None):
        """V1Payment - a model defined in OpenAPI

        :param additive_tax: The additive_tax of this V1Payment.
        :param additive_tax_money: The additive_tax_money of this V1Payment.
        :param created_at: The created_at of this V1Payment.
        :param creator_id: The creator_id of this V1Payment.
        :param device: The device of this V1Payment.
        :param discount_money: The discount_money of this V1Payment.
        :param gross_sales_money: The gross_sales_money of this V1Payment.
        :param id: The id of this V1Payment.
        :param inclusive_tax: The inclusive_tax of this V1Payment.
        :param inclusive_tax_money: The inclusive_tax_money of this V1Payment.
        :param is_partial: The is_partial of this V1Payment.
        :param itemizations: The itemizations of this V1Payment.
        :param merchant_id: The merchant_id of this V1Payment.
        :param net_sales_money: The net_sales_money of this V1Payment.
        :param net_total_money: The net_total_money of this V1Payment.
        :param payment_url: The payment_url of this V1Payment.
        :param processing_fee_money: The processing_fee_money of this V1Payment.
        :param receipt_url: The receipt_url of this V1Payment.
        :param refunded_money: The refunded_money of this V1Payment.
        :param refunds: The refunds of this V1Payment.
        :param surcharge_money: The surcharge_money of this V1Payment.
        :param surcharges: The surcharges of this V1Payment.
        :param swedish_rounding_money: The swedish_rounding_money of this V1Payment.
        :param tax_money: The tax_money of this V1Payment.
        :param tender: The tender of this V1Payment.
        :param tip_money: The tip_money of this V1Payment.
        :param total_collected_money: The total_collected_money of this V1Payment.
        """
        self.openapi_types = {
            'additive_tax': List[V1PaymentTax],
            'additive_tax_money': V1Money,
            'created_at': str,
            'creator_id': str,
            'device': Device,
            'discount_money': V1Money,
            'gross_sales_money': V1Money,
            'id': str,
            'inclusive_tax': List[V1PaymentTax],
            'inclusive_tax_money': V1Money,
            'is_partial': bool,
            'itemizations': List[V1PaymentItemization],
            'merchant_id': str,
            'net_sales_money': V1Money,
            'net_total_money': V1Money,
            'payment_url': str,
            'processing_fee_money': V1Money,
            'receipt_url': str,
            'refunded_money': V1Money,
            'refunds': List[V1Refund],
            'surcharge_money': V1Money,
            'surcharges': List[V1PaymentSurcharge],
            'swedish_rounding_money': V1Money,
            'tax_money': V1Money,
            'tender': List[V1Tender],
            'tip_money': V1Money,
            'total_collected_money': V1Money
        }

        self.attribute_map = {
            'additive_tax': 'additive_tax',
            'additive_tax_money': 'additive_tax_money',
            'created_at': 'created_at',
            'creator_id': 'creator_id',
            'device': 'device',
            'discount_money': 'discount_money',
            'gross_sales_money': 'gross_sales_money',
            'id': 'id',
            'inclusive_tax': 'inclusive_tax',
            'inclusive_tax_money': 'inclusive_tax_money',
            'is_partial': 'is_partial',
            'itemizations': 'itemizations',
            'merchant_id': 'merchant_id',
            'net_sales_money': 'net_sales_money',
            'net_total_money': 'net_total_money',
            'payment_url': 'payment_url',
            'processing_fee_money': 'processing_fee_money',
            'receipt_url': 'receipt_url',
            'refunded_money': 'refunded_money',
            'refunds': 'refunds',
            'surcharge_money': 'surcharge_money',
            'surcharges': 'surcharges',
            'swedish_rounding_money': 'swedish_rounding_money',
            'tax_money': 'tax_money',
            'tender': 'tender',
            'tip_money': 'tip_money',
            'total_collected_money': 'total_collected_money'
        }

        self._additive_tax = additive_tax
        self._additive_tax_money = additive_tax_money
        self._created_at = created_at
        self._creator_id = creator_id
        self._device = device
        self._discount_money = discount_money
        self._gross_sales_money = gross_sales_money
        self._id = id
        self._inclusive_tax = inclusive_tax
        self._inclusive_tax_money = inclusive_tax_money
        self._is_partial = is_partial
        self._itemizations = itemizations
        self._merchant_id = merchant_id
        self._net_sales_money = net_sales_money
        self._net_total_money = net_total_money
        self._payment_url = payment_url
        self._processing_fee_money = processing_fee_money
        self._receipt_url = receipt_url
        self._refunded_money = refunded_money
        self._refunds = refunds
        self._surcharge_money = surcharge_money
        self._surcharges = surcharges
        self._swedish_rounding_money = swedish_rounding_money
        self._tax_money = tax_money
        self._tender = tender
        self._tip_money = tip_money
        self._total_collected_money = total_collected_money

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V1Payment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V1Payment of this V1Payment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additive_tax(self):
        """Gets the additive_tax of this V1Payment.

        All of the additive taxes associated with the payment.

        :return: The additive_tax of this V1Payment.
        :rtype: List[V1PaymentTax]
        """
        return self._additive_tax

    @additive_tax.setter
    def additive_tax(self, additive_tax):
        """Sets the additive_tax of this V1Payment.

        All of the additive taxes associated with the payment.

        :param additive_tax: The additive_tax of this V1Payment.
        :type additive_tax: List[V1PaymentTax]
        """

        self._additive_tax = additive_tax

    @property
    def additive_tax_money(self):
        """Gets the additive_tax_money of this V1Payment.


        :return: The additive_tax_money of this V1Payment.
        :rtype: V1Money
        """
        return self._additive_tax_money

    @additive_tax_money.setter
    def additive_tax_money(self, additive_tax_money):
        """Sets the additive_tax_money of this V1Payment.


        :param additive_tax_money: The additive_tax_money of this V1Payment.
        :type additive_tax_money: V1Money
        """

        self._additive_tax_money = additive_tax_money

    @property
    def created_at(self):
        """Gets the created_at of this V1Payment.

        The time when the payment was created, in ISO 8601 format. Reflects the time of the first payment if the object represents an incomplete partial payment, and the time of the last or complete payment otherwise.

        :return: The created_at of this V1Payment.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V1Payment.

        The time when the payment was created, in ISO 8601 format. Reflects the time of the first payment if the object represents an incomplete partial payment, and the time of the last or complete payment otherwise.

        :param created_at: The created_at of this V1Payment.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def creator_id(self):
        """Gets the creator_id of this V1Payment.

        The unique identifier of the Square account that took the payment.

        :return: The creator_id of this V1Payment.
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this V1Payment.

        The unique identifier of the Square account that took the payment.

        :param creator_id: The creator_id of this V1Payment.
        :type creator_id: str
        """

        self._creator_id = creator_id

    @property
    def device(self):
        """Gets the device of this V1Payment.


        :return: The device of this V1Payment.
        :rtype: Device
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this V1Payment.


        :param device: The device of this V1Payment.
        :type device: Device
        """

        self._device = device

    @property
    def discount_money(self):
        """Gets the discount_money of this V1Payment.


        :return: The discount_money of this V1Payment.
        :rtype: V1Money
        """
        return self._discount_money

    @discount_money.setter
    def discount_money(self, discount_money):
        """Sets the discount_money of this V1Payment.


        :param discount_money: The discount_money of this V1Payment.
        :type discount_money: V1Money
        """

        self._discount_money = discount_money

    @property
    def gross_sales_money(self):
        """Gets the gross_sales_money of this V1Payment.


        :return: The gross_sales_money of this V1Payment.
        :rtype: V1Money
        """
        return self._gross_sales_money

    @gross_sales_money.setter
    def gross_sales_money(self, gross_sales_money):
        """Sets the gross_sales_money of this V1Payment.


        :param gross_sales_money: The gross_sales_money of this V1Payment.
        :type gross_sales_money: V1Money
        """

        self._gross_sales_money = gross_sales_money

    @property
    def id(self):
        """Gets the id of this V1Payment.

        The payment's unique identifier.

        :return: The id of this V1Payment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1Payment.

        The payment's unique identifier.

        :param id: The id of this V1Payment.
        :type id: str
        """

        self._id = id

    @property
    def inclusive_tax(self):
        """Gets the inclusive_tax of this V1Payment.

        All of the inclusive taxes associated with the payment.

        :return: The inclusive_tax of this V1Payment.
        :rtype: List[V1PaymentTax]
        """
        return self._inclusive_tax

    @inclusive_tax.setter
    def inclusive_tax(self, inclusive_tax):
        """Sets the inclusive_tax of this V1Payment.

        All of the inclusive taxes associated with the payment.

        :param inclusive_tax: The inclusive_tax of this V1Payment.
        :type inclusive_tax: List[V1PaymentTax]
        """

        self._inclusive_tax = inclusive_tax

    @property
    def inclusive_tax_money(self):
        """Gets the inclusive_tax_money of this V1Payment.


        :return: The inclusive_tax_money of this V1Payment.
        :rtype: V1Money
        """
        return self._inclusive_tax_money

    @inclusive_tax_money.setter
    def inclusive_tax_money(self, inclusive_tax_money):
        """Sets the inclusive_tax_money of this V1Payment.


        :param inclusive_tax_money: The inclusive_tax_money of this V1Payment.
        :type inclusive_tax_money: V1Money
        """

        self._inclusive_tax_money = inclusive_tax_money

    @property
    def is_partial(self):
        """Gets the is_partial of this V1Payment.

        Indicates whether or not the payment is only partially paid for. If true, this payment will have the tenders collected so far, but the itemizations will be empty until the payment is completed.

        :return: The is_partial of this V1Payment.
        :rtype: bool
        """
        return self._is_partial

    @is_partial.setter
    def is_partial(self, is_partial):
        """Sets the is_partial of this V1Payment.

        Indicates whether or not the payment is only partially paid for. If true, this payment will have the tenders collected so far, but the itemizations will be empty until the payment is completed.

        :param is_partial: The is_partial of this V1Payment.
        :type is_partial: bool
        """

        self._is_partial = is_partial

    @property
    def itemizations(self):
        """Gets the itemizations of this V1Payment.

        The items purchased in the payment.

        :return: The itemizations of this V1Payment.
        :rtype: List[V1PaymentItemization]
        """
        return self._itemizations

    @itemizations.setter
    def itemizations(self, itemizations):
        """Sets the itemizations of this V1Payment.

        The items purchased in the payment.

        :param itemizations: The itemizations of this V1Payment.
        :type itemizations: List[V1PaymentItemization]
        """

        self._itemizations = itemizations

    @property
    def merchant_id(self):
        """Gets the merchant_id of this V1Payment.

        The unique identifier of the merchant that took the payment.

        :return: The merchant_id of this V1Payment.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this V1Payment.

        The unique identifier of the merchant that took the payment.

        :param merchant_id: The merchant_id of this V1Payment.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def net_sales_money(self):
        """Gets the net_sales_money of this V1Payment.


        :return: The net_sales_money of this V1Payment.
        :rtype: V1Money
        """
        return self._net_sales_money

    @net_sales_money.setter
    def net_sales_money(self, net_sales_money):
        """Sets the net_sales_money of this V1Payment.


        :param net_sales_money: The net_sales_money of this V1Payment.
        :type net_sales_money: V1Money
        """

        self._net_sales_money = net_sales_money

    @property
    def net_total_money(self):
        """Gets the net_total_money of this V1Payment.


        :return: The net_total_money of this V1Payment.
        :rtype: V1Money
        """
        return self._net_total_money

    @net_total_money.setter
    def net_total_money(self, net_total_money):
        """Sets the net_total_money of this V1Payment.


        :param net_total_money: The net_total_money of this V1Payment.
        :type net_total_money: V1Money
        """

        self._net_total_money = net_total_money

    @property
    def payment_url(self):
        """Gets the payment_url of this V1Payment.

        The URL of the payment's detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page.

        :return: The payment_url of this V1Payment.
        :rtype: str
        """
        return self._payment_url

    @payment_url.setter
    def payment_url(self, payment_url):
        """Sets the payment_url of this V1Payment.

        The URL of the payment's detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page.

        :param payment_url: The payment_url of this V1Payment.
        :type payment_url: str
        """

        self._payment_url = payment_url

    @property
    def processing_fee_money(self):
        """Gets the processing_fee_money of this V1Payment.


        :return: The processing_fee_money of this V1Payment.
        :rtype: V1Money
        """
        return self._processing_fee_money

    @processing_fee_money.setter
    def processing_fee_money(self, processing_fee_money):
        """Sets the processing_fee_money of this V1Payment.


        :param processing_fee_money: The processing_fee_money of this V1Payment.
        :type processing_fee_money: V1Money
        """

        self._processing_fee_money = processing_fee_money

    @property
    def receipt_url(self):
        """Gets the receipt_url of this V1Payment.

        The URL of the receipt for the payment. Note that for split tender payments, this URL corresponds to the receipt for the first tender listed in the payment's tender field. Each Tender object has its own receipt_url field you can use to get the other receipts associated with a split tender payment.

        :return: The receipt_url of this V1Payment.
        :rtype: str
        """
        return self._receipt_url

    @receipt_url.setter
    def receipt_url(self, receipt_url):
        """Sets the receipt_url of this V1Payment.

        The URL of the receipt for the payment. Note that for split tender payments, this URL corresponds to the receipt for the first tender listed in the payment's tender field. Each Tender object has its own receipt_url field you can use to get the other receipts associated with a split tender payment.

        :param receipt_url: The receipt_url of this V1Payment.
        :type receipt_url: str
        """

        self._receipt_url = receipt_url

    @property
    def refunded_money(self):
        """Gets the refunded_money of this V1Payment.


        :return: The refunded_money of this V1Payment.
        :rtype: V1Money
        """
        return self._refunded_money

    @refunded_money.setter
    def refunded_money(self, refunded_money):
        """Sets the refunded_money of this V1Payment.


        :param refunded_money: The refunded_money of this V1Payment.
        :type refunded_money: V1Money
        """

        self._refunded_money = refunded_money

    @property
    def refunds(self):
        """Gets the refunds of this V1Payment.

        All of the refunds applied to the payment. Note that the value of all refunds on a payment can exceed the value of all tenders if a merchant chooses to refund money to a tender after previously accepting returned goods as part of an exchange.

        :return: The refunds of this V1Payment.
        :rtype: List[V1Refund]
        """
        return self._refunds

    @refunds.setter
    def refunds(self, refunds):
        """Sets the refunds of this V1Payment.

        All of the refunds applied to the payment. Note that the value of all refunds on a payment can exceed the value of all tenders if a merchant chooses to refund money to a tender after previously accepting returned goods as part of an exchange.

        :param refunds: The refunds of this V1Payment.
        :type refunds: List[V1Refund]
        """

        self._refunds = refunds

    @property
    def surcharge_money(self):
        """Gets the surcharge_money of this V1Payment.


        :return: The surcharge_money of this V1Payment.
        :rtype: V1Money
        """
        return self._surcharge_money

    @surcharge_money.setter
    def surcharge_money(self, surcharge_money):
        """Sets the surcharge_money of this V1Payment.


        :param surcharge_money: The surcharge_money of this V1Payment.
        :type surcharge_money: V1Money
        """

        self._surcharge_money = surcharge_money

    @property
    def surcharges(self):
        """Gets the surcharges of this V1Payment.

        A list of all surcharges associated with the payment.

        :return: The surcharges of this V1Payment.
        :rtype: List[V1PaymentSurcharge]
        """
        return self._surcharges

    @surcharges.setter
    def surcharges(self, surcharges):
        """Sets the surcharges of this V1Payment.

        A list of all surcharges associated with the payment.

        :param surcharges: The surcharges of this V1Payment.
        :type surcharges: List[V1PaymentSurcharge]
        """

        self._surcharges = surcharges

    @property
    def swedish_rounding_money(self):
        """Gets the swedish_rounding_money of this V1Payment.


        :return: The swedish_rounding_money of this V1Payment.
        :rtype: V1Money
        """
        return self._swedish_rounding_money

    @swedish_rounding_money.setter
    def swedish_rounding_money(self, swedish_rounding_money):
        """Sets the swedish_rounding_money of this V1Payment.


        :param swedish_rounding_money: The swedish_rounding_money of this V1Payment.
        :type swedish_rounding_money: V1Money
        """

        self._swedish_rounding_money = swedish_rounding_money

    @property
    def tax_money(self):
        """Gets the tax_money of this V1Payment.


        :return: The tax_money of this V1Payment.
        :rtype: V1Money
        """
        return self._tax_money

    @tax_money.setter
    def tax_money(self, tax_money):
        """Sets the tax_money of this V1Payment.


        :param tax_money: The tax_money of this V1Payment.
        :type tax_money: V1Money
        """

        self._tax_money = tax_money

    @property
    def tender(self):
        """Gets the tender of this V1Payment.

        All of the tenders associated with the payment.

        :return: The tender of this V1Payment.
        :rtype: List[V1Tender]
        """
        return self._tender

    @tender.setter
    def tender(self, tender):
        """Sets the tender of this V1Payment.

        All of the tenders associated with the payment.

        :param tender: The tender of this V1Payment.
        :type tender: List[V1Tender]
        """

        self._tender = tender

    @property
    def tip_money(self):
        """Gets the tip_money of this V1Payment.


        :return: The tip_money of this V1Payment.
        :rtype: V1Money
        """
        return self._tip_money

    @tip_money.setter
    def tip_money(self, tip_money):
        """Sets the tip_money of this V1Payment.


        :param tip_money: The tip_money of this V1Payment.
        :type tip_money: V1Money
        """

        self._tip_money = tip_money

    @property
    def total_collected_money(self):
        """Gets the total_collected_money of this V1Payment.


        :return: The total_collected_money of this V1Payment.
        :rtype: V1Money
        """
        return self._total_collected_money

    @total_collected_money.setter
    def total_collected_money(self, total_collected_money):
        """Sets the total_collected_money of this V1Payment.


        :param total_collected_money: The total_collected_money of this V1Payment.
        :type total_collected_money: V1Money
        """

        self._total_collected_money = total_collected_money
