# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_object import CatalogObject
from openapi_server import util


class CatalogModifierList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, modifiers: List[CatalogObject]=None, name: str=None, ordinal: int=None, selection_type: str=None):
        """CatalogModifierList - a model defined in OpenAPI

        :param modifiers: The modifiers of this CatalogModifierList.
        :param name: The name of this CatalogModifierList.
        :param ordinal: The ordinal of this CatalogModifierList.
        :param selection_type: The selection_type of this CatalogModifierList.
        """
        self.openapi_types = {
            'modifiers': List[CatalogObject],
            'name': str,
            'ordinal': int,
            'selection_type': str
        }

        self.attribute_map = {
            'modifiers': 'modifiers',
            'name': 'name',
            'ordinal': 'ordinal',
            'selection_type': 'selection_type'
        }

        self._modifiers = modifiers
        self._name = name
        self._ordinal = ordinal
        self._selection_type = selection_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogModifierList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogModifierList of this CatalogModifierList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def modifiers(self):
        """Gets the modifiers of this CatalogModifierList.

        The options included in the `CatalogModifierList`. You must include at least one `CatalogModifier`. Each CatalogObject must have type `MODIFIER` and contain `CatalogModifier` data.

        :return: The modifiers of this CatalogModifierList.
        :rtype: List[CatalogObject]
        """
        return self._modifiers

    @modifiers.setter
    def modifiers(self, modifiers):
        """Sets the modifiers of this CatalogModifierList.

        The options included in the `CatalogModifierList`. You must include at least one `CatalogModifier`. Each CatalogObject must have type `MODIFIER` and contain `CatalogModifier` data.

        :param modifiers: The modifiers of this CatalogModifierList.
        :type modifiers: List[CatalogObject]
        """

        self._modifiers = modifiers

    @property
    def name(self):
        """Gets the name of this CatalogModifierList.

        The name for the `CatalogModifierList` instance. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.

        :return: The name of this CatalogModifierList.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogModifierList.

        The name for the `CatalogModifierList` instance. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.

        :param name: The name of this CatalogModifierList.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def ordinal(self):
        """Gets the ordinal of this CatalogModifierList.

        Determines where this modifier list appears in a list of `CatalogModifierList` values.

        :return: The ordinal of this CatalogModifierList.
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this CatalogModifierList.

        Determines where this modifier list appears in a list of `CatalogModifierList` values.

        :param ordinal: The ordinal of this CatalogModifierList.
        :type ordinal: int
        """

        self._ordinal = ordinal

    @property
    def selection_type(self):
        """Gets the selection_type of this CatalogModifierList.

        Indicates whether multiple options from the modifier list can be applied to a single `CatalogItem`.

        :return: The selection_type of this CatalogModifierList.
        :rtype: str
        """
        return self._selection_type

    @selection_type.setter
    def selection_type(self, selection_type):
        """Sets the selection_type of this CatalogModifierList.

        Indicates whether multiple options from the modifier list can be applied to a single `CatalogItem`.

        :param selection_type: The selection_type of this CatalogModifierList.
        :type selection_type: str
        """

        self._selection_type = selection_type
