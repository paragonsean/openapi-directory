# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class V1PhoneNumber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calling_code: str=None, number: str=None):
        """V1PhoneNumber - a model defined in OpenAPI

        :param calling_code: The calling_code of this V1PhoneNumber.
        :param number: The number of this V1PhoneNumber.
        """
        self.openapi_types = {
            'calling_code': str,
            'number': str
        }

        self.attribute_map = {
            'calling_code': 'calling_code',
            'number': 'number'
        }

        self._calling_code = calling_code
        self._number = number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V1PhoneNumber':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V1PhoneNumber of this V1PhoneNumber.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calling_code(self):
        """Gets the calling_code of this V1PhoneNumber.

        The phone number's international calling code. For US phone numbers, this value is +1.

        :return: The calling_code of this V1PhoneNumber.
        :rtype: str
        """
        return self._calling_code

    @calling_code.setter
    def calling_code(self, calling_code):
        """Sets the calling_code of this V1PhoneNumber.

        The phone number's international calling code. For US phone numbers, this value is +1.

        :param calling_code: The calling_code of this V1PhoneNumber.
        :type calling_code: str
        """
        if calling_code is None:
            raise ValueError("Invalid value for `calling_code`, must not be `None`")

        self._calling_code = calling_code

    @property
    def number(self):
        """Gets the number of this V1PhoneNumber.

        The phone number.

        :return: The number of this V1PhoneNumber.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this V1PhoneNumber.

        The phone number.

        :param number: The number of this V1PhoneNumber.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number
