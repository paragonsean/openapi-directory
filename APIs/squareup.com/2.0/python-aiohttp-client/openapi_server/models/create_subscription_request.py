# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class CreateSubscriptionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, canceled_date: str=None, card_id: str=None, customer_id: str=None, idempotency_key: str=None, location_id: str=None, plan_id: str=None, price_override_money: Money=None, start_date: str=None, tax_percentage: str=None, timezone: str=None):
        """CreateSubscriptionRequest - a model defined in OpenAPI

        :param canceled_date: The canceled_date of this CreateSubscriptionRequest.
        :param card_id: The card_id of this CreateSubscriptionRequest.
        :param customer_id: The customer_id of this CreateSubscriptionRequest.
        :param idempotency_key: The idempotency_key of this CreateSubscriptionRequest.
        :param location_id: The location_id of this CreateSubscriptionRequest.
        :param plan_id: The plan_id of this CreateSubscriptionRequest.
        :param price_override_money: The price_override_money of this CreateSubscriptionRequest.
        :param start_date: The start_date of this CreateSubscriptionRequest.
        :param tax_percentage: The tax_percentage of this CreateSubscriptionRequest.
        :param timezone: The timezone of this CreateSubscriptionRequest.
        """
        self.openapi_types = {
            'canceled_date': str,
            'card_id': str,
            'customer_id': str,
            'idempotency_key': str,
            'location_id': str,
            'plan_id': str,
            'price_override_money': Money,
            'start_date': str,
            'tax_percentage': str,
            'timezone': str
        }

        self.attribute_map = {
            'canceled_date': 'canceled_date',
            'card_id': 'card_id',
            'customer_id': 'customer_id',
            'idempotency_key': 'idempotency_key',
            'location_id': 'location_id',
            'plan_id': 'plan_id',
            'price_override_money': 'price_override_money',
            'start_date': 'start_date',
            'tax_percentage': 'tax_percentage',
            'timezone': 'timezone'
        }

        self._canceled_date = canceled_date
        self._card_id = card_id
        self._customer_id = customer_id
        self._idempotency_key = idempotency_key
        self._location_id = location_id
        self._plan_id = plan_id
        self._price_override_money = price_override_money
        self._start_date = start_date
        self._tax_percentage = tax_percentage
        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSubscriptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSubscriptionRequest of this CreateSubscriptionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def canceled_date(self):
        """Gets the canceled_date of this CreateSubscriptionRequest.

        The date when the subscription should be canceled, in YYYY-MM-DD format (for example, 2025-02-29). This overrides the plan configuration if it comes before the date the subscription would otherwise end.

        :return: The canceled_date of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._canceled_date

    @canceled_date.setter
    def canceled_date(self, canceled_date):
        """Sets the canceled_date of this CreateSubscriptionRequest.

        The date when the subscription should be canceled, in YYYY-MM-DD format (for example, 2025-02-29). This overrides the plan configuration if it comes before the date the subscription would otherwise end.

        :param canceled_date: The canceled_date of this CreateSubscriptionRequest.
        :type canceled_date: str
        """

        self._canceled_date = canceled_date

    @property
    def card_id(self):
        """Gets the card_id of this CreateSubscriptionRequest.

        The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card) to charge. If not specified, Square sends an invoice via email. For an example to create a customer and add a card on file, see [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).

        :return: The card_id of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this CreateSubscriptionRequest.

        The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card) to charge. If not specified, Square sends an invoice via email. For an example to create a customer and add a card on file, see [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).

        :param card_id: The card_id of this CreateSubscriptionRequest.
        :type card_id: str
        """

        self._card_id = card_id

    @property
    def customer_id(self):
        """Gets the customer_id of this CreateSubscriptionRequest.

        The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.

        :return: The customer_id of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CreateSubscriptionRequest.

        The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.

        :param customer_id: The customer_id of this CreateSubscriptionRequest.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")
        if customer_id is not None and len(customer_id) < 1:
            raise ValueError("Invalid value for `customer_id`, length must be greater than or equal to `1`")

        self._customer_id = customer_id

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this CreateSubscriptionRequest.

        A unique string that identifies this `CreateSubscription` request. If you do not provide a unique string (or provide an empty string as the value), the endpoint treats each request as independent.  For more information, see [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency).

        :return: The idempotency_key of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this CreateSubscriptionRequest.

        A unique string that identifies this `CreateSubscription` request. If you do not provide a unique string (or provide an empty string as the value), the endpoint treats each request as independent.  For more information, see [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency).

        :param idempotency_key: The idempotency_key of this CreateSubscriptionRequest.
        :type idempotency_key: str
        """

        self._idempotency_key = idempotency_key

    @property
    def location_id(self):
        """Gets the location_id of this CreateSubscriptionRequest.

        The ID of the location the subscription is associated with.

        :return: The location_id of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this CreateSubscriptionRequest.

        The ID of the location the subscription is associated with.

        :param location_id: The location_id of this CreateSubscriptionRequest.
        :type location_id: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")
        if location_id is not None and len(location_id) < 1:
            raise ValueError("Invalid value for `location_id`, length must be greater than or equal to `1`")

        self._location_id = location_id

    @property
    def plan_id(self):
        """Gets the plan_id of this CreateSubscriptionRequest.

        The ID of the subscription plan created using the Catalog API. For more information, see [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan) and  [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).

        :return: The plan_id of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this CreateSubscriptionRequest.

        The ID of the subscription plan created using the Catalog API. For more information, see [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan) and  [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).

        :param plan_id: The plan_id of this CreateSubscriptionRequest.
        :type plan_id: str
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")
        if plan_id is not None and len(plan_id) < 1:
            raise ValueError("Invalid value for `plan_id`, length must be greater than or equal to `1`")

        self._plan_id = plan_id

    @property
    def price_override_money(self):
        """Gets the price_override_money of this CreateSubscriptionRequest.


        :return: The price_override_money of this CreateSubscriptionRequest.
        :rtype: Money
        """
        return self._price_override_money

    @price_override_money.setter
    def price_override_money(self, price_override_money):
        """Sets the price_override_money of this CreateSubscriptionRequest.


        :param price_override_money: The price_override_money of this CreateSubscriptionRequest.
        :type price_override_money: Money
        """

        self._price_override_money = price_override_money

    @property
    def start_date(self):
        """Gets the start_date of this CreateSubscriptionRequest.

        The start date of the subscription, in YYYY-MM-DD format. For example, 2013-01-15. If the start date is left empty, the subscription begins immediately.

        :return: The start_date of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CreateSubscriptionRequest.

        The start date of the subscription, in YYYY-MM-DD format. For example, 2013-01-15. If the start date is left empty, the subscription begins immediately.

        :param start_date: The start_date of this CreateSubscriptionRequest.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def tax_percentage(self):
        """Gets the tax_percentage of this CreateSubscriptionRequest.

        The tax to add when billing the subscription. The percentage is expressed in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign. For example, a value of 7.5 corresponds to 7.5%.

        :return: The tax_percentage of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._tax_percentage

    @tax_percentage.setter
    def tax_percentage(self, tax_percentage):
        """Sets the tax_percentage of this CreateSubscriptionRequest.

        The tax to add when billing the subscription. The percentage is expressed in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign. For example, a value of 7.5 corresponds to 7.5%.

        :param tax_percentage: The tax_percentage of this CreateSubscriptionRequest.
        :type tax_percentage: str
        """
        if tax_percentage is not None and len(tax_percentage) > 10:
            raise ValueError("Invalid value for `tax_percentage`, length must be less than or equal to `10`")

        self._tax_percentage = tax_percentage

    @property
    def timezone(self):
        """Gets the timezone of this CreateSubscriptionRequest.

        The timezone that is used in date calculations for the subscription. If unset, defaults to the location timezone. If a timezone is not configured for the location, defaults to \"America/New_York\". Format: the IANA Timezone Database identifier for the location timezone. For a list of time zones, see [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).

        :return: The timezone of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this CreateSubscriptionRequest.

        The timezone that is used in date calculations for the subscription. If unset, defaults to the location timezone. If a timezone is not configured for the location, defaults to \"America/New_York\". Format: the IANA Timezone Database identifier for the location timezone. For a list of time zones, see [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).

        :param timezone: The timezone of this CreateSubscriptionRequest.
        :type timezone: str
        """

        self._timezone = timezone
