# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.v1_money import V1Money
from openapi_server import util


class V1CreateRefundRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payment_id: str=None, reason: str=None, refunded_money: V1Money=None, request_idempotence_key: str=None, type: str=None):
        """V1CreateRefundRequest - a model defined in OpenAPI

        :param payment_id: The payment_id of this V1CreateRefundRequest.
        :param reason: The reason of this V1CreateRefundRequest.
        :param refunded_money: The refunded_money of this V1CreateRefundRequest.
        :param request_idempotence_key: The request_idempotence_key of this V1CreateRefundRequest.
        :param type: The type of this V1CreateRefundRequest.
        """
        self.openapi_types = {
            'payment_id': str,
            'reason': str,
            'refunded_money': V1Money,
            'request_idempotence_key': str,
            'type': str
        }

        self.attribute_map = {
            'payment_id': 'payment_id',
            'reason': 'reason',
            'refunded_money': 'refunded_money',
            'request_idempotence_key': 'request_idempotence_key',
            'type': 'type'
        }

        self._payment_id = payment_id
        self._reason = reason
        self._refunded_money = refunded_money
        self._request_idempotence_key = request_idempotence_key
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V1CreateRefundRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V1CreateRefundRequest of this V1CreateRefundRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payment_id(self):
        """Gets the payment_id of this V1CreateRefundRequest.

        The ID of the payment to refund. If you are creating a `PARTIAL` refund for a split tender payment, instead provide the id of the particular tender you want to refund.

        :return: The payment_id of this V1CreateRefundRequest.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this V1CreateRefundRequest.

        The ID of the payment to refund. If you are creating a `PARTIAL` refund for a split tender payment, instead provide the id of the particular tender you want to refund.

        :param payment_id: The payment_id of this V1CreateRefundRequest.
        :type payment_id: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")

        self._payment_id = payment_id

    @property
    def reason(self):
        """Gets the reason of this V1CreateRefundRequest.

        The reason for the refund.

        :return: The reason of this V1CreateRefundRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this V1CreateRefundRequest.

        The reason for the refund.

        :param reason: The reason of this V1CreateRefundRequest.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason

    @property
    def refunded_money(self):
        """Gets the refunded_money of this V1CreateRefundRequest.


        :return: The refunded_money of this V1CreateRefundRequest.
        :rtype: V1Money
        """
        return self._refunded_money

    @refunded_money.setter
    def refunded_money(self, refunded_money):
        """Sets the refunded_money of this V1CreateRefundRequest.


        :param refunded_money: The refunded_money of this V1CreateRefundRequest.
        :type refunded_money: V1Money
        """

        self._refunded_money = refunded_money

    @property
    def request_idempotence_key(self):
        """Gets the request_idempotence_key of this V1CreateRefundRequest.

        An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once.

        :return: The request_idempotence_key of this V1CreateRefundRequest.
        :rtype: str
        """
        return self._request_idempotence_key

    @request_idempotence_key.setter
    def request_idempotence_key(self, request_idempotence_key):
        """Sets the request_idempotence_key of this V1CreateRefundRequest.

        An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once.

        :param request_idempotence_key: The request_idempotence_key of this V1CreateRefundRequest.
        :type request_idempotence_key: str
        """

        self._request_idempotence_key = request_idempotence_key

    @property
    def type(self):
        """Gets the type of this V1CreateRefundRequest.

        The type of refund (FULL or PARTIAL).

        :return: The type of this V1CreateRefundRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1CreateRefundRequest.

        The type of refund (FULL or PARTIAL).

        :param type: The type of this V1CreateRefundRequest.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
