# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server.models.order_line_item_applied_discount import OrderLineItemAppliedDiscount
from openapi_server.models.order_line_item_applied_tax import OrderLineItemAppliedTax
from openapi_server.models.order_quantity_unit import OrderQuantityUnit
from openapi_server.models.order_return_line_item_modifier import OrderReturnLineItemModifier
from openapi_server import util


class OrderReturnLineItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_discounts: List[OrderLineItemAppliedDiscount]=None, applied_taxes: List[OrderLineItemAppliedTax]=None, base_price_money: Money=None, catalog_object_id: str=None, catalog_version: int=None, gross_return_money: Money=None, item_type: str=None, name: str=None, note: str=None, quantity: str=None, quantity_unit: OrderQuantityUnit=None, return_modifiers: List[OrderReturnLineItemModifier]=None, source_line_item_uid: str=None, total_discount_money: Money=None, total_money: Money=None, total_tax_money: Money=None, uid: str=None, variation_name: str=None, variation_total_price_money: Money=None):
        """OrderReturnLineItem - a model defined in OpenAPI

        :param applied_discounts: The applied_discounts of this OrderReturnLineItem.
        :param applied_taxes: The applied_taxes of this OrderReturnLineItem.
        :param base_price_money: The base_price_money of this OrderReturnLineItem.
        :param catalog_object_id: The catalog_object_id of this OrderReturnLineItem.
        :param catalog_version: The catalog_version of this OrderReturnLineItem.
        :param gross_return_money: The gross_return_money of this OrderReturnLineItem.
        :param item_type: The item_type of this OrderReturnLineItem.
        :param name: The name of this OrderReturnLineItem.
        :param note: The note of this OrderReturnLineItem.
        :param quantity: The quantity of this OrderReturnLineItem.
        :param quantity_unit: The quantity_unit of this OrderReturnLineItem.
        :param return_modifiers: The return_modifiers of this OrderReturnLineItem.
        :param source_line_item_uid: The source_line_item_uid of this OrderReturnLineItem.
        :param total_discount_money: The total_discount_money of this OrderReturnLineItem.
        :param total_money: The total_money of this OrderReturnLineItem.
        :param total_tax_money: The total_tax_money of this OrderReturnLineItem.
        :param uid: The uid of this OrderReturnLineItem.
        :param variation_name: The variation_name of this OrderReturnLineItem.
        :param variation_total_price_money: The variation_total_price_money of this OrderReturnLineItem.
        """
        self.openapi_types = {
            'applied_discounts': List[OrderLineItemAppliedDiscount],
            'applied_taxes': List[OrderLineItemAppliedTax],
            'base_price_money': Money,
            'catalog_object_id': str,
            'catalog_version': int,
            'gross_return_money': Money,
            'item_type': str,
            'name': str,
            'note': str,
            'quantity': str,
            'quantity_unit': OrderQuantityUnit,
            'return_modifiers': List[OrderReturnLineItemModifier],
            'source_line_item_uid': str,
            'total_discount_money': Money,
            'total_money': Money,
            'total_tax_money': Money,
            'uid': str,
            'variation_name': str,
            'variation_total_price_money': Money
        }

        self.attribute_map = {
            'applied_discounts': 'applied_discounts',
            'applied_taxes': 'applied_taxes',
            'base_price_money': 'base_price_money',
            'catalog_object_id': 'catalog_object_id',
            'catalog_version': 'catalog_version',
            'gross_return_money': 'gross_return_money',
            'item_type': 'item_type',
            'name': 'name',
            'note': 'note',
            'quantity': 'quantity',
            'quantity_unit': 'quantity_unit',
            'return_modifiers': 'return_modifiers',
            'source_line_item_uid': 'source_line_item_uid',
            'total_discount_money': 'total_discount_money',
            'total_money': 'total_money',
            'total_tax_money': 'total_tax_money',
            'uid': 'uid',
            'variation_name': 'variation_name',
            'variation_total_price_money': 'variation_total_price_money'
        }

        self._applied_discounts = applied_discounts
        self._applied_taxes = applied_taxes
        self._base_price_money = base_price_money
        self._catalog_object_id = catalog_object_id
        self._catalog_version = catalog_version
        self._gross_return_money = gross_return_money
        self._item_type = item_type
        self._name = name
        self._note = note
        self._quantity = quantity
        self._quantity_unit = quantity_unit
        self._return_modifiers = return_modifiers
        self._source_line_item_uid = source_line_item_uid
        self._total_discount_money = total_discount_money
        self._total_money = total_money
        self._total_tax_money = total_tax_money
        self._uid = uid
        self._variation_name = variation_name
        self._variation_total_price_money = variation_total_price_money

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderReturnLineItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderReturnLineItem of this OrderReturnLineItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_discounts(self):
        """Gets the applied_discounts of this OrderReturnLineItem.

        The list of references to `OrderReturnDiscount` entities applied to the return line item. Each `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level `OrderReturnDiscount` applied to the return line item. On reads, the applied amount is populated.

        :return: The applied_discounts of this OrderReturnLineItem.
        :rtype: List[OrderLineItemAppliedDiscount]
        """
        return self._applied_discounts

    @applied_discounts.setter
    def applied_discounts(self, applied_discounts):
        """Sets the applied_discounts of this OrderReturnLineItem.

        The list of references to `OrderReturnDiscount` entities applied to the return line item. Each `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level `OrderReturnDiscount` applied to the return line item. On reads, the applied amount is populated.

        :param applied_discounts: The applied_discounts of this OrderReturnLineItem.
        :type applied_discounts: List[OrderLineItemAppliedDiscount]
        """

        self._applied_discounts = applied_discounts

    @property
    def applied_taxes(self):
        """Gets the applied_taxes of this OrderReturnLineItem.

        The list of references to `OrderReturnTax` entities applied to the return line item. Each `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level `OrderReturnTax` applied to the return line item. On reads, the applied amount is populated.

        :return: The applied_taxes of this OrderReturnLineItem.
        :rtype: List[OrderLineItemAppliedTax]
        """
        return self._applied_taxes

    @applied_taxes.setter
    def applied_taxes(self, applied_taxes):
        """Sets the applied_taxes of this OrderReturnLineItem.

        The list of references to `OrderReturnTax` entities applied to the return line item. Each `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level `OrderReturnTax` applied to the return line item. On reads, the applied amount is populated.

        :param applied_taxes: The applied_taxes of this OrderReturnLineItem.
        :type applied_taxes: List[OrderLineItemAppliedTax]
        """

        self._applied_taxes = applied_taxes

    @property
    def base_price_money(self):
        """Gets the base_price_money of this OrderReturnLineItem.


        :return: The base_price_money of this OrderReturnLineItem.
        :rtype: Money
        """
        return self._base_price_money

    @base_price_money.setter
    def base_price_money(self, base_price_money):
        """Sets the base_price_money of this OrderReturnLineItem.


        :param base_price_money: The base_price_money of this OrderReturnLineItem.
        :type base_price_money: Money
        """

        self._base_price_money = base_price_money

    @property
    def catalog_object_id(self):
        """Gets the catalog_object_id of this OrderReturnLineItem.

        The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this return line item.

        :return: The catalog_object_id of this OrderReturnLineItem.
        :rtype: str
        """
        return self._catalog_object_id

    @catalog_object_id.setter
    def catalog_object_id(self, catalog_object_id):
        """Sets the catalog_object_id of this OrderReturnLineItem.

        The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this return line item.

        :param catalog_object_id: The catalog_object_id of this OrderReturnLineItem.
        :type catalog_object_id: str
        """
        if catalog_object_id is not None and len(catalog_object_id) > 192:
            raise ValueError("Invalid value for `catalog_object_id`, length must be less than or equal to `192`")

        self._catalog_object_id = catalog_object_id

    @property
    def catalog_version(self):
        """Gets the catalog_version of this OrderReturnLineItem.

        The version of the catalog object that this line item references.

        :return: The catalog_version of this OrderReturnLineItem.
        :rtype: int
        """
        return self._catalog_version

    @catalog_version.setter
    def catalog_version(self, catalog_version):
        """Sets the catalog_version of this OrderReturnLineItem.

        The version of the catalog object that this line item references.

        :param catalog_version: The catalog_version of this OrderReturnLineItem.
        :type catalog_version: int
        """

        self._catalog_version = catalog_version

    @property
    def gross_return_money(self):
        """Gets the gross_return_money of this OrderReturnLineItem.


        :return: The gross_return_money of this OrderReturnLineItem.
        :rtype: Money
        """
        return self._gross_return_money

    @gross_return_money.setter
    def gross_return_money(self, gross_return_money):
        """Sets the gross_return_money of this OrderReturnLineItem.


        :param gross_return_money: The gross_return_money of this OrderReturnLineItem.
        :type gross_return_money: Money
        """

        self._gross_return_money = gross_return_money

    @property
    def item_type(self):
        """Gets the item_type of this OrderReturnLineItem.

        The type of line item: an itemized return, a non-itemized return (custom amount), or the return of an unactivated gift card sale.

        :return: The item_type of this OrderReturnLineItem.
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this OrderReturnLineItem.

        The type of line item: an itemized return, a non-itemized return (custom amount), or the return of an unactivated gift card sale.

        :param item_type: The item_type of this OrderReturnLineItem.
        :type item_type: str
        """

        self._item_type = item_type

    @property
    def name(self):
        """Gets the name of this OrderReturnLineItem.

        The name of the line item.

        :return: The name of this OrderReturnLineItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderReturnLineItem.

        The name of the line item.

        :param name: The name of this OrderReturnLineItem.
        :type name: str
        """
        if name is not None and len(name) > 512:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `512`")

        self._name = name

    @property
    def note(self):
        """Gets the note of this OrderReturnLineItem.

        The note of the return line item.

        :return: The note of this OrderReturnLineItem.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this OrderReturnLineItem.

        The note of the return line item.

        :param note: The note of this OrderReturnLineItem.
        :type note: str
        """
        if note is not None and len(note) > 2000:
            raise ValueError("Invalid value for `note`, length must be less than or equal to `2000`")

        self._note = note

    @property
    def quantity(self):
        """Gets the quantity of this OrderReturnLineItem.

        The quantity returned, formatted as a decimal number. For example, `\"3\"`.  Line items with a `quantity_unit` can have non-integer quantities. For example, `\"1.70000\"`.

        :return: The quantity of this OrderReturnLineItem.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderReturnLineItem.

        The quantity returned, formatted as a decimal number. For example, `\"3\"`.  Line items with a `quantity_unit` can have non-integer quantities. For example, `\"1.70000\"`.

        :param quantity: The quantity of this OrderReturnLineItem.
        :type quantity: str
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")
        if quantity is not None and len(quantity) > 12:
            raise ValueError("Invalid value for `quantity`, length must be less than or equal to `12`")
        if quantity is not None and len(quantity) < 1:
            raise ValueError("Invalid value for `quantity`, length must be greater than or equal to `1`")

        self._quantity = quantity

    @property
    def quantity_unit(self):
        """Gets the quantity_unit of this OrderReturnLineItem.


        :return: The quantity_unit of this OrderReturnLineItem.
        :rtype: OrderQuantityUnit
        """
        return self._quantity_unit

    @quantity_unit.setter
    def quantity_unit(self, quantity_unit):
        """Sets the quantity_unit of this OrderReturnLineItem.


        :param quantity_unit: The quantity_unit of this OrderReturnLineItem.
        :type quantity_unit: OrderQuantityUnit
        """

        self._quantity_unit = quantity_unit

    @property
    def return_modifiers(self):
        """Gets the return_modifiers of this OrderReturnLineItem.

        The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item.

        :return: The return_modifiers of this OrderReturnLineItem.
        :rtype: List[OrderReturnLineItemModifier]
        """
        return self._return_modifiers

    @return_modifiers.setter
    def return_modifiers(self, return_modifiers):
        """Sets the return_modifiers of this OrderReturnLineItem.

        The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item.

        :param return_modifiers: The return_modifiers of this OrderReturnLineItem.
        :type return_modifiers: List[OrderReturnLineItemModifier]
        """

        self._return_modifiers = return_modifiers

    @property
    def source_line_item_uid(self):
        """Gets the source_line_item_uid of this OrderReturnLineItem.

        The `uid` of the line item in the original sale order.

        :return: The source_line_item_uid of this OrderReturnLineItem.
        :rtype: str
        """
        return self._source_line_item_uid

    @source_line_item_uid.setter
    def source_line_item_uid(self, source_line_item_uid):
        """Sets the source_line_item_uid of this OrderReturnLineItem.

        The `uid` of the line item in the original sale order.

        :param source_line_item_uid: The source_line_item_uid of this OrderReturnLineItem.
        :type source_line_item_uid: str
        """
        if source_line_item_uid is not None and len(source_line_item_uid) > 60:
            raise ValueError("Invalid value for `source_line_item_uid`, length must be less than or equal to `60`")

        self._source_line_item_uid = source_line_item_uid

    @property
    def total_discount_money(self):
        """Gets the total_discount_money of this OrderReturnLineItem.


        :return: The total_discount_money of this OrderReturnLineItem.
        :rtype: Money
        """
        return self._total_discount_money

    @total_discount_money.setter
    def total_discount_money(self, total_discount_money):
        """Sets the total_discount_money of this OrderReturnLineItem.


        :param total_discount_money: The total_discount_money of this OrderReturnLineItem.
        :type total_discount_money: Money
        """

        self._total_discount_money = total_discount_money

    @property
    def total_money(self):
        """Gets the total_money of this OrderReturnLineItem.


        :return: The total_money of this OrderReturnLineItem.
        :rtype: Money
        """
        return self._total_money

    @total_money.setter
    def total_money(self, total_money):
        """Sets the total_money of this OrderReturnLineItem.


        :param total_money: The total_money of this OrderReturnLineItem.
        :type total_money: Money
        """

        self._total_money = total_money

    @property
    def total_tax_money(self):
        """Gets the total_tax_money of this OrderReturnLineItem.


        :return: The total_tax_money of this OrderReturnLineItem.
        :rtype: Money
        """
        return self._total_tax_money

    @total_tax_money.setter
    def total_tax_money(self, total_tax_money):
        """Sets the total_tax_money of this OrderReturnLineItem.


        :param total_tax_money: The total_tax_money of this OrderReturnLineItem.
        :type total_tax_money: Money
        """

        self._total_tax_money = total_tax_money

    @property
    def uid(self):
        """Gets the uid of this OrderReturnLineItem.

        A unique ID for this return line-item entry.

        :return: The uid of this OrderReturnLineItem.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OrderReturnLineItem.

        A unique ID for this return line-item entry.

        :param uid: The uid of this OrderReturnLineItem.
        :type uid: str
        """
        if uid is not None and len(uid) > 60:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `60`")

        self._uid = uid

    @property
    def variation_name(self):
        """Gets the variation_name of this OrderReturnLineItem.

        The name of the variation applied to this return line item.

        :return: The variation_name of this OrderReturnLineItem.
        :rtype: str
        """
        return self._variation_name

    @variation_name.setter
    def variation_name(self, variation_name):
        """Sets the variation_name of this OrderReturnLineItem.

        The name of the variation applied to this return line item.

        :param variation_name: The variation_name of this OrderReturnLineItem.
        :type variation_name: str
        """
        if variation_name is not None and len(variation_name) > 255:
            raise ValueError("Invalid value for `variation_name`, length must be less than or equal to `255`")

        self._variation_name = variation_name

    @property
    def variation_total_price_money(self):
        """Gets the variation_total_price_money of this OrderReturnLineItem.


        :return: The variation_total_price_money of this OrderReturnLineItem.
        :rtype: Money
        """
        return self._variation_total_price_money

    @variation_total_price_money.setter
    def variation_total_price_money(self, variation_total_price_money):
        """Sets the variation_total_price_money of this OrderReturnLineItem.


        :param variation_total_price_money: The variation_total_price_money of this OrderReturnLineItem.
        :type variation_total_price_money: Money
        """

        self._variation_total_price_money = variation_total_price_money
