# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.disputed_payment import DisputedPayment
from openapi_server.models.money import Money
from openapi_server import util


class Dispute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_money: Money=None, brand_dispute_id: str=None, card_brand: str=None, created_at: str=None, dispute_id: str=None, disputed_payment: DisputedPayment=None, due_at: str=None, evidence_ids: List[str]=None, id: str=None, location_id: str=None, reason: str=None, reported_at: str=None, reported_date: str=None, state: str=None, updated_at: str=None, version: int=None):
        """Dispute - a model defined in OpenAPI

        :param amount_money: The amount_money of this Dispute.
        :param brand_dispute_id: The brand_dispute_id of this Dispute.
        :param card_brand: The card_brand of this Dispute.
        :param created_at: The created_at of this Dispute.
        :param dispute_id: The dispute_id of this Dispute.
        :param disputed_payment: The disputed_payment of this Dispute.
        :param due_at: The due_at of this Dispute.
        :param evidence_ids: The evidence_ids of this Dispute.
        :param id: The id of this Dispute.
        :param location_id: The location_id of this Dispute.
        :param reason: The reason of this Dispute.
        :param reported_at: The reported_at of this Dispute.
        :param reported_date: The reported_date of this Dispute.
        :param state: The state of this Dispute.
        :param updated_at: The updated_at of this Dispute.
        :param version: The version of this Dispute.
        """
        self.openapi_types = {
            'amount_money': Money,
            'brand_dispute_id': str,
            'card_brand': str,
            'created_at': str,
            'dispute_id': str,
            'disputed_payment': DisputedPayment,
            'due_at': str,
            'evidence_ids': List[str],
            'id': str,
            'location_id': str,
            'reason': str,
            'reported_at': str,
            'reported_date': str,
            'state': str,
            'updated_at': str,
            'version': int
        }

        self.attribute_map = {
            'amount_money': 'amount_money',
            'brand_dispute_id': 'brand_dispute_id',
            'card_brand': 'card_brand',
            'created_at': 'created_at',
            'dispute_id': 'dispute_id',
            'disputed_payment': 'disputed_payment',
            'due_at': 'due_at',
            'evidence_ids': 'evidence_ids',
            'id': 'id',
            'location_id': 'location_id',
            'reason': 'reason',
            'reported_at': 'reported_at',
            'reported_date': 'reported_date',
            'state': 'state',
            'updated_at': 'updated_at',
            'version': 'version'
        }

        self._amount_money = amount_money
        self._brand_dispute_id = brand_dispute_id
        self._card_brand = card_brand
        self._created_at = created_at
        self._dispute_id = dispute_id
        self._disputed_payment = disputed_payment
        self._due_at = due_at
        self._evidence_ids = evidence_ids
        self._id = id
        self._location_id = location_id
        self._reason = reason
        self._reported_at = reported_at
        self._reported_date = reported_date
        self._state = state
        self._updated_at = updated_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dispute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dispute of this Dispute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_money(self):
        """Gets the amount_money of this Dispute.


        :return: The amount_money of this Dispute.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """Sets the amount_money of this Dispute.


        :param amount_money: The amount_money of this Dispute.
        :type amount_money: Money
        """

        self._amount_money = amount_money

    @property
    def brand_dispute_id(self):
        """Gets the brand_dispute_id of this Dispute.

        The ID of the dispute in the card brand system, generated by the card brand.

        :return: The brand_dispute_id of this Dispute.
        :rtype: str
        """
        return self._brand_dispute_id

    @brand_dispute_id.setter
    def brand_dispute_id(self, brand_dispute_id):
        """Sets the brand_dispute_id of this Dispute.

        The ID of the dispute in the card brand system, generated by the card brand.

        :param brand_dispute_id: The brand_dispute_id of this Dispute.
        :type brand_dispute_id: str
        """
        if brand_dispute_id is not None and len(brand_dispute_id) > 40:
            raise ValueError("Invalid value for `brand_dispute_id`, length must be less than or equal to `40`")
        if brand_dispute_id is not None and len(brand_dispute_id) < 1:
            raise ValueError("Invalid value for `brand_dispute_id`, length must be greater than or equal to `1`")

        self._brand_dispute_id = brand_dispute_id

    @property
    def card_brand(self):
        """Gets the card_brand of this Dispute.

        The card brand used in the disputed payment.

        :return: The card_brand of this Dispute.
        :rtype: str
        """
        return self._card_brand

    @card_brand.setter
    def card_brand(self, card_brand):
        """Sets the card_brand of this Dispute.

        The card brand used in the disputed payment.

        :param card_brand: The card_brand of this Dispute.
        :type card_brand: str
        """

        self._card_brand = card_brand

    @property
    def created_at(self):
        """Gets the created_at of this Dispute.

        The timestamp when the dispute was created, in RFC 3339 format.

        :return: The created_at of this Dispute.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Dispute.

        The timestamp when the dispute was created, in RFC 3339 format.

        :param created_at: The created_at of this Dispute.
        :type created_at: str
        """
        if created_at is not None and len(created_at) > 40:
            raise ValueError("Invalid value for `created_at`, length must be less than or equal to `40`")
        if created_at is not None and len(created_at) < 1:
            raise ValueError("Invalid value for `created_at`, length must be greater than or equal to `1`")

        self._created_at = created_at

    @property
    def dispute_id(self):
        """Gets the dispute_id of this Dispute.

        The unique ID for this `Dispute`, generated by Square.

        :return: The dispute_id of this Dispute.
        :rtype: str
        """
        return self._dispute_id

    @dispute_id.setter
    def dispute_id(self, dispute_id):
        """Sets the dispute_id of this Dispute.

        The unique ID for this `Dispute`, generated by Square.

        :param dispute_id: The dispute_id of this Dispute.
        :type dispute_id: str
        """
        if dispute_id is not None and len(dispute_id) > 40:
            raise ValueError("Invalid value for `dispute_id`, length must be less than or equal to `40`")
        if dispute_id is not None and len(dispute_id) < 1:
            raise ValueError("Invalid value for `dispute_id`, length must be greater than or equal to `1`")

        self._dispute_id = dispute_id

    @property
    def disputed_payment(self):
        """Gets the disputed_payment of this Dispute.


        :return: The disputed_payment of this Dispute.
        :rtype: DisputedPayment
        """
        return self._disputed_payment

    @disputed_payment.setter
    def disputed_payment(self, disputed_payment):
        """Sets the disputed_payment of this Dispute.


        :param disputed_payment: The disputed_payment of this Dispute.
        :type disputed_payment: DisputedPayment
        """

        self._disputed_payment = disputed_payment

    @property
    def due_at(self):
        """Gets the due_at of this Dispute.

        The time when the next action is due, in RFC 3339 format.

        :return: The due_at of this Dispute.
        :rtype: str
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this Dispute.

        The time when the next action is due, in RFC 3339 format.

        :param due_at: The due_at of this Dispute.
        :type due_at: str
        """
        if due_at is not None and len(due_at) > 40:
            raise ValueError("Invalid value for `due_at`, length must be less than or equal to `40`")
        if due_at is not None and len(due_at) < 1:
            raise ValueError("Invalid value for `due_at`, length must be greater than or equal to `1`")

        self._due_at = due_at

    @property
    def evidence_ids(self):
        """Gets the evidence_ids of this Dispute.

        The IDs of the evidence associated with the dispute.

        :return: The evidence_ids of this Dispute.
        :rtype: List[str]
        """
        return self._evidence_ids

    @evidence_ids.setter
    def evidence_ids(self, evidence_ids):
        """Sets the evidence_ids of this Dispute.

        The IDs of the evidence associated with the dispute.

        :param evidence_ids: The evidence_ids of this Dispute.
        :type evidence_ids: List[str]
        """

        self._evidence_ids = evidence_ids

    @property
    def id(self):
        """Gets the id of this Dispute.

        The unique ID for this `Dispute`, generated by Square.

        :return: The id of this Dispute.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dispute.

        The unique ID for this `Dispute`, generated by Square.

        :param id: The id of this Dispute.
        :type id: str
        """
        if id is not None and len(id) > 40:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `40`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this Dispute.

        The ID of the location where the dispute originated.

        :return: The location_id of this Dispute.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Dispute.

        The ID of the location where the dispute originated.

        :param location_id: The location_id of this Dispute.
        :type location_id: str
        """
        if location_id is not None and len(location_id) > 40:
            raise ValueError("Invalid value for `location_id`, length must be less than or equal to `40`")
        if location_id is not None and len(location_id) < 1:
            raise ValueError("Invalid value for `location_id`, length must be greater than or equal to `1`")

        self._location_id = location_id

    @property
    def reason(self):
        """Gets the reason of this Dispute.

        The dispute reason why the cardholder initiated the dispute with their bank.

        :return: The reason of this Dispute.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Dispute.

        The dispute reason why the cardholder initiated the dispute with their bank.

        :param reason: The reason of this Dispute.
        :type reason: str
        """

        self._reason = reason

    @property
    def reported_at(self):
        """Gets the reported_at of this Dispute.

        The timestamp when the dispute was reported, in RFC 3339 format.

        :return: The reported_at of this Dispute.
        :rtype: str
        """
        return self._reported_at

    @reported_at.setter
    def reported_at(self, reported_at):
        """Sets the reported_at of this Dispute.

        The timestamp when the dispute was reported, in RFC 3339 format.

        :param reported_at: The reported_at of this Dispute.
        :type reported_at: str
        """
        if reported_at is not None and len(reported_at) > 40:
            raise ValueError("Invalid value for `reported_at`, length must be less than or equal to `40`")
        if reported_at is not None and len(reported_at) < 1:
            raise ValueError("Invalid value for `reported_at`, length must be greater than or equal to `1`")

        self._reported_at = reported_at

    @property
    def reported_date(self):
        """Gets the reported_date of this Dispute.

        The timestamp when the dispute was reported, in RFC 3339 format.

        :return: The reported_date of this Dispute.
        :rtype: str
        """
        return self._reported_date

    @reported_date.setter
    def reported_date(self, reported_date):
        """Sets the reported_date of this Dispute.

        The timestamp when the dispute was reported, in RFC 3339 format.

        :param reported_date: The reported_date of this Dispute.
        :type reported_date: str
        """
        if reported_date is not None and len(reported_date) > 40:
            raise ValueError("Invalid value for `reported_date`, length must be less than or equal to `40`")
        if reported_date is not None and len(reported_date) < 1:
            raise ValueError("Invalid value for `reported_date`, length must be greater than or equal to `1`")

        self._reported_date = reported_date

    @property
    def state(self):
        """Gets the state of this Dispute.

        The current state of this dispute.

        :return: The state of this Dispute.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Dispute.

        The current state of this dispute.

        :param state: The state of this Dispute.
        :type state: str
        """

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this Dispute.

        The timestamp when the dispute was last updated, in RFC 3339 format.

        :return: The updated_at of this Dispute.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Dispute.

        The timestamp when the dispute was last updated, in RFC 3339 format.

        :param updated_at: The updated_at of this Dispute.
        :type updated_at: str
        """
        if updated_at is not None and len(updated_at) > 40:
            raise ValueError("Invalid value for `updated_at`, length must be less than or equal to `40`")
        if updated_at is not None and len(updated_at) < 1:
            raise ValueError("Invalid value for `updated_at`, length must be greater than or equal to `1`")

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this Dispute.

        The current version of the `Dispute`.

        :return: The version of this Dispute.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Dispute.

        The current version of the `Dispute`.

        :param version: The version of this Dispute.
        :type version: int
        """

        self._version = version
