# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util


class OrderFulfillmentRecipient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, customer_id: str=None, display_name: str=None, email_address: str=None, phone_number: str=None):
        """OrderFulfillmentRecipient - a model defined in OpenAPI

        :param address: The address of this OrderFulfillmentRecipient.
        :param customer_id: The customer_id of this OrderFulfillmentRecipient.
        :param display_name: The display_name of this OrderFulfillmentRecipient.
        :param email_address: The email_address of this OrderFulfillmentRecipient.
        :param phone_number: The phone_number of this OrderFulfillmentRecipient.
        """
        self.openapi_types = {
            'address': Address,
            'customer_id': str,
            'display_name': str,
            'email_address': str,
            'phone_number': str
        }

        self.attribute_map = {
            'address': 'address',
            'customer_id': 'customer_id',
            'display_name': 'display_name',
            'email_address': 'email_address',
            'phone_number': 'phone_number'
        }

        self._address = address
        self._customer_id = customer_id
        self._display_name = display_name
        self._email_address = email_address
        self._phone_number = phone_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderFulfillmentRecipient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderFulfillmentRecipient of this OrderFulfillmentRecipient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this OrderFulfillmentRecipient.


        :return: The address of this OrderFulfillmentRecipient.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this OrderFulfillmentRecipient.


        :param address: The address of this OrderFulfillmentRecipient.
        :type address: Address
        """

        self._address = address

    @property
    def customer_id(self):
        """Gets the customer_id of this OrderFulfillmentRecipient.

        The customer ID of the customer associated with the fulfillment.  If `customer_id` is provided, the fulfillment recipient's `display_name`, `email_address`, and `phone_number` are automatically populated from the targeted customer profile. If these fields are set in the request, the request values overrides the information from the customer profile. If the targeted customer profile does not contain the necessary information and these fields are left unset, the request results in an error.

        :return: The customer_id of this OrderFulfillmentRecipient.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this OrderFulfillmentRecipient.

        The customer ID of the customer associated with the fulfillment.  If `customer_id` is provided, the fulfillment recipient's `display_name`, `email_address`, and `phone_number` are automatically populated from the targeted customer profile. If these fields are set in the request, the request values overrides the information from the customer profile. If the targeted customer profile does not contain the necessary information and these fields are left unset, the request results in an error.

        :param customer_id: The customer_id of this OrderFulfillmentRecipient.
        :type customer_id: str
        """
        if customer_id is not None and len(customer_id) > 191:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `191`")

        self._customer_id = customer_id

    @property
    def display_name(self):
        """Gets the display_name of this OrderFulfillmentRecipient.

        The display name of the fulfillment recipient.  If provided, the display name overrides the value pulled from the customer profile indicated by `customer_id`.

        :return: The display_name of this OrderFulfillmentRecipient.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this OrderFulfillmentRecipient.

        The display name of the fulfillment recipient.  If provided, the display name overrides the value pulled from the customer profile indicated by `customer_id`.

        :param display_name: The display_name of this OrderFulfillmentRecipient.
        :type display_name: str
        """
        if display_name is not None and len(display_name) > 255:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")

        self._display_name = display_name

    @property
    def email_address(self):
        """Gets the email_address of this OrderFulfillmentRecipient.

        The email address of the fulfillment recipient.  If provided, the email address overrides the value pulled from the customer profile indicated by `customer_id`.

        :return: The email_address of this OrderFulfillmentRecipient.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this OrderFulfillmentRecipient.

        The email address of the fulfillment recipient.  If provided, the email address overrides the value pulled from the customer profile indicated by `customer_id`.

        :param email_address: The email_address of this OrderFulfillmentRecipient.
        :type email_address: str
        """
        if email_address is not None and len(email_address) > 255:
            raise ValueError("Invalid value for `email_address`, length must be less than or equal to `255`")

        self._email_address = email_address

    @property
    def phone_number(self):
        """Gets the phone_number of this OrderFulfillmentRecipient.

        The phone number of the fulfillment recipient.  If provided, the phone number overrides the value pulled from the customer profile indicated by `customer_id`.

        :return: The phone_number of this OrderFulfillmentRecipient.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this OrderFulfillmentRecipient.

        The phone number of the fulfillment recipient.  If provided, the phone number overrides the value pulled from the customer profile indicated by `customer_id`.

        :param phone_number: The phone_number of this OrderFulfillmentRecipient.
        :type phone_number: str
        """
        if phone_number is not None and len(phone_number) > 17:
            raise ValueError("Invalid value for `phone_number`, length must be less than or equal to `17`")

        self._phone_number = phone_number
