# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RetrieveGiftCardFromGANRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gan: str=None):
        """RetrieveGiftCardFromGANRequest - a model defined in OpenAPI

        :param gan: The gan of this RetrieveGiftCardFromGANRequest.
        """
        self.openapi_types = {
            'gan': str
        }

        self.attribute_map = {
            'gan': 'gan'
        }

        self._gan = gan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetrieveGiftCardFromGANRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetrieveGiftCardFromGANRequest of this RetrieveGiftCardFromGANRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gan(self):
        """Gets the gan of this RetrieveGiftCardFromGANRequest.

        The gift card account number (GAN) of the gift card to retrieve. The maximum length of a GAN is 255 digits to account for third-party GANs that have been imported. Square-issued gift cards have 16-digit GANs.

        :return: The gan of this RetrieveGiftCardFromGANRequest.
        :rtype: str
        """
        return self._gan

    @gan.setter
    def gan(self, gan):
        """Sets the gan of this RetrieveGiftCardFromGANRequest.

        The gift card account number (GAN) of the gift card to retrieve. The maximum length of a GAN is 255 digits to account for third-party GANs that have been imported. Square-issued gift cards have 16-digit GANs.

        :param gan: The gan of this RetrieveGiftCardFromGANRequest.
        :type gan: str
        """
        if gan is None:
            raise ValueError("Invalid value for `gan`, must not be `None`")
        if gan is not None and len(gan) > 255:
            raise ValueError("Invalid value for `gan`, length must be less than or equal to `255`")
        if gan is not None and len(gan) < 1:
            raise ValueError("Invalid value for `gan`, length must be greater than or equal to `1`")

        self._gan = gan
