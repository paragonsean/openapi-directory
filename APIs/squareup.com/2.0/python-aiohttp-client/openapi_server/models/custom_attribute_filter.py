# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.range import Range
from openapi_server import util


class CustomAttributeFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bool_filter: bool=None, custom_attribute_definition_id: str=None, key: str=None, number_filter: Range=None, selection_uids_filter: List[str]=None, string_filter: str=None):
        """CustomAttributeFilter - a model defined in OpenAPI

        :param bool_filter: The bool_filter of this CustomAttributeFilter.
        :param custom_attribute_definition_id: The custom_attribute_definition_id of this CustomAttributeFilter.
        :param key: The key of this CustomAttributeFilter.
        :param number_filter: The number_filter of this CustomAttributeFilter.
        :param selection_uids_filter: The selection_uids_filter of this CustomAttributeFilter.
        :param string_filter: The string_filter of this CustomAttributeFilter.
        """
        self.openapi_types = {
            'bool_filter': bool,
            'custom_attribute_definition_id': str,
            'key': str,
            'number_filter': Range,
            'selection_uids_filter': List[str],
            'string_filter': str
        }

        self.attribute_map = {
            'bool_filter': 'bool_filter',
            'custom_attribute_definition_id': 'custom_attribute_definition_id',
            'key': 'key',
            'number_filter': 'number_filter',
            'selection_uids_filter': 'selection_uids_filter',
            'string_filter': 'string_filter'
        }

        self._bool_filter = bool_filter
        self._custom_attribute_definition_id = custom_attribute_definition_id
        self._key = key
        self._number_filter = number_filter
        self._selection_uids_filter = selection_uids_filter
        self._string_filter = string_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomAttributeFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomAttributeFilter of this CustomAttributeFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bool_filter(self):
        """Gets the bool_filter of this CustomAttributeFilter.

        A query expression to filter items or item variations by matching their custom attributes' `boolean_value` property values against the specified Boolean expression.

        :return: The bool_filter of this CustomAttributeFilter.
        :rtype: bool
        """
        return self._bool_filter

    @bool_filter.setter
    def bool_filter(self, bool_filter):
        """Sets the bool_filter of this CustomAttributeFilter.

        A query expression to filter items or item variations by matching their custom attributes' `boolean_value` property values against the specified Boolean expression.

        :param bool_filter: The bool_filter of this CustomAttributeFilter.
        :type bool_filter: bool
        """

        self._bool_filter = bool_filter

    @property
    def custom_attribute_definition_id(self):
        """Gets the custom_attribute_definition_id of this CustomAttributeFilter.

        A query expression to filter items or item variations by matching their custom attributes' `custom_attribute_definition_id` property value against the the specified id.

        :return: The custom_attribute_definition_id of this CustomAttributeFilter.
        :rtype: str
        """
        return self._custom_attribute_definition_id

    @custom_attribute_definition_id.setter
    def custom_attribute_definition_id(self, custom_attribute_definition_id):
        """Sets the custom_attribute_definition_id of this CustomAttributeFilter.

        A query expression to filter items or item variations by matching their custom attributes' `custom_attribute_definition_id` property value against the the specified id.

        :param custom_attribute_definition_id: The custom_attribute_definition_id of this CustomAttributeFilter.
        :type custom_attribute_definition_id: str
        """

        self._custom_attribute_definition_id = custom_attribute_definition_id

    @property
    def key(self):
        """Gets the key of this CustomAttributeFilter.

        A query expression to filter items or item variations by matching their custom attributes' `key` property value against the specified key.

        :return: The key of this CustomAttributeFilter.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CustomAttributeFilter.

        A query expression to filter items or item variations by matching their custom attributes' `key` property value against the specified key.

        :param key: The key of this CustomAttributeFilter.
        :type key: str
        """

        self._key = key

    @property
    def number_filter(self):
        """Gets the number_filter of this CustomAttributeFilter.


        :return: The number_filter of this CustomAttributeFilter.
        :rtype: Range
        """
        return self._number_filter

    @number_filter.setter
    def number_filter(self, number_filter):
        """Sets the number_filter of this CustomAttributeFilter.


        :param number_filter: The number_filter of this CustomAttributeFilter.
        :type number_filter: Range
        """

        self._number_filter = number_filter

    @property
    def selection_uids_filter(self):
        """Gets the selection_uids_filter of this CustomAttributeFilter.

        A query expression to filter items or item variations by matching  their custom attributes' `selection_uid_values` values against the specified selection uids.

        :return: The selection_uids_filter of this CustomAttributeFilter.
        :rtype: List[str]
        """
        return self._selection_uids_filter

    @selection_uids_filter.setter
    def selection_uids_filter(self, selection_uids_filter):
        """Sets the selection_uids_filter of this CustomAttributeFilter.

        A query expression to filter items or item variations by matching  their custom attributes' `selection_uid_values` values against the specified selection uids.

        :param selection_uids_filter: The selection_uids_filter of this CustomAttributeFilter.
        :type selection_uids_filter: List[str]
        """

        self._selection_uids_filter = selection_uids_filter

    @property
    def string_filter(self):
        """Gets the string_filter of this CustomAttributeFilter.

        A query expression to filter items or item variations by matching their custom attributes' `string_value`  property value against the specified text.

        :return: The string_filter of this CustomAttributeFilter.
        :rtype: str
        """
        return self._string_filter

    @string_filter.setter
    def string_filter(self, string_filter):
        """Sets the string_filter of this CustomAttributeFilter.

        A query expression to filter items or item variations by matching their custom attributes' `string_value`  property value against the specified text.

        :param string_filter: The string_filter of this CustomAttributeFilter.
        :type string_filter: str
        """

        self._string_filter = string_filter
