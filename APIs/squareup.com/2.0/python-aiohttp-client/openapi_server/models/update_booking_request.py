# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.booking import Booking
from openapi_server import util


class UpdateBookingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, booking: Booking=None, idempotency_key: str=None):
        """UpdateBookingRequest - a model defined in OpenAPI

        :param booking: The booking of this UpdateBookingRequest.
        :param idempotency_key: The idempotency_key of this UpdateBookingRequest.
        """
        self.openapi_types = {
            'booking': Booking,
            'idempotency_key': str
        }

        self.attribute_map = {
            'booking': 'booking',
            'idempotency_key': 'idempotency_key'
        }

        self._booking = booking
        self._idempotency_key = idempotency_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateBookingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateBookingRequest of this UpdateBookingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def booking(self):
        """Gets the booking of this UpdateBookingRequest.


        :return: The booking of this UpdateBookingRequest.
        :rtype: Booking
        """
        return self._booking

    @booking.setter
    def booking(self, booking):
        """Sets the booking of this UpdateBookingRequest.


        :param booking: The booking of this UpdateBookingRequest.
        :type booking: Booking
        """
        if booking is None:
            raise ValueError("Invalid value for `booking`, must not be `None`")

        self._booking = booking

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this UpdateBookingRequest.

        A unique key to make this request an idempotent operation.

        :return: The idempotency_key of this UpdateBookingRequest.
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this UpdateBookingRequest.

        A unique key to make this request an idempotent operation.

        :param idempotency_key: The idempotency_key of this UpdateBookingRequest.
        :type idempotency_key: str
        """
        if idempotency_key is not None and len(idempotency_key) > 255:
            raise ValueError("Invalid value for `idempotency_key`, length must be less than or equal to `255`")

        self._idempotency_key = idempotency_key
