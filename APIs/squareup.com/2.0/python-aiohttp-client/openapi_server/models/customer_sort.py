# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerSort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: str=None, order: str=None):
        """CustomerSort - a model defined in OpenAPI

        :param _field: The _field of this CustomerSort.
        :param order: The order of this CustomerSort.
        """
        self.openapi_types = {
            '_field': str,
            'order': str
        }

        self.attribute_map = {
            '_field': 'field',
            'order': 'order'
        }

        self.__field = _field
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerSort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerSort of this CustomerSort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this CustomerSort.

        Use one or more customer attributes as the sort key to sort searched customer profiles.  For example, use the creation date (`created_at`) of customers or default attributes as the sort key.   Default: `DEFAULT`.

        :return: The _field of this CustomerSort.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this CustomerSort.

        Use one or more customer attributes as the sort key to sort searched customer profiles.  For example, use the creation date (`created_at`) of customers or default attributes as the sort key.   Default: `DEFAULT`.

        :param _field: The _field of this CustomerSort.
        :type _field: str
        """

        self.__field = _field

    @property
    def order(self):
        """Gets the order of this CustomerSort.

        Indicates the order in which results should be sorted based on the sort field value. Strings use standard alphabetic comparison to determine order. Strings representing numbers are sorted as strings.  Default: `ASC`.

        :return: The order of this CustomerSort.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CustomerSort.

        Indicates the order in which results should be sorted based on the sort field value. Strings use standard alphabetic comparison to determine order. Strings representing numbers are sorted as strings.  Default: `ASC`.

        :param order: The order of this CustomerSort.
        :type order: str
        """

        self._order = order
