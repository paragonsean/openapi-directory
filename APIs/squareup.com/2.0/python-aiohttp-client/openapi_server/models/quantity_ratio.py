# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QuantityRatio(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quantity: int=None, quantity_denominator: int=None):
        """QuantityRatio - a model defined in OpenAPI

        :param quantity: The quantity of this QuantityRatio.
        :param quantity_denominator: The quantity_denominator of this QuantityRatio.
        """
        self.openapi_types = {
            'quantity': int,
            'quantity_denominator': int
        }

        self.attribute_map = {
            'quantity': 'quantity',
            'quantity_denominator': 'quantity_denominator'
        }

        self._quantity = quantity
        self._quantity_denominator = quantity_denominator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuantityRatio':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuantityRatio of this QuantityRatio.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quantity(self):
        """Gets the quantity of this QuantityRatio.

        The whole or fractional quantity as the numerator.

        :return: The quantity of this QuantityRatio.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this QuantityRatio.

        The whole or fractional quantity as the numerator.

        :param quantity: The quantity of this QuantityRatio.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def quantity_denominator(self):
        """Gets the quantity_denominator of this QuantityRatio.

        The whole or fractional quantity as the denominator.  In the case of fractional quantity this field is the denominator and quantity is the numerator. When unspecified, the value is `1`. For example, when `quantity=3` and `quantity_donominator` is unspecified, the quantity ratio is `3` or `3/1`.

        :return: The quantity_denominator of this QuantityRatio.
        :rtype: int
        """
        return self._quantity_denominator

    @quantity_denominator.setter
    def quantity_denominator(self, quantity_denominator):
        """Sets the quantity_denominator of this QuantityRatio.

        The whole or fractional quantity as the denominator.  In the case of fractional quantity this field is the denominator and quantity is the numerator. When unspecified, the value is `1`. For example, when `quantity=3` and `quantity_donominator` is unspecified, the quantity ratio is `3` or `3/1`.

        :param quantity_denominator: The quantity_denominator of this QuantityRatio.
        :type quantity_denominator: int
        """

        self._quantity_denominator = quantity_denominator
