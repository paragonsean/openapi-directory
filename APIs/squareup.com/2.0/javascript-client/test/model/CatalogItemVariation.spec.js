/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SquareConnectApi);
  }
}(this, function(expect, SquareConnectApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SquareConnectApi.CatalogItemVariation();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CatalogItemVariation', function() {
    it('should create an instance of CatalogItemVariation', function() {
      // uncomment below and update the code to test CatalogItemVariation
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be.a(SquareConnectApi.CatalogItemVariation);
    });

    it('should have the property availableForBooking (base name: "available_for_booking")', function() {
      // uncomment below and update the code to test the property availableForBooking
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property inventoryAlertThreshold (base name: "inventory_alert_threshold")', function() {
      // uncomment below and update the code to test the property inventoryAlertThreshold
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property inventoryAlertType (base name: "inventory_alert_type")', function() {
      // uncomment below and update the code to test the property inventoryAlertType
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property itemId (base name: "item_id")', function() {
      // uncomment below and update the code to test the property itemId
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property itemOptionValues (base name: "item_option_values")', function() {
      // uncomment below and update the code to test the property itemOptionValues
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property locationOverrides (base name: "location_overrides")', function() {
      // uncomment below and update the code to test the property locationOverrides
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property measurementUnitId (base name: "measurement_unit_id")', function() {
      // uncomment below and update the code to test the property measurementUnitId
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property ordinal (base name: "ordinal")', function() {
      // uncomment below and update the code to test the property ordinal
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property priceMoney (base name: "price_money")', function() {
      // uncomment below and update the code to test the property priceMoney
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property pricingType (base name: "pricing_type")', function() {
      // uncomment below and update the code to test the property pricingType
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property serviceDuration (base name: "service_duration")', function() {
      // uncomment below and update the code to test the property serviceDuration
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property sku (base name: "sku")', function() {
      // uncomment below and update the code to test the property sku
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property stockable (base name: "stockable")', function() {
      // uncomment below and update the code to test the property stockable
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property stockableConversion (base name: "stockable_conversion")', function() {
      // uncomment below and update the code to test the property stockableConversion
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property teamMemberIds (base name: "team_member_ids")', function() {
      // uncomment below and update the code to test the property teamMemberIds
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property trackInventory (base name: "track_inventory")', function() {
      // uncomment below and update the code to test the property trackInventory
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property upc (base name: "upc")', function() {
      // uncomment below and update the code to test the property upc
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

    it('should have the property userData (base name: "user_data")', function() {
      // uncomment below and update the code to test the property userData
      //var instance = new SquareConnectApi.CatalogItemVariation();
      //expect(instance).to.be();
    });

  });

}));
