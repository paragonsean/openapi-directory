/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SquareConnectApi);
  }
}(this, function(expect, SquareConnectApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SquareConnectApi.LaborApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LaborApi', function() {
    describe('createBreakType', function() {
      it('should call createBreakType successfully', function(done) {
        //uncomment below and update the code to test createBreakType
        //instance.createBreakType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createShift', function() {
      it('should call createShift successfully', function(done) {
        //uncomment below and update the code to test createShift
        //instance.createShift(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBreakType', function() {
      it('should call deleteBreakType successfully', function(done) {
        //uncomment below and update the code to test deleteBreakType
        //instance.deleteBreakType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteShift', function() {
      it('should call deleteShift successfully', function(done) {
        //uncomment below and update the code to test deleteShift
        //instance.deleteShift(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBreakType', function() {
      it('should call getBreakType successfully', function(done) {
        //uncomment below and update the code to test getBreakType
        //instance.getBreakType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEmployeeWage', function() {
      it('should call getEmployeeWage successfully', function(done) {
        //uncomment below and update the code to test getEmployeeWage
        //instance.getEmployeeWage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getShift', function() {
      it('should call getShift successfully', function(done) {
        //uncomment below and update the code to test getShift
        //instance.getShift(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTeamMemberWage', function() {
      it('should call getTeamMemberWage successfully', function(done) {
        //uncomment below and update the code to test getTeamMemberWage
        //instance.getTeamMemberWage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBreakTypes', function() {
      it('should call listBreakTypes successfully', function(done) {
        //uncomment below and update the code to test listBreakTypes
        //instance.listBreakTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEmployeeWages', function() {
      it('should call listEmployeeWages successfully', function(done) {
        //uncomment below and update the code to test listEmployeeWages
        //instance.listEmployeeWages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTeamMemberWages', function() {
      it('should call listTeamMemberWages successfully', function(done) {
        //uncomment below and update the code to test listTeamMemberWages
        //instance.listTeamMemberWages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWorkweekConfigs', function() {
      it('should call listWorkweekConfigs successfully', function(done) {
        //uncomment below and update the code to test listWorkweekConfigs
        //instance.listWorkweekConfigs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchShifts', function() {
      it('should call searchShifts successfully', function(done) {
        //uncomment below and update the code to test searchShifts
        //instance.searchShifts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBreakType', function() {
      it('should call updateBreakType successfully', function(done) {
        //uncomment below and update the code to test updateBreakType
        //instance.updateBreakType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateShift', function() {
      it('should call updateShift successfully', function(done) {
        //uncomment below and update the code to test updateShift
        //instance.updateShift(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkweekConfig', function() {
      it('should call updateWorkweekConfig successfully', function(done) {
        //uncomment below and update the code to test updateWorkweekConfig
        //instance.updateWorkweekConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
