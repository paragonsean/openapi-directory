/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CaptureTransactionResponse from '../model/CaptureTransactionResponse';
import ChargeRequest from '../model/ChargeRequest';
import ChargeResponse from '../model/ChargeResponse';
import CreateRefundRequest from '../model/CreateRefundRequest';
import CreateRefundResponse from '../model/CreateRefundResponse';
import ListRefundsResponse from '../model/ListRefundsResponse';
import ListTransactionsResponse from '../model/ListTransactionsResponse';
import RetrieveTransactionResponse from '../model/RetrieveTransactionResponse';
import VoidTransactionResponse from '../model/VoidTransactionResponse';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 2.0
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the captureTransaction operation.
     * @callback module:api/TransactionsApi~captureTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CaptureTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CaptureTransaction
     * Captures a transaction that was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture) for more information.
     * @param {String} locationId 
     * @param {String} transactionId 
     * @param {module:api/TransactionsApi~captureTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CaptureTransactionResponse}
     */
    captureTransaction(locationId, transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling captureTransaction");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling captureTransaction");
      }

      let pathParams = {
        'location_id': locationId,
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CaptureTransactionResponse;
      return this.apiClient.callApi(
        '/v2/locations/{location_id}/transactions/{transaction_id}/capture', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the charge operation.
     * @callback module:api/TransactionsApi~chargeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChargeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Charge
     * Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card payment token generated with the Web Payments SDK) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an eCommerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/retrieve-transaction). See the `processing_fee_money` field of each [Tender included](https://developer.squareup.com/reference/square_2021-08-18/objects/Tender) in the transaction.
     * @param {String} locationId The ID of the location to associate the created transaction with.
     * @param {module:model/ChargeRequest} chargeRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/TransactionsApi~chargeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChargeResponse}
     */
    charge(locationId, chargeRequest, callback) {
      let postBody = chargeRequest;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling charge");
      }
      // verify the required parameter 'chargeRequest' is set
      if (chargeRequest === undefined || chargeRequest === null) {
        throw new Error("Missing the required parameter 'chargeRequest' when calling charge");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChargeResponse;
      return this.apiClient.callApi(
        '/v2/locations/{location_id}/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTransactions operation.
     * @callback module:api/TransactionsApi~listTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTransactionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListTransactions
     * Lists transactions for a particular location.  Transactions include payment information from sales and exchanges and refund information from returns and exchanges.  Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50
     * @param {String} locationId The ID of the location to list transactions for.
     * @param {Object} opts Optional parameters
     * @param {String} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {String} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {String} [sortOrder] The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`
     * @param {String} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @param {module:api/TransactionsApi~listTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTransactionsResponse}
     */
    listTransactions(locationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling listTransactions");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
        'begin_time': opts['beginTime'],
        'end_time': opts['endTime'],
        'sort_order': opts['sortOrder'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTransactionsResponse;
      return this.apiClient.callApi(
        '/v2/locations/{location_id}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveTransaction operation.
     * @callback module:api/TransactionsApi~retrieveTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveTransaction
     * Retrieves details for a single transaction.
     * @param {String} locationId The ID of the transaction's associated location.
     * @param {String} transactionId The ID of the transaction to retrieve.
     * @param {module:api/TransactionsApi~retrieveTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveTransactionResponse}
     */
    retrieveTransaction(locationId, transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling retrieveTransaction");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling retrieveTransaction");
      }

      let pathParams = {
        'location_id': locationId,
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveTransactionResponse;
      return this.apiClient.callApi(
        '/v2/locations/{location_id}/transactions/{transaction_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2LocationsLocationIdRefundsGet operation.
     * @callback module:api/TransactionsApi~v2LocationsLocationIdRefundsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRefundsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListRefunds
     * Lists refunds for one of a business's locations.  In addition to full or partial tender refunds processed through Square APIs, refunds may result from itemized returns or exchanges through Square's Point of Sale applications.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50
     * @param {String} locationId The ID of the location to list refunds for.
     * @param {Object} opts Optional parameters
     * @param {String} [beginTime] The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
     * @param {String} [endTime] The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.  Default value: The current time.
     * @param {String} [sortOrder] The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`
     * @param {String} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @param {module:api/TransactionsApi~v2LocationsLocationIdRefundsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRefundsResponse}
     */
    v2LocationsLocationIdRefundsGet(locationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling v2LocationsLocationIdRefundsGet");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
        'begin_time': opts['beginTime'],
        'end_time': opts['endTime'],
        'sort_order': opts['sortOrder'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRefundsResponse;
      return this.apiClient.callApi(
        '/v2/locations/{location_id}/refunds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2LocationsLocationIdTransactionsTransactionIdRefundPost operation.
     * @callback module:api/TransactionsApi~v2LocationsLocationIdTransactionsTransactionIdRefundPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRefundResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateRefund
     * Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.  NOTE: Card-present transactions with Interac credit cards **cannot be refunded using the Connect API**. Interac transactions must refunded in-person (e.g., dipping the card using POS app).
     * @param {String} locationId The ID of the original transaction's associated location.
     * @param {String} transactionId The ID of the original transaction that includes the tender to refund.
     * @param {module:model/CreateRefundRequest} createRefundRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/TransactionsApi~v2LocationsLocationIdTransactionsTransactionIdRefundPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRefundResponse}
     */
    v2LocationsLocationIdTransactionsTransactionIdRefundPost(locationId, transactionId, createRefundRequest, callback) {
      let postBody = createRefundRequest;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling v2LocationsLocationIdTransactionsTransactionIdRefundPost");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling v2LocationsLocationIdTransactionsTransactionIdRefundPost");
      }
      // verify the required parameter 'createRefundRequest' is set
      if (createRefundRequest === undefined || createRefundRequest === null) {
        throw new Error("Missing the required parameter 'createRefundRequest' when calling v2LocationsLocationIdTransactionsTransactionIdRefundPost");
      }

      let pathParams = {
        'location_id': locationId,
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRefundResponse;
      return this.apiClient.callApi(
        '/v2/locations/{location_id}/transactions/{transaction_id}/refund', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the voidTransaction operation.
     * @callback module:api/TransactionsApi~voidTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VoidTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VoidTransaction
     * Cancels a transaction that was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge) endpoint with a `delay_capture` value of `true`.   See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture) for more information.
     * @param {String} locationId 
     * @param {String} transactionId 
     * @param {module:api/TransactionsApi~voidTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VoidTransactionResponse}
     */
    voidTransaction(locationId, transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling voidTransaction");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling voidTransaction");
      }

      let pathParams = {
        'location_id': locationId,
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VoidTransactionResponse;
      return this.apiClient.callApi(
        '/v2/locations/{location_id}/transactions/{transaction_id}/void', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
