/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelPaymentByIdempotencyKeyRequest from '../model/CancelPaymentByIdempotencyKeyRequest';
import CancelPaymentByIdempotencyKeyResponse from '../model/CancelPaymentByIdempotencyKeyResponse';
import CancelPaymentResponse from '../model/CancelPaymentResponse';
import CompletePaymentResponse from '../model/CompletePaymentResponse';
import CreatePaymentRequest from '../model/CreatePaymentRequest';
import CreatePaymentResponse from '../model/CreatePaymentResponse';
import GetPaymentResponse from '../model/GetPaymentResponse';
import ListPaymentsResponse from '../model/ListPaymentsResponse';
import UpdatePaymentRequest from '../model/UpdatePaymentRequest';
import UpdatePaymentResponse from '../model/UpdatePaymentResponse';

/**
* Payments service.
* @module api/PaymentsApi
* @version 2.0
*/
export default class PaymentsApi {

    /**
    * Constructs a new PaymentsApi. 
    * @alias module:api/PaymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelPayment operation.
     * @callback module:api/PaymentsApi~cancelPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelPaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CancelPayment
     * Cancels (voids) a payment. You can use this endpoint to cancel a payment with  the APPROVED `status`.
     * @param {String} paymentId The ID of the payment to cancel.
     * @param {module:api/PaymentsApi~cancelPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelPaymentResponse}
     */
    cancelPayment(paymentId, callback) {
      let postBody = null;
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling cancelPayment");
      }

      let pathParams = {
        'payment_id': paymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CancelPaymentResponse;
      return this.apiClient.callApi(
        '/v2/payments/{payment_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelPaymentByIdempotencyKey operation.
     * @callback module:api/PaymentsApi~cancelPaymentByIdempotencyKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelPaymentByIdempotencyKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CancelPaymentByIdempotencyKey
     * Cancels (voids) a payment identified by the idempotency key that is specified in the request.  Use this method when the status of a `CreatePayment` request is unknown (for example, after you send a `CreatePayment` request, a network error occurs and you do not get a response). In this case, you can direct Square to cancel the payment using this endpoint. In the request, you provide the same idempotency key that you provided in your `CreatePayment` request that you want to cancel. After canceling the payment, you can submit your `CreatePayment` request again.  Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint returns successfully.
     * @param {module:model/CancelPaymentByIdempotencyKeyRequest} cancelPaymentByIdempotencyKeyRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/PaymentsApi~cancelPaymentByIdempotencyKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelPaymentByIdempotencyKeyResponse}
     */
    cancelPaymentByIdempotencyKey(cancelPaymentByIdempotencyKeyRequest, callback) {
      let postBody = cancelPaymentByIdempotencyKeyRequest;
      // verify the required parameter 'cancelPaymentByIdempotencyKeyRequest' is set
      if (cancelPaymentByIdempotencyKeyRequest === undefined || cancelPaymentByIdempotencyKeyRequest === null) {
        throw new Error("Missing the required parameter 'cancelPaymentByIdempotencyKeyRequest' when calling cancelPaymentByIdempotencyKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelPaymentByIdempotencyKeyResponse;
      return this.apiClient.callApi(
        '/v2/payments/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completePayment operation.
     * @callback module:api/PaymentsApi~completePaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompletePaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CompletePayment
     * Completes (captures) a payment. By default, payments are set to complete immediately after they are created.  You can use this endpoint to complete a payment with the APPROVED `status`.
     * @param {String} paymentId The unique ID identifying the payment to be completed.
     * @param {module:api/PaymentsApi~completePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompletePaymentResponse}
     */
    completePayment(paymentId, callback) {
      let postBody = null;
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling completePayment");
      }

      let pathParams = {
        'payment_id': paymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompletePaymentResponse;
      return this.apiClient.callApi(
        '/v2/payments/{payment_id}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPayment operation.
     * @callback module:api/PaymentsApi~createPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreatePayment
     * Creates a payment using the provided source. You can use this endpoint  to charge a card (credit/debit card or     Square gift card) or record a payment that the seller received outside of Square  (cash payment from a buyer or a payment that an external entity  processed on behalf of the seller).  The endpoint creates a  `Payment` object and returns it in the response.
     * @param {module:model/CreatePaymentRequest} createPaymentRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/PaymentsApi~createPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePaymentResponse}
     */
    createPayment(createPaymentRequest, callback) {
      let postBody = createPaymentRequest;
      // verify the required parameter 'createPaymentRequest' is set
      if (createPaymentRequest === undefined || createPaymentRequest === null) {
        throw new Error("Missing the required parameter 'createPaymentRequest' when calling createPayment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePaymentResponse;
      return this.apiClient.callApi(
        '/v2/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayment operation.
     * @callback module:api/PaymentsApi~getPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPayment
     * Retrieves details for a specific payment.
     * @param {String} paymentId A unique ID for the desired payment.
     * @param {module:api/PaymentsApi~getPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPaymentResponse}
     */
    getPayment(paymentId, callback) {
      let postBody = null;
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling getPayment");
      }

      let pathParams = {
        'payment_id': paymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPaymentResponse;
      return this.apiClient.callApi(
        '/v2/payments/{payment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePayment operation.
     * @callback module:api/PaymentsApi~updatePaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdatePayment
     * Updates a payment with the APPROVED status. You can update the `amount_money` and `tip_money` using this endpoint.
     * @param {String} paymentId The ID of the payment to update.
     * @param {module:model/UpdatePaymentRequest} updatePaymentRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/PaymentsApi~updatePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePaymentResponse}
     */
    updatePayment(paymentId, updatePaymentRequest, callback) {
      let postBody = updatePaymentRequest;
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling updatePayment");
      }
      // verify the required parameter 'updatePaymentRequest' is set
      if (updatePaymentRequest === undefined || updatePaymentRequest === null) {
        throw new Error("Missing the required parameter 'updatePaymentRequest' when calling updatePayment");
      }

      let pathParams = {
        'payment_id': paymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePaymentResponse;
      return this.apiClient.callApi(
        '/v2/payments/{payment_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2PaymentsGet operation.
     * @callback module:api/PaymentsApi~v2PaymentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPaymentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListPayments
     * Retrieves a list of payments taken by the account making the request.  Results are eventually consistent, and new payments or changes to payments might take several seconds to appear.  The maximum results per page is 100.
     * @param {Object} opts Optional parameters
     * @param {String} [beginTime] The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.
     * @param {String} [endTime] The timestamp for the end of the reporting period, in RFC 3339 format.  Default: The current time.
     * @param {String} [sortOrder] The order in which results are listed: - `ASC` - Oldest to newest. - `DESC` - Newest to oldest (default).
     * @param {String} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {String} [locationId] Limit results to the location supplied. By default, results are returned for the default (main) location associated with the seller.
     * @param {Number} [total] The exact amount in the `total_money` for a payment.
     * @param {String} [last4] The last four digits of a payment card.
     * @param {String} [cardBrand] The brand of the payment card (for example, VISA).
     * @param {Number} [limit] The maximum number of results to be returned in a single page. It is possible to receive fewer results than the specified limit on a given page.  The default value of 100 is also the maximum allowed value. If the provided value is  greater than 100, it is ignored and the default value is used instead.  Default: `100`
     * @param {module:api/PaymentsApi~v2PaymentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPaymentsResponse}
     */
    v2PaymentsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'begin_time': opts['beginTime'],
        'end_time': opts['endTime'],
        'sort_order': opts['sortOrder'],
        'cursor': opts['cursor'],
        'location_id': opts['locationId'],
        'total': opts['total'],
        'last_4': opts['last4'],
        'card_brand': opts['cardBrand'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPaymentsResponse;
      return this.apiClient.callApi(
        '/v2/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
