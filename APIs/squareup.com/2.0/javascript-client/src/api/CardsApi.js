/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCardRequest from '../model/CreateCardRequest';
import CreateCardResponse from '../model/CreateCardResponse';
import DisableCardResponse from '../model/DisableCardResponse';
import ListCardsResponse from '../model/ListCardsResponse';
import RetrieveCardResponse from '../model/RetrieveCardResponse';

/**
* Cards service.
* @module api/CardsApi
* @version 2.0
*/
export default class CardsApi {

    /**
    * Constructs a new CardsApi. 
    * @alias module:api/CardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCard operation.
     * @callback module:api/CardsApi~createCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateCard
     * Adds a card on file to an existing merchant.
     * @param {module:model/CreateCardRequest} createCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/CardsApi~createCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCardResponse}
     */
    createCard(createCardRequest, callback) {
      let postBody = createCardRequest;
      // verify the required parameter 'createCardRequest' is set
      if (createCardRequest === undefined || createCardRequest === null) {
        throw new Error("Missing the required parameter 'createCardRequest' when calling createCard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCardResponse;
      return this.apiClient.callApi(
        '/v2/cards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableCard operation.
     * @callback module:api/CardsApi~disableCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisableCardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DisableCard
     * Disables the card, preventing any further updates or charges. Disabling an already disabled card is allowed but has no effect.
     * @param {String} cardId Unique ID for the desired Card.
     * @param {module:api/CardsApi~disableCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisableCardResponse}
     */
    disableCard(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling disableCard");
      }

      let pathParams = {
        'card_id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DisableCardResponse;
      return this.apiClient.callApi(
        '/v2/cards/{card_id}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCards operation.
     * @callback module:api/CardsApi~listCardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCardsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListCards
     * Retrieves a list of cards owned by the account making the request. A max of 25 cards will be returned.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
     * @param {String} [customerId] Limit results to cards associated with the customer supplied. By default, all cards owned by the merchant are returned.
     * @param {Boolean} [includeDisabled] Includes disabled cards. By default, all enabled cards owned by the merchant are returned.
     * @param {String} [referenceId] Limit results to cards associated with the reference_id supplied.
     * @param {String} [sortOrder] Sorts the returned list by when the card was created with the specified order. This field defaults to ASC.
     * @param {module:api/CardsApi~listCardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCardsResponse}
     */
    listCards(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'customer_id': opts['customerId'],
        'include_disabled': opts['includeDisabled'],
        'reference_id': opts['referenceId'],
        'sort_order': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCardsResponse;
      return this.apiClient.callApi(
        '/v2/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveCard operation.
     * @callback module:api/CardsApi~retrieveCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveCardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveCard
     * Retrieves details for a specific Card.
     * @param {String} cardId Unique ID for the desired Card.
     * @param {module:api/CardsApi~retrieveCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveCardResponse}
     */
    retrieveCard(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling retrieveCard");
      }

      let pathParams = {
        'card_id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveCardResponse;
      return this.apiClient.callApi(
        '/v2/cards/{card_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
