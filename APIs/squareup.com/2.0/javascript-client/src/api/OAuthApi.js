/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ObtainTokenRequest from '../model/ObtainTokenRequest';
import ObtainTokenResponse from '../model/ObtainTokenResponse';
import RenewTokenRequest from '../model/RenewTokenRequest';
import RenewTokenResponse from '../model/RenewTokenResponse';
import RevokeTokenRequest from '../model/RevokeTokenRequest';
import RevokeTokenResponse from '../model/RevokeTokenResponse';

/**
* OAuth service.
* @module api/OAuthApi
* @version 2.0
*/
export default class OAuthApi {

    /**
    * Constructs a new OAuthApi. 
    * @alias module:api/OAuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the obtainToken operation.
     * @callback module:api/OAuthApi~obtainTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObtainTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ObtainToken
     * Returns an OAuth access token.  The endpoint supports distinct methods of obtaining OAuth access tokens. Applications specify a method by adding the `grant_type` parameter in the request and also provide relevant information.  __Note:__ Regardless of the method application specified, the endpoint always returns two items; an OAuth access token and a refresh token in the response.  __OAuth tokens should only live on secure servers. Application clients should never interact directly with OAuth tokens__.
     * @param {module:model/ObtainTokenRequest} obtainTokenRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/OAuthApi~obtainTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObtainTokenResponse}
     */
    obtainToken(obtainTokenRequest, callback) {
      let postBody = obtainTokenRequest;
      // verify the required parameter 'obtainTokenRequest' is set
      if (obtainTokenRequest === undefined || obtainTokenRequest === null) {
        throw new Error("Missing the required parameter 'obtainTokenRequest' when calling obtainToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ObtainTokenResponse;
      return this.apiClient.callApi(
        '/oauth2/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renewToken operation.
     * @callback module:api/OAuthApi~renewTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RenewTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RenewToken
     * `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see [Migrate from Renew to Refresh OAuth Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).   Renews an OAuth access token before it expires.  OAuth access tokens besides your application's personal access token expire after __30 days__. You can also renew expired tokens within __15 days__ of their expiration. You cannot renew an access token that has been expired for more than 15 days. Instead, the associated user must re-complete the OAuth flow from the beginning.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the Credentials page in the [developer dashboard](https://developer.squareup.com/apps).
     * @param {String} clientId Your application ID, available from the [developer dashboard](https://developer.squareup.com/apps).
     * @param {module:model/RenewTokenRequest} renewTokenRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/OAuthApi~renewTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RenewTokenResponse}
     */
    renewToken(clientId, renewTokenRequest, callback) {
      let postBody = renewTokenRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling renewToken");
      }
      // verify the required parameter 'renewTokenRequest' is set
      if (renewTokenRequest === undefined || renewTokenRequest === null) {
        throw new Error("Missing the required parameter 'renewTokenRequest' when calling renewToken");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2ClientSecret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RenewTokenResponse;
      return this.apiClient.callApi(
        '/oauth2/clients/{client_id}/access-token/renew', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeToken operation.
     * @callback module:api/OAuthApi~revokeTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RevokeTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RevokeToken
     * Revokes an access token generated with the OAuth flow.  If an account has more than one OAuth access token for your application, this endpoint revokes all of them, regardless of which token you specify. When an OAuth access token is revoked, all of the active subscriptions associated with that OAuth token are canceled immediately.  __Important:__ The `Authorization` header for this endpoint must have the following format:  ``` Authorization: Client APPLICATION_SECRET ```  Replace `APPLICATION_SECRET` with the application secret on the OAuth page in the [developer dashboard](https://developer.squareup.com/apps).
     * @param {module:model/RevokeTokenRequest} revokeTokenRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/OAuthApi~revokeTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RevokeTokenResponse}
     */
    revokeToken(revokeTokenRequest, callback) {
      let postBody = revokeTokenRequest;
      // verify the required parameter 'revokeTokenRequest' is set
      if (revokeTokenRequest === undefined || revokeTokenRequest === null) {
        throw new Error("Missing the required parameter 'revokeTokenRequest' when calling revokeToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2ClientSecret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RevokeTokenResponse;
      return this.apiClient.callApi(
        '/oauth2/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
