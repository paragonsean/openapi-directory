/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelTerminalCheckoutResponse from '../model/CancelTerminalCheckoutResponse';
import CancelTerminalRefundResponse from '../model/CancelTerminalRefundResponse';
import CreateTerminalCheckoutRequest from '../model/CreateTerminalCheckoutRequest';
import CreateTerminalCheckoutResponse from '../model/CreateTerminalCheckoutResponse';
import CreateTerminalRefundRequest from '../model/CreateTerminalRefundRequest';
import CreateTerminalRefundResponse from '../model/CreateTerminalRefundResponse';
import GetTerminalCheckoutResponse from '../model/GetTerminalCheckoutResponse';
import GetTerminalRefundResponse from '../model/GetTerminalRefundResponse';
import SearchTerminalCheckoutsRequest from '../model/SearchTerminalCheckoutsRequest';
import SearchTerminalCheckoutsResponse from '../model/SearchTerminalCheckoutsResponse';
import SearchTerminalRefundsRequest from '../model/SearchTerminalRefundsRequest';
import SearchTerminalRefundsResponse from '../model/SearchTerminalRefundsResponse';

/**
* Terminal service.
* @module api/TerminalApi
* @version 2.0
*/
export default class TerminalApi {

    /**
    * Constructs a new TerminalApi. 
    * @alias module:api/TerminalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelTerminalCheckout operation.
     * @callback module:api/TerminalApi~cancelTerminalCheckoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelTerminalCheckoutResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CancelTerminalCheckout
     * Cancels a Terminal checkout request if the status of the request permits it.
     * @param {String} checkoutId The unique ID for the desired `TerminalCheckout`.
     * @param {module:api/TerminalApi~cancelTerminalCheckoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelTerminalCheckoutResponse}
     */
    cancelTerminalCheckout(checkoutId, callback) {
      let postBody = null;
      // verify the required parameter 'checkoutId' is set
      if (checkoutId === undefined || checkoutId === null) {
        throw new Error("Missing the required parameter 'checkoutId' when calling cancelTerminalCheckout");
      }

      let pathParams = {
        'checkout_id': checkoutId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CancelTerminalCheckoutResponse;
      return this.apiClient.callApi(
        '/v2/terminals/checkouts/{checkout_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelTerminalRefund operation.
     * @callback module:api/TerminalApi~cancelTerminalRefundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelTerminalRefundResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CancelTerminalRefund
     * Cancels an Interac Terminal refund request by refund request ID if the status of the request permits it.
     * @param {String} terminalRefundId The unique ID for the desired `TerminalRefund`.
     * @param {module:api/TerminalApi~cancelTerminalRefundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelTerminalRefundResponse}
     */
    cancelTerminalRefund(terminalRefundId, callback) {
      let postBody = null;
      // verify the required parameter 'terminalRefundId' is set
      if (terminalRefundId === undefined || terminalRefundId === null) {
        throw new Error("Missing the required parameter 'terminalRefundId' when calling cancelTerminalRefund");
      }

      let pathParams = {
        'terminal_refund_id': terminalRefundId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CancelTerminalRefundResponse;
      return this.apiClient.callApi(
        '/v2/terminals/refunds/{terminal_refund_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTerminalCheckout operation.
     * @callback module:api/TerminalApi~createTerminalCheckoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTerminalCheckoutResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateTerminalCheckout
     * Creates a Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
     * @param {module:model/CreateTerminalCheckoutRequest} createTerminalCheckoutRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/TerminalApi~createTerminalCheckoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTerminalCheckoutResponse}
     */
    createTerminalCheckout(createTerminalCheckoutRequest, callback) {
      let postBody = createTerminalCheckoutRequest;
      // verify the required parameter 'createTerminalCheckoutRequest' is set
      if (createTerminalCheckoutRequest === undefined || createTerminalCheckoutRequest === null) {
        throw new Error("Missing the required parameter 'createTerminalCheckoutRequest' when calling createTerminalCheckout");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTerminalCheckoutResponse;
      return this.apiClient.callApi(
        '/v2/terminals/checkouts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTerminalRefund operation.
     * @callback module:api/TerminalApi~createTerminalRefundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTerminalRefundResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateTerminalRefund
     * Creates a request to refund an Interac payment completed on a Square Terminal.
     * @param {module:model/CreateTerminalRefundRequest} createTerminalRefundRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/TerminalApi~createTerminalRefundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTerminalRefundResponse}
     */
    createTerminalRefund(createTerminalRefundRequest, callback) {
      let postBody = createTerminalRefundRequest;
      // verify the required parameter 'createTerminalRefundRequest' is set
      if (createTerminalRefundRequest === undefined || createTerminalRefundRequest === null) {
        throw new Error("Missing the required parameter 'createTerminalRefundRequest' when calling createTerminalRefund");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTerminalRefundResponse;
      return this.apiClient.callApi(
        '/v2/terminals/refunds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTerminalCheckout operation.
     * @callback module:api/TerminalApi~getTerminalCheckoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTerminalCheckoutResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetTerminalCheckout
     * Retrieves a Terminal checkout request by `checkout_id`.
     * @param {String} checkoutId The unique ID for the desired `TerminalCheckout`.
     * @param {module:api/TerminalApi~getTerminalCheckoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTerminalCheckoutResponse}
     */
    getTerminalCheckout(checkoutId, callback) {
      let postBody = null;
      // verify the required parameter 'checkoutId' is set
      if (checkoutId === undefined || checkoutId === null) {
        throw new Error("Missing the required parameter 'checkoutId' when calling getTerminalCheckout");
      }

      let pathParams = {
        'checkout_id': checkoutId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTerminalCheckoutResponse;
      return this.apiClient.callApi(
        '/v2/terminals/checkouts/{checkout_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTerminalRefund operation.
     * @callback module:api/TerminalApi~getTerminalRefundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTerminalRefundResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetTerminalRefund
     * Retrieves an Interac Terminal refund object by ID.
     * @param {String} terminalRefundId The unique ID for the desired `TerminalRefund`.
     * @param {module:api/TerminalApi~getTerminalRefundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTerminalRefundResponse}
     */
    getTerminalRefund(terminalRefundId, callback) {
      let postBody = null;
      // verify the required parameter 'terminalRefundId' is set
      if (terminalRefundId === undefined || terminalRefundId === null) {
        throw new Error("Missing the required parameter 'terminalRefundId' when calling getTerminalRefund");
      }

      let pathParams = {
        'terminal_refund_id': terminalRefundId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTerminalRefundResponse;
      return this.apiClient.callApi(
        '/v2/terminals/refunds/{terminal_refund_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchTerminalCheckouts operation.
     * @callback module:api/TerminalApi~searchTerminalCheckoutsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchTerminalCheckoutsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SearchTerminalCheckouts
     * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
     * @param {module:model/SearchTerminalCheckoutsRequest} searchTerminalCheckoutsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/TerminalApi~searchTerminalCheckoutsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchTerminalCheckoutsResponse}
     */
    searchTerminalCheckouts(searchTerminalCheckoutsRequest, callback) {
      let postBody = searchTerminalCheckoutsRequest;
      // verify the required parameter 'searchTerminalCheckoutsRequest' is set
      if (searchTerminalCheckoutsRequest === undefined || searchTerminalCheckoutsRequest === null) {
        throw new Error("Missing the required parameter 'searchTerminalCheckoutsRequest' when calling searchTerminalCheckouts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchTerminalCheckoutsResponse;
      return this.apiClient.callApi(
        '/v2/terminals/checkouts/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchTerminalRefunds operation.
     * @callback module:api/TerminalApi~searchTerminalRefundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchTerminalRefundsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SearchTerminalRefunds
     * Retrieves a filtered list of Interac Terminal refund requests created by the seller making the request.
     * @param {module:model/SearchTerminalRefundsRequest} searchTerminalRefundsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/TerminalApi~searchTerminalRefundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchTerminalRefundsResponse}
     */
    searchTerminalRefunds(searchTerminalRefundsRequest, callback) {
      let postBody = searchTerminalRefundsRequest;
      // verify the required parameter 'searchTerminalRefundsRequest' is set
      if (searchTerminalRefundsRequest === undefined || searchTerminalRefundsRequest === null) {
        throw new Error("Missing the required parameter 'searchTerminalRefundsRequest' when calling searchTerminalRefunds");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchTerminalRefundsResponse;
      return this.apiClient.callApi(
        '/v2/terminals/refunds/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
