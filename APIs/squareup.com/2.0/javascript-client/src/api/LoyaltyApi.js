/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccumulateLoyaltyPointsRequest from '../model/AccumulateLoyaltyPointsRequest';
import AccumulateLoyaltyPointsResponse from '../model/AccumulateLoyaltyPointsResponse';
import AdjustLoyaltyPointsRequest from '../model/AdjustLoyaltyPointsRequest';
import AdjustLoyaltyPointsResponse from '../model/AdjustLoyaltyPointsResponse';
import CalculateLoyaltyPointsRequest from '../model/CalculateLoyaltyPointsRequest';
import CalculateLoyaltyPointsResponse from '../model/CalculateLoyaltyPointsResponse';
import CreateLoyaltyAccountRequest from '../model/CreateLoyaltyAccountRequest';
import CreateLoyaltyAccountResponse from '../model/CreateLoyaltyAccountResponse';
import CreateLoyaltyRewardRequest from '../model/CreateLoyaltyRewardRequest';
import CreateLoyaltyRewardResponse from '../model/CreateLoyaltyRewardResponse';
import DeleteLoyaltyRewardResponse from '../model/DeleteLoyaltyRewardResponse';
import ListLoyaltyProgramsResponse from '../model/ListLoyaltyProgramsResponse';
import RedeemLoyaltyRewardRequest from '../model/RedeemLoyaltyRewardRequest';
import RedeemLoyaltyRewardResponse from '../model/RedeemLoyaltyRewardResponse';
import RetrieveLoyaltyAccountResponse from '../model/RetrieveLoyaltyAccountResponse';
import RetrieveLoyaltyProgramResponse from '../model/RetrieveLoyaltyProgramResponse';
import RetrieveLoyaltyRewardResponse from '../model/RetrieveLoyaltyRewardResponse';
import SearchLoyaltyAccountsRequest from '../model/SearchLoyaltyAccountsRequest';
import SearchLoyaltyAccountsResponse from '../model/SearchLoyaltyAccountsResponse';
import SearchLoyaltyEventsRequest from '../model/SearchLoyaltyEventsRequest';
import SearchLoyaltyEventsResponse from '../model/SearchLoyaltyEventsResponse';
import SearchLoyaltyRewardsRequest from '../model/SearchLoyaltyRewardsRequest';
import SearchLoyaltyRewardsResponse from '../model/SearchLoyaltyRewardsResponse';

/**
* Loyalty service.
* @module api/LoyaltyApi
* @version 2.0
*/
export default class LoyaltyApi {

    /**
    * Constructs a new LoyaltyApi. 
    * @alias module:api/LoyaltyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accumulateLoyaltyPoints operation.
     * @callback module:api/LoyaltyApi~accumulateLoyaltyPointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccumulateLoyaltyPointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AccumulateLoyaltyPoints
     * Adds points to a loyalty account.  - If you are using the Orders API to manage orders, you only provide the `order_id`.  The endpoint reads the order to compute points to add to the buyer's account. - If you are not using the Orders API to manage orders,  you first perform a client-side computation to compute the points.   For spend-based and visit-based programs, you can first call  [CalculateLoyaltyPoints](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/calculate-loyalty-points) to compute the points   that you provide to this endpoint.   __Note:__ The country of the seller's Square account determines whether tax is included in the purchase amount when accruing points for spend-based and visit-based programs.  For more information, see [Availability of Square Loyalty](https://developer.squareup.com/docs/loyalty-api/overview#loyalty-market-availability).
     * @param {String} accountId The [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) ID to which to add the points.
     * @param {module:model/AccumulateLoyaltyPointsRequest} accumulateLoyaltyPointsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LoyaltyApi~accumulateLoyaltyPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccumulateLoyaltyPointsResponse}
     */
    accumulateLoyaltyPoints(accountId, accumulateLoyaltyPointsRequest, callback) {
      let postBody = accumulateLoyaltyPointsRequest;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accumulateLoyaltyPoints");
      }
      // verify the required parameter 'accumulateLoyaltyPointsRequest' is set
      if (accumulateLoyaltyPointsRequest === undefined || accumulateLoyaltyPointsRequest === null) {
        throw new Error("Missing the required parameter 'accumulateLoyaltyPointsRequest' when calling accumulateLoyaltyPoints");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccumulateLoyaltyPointsResponse;
      return this.apiClient.callApi(
        '/v2/loyalty/accounts/{account_id}/accumulate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adjustLoyaltyPoints operation.
     * @callback module:api/LoyaltyApi~adjustLoyaltyPointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdjustLoyaltyPointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AdjustLoyaltyPoints
     * Adds points to or subtracts points from a buyer's account.   Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call  [AccumulateLoyaltyPoints](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/accumulate-loyalty-points)  to add points when a buyer pays for the purchase.
     * @param {String} accountId The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) in which to adjust the points.
     * @param {module:model/AdjustLoyaltyPointsRequest} adjustLoyaltyPointsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LoyaltyApi~adjustLoyaltyPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdjustLoyaltyPointsResponse}
     */
    adjustLoyaltyPoints(accountId, adjustLoyaltyPointsRequest, callback) {
      let postBody = adjustLoyaltyPointsRequest;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adjustLoyaltyPoints");
      }
      // verify the required parameter 'adjustLoyaltyPointsRequest' is set
      if (adjustLoyaltyPointsRequest === undefined || adjustLoyaltyPointsRequest === null) {
        throw new Error("Missing the required parameter 'adjustLoyaltyPointsRequest' when calling adjustLoyaltyPoints");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdjustLoyaltyPointsResponse;
      return this.apiClient.callApi(
        '/v2/loyalty/accounts/{account_id}/adjust', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateLoyaltyPoints operation.
     * @callback module:api/LoyaltyApi~calculateLoyaltyPointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalculateLoyaltyPointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CalculateLoyaltyPoints
     * Calculates the points a purchase earns.  - If you are using the Orders API to manage orders, you provide `order_id` in the request. The  endpoint calculates the points by reading the order. - If you are not using the Orders API to manage orders, you provide the purchase amount in  the request for the endpoint to calculate the points.  An application might call this endpoint to show the points that a buyer can earn with the  specific purchase.  __Note:__ The country of the seller's Square account determines whether tax is included in the purchase amount when accruing points for spend-based and visit-based programs.  For more information, see [Availability of Square Loyalty](https://developer.squareup.com/docs/loyalty-api/overview#loyalty-market-availability).
     * @param {String} programId The [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) ID, which defines the rules for accruing points.
     * @param {module:model/CalculateLoyaltyPointsRequest} calculateLoyaltyPointsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LoyaltyApi~calculateLoyaltyPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalculateLoyaltyPointsResponse}
     */
    calculateLoyaltyPoints(programId, calculateLoyaltyPointsRequest, callback) {
      let postBody = calculateLoyaltyPointsRequest;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling calculateLoyaltyPoints");
      }
      // verify the required parameter 'calculateLoyaltyPointsRequest' is set
      if (calculateLoyaltyPointsRequest === undefined || calculateLoyaltyPointsRequest === null) {
        throw new Error("Missing the required parameter 'calculateLoyaltyPointsRequest' when calling calculateLoyaltyPoints");
      }

      let pathParams = {
        'program_id': programId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CalculateLoyaltyPointsResponse;
      return this.apiClient.callApi(
        '/v2/loyalty/programs/{program_id}/calculate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLoyaltyAccount operation.
     * @callback module:api/LoyaltyApi~createLoyaltyAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLoyaltyAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateLoyaltyAccount
     * Creates a loyalty account. To create a loyalty account, you must provide the `program_id` and a `mapping` with the `phone_number` of the buyer.
     * @param {module:model/CreateLoyaltyAccountRequest} createLoyaltyAccountRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LoyaltyApi~createLoyaltyAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLoyaltyAccountResponse}
     */
    createLoyaltyAccount(createLoyaltyAccountRequest, callback) {
      let postBody = createLoyaltyAccountRequest;
      // verify the required parameter 'createLoyaltyAccountRequest' is set
      if (createLoyaltyAccountRequest === undefined || createLoyaltyAccountRequest === null) {
        throw new Error("Missing the required parameter 'createLoyaltyAccountRequest' when calling createLoyaltyAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLoyaltyAccountResponse;
      return this.apiClient.callApi(
        '/v2/loyalty/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLoyaltyReward operation.
     * @callback module:api/LoyaltyApi~createLoyaltyRewardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLoyaltyRewardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateLoyaltyReward
     * Creates a loyalty reward. In the process, the endpoint does following:  - Uses the `reward_tier_id` in the request to determine the number of points  to lock for this reward.  - If the request includes `order_id`, it adds the reward and related discount to the order.   After a reward is created, the points are locked and  not available for the buyer to redeem another reward.
     * @param {module:model/CreateLoyaltyRewardRequest} createLoyaltyRewardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LoyaltyApi~createLoyaltyRewardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLoyaltyRewardResponse}
     */
    createLoyaltyReward(createLoyaltyRewardRequest, callback) {
      let postBody = createLoyaltyRewardRequest;
      // verify the required parameter 'createLoyaltyRewardRequest' is set
      if (createLoyaltyRewardRequest === undefined || createLoyaltyRewardRequest === null) {
        throw new Error("Missing the required parameter 'createLoyaltyRewardRequest' when calling createLoyaltyReward");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLoyaltyRewardResponse;
      return this.apiClient.callApi(
        '/v2/loyalty/rewards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLoyaltyReward operation.
     * @callback module:api/LoyaltyApi~deleteLoyaltyRewardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteLoyaltyRewardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteLoyaltyReward
     * Deletes a loyalty reward by doing the following:  - Returns the loyalty points back to the loyalty account. - If an order ID was specified when the reward was created  (see [CreateLoyaltyReward](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/create-loyalty-reward)),  it updates the order by removing the reward and related  discounts.  You cannot delete a reward that has reached the terminal state (REDEEMED).
     * @param {String} rewardId The ID of the [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward) to delete.
     * @param {module:api/LoyaltyApi~deleteLoyaltyRewardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteLoyaltyRewardResponse}
     */
    deleteLoyaltyReward(rewardId, callback) {
      let postBody = null;
      // verify the required parameter 'rewardId' is set
      if (rewardId === undefined || rewardId === null) {
        throw new Error("Missing the required parameter 'rewardId' when calling deleteLoyaltyReward");
      }

      let pathParams = {
        'reward_id': rewardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteLoyaltyRewardResponse;
      return this.apiClient.callApi(
        '/v2/loyalty/rewards/{reward_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLoyaltyPrograms operation.
     * @callback module:api/LoyaltyApi~listLoyaltyProgramsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLoyaltyProgramsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListLoyaltyPrograms
     * Returns a list of loyalty programs in the seller's account. Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).   Replaced with [RetrieveLoyaltyProgram](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/retrieve-loyalty-program) when used with the keyword `main`.
     * @param {module:api/LoyaltyApi~listLoyaltyProgramsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLoyaltyProgramsResponse}
     */
    listLoyaltyPrograms(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLoyaltyProgramsResponse;
      return this.apiClient.callApi(
        '/v2/loyalty/programs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the redeemLoyaltyReward operation.
     * @callback module:api/LoyaltyApi~redeemLoyaltyRewardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RedeemLoyaltyRewardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RedeemLoyaltyReward
     * Redeems a loyalty reward.  The endpoint sets the reward to the `REDEEMED` terminal state.   If you are using your own order processing system (not using the  Orders API), you call this endpoint after the buyer paid for the  purchase.  After the reward reaches the terminal state, it cannot be deleted.  In other words, points used for the reward cannot be returned  to the account.
     * @param {String} rewardId The ID of the [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward) to redeem.
     * @param {module:model/RedeemLoyaltyRewardRequest} redeemLoyaltyRewardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LoyaltyApi~redeemLoyaltyRewardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RedeemLoyaltyRewardResponse}
     */
    redeemLoyaltyReward(rewardId, redeemLoyaltyRewardRequest, callback) {
      let postBody = redeemLoyaltyRewardRequest;
      // verify the required parameter 'rewardId' is set
      if (rewardId === undefined || rewardId === null) {
        throw new Error("Missing the required parameter 'rewardId' when calling redeemLoyaltyReward");
      }
      // verify the required parameter 'redeemLoyaltyRewardRequest' is set
      if (redeemLoyaltyRewardRequest === undefined || redeemLoyaltyRewardRequest === null) {
        throw new Error("Missing the required parameter 'redeemLoyaltyRewardRequest' when calling redeemLoyaltyReward");
      }

      let pathParams = {
        'reward_id': rewardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RedeemLoyaltyRewardResponse;
      return this.apiClient.callApi(
        '/v2/loyalty/rewards/{reward_id}/redeem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveLoyaltyAccount operation.
     * @callback module:api/LoyaltyApi~retrieveLoyaltyAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveLoyaltyAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveLoyaltyAccount
     * Retrieves a loyalty account.
     * @param {String} accountId The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) to retrieve.
     * @param {module:api/LoyaltyApi~retrieveLoyaltyAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveLoyaltyAccountResponse}
     */
    retrieveLoyaltyAccount(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling retrieveLoyaltyAccount");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveLoyaltyAccountResponse;
      return this.apiClient.callApi(
        '/v2/loyalty/accounts/{account_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveLoyaltyProgram operation.
     * @callback module:api/LoyaltyApi~retrieveLoyaltyProgramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveLoyaltyProgramResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveLoyaltyProgram
     * Retrieves the loyalty program in a seller's account, specified by the program ID or the keyword `main`.   Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
     * @param {String} programId The ID of the loyalty program or the keyword `main`. Either value can be used to retrieve the single loyalty program that belongs to the seller.
     * @param {module:api/LoyaltyApi~retrieveLoyaltyProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveLoyaltyProgramResponse}
     */
    retrieveLoyaltyProgram(programId, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling retrieveLoyaltyProgram");
      }

      let pathParams = {
        'program_id': programId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveLoyaltyProgramResponse;
      return this.apiClient.callApi(
        '/v2/loyalty/programs/{program_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveLoyaltyReward operation.
     * @callback module:api/LoyaltyApi~retrieveLoyaltyRewardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveLoyaltyRewardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveLoyaltyReward
     * Retrieves a loyalty reward.
     * @param {String} rewardId The ID of the [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward) to retrieve.
     * @param {module:api/LoyaltyApi~retrieveLoyaltyRewardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveLoyaltyRewardResponse}
     */
    retrieveLoyaltyReward(rewardId, callback) {
      let postBody = null;
      // verify the required parameter 'rewardId' is set
      if (rewardId === undefined || rewardId === null) {
        throw new Error("Missing the required parameter 'rewardId' when calling retrieveLoyaltyReward");
      }

      let pathParams = {
        'reward_id': rewardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveLoyaltyRewardResponse;
      return this.apiClient.callApi(
        '/v2/loyalty/rewards/{reward_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchLoyaltyAccounts operation.
     * @callback module:api/LoyaltyApi~searchLoyaltyAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchLoyaltyAccountsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SearchLoyaltyAccounts
     * Searches for loyalty accounts in a loyalty program.    You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.    Search results are sorted by `created_at` in ascending order.
     * @param {module:model/SearchLoyaltyAccountsRequest} searchLoyaltyAccountsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LoyaltyApi~searchLoyaltyAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchLoyaltyAccountsResponse}
     */
    searchLoyaltyAccounts(searchLoyaltyAccountsRequest, callback) {
      let postBody = searchLoyaltyAccountsRequest;
      // verify the required parameter 'searchLoyaltyAccountsRequest' is set
      if (searchLoyaltyAccountsRequest === undefined || searchLoyaltyAccountsRequest === null) {
        throw new Error("Missing the required parameter 'searchLoyaltyAccountsRequest' when calling searchLoyaltyAccounts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchLoyaltyAccountsResponse;
      return this.apiClient.callApi(
        '/v2/loyalty/accounts/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchLoyaltyEvents operation.
     * @callback module:api/LoyaltyApi~searchLoyaltyEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchLoyaltyEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SearchLoyaltyEvents
     * Searches for loyalty events.  A Square loyalty program maintains a ledger of events that occur during the lifetime of a  buyer's loyalty account. Each change in the point balance  (for example, points earned, points redeemed, and points expired) is  recorded in the ledger. Using this endpoint, you can search the ledger for events.  Search results are sorted by `created_at` in descending order.
     * @param {module:model/SearchLoyaltyEventsRequest} searchLoyaltyEventsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LoyaltyApi~searchLoyaltyEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchLoyaltyEventsResponse}
     */
    searchLoyaltyEvents(searchLoyaltyEventsRequest, callback) {
      let postBody = searchLoyaltyEventsRequest;
      // verify the required parameter 'searchLoyaltyEventsRequest' is set
      if (searchLoyaltyEventsRequest === undefined || searchLoyaltyEventsRequest === null) {
        throw new Error("Missing the required parameter 'searchLoyaltyEventsRequest' when calling searchLoyaltyEvents");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchLoyaltyEventsResponse;
      return this.apiClient.callApi(
        '/v2/loyalty/events/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchLoyaltyRewards operation.
     * @callback module:api/LoyaltyApi~searchLoyaltyRewardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchLoyaltyRewardsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SearchLoyaltyRewards
     * Searches for loyalty rewards in a loyalty account.   In the current implementation, the endpoint supports search by the reward `status`.  If you know a reward ID, use the  [RetrieveLoyaltyReward](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/retrieve-loyalty-reward) endpoint.  Search results are sorted by `updated_at` in descending order.
     * @param {module:model/SearchLoyaltyRewardsRequest} searchLoyaltyRewardsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LoyaltyApi~searchLoyaltyRewardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchLoyaltyRewardsResponse}
     */
    searchLoyaltyRewards(searchLoyaltyRewardsRequest, callback) {
      let postBody = searchLoyaltyRewardsRequest;
      // verify the required parameter 'searchLoyaltyRewardsRequest' is set
      if (searchLoyaltyRewardsRequest === undefined || searchLoyaltyRewardsRequest === null) {
        throw new Error("Missing the required parameter 'searchLoyaltyRewardsRequest' when calling searchLoyaltyRewards");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchLoyaltyRewardsResponse;
      return this.apiClient.callApi(
        '/v2/loyalty/rewards/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
