/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteSnippetResponse from '../model/DeleteSnippetResponse';
import RetrieveSnippetResponse from '../model/RetrieveSnippetResponse';
import UpsertSnippetRequest from '../model/UpsertSnippetRequest';
import UpsertSnippetResponse from '../model/UpsertSnippetResponse';

/**
* Snippets service.
* @module api/SnippetsApi
* @version 2.0
*/
export default class SnippetsApi {

    /**
    * Constructs a new SnippetsApi. 
    * @alias module:api/SnippetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteSnippet operation.
     * @callback module:api/SnippetsApi~deleteSnippetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteSnippetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteSnippet
     * Removes your snippet from a Square Online site.  You can call [ListSites](https://developer.squareup.com/reference/square_2021-08-18/sites-api/list-sites) to get the IDs of the sites that belong to a seller.   __Note:__ Square Online APIs are publicly available as part of an early access program. For more information, see [Early access program for Square Online APIs](https://developer.squareup.com/docs/online-api#early-access-program-for-square-online-apis).
     * @param {String} siteId The ID of the site that contains the snippet.
     * @param {module:api/SnippetsApi~deleteSnippetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteSnippetResponse}
     */
    deleteSnippet(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSnippet");
      }

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteSnippetResponse;
      return this.apiClient.callApi(
        '/v2/sites/{site_id}/snippet', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveSnippet operation.
     * @callback module:api/SnippetsApi~retrieveSnippetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveSnippetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveSnippet
     * Retrieves your snippet from a Square Online site. A site can contain snippets from multiple snippet applications, but you can retrieve only the snippet that was added by your application.  You can call [ListSites](https://developer.squareup.com/reference/square_2021-08-18/sites-api/list-sites) to get the IDs of the sites that belong to a seller.   __Note:__ Square Online APIs are publicly available as part of an early access program. For more information, see [Early access program for Square Online APIs](https://developer.squareup.com/docs/online-api#early-access-program-for-square-online-apis).
     * @param {String} siteId The ID of the site that contains the snippet.
     * @param {module:api/SnippetsApi~retrieveSnippetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveSnippetResponse}
     */
    retrieveSnippet(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling retrieveSnippet");
      }

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveSnippetResponse;
      return this.apiClient.callApi(
        '/v2/sites/{site_id}/snippet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upsertSnippet operation.
     * @callback module:api/SnippetsApi~upsertSnippetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpsertSnippetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpsertSnippet
     * Adds a snippet to a Square Online site or updates the existing snippet on the site.  The snippet code is appended to the end of the `head` element on every page of the site, except checkout pages. A snippet application can add one snippet to a given site.   You can call [ListSites](https://developer.squareup.com/reference/square_2021-08-18/sites-api/list-sites) to get the IDs of the sites that belong to a seller.   __Note:__ Square Online APIs are publicly available as part of an early access program. For more information, see [Early access program for Square Online APIs](https://developer.squareup.com/docs/online-api#early-access-program-for-square-online-apis).
     * @param {String} siteId The ID of the site where you want to add or update the snippet.
     * @param {module:model/UpsertSnippetRequest} upsertSnippetRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/SnippetsApi~upsertSnippetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpsertSnippetResponse}
     */
    upsertSnippet(siteId, upsertSnippetRequest, callback) {
      let postBody = upsertSnippetRequest;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling upsertSnippet");
      }
      // verify the required parameter 'upsertSnippetRequest' is set
      if (upsertSnippetRequest === undefined || upsertSnippetRequest === null) {
        throw new Error("Missing the required parameter 'upsertSnippetRequest' when calling upsertSnippet");
      }

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpsertSnippetResponse;
      return this.apiClient.callApi(
        '/v2/sites/{site_id}/snippet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
