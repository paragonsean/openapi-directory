/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddGroupToCustomerResponse from '../model/AddGroupToCustomerResponse';
import CreateCustomerCardRequest from '../model/CreateCustomerCardRequest';
import CreateCustomerCardResponse from '../model/CreateCustomerCardResponse';
import CreateCustomerRequest from '../model/CreateCustomerRequest';
import CreateCustomerResponse from '../model/CreateCustomerResponse';
import DeleteCustomerCardResponse from '../model/DeleteCustomerCardResponse';
import DeleteCustomerResponse from '../model/DeleteCustomerResponse';
import ListCustomersResponse from '../model/ListCustomersResponse';
import RemoveGroupFromCustomerResponse from '../model/RemoveGroupFromCustomerResponse';
import RetrieveCustomerResponse from '../model/RetrieveCustomerResponse';
import SearchCustomersRequest from '../model/SearchCustomersRequest';
import SearchCustomersResponse from '../model/SearchCustomersResponse';
import UpdateCustomerRequest from '../model/UpdateCustomerRequest';
import UpdateCustomerResponse from '../model/UpdateCustomerResponse';

/**
* Customers service.
* @module api/CustomersApi
* @version 2.0
*/
export default class CustomersApi {

    /**
    * Constructs a new CustomersApi. 
    * @alias module:api/CustomersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addGroupToCustomer operation.
     * @callback module:api/CustomersApi~addGroupToCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddGroupToCustomerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AddGroupToCustomer
     * Adds a group membership to a customer.  The customer is identified by the `customer_id` value and the customer group is identified by the `group_id` value.
     * @param {String} customerId The ID of the customer to add to a group.
     * @param {String} groupId The ID of the customer group to add the customer to.
     * @param {module:api/CustomersApi~addGroupToCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddGroupToCustomerResponse}
     */
    addGroupToCustomer(customerId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling addGroupToCustomer");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling addGroupToCustomer");
      }

      let pathParams = {
        'customer_id': customerId,
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddGroupToCustomerResponse;
      return this.apiClient.callApi(
        '/v2/customers/{customer_id}/groups/{group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCustomer operation.
     * @callback module:api/CustomersApi~createCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCustomerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateCustomer
     * Creates a new customer for a business.  You must provide at least one of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`
     * @param {module:model/CreateCustomerRequest} createCustomerRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/CustomersApi~createCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCustomerResponse}
     */
    createCustomer(createCustomerRequest, callback) {
      let postBody = createCustomerRequest;
      // verify the required parameter 'createCustomerRequest' is set
      if (createCustomerRequest === undefined || createCustomerRequest === null) {
        throw new Error("Missing the required parameter 'createCustomerRequest' when calling createCustomer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCustomerResponse;
      return this.apiClient.callApi(
        '/v2/customers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCustomerCard operation.
     * @callback module:api/CustomersApi~createCustomerCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCustomerCardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateCustomerCard
     * Adds a card on file to an existing customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
     * @param {String} customerId The Square ID of the customer profile the card is linked to.
     * @param {module:model/CreateCustomerCardRequest} createCustomerCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/CustomersApi~createCustomerCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCustomerCardResponse}
     */
    createCustomerCard(customerId, createCustomerCardRequest, callback) {
      let postBody = createCustomerCardRequest;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling createCustomerCard");
      }
      // verify the required parameter 'createCustomerCardRequest' is set
      if (createCustomerCardRequest === undefined || createCustomerCardRequest === null) {
        throw new Error("Missing the required parameter 'createCustomerCardRequest' when calling createCustomerCard");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCustomerCardResponse;
      return this.apiClient.callApi(
        '/v2/customers/{customer_id}/cards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomer operation.
     * @callback module:api/CustomersApi~deleteCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteCustomerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteCustomer
     * Deletes a customer profile from a business. This operation also unlinks any associated cards on file.   As a best practice, you should include the `version` field in the request to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control. The value must be set to the current version of the customer profile.   To delete a customer profile that was created by merging existing profiles, you must use the ID of the newly created profile.
     * @param {String} customerId The ID of the customer to delete.
     * @param {Object} opts Optional parameters
     * @param {Number} [version] The current version of the customer profile.  As a best practice, you should include this parameter to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control.  For more information, see [Delete a customer profile](https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#delete-customer-profile).
     * @param {module:api/CustomersApi~deleteCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteCustomerResponse}
     */
    deleteCustomer(customerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomer");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteCustomerResponse;
      return this.apiClient.callApi(
        '/v2/customers/{customer_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomerCard operation.
     * @callback module:api/CustomersApi~deleteCustomerCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteCustomerCardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteCustomerCard
     * Removes a card on file from a customer.
     * @param {String} customerId The ID of the customer that the card on file belongs to.
     * @param {String} cardId The ID of the card on file to delete.
     * @param {module:api/CustomersApi~deleteCustomerCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteCustomerCardResponse}
     */
    deleteCustomerCard(customerId, cardId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomerCard");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling deleteCustomerCard");
      }

      let pathParams = {
        'customer_id': customerId,
        'card_id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteCustomerCardResponse;
      return this.apiClient.callApi(
        '/v2/customers/{customer_id}/cards/{card_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCustomers operation.
     * @callback module:api/CustomersApi~listCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListCustomers
     * Lists customer profiles associated with a Square account.  Under normal operating conditions, newly created or updated customer profiles become available for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
     * @param {Number} [limit] The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.  The limit is ignored if it is less than 1 or greater than 100. The default value is 100.  For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
     * @param {String} [sortField] Indicates how customers should be sorted.  The default value is `DEFAULT`.
     * @param {String} [sortOrder] Indicates whether customers should be sorted in ascending (`ASC`) or descending (`DESC`) order.  The default value is `ASC`.
     * @param {module:api/CustomersApi~listCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCustomersResponse}
     */
    listCustomers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit'],
        'sort_field': opts['sortField'],
        'sort_order': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCustomersResponse;
      return this.apiClient.callApi(
        '/v2/customers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeGroupFromCustomer operation.
     * @callback module:api/CustomersApi~removeGroupFromCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveGroupFromCustomerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RemoveGroupFromCustomer
     * Removes a group membership from a customer.  The customer is identified by the `customer_id` value and the customer group is identified by the `group_id` value.
     * @param {String} customerId The ID of the customer to remove from the group.
     * @param {String} groupId The ID of the customer group to remove the customer from.
     * @param {module:api/CustomersApi~removeGroupFromCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveGroupFromCustomerResponse}
     */
    removeGroupFromCustomer(customerId, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling removeGroupFromCustomer");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling removeGroupFromCustomer");
      }

      let pathParams = {
        'customer_id': customerId,
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoveGroupFromCustomerResponse;
      return this.apiClient.callApi(
        '/v2/customers/{customer_id}/groups/{group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveCustomer operation.
     * @callback module:api/CustomersApi~retrieveCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveCustomerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveCustomer
     * Returns details for a single customer.
     * @param {String} customerId The ID of the customer to retrieve.
     * @param {module:api/CustomersApi~retrieveCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveCustomerResponse}
     */
    retrieveCustomer(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling retrieveCustomer");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveCustomerResponse;
      return this.apiClient.callApi(
        '/v2/customers/{customer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchCustomers operation.
     * @callback module:api/CustomersApi~searchCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchCustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SearchCustomers
     * Searches the customer profiles associated with a Square account using a supported query filter.  Calling `SearchCustomers` without any explicit query filter returns all customer profiles ordered alphabetically based on `given_name` and `family_name`.  Under normal operating conditions, newly created or updated customer profiles become available for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated profiles can take closer to one minute or longer, especially during network incidents and outages.
     * @param {module:model/SearchCustomersRequest} searchCustomersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/CustomersApi~searchCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchCustomersResponse}
     */
    searchCustomers(searchCustomersRequest, callback) {
      let postBody = searchCustomersRequest;
      // verify the required parameter 'searchCustomersRequest' is set
      if (searchCustomersRequest === undefined || searchCustomersRequest === null) {
        throw new Error("Missing the required parameter 'searchCustomersRequest' when calling searchCustomers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchCustomersResponse;
      return this.apiClient.callApi(
        '/v2/customers/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomer operation.
     * @callback module:api/CustomersApi~updateCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCustomerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateCustomer
     * Updates a customer profile. To change an attribute, specify the new value. To remove an attribute, specify the value as an empty string or empty object.  As a best practice, you should include the `version` field in the request to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control. The value must be set to the current version of the customer profile.  To update a customer profile that was created by merging existing profiles, you must use the ID of the newly created profile.  You cannot use this endpoint to change cards on file. To make changes, use the [Cards API](https://developer.squareup.com/reference/square_2021-08-18/cards-api) or [Gift Cards API](https://developer.squareup.com/reference/square_2021-08-18/gift-cards-api).
     * @param {String} customerId The ID of the customer to update.
     * @param {module:model/UpdateCustomerRequest} updateCustomerRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/CustomersApi~updateCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCustomerResponse}
     */
    updateCustomer(customerId, updateCustomerRequest, callback) {
      let postBody = updateCustomerRequest;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateCustomer");
      }
      // verify the required parameter 'updateCustomerRequest' is set
      if (updateCustomerRequest === undefined || updateCustomerRequest === null) {
        throw new Error("Missing the required parameter 'updateCustomerRequest' when calling updateCustomer");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateCustomerResponse;
      return this.apiClient.callApi(
        '/v2/customers/{customer_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
