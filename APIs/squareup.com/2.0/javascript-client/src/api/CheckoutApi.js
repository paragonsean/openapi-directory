/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCheckoutRequest from '../model/CreateCheckoutRequest';
import CreateCheckoutResponse from '../model/CreateCheckoutResponse';

/**
* Checkout service.
* @module api/CheckoutApi
* @version 2.0
*/
export default class CheckoutApi {

    /**
    * Constructs a new CheckoutApi. 
    * @alias module:api/CheckoutApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCheckout operation.
     * @callback module:api/CheckoutApi~createCheckoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCheckoutResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateCheckout
     * Links a `checkoutId` to a `checkout_page_url` that customers are directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
     * @param {String} locationId The ID of the business location to associate the checkout with.
     * @param {module:model/CreateCheckoutRequest} createCheckoutRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/CheckoutApi~createCheckoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCheckoutResponse}
     */
    createCheckout(locationId, createCheckoutRequest, callback) {
      let postBody = createCheckoutRequest;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling createCheckout");
      }
      // verify the required parameter 'createCheckoutRequest' is set
      if (createCheckoutRequest === undefined || createCheckoutRequest === null) {
        throw new Error("Missing the required parameter 'createCheckoutRequest' when calling createCheckout");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCheckoutResponse;
      return this.apiClient.callApi(
        '/v2/locations/{location_id}/checkouts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
