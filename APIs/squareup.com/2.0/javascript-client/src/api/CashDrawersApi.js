/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListCashDrawerShiftEventsResponse from '../model/ListCashDrawerShiftEventsResponse';
import ListCashDrawerShiftsResponse from '../model/ListCashDrawerShiftsResponse';
import RetrieveCashDrawerShiftResponse from '../model/RetrieveCashDrawerShiftResponse';

/**
* CashDrawers service.
* @module api/CashDrawersApi
* @version 2.0
*/
export default class CashDrawersApi {

    /**
    * Constructs a new CashDrawersApi. 
    * @alias module:api/CashDrawersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listCashDrawerShiftEvents operation.
     * @callback module:api/CashDrawersApi~listCashDrawerShiftEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCashDrawerShiftEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListCashDrawerShiftEvents
     * Provides a paginated list of events for a single cash drawer shift.
     * @param {String} locationId The ID of the location to list cash drawer shifts for.
     * @param {String} shiftId The shift ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of resources to be returned in a page of results (200 by default, 1000 max).
     * @param {String} [cursor] Opaque cursor for fetching the next page of results.
     * @param {module:api/CashDrawersApi~listCashDrawerShiftEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCashDrawerShiftEventsResponse}
     */
    listCashDrawerShiftEvents(locationId, shiftId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling listCashDrawerShiftEvents");
      }
      // verify the required parameter 'shiftId' is set
      if (shiftId === undefined || shiftId === null) {
        throw new Error("Missing the required parameter 'shiftId' when calling listCashDrawerShiftEvents");
      }

      let pathParams = {
        'shift_id': shiftId
      };
      let queryParams = {
        'location_id': locationId,
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCashDrawerShiftEventsResponse;
      return this.apiClient.callApi(
        '/v2/cash-drawers/shifts/{shift_id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCashDrawerShifts operation.
     * @callback module:api/CashDrawersApi~listCashDrawerShiftsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCashDrawerShiftsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListCashDrawerShifts
     * Provides the details for all of the cash drawer shifts for a location in a date range.
     * @param {String} locationId The ID of the location to query for a list of cash drawer shifts.
     * @param {Object} opts Optional parameters
     * @param {String} [sortOrder] The order in which cash drawer shifts are listed in the response, based on their opened_at field. Default value: ASC
     * @param {String} [beginTime] The inclusive start time of the query on opened_at, in ISO 8601 format.
     * @param {String} [endTime] The exclusive end date of the query on opened_at, in ISO 8601 format.
     * @param {Number} [limit] Number of cash drawer shift events in a page of results (200 by default, 1000 max).
     * @param {String} [cursor] Opaque cursor for fetching the next page of results.
     * @param {module:api/CashDrawersApi~listCashDrawerShiftsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCashDrawerShiftsResponse}
     */
    listCashDrawerShifts(locationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling listCashDrawerShifts");
      }

      let pathParams = {
      };
      let queryParams = {
        'location_id': locationId,
        'sort_order': opts['sortOrder'],
        'begin_time': opts['beginTime'],
        'end_time': opts['endTime'],
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCashDrawerShiftsResponse;
      return this.apiClient.callApi(
        '/v2/cash-drawers/shifts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveCashDrawerShift operation.
     * @callback module:api/CashDrawersApi~retrieveCashDrawerShiftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveCashDrawerShiftResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveCashDrawerShift
     * Provides the summary details for a single cash drawer shift. See [ListCashDrawerShiftEvents](https://developer.squareup.com/reference/square_2021-08-18/cash-drawers-api/list-cash-drawer-shift-events) for a list of cash drawer shift events.
     * @param {String} locationId The ID of the location to retrieve cash drawer shifts from.
     * @param {String} shiftId The shift ID.
     * @param {module:api/CashDrawersApi~retrieveCashDrawerShiftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveCashDrawerShiftResponse}
     */
    retrieveCashDrawerShift(locationId, shiftId, callback) {
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling retrieveCashDrawerShift");
      }
      // verify the required parameter 'shiftId' is set
      if (shiftId === undefined || shiftId === null) {
        throw new Error("Missing the required parameter 'shiftId' when calling retrieveCashDrawerShift");
      }

      let pathParams = {
        'shift_id': shiftId
      };
      let queryParams = {
        'location_id': locationId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveCashDrawerShiftResponse;
      return this.apiClient.callApi(
        '/v2/cash-drawers/shifts/{shift_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
