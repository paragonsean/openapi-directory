/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListEmployeesResponse from '../model/ListEmployeesResponse';
import RetrieveEmployeeResponse from '../model/RetrieveEmployeeResponse';

/**
* Employees service.
* @module api/EmployeesApi
* @version 2.0
*/
export default class EmployeesApi {

    /**
    * Constructs a new EmployeesApi. 
    * @alias module:api/EmployeesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2EmployeesGet operation.
     * @callback module:api/EmployeesApi~v2EmployeesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEmployeesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListEmployees
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [locationId] 
     * @param {String} [status] Specifies the EmployeeStatus to filter the employee by.
     * @param {Number} [limit] The number of employees to be returned on each page.
     * @param {String} [cursor] The token required to retrieve the specified page of results.
     * @param {module:api/EmployeesApi~v2EmployeesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEmployeesResponse}
     */
    v2EmployeesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'location_id': opts['locationId'],
        'status': opts['status'],
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEmployeesResponse;
      return this.apiClient.callApi(
        '/v2/employees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2EmployeesIdGet operation.
     * @callback module:api/EmployeesApi~v2EmployeesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveEmployeeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveEmployee
     * 
     * @param {String} id UUID for the employee that was requested.
     * @param {module:api/EmployeesApi~v2EmployeesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveEmployeeResponse}
     */
    v2EmployeesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2EmployeesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveEmployeeResponse;
      return this.apiClient.callApi(
        '/v2/employees/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
