/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDeviceCodeRequest from '../model/CreateDeviceCodeRequest';
import CreateDeviceCodeResponse from '../model/CreateDeviceCodeResponse';
import GetDeviceCodeResponse from '../model/GetDeviceCodeResponse';
import ListDeviceCodesResponse from '../model/ListDeviceCodesResponse';

/**
* Devices service.
* @module api/DevicesApi
* @version 2.0
*/
export default class DevicesApi {

    /**
    * Constructs a new DevicesApi. 
    * @alias module:api/DevicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDeviceCode operation.
     * @callback module:api/DevicesApi~createDeviceCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDeviceCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateDeviceCode
     * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
     * @param {module:model/CreateDeviceCodeRequest} createDeviceCodeRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/DevicesApi~createDeviceCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDeviceCodeResponse}
     */
    createDeviceCode(createDeviceCodeRequest, callback) {
      let postBody = createDeviceCodeRequest;
      // verify the required parameter 'createDeviceCodeRequest' is set
      if (createDeviceCodeRequest === undefined || createDeviceCodeRequest === null) {
        throw new Error("Missing the required parameter 'createDeviceCodeRequest' when calling createDeviceCode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDeviceCodeResponse;
      return this.apiClient.callApi(
        '/v2/devices/codes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceCode operation.
     * @callback module:api/DevicesApi~getDeviceCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetDeviceCode
     * Retrieves DeviceCode with the associated ID.
     * @param {String} id The unique identifier for the device code.
     * @param {module:api/DevicesApi~getDeviceCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceCodeResponse}
     */
    getDeviceCode(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeviceCode");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceCodeResponse;
      return this.apiClient.callApi(
        '/v2/devices/codes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeviceCodes operation.
     * @callback module:api/DevicesApi~listDeviceCodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDeviceCodesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListDeviceCodes
     * Lists all DeviceCodes associated with the merchant.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
     * @param {String} [locationId] If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty.
     * @param {String} [productType] If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty.
     * @param {String} [status] If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status `PAIRED` and `UNPAIRED` if empty.
     * @param {module:api/DevicesApi~listDeviceCodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDeviceCodesResponse}
     */
    listDeviceCodes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'location_id': opts['locationId'],
        'product_type': opts['productType'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDeviceCodesResponse;
      return this.apiClient.callApi(
        '/v2/devices/codes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
