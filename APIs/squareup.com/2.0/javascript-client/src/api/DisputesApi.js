/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptDisputeResponse from '../model/AcceptDisputeResponse';
import CreateDisputeEvidenceTextRequest from '../model/CreateDisputeEvidenceTextRequest';
import CreateDisputeEvidenceTextResponse from '../model/CreateDisputeEvidenceTextResponse';
import DeleteDisputeEvidenceResponse from '../model/DeleteDisputeEvidenceResponse';
import ListDisputeEvidenceResponse from '../model/ListDisputeEvidenceResponse';
import ListDisputesResponse from '../model/ListDisputesResponse';
import RetrieveDisputeEvidenceResponse from '../model/RetrieveDisputeEvidenceResponse';
import RetrieveDisputeResponse from '../model/RetrieveDisputeResponse';
import SubmitEvidenceResponse from '../model/SubmitEvidenceResponse';

/**
* Disputes service.
* @module api/DisputesApi
* @version 2.0
*/
export default class DisputesApi {

    /**
    * Constructs a new DisputesApi. 
    * @alias module:api/DisputesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptDispute operation.
     * @callback module:api/DisputesApi~acceptDisputeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AcceptDisputeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AcceptDispute
     * Accepts the loss on a dispute. Square returns the disputed amount to the cardholder and updates the dispute state to ACCEPTED.  Square debits the disputed amount from the sellerâ€™s Square account. If the Square account does not have sufficient funds, Square debits the associated bank account.
     * @param {String} disputeId The ID of the dispute you want to accept.
     * @param {module:api/DisputesApi~acceptDisputeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AcceptDisputeResponse}
     */
    acceptDispute(disputeId, callback) {
      let postBody = null;
      // verify the required parameter 'disputeId' is set
      if (disputeId === undefined || disputeId === null) {
        throw new Error("Missing the required parameter 'disputeId' when calling acceptDispute");
      }

      let pathParams = {
        'dispute_id': disputeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AcceptDisputeResponse;
      return this.apiClient.callApi(
        '/v2/disputes/{dispute_id}/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDisputeEvidenceText operation.
     * @callback module:api/DisputesApi~createDisputeEvidenceTextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDisputeEvidenceTextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateDisputeEvidenceText
     * Uploads text to use as evidence for a dispute challenge.
     * @param {String} disputeId The ID of the dispute you want to upload evidence for.
     * @param {module:model/CreateDisputeEvidenceTextRequest} createDisputeEvidenceTextRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/DisputesApi~createDisputeEvidenceTextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDisputeEvidenceTextResponse}
     */
    createDisputeEvidenceText(disputeId, createDisputeEvidenceTextRequest, callback) {
      let postBody = createDisputeEvidenceTextRequest;
      // verify the required parameter 'disputeId' is set
      if (disputeId === undefined || disputeId === null) {
        throw new Error("Missing the required parameter 'disputeId' when calling createDisputeEvidenceText");
      }
      // verify the required parameter 'createDisputeEvidenceTextRequest' is set
      if (createDisputeEvidenceTextRequest === undefined || createDisputeEvidenceTextRequest === null) {
        throw new Error("Missing the required parameter 'createDisputeEvidenceTextRequest' when calling createDisputeEvidenceText");
      }

      let pathParams = {
        'dispute_id': disputeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDisputeEvidenceTextResponse;
      return this.apiClient.callApi(
        '/v2/disputes/{dispute_id}/evidence-text', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDisputeEvidence operation.
     * @callback module:api/DisputesApi~deleteDisputeEvidenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDisputeEvidenceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteDisputeEvidence
     * Removes specified evidence from a dispute.  Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after submitting it to the bank using [SubmitEvidence](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/submit-evidence).
     * @param {String} disputeId The ID of the dispute you want to remove evidence from.
     * @param {String} evidenceId The ID of the evidence you want to remove.
     * @param {module:api/DisputesApi~deleteDisputeEvidenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDisputeEvidenceResponse}
     */
    deleteDisputeEvidence(disputeId, evidenceId, callback) {
      let postBody = null;
      // verify the required parameter 'disputeId' is set
      if (disputeId === undefined || disputeId === null) {
        throw new Error("Missing the required parameter 'disputeId' when calling deleteDisputeEvidence");
      }
      // verify the required parameter 'evidenceId' is set
      if (evidenceId === undefined || evidenceId === null) {
        throw new Error("Missing the required parameter 'evidenceId' when calling deleteDisputeEvidence");
      }

      let pathParams = {
        'dispute_id': disputeId,
        'evidence_id': evidenceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteDisputeEvidenceResponse;
      return this.apiClient.callApi(
        '/v2/disputes/{dispute_id}/evidence/{evidence_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDisputeEvidence operation.
     * @callback module:api/DisputesApi~listDisputeEvidenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDisputeEvidenceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListDisputeEvidence
     * Returns a list of evidence associated with a dispute.
     * @param {String} disputeId The ID of the dispute.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {module:api/DisputesApi~listDisputeEvidenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDisputeEvidenceResponse}
     */
    listDisputeEvidence(disputeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'disputeId' is set
      if (disputeId === undefined || disputeId === null) {
        throw new Error("Missing the required parameter 'disputeId' when calling listDisputeEvidence");
      }

      let pathParams = {
        'dispute_id': disputeId
      };
      let queryParams = {
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDisputeEvidenceResponse;
      return this.apiClient.callApi(
        '/v2/disputes/{dispute_id}/evidence', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDisputes operation.
     * @callback module:api/DisputesApi~listDisputesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDisputesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListDisputes
     * Returns a list of disputes associated with a particular account.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {String} [states] The dispute states to filter the result. If not specified, the endpoint returns all open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`, or `LOST`).
     * @param {String} [locationId] The ID of the location for which to return a list of disputes. If not specified, the endpoint returns all open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`, or `LOST`) associated with all locations.
     * @param {module:api/DisputesApi~listDisputesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDisputesResponse}
     */
    listDisputes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'states': opts['states'],
        'location_id': opts['locationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDisputesResponse;
      return this.apiClient.callApi(
        '/v2/disputes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveDispute operation.
     * @callback module:api/DisputesApi~retrieveDisputeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveDisputeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveDispute
     * Returns details about a specific dispute.
     * @param {String} disputeId The ID of the dispute you want more details about.
     * @param {module:api/DisputesApi~retrieveDisputeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveDisputeResponse}
     */
    retrieveDispute(disputeId, callback) {
      let postBody = null;
      // verify the required parameter 'disputeId' is set
      if (disputeId === undefined || disputeId === null) {
        throw new Error("Missing the required parameter 'disputeId' when calling retrieveDispute");
      }

      let pathParams = {
        'dispute_id': disputeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveDisputeResponse;
      return this.apiClient.callApi(
        '/v2/disputes/{dispute_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveDisputeEvidence operation.
     * @callback module:api/DisputesApi~retrieveDisputeEvidenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveDisputeEvidenceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveDisputeEvidence
     * Returns the evidence metadata specified by the evidence ID in the request URL path  You must maintain a copy of the evidence you upload if you want to reference it later. You cannot download the evidence after you upload it.
     * @param {String} disputeId The ID of the dispute that you want to retrieve evidence from.
     * @param {String} evidenceId The ID of the evidence to retrieve.
     * @param {module:api/DisputesApi~retrieveDisputeEvidenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveDisputeEvidenceResponse}
     */
    retrieveDisputeEvidence(disputeId, evidenceId, callback) {
      let postBody = null;
      // verify the required parameter 'disputeId' is set
      if (disputeId === undefined || disputeId === null) {
        throw new Error("Missing the required parameter 'disputeId' when calling retrieveDisputeEvidence");
      }
      // verify the required parameter 'evidenceId' is set
      if (evidenceId === undefined || evidenceId === null) {
        throw new Error("Missing the required parameter 'evidenceId' when calling retrieveDisputeEvidence");
      }

      let pathParams = {
        'dispute_id': disputeId,
        'evidence_id': evidenceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveDisputeEvidenceResponse;
      return this.apiClient.callApi(
        '/v2/disputes/{dispute_id}/evidence/{evidence_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitEvidence operation.
     * @callback module:api/DisputesApi~submitEvidenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmitEvidenceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SubmitEvidence
     * Submits evidence to the cardholder's bank.  Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded using the [CreateDisputeEvidenceFile](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-file) and [CreateDisputeEvidenceText](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-text) endpoints and evidence automatically provided by Square, when available.
     * @param {String} disputeId The ID of the dispute that you want to submit evidence for.
     * @param {module:api/DisputesApi~submitEvidenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubmitEvidenceResponse}
     */
    submitEvidence(disputeId, callback) {
      let postBody = null;
      // verify the required parameter 'disputeId' is set
      if (disputeId === undefined || disputeId === null) {
        throw new Error("Missing the required parameter 'disputeId' when calling submitEvidence");
      }

      let pathParams = {
        'dispute_id': disputeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubmitEvidenceResponse;
      return this.apiClient.callApi(
        '/v2/disputes/{dispute_id}/submit-evidence', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
