/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelBookingRequest from '../model/CancelBookingRequest';
import CancelBookingResponse from '../model/CancelBookingResponse';
import CreateBookingRequest from '../model/CreateBookingRequest';
import CreateBookingResponse from '../model/CreateBookingResponse';
import ListTeamMemberBookingProfilesResponse from '../model/ListTeamMemberBookingProfilesResponse';
import RetrieveBookingResponse from '../model/RetrieveBookingResponse';
import RetrieveBusinessBookingProfileResponse from '../model/RetrieveBusinessBookingProfileResponse';
import RetrieveTeamMemberBookingProfileResponse from '../model/RetrieveTeamMemberBookingProfileResponse';
import SearchAvailabilityRequest from '../model/SearchAvailabilityRequest';
import SearchAvailabilityResponse from '../model/SearchAvailabilityResponse';
import UpdateBookingRequest from '../model/UpdateBookingRequest';
import UpdateBookingResponse from '../model/UpdateBookingResponse';

/**
* Bookings service.
* @module api/BookingsApi
* @version 2.0
*/
export default class BookingsApi {

    /**
    * Constructs a new BookingsApi. 
    * @alias module:api/BookingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelBooking operation.
     * @callback module:api/BookingsApi~cancelBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelBookingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CancelBooking
     * Cancels an existing booking.
     * @param {String} bookingId The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-cancelled booking.
     * @param {module:model/CancelBookingRequest} cancelBookingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/BookingsApi~cancelBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelBookingResponse}
     */
    cancelBooking(bookingId, cancelBookingRequest, callback) {
      let postBody = cancelBookingRequest;
      // verify the required parameter 'bookingId' is set
      if (bookingId === undefined || bookingId === null) {
        throw new Error("Missing the required parameter 'bookingId' when calling cancelBooking");
      }
      // verify the required parameter 'cancelBookingRequest' is set
      if (cancelBookingRequest === undefined || cancelBookingRequest === null) {
        throw new Error("Missing the required parameter 'cancelBookingRequest' when calling cancelBooking");
      }

      let pathParams = {
        'booking_id': bookingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelBookingResponse;
      return this.apiClient.callApi(
        '/v2/bookings/{booking_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBooking operation.
     * @callback module:api/BookingsApi~createBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBookingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateBooking
     * Creates a booking.
     * @param {module:model/CreateBookingRequest} createBookingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/BookingsApi~createBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBookingResponse}
     */
    createBooking(createBookingRequest, callback) {
      let postBody = createBookingRequest;
      // verify the required parameter 'createBookingRequest' is set
      if (createBookingRequest === undefined || createBookingRequest === null) {
        throw new Error("Missing the required parameter 'createBookingRequest' when calling createBooking");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBookingResponse;
      return this.apiClient.callApi(
        '/v2/bookings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTeamMemberBookingProfiles operation.
     * @callback module:api/BookingsApi~listTeamMemberBookingProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTeamMemberBookingProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListTeamMemberBookingProfiles
     * Lists booking profiles for team members.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [bookableOnly] Indicates whether to include only bookable team members in the returned result (`true`) or not (`false`).
     * @param {Number} [limit] The maximum number of results to return.
     * @param {String} [cursor] The cursor for paginating through the results.
     * @param {String} [locationId] Indicates whether to include only team members enabled at the given location in the returned result.
     * @param {module:api/BookingsApi~listTeamMemberBookingProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTeamMemberBookingProfilesResponse}
     */
    listTeamMemberBookingProfiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'bookable_only': opts['bookableOnly'],
        'limit': opts['limit'],
        'cursor': opts['cursor'],
        'location_id': opts['locationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTeamMemberBookingProfilesResponse;
      return this.apiClient.callApi(
        '/v2/bookings/team-member-booking-profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveBooking operation.
     * @callback module:api/BookingsApi~retrieveBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveBookingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveBooking
     * Retrieves a booking.
     * @param {String} bookingId The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-retrieved booking.
     * @param {module:api/BookingsApi~retrieveBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveBookingResponse}
     */
    retrieveBooking(bookingId, callback) {
      let postBody = null;
      // verify the required parameter 'bookingId' is set
      if (bookingId === undefined || bookingId === null) {
        throw new Error("Missing the required parameter 'bookingId' when calling retrieveBooking");
      }

      let pathParams = {
        'booking_id': bookingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveBookingResponse;
      return this.apiClient.callApi(
        '/v2/bookings/{booking_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveBusinessBookingProfile operation.
     * @callback module:api/BookingsApi~retrieveBusinessBookingProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveBusinessBookingProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveBusinessBookingProfile
     * Retrieves a seller's booking profile.
     * @param {module:api/BookingsApi~retrieveBusinessBookingProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveBusinessBookingProfileResponse}
     */
    retrieveBusinessBookingProfile(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveBusinessBookingProfileResponse;
      return this.apiClient.callApi(
        '/v2/bookings/business-booking-profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveTeamMemberBookingProfile operation.
     * @callback module:api/BookingsApi~retrieveTeamMemberBookingProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveTeamMemberBookingProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveTeamMemberBookingProfile
     * Retrieves a team member's booking profile.
     * @param {String} teamMemberId The ID of the team member to retrieve.
     * @param {module:api/BookingsApi~retrieveTeamMemberBookingProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveTeamMemberBookingProfileResponse}
     */
    retrieveTeamMemberBookingProfile(teamMemberId, callback) {
      let postBody = null;
      // verify the required parameter 'teamMemberId' is set
      if (teamMemberId === undefined || teamMemberId === null) {
        throw new Error("Missing the required parameter 'teamMemberId' when calling retrieveTeamMemberBookingProfile");
      }

      let pathParams = {
        'team_member_id': teamMemberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveTeamMemberBookingProfileResponse;
      return this.apiClient.callApi(
        '/v2/bookings/team-member-booking-profiles/{team_member_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAvailability operation.
     * @callback module:api/BookingsApi~searchAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchAvailabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SearchAvailability
     * Searches for availabilities for booking.
     * @param {module:model/SearchAvailabilityRequest} searchAvailabilityRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/BookingsApi~searchAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchAvailabilityResponse}
     */
    searchAvailability(searchAvailabilityRequest, callback) {
      let postBody = searchAvailabilityRequest;
      // verify the required parameter 'searchAvailabilityRequest' is set
      if (searchAvailabilityRequest === undefined || searchAvailabilityRequest === null) {
        throw new Error("Missing the required parameter 'searchAvailabilityRequest' when calling searchAvailability");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchAvailabilityResponse;
      return this.apiClient.callApi(
        '/v2/bookings/availability/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBooking operation.
     * @callback module:api/BookingsApi~updateBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBookingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateBooking
     * Updates a booking.
     * @param {String} bookingId The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-updated booking.
     * @param {module:model/UpdateBookingRequest} updateBookingRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/BookingsApi~updateBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBookingResponse}
     */
    updateBooking(bookingId, updateBookingRequest, callback) {
      let postBody = updateBookingRequest;
      // verify the required parameter 'bookingId' is set
      if (bookingId === undefined || bookingId === null) {
        throw new Error("Missing the required parameter 'bookingId' when calling updateBooking");
      }
      // verify the required parameter 'updateBookingRequest' is set
      if (updateBookingRequest === undefined || updateBookingRequest === null) {
        throw new Error("Missing the required parameter 'updateBookingRequest' when calling updateBooking");
      }

      let pathParams = {
        'booking_id': bookingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBookingResponse;
      return this.apiClient.callApi(
        '/v2/bookings/{booking_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
