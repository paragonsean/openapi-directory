/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListMerchantsResponse from '../model/ListMerchantsResponse';
import RetrieveMerchantResponse from '../model/RetrieveMerchantResponse';

/**
* Merchants service.
* @module api/MerchantsApi
* @version 2.0
*/
export default class MerchantsApi {

    /**
    * Constructs a new MerchantsApi. 
    * @alias module:api/MerchantsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listMerchants operation.
     * @callback module:api/MerchantsApi~listMerchantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMerchantsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListMerchants
     * Returns `Merchant` information for a given access token.  If you don't know a `Merchant` ID, you can use this endpoint to retrieve the merchant ID for an access token. You can specify your personal access token to get your own merchant information or specify an OAuth token to get the information for the  merchant that granted you access.  If you know the merchant ID, you can also use the [RetrieveMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/retrieve-merchant) endpoint to get the merchant information.
     * @param {Object} opts Optional parameters
     * @param {Number} [cursor] The cursor generated by the previous response.
     * @param {module:api/MerchantsApi~listMerchantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMerchantsResponse}
     */
    listMerchants(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMerchantsResponse;
      return this.apiClient.callApi(
        '/v2/merchants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveMerchant operation.
     * @callback module:api/MerchantsApi~retrieveMerchantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveMerchantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveMerchant
     * Retrieve a `Merchant` object for the given `merchant_id`.
     * @param {String} merchantId The ID of the merchant to retrieve. If the string \"me\" is supplied as the ID, then retrieve the merchant that is currently accessible to this call.
     * @param {module:api/MerchantsApi~retrieveMerchantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveMerchantResponse}
     */
    retrieveMerchant(merchantId, callback) {
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling retrieveMerchant");
      }

      let pathParams = {
        'merchant_id': merchantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveMerchantResponse;
      return this.apiClient.callApi(
        '/v2/merchants/{merchant_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
