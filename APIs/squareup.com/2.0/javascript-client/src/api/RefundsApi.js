/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetPaymentRefundResponse from '../model/GetPaymentRefundResponse';
import ListPaymentRefundsResponse from '../model/ListPaymentRefundsResponse';
import RefundPaymentRequest from '../model/RefundPaymentRequest';
import RefundPaymentResponse from '../model/RefundPaymentResponse';

/**
* Refunds service.
* @module api/RefundsApi
* @version 2.0
*/
export default class RefundsApi {

    /**
    * Constructs a new RefundsApi. 
    * @alias module:api/RefundsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPaymentRefund operation.
     * @callback module:api/RefundsApi~getPaymentRefundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPaymentRefundResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPaymentRefund
     * Retrieves a specific refund using the `refund_id`.
     * @param {String} refundId The unique ID for the desired `PaymentRefund`.
     * @param {module:api/RefundsApi~getPaymentRefundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPaymentRefundResponse}
     */
    getPaymentRefund(refundId, callback) {
      let postBody = null;
      // verify the required parameter 'refundId' is set
      if (refundId === undefined || refundId === null) {
        throw new Error("Missing the required parameter 'refundId' when calling getPaymentRefund");
      }

      let pathParams = {
        'refund_id': refundId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPaymentRefundResponse;
      return this.apiClient.callApi(
        '/v2/refunds/{refund_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPaymentRefunds operation.
     * @callback module:api/RefundsApi~listPaymentRefundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPaymentRefundsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListPaymentRefunds
     * Retrieves a list of refunds for the account making the request.  Results are eventually consistent, and new refunds or changes to refunds might take several seconds to appear.  The maximum results per page is 100.
     * @param {Object} opts Optional parameters
     * @param {String} [beginTime] The timestamp for the beginning of the requested reporting period, in RFC 3339 format.  Default: The current time minus one year.
     * @param {String} [endTime] The timestamp for the end of the requested reporting period, in RFC 3339 format.  Default: The current time.
     * @param {String} [sortOrder] The order in which results are listed: - `ASC` - Oldest to newest. - `DESC` - Newest to oldest (default).
     * @param {String} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
     * @param {String} [locationId] Limit results to the location supplied. By default, results are returned for all locations associated with the seller.
     * @param {String} [status] If provided, only refunds with the given status are returned. For a list of refund status values, see [PaymentRefund](https://developer.squareup.com/reference/square_2021-08-18/objects/PaymentRefund).  Default: If omitted, refunds are returned regardless of their status.
     * @param {String} [sourceType] If provided, only refunds with the given source type are returned. - `CARD` - List refunds only for payments where `CARD` was specified as the payment source.  Default: If omitted, refunds are returned regardless of the source type.
     * @param {Number} [limit] The maximum number of results to be returned in a single page.  It is possible to receive fewer results than the specified limit on a given page.  If the supplied value is greater than 100, no more than 100 results are returned.  Default: 100
     * @param {module:api/RefundsApi~listPaymentRefundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPaymentRefundsResponse}
     */
    listPaymentRefunds(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'begin_time': opts['beginTime'],
        'end_time': opts['endTime'],
        'sort_order': opts['sortOrder'],
        'cursor': opts['cursor'],
        'location_id': opts['locationId'],
        'status': opts['status'],
        'source_type': opts['sourceType'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPaymentRefundsResponse;
      return this.apiClient.callApi(
        '/v2/refunds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refundPayment operation.
     * @callback module:api/RefundsApi~refundPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundPaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RefundPayment
     * Refunds a payment. You can refund the entire payment amount or a portion of it. You can use this endpoint to refund a card payment or record a  refund of a cash or external payment. For more information, see [Refund Payment](https://developer.squareup.com/docs/payments-api/refund-payments).
     * @param {module:model/RefundPaymentRequest} refundPaymentRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/RefundsApi~refundPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundPaymentResponse}
     */
    refundPayment(refundPaymentRequest, callback) {
      let postBody = refundPaymentRequest;
      // verify the required parameter 'refundPaymentRequest' is set
      if (refundPaymentRequest === undefined || refundPaymentRequest === null) {
        throw new Error("Missing the required parameter 'refundPaymentRequest' when calling refundPayment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RefundPaymentResponse;
      return this.apiClient.callApi(
        '/v2/refunds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
