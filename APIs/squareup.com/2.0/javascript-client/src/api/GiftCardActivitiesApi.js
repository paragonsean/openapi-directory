/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateGiftCardActivityRequest from '../model/CreateGiftCardActivityRequest';
import CreateGiftCardActivityResponse from '../model/CreateGiftCardActivityResponse';
import ListGiftCardActivitiesResponse from '../model/ListGiftCardActivitiesResponse';

/**
* GiftCardActivities service.
* @module api/GiftCardActivitiesApi
* @version 2.0
*/
export default class GiftCardActivitiesApi {

    /**
    * Constructs a new GiftCardActivitiesApi. 
    * @alias module:api/GiftCardActivitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createGiftCardActivity operation.
     * @callback module:api/GiftCardActivitiesApi~createGiftCardActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGiftCardActivityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateGiftCardActivity
     * Creates a gift card activity. For more information, see  [GiftCardActivity](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#giftcardactivity) and  [Using activated gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#using-activated-gift-cards).
     * @param {module:model/CreateGiftCardActivityRequest} createGiftCardActivityRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/GiftCardActivitiesApi~createGiftCardActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGiftCardActivityResponse}
     */
    createGiftCardActivity(createGiftCardActivityRequest, callback) {
      let postBody = createGiftCardActivityRequest;
      // verify the required parameter 'createGiftCardActivityRequest' is set
      if (createGiftCardActivityRequest === undefined || createGiftCardActivityRequest === null) {
        throw new Error("Missing the required parameter 'createGiftCardActivityRequest' when calling createGiftCardActivity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGiftCardActivityResponse;
      return this.apiClient.callApi(
        '/v2/gift-cards/activities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGiftCardActivities operation.
     * @callback module:api/GiftCardActivitiesApi~listGiftCardActivitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListGiftCardActivitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListGiftCardActivities
     * Lists gift card activities. By default, you get gift card activities for all gift cards in the seller's account. You can optionally specify query parameters to filter the list. For example, you can get a list of gift card activities for a gift card, for all gift cards in a specific region, or for activities within a time window.
     * @param {Object} opts Optional parameters
     * @param {String} [giftCardId] If you provide a gift card ID, the endpoint returns activities that belong  to the specified gift card. Otherwise, the endpoint returns all gift card activities for  the seller.
     * @param {String} [type] If you provide a type, the endpoint returns gift card activities of this type.  Otherwise, the endpoint returns all types of gift card activities.
     * @param {String} [locationId] If you provide a location ID, the endpoint returns gift card activities for that location.  Otherwise, the endpoint returns gift card activities for all locations.
     * @param {String} [beginTime] The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive. Default: The current time minus one year.
     * @param {String} [endTime] The timestamp for the end of the reporting period, in RFC 3339 format. Inclusive. Default: The current time.
     * @param {Number} [limit] If you provide a limit value, the endpoint returns the specified number  of results (or less) per page. A maximum value is 100. The default value is 50.
     * @param {String} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If you do not provide the cursor, the call returns the first page of the results.
     * @param {String} [sortOrder] The order in which the endpoint returns the activities, based on `created_at`. - `ASC` - Oldest to newest. - `DESC` - Newest to oldest (default).
     * @param {module:api/GiftCardActivitiesApi~listGiftCardActivitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListGiftCardActivitiesResponse}
     */
    listGiftCardActivities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'gift_card_id': opts['giftCardId'],
        'type': opts['type'],
        'location_id': opts['locationId'],
        'begin_time': opts['beginTime'],
        'end_time': opts['endTime'],
        'limit': opts['limit'],
        'cursor': opts['cursor'],
        'sort_order': opts['sortOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListGiftCardActivitiesResponse;
      return this.apiClient.callApi(
        '/v2/gift-cards/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
