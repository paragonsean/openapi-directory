/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelSubscriptionResponse from '../model/CancelSubscriptionResponse';
import CreateSubscriptionRequest from '../model/CreateSubscriptionRequest';
import CreateSubscriptionResponse from '../model/CreateSubscriptionResponse';
import ListSubscriptionEventsResponse from '../model/ListSubscriptionEventsResponse';
import ResumeSubscriptionResponse from '../model/ResumeSubscriptionResponse';
import RetrieveSubscriptionResponse from '../model/RetrieveSubscriptionResponse';
import SearchSubscriptionsRequest from '../model/SearchSubscriptionsRequest';
import SearchSubscriptionsResponse from '../model/SearchSubscriptionsResponse';
import UpdateSubscriptionRequest from '../model/UpdateSubscriptionRequest';
import UpdateSubscriptionResponse from '../model/UpdateSubscriptionResponse';

/**
* Subscriptions service.
* @module api/SubscriptionsApi
* @version 2.0
*/
export default class SubscriptionsApi {

    /**
    * Constructs a new SubscriptionsApi. 
    * @alias module:api/SubscriptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelSubscription operation.
     * @callback module:api/SubscriptionsApi~cancelSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CancelSubscription
     * Sets the `canceled_date` field to the end of the active billing period. After this date, the status changes from ACTIVE to CANCELED.
     * @param {String} subscriptionId The ID of the subscription to cancel.
     * @param {module:api/SubscriptionsApi~cancelSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelSubscriptionResponse}
     */
    cancelSubscription(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cancelSubscription");
      }

      let pathParams = {
        'subscription_id': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CancelSubscriptionResponse;
      return this.apiClient.callApi(
        '/v2/subscriptions/{subscription_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSubscription operation.
     * @callback module:api/SubscriptionsApi~createSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateSubscription
     * Creates a subscription for a customer to a subscription plan.  If you provide a card on file in the request, Square charges the card for the subscription. Otherwise, Square bills an invoice to the customer's email address. The subscription starts immediately, unless the request includes the optional `start_date`. Each individual subscription is associated with a particular location.
     * @param {module:model/CreateSubscriptionRequest} createSubscriptionRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/SubscriptionsApi~createSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSubscriptionResponse}
     */
    createSubscription(createSubscriptionRequest, callback) {
      let postBody = createSubscriptionRequest;
      // verify the required parameter 'createSubscriptionRequest' is set
      if (createSubscriptionRequest === undefined || createSubscriptionRequest === null) {
        throw new Error("Missing the required parameter 'createSubscriptionRequest' when calling createSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSubscriptionResponse;
      return this.apiClient.callApi(
        '/v2/subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSubscriptionEvents operation.
     * @callback module:api/SubscriptionsApi~listSubscriptionEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSubscriptionEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListSubscriptionEvents
     * Lists all events for a specific subscription. In the current implementation, only `START_SUBSCRIPTION` and `STOP_SUBSCRIPTION` (when the subscription was canceled) events are returned.
     * @param {String} subscriptionId The ID of the subscription to retrieve the events for.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for the original query.  For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
     * @param {Number} [limit] The upper limit on the number of subscription events to return in the response.  Default: `200`
     * @param {module:api/SubscriptionsApi~listSubscriptionEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSubscriptionEventsResponse}
     */
    listSubscriptionEvents(subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling listSubscriptionEvents");
      }

      let pathParams = {
        'subscription_id': subscriptionId
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSubscriptionEventsResponse;
      return this.apiClient.callApi(
        '/v2/subscriptions/{subscription_id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resumeSubscription operation.
     * @callback module:api/SubscriptionsApi~resumeSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResumeSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ResumeSubscription
     * Resumes a deactivated subscription.
     * @param {String} subscriptionId The ID of the subscription to resume.
     * @param {module:api/SubscriptionsApi~resumeSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResumeSubscriptionResponse}
     */
    resumeSubscription(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling resumeSubscription");
      }

      let pathParams = {
        'subscription_id': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResumeSubscriptionResponse;
      return this.apiClient.callApi(
        '/v2/subscriptions/{subscription_id}/resume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveSubscription operation.
     * @callback module:api/SubscriptionsApi~retrieveSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveSubscription
     * Retrieves a subscription.
     * @param {String} subscriptionId The ID of the subscription to retrieve.
     * @param {module:api/SubscriptionsApi~retrieveSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveSubscriptionResponse}
     */
    retrieveSubscription(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling retrieveSubscription");
      }

      let pathParams = {
        'subscription_id': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveSubscriptionResponse;
      return this.apiClient.callApi(
        '/v2/subscriptions/{subscription_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSubscriptions operation.
     * @callback module:api/SubscriptionsApi~searchSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchSubscriptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SearchSubscriptions
     * Searches for subscriptions. Results are ordered chronologically by subscription creation date. If the request specifies more than one location ID, the endpoint orders the result by location ID, and then by creation date within each location. If no locations are given in the query, all locations are searched.  You can also optionally specify `customer_ids` to search by customer. If left unset, all customers associated with the specified locations are returned. If the request specifies customer IDs, the endpoint orders results first by location, within location by customer ID, and within customer by subscription creation date.  For more information, see [Retrieve subscriptions](https://developer.squareup.com/docs/subscriptions-api/overview#retrieve-subscriptions).
     * @param {module:model/SearchSubscriptionsRequest} searchSubscriptionsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/SubscriptionsApi~searchSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchSubscriptionsResponse}
     */
    searchSubscriptions(searchSubscriptionsRequest, callback) {
      let postBody = searchSubscriptionsRequest;
      // verify the required parameter 'searchSubscriptionsRequest' is set
      if (searchSubscriptionsRequest === undefined || searchSubscriptionsRequest === null) {
        throw new Error("Missing the required parameter 'searchSubscriptionsRequest' when calling searchSubscriptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchSubscriptionsResponse;
      return this.apiClient.callApi(
        '/v2/subscriptions/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSubscription operation.
     * @callback module:api/SubscriptionsApi~updateSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateSubscription
     * Updates a subscription. You can set, modify, and clear the `subscription` field values.
     * @param {String} subscriptionId The ID for the subscription to update.
     * @param {module:model/UpdateSubscriptionRequest} updateSubscriptionRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/SubscriptionsApi~updateSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSubscriptionResponse}
     */
    updateSubscription(subscriptionId, updateSubscriptionRequest, callback) {
      let postBody = updateSubscriptionRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling updateSubscription");
      }
      // verify the required parameter 'updateSubscriptionRequest' is set
      if (updateSubscriptionRequest === undefined || updateSubscriptionRequest === null) {
        throw new Error("Missing the required parameter 'updateSubscriptionRequest' when calling updateSubscription");
      }

      let pathParams = {
        'subscription_id': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSubscriptionResponse;
      return this.apiClient.callApi(
        '/v2/subscriptions/{subscription_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
