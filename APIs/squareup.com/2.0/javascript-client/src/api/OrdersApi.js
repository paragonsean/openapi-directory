/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchRetrieveOrdersRequest from '../model/BatchRetrieveOrdersRequest';
import BatchRetrieveOrdersResponse from '../model/BatchRetrieveOrdersResponse';
import CalculateOrderRequest from '../model/CalculateOrderRequest';
import CalculateOrderResponse from '../model/CalculateOrderResponse';
import CreateOrderRequest from '../model/CreateOrderRequest';
import CreateOrderResponse from '../model/CreateOrderResponse';
import PayOrderRequest from '../model/PayOrderRequest';
import PayOrderResponse from '../model/PayOrderResponse';
import RetrieveOrderResponse from '../model/RetrieveOrderResponse';
import SearchOrdersRequest from '../model/SearchOrdersRequest';
import SearchOrdersResponse from '../model/SearchOrdersResponse';
import UpdateOrderRequest from '../model/UpdateOrderRequest';
import UpdateOrderResponse from '../model/UpdateOrderResponse';

/**
* Orders service.
* @module api/OrdersApi
* @version 2.0
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchRetrieveOrders operation.
     * @callback module:api/OrdersApi~batchRetrieveOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchRetrieveOrdersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BatchRetrieveOrders
     * Retrieves a set of [orders](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by their IDs.  If a given order ID does not exist, the ID is ignored instead of generating an error.
     * @param {module:model/BatchRetrieveOrdersRequest} batchRetrieveOrdersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/OrdersApi~batchRetrieveOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchRetrieveOrdersResponse}
     */
    batchRetrieveOrders(batchRetrieveOrdersRequest, callback) {
      let postBody = batchRetrieveOrdersRequest;
      // verify the required parameter 'batchRetrieveOrdersRequest' is set
      if (batchRetrieveOrdersRequest === undefined || batchRetrieveOrdersRequest === null) {
        throw new Error("Missing the required parameter 'batchRetrieveOrdersRequest' when calling batchRetrieveOrders");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchRetrieveOrdersResponse;
      return this.apiClient.callApi(
        '/v2/orders/batch-retrieve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateOrder operation.
     * @callback module:api/OrdersApi~calculateOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalculateOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CalculateOrder
     * Enables applications to preview order pricing without creating an order.
     * @param {module:model/CalculateOrderRequest} calculateOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/OrdersApi~calculateOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalculateOrderResponse}
     */
    calculateOrder(calculateOrderRequest, callback) {
      let postBody = calculateOrderRequest;
      // verify the required parameter 'calculateOrderRequest' is set
      if (calculateOrderRequest === undefined || calculateOrderRequest === null) {
        throw new Error("Missing the required parameter 'calculateOrderRequest' when calling calculateOrder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CalculateOrderResponse;
      return this.apiClient.callApi(
        '/v2/orders/calculate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrder operation.
     * @callback module:api/OrdersApi~createOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateOrder
     * Creates a new [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that can include information about products for purchase and settings to apply to the purchase.  To pay for a created order, see  [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).  You can modify open orders using the [UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
     * @param {module:model/CreateOrderRequest} createOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/OrdersApi~createOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrderResponse}
     */
    createOrder(createOrderRequest, callback) {
      let postBody = createOrderRequest;
      // verify the required parameter 'createOrderRequest' is set
      if (createOrderRequest === undefined || createOrderRequest === null) {
        throw new Error("Missing the required parameter 'createOrderRequest' when calling createOrder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateOrderResponse;
      return this.apiClient.callApi(
        '/v2/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the payOrder operation.
     * @callback module:api/OrdersApi~payOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PayOrder
     * Pay for an [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) using one or more approved [payments](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) or settle an order with a total of `0`.  The total of the `payment_ids` listed in the request must be equal to the order total. Orders with a total amount of `0` can be marked as paid by specifying an empty array of `payment_ids` in the request.  To be used with `PayOrder`, a payment must:  - Reference the order by specifying the `order_id` when [creating the payment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment). Any approved payments that reference the same `order_id` not specified in the `payment_ids` is canceled. - Be approved with [delayed capture](https://developer.squareup.com/docs/payments-api/take-payments#delayed-capture). Using a delayed capture payment with `PayOrder` completes the approved payment.
     * @param {String} orderId The ID of the order being paid.
     * @param {module:model/PayOrderRequest} payOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/OrdersApi~payOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayOrderResponse}
     */
    payOrder(orderId, payOrderRequest, callback) {
      let postBody = payOrderRequest;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling payOrder");
      }
      // verify the required parameter 'payOrderRequest' is set
      if (payOrderRequest === undefined || payOrderRequest === null) {
        throw new Error("Missing the required parameter 'payOrderRequest' when calling payOrder");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PayOrderResponse;
      return this.apiClient.callApi(
        '/v2/orders/{order_id}/pay', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchOrders operation.
     * @callback module:api/OrdersApi~searchOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchOrdersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SearchOrders
     * Search all orders for one or more locations. Orders include all sales, returns, and exchanges regardless of how or when they entered the Square ecosystem (such as Point of Sale, Invoices, and Connect APIs).  `SearchOrders` requests need to specify which locations to search and define a [SearchOrdersQuery](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersQuery) object that controls how to sort or filter the results. Your `SearchOrdersQuery` can:    Set filter criteria.   Set the sort order.   Determine whether to return results as complete `Order` objects or as [OrderEntry](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) objects.  Note that details for orders processed with Square Point of Sale while in offline mode might not be transmitted to Square for up to 72 hours. Offline orders have a `created_at` value that reflects the time the order was created, not the time it was subsequently transmitted to Square.
     * @param {module:model/SearchOrdersRequest} searchOrdersRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/OrdersApi~searchOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchOrdersResponse}
     */
    searchOrders(searchOrdersRequest, callback) {
      let postBody = searchOrdersRequest;
      // verify the required parameter 'searchOrdersRequest' is set
      if (searchOrdersRequest === undefined || searchOrdersRequest === null) {
        throw new Error("Missing the required parameter 'searchOrdersRequest' when calling searchOrders");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchOrdersResponse;
      return this.apiClient.callApi(
        '/v2/orders/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2OrdersOrderIdGet operation.
     * @callback module:api/OrdersApi~v2OrdersOrderIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveOrder
     * Retrieves an [Order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by ID.
     * @param {String} orderId The ID of the order to retrieve.
     * @param {module:api/OrdersApi~v2OrdersOrderIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveOrderResponse}
     */
    v2OrdersOrderIdGet(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling v2OrdersOrderIdGet");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveOrderResponse;
      return this.apiClient.callApi(
        '/v2/orders/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2OrdersOrderIdPut operation.
     * @callback module:api/OrdersApi~v2OrdersOrderIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateOrder
     * Updates an open [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by adding, replacing, or deleting fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.  An `UpdateOrder` request requires the following:  - The `order_id` in the endpoint path, identifying the order to update. - The latest `version` of the order to update. - The [sparse order](https://developer.squareup.com/docs/orders-api/manage-orders#sparse-order-objects) containing only the fields to update and the version to which the update is being applied. - If deleting fields, the [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation) identifying the fields to clear.  To pay for an order, see  [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).
     * @param {String} orderId The ID of the order to update.
     * @param {module:model/UpdateOrderRequest} updateOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/OrdersApi~v2OrdersOrderIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateOrderResponse}
     */
    v2OrdersOrderIdPut(orderId, updateOrderRequest, callback) {
      let postBody = updateOrderRequest;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling v2OrdersOrderIdPut");
      }
      // verify the required parameter 'updateOrderRequest' is set
      if (updateOrderRequest === undefined || updateOrderRequest === null) {
        throw new Error("Missing the required parameter 'updateOrderRequest' when calling v2OrdersOrderIdPut");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateOrderResponse;
      return this.apiClient.callApi(
        '/v2/orders/{order_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
