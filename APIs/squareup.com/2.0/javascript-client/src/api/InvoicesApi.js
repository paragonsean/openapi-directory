/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelInvoiceRequest from '../model/CancelInvoiceRequest';
import CancelInvoiceResponse from '../model/CancelInvoiceResponse';
import CreateInvoiceRequest from '../model/CreateInvoiceRequest';
import CreateInvoiceResponse from '../model/CreateInvoiceResponse';
import DeleteInvoiceResponse from '../model/DeleteInvoiceResponse';
import GetInvoiceResponse from '../model/GetInvoiceResponse';
import ListInvoicesResponse from '../model/ListInvoicesResponse';
import PublishInvoiceRequest from '../model/PublishInvoiceRequest';
import PublishInvoiceResponse from '../model/PublishInvoiceResponse';
import SearchInvoicesRequest from '../model/SearchInvoicesRequest';
import SearchInvoicesResponse from '../model/SearchInvoicesResponse';
import UpdateInvoiceRequest from '../model/UpdateInvoiceRequest';
import UpdateInvoiceResponse from '../model/UpdateInvoiceResponse';

/**
* Invoices service.
* @module api/InvoicesApi
* @version 2.0
*/
export default class InvoicesApi {

    /**
    * Constructs a new InvoicesApi. 
    * @alias module:api/InvoicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelInvoice operation.
     * @callback module:api/InvoicesApi~cancelInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelInvoiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CancelInvoice
     * Cancels an invoice. The seller cannot collect payments for  the canceled invoice.  You cannot cancel an invoice in the `DRAFT` state or in a terminal state: `PAID`, `REFUNDED`, `CANCELED`, or `FAILED`.
     * @param {String} invoiceId The ID of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to cancel.
     * @param {module:model/CancelInvoiceRequest} cancelInvoiceRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/InvoicesApi~cancelInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelInvoiceResponse}
     */
    cancelInvoice(invoiceId, cancelInvoiceRequest, callback) {
      let postBody = cancelInvoiceRequest;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling cancelInvoice");
      }
      // verify the required parameter 'cancelInvoiceRequest' is set
      if (cancelInvoiceRequest === undefined || cancelInvoiceRequest === null) {
        throw new Error("Missing the required parameter 'cancelInvoiceRequest' when calling cancelInvoice");
      }

      let pathParams = {
        'invoice_id': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelInvoiceResponse;
      return this.apiClient.callApi(
        '/v2/invoices/{invoice_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInvoice operation.
     * @callback module:api/InvoicesApi~createInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateInvoiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateInvoice
     * Creates a draft [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice)  for an order created using the Orders API.  A draft invoice remains in your account and no action is taken.  You must publish the invoice before Square can process it (send it to the customer's email address or charge the customerâ€™s card on file).
     * @param {module:model/CreateInvoiceRequest} createInvoiceRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/InvoicesApi~createInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateInvoiceResponse}
     */
    createInvoice(createInvoiceRequest, callback) {
      let postBody = createInvoiceRequest;
      // verify the required parameter 'createInvoiceRequest' is set
      if (createInvoiceRequest === undefined || createInvoiceRequest === null) {
        throw new Error("Missing the required parameter 'createInvoiceRequest' when calling createInvoice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateInvoiceResponse;
      return this.apiClient.callApi(
        '/v2/invoices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInvoice operation.
     * @callback module:api/InvoicesApi~deleteInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteInvoiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteInvoice
     * Deletes the specified invoice. When an invoice is deleted, the  associated order status changes to CANCELED. You can only delete a draft  invoice (you cannot delete a published invoice, including one that is scheduled for processing).
     * @param {String} invoiceId The ID of the invoice to delete.
     * @param {Object} opts Optional parameters
     * @param {Number} [version] The version of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to delete. If you do not know the version, you can call [GetInvoice](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/get-invoice) or  [ListInvoices](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/list-invoices).
     * @param {module:api/InvoicesApi~deleteInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteInvoiceResponse}
     */
    deleteInvoice(invoiceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling deleteInvoice");
      }

      let pathParams = {
        'invoice_id': invoiceId
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteInvoiceResponse;
      return this.apiClient.callApi(
        '/v2/invoices/{invoice_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoice operation.
     * @callback module:api/InvoicesApi~getInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInvoiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetInvoice
     * Retrieves an invoice by invoice ID.
     * @param {String} invoiceId The ID of the invoice to retrieve.
     * @param {module:api/InvoicesApi~getInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInvoiceResponse}
     */
    getInvoice(invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling getInvoice");
      }

      let pathParams = {
        'invoice_id': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetInvoiceResponse;
      return this.apiClient.callApi(
        '/v2/invoices/{invoice_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInvoices operation.
     * @callback module:api/InvoicesApi~listInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInvoicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListInvoices
     * Returns a list of invoices for a given location. The response  is paginated. If truncated, the response includes a `cursor` that you     use in a subsequent request to retrieve the next set of invoices.
     * @param {String} locationId The ID of the location for which to list invoices.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] A pagination cursor returned by a previous call to this endpoint.  Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
     * @param {Number} [limit] The maximum number of invoices to return (200 is the maximum `limit`).  If not provided, the server uses a default limit of 100 invoices.
     * @param {module:api/InvoicesApi~listInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInvoicesResponse}
     */
    listInvoices(locationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling listInvoices");
      }

      let pathParams = {
      };
      let queryParams = {
        'location_id': locationId,
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInvoicesResponse;
      return this.apiClient.callApi(
        '/v2/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishInvoice operation.
     * @callback module:api/InvoicesApi~publishInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublishInvoiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PublishInvoice
     * Publishes the specified draft invoice.   After an invoice is published, Square  follows up based on the invoice configuration. For example, Square  sends the invoice to the customer's email address, charges the customer's card on file, or does  nothing. Square also makes the invoice available on a Square-hosted invoice page.   The invoice `status` also changes from `DRAFT` to a status  based on the invoice configuration. For example, the status changes to `UNPAID` if  Square emails the invoice or `PARTIALLY_PAID` if Square charge a card on file for a portion of the  invoice amount.
     * @param {String} invoiceId The ID of the invoice to publish.
     * @param {module:model/PublishInvoiceRequest} publishInvoiceRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/InvoicesApi~publishInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublishInvoiceResponse}
     */
    publishInvoice(invoiceId, publishInvoiceRequest, callback) {
      let postBody = publishInvoiceRequest;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling publishInvoice");
      }
      // verify the required parameter 'publishInvoiceRequest' is set
      if (publishInvoiceRequest === undefined || publishInvoiceRequest === null) {
        throw new Error("Missing the required parameter 'publishInvoiceRequest' when calling publishInvoice");
      }

      let pathParams = {
        'invoice_id': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PublishInvoiceResponse;
      return this.apiClient.callApi(
        '/v2/invoices/{invoice_id}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInvoices operation.
     * @callback module:api/InvoicesApi~searchInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchInvoicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SearchInvoices
     * Searches for invoices from a location specified in  the filter. You can optionally specify customers in the filter for whom to  retrieve invoices. In the current implementation, you can only specify one location and  optionally one customer.  The response is paginated. If truncated, the response includes a `cursor`  that you use in a subsequent request to retrieve the next set of invoices.
     * @param {module:model/SearchInvoicesRequest} searchInvoicesRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/InvoicesApi~searchInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchInvoicesResponse}
     */
    searchInvoices(searchInvoicesRequest, callback) {
      let postBody = searchInvoicesRequest;
      // verify the required parameter 'searchInvoicesRequest' is set
      if (searchInvoicesRequest === undefined || searchInvoicesRequest === null) {
        throw new Error("Missing the required parameter 'searchInvoicesRequest' when calling searchInvoices");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchInvoicesResponse;
      return this.apiClient.callApi(
        '/v2/invoices/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInvoice operation.
     * @callback module:api/InvoicesApi~updateInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateInvoiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateInvoice
     * Updates an invoice by modifying fields, clearing fields, or both. For most updates, you can use a sparse  `Invoice` object to add fields or change values and use the `fields_to_clear` field to specify fields to clear.  However, some restrictions apply. For example, you cannot change the `order_id` or `location_id` field and you  must provide the complete `custom_fields` list to update a custom field. Published invoices have additional restrictions.
     * @param {String} invoiceId The ID of the invoice to update.
     * @param {module:model/UpdateInvoiceRequest} updateInvoiceRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/InvoicesApi~updateInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateInvoiceResponse}
     */
    updateInvoice(invoiceId, updateInvoiceRequest, callback) {
      let postBody = updateInvoiceRequest;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling updateInvoice");
      }
      // verify the required parameter 'updateInvoiceRequest' is set
      if (updateInvoiceRequest === undefined || updateInvoiceRequest === null) {
        throw new Error("Missing the required parameter 'updateInvoiceRequest' when calling updateInvoice");
      }

      let pathParams = {
        'invoice_id': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateInvoiceResponse;
      return this.apiClient.callApi(
        '/v2/invoices/{invoice_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
