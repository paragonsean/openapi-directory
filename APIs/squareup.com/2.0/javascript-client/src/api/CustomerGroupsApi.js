/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCustomerGroupRequest from '../model/CreateCustomerGroupRequest';
import CreateCustomerGroupResponse from '../model/CreateCustomerGroupResponse';
import DeleteCustomerGroupResponse from '../model/DeleteCustomerGroupResponse';
import ListCustomerGroupsResponse from '../model/ListCustomerGroupsResponse';
import RetrieveCustomerGroupResponse from '../model/RetrieveCustomerGroupResponse';
import UpdateCustomerGroupRequest from '../model/UpdateCustomerGroupRequest';
import UpdateCustomerGroupResponse from '../model/UpdateCustomerGroupResponse';

/**
* CustomerGroups service.
* @module api/CustomerGroupsApi
* @version 2.0
*/
export default class CustomerGroupsApi {

    /**
    * Constructs a new CustomerGroupsApi. 
    * @alias module:api/CustomerGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCustomerGroup operation.
     * @callback module:api/CustomerGroupsApi~createCustomerGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCustomerGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateCustomerGroup
     * Creates a new customer group for a business.  The request must include the `name` value of the group.
     * @param {module:model/CreateCustomerGroupRequest} createCustomerGroupRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/CustomerGroupsApi~createCustomerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCustomerGroupResponse}
     */
    createCustomerGroup(createCustomerGroupRequest, callback) {
      let postBody = createCustomerGroupRequest;
      // verify the required parameter 'createCustomerGroupRequest' is set
      if (createCustomerGroupRequest === undefined || createCustomerGroupRequest === null) {
        throw new Error("Missing the required parameter 'createCustomerGroupRequest' when calling createCustomerGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCustomerGroupResponse;
      return this.apiClient.callApi(
        '/v2/customers/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomerGroup operation.
     * @callback module:api/CustomerGroupsApi~deleteCustomerGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteCustomerGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteCustomerGroup
     * Deletes a customer group as identified by the `group_id` value.
     * @param {String} groupId The ID of the customer group to delete.
     * @param {module:api/CustomerGroupsApi~deleteCustomerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteCustomerGroupResponse}
     */
    deleteCustomerGroup(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteCustomerGroup");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteCustomerGroupResponse;
      return this.apiClient.callApi(
        '/v2/customers/groups/{group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCustomerGroups operation.
     * @callback module:api/CustomerGroupsApi~listCustomerGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCustomerGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListCustomerGroups
     * Retrieves the list of customer groups of a business.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
     * @param {Number} [limit] The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.  The limit is ignored if it is less than 1 or greater than 50. The default value is 50.  For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
     * @param {module:api/CustomerGroupsApi~listCustomerGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCustomerGroupsResponse}
     */
    listCustomerGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCustomerGroupsResponse;
      return this.apiClient.callApi(
        '/v2/customers/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveCustomerGroup operation.
     * @callback module:api/CustomerGroupsApi~retrieveCustomerGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveCustomerGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveCustomerGroup
     * Retrieves a specific customer group as identified by the `group_id` value.
     * @param {String} groupId The ID of the customer group to retrieve.
     * @param {module:api/CustomerGroupsApi~retrieveCustomerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveCustomerGroupResponse}
     */
    retrieveCustomerGroup(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling retrieveCustomerGroup");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveCustomerGroupResponse;
      return this.apiClient.callApi(
        '/v2/customers/groups/{group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomerGroup operation.
     * @callback module:api/CustomerGroupsApi~updateCustomerGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCustomerGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateCustomerGroup
     * Updates a customer group as identified by the `group_id` value.
     * @param {String} groupId The ID of the customer group to update.
     * @param {module:model/UpdateCustomerGroupRequest} updateCustomerGroupRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/CustomerGroupsApi~updateCustomerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCustomerGroupResponse}
     */
    updateCustomerGroup(groupId, updateCustomerGroupRequest, callback) {
      let postBody = updateCustomerGroupRequest;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateCustomerGroup");
      }
      // verify the required parameter 'updateCustomerGroupRequest' is set
      if (updateCustomerGroupRequest === undefined || updateCustomerGroupRequest === null) {
        throw new Error("Missing the required parameter 'updateCustomerGroupRequest' when calling updateCustomerGroup");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateCustomerGroupResponse;
      return this.apiClient.callApi(
        '/v2/customers/groups/{group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
