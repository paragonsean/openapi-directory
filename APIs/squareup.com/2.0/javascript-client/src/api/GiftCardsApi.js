/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateGiftCardRequest from '../model/CreateGiftCardRequest';
import CreateGiftCardResponse from '../model/CreateGiftCardResponse';
import LinkCustomerToGiftCardRequest from '../model/LinkCustomerToGiftCardRequest';
import LinkCustomerToGiftCardResponse from '../model/LinkCustomerToGiftCardResponse';
import ListGiftCardsResponse from '../model/ListGiftCardsResponse';
import RetrieveGiftCardFromGANRequest from '../model/RetrieveGiftCardFromGANRequest';
import RetrieveGiftCardFromGANResponse from '../model/RetrieveGiftCardFromGANResponse';
import RetrieveGiftCardFromNonceRequest from '../model/RetrieveGiftCardFromNonceRequest';
import RetrieveGiftCardFromNonceResponse from '../model/RetrieveGiftCardFromNonceResponse';
import RetrieveGiftCardResponse from '../model/RetrieveGiftCardResponse';
import UnlinkCustomerFromGiftCardRequest from '../model/UnlinkCustomerFromGiftCardRequest';
import UnlinkCustomerFromGiftCardResponse from '../model/UnlinkCustomerFromGiftCardResponse';

/**
* GiftCards service.
* @module api/GiftCardsApi
* @version 2.0
*/
export default class GiftCardsApi {

    /**
    * Constructs a new GiftCardsApi. 
    * @alias module:api/GiftCardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createGiftCard operation.
     * @callback module:api/GiftCardsApi~createGiftCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGiftCardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateGiftCard
     * Creates a digital gift card or registers a physical (plastic) gift card. You must activate the gift card before  it can be used for payment. For more information, see  [Selling gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#selling-square-gift-cards).
     * @param {module:model/CreateGiftCardRequest} createGiftCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/GiftCardsApi~createGiftCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGiftCardResponse}
     */
    createGiftCard(createGiftCardRequest, callback) {
      let postBody = createGiftCardRequest;
      // verify the required parameter 'createGiftCardRequest' is set
      if (createGiftCardRequest === undefined || createGiftCardRequest === null) {
        throw new Error("Missing the required parameter 'createGiftCardRequest' when calling createGiftCard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGiftCardResponse;
      return this.apiClient.callApi(
        '/v2/gift-cards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkCustomerToGiftCard operation.
     * @callback module:api/GiftCardsApi~linkCustomerToGiftCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkCustomerToGiftCardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LinkCustomerToGiftCard
     * Links a customer to a gift card
     * @param {String} giftCardId The ID of the gift card to link.
     * @param {module:model/LinkCustomerToGiftCardRequest} linkCustomerToGiftCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/GiftCardsApi~linkCustomerToGiftCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkCustomerToGiftCardResponse}
     */
    linkCustomerToGiftCard(giftCardId, linkCustomerToGiftCardRequest, callback) {
      let postBody = linkCustomerToGiftCardRequest;
      // verify the required parameter 'giftCardId' is set
      if (giftCardId === undefined || giftCardId === null) {
        throw new Error("Missing the required parameter 'giftCardId' when calling linkCustomerToGiftCard");
      }
      // verify the required parameter 'linkCustomerToGiftCardRequest' is set
      if (linkCustomerToGiftCardRequest === undefined || linkCustomerToGiftCardRequest === null) {
        throw new Error("Missing the required parameter 'linkCustomerToGiftCardRequest' when calling linkCustomerToGiftCard");
      }

      let pathParams = {
        'gift_card_id': giftCardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LinkCustomerToGiftCardResponse;
      return this.apiClient.callApi(
        '/v2/gift-cards/{gift_card_id}/link-customer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGiftCards operation.
     * @callback module:api/GiftCardsApi~listGiftCardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListGiftCardsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListGiftCards
     * Lists all gift cards. You can specify optional filters to retrieve  a subset of the gift cards.
     * @param {Object} opts Optional parameters
     * @param {String} [type] If a type is provided, gift cards of this type are returned  (see [GiftCardType](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardType)). If no type is provided, it returns gift cards of all types.
     * @param {String} [state] If the state is provided, it returns the gift cards in the specified state  (see [GiftCardStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardStatus)). Otherwise, it returns the gift cards of all states.
     * @param {Number} [limit] If a value is provided, it returns only that number of results per page. The maximum number of results allowed per page is 50. The default value is 30.
     * @param {String} [cursor] A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If a cursor is not provided, it returns the first page of the results.  For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
     * @param {String} [customerId] If a value is provided, returns only the gift cards linked to the specified customer
     * @param {module:api/GiftCardsApi~listGiftCardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListGiftCardsResponse}
     */
    listGiftCards(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'state': opts['state'],
        'limit': opts['limit'],
        'cursor': opts['cursor'],
        'customer_id': opts['customerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListGiftCardsResponse;
      return this.apiClient.callApi(
        '/v2/gift-cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveGiftCard operation.
     * @callback module:api/GiftCardsApi~retrieveGiftCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveGiftCardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveGiftCard
     * Retrieves a gift card using its ID.
     * @param {String} id The ID of the gift card to retrieve.
     * @param {module:api/GiftCardsApi~retrieveGiftCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveGiftCardResponse}
     */
    retrieveGiftCard(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveGiftCard");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveGiftCardResponse;
      return this.apiClient.callApi(
        '/v2/gift-cards/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveGiftCardFromGAN operation.
     * @callback module:api/GiftCardsApi~retrieveGiftCardFromGANCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveGiftCardFromGANResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveGiftCardFromGAN
     * Retrieves a gift card using the gift card account number (GAN).
     * @param {module:model/RetrieveGiftCardFromGANRequest} retrieveGiftCardFromGANRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/GiftCardsApi~retrieveGiftCardFromGANCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveGiftCardFromGANResponse}
     */
    retrieveGiftCardFromGAN(retrieveGiftCardFromGANRequest, callback) {
      let postBody = retrieveGiftCardFromGANRequest;
      // verify the required parameter 'retrieveGiftCardFromGANRequest' is set
      if (retrieveGiftCardFromGANRequest === undefined || retrieveGiftCardFromGANRequest === null) {
        throw new Error("Missing the required parameter 'retrieveGiftCardFromGANRequest' when calling retrieveGiftCardFromGAN");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RetrieveGiftCardFromGANResponse;
      return this.apiClient.callApi(
        '/v2/gift-cards/from-gan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveGiftCardFromNonce operation.
     * @callback module:api/GiftCardsApi~retrieveGiftCardFromNonceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveGiftCardFromNonceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveGiftCardFromNonce
     * Retrieves a gift card using a nonce (a secure token) that represents the gift card.
     * @param {module:model/RetrieveGiftCardFromNonceRequest} retrieveGiftCardFromNonceRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/GiftCardsApi~retrieveGiftCardFromNonceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveGiftCardFromNonceResponse}
     */
    retrieveGiftCardFromNonce(retrieveGiftCardFromNonceRequest, callback) {
      let postBody = retrieveGiftCardFromNonceRequest;
      // verify the required parameter 'retrieveGiftCardFromNonceRequest' is set
      if (retrieveGiftCardFromNonceRequest === undefined || retrieveGiftCardFromNonceRequest === null) {
        throw new Error("Missing the required parameter 'retrieveGiftCardFromNonceRequest' when calling retrieveGiftCardFromNonce");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RetrieveGiftCardFromNonceResponse;
      return this.apiClient.callApi(
        '/v2/gift-cards/from-nonce', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unlinkCustomerFromGiftCard operation.
     * @callback module:api/GiftCardsApi~unlinkCustomerFromGiftCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnlinkCustomerFromGiftCardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UnlinkCustomerFromGiftCard
     * Unlinks a customer from a gift card
     * @param {String} giftCardId 
     * @param {module:model/UnlinkCustomerFromGiftCardRequest} unlinkCustomerFromGiftCardRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/GiftCardsApi~unlinkCustomerFromGiftCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnlinkCustomerFromGiftCardResponse}
     */
    unlinkCustomerFromGiftCard(giftCardId, unlinkCustomerFromGiftCardRequest, callback) {
      let postBody = unlinkCustomerFromGiftCardRequest;
      // verify the required parameter 'giftCardId' is set
      if (giftCardId === undefined || giftCardId === null) {
        throw new Error("Missing the required parameter 'giftCardId' when calling unlinkCustomerFromGiftCard");
      }
      // verify the required parameter 'unlinkCustomerFromGiftCardRequest' is set
      if (unlinkCustomerFromGiftCardRequest === undefined || unlinkCustomerFromGiftCardRequest === null) {
        throw new Error("Missing the required parameter 'unlinkCustomerFromGiftCardRequest' when calling unlinkCustomerFromGiftCard");
      }

      let pathParams = {
        'gift_card_id': giftCardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UnlinkCustomerFromGiftCardResponse;
      return this.apiClient.callApi(
        '/v2/gift-cards/{gift_card_id}/unlink-customer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
