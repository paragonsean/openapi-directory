/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateLocationRequest from '../model/CreateLocationRequest';
import CreateLocationResponse from '../model/CreateLocationResponse';
import ListLocationsResponse from '../model/ListLocationsResponse';
import RetrieveLocationResponse from '../model/RetrieveLocationResponse';
import UpdateLocationRequest from '../model/UpdateLocationRequest';
import UpdateLocationResponse from '../model/UpdateLocationResponse';

/**
* Locations service.
* @module api/LocationsApi
* @version 2.0
*/
export default class LocationsApi {

    /**
    * Constructs a new LocationsApi. 
    * @alias module:api/LocationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLocation operation.
     * @callback module:api/LocationsApi~createLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateLocation
     * Creates a location.
     * @param {module:model/CreateLocationRequest} createLocationRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LocationsApi~createLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLocationResponse}
     */
    createLocation(createLocationRequest, callback) {
      let postBody = createLocationRequest;
      // verify the required parameter 'createLocationRequest' is set
      if (createLocationRequest === undefined || createLocationRequest === null) {
        throw new Error("Missing the required parameter 'createLocationRequest' when calling createLocation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLocationResponse;
      return this.apiClient.callApi(
        '/v2/locations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLocations operation.
     * @callback module:api/LocationsApi~listLocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLocationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListLocations
     * Provides information of all locations of a business.  Many Square API endpoints require a `location_id` parameter. The `id` field of the [`Location`](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) objects returned by this endpoint correspond to that `location_id` parameter.
     * @param {module:api/LocationsApi~listLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLocationsResponse}
     */
    listLocations(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLocationsResponse;
      return this.apiClient.callApi(
        '/v2/locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveLocation operation.
     * @callback module:api/LocationsApi~retrieveLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveLocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveLocation
     * Retrieves details of a location. You can specify \"main\"  as the location ID to retrieve details of the  main location.
     * @param {String} locationId The ID of the location to retrieve. If you specify the string \"main\", then the endpoint returns the main location.
     * @param {module:api/LocationsApi~retrieveLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveLocationResponse}
     */
    retrieveLocation(locationId, callback) {
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling retrieveLocation");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveLocationResponse;
      return this.apiClient.callApi(
        '/v2/locations/{location_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLocation operation.
     * @callback module:api/LocationsApi~updateLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateLocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateLocation
     * Updates a location.
     * @param {String} locationId The ID of the location to update.
     * @param {module:model/UpdateLocationRequest} updateLocationRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LocationsApi~updateLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateLocationResponse}
     */
    updateLocation(locationId, updateLocationRequest, callback) {
      let postBody = updateLocationRequest;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling updateLocation");
      }
      // verify the required parameter 'updateLocationRequest' is set
      if (updateLocationRequest === undefined || updateLocationRequest === null) {
        throw new Error("Missing the required parameter 'updateLocationRequest' when calling updateLocation");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateLocationResponse;
      return this.apiClient.callApi(
        '/v2/locations/{location_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
