/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import V1CreateRefundRequest from '../model/V1CreateRefundRequest';
import V1Order from '../model/V1Order';
import V1Payment from '../model/V1Payment';
import V1Refund from '../model/V1Refund';
import V1Settlement from '../model/V1Settlement';
import V1UpdateOrderRequest from '../model/V1UpdateOrderRequest';

/**
* V1Transactions service.
* @module api/V1TransactionsApi
* @version 2.0
*/
export default class V1TransactionsApi {

    /**
    * Constructs a new V1TransactionsApi. 
    * @alias module:api/V1TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRefund operation.
     * @callback module:api/V1TransactionsApi~createRefundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Refund} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateRefund
     * Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.  You cannot issue a partial refund for a split tender payment. You must instead issue a full or partial refund for a particular tender, by providing the applicable tender id to the V1CreateRefund endpoint. Issuing a full refund for a split tender payment refunds all tenders associated with the payment.  Issuing a refund for a card payment is not reversible. For development purposes, you can create fake cash payments in Square Point of Sale and refund them.
     * @param {String} locationId The ID of the original payment's associated location.
     * @param {module:model/V1CreateRefundRequest} v1CreateRefundRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/V1TransactionsApi~createRefundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Refund}
     */
    createRefund(locationId, v1CreateRefundRequest, callback) {
      let postBody = v1CreateRefundRequest;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling createRefund");
      }
      // verify the required parameter 'v1CreateRefundRequest' is set
      if (v1CreateRefundRequest === undefined || v1CreateRefundRequest === null) {
        throw new Error("Missing the required parameter 'v1CreateRefundRequest' when calling createRefund");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1Refund;
      return this.apiClient.callApi(
        '/v1/{location_id}/refunds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOrders operation.
     * @callback module:api/V1TransactionsApi~listOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Order>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListOrders
     * Provides summary information for a merchant's online store orders.
     * @param {String} locationId The ID of the location to list online store orders for.
     * @param {Object} opts Optional parameters
     * @param {String} [order] The order in which payments are listed in the response.
     * @param {Number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
     * @param {String} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {module:api/V1TransactionsApi~listOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Order>}
     */
    listOrders(locationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling listOrders");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
        'order': opts['order'],
        'limit': opts['limit'],
        'batch_token': opts['batchToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [V1Order];
      return this.apiClient.callApi(
        '/v1/{location_id}/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPayments operation.
     * @callback module:api/V1TransactionsApi~listPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Payment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListPayments
     * Provides summary information for all payments taken for a given Square account during a date range. Date ranges cannot exceed 1 year in length. See Date ranges for details of inclusive and exclusive dates.  *Note**: Details for payments processed with Square Point of Sale while in offline mode may not be transmitted to Square for up to 72 hours. Offline payments have a `created_at` value that reflects the time the payment was originally processed, not the time it was subsequently transmitted to Square. Consequently, the ListPayments endpoint might list an offline payment chronologically between online payments that were seen in a previous request.
     * @param {String} locationId The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.
     * @param {Object} opts Optional parameters
     * @param {String} [order] The order in which payments are listed in the response.
     * @param {String} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {String} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {Number} [limit] The maximum number of payments to return in a single response. This value cannot exceed 200.
     * @param {String} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {Boolean} [includePartial] Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
     * @param {module:api/V1TransactionsApi~listPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Payment>}
     */
    listPayments(locationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling listPayments");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
        'order': opts['order'],
        'begin_time': opts['beginTime'],
        'end_time': opts['endTime'],
        'limit': opts['limit'],
        'batch_token': opts['batchToken'],
        'include_partial': opts['includePartial']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [V1Payment];
      return this.apiClient.callApi(
        '/v1/{location_id}/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRefunds operation.
     * @callback module:api/V1TransactionsApi~listRefundsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Refund>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListRefunds
     * Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
     * @param {String} locationId The ID of the location to list refunds for.
     * @param {Object} opts Optional parameters
     * @param {String} [order] The order in which payments are listed in the response.
     * @param {String} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {String} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {Number} [limit] The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
     * @param {String} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {module:api/V1TransactionsApi~listRefundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Refund>}
     */
    listRefunds(locationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling listRefunds");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
        'order': opts['order'],
        'begin_time': opts['beginTime'],
        'end_time': opts['endTime'],
        'limit': opts['limit'],
        'batch_token': opts['batchToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [V1Refund];
      return this.apiClient.callApi(
        '/v1/{location_id}/refunds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSettlements operation.
     * @callback module:api/V1TransactionsApi~listSettlementsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Settlement>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListSettlements
     * Provides summary information for all deposits and withdrawals initiated by Square to a linked bank account during a date range. Date ranges cannot exceed one year in length.  *Note**: the ListSettlements endpoint does not provide entry information.
     * @param {String} locationId The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business's locations.
     * @param {Object} opts Optional parameters
     * @param {String} [order] The order in which settlements are listed in the response.
     * @param {String} [beginTime] The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
     * @param {String} [endTime] The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
     * @param {Number} [limit] The maximum number of settlements to return in a single response. This value cannot exceed 200.
     * @param {String} [status] Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
     * @param {String} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {module:api/V1TransactionsApi~listSettlementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Settlement>}
     */
    listSettlements(locationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling listSettlements");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
        'order': opts['order'],
        'begin_time': opts['beginTime'],
        'end_time': opts['endTime'],
        'limit': opts['limit'],
        'status': opts['status'],
        'batch_token': opts['batchToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [V1Settlement];
      return this.apiClient.callApi(
        '/v1/{location_id}/settlements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveOrder operation.
     * @callback module:api/V1TransactionsApi~retrieveOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveOrder
     * Provides comprehensive information for a single online store order, including the order's history.
     * @param {String} locationId The ID of the order's associated location.
     * @param {String} orderId The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
     * @param {module:api/V1TransactionsApi~retrieveOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Order}
     */
    retrieveOrder(locationId, orderId, callback) {
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling retrieveOrder");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling retrieveOrder");
      }

      let pathParams = {
        'location_id': locationId,
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1Order;
      return this.apiClient.callApi(
        '/v1/{location_id}/orders/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrievePayment operation.
     * @callback module:api/V1TransactionsApi~retrievePaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Payment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrievePayment
     * Provides comprehensive information for a single payment.
     * @param {String} locationId The ID of the payment's associated location.
     * @param {String} paymentId The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.
     * @param {module:api/V1TransactionsApi~retrievePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Payment}
     */
    retrievePayment(locationId, paymentId, callback) {
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling retrievePayment");
      }
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling retrievePayment");
      }

      let pathParams = {
        'location_id': locationId,
        'payment_id': paymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1Payment;
      return this.apiClient.callApi(
        '/v1/{location_id}/payments/{payment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveSettlement operation.
     * @callback module:api/V1TransactionsApi~retrieveSettlementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Settlement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveSettlement
     * Provides comprehensive information for a single settlement.  The returned `Settlement` objects include an `entries` field that lists the transactions that contribute to the settlement total. Most settlement entries correspond to a payment payout, but settlement entries are also generated for less common events, like refunds, manual adjustments, or chargeback holds.  Square initiates its regular deposits as indicated in the [Deposit Options with Square](https://squareup.com/help/us/en/article/3807) help article. Details for a regular deposit are usually not available from Connect API endpoints before 10 p.m. PST the same day.  Square does not know when an initiated settlement **completes**, only whether it has failed. A completed settlement is typically reflected in a bank account within 3 business days, but in exceptional cases it may take longer.
     * @param {String} locationId The ID of the settlements's associated location.
     * @param {String} settlementId The settlement's Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.
     * @param {module:api/V1TransactionsApi~retrieveSettlementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Settlement}
     */
    retrieveSettlement(locationId, settlementId, callback) {
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling retrieveSettlement");
      }
      // verify the required parameter 'settlementId' is set
      if (settlementId === undefined || settlementId === null) {
        throw new Error("Missing the required parameter 'settlementId' when calling retrieveSettlement");
      }

      let pathParams = {
        'location_id': locationId,
        'settlement_id': settlementId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1Settlement;
      return this.apiClient.callApi(
        '/v1/{location_id}/settlements/{settlement_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrder operation.
     * @callback module:api/V1TransactionsApi~updateOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateOrder
     * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
     * @param {String} locationId The ID of the order's associated location.
     * @param {String} orderId The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
     * @param {module:model/V1UpdateOrderRequest} v1UpdateOrderRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/V1TransactionsApi~updateOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Order}
     */
    updateOrder(locationId, orderId, v1UpdateOrderRequest, callback) {
      let postBody = v1UpdateOrderRequest;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling updateOrder");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling updateOrder");
      }
      // verify the required parameter 'v1UpdateOrderRequest' is set
      if (v1UpdateOrderRequest === undefined || v1UpdateOrderRequest === null) {
        throw new Error("Missing the required parameter 'v1UpdateOrderRequest' when calling updateOrder");
      }

      let pathParams = {
        'location_id': locationId,
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1Order;
      return this.apiClient.callApi(
        '/v1/{location_id}/orders/{order_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
