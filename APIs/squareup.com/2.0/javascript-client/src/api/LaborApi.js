/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateBreakTypeRequest from '../model/CreateBreakTypeRequest';
import CreateBreakTypeResponse from '../model/CreateBreakTypeResponse';
import CreateShiftRequest from '../model/CreateShiftRequest';
import CreateShiftResponse from '../model/CreateShiftResponse';
import DeleteBreakTypeResponse from '../model/DeleteBreakTypeResponse';
import DeleteShiftResponse from '../model/DeleteShiftResponse';
import GetBreakTypeResponse from '../model/GetBreakTypeResponse';
import GetEmployeeWageResponse from '../model/GetEmployeeWageResponse';
import GetShiftResponse from '../model/GetShiftResponse';
import GetTeamMemberWageResponse from '../model/GetTeamMemberWageResponse';
import ListBreakTypesResponse from '../model/ListBreakTypesResponse';
import ListEmployeeWagesResponse from '../model/ListEmployeeWagesResponse';
import ListTeamMemberWagesResponse from '../model/ListTeamMemberWagesResponse';
import ListWorkweekConfigsResponse from '../model/ListWorkweekConfigsResponse';
import SearchShiftsRequest from '../model/SearchShiftsRequest';
import SearchShiftsResponse from '../model/SearchShiftsResponse';
import UpdateBreakTypeRequest from '../model/UpdateBreakTypeRequest';
import UpdateBreakTypeResponse from '../model/UpdateBreakTypeResponse';
import UpdateShiftRequest from '../model/UpdateShiftRequest';
import UpdateShiftResponse from '../model/UpdateShiftResponse';
import UpdateWorkweekConfigRequest from '../model/UpdateWorkweekConfigRequest';
import UpdateWorkweekConfigResponse from '../model/UpdateWorkweekConfigResponse';

/**
* Labor service.
* @module api/LaborApi
* @version 2.0
*/
export default class LaborApi {

    /**
    * Constructs a new LaborApi. 
    * @alias module:api/LaborApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBreakType operation.
     * @callback module:api/LaborApi~createBreakTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBreakTypeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateBreakType
     * Creates a new `BreakType`.  A `BreakType` is a template for creating `Break` objects. You must provide the following values in your request to this endpoint:  - `location_id` - `break_name` - `expected_duration` - `is_paid`  You can only have three `BreakType` instances per location. If you attempt to add a fourth `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\" is returned.
     * @param {module:model/CreateBreakTypeRequest} createBreakTypeRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LaborApi~createBreakTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBreakTypeResponse}
     */
    createBreakType(createBreakTypeRequest, callback) {
      let postBody = createBreakTypeRequest;
      // verify the required parameter 'createBreakTypeRequest' is set
      if (createBreakTypeRequest === undefined || createBreakTypeRequest === null) {
        throw new Error("Missing the required parameter 'createBreakTypeRequest' when calling createBreakType");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBreakTypeResponse;
      return this.apiClient.callApi(
        '/v2/labor/break-types', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createShift operation.
     * @callback module:api/LaborApi~createShiftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateShiftResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateShift
     * Creates a new `Shift`.  A `Shift` represents a complete workday for a single employee. You must provide the following values in your request to this endpoint:  - `location_id` - `employee_id` - `start_at`  An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when: - The `status` of the new `Shift` is `OPEN` and the employee has another shift with an `OPEN` status. - The `start_at` date is in the future. - The `start_at` or `end_at` date overlaps another shift for the same employee. - The `Break` instances are set in the request and a break `start_at` is before the `Shift.start_at`, a break `end_at` is after the `Shift.end_at`, or both.
     * @param {module:model/CreateShiftRequest} createShiftRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LaborApi~createShiftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateShiftResponse}
     */
    createShift(createShiftRequest, callback) {
      let postBody = createShiftRequest;
      // verify the required parameter 'createShiftRequest' is set
      if (createShiftRequest === undefined || createShiftRequest === null) {
        throw new Error("Missing the required parameter 'createShiftRequest' when calling createShift");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateShiftResponse;
      return this.apiClient.callApi(
        '/v2/labor/shifts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBreakType operation.
     * @callback module:api/LaborApi~deleteBreakTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBreakTypeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteBreakType
     * Deletes an existing `BreakType`.  A `BreakType` can be deleted even if it is referenced from a `Shift`.
     * @param {String} id The UUID for the `BreakType` being deleted.
     * @param {module:api/LaborApi~deleteBreakTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBreakTypeResponse}
     */
    deleteBreakType(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBreakType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteBreakTypeResponse;
      return this.apiClient.callApi(
        '/v2/labor/break-types/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteShift operation.
     * @callback module:api/LaborApi~deleteShiftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteShiftResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteShift
     * Deletes a `Shift`.
     * @param {String} id The UUID for the `Shift` being deleted.
     * @param {module:api/LaborApi~deleteShiftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteShiftResponse}
     */
    deleteShift(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteShift");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteShiftResponse;
      return this.apiClient.callApi(
        '/v2/labor/shifts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBreakType operation.
     * @callback module:api/LaborApi~getBreakTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBreakTypeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetBreakType
     * Returns a single `BreakType` specified by `id`.
     * @param {String} id The UUID for the `BreakType` being retrieved.
     * @param {module:api/LaborApi~getBreakTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBreakTypeResponse}
     */
    getBreakType(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBreakType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBreakTypeResponse;
      return this.apiClient.callApi(
        '/v2/labor/break-types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeWage operation.
     * @callback module:api/LaborApi~getEmployeeWageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEmployeeWageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetEmployeeWage
     * Returns a single `EmployeeWage` specified by `id`.
     * @param {String} id The UUID for the `EmployeeWage` being retrieved.
     * @param {module:api/LaborApi~getEmployeeWageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEmployeeWageResponse}
     */
    getEmployeeWage(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEmployeeWage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEmployeeWageResponse;
      return this.apiClient.callApi(
        '/v2/labor/employee-wages/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getShift operation.
     * @callback module:api/LaborApi~getShiftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetShiftResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetShift
     * Returns a single `Shift` specified by `id`.
     * @param {String} id The UUID for the `Shift` being retrieved.
     * @param {module:api/LaborApi~getShiftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetShiftResponse}
     */
    getShift(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getShift");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetShiftResponse;
      return this.apiClient.callApi(
        '/v2/labor/shifts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamMemberWage operation.
     * @callback module:api/LaborApi~getTeamMemberWageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTeamMemberWageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetTeamMemberWage
     * Returns a single `TeamMemberWage` specified by `id `.
     * @param {String} id The UUID for the `TeamMemberWage` being retrieved.
     * @param {module:api/LaborApi~getTeamMemberWageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTeamMemberWageResponse}
     */
    getTeamMemberWage(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTeamMemberWage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTeamMemberWageResponse;
      return this.apiClient.callApi(
        '/v2/labor/team-member-wages/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBreakTypes operation.
     * @callback module:api/LaborApi~listBreakTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBreakTypesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListBreakTypes
     * Returns a paginated list of `BreakType` instances for a business.
     * @param {Object} opts Optional parameters
     * @param {String} [locationId] Filter the returned `BreakType` results to only those that are associated with the specified location.
     * @param {Number} [limit] The maximum number of `BreakType` results to return per page. The number can range between 1 and 200. The default is 200.
     * @param {String} [cursor] A pointer to the next page of `BreakType` results to fetch.
     * @param {module:api/LaborApi~listBreakTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBreakTypesResponse}
     */
    listBreakTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'location_id': opts['locationId'],
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBreakTypesResponse;
      return this.apiClient.callApi(
        '/v2/labor/break-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEmployeeWages operation.
     * @callback module:api/LaborApi~listEmployeeWagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEmployeeWagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListEmployeeWages
     * Returns a paginated list of `EmployeeWage` instances for a business.
     * @param {Object} opts Optional parameters
     * @param {String} [employeeId] Filter the returned wages to only those that are associated with the specified employee.
     * @param {Number} [limit] The maximum number of `EmployeeWage` results to return per page. The number can range between 1 and 200. The default is 200.
     * @param {String} [cursor] A pointer to the next page of `EmployeeWage` results to fetch.
     * @param {module:api/LaborApi~listEmployeeWagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEmployeeWagesResponse}
     */
    listEmployeeWages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'employee_id': opts['employeeId'],
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEmployeeWagesResponse;
      return this.apiClient.callApi(
        '/v2/labor/employee-wages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTeamMemberWages operation.
     * @callback module:api/LaborApi~listTeamMemberWagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTeamMemberWagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListTeamMemberWages
     * Returns a paginated list of `TeamMemberWage` instances for a business.
     * @param {Object} opts Optional parameters
     * @param {String} [teamMemberId] Filter the returned wages to only those that are associated with the specified team member.
     * @param {Number} [limit] The maximum number of `TeamMemberWage` results to return per page. The number can range between 1 and 200. The default is 200.
     * @param {String} [cursor] A pointer to the next page of `EmployeeWage` results to fetch.
     * @param {module:api/LaborApi~listTeamMemberWagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTeamMemberWagesResponse}
     */
    listTeamMemberWages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'team_member_id': opts['teamMemberId'],
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTeamMemberWagesResponse;
      return this.apiClient.callApi(
        '/v2/labor/team-member-wages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkweekConfigs operation.
     * @callback module:api/LaborApi~listWorkweekConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorkweekConfigsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListWorkweekConfigs
     * Returns a list of `WorkweekConfig` instances for a business.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] The maximum number of `WorkweekConfigs` results to return per page.
     * @param {String} [cursor] A pointer to the next page of `WorkweekConfig` results to fetch.
     * @param {module:api/LaborApi~listWorkweekConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorkweekConfigsResponse}
     */
    listWorkweekConfigs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWorkweekConfigsResponse;
      return this.apiClient.callApi(
        '/v2/labor/workweek-configs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchShifts operation.
     * @callback module:api/LaborApi~searchShiftsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchShiftsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SearchShifts
     * Returns a paginated list of `Shift` records for a business. The list to be returned can be filtered by: - Location IDs. - Employee IDs. - Shift status (`OPEN` and `CLOSED`). - Shift start. - Shift end. - Workday details.  The list can be sorted by: - `start_at`. - `end_at`. - `created_at`. - `updated_at`.
     * @param {module:model/SearchShiftsRequest} searchShiftsRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LaborApi~searchShiftsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchShiftsResponse}
     */
    searchShifts(searchShiftsRequest, callback) {
      let postBody = searchShiftsRequest;
      // verify the required parameter 'searchShiftsRequest' is set
      if (searchShiftsRequest === undefined || searchShiftsRequest === null) {
        throw new Error("Missing the required parameter 'searchShiftsRequest' when calling searchShifts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchShiftsResponse;
      return this.apiClient.callApi(
        '/v2/labor/shifts/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBreakType operation.
     * @callback module:api/LaborApi~updateBreakTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBreakTypeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateBreakType
     * Updates an existing `BreakType`.
     * @param {String} id  The UUID for the `BreakType` being updated.
     * @param {module:model/UpdateBreakTypeRequest} updateBreakTypeRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LaborApi~updateBreakTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBreakTypeResponse}
     */
    updateBreakType(id, updateBreakTypeRequest, callback) {
      let postBody = updateBreakTypeRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBreakType");
      }
      // verify the required parameter 'updateBreakTypeRequest' is set
      if (updateBreakTypeRequest === undefined || updateBreakTypeRequest === null) {
        throw new Error("Missing the required parameter 'updateBreakTypeRequest' when calling updateBreakType");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBreakTypeResponse;
      return this.apiClient.callApi(
        '/v2/labor/break-types/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateShift operation.
     * @callback module:api/LaborApi~updateShiftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateShiftResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateShift
     * Updates an existing `Shift`.  When adding a `Break` to a `Shift`, any earlier `Break` instances in the `Shift` have the `end_at` property set to a valid RFC-3339 datetime string.  When closing a `Shift`, all `Break` instances in the `Shift` must be complete with `end_at` set on each `Break`.
     * @param {String} id The ID of the object being updated.
     * @param {module:model/UpdateShiftRequest} updateShiftRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LaborApi~updateShiftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateShiftResponse}
     */
    updateShift(id, updateShiftRequest, callback) {
      let postBody = updateShiftRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateShift");
      }
      // verify the required parameter 'updateShiftRequest' is set
      if (updateShiftRequest === undefined || updateShiftRequest === null) {
        throw new Error("Missing the required parameter 'updateShiftRequest' when calling updateShift");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateShiftResponse;
      return this.apiClient.callApi(
        '/v2/labor/shifts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkweekConfig operation.
     * @callback module:api/LaborApi~updateWorkweekConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateWorkweekConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateWorkweekConfig
     * Updates a `WorkweekConfig`.
     * @param {String} id The UUID for the `WorkweekConfig` object being updated.
     * @param {module:model/UpdateWorkweekConfigRequest} updateWorkweekConfigRequest An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/LaborApi~updateWorkweekConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateWorkweekConfigResponse}
     */
    updateWorkweekConfig(id, updateWorkweekConfigRequest, callback) {
      let postBody = updateWorkweekConfigRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWorkweekConfig");
      }
      // verify the required parameter 'updateWorkweekConfigRequest' is set
      if (updateWorkweekConfigRequest === undefined || updateWorkweekConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateWorkweekConfigRequest' when calling updateWorkweekConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateWorkweekConfigResponse;
      return this.apiClient.callApi(
        '/v2/labor/workweek-configs/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
