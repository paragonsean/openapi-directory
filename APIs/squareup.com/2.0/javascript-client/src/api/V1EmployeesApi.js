/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import V1Employee from '../model/V1Employee';
import V1EmployeeRole from '../model/V1EmployeeRole';

/**
* V1Employees service.
* @module api/V1EmployeesApi
* @version 2.0
*/
export default class V1EmployeesApi {

    /**
    * Constructs a new V1EmployeesApi. 
    * @alias module:api/V1EmployeesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createEmployee operation.
     * @callback module:api/V1EmployeesApi~createEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Employee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateEmployee
     *  Use the CreateEmployee endpoint to add an employee to a Square account. Employees created with the Connect API have an initial status of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale until they are activated from the Square Dashboard. Employee status cannot be changed with the Connect API.  Employee entities cannot be deleted. To disable employee profiles, set the employee's status to <code>INACTIVE</code>
     * @param {module:model/V1Employee} v1Employee An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/V1EmployeesApi~createEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Employee}
     */
    createEmployee(v1Employee, callback) {
      let postBody = v1Employee;
      // verify the required parameter 'v1Employee' is set
      if (v1Employee === undefined || v1Employee === null) {
        throw new Error("Missing the required parameter 'v1Employee' when calling createEmployee");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1Employee;
      return this.apiClient.callApi(
        '/v1/me/employees', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmployeeRole operation.
     * @callback module:api/V1EmployeesApi~createEmployeeRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1EmployeeRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateEmployeeRole
     * Creates an employee role you can then assign to employees.  Square accounts can include any number of roles that can be assigned to employees. These roles define the actions and permissions granted to an employee with that role. For example, an employee with a \"Shift Manager\" role might be able to issue refunds in Square Point of Sale, whereas an employee with a \"Clerk\" role might not.  Roles are assigned with the [V1UpdateEmployee](https://developer.squareup.com/reference/square_2021-08-18/v1-employees-api/update-employee-role) endpoint. An employee can have only one role at a time.  If an employee has no role, they have none of the permissions associated with roles. All employees can accept payments with Square Point of Sale.
     * @param {module:model/V1EmployeeRole} v1EmployeeRole An EmployeeRole object with a name and permissions, and an optional owner flag.
     * @param {module:api/V1EmployeesApi~createEmployeeRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1EmployeeRole}
     */
    createEmployeeRole(v1EmployeeRole, callback) {
      let postBody = v1EmployeeRole;
      // verify the required parameter 'v1EmployeeRole' is set
      if (v1EmployeeRole === undefined || v1EmployeeRole === null) {
        throw new Error("Missing the required parameter 'v1EmployeeRole' when calling createEmployeeRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1EmployeeRole;
      return this.apiClient.callApi(
        '/v1/me/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEmployeeRoles operation.
     * @callback module:api/V1EmployeesApi~listEmployeeRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1EmployeeRole>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListEmployeeRoles
     * Provides summary information for all of a business's employee roles.
     * @param {Object} opts Optional parameters
     * @param {String} [order] The order in which employees are listed in the response, based on their created_at field.Default value: ASC
     * @param {Number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {String} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {module:api/V1EmployeesApi~listEmployeeRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1EmployeeRole>}
     */
    listEmployeeRoles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'limit': opts['limit'],
        'batch_token': opts['batchToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [V1EmployeeRole];
      return this.apiClient.callApi(
        '/v1/me/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEmployees operation.
     * @callback module:api/V1EmployeesApi~listEmployeesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Employee>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListEmployees
     * Provides summary information for all of a business's employees.
     * @param {Object} opts Optional parameters
     * @param {String} [order] The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
     * @param {String} [beginUpdatedAt] If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
     * @param {String} [endUpdatedAt] If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {String} [beginCreatedAt] If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
     * @param {String} [endCreatedAt] If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
     * @param {String} [status] If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
     * @param {String} [externalId] If provided, the endpoint returns only employee entities with the specified external_id.
     * @param {Number} [limit] The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
     * @param {String} [batchToken] A pagination cursor to retrieve the next set of results for your original query to the endpoint.
     * @param {module:api/V1EmployeesApi~listEmployeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Employee>}
     */
    listEmployees(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'begin_updated_at': opts['beginUpdatedAt'],
        'end_updated_at': opts['endUpdatedAt'],
        'begin_created_at': opts['beginCreatedAt'],
        'end_created_at': opts['endCreatedAt'],
        'status': opts['status'],
        'external_id': opts['externalId'],
        'limit': opts['limit'],
        'batch_token': opts['batchToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [V1Employee];
      return this.apiClient.callApi(
        '/v1/me/employees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveEmployee operation.
     * @callback module:api/V1EmployeesApi~retrieveEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Employee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveEmployee
     * Provides the details for a single employee.
     * @param {String} employeeId The employee's ID.
     * @param {module:api/V1EmployeesApi~retrieveEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Employee}
     */
    retrieveEmployee(employeeId, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling retrieveEmployee");
      }

      let pathParams = {
        'employee_id': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1Employee;
      return this.apiClient.callApi(
        '/v1/me/employees/{employee_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveEmployeeRole operation.
     * @callback module:api/V1EmployeesApi~retrieveEmployeeRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1EmployeeRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RetrieveEmployeeRole
     * Provides the details for a single employee role.
     * @param {String} roleId The role's ID.
     * @param {module:api/V1EmployeesApi~retrieveEmployeeRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1EmployeeRole}
     */
    retrieveEmployeeRole(roleId, callback) {
      let postBody = null;
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling retrieveEmployeeRole");
      }

      let pathParams = {
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1EmployeeRole;
      return this.apiClient.callApi(
        '/v1/me/roles/{role_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmployee operation.
     * @callback module:api/V1EmployeesApi~updateEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Employee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateEmployee
     * 
     * @param {String} employeeId The ID of the role to modify.
     * @param {module:model/V1Employee} v1Employee An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/V1EmployeesApi~updateEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Employee}
     */
    updateEmployee(employeeId, v1Employee, callback) {
      let postBody = v1Employee;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling updateEmployee");
      }
      // verify the required parameter 'v1Employee' is set
      if (v1Employee === undefined || v1Employee === null) {
        throw new Error("Missing the required parameter 'v1Employee' when calling updateEmployee");
      }

      let pathParams = {
        'employee_id': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1Employee;
      return this.apiClient.callApi(
        '/v1/me/employees/{employee_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmployeeRole operation.
     * @callback module:api/V1EmployeesApi~updateEmployeeRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1EmployeeRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateEmployeeRole
     * Modifies the details of an employee role.
     * @param {String} roleId The ID of the role to modify.
     * @param {module:model/V1EmployeeRole} v1EmployeeRole An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {module:api/V1EmployeesApi~updateEmployeeRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1EmployeeRole}
     */
    updateEmployeeRole(roleId, v1EmployeeRole, callback) {
      let postBody = v1EmployeeRole;
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling updateEmployeeRole");
      }
      // verify the required parameter 'v1EmployeeRole' is set
      if (v1EmployeeRole === undefined || v1EmployeeRole === null) {
        throw new Error("Missing the required parameter 'v1EmployeeRole' when calling updateEmployeeRole");
      }

      let pathParams = {
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1EmployeeRole;
      return this.apiClient.callApi(
        '/v1/me/roles/{role_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
