/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import V1Money from './V1Money';
import V1SettlementEntry from './V1SettlementEntry';

/**
 * The V1Settlement model module.
 * @module model/V1Settlement
 * @version 2.0
 */
class V1Settlement {
    /**
     * Constructs a new <code>V1Settlement</code>.
     * V1Settlement
     * @alias module:model/V1Settlement
     */
    constructor() { 
        
        V1Settlement.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V1Settlement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1Settlement} obj Optional instance to populate.
     * @return {module:model/V1Settlement} The populated <code>V1Settlement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1Settlement();

            if (data.hasOwnProperty('bank_account_id')) {
                obj['bank_account_id'] = ApiClient.convertToType(data['bank_account_id'], 'String');
            }
            if (data.hasOwnProperty('entries')) {
                obj['entries'] = ApiClient.convertToType(data['entries'], [V1SettlementEntry]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('initiated_at')) {
                obj['initiated_at'] = ApiClient.convertToType(data['initiated_at'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('total_money')) {
                obj['total_money'] = V1Money.constructFromObject(data['total_money']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1Settlement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1Settlement</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bank_account_id'] && !(typeof data['bank_account_id'] === 'string' || data['bank_account_id'] instanceof String)) {
            throw new Error("Expected the field `bank_account_id` to be a primitive type in the JSON string but got " + data['bank_account_id']);
        }
        if (data['entries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entries'])) {
                throw new Error("Expected the field `entries` to be an array in the JSON data but got " + data['entries']);
            }
            // validate the optional field `entries` (array)
            for (const item of data['entries']) {
                V1SettlementEntry.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['initiated_at'] && !(typeof data['initiated_at'] === 'string' || data['initiated_at'] instanceof String)) {
            throw new Error("Expected the field `initiated_at` to be a primitive type in the JSON string but got " + data['initiated_at']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `total_money`
        if (data['total_money']) { // data not null
          V1Money.validateJSON(data['total_money']);
        }

        return true;
    }


}



/**
 * The Square-issued unique identifier for the bank account associated with the settlement.
 * @member {String} bank_account_id
 */
V1Settlement.prototype['bank_account_id'] = undefined;

/**
 * The entries included in this settlement.
 * @member {Array.<module:model/V1SettlementEntry>} entries
 */
V1Settlement.prototype['entries'] = undefined;

/**
 * The settlement's unique identifier.
 * @member {String} id
 */
V1Settlement.prototype['id'] = undefined;

/**
 * The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format.
 * @member {String} initiated_at
 */
V1Settlement.prototype['initiated_at'] = undefined;

/**
 * The settlement's current status.
 * @member {String} status
 */
V1Settlement.prototype['status'] = undefined;

/**
 * @member {module:model/V1Money} total_money
 */
V1Settlement.prototype['total_money'] = undefined;






export default V1Settlement;

