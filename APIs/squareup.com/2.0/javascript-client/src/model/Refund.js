/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalRecipient from './AdditionalRecipient';
import Money from './Money';

/**
 * The Refund model module.
 * @module model/Refund
 * @version 2.0
 */
class Refund {
    /**
     * Constructs a new <code>Refund</code>.
     * Represents a refund processed for a Square transaction.
     * @alias module:model/Refund
     * @param amountMoney {module:model/Money} 
     * @param id {String} The refund's unique ID.
     * @param locationId {String} The ID of the refund's associated location.
     * @param reason {String} The reason for the refund being issued.
     * @param status {String} The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`).
     * @param tenderId {String} The ID of the refunded tender.
     * @param transactionId {String} The ID of the transaction that the refunded tender is part of.
     */
    constructor(amountMoney, id, locationId, reason, status, tenderId, transactionId) { 
        
        Refund.initialize(this, amountMoney, id, locationId, reason, status, tenderId, transactionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amountMoney, id, locationId, reason, status, tenderId, transactionId) { 
        obj['amount_money'] = amountMoney;
        obj['id'] = id;
        obj['location_id'] = locationId;
        obj['reason'] = reason;
        obj['status'] = status;
        obj['tender_id'] = tenderId;
        obj['transaction_id'] = transactionId;
    }

    /**
     * Constructs a <code>Refund</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Refund} obj Optional instance to populate.
     * @return {module:model/Refund} The populated <code>Refund</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Refund();

            if (data.hasOwnProperty('additional_recipients')) {
                obj['additional_recipients'] = ApiClient.convertToType(data['additional_recipients'], [AdditionalRecipient]);
            }
            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('processing_fee_money')) {
                obj['processing_fee_money'] = Money.constructFromObject(data['processing_fee_money']);
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tender_id')) {
                obj['tender_id'] = ApiClient.convertToType(data['tender_id'], 'String');
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Refund</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Refund</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Refund.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['additional_recipients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additional_recipients'])) {
                throw new Error("Expected the field `additional_recipients` to be an array in the JSON data but got " + data['additional_recipients']);
            }
            // validate the optional field `additional_recipients` (array)
            for (const item of data['additional_recipients']) {
                AdditionalRecipient.validateJSON(item);
            };
        }
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          Money.validateJSON(data['amount_money']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // validate the optional field `processing_fee_money`
        if (data['processing_fee_money']) { // data not null
          Money.validateJSON(data['processing_fee_money']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['tender_id'] && !(typeof data['tender_id'] === 'string' || data['tender_id'] instanceof String)) {
            throw new Error("Expected the field `tender_id` to be a primitive type in the JSON string but got " + data['tender_id']);
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }

        return true;
    }


}

Refund.RequiredProperties = ["amount_money", "id", "location_id", "reason", "status", "tender_id", "transaction_id"];

/**
 * Additional recipients (other than the merchant) receiving a portion of this refund. For example, fees assessed on a refund of a purchase by a third party integration.
 * @member {Array.<module:model/AdditionalRecipient>} additional_recipients
 */
Refund.prototype['additional_recipients'] = undefined;

/**
 * @member {module:model/Money} amount_money
 */
Refund.prototype['amount_money'] = undefined;

/**
 * The timestamp for when the refund was created, in RFC 3339 format.
 * @member {String} created_at
 */
Refund.prototype['created_at'] = undefined;

/**
 * The refund's unique ID.
 * @member {String} id
 */
Refund.prototype['id'] = undefined;

/**
 * The ID of the refund's associated location.
 * @member {String} location_id
 */
Refund.prototype['location_id'] = undefined;

/**
 * @member {module:model/Money} processing_fee_money
 */
Refund.prototype['processing_fee_money'] = undefined;

/**
 * The reason for the refund being issued.
 * @member {String} reason
 */
Refund.prototype['reason'] = undefined;

/**
 * The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`).
 * @member {String} status
 */
Refund.prototype['status'] = undefined;

/**
 * The ID of the refunded tender.
 * @member {String} tender_id
 */
Refund.prototype['tender_id'] = undefined;

/**
 * The ID of the transaction that the refunded tender is part of.
 * @member {String} transaction_id
 */
Refund.prototype['transaction_id'] = undefined;






export default Refund;

