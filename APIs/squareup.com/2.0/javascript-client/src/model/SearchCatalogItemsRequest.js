/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomAttributeFilter from './CustomAttributeFilter';

/**
 * The SearchCatalogItemsRequest model module.
 * @module model/SearchCatalogItemsRequest
 * @version 2.0
 */
class SearchCatalogItemsRequest {
    /**
     * Constructs a new <code>SearchCatalogItemsRequest</code>.
     * Defines the request body for the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
     * @alias module:model/SearchCatalogItemsRequest
     */
    constructor() { 
        
        SearchCatalogItemsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchCatalogItemsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchCatalogItemsRequest} obj Optional instance to populate.
     * @return {module:model/SearchCatalogItemsRequest} The populated <code>SearchCatalogItemsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchCatalogItemsRequest();

            if (data.hasOwnProperty('category_ids')) {
                obj['category_ids'] = ApiClient.convertToType(data['category_ids'], ['String']);
            }
            if (data.hasOwnProperty('cursor')) {
                obj['cursor'] = ApiClient.convertToType(data['cursor'], 'String');
            }
            if (data.hasOwnProperty('custom_attribute_filters')) {
                obj['custom_attribute_filters'] = ApiClient.convertToType(data['custom_attribute_filters'], [CustomAttributeFilter]);
            }
            if (data.hasOwnProperty('enabled_location_ids')) {
                obj['enabled_location_ids'] = ApiClient.convertToType(data['enabled_location_ids'], ['String']);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('product_types')) {
                obj['product_types'] = ApiClient.convertToType(data['product_types'], ['String']);
            }
            if (data.hasOwnProperty('sort_order')) {
                obj['sort_order'] = ApiClient.convertToType(data['sort_order'], 'String');
            }
            if (data.hasOwnProperty('stock_levels')) {
                obj['stock_levels'] = ApiClient.convertToType(data['stock_levels'], ['String']);
            }
            if (data.hasOwnProperty('text_filter')) {
                obj['text_filter'] = ApiClient.convertToType(data['text_filter'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchCatalogItemsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchCatalogItemsRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['category_ids'])) {
            throw new Error("Expected the field `category_ids` to be an array in the JSON data but got " + data['category_ids']);
        }
        // ensure the json data is a string
        if (data['cursor'] && !(typeof data['cursor'] === 'string' || data['cursor'] instanceof String)) {
            throw new Error("Expected the field `cursor` to be a primitive type in the JSON string but got " + data['cursor']);
        }
        if (data['custom_attribute_filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['custom_attribute_filters'])) {
                throw new Error("Expected the field `custom_attribute_filters` to be an array in the JSON data but got " + data['custom_attribute_filters']);
            }
            // validate the optional field `custom_attribute_filters` (array)
            for (const item of data['custom_attribute_filters']) {
                CustomAttributeFilter.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['enabled_location_ids'])) {
            throw new Error("Expected the field `enabled_location_ids` to be an array in the JSON data but got " + data['enabled_location_ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['product_types'])) {
            throw new Error("Expected the field `product_types` to be an array in the JSON data but got " + data['product_types']);
        }
        // ensure the json data is a string
        if (data['sort_order'] && !(typeof data['sort_order'] === 'string' || data['sort_order'] instanceof String)) {
            throw new Error("Expected the field `sort_order` to be a primitive type in the JSON string but got " + data['sort_order']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['stock_levels'])) {
            throw new Error("Expected the field `stock_levels` to be an array in the JSON data but got " + data['stock_levels']);
        }
        // ensure the json data is a string
        if (data['text_filter'] && !(typeof data['text_filter'] === 'string' || data['text_filter'] instanceof String)) {
            throw new Error("Expected the field `text_filter` to be a primitive type in the JSON string but got " + data['text_filter']);
        }

        return true;
    }


}



/**
 * The category id query expression to return items containing the specified category IDs.
 * @member {Array.<String>} category_ids
 */
SearchCatalogItemsRequest.prototype['category_ids'] = undefined;

/**
 * The pagination token, returned in the previous response, used to fetch the next batch of pending results.
 * @member {String} cursor
 */
SearchCatalogItemsRequest.prototype['cursor'] = undefined;

/**
 * The customer-attribute filter to return items or item variations matching the specified custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in a single call to the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
 * @member {Array.<module:model/CustomAttributeFilter>} custom_attribute_filters
 */
SearchCatalogItemsRequest.prototype['custom_attribute_filters'] = undefined;

/**
 * The enabled-location query expression to return items and item variations having specified enabled locations.
 * @member {Array.<String>} enabled_location_ids
 */
SearchCatalogItemsRequest.prototype['enabled_location_ids'] = undefined;

/**
 * The maximum number of results to return per page. The default value is 100.
 * @member {Number} limit
 */
SearchCatalogItemsRequest.prototype['limit'] = undefined;

/**
 * The product types query expression to return items or item variations having the specified product types.
 * @member {Array.<String>} product_types
 */
SearchCatalogItemsRequest.prototype['product_types'] = undefined;

/**
 * The order to sort the results by item names. The default sort order is ascending (`ASC`).
 * @member {String} sort_order
 */
SearchCatalogItemsRequest.prototype['sort_order'] = undefined;

/**
 * The stock-level query expression to return item variations with the specified stock levels.
 * @member {Array.<String>} stock_levels
 */
SearchCatalogItemsRequest.prototype['stock_levels'] = undefined;

/**
 * The text filter expression to return items or item variations containing specified text in the `name`, `description`, or `abbreviation` attribute value of an item, or in the `name`, `sku`, or `upc` attribute value of an item variation.
 * @member {String} text_filter
 */
SearchCatalogItemsRequest.prototype['text_filter'] = undefined;






export default SearchCatalogItemsRequest;

