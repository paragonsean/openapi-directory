/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SearchOrdersStateFilter model module.
 * @module model/SearchOrdersStateFilter
 * @version 2.0
 */
class SearchOrdersStateFilter {
    /**
     * Constructs a new <code>SearchOrdersStateFilter</code>.
     * Filter by the current order &#x60;state&#x60;.
     * @alias module:model/SearchOrdersStateFilter
     * @param states {Array.<String>} States to filter for.
     */
    constructor(states) { 
        
        SearchOrdersStateFilter.initialize(this, states);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, states) { 
        obj['states'] = states;
    }

    /**
     * Constructs a <code>SearchOrdersStateFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchOrdersStateFilter} obj Optional instance to populate.
     * @return {module:model/SearchOrdersStateFilter} The populated <code>SearchOrdersStateFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchOrdersStateFilter();

            if (data.hasOwnProperty('states')) {
                obj['states'] = ApiClient.convertToType(data['states'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchOrdersStateFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchOrdersStateFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchOrdersStateFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['states'])) {
            throw new Error("Expected the field `states` to be an array in the JSON data but got " + data['states']);
        }

        return true;
    }


}

SearchOrdersStateFilter.RequiredProperties = ["states"];

/**
 * States to filter for.
 * @member {Array.<String>} states
 */
SearchOrdersStateFilter.prototype['states'] = undefined;






export default SearchOrdersStateFilter;

