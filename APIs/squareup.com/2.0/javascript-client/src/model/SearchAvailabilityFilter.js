/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SegmentFilter from './SegmentFilter';
import TimeRange from './TimeRange';

/**
 * The SearchAvailabilityFilter model module.
 * @module model/SearchAvailabilityFilter
 * @version 2.0
 */
class SearchAvailabilityFilter {
    /**
     * Constructs a new <code>SearchAvailabilityFilter</code>.
     * A query filter to search for availabilities by.
     * @alias module:model/SearchAvailabilityFilter
     * @param startAtRange {module:model/TimeRange} 
     */
    constructor(startAtRange) { 
        
        SearchAvailabilityFilter.initialize(this, startAtRange);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, startAtRange) { 
        obj['start_at_range'] = startAtRange;
    }

    /**
     * Constructs a <code>SearchAvailabilityFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchAvailabilityFilter} obj Optional instance to populate.
     * @return {module:model/SearchAvailabilityFilter} The populated <code>SearchAvailabilityFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchAvailabilityFilter();

            if (data.hasOwnProperty('booking_id')) {
                obj['booking_id'] = ApiClient.convertToType(data['booking_id'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('segment_filters')) {
                obj['segment_filters'] = ApiClient.convertToType(data['segment_filters'], [SegmentFilter]);
            }
            if (data.hasOwnProperty('start_at_range')) {
                obj['start_at_range'] = TimeRange.constructFromObject(data['start_at_range']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchAvailabilityFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchAvailabilityFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchAvailabilityFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['booking_id'] && !(typeof data['booking_id'] === 'string' || data['booking_id'] instanceof String)) {
            throw new Error("Expected the field `booking_id` to be a primitive type in the JSON string but got " + data['booking_id']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        if (data['segment_filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['segment_filters'])) {
                throw new Error("Expected the field `segment_filters` to be an array in the JSON data but got " + data['segment_filters']);
            }
            // validate the optional field `segment_filters` (array)
            for (const item of data['segment_filters']) {
                SegmentFilter.validateJSON(item);
            };
        }
        // validate the optional field `start_at_range`
        if (data['start_at_range']) { // data not null
          TimeRange.validateJSON(data['start_at_range']);
        }

        return true;
    }


}

SearchAvailabilityFilter.RequiredProperties = ["start_at_range"];

/**
 * The query expression to search for availabilities for an existing booking by matching the specified `booking_id` value. This is commonly used to reschedule an appointment. If this expression is specified, the `location_id` and `segment_filters` expressions are not allowed.
 * @member {String} booking_id
 */
SearchAvailabilityFilter.prototype['booking_id'] = undefined;

/**
 * The query expression to search for availabilities matching the specified seller location IDs. This query expression is not applicable when `booking_id` is present.
 * @member {String} location_id
 */
SearchAvailabilityFilter.prototype['location_id'] = undefined;

/**
 * The list of segment filters to apply. A query with `n` segment filters returns availabilities with `n` segments per availability. It is not applicable when `booking_id` is present.
 * @member {Array.<module:model/SegmentFilter>} segment_filters
 */
SearchAvailabilityFilter.prototype['segment_filters'] = undefined;

/**
 * @member {module:model/TimeRange} start_at_range
 */
SearchAvailabilityFilter.prototype['start_at_range'] = undefined;






export default SearchAvailabilityFilter;

