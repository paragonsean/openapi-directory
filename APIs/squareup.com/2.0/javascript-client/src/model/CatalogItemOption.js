/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogObject from './CatalogObject';

/**
 * The CatalogItemOption model module.
 * @module model/CatalogItemOption
 * @version 2.0
 */
class CatalogItemOption {
    /**
     * Constructs a new <code>CatalogItemOption</code>.
     * A group of variations for a &#x60;CatalogItem&#x60;.
     * @alias module:model/CatalogItemOption
     */
    constructor() { 
        
        CatalogItemOption.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogItemOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogItemOption} obj Optional instance to populate.
     * @return {module:model/CatalogItemOption} The populated <code>CatalogItemOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogItemOption();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('show_colors')) {
                obj['show_colors'] = ApiClient.convertToType(data['show_colors'], 'Boolean');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [CatalogObject]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogItemOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogItemOption</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['values']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['values'])) {
                throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
            }
            // validate the optional field `values` (array)
            for (const item of data['values']) {
                CatalogObject.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The item option's human-readable description. Displayed in the Square Point of Sale app for the seller and in the Online Store or on receipts for the buyer. This is a searchable attribute for use in applicable query filters.
 * @member {String} description
 */
CatalogItemOption.prototype['description'] = undefined;

/**
 * The item option's display name for the customer. This is a searchable attribute for use in applicable query filters.
 * @member {String} display_name
 */
CatalogItemOption.prototype['display_name'] = undefined;

/**
 * The item option's display name for the seller. Must be unique across all item options. This is a searchable attribute for use in applicable query filters.
 * @member {String} name
 */
CatalogItemOption.prototype['name'] = undefined;

/**
 * If true, display colors for entries in `values` when present.
 * @member {Boolean} show_colors
 */
CatalogItemOption.prototype['show_colors'] = undefined;

/**
 * A list of CatalogObjects containing the `CatalogItemOptionValue`s for this item.
 * @member {Array.<module:model/CatalogObject>} values
 */
CatalogItemOption.prototype['values'] = undefined;






export default CatalogItemOption;

