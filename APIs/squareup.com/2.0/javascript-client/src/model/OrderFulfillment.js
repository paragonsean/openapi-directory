/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderFulfillmentPickupDetails from './OrderFulfillmentPickupDetails';
import OrderFulfillmentShipmentDetails from './OrderFulfillmentShipmentDetails';

/**
 * The OrderFulfillment model module.
 * @module model/OrderFulfillment
 * @version 2.0
 */
class OrderFulfillment {
    /**
     * Constructs a new <code>OrderFulfillment</code>.
     * Contains details about how to fulfill this order.
     * @alias module:model/OrderFulfillment
     */
    constructor() { 
        
        OrderFulfillment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderFulfillment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderFulfillment} obj Optional instance to populate.
     * @return {module:model/OrderFulfillment} The populated <code>OrderFulfillment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderFulfillment();

            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('pickup_details')) {
                obj['pickup_details'] = OrderFulfillmentPickupDetails.constructFromObject(data['pickup_details']);
            }
            if (data.hasOwnProperty('shipment_details')) {
                obj['shipment_details'] = OrderFulfillmentShipmentDetails.constructFromObject(data['shipment_details']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderFulfillment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderFulfillment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `pickup_details`
        if (data['pickup_details']) { // data not null
          OrderFulfillmentPickupDetails.validateJSON(data['pickup_details']);
        }
        // validate the optional field `shipment_details`
        if (data['shipment_details']) { // data not null
          OrderFulfillmentShipmentDetails.validateJSON(data['shipment_details']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * Application-defined data attached to this fulfillment. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
 * @member {Object.<String, String>} metadata
 */
OrderFulfillment.prototype['metadata'] = undefined;

/**
 * @member {module:model/OrderFulfillmentPickupDetails} pickup_details
 */
OrderFulfillment.prototype['pickup_details'] = undefined;

/**
 * @member {module:model/OrderFulfillmentShipmentDetails} shipment_details
 */
OrderFulfillment.prototype['shipment_details'] = undefined;

/**
 * The state of the fulfillment.
 * @member {String} state
 */
OrderFulfillment.prototype['state'] = undefined;

/**
 * The type of the fulfillment.
 * @member {String} type
 */
OrderFulfillment.prototype['type'] = undefined;

/**
 * A unique ID that identifies the fulfillment only within this order.
 * @member {String} uid
 */
OrderFulfillment.prototype['uid'] = undefined;






export default OrderFulfillment;

