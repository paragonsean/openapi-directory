/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The V1UpdateOrderRequest model module.
 * @module model/V1UpdateOrderRequest
 * @version 2.0
 */
class V1UpdateOrderRequest {
    /**
     * Constructs a new <code>V1UpdateOrderRequest</code>.
     * V1UpdateOrderRequest
     * @alias module:model/V1UpdateOrderRequest
     * @param action {String} The action to perform on the order (COMPLETE, CANCEL, or REFUND).
     */
    constructor(action) { 
        
        V1UpdateOrderRequest.initialize(this, action);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action) { 
        obj['action'] = action;
    }

    /**
     * Constructs a <code>V1UpdateOrderRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1UpdateOrderRequest} obj Optional instance to populate.
     * @return {module:model/V1UpdateOrderRequest} The populated <code>V1UpdateOrderRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1UpdateOrderRequest();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('canceled_note')) {
                obj['canceled_note'] = ApiClient.convertToType(data['canceled_note'], 'String');
            }
            if (data.hasOwnProperty('completed_note')) {
                obj['completed_note'] = ApiClient.convertToType(data['completed_note'], 'String');
            }
            if (data.hasOwnProperty('refunded_note')) {
                obj['refunded_note'] = ApiClient.convertToType(data['refunded_note'], 'String');
            }
            if (data.hasOwnProperty('shipped_tracking_number')) {
                obj['shipped_tracking_number'] = ApiClient.convertToType(data['shipped_tracking_number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1UpdateOrderRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1UpdateOrderRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of V1UpdateOrderRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['canceled_note'] && !(typeof data['canceled_note'] === 'string' || data['canceled_note'] instanceof String)) {
            throw new Error("Expected the field `canceled_note` to be a primitive type in the JSON string but got " + data['canceled_note']);
        }
        // ensure the json data is a string
        if (data['completed_note'] && !(typeof data['completed_note'] === 'string' || data['completed_note'] instanceof String)) {
            throw new Error("Expected the field `completed_note` to be a primitive type in the JSON string but got " + data['completed_note']);
        }
        // ensure the json data is a string
        if (data['refunded_note'] && !(typeof data['refunded_note'] === 'string' || data['refunded_note'] instanceof String)) {
            throw new Error("Expected the field `refunded_note` to be a primitive type in the JSON string but got " + data['refunded_note']);
        }
        // ensure the json data is a string
        if (data['shipped_tracking_number'] && !(typeof data['shipped_tracking_number'] === 'string' || data['shipped_tracking_number'] instanceof String)) {
            throw new Error("Expected the field `shipped_tracking_number` to be a primitive type in the JSON string but got " + data['shipped_tracking_number']);
        }

        return true;
    }


}

V1UpdateOrderRequest.RequiredProperties = ["action"];

/**
 * The action to perform on the order (COMPLETE, CANCEL, or REFUND).
 * @member {String} action
 */
V1UpdateOrderRequest.prototype['action'] = undefined;

/**
 * A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.
 * @member {String} canceled_note
 */
V1UpdateOrderRequest.prototype['canceled_note'] = undefined;

/**
 * A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.
 * @member {String} completed_note
 */
V1UpdateOrderRequest.prototype['completed_note'] = undefined;

/**
 * A merchant-specified note about the refunding of the order. Only valid if action is REFUND.
 * @member {String} refunded_note
 */
V1UpdateOrderRequest.prototype['refunded_note'] = undefined;

/**
 * The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.
 * @member {String} shipped_tracking_number
 */
V1UpdateOrderRequest.prototype['shipped_tracking_number'] = undefined;






export default V1UpdateOrderRequest;

