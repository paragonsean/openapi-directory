/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalRecipient from './AdditionalRecipient';
import Money from './Money';
import TenderCardDetails from './TenderCardDetails';
import TenderCashDetails from './TenderCashDetails';

/**
 * The Tender model module.
 * @module model/Tender
 * @version 2.0
 */
class Tender {
    /**
     * Constructs a new <code>Tender</code>.
     * Represents a tender (i.e., a method of payment) used in a Square transaction.
     * @alias module:model/Tender
     * @param type {String} The type of tender, such as `CARD` or `CASH`.
     */
    constructor(type) { 
        
        Tender.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Tender</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tender} obj Optional instance to populate.
     * @return {module:model/Tender} The populated <code>Tender</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tender();

            if (data.hasOwnProperty('additional_recipients')) {
                obj['additional_recipients'] = ApiClient.convertToType(data['additional_recipients'], [AdditionalRecipient]);
            }
            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('card_details')) {
                obj['card_details'] = TenderCardDetails.constructFromObject(data['card_details']);
            }
            if (data.hasOwnProperty('cash_details')) {
                obj['cash_details'] = TenderCashDetails.constructFromObject(data['cash_details']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('payment_id')) {
                obj['payment_id'] = ApiClient.convertToType(data['payment_id'], 'String');
            }
            if (data.hasOwnProperty('processing_fee_money')) {
                obj['processing_fee_money'] = Money.constructFromObject(data['processing_fee_money']);
            }
            if (data.hasOwnProperty('tip_money')) {
                obj['tip_money'] = Money.constructFromObject(data['tip_money']);
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tender</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tender</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Tender.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['additional_recipients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additional_recipients'])) {
                throw new Error("Expected the field `additional_recipients` to be an array in the JSON data but got " + data['additional_recipients']);
            }
            // validate the optional field `additional_recipients` (array)
            for (const item of data['additional_recipients']) {
                AdditionalRecipient.validateJSON(item);
            };
        }
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          Money.validateJSON(data['amount_money']);
        }
        // validate the optional field `card_details`
        if (data['card_details']) { // data not null
          TenderCardDetails.validateJSON(data['card_details']);
        }
        // validate the optional field `cash_details`
        if (data['cash_details']) { // data not null
          TenderCashDetails.validateJSON(data['cash_details']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['payment_id'] && !(typeof data['payment_id'] === 'string' || data['payment_id'] instanceof String)) {
            throw new Error("Expected the field `payment_id` to be a primitive type in the JSON string but got " + data['payment_id']);
        }
        // validate the optional field `processing_fee_money`
        if (data['processing_fee_money']) { // data not null
          Money.validateJSON(data['processing_fee_money']);
        }
        // validate the optional field `tip_money`
        if (data['tip_money']) { // data not null
          Money.validateJSON(data['tip_money']);
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Tender.RequiredProperties = ["type"];

/**
 * Additional recipients (other than the merchant) receiving a portion of this tender. For example, fees assessed on the purchase by a third party integration.
 * @member {Array.<module:model/AdditionalRecipient>} additional_recipients
 */
Tender.prototype['additional_recipients'] = undefined;

/**
 * @member {module:model/Money} amount_money
 */
Tender.prototype['amount_money'] = undefined;

/**
 * @member {module:model/TenderCardDetails} card_details
 */
Tender.prototype['card_details'] = undefined;

/**
 * @member {module:model/TenderCashDetails} cash_details
 */
Tender.prototype['cash_details'] = undefined;

/**
 * The timestamp for when the tender was created, in RFC 3339 format.
 * @member {String} created_at
 */
Tender.prototype['created_at'] = undefined;

/**
 * If the tender is associated with a customer or represents a customer's card on file, this is the ID of the associated customer.
 * @member {String} customer_id
 */
Tender.prototype['customer_id'] = undefined;

/**
 * The tender's unique ID.
 * @member {String} id
 */
Tender.prototype['id'] = undefined;

/**
 * The ID of the transaction's associated location.
 * @member {String} location_id
 */
Tender.prototype['location_id'] = undefined;

/**
 * An optional note associated with the tender at the time of payment.
 * @member {String} note
 */
Tender.prototype['note'] = undefined;

/**
 * The ID of the [Payment](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) that corresponds to this tender. This value is only present for payments created with the v2 Payments API.
 * @member {String} payment_id
 */
Tender.prototype['payment_id'] = undefined;

/**
 * @member {module:model/Money} processing_fee_money
 */
Tender.prototype['processing_fee_money'] = undefined;

/**
 * @member {module:model/Money} tip_money
 */
Tender.prototype['tip_money'] = undefined;

/**
 * The ID of the tender's associated transaction.
 * @member {String} transaction_id
 */
Tender.prototype['transaction_id'] = undefined;

/**
 * The type of tender, such as `CARD` or `CASH`.
 * @member {String} type
 */
Tender.prototype['type'] = undefined;






export default Tender;

