/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The V1PhoneNumber model module.
 * @module model/V1PhoneNumber
 * @version 2.0
 */
class V1PhoneNumber {
    /**
     * Constructs a new <code>V1PhoneNumber</code>.
     * Represents a phone number.
     * @alias module:model/V1PhoneNumber
     * @param callingCode {String} The phone number's international calling code. For US phone numbers, this value is +1.
     * @param number {String} The phone number.
     */
    constructor(callingCode, number) { 
        
        V1PhoneNumber.initialize(this, callingCode, number);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, callingCode, number) { 
        obj['calling_code'] = callingCode;
        obj['number'] = number;
    }

    /**
     * Constructs a <code>V1PhoneNumber</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1PhoneNumber} obj Optional instance to populate.
     * @return {module:model/V1PhoneNumber} The populated <code>V1PhoneNumber</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1PhoneNumber();

            if (data.hasOwnProperty('calling_code')) {
                obj['calling_code'] = ApiClient.convertToType(data['calling_code'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1PhoneNumber</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1PhoneNumber</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of V1PhoneNumber.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['calling_code'] && !(typeof data['calling_code'] === 'string' || data['calling_code'] instanceof String)) {
            throw new Error("Expected the field `calling_code` to be a primitive type in the JSON string but got " + data['calling_code']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }

        return true;
    }


}

V1PhoneNumber.RequiredProperties = ["calling_code", "number"];

/**
 * The phone number's international calling code. For US phone numbers, this value is +1.
 * @member {String} calling_code
 */
V1PhoneNumber.prototype['calling_code'] = undefined;

/**
 * The phone number.
 * @member {String} number
 */
V1PhoneNumber.prototype['number'] = undefined;






export default V1PhoneNumber;

