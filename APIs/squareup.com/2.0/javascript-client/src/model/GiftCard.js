/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The GiftCard model module.
 * @module model/GiftCard
 * @version 2.0
 */
class GiftCard {
    /**
     * Constructs a new <code>GiftCard</code>.
     * Represents a Square gift card.
     * @alias module:model/GiftCard
     * @param type {Object} 
     */
    constructor(type) { 
        
        GiftCard.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>GiftCard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GiftCard} obj Optional instance to populate.
     * @return {module:model/GiftCard} The populated <code>GiftCard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GiftCard();

            if (data.hasOwnProperty('balance_money')) {
                obj['balance_money'] = Money.constructFromObject(data['balance_money']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('customer_ids')) {
                obj['customer_ids'] = ApiClient.convertToType(data['customer_ids'], ['String']);
            }
            if (data.hasOwnProperty('gan')) {
                obj['gan'] = ApiClient.convertToType(data['gan'], 'String');
            }
            if (data.hasOwnProperty('gan_source')) {
                obj['gan_source'] = ApiClient.convertToType(data['gan_source'], Object);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], Object);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GiftCard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GiftCard</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GiftCard.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `balance_money`
        if (data['balance_money']) { // data not null
          Money.validateJSON(data['balance_money']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['customer_ids'])) {
            throw new Error("Expected the field `customer_ids` to be an array in the JSON data but got " + data['customer_ids']);
        }
        // ensure the json data is a string
        if (data['gan'] && !(typeof data['gan'] === 'string' || data['gan'] instanceof String)) {
            throw new Error("Expected the field `gan` to be a primitive type in the JSON string but got " + data['gan']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

GiftCard.RequiredProperties = ["type"];

/**
 * @member {module:model/Money} balance_money
 */
GiftCard.prototype['balance_money'] = undefined;

/**
 * The timestamp when the gift card was created, in RFC 3339 format.  In the case of a digital gift card, it is the time when you create a card  (using the Square Point of Sale application, Seller Dashboard, or Gift Cards API).   In the case of a plastic gift card, it is the time when Square associates the card with the  seller at the time of activation.
 * @member {String} created_at
 */
GiftCard.prototype['created_at'] = undefined;

/**
 * The IDs of the customers to whom this gift card is linked.
 * @member {Array.<String>} customer_ids
 */
GiftCard.prototype['customer_ids'] = undefined;

/**
 * The gift card account number.
 * @member {String} gan
 */
GiftCard.prototype['gan'] = undefined;

/**
 * @member {Object} gan_source
 */
GiftCard.prototype['gan_source'] = undefined;

/**
 * The Square-assigned ID of the gift card.
 * @member {String} id
 */
GiftCard.prototype['id'] = undefined;

/**
 * @member {Object} state
 */
GiftCard.prototype['state'] = undefined;

/**
 * @member {Object} type
 */
GiftCard.prototype['type'] = undefined;






export default GiftCard;

