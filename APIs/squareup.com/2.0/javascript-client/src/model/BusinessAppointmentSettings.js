/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The BusinessAppointmentSettings model module.
 * @module model/BusinessAppointmentSettings
 * @version 2.0
 */
class BusinessAppointmentSettings {
    /**
     * Constructs a new <code>BusinessAppointmentSettings</code>.
     * The service appointment settings, including where and how the service is provided.
     * @alias module:model/BusinessAppointmentSettings
     */
    constructor() { 
        
        BusinessAppointmentSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BusinessAppointmentSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BusinessAppointmentSettings} obj Optional instance to populate.
     * @return {module:model/BusinessAppointmentSettings} The populated <code>BusinessAppointmentSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BusinessAppointmentSettings();

            if (data.hasOwnProperty('alignment_time')) {
                obj['alignment_time'] = ApiClient.convertToType(data['alignment_time'], 'String');
            }
            if (data.hasOwnProperty('any_team_member_booking_enabled')) {
                obj['any_team_member_booking_enabled'] = ApiClient.convertToType(data['any_team_member_booking_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('cancellation_fee_money')) {
                obj['cancellation_fee_money'] = Money.constructFromObject(data['cancellation_fee_money']);
            }
            if (data.hasOwnProperty('cancellation_policy')) {
                obj['cancellation_policy'] = ApiClient.convertToType(data['cancellation_policy'], 'String');
            }
            if (data.hasOwnProperty('cancellation_policy_text')) {
                obj['cancellation_policy_text'] = ApiClient.convertToType(data['cancellation_policy_text'], 'String');
            }
            if (data.hasOwnProperty('cancellation_window_seconds')) {
                obj['cancellation_window_seconds'] = ApiClient.convertToType(data['cancellation_window_seconds'], 'Number');
            }
            if (data.hasOwnProperty('location_types')) {
                obj['location_types'] = ApiClient.convertToType(data['location_types'], ['String']);
            }
            if (data.hasOwnProperty('max_appointments_per_day_limit')) {
                obj['max_appointments_per_day_limit'] = ApiClient.convertToType(data['max_appointments_per_day_limit'], 'Number');
            }
            if (data.hasOwnProperty('max_appointments_per_day_limit_type')) {
                obj['max_appointments_per_day_limit_type'] = ApiClient.convertToType(data['max_appointments_per_day_limit_type'], 'String');
            }
            if (data.hasOwnProperty('max_booking_lead_time_seconds')) {
                obj['max_booking_lead_time_seconds'] = ApiClient.convertToType(data['max_booking_lead_time_seconds'], 'Number');
            }
            if (data.hasOwnProperty('min_booking_lead_time_seconds')) {
                obj['min_booking_lead_time_seconds'] = ApiClient.convertToType(data['min_booking_lead_time_seconds'], 'Number');
            }
            if (data.hasOwnProperty('multiple_service_booking_enabled')) {
                obj['multiple_service_booking_enabled'] = ApiClient.convertToType(data['multiple_service_booking_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('skip_booking_flow_staff_selection')) {
                obj['skip_booking_flow_staff_selection'] = ApiClient.convertToType(data['skip_booking_flow_staff_selection'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BusinessAppointmentSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BusinessAppointmentSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alignment_time'] && !(typeof data['alignment_time'] === 'string' || data['alignment_time'] instanceof String)) {
            throw new Error("Expected the field `alignment_time` to be a primitive type in the JSON string but got " + data['alignment_time']);
        }
        // validate the optional field `cancellation_fee_money`
        if (data['cancellation_fee_money']) { // data not null
          Money.validateJSON(data['cancellation_fee_money']);
        }
        // ensure the json data is a string
        if (data['cancellation_policy'] && !(typeof data['cancellation_policy'] === 'string' || data['cancellation_policy'] instanceof String)) {
            throw new Error("Expected the field `cancellation_policy` to be a primitive type in the JSON string but got " + data['cancellation_policy']);
        }
        // ensure the json data is a string
        if (data['cancellation_policy_text'] && !(typeof data['cancellation_policy_text'] === 'string' || data['cancellation_policy_text'] instanceof String)) {
            throw new Error("Expected the field `cancellation_policy_text` to be a primitive type in the JSON string but got " + data['cancellation_policy_text']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['location_types'])) {
            throw new Error("Expected the field `location_types` to be an array in the JSON data but got " + data['location_types']);
        }
        // ensure the json data is a string
        if (data['max_appointments_per_day_limit_type'] && !(typeof data['max_appointments_per_day_limit_type'] === 'string' || data['max_appointments_per_day_limit_type'] instanceof String)) {
            throw new Error("Expected the field `max_appointments_per_day_limit_type` to be a primitive type in the JSON string but got " + data['max_appointments_per_day_limit_type']);
        }

        return true;
    }


}



/**
 * The time unit of the service duration for bookings.
 * @member {String} alignment_time
 */
BusinessAppointmentSettings.prototype['alignment_time'] = undefined;

/**
 * Indicates whether a customer can choose from all available time slots and have a staff member assigned automatically (`true`) or not (`false`).
 * @member {Boolean} any_team_member_booking_enabled
 */
BusinessAppointmentSettings.prototype['any_team_member_booking_enabled'] = undefined;

/**
 * @member {module:model/Money} cancellation_fee_money
 */
BusinessAppointmentSettings.prototype['cancellation_fee_money'] = undefined;

/**
 * The cancellation policy adopted by the seller.
 * @member {String} cancellation_policy
 */
BusinessAppointmentSettings.prototype['cancellation_policy'] = undefined;

/**
 * The free-form text of the seller's cancellation policy.
 * @member {String} cancellation_policy_text
 */
BusinessAppointmentSettings.prototype['cancellation_policy_text'] = undefined;

/**
 * The cut-off time in seconds for allowing clients to cancel or reschedule an appointment.
 * @member {Number} cancellation_window_seconds
 */
BusinessAppointmentSettings.prototype['cancellation_window_seconds'] = undefined;

/**
 * Types of the location allowed for bookings.
 * @member {Array.<String>} location_types
 */
BusinessAppointmentSettings.prototype['location_types'] = undefined;

/**
 * The maximum number of daily appointments per team member or per location.
 * @member {Number} max_appointments_per_day_limit
 */
BusinessAppointmentSettings.prototype['max_appointments_per_day_limit'] = undefined;

/**
 * Indicates whether the daily appointment limit applies to team members or to business locations.
 * @member {String} max_appointments_per_day_limit_type
 */
BusinessAppointmentSettings.prototype['max_appointments_per_day_limit_type'] = undefined;

/**
 * The maximum lead time in seconds before a service can be booked. Bookings must be created at most this far ahead of the booking's starting time.
 * @member {Number} max_booking_lead_time_seconds
 */
BusinessAppointmentSettings.prototype['max_booking_lead_time_seconds'] = undefined;

/**
 * The minimum lead time in seconds before a service can be booked. Bookings must be created at least this far ahead of the booking's starting time.
 * @member {Number} min_booking_lead_time_seconds
 */
BusinessAppointmentSettings.prototype['min_booking_lead_time_seconds'] = undefined;

/**
 * Indicates whether a customer can book multiple services in a single online booking.
 * @member {Boolean} multiple_service_booking_enabled
 */
BusinessAppointmentSettings.prototype['multiple_service_booking_enabled'] = undefined;

/**
 * Indicates whether customers has an assigned staff member (`true`) or can select s staff member of their choice (`false`).
 * @member {Boolean} skip_booking_flow_staff_selection
 */
BusinessAppointmentSettings.prototype['skip_booking_flow_staff_selection'] = undefined;






export default BusinessAppointmentSettings;

