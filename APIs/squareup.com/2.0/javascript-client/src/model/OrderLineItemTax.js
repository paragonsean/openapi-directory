/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The OrderLineItemTax model module.
 * @module model/OrderLineItemTax
 * @version 2.0
 */
class OrderLineItemTax {
    /**
     * Constructs a new <code>OrderLineItemTax</code>.
     * Represents a tax that applies to one or more line item in the order.  Fixed-amount, order-scoped taxes are distributed across all non-zero line item totals. The amount distributed to each line item is relative to the amount the item contributes to the order subtotal.
     * @alias module:model/OrderLineItemTax
     */
    constructor() { 
        
        OrderLineItemTax.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderLineItemTax</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderLineItemTax} obj Optional instance to populate.
     * @return {module:model/OrderLineItemTax} The populated <code>OrderLineItemTax</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderLineItemTax();

            if (data.hasOwnProperty('applied_money')) {
                obj['applied_money'] = Money.constructFromObject(data['applied_money']);
            }
            if (data.hasOwnProperty('auto_applied')) {
                obj['auto_applied'] = ApiClient.convertToType(data['auto_applied'], 'Boolean');
            }
            if (data.hasOwnProperty('catalog_object_id')) {
                obj['catalog_object_id'] = ApiClient.convertToType(data['catalog_object_id'], 'String');
            }
            if (data.hasOwnProperty('catalog_version')) {
                obj['catalog_version'] = ApiClient.convertToType(data['catalog_version'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('percentage')) {
                obj['percentage'] = ApiClient.convertToType(data['percentage'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderLineItemTax</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderLineItemTax</code>.
     */
    static validateJSON(data) {
        // validate the optional field `applied_money`
        if (data['applied_money']) { // data not null
          Money.validateJSON(data['applied_money']);
        }
        // ensure the json data is a string
        if (data['catalog_object_id'] && !(typeof data['catalog_object_id'] === 'string' || data['catalog_object_id'] instanceof String)) {
            throw new Error("Expected the field `catalog_object_id` to be a primitive type in the JSON string but got " + data['catalog_object_id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['percentage'] && !(typeof data['percentage'] === 'string' || data['percentage'] instanceof String)) {
            throw new Error("Expected the field `percentage` to be a primitive type in the JSON string but got " + data['percentage']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * @member {module:model/Money} applied_money
 */
OrderLineItemTax.prototype['applied_money'] = undefined;

/**
 * Determines whether the tax was automatically applied to the order based on the catalog configuration. For an example, see  [Automatically Apply Taxes to an Order](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes).
 * @member {Boolean} auto_applied
 */
OrderLineItemTax.prototype['auto_applied'] = undefined;

/**
 * The catalog object ID referencing [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax).
 * @member {String} catalog_object_id
 */
OrderLineItemTax.prototype['catalog_object_id'] = undefined;

/**
 * The version of the catalog object that this tax references.
 * @member {Number} catalog_version
 */
OrderLineItemTax.prototype['catalog_version'] = undefined;

/**
 * Application-defined data attached to this tax. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
 * @member {Object.<String, String>} metadata
 */
OrderLineItemTax.prototype['metadata'] = undefined;

/**
 * The tax's name.
 * @member {String} name
 */
OrderLineItemTax.prototype['name'] = undefined;

/**
 * The percentage of the tax, as a string representation of a decimal number. For example, a value of `\"7.25\"` corresponds to a percentage of 7.25%.
 * @member {String} percentage
 */
OrderLineItemTax.prototype['percentage'] = undefined;

/**
 * Indicates the level at which the tax applies. For `ORDER` scoped taxes, Square generates references in `applied_taxes` on all order line items that do not have them. For `LINE_ITEM` scoped taxes, the tax only applies to line items with references in their `applied_taxes` field.  This field is immutable. To change the scope, you must delete the tax and re-add it as a new tax.
 * @member {String} scope
 */
OrderLineItemTax.prototype['scope'] = undefined;

/**
 * Indicates the calculation method used to apply the tax.
 * @member {String} type
 */
OrderLineItemTax.prototype['type'] = undefined;

/**
 * A unique ID that identifies the tax only within this order.
 * @member {String} uid
 */
OrderLineItemTax.prototype['uid'] = undefined;






export default OrderLineItemTax;

