/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InventoryCount model module.
 * @module model/InventoryCount
 * @version 2.0
 */
class InventoryCount {
    /**
     * Constructs a new <code>InventoryCount</code>.
     * Represents Square-estimated quantity of items in a particular state at a particular seller location based on the known history of physical counts and inventory adjustments.
     * @alias module:model/InventoryCount
     */
    constructor() { 
        
        InventoryCount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InventoryCount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InventoryCount} obj Optional instance to populate.
     * @return {module:model/InventoryCount} The populated <code>InventoryCount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InventoryCount();

            if (data.hasOwnProperty('calculated_at')) {
                obj['calculated_at'] = ApiClient.convertToType(data['calculated_at'], 'String');
            }
            if (data.hasOwnProperty('catalog_object_id')) {
                obj['catalog_object_id'] = ApiClient.convertToType(data['catalog_object_id'], 'String');
            }
            if (data.hasOwnProperty('catalog_object_type')) {
                obj['catalog_object_type'] = ApiClient.convertToType(data['catalog_object_type'], 'String');
            }
            if (data.hasOwnProperty('is_estimated')) {
                obj['is_estimated'] = ApiClient.convertToType(data['is_estimated'], 'Boolean');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InventoryCount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InventoryCount</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['calculated_at'] && !(typeof data['calculated_at'] === 'string' || data['calculated_at'] instanceof String)) {
            throw new Error("Expected the field `calculated_at` to be a primitive type in the JSON string but got " + data['calculated_at']);
        }
        // ensure the json data is a string
        if (data['catalog_object_id'] && !(typeof data['catalog_object_id'] === 'string' || data['catalog_object_id'] instanceof String)) {
            throw new Error("Expected the field `catalog_object_id` to be a primitive type in the JSON string but got " + data['catalog_object_id']);
        }
        // ensure the json data is a string
        if (data['catalog_object_type'] && !(typeof data['catalog_object_type'] === 'string' || data['catalog_object_type'] instanceof String)) {
            throw new Error("Expected the field `catalog_object_type` to be a primitive type in the JSON string but got " + data['catalog_object_type']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // ensure the json data is a string
        if (data['quantity'] && !(typeof data['quantity'] === 'string' || data['quantity'] instanceof String)) {
            throw new Error("Expected the field `quantity` to be a primitive type in the JSON string but got " + data['quantity']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * An RFC 3339-formatted timestamp that indicates when the most recent physical count or adjustment affecting the estimated count is received.
 * @member {String} calculated_at
 */
InventoryCount.prototype['calculated_at'] = undefined;

/**
 * The Square-generated ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
 * @member {String} catalog_object_id
 */
InventoryCount.prototype['catalog_object_id'] = undefined;

/**
 * The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only supported for the `ITEM_VARIATION` type.
 * @member {String} catalog_object_type
 */
InventoryCount.prototype['catalog_object_type'] = undefined;

/**
 * Whether the inventory count is for composed variation (TRUE) or not (FALSE). If true, the inventory count will not be present in the response of any of these endpoints: [BatchChangeInventory](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-change-inventory),  [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes),  [BatchRetrieveInventoryCounts](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-counts), and  [RetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-changes).
 * @member {Boolean} is_estimated
 */
InventoryCount.prototype['is_estimated'] = undefined;

/**
 * The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related quantity of items is being tracked.
 * @member {String} location_id
 */
InventoryCount.prototype['location_id'] = undefined;

/**
 * The number of items affected by the estimated count as a decimal string. Can support up to 5 digits after the decimal point.
 * @member {String} quantity
 */
InventoryCount.prototype['quantity'] = undefined;

/**
 * The current [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the related quantity of items.
 * @member {String} state
 */
InventoryCount.prototype['state'] = undefined;






export default InventoryCount;

