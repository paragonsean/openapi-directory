/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Card from './Card';
import CustomerPreferences from './CustomerPreferences';

/**
 * The Customer model module.
 * @module model/Customer
 * @version 2.0
 */
class Customer {
    /**
     * Constructs a new <code>Customer</code>.
     * Represents a Square customer profile in the Customer Directory of a Square seller.
     * @alias module:model/Customer
     */
    constructor() { 
        
        Customer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Customer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Customer} obj Optional instance to populate.
     * @return {module:model/Customer} The populated <code>Customer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Customer();

            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('birthday')) {
                obj['birthday'] = ApiClient.convertToType(data['birthday'], 'String');
            }
            if (data.hasOwnProperty('cards')) {
                obj['cards'] = ApiClient.convertToType(data['cards'], [Card]);
            }
            if (data.hasOwnProperty('company_name')) {
                obj['company_name'] = ApiClient.convertToType(data['company_name'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('creation_source')) {
                obj['creation_source'] = ApiClient.convertToType(data['creation_source'], 'String');
            }
            if (data.hasOwnProperty('email_address')) {
                obj['email_address'] = ApiClient.convertToType(data['email_address'], 'String');
            }
            if (data.hasOwnProperty('family_name')) {
                obj['family_name'] = ApiClient.convertToType(data['family_name'], 'String');
            }
            if (data.hasOwnProperty('given_name')) {
                obj['given_name'] = ApiClient.convertToType(data['given_name'], 'String');
            }
            if (data.hasOwnProperty('group_ids')) {
                obj['group_ids'] = ApiClient.convertToType(data['group_ids'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('phone_number')) {
                obj['phone_number'] = ApiClient.convertToType(data['phone_number'], 'String');
            }
            if (data.hasOwnProperty('preferences')) {
                obj['preferences'] = CustomerPreferences.constructFromObject(data['preferences']);
            }
            if (data.hasOwnProperty('reference_id')) {
                obj['reference_id'] = ApiClient.convertToType(data['reference_id'], 'String');
            }
            if (data.hasOwnProperty('segment_ids')) {
                obj['segment_ids'] = ApiClient.convertToType(data['segment_ids'], ['String']);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Customer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Customer</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['birthday'] && !(typeof data['birthday'] === 'string' || data['birthday'] instanceof String)) {
            throw new Error("Expected the field `birthday` to be a primitive type in the JSON string but got " + data['birthday']);
        }
        if (data['cards']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cards'])) {
                throw new Error("Expected the field `cards` to be an array in the JSON data but got " + data['cards']);
            }
            // validate the optional field `cards` (array)
            for (const item of data['cards']) {
                Card.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['company_name'] && !(typeof data['company_name'] === 'string' || data['company_name'] instanceof String)) {
            throw new Error("Expected the field `company_name` to be a primitive type in the JSON string but got " + data['company_name']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['creation_source'] && !(typeof data['creation_source'] === 'string' || data['creation_source'] instanceof String)) {
            throw new Error("Expected the field `creation_source` to be a primitive type in the JSON string but got " + data['creation_source']);
        }
        // ensure the json data is a string
        if (data['email_address'] && !(typeof data['email_address'] === 'string' || data['email_address'] instanceof String)) {
            throw new Error("Expected the field `email_address` to be a primitive type in the JSON string but got " + data['email_address']);
        }
        // ensure the json data is a string
        if (data['family_name'] && !(typeof data['family_name'] === 'string' || data['family_name'] instanceof String)) {
            throw new Error("Expected the field `family_name` to be a primitive type in the JSON string but got " + data['family_name']);
        }
        // ensure the json data is a string
        if (data['given_name'] && !(typeof data['given_name'] === 'string' || data['given_name'] instanceof String)) {
            throw new Error("Expected the field `given_name` to be a primitive type in the JSON string but got " + data['given_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['group_ids'])) {
            throw new Error("Expected the field `group_ids` to be an array in the JSON data but got " + data['group_ids']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['nickname'] && !(typeof data['nickname'] === 'string' || data['nickname'] instanceof String)) {
            throw new Error("Expected the field `nickname` to be a primitive type in the JSON string but got " + data['nickname']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['phone_number'] && !(typeof data['phone_number'] === 'string' || data['phone_number'] instanceof String)) {
            throw new Error("Expected the field `phone_number` to be a primitive type in the JSON string but got " + data['phone_number']);
        }
        // validate the optional field `preferences`
        if (data['preferences']) { // data not null
          CustomerPreferences.validateJSON(data['preferences']);
        }
        // ensure the json data is a string
        if (data['reference_id'] && !(typeof data['reference_id'] === 'string' || data['reference_id'] instanceof String)) {
            throw new Error("Expected the field `reference_id` to be a primitive type in the JSON string but got " + data['reference_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['segment_ids'])) {
            throw new Error("Expected the field `segment_ids` to be an array in the JSON data but got " + data['segment_ids']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address} address
 */
Customer.prototype['address'] = undefined;

/**
 * The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed. For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
 * @member {String} birthday
 */
Customer.prototype['birthday'] = undefined;

/**
 * Payment details of the credit, debit, and gift cards stored on file for the customer profile.   DEPRECATED at version 2021-06-16. Replaced by calling [ListCards](https://developer.squareup.com/reference/square_2021-08-18/cards-api/list-cards) (for credit and debit cards on file)  or [ListGiftCards](https://developer.squareup.com/reference/square_2021-08-18/gift-cards-api/list-gift-cards) (for gift cards on file) and including the `customer_id` query parameter.  For more information, see [Migrate to the Cards API and Gift Cards API](https://developer.squareup.com/docs/customers-api/use-the-api/integrate-with-other-services#migrate-customer-cards).
 * @member {Array.<module:model/Card>} cards
 */
Customer.prototype['cards'] = undefined;

/**
 * A business name associated with the customer profile.
 * @member {String} company_name
 */
Customer.prototype['company_name'] = undefined;

/**
 * The timestamp when the customer profile was created, in RFC 3339 format.
 * @member {String} created_at
 */
Customer.prototype['created_at'] = undefined;

/**
 * A creation source represents the method used to create the customer profile.
 * @member {String} creation_source
 */
Customer.prototype['creation_source'] = undefined;

/**
 * The email address associated with the customer profile.
 * @member {String} email_address
 */
Customer.prototype['email_address'] = undefined;

/**
 * The family (i.e., last) name associated with the customer profile.
 * @member {String} family_name
 */
Customer.prototype['family_name'] = undefined;

/**
 * The given (i.e., first) name associated with the customer profile.
 * @member {String} given_name
 */
Customer.prototype['given_name'] = undefined;

/**
 * The IDs of customer groups the customer belongs to.
 * @member {Array.<String>} group_ids
 */
Customer.prototype['group_ids'] = undefined;

/**
 * A unique Square-assigned ID for the customer profile.
 * @member {String} id
 */
Customer.prototype['id'] = undefined;

/**
 * A nickname for the customer profile.
 * @member {String} nickname
 */
Customer.prototype['nickname'] = undefined;

/**
 * A custom note associated with the customer profile.
 * @member {String} note
 */
Customer.prototype['note'] = undefined;

/**
 * The 11-digit phone number associated with the customer profile.
 * @member {String} phone_number
 */
Customer.prototype['phone_number'] = undefined;

/**
 * @member {module:model/CustomerPreferences} preferences
 */
Customer.prototype['preferences'] = undefined;

/**
 * An optional second ID used to associate the customer profile with an entity in another system.
 * @member {String} reference_id
 */
Customer.prototype['reference_id'] = undefined;

/**
 * The IDs of segments the customer belongs to.
 * @member {Array.<String>} segment_ids
 */
Customer.prototype['segment_ids'] = undefined;

/**
 * The timestamp when the customer profile was last updated, in RFC 3339 format.
 * @member {String} updated_at
 */
Customer.prototype['updated_at'] = undefined;

/**
 * The Square-assigned version number of the customer profile. The version number is incremented each time an update is committed to the customer profile, except for changes to customer segment membership and cards on file.
 * @member {Number} version
 */
Customer.prototype['version'] = undefined;






export default Customer;

