/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import V1Money from './V1Money';

/**
 * The V1Tender model module.
 * @module model/V1Tender
 * @version 2.0
 */
class V1Tender {
    /**
     * Constructs a new <code>V1Tender</code>.
     * A tender represents a discrete monetary exchange. Square represents this exchange as a money object with a specific currency and amount, where the amount is given in the smallest denomination of the given currency.  Square POS can accept more than one form of tender for a single payment (such as by splitting a bill between a credit card and a gift card). The &#x60;tender&#x60; field of the Payment object lists all forms of tender used for the payment.  Split tender payments behave slightly differently from single tender payments:  The receipt_url for a split tender corresponds only to the first tender listed in the tender field. To get the receipt URLs for the remaining tenders, use the receipt_url fields of the corresponding Tender objects.  *A note on gift cards**: when a customer purchases a Square gift card from a merchant, the merchant receives the full amount of the gift card in the associated payment.  When that gift card is used as a tender, the balance of the gift card is reduced and the merchant receives no funds. A &#x60;Tender&#x60; object with a type of &#x60;SQUARE_GIFT_CARD&#x60; indicates a gift card was used for some or all of the associated payment.
     * @alias module:model/V1Tender
     */
    constructor() { 
        
        V1Tender.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V1Tender</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1Tender} obj Optional instance to populate.
     * @return {module:model/V1Tender} The populated <code>V1Tender</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1Tender();

            if (data.hasOwnProperty('card_brand')) {
                obj['card_brand'] = ApiClient.convertToType(data['card_brand'], 'String');
            }
            if (data.hasOwnProperty('change_back_money')) {
                obj['change_back_money'] = V1Money.constructFromObject(data['change_back_money']);
            }
            if (data.hasOwnProperty('employee_id')) {
                obj['employee_id'] = ApiClient.convertToType(data['employee_id'], 'String');
            }
            if (data.hasOwnProperty('entry_method')) {
                obj['entry_method'] = ApiClient.convertToType(data['entry_method'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_exchange')) {
                obj['is_exchange'] = ApiClient.convertToType(data['is_exchange'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pan_suffix')) {
                obj['pan_suffix'] = ApiClient.convertToType(data['pan_suffix'], 'String');
            }
            if (data.hasOwnProperty('payment_note')) {
                obj['payment_note'] = ApiClient.convertToType(data['payment_note'], 'String');
            }
            if (data.hasOwnProperty('receipt_url')) {
                obj['receipt_url'] = ApiClient.convertToType(data['receipt_url'], 'String');
            }
            if (data.hasOwnProperty('refunded_money')) {
                obj['refunded_money'] = V1Money.constructFromObject(data['refunded_money']);
            }
            if (data.hasOwnProperty('settled_at')) {
                obj['settled_at'] = ApiClient.convertToType(data['settled_at'], 'String');
            }
            if (data.hasOwnProperty('tendered_at')) {
                obj['tendered_at'] = ApiClient.convertToType(data['tendered_at'], 'String');
            }
            if (data.hasOwnProperty('tendered_money')) {
                obj['tendered_money'] = V1Money.constructFromObject(data['tendered_money']);
            }
            if (data.hasOwnProperty('total_money')) {
                obj['total_money'] = V1Money.constructFromObject(data['total_money']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1Tender</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1Tender</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['card_brand'] && !(typeof data['card_brand'] === 'string' || data['card_brand'] instanceof String)) {
            throw new Error("Expected the field `card_brand` to be a primitive type in the JSON string but got " + data['card_brand']);
        }
        // validate the optional field `change_back_money`
        if (data['change_back_money']) { // data not null
          V1Money.validateJSON(data['change_back_money']);
        }
        // ensure the json data is a string
        if (data['employee_id'] && !(typeof data['employee_id'] === 'string' || data['employee_id'] instanceof String)) {
            throw new Error("Expected the field `employee_id` to be a primitive type in the JSON string but got " + data['employee_id']);
        }
        // ensure the json data is a string
        if (data['entry_method'] && !(typeof data['entry_method'] === 'string' || data['entry_method'] instanceof String)) {
            throw new Error("Expected the field `entry_method` to be a primitive type in the JSON string but got " + data['entry_method']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pan_suffix'] && !(typeof data['pan_suffix'] === 'string' || data['pan_suffix'] instanceof String)) {
            throw new Error("Expected the field `pan_suffix` to be a primitive type in the JSON string but got " + data['pan_suffix']);
        }
        // ensure the json data is a string
        if (data['payment_note'] && !(typeof data['payment_note'] === 'string' || data['payment_note'] instanceof String)) {
            throw new Error("Expected the field `payment_note` to be a primitive type in the JSON string but got " + data['payment_note']);
        }
        // ensure the json data is a string
        if (data['receipt_url'] && !(typeof data['receipt_url'] === 'string' || data['receipt_url'] instanceof String)) {
            throw new Error("Expected the field `receipt_url` to be a primitive type in the JSON string but got " + data['receipt_url']);
        }
        // validate the optional field `refunded_money`
        if (data['refunded_money']) { // data not null
          V1Money.validateJSON(data['refunded_money']);
        }
        // ensure the json data is a string
        if (data['settled_at'] && !(typeof data['settled_at'] === 'string' || data['settled_at'] instanceof String)) {
            throw new Error("Expected the field `settled_at` to be a primitive type in the JSON string but got " + data['settled_at']);
        }
        // ensure the json data is a string
        if (data['tendered_at'] && !(typeof data['tendered_at'] === 'string' || data['tendered_at'] instanceof String)) {
            throw new Error("Expected the field `tendered_at` to be a primitive type in the JSON string but got " + data['tendered_at']);
        }
        // validate the optional field `tendered_money`
        if (data['tendered_money']) { // data not null
          V1Money.validateJSON(data['tendered_money']);
        }
        // validate the optional field `total_money`
        if (data['total_money']) { // data not null
          V1Money.validateJSON(data['total_money']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The brand of credit card provided.
 * @member {String} card_brand
 */
V1Tender.prototype['card_brand'] = undefined;

/**
 * @member {module:model/V1Money} change_back_money
 */
V1Tender.prototype['change_back_money'] = undefined;

/**
 * The ID of the employee that processed the tender.
 * @member {String} employee_id
 */
V1Tender.prototype['employee_id'] = undefined;

/**
 * The tender's unique ID.
 * @member {String} entry_method
 */
V1Tender.prototype['entry_method'] = undefined;

/**
 * The tender's unique ID.
 * @member {String} id
 */
V1Tender.prototype['id'] = undefined;

/**
 * Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange.
 * @member {Boolean} is_exchange
 */
V1Tender.prototype['is_exchange'] = undefined;

/**
 * A human-readable description of the tender.
 * @member {String} name
 */
V1Tender.prototype['name'] = undefined;

/**
 * The last four digits of the provided credit card's account number.
 * @member {String} pan_suffix
 */
V1Tender.prototype['pan_suffix'] = undefined;

/**
 * Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER.
 * @member {String} payment_note
 */
V1Tender.prototype['payment_note'] = undefined;

/**
 * The URL of the receipt for the tender.
 * @member {String} receipt_url
 */
V1Tender.prototype['receipt_url'] = undefined;

/**
 * @member {module:model/V1Money} refunded_money
 */
V1Tender.prototype['refunded_money'] = undefined;

/**
 * The time when the tender was settled, in ISO 8601 format.
 * @member {String} settled_at
 */
V1Tender.prototype['settled_at'] = undefined;

/**
 * The time when the tender was created, in ISO 8601 format.
 * @member {String} tendered_at
 */
V1Tender.prototype['tendered_at'] = undefined;

/**
 * @member {module:model/V1Money} tendered_money
 */
V1Tender.prototype['tendered_money'] = undefined;

/**
 * @member {module:model/V1Money} total_money
 */
V1Tender.prototype['total_money'] = undefined;

/**
 * The type of tender.
 * @member {String} type
 */
V1Tender.prototype['type'] = undefined;






export default V1Tender;

