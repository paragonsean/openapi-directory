/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalRecipient from './AdditionalRecipient';
import Address from './Address';
import Money from './Money';

/**
 * The ChargeRequest model module.
 * @module model/ChargeRequest
 * @version 2.0
 */
class ChargeRequest {
    /**
     * Constructs a new <code>ChargeRequest</code>.
     * Defines the parameters that can be included in the body of a request to the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge) endpoint.  Deprecated - recommend using [CreatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment)
     * @alias module:model/ChargeRequest
     * @param amountMoney {module:model/Money} 
     * @param idempotencyKey {String} A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.
     */
    constructor(amountMoney, idempotencyKey) { 
        
        ChargeRequest.initialize(this, amountMoney, idempotencyKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amountMoney, idempotencyKey) { 
        obj['amount_money'] = amountMoney;
        obj['idempotency_key'] = idempotencyKey;
    }

    /**
     * Constructs a <code>ChargeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChargeRequest} obj Optional instance to populate.
     * @return {module:model/ChargeRequest} The populated <code>ChargeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChargeRequest();

            if (data.hasOwnProperty('additional_recipients')) {
                obj['additional_recipients'] = ApiClient.convertToType(data['additional_recipients'], [AdditionalRecipient]);
            }
            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('billing_address')) {
                obj['billing_address'] = Address.constructFromObject(data['billing_address']);
            }
            if (data.hasOwnProperty('buyer_email_address')) {
                obj['buyer_email_address'] = ApiClient.convertToType(data['buyer_email_address'], 'String');
            }
            if (data.hasOwnProperty('card_nonce')) {
                obj['card_nonce'] = ApiClient.convertToType(data['card_nonce'], 'String');
            }
            if (data.hasOwnProperty('customer_card_id')) {
                obj['customer_card_id'] = ApiClient.convertToType(data['customer_card_id'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('delay_capture')) {
                obj['delay_capture'] = ApiClient.convertToType(data['delay_capture'], 'Boolean');
            }
            if (data.hasOwnProperty('idempotency_key')) {
                obj['idempotency_key'] = ApiClient.convertToType(data['idempotency_key'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
            }
            if (data.hasOwnProperty('reference_id')) {
                obj['reference_id'] = ApiClient.convertToType(data['reference_id'], 'String');
            }
            if (data.hasOwnProperty('shipping_address')) {
                obj['shipping_address'] = Address.constructFromObject(data['shipping_address']);
            }
            if (data.hasOwnProperty('verification_token')) {
                obj['verification_token'] = ApiClient.convertToType(data['verification_token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChargeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChargeRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChargeRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['additional_recipients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additional_recipients'])) {
                throw new Error("Expected the field `additional_recipients` to be an array in the JSON data but got " + data['additional_recipients']);
            }
            // validate the optional field `additional_recipients` (array)
            for (const item of data['additional_recipients']) {
                AdditionalRecipient.validateJSON(item);
            };
        }
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          Money.validateJSON(data['amount_money']);
        }
        // validate the optional field `billing_address`
        if (data['billing_address']) { // data not null
          Address.validateJSON(data['billing_address']);
        }
        // ensure the json data is a string
        if (data['buyer_email_address'] && !(typeof data['buyer_email_address'] === 'string' || data['buyer_email_address'] instanceof String)) {
            throw new Error("Expected the field `buyer_email_address` to be a primitive type in the JSON string but got " + data['buyer_email_address']);
        }
        // ensure the json data is a string
        if (data['card_nonce'] && !(typeof data['card_nonce'] === 'string' || data['card_nonce'] instanceof String)) {
            throw new Error("Expected the field `card_nonce` to be a primitive type in the JSON string but got " + data['card_nonce']);
        }
        // ensure the json data is a string
        if (data['customer_card_id'] && !(typeof data['customer_card_id'] === 'string' || data['customer_card_id'] instanceof String)) {
            throw new Error("Expected the field `customer_card_id` to be a primitive type in the JSON string but got " + data['customer_card_id']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['idempotency_key'] && !(typeof data['idempotency_key'] === 'string' || data['idempotency_key'] instanceof String)) {
            throw new Error("Expected the field `idempotency_key` to be a primitive type in the JSON string but got " + data['idempotency_key']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
            throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
        }
        // ensure the json data is a string
        if (data['reference_id'] && !(typeof data['reference_id'] === 'string' || data['reference_id'] instanceof String)) {
            throw new Error("Expected the field `reference_id` to be a primitive type in the JSON string but got " + data['reference_id']);
        }
        // validate the optional field `shipping_address`
        if (data['shipping_address']) { // data not null
          Address.validateJSON(data['shipping_address']);
        }
        // ensure the json data is a string
        if (data['verification_token'] && !(typeof data['verification_token'] === 'string' || data['verification_token'] instanceof String)) {
            throw new Error("Expected the field `verification_token` to be a primitive type in the JSON string but got " + data['verification_token']);
        }

        return true;
    }


}

ChargeRequest.RequiredProperties = ["amount_money", "idempotency_key"];

/**
 * The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the `amount_money` value in your additional_recipients must not be more than 90% of the `amount_money` value in the charge request. The `location_id` must be the valid location of the app owner merchant.  This field requires the `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.  This field is currently not supported in sandbox.
 * @member {Array.<module:model/AdditionalRecipient>} additional_recipients
 */
ChargeRequest.prototype['additional_recipients'] = undefined;

/**
 * @member {module:model/Money} amount_money
 */
ChargeRequest.prototype['amount_money'] = undefined;

/**
 * @member {module:model/Address} billing_address
 */
ChargeRequest.prototype['billing_address'] = undefined;

/**
 * The buyer's email address, if available. This value is optional, but this transaction is ineligible for chargeback protection if it is not provided.
 * @member {String} buyer_email_address
 */
ChargeRequest.prototype['buyer_email_address'] = undefined;

/**
 * A payment token generated from the [Card.tokenize()](https://developer.squareup.com/reference/sdks/web/payments/objects/Card#Card.tokenize) that represents the card to charge.  The application that provides a payment token to this endpoint must be the _same application_ that generated the payment token with the Web Payments SDK. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for `customer_card_id`.
 * @member {String} card_nonce
 */
ChargeRequest.prototype['card_nonce'] = undefined;

/**
 * The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for `card_nonce`.  If you provide this value, you _must_ also provide a value for `customer_id`.
 * @member {String} customer_card_id
 */
ChargeRequest.prototype['customer_card_id'] = undefined;

/**
 * The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise.
 * @member {String} customer_id
 */
ChargeRequest.prototype['customer_id'] = undefined;

/**
 * If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the [CaptureTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/capture-transaction) endpoint) or a Void (with the [VoidTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/void-transaction) endpoint).  Default value: `false`
 * @member {Boolean} delay_capture
 */
ChargeRequest.prototype['delay_capture'] = undefined;

/**
 * A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.
 * @member {String} idempotency_key
 */
ChargeRequest.prototype['idempotency_key'] = undefined;

/**
 * An optional note to associate with the transaction.  This value cannot exceed 60 characters.
 * @member {String} note
 */
ChargeRequest.prototype['note'] = undefined;

/**
 * The ID of the order to associate with this transaction.  If you provide this value, the `amount_money` value of your request must __exactly match__ the value of the order's `total_money` field.
 * @member {String} order_id
 */
ChargeRequest.prototype['order_id'] = undefined;

/**
 * An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters.
 * @member {String} reference_id
 */
ChargeRequest.prototype['reference_id'] = undefined;

/**
 * @member {module:model/Address} shipping_address
 */
ChargeRequest.prototype['shipping_address'] = undefined;

/**
 * A token generated by SqPaymentForm's verifyBuyer() that represents customer's device info and 3ds challenge result.
 * @member {String} verification_token
 */
ChargeRequest.prototype['verification_token'] = undefined;






export default ChargeRequest;

