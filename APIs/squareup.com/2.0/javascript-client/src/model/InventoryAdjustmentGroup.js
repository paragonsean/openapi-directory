/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InventoryAdjustmentGroup model module.
 * @module model/InventoryAdjustmentGroup
 * @version 2.0
 */
class InventoryAdjustmentGroup {
    /**
     * Constructs a new <code>InventoryAdjustmentGroup</code>.
     * 
     * @alias module:model/InventoryAdjustmentGroup
     */
    constructor() { 
        
        InventoryAdjustmentGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InventoryAdjustmentGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InventoryAdjustmentGroup} obj Optional instance to populate.
     * @return {module:model/InventoryAdjustmentGroup} The populated <code>InventoryAdjustmentGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InventoryAdjustmentGroup();

            if (data.hasOwnProperty('from_state')) {
                obj['from_state'] = ApiClient.convertToType(data['from_state'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('root_adjustment_id')) {
                obj['root_adjustment_id'] = ApiClient.convertToType(data['root_adjustment_id'], 'String');
            }
            if (data.hasOwnProperty('to_state')) {
                obj['to_state'] = ApiClient.convertToType(data['to_state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InventoryAdjustmentGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InventoryAdjustmentGroup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['from_state'] && !(typeof data['from_state'] === 'string' || data['from_state'] instanceof String)) {
            throw new Error("Expected the field `from_state` to be a primitive type in the JSON string but got " + data['from_state']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['root_adjustment_id'] && !(typeof data['root_adjustment_id'] === 'string' || data['root_adjustment_id'] instanceof String)) {
            throw new Error("Expected the field `root_adjustment_id` to be a primitive type in the JSON string but got " + data['root_adjustment_id']);
        }
        // ensure the json data is a string
        if (data['to_state'] && !(typeof data['to_state'] === 'string' || data['to_state'] instanceof String)) {
            throw new Error("Expected the field `to_state` to be a primitive type in the JSON string but got " + data['to_state']);
        }

        return true;
    }


}



/**
 * Representative `from_state` for adjustments within the group. For example, for a group adjustment from `IN_STOCK` to `SOLD`, there can be two component adjustments in the group: one from `IN_STOCK`to `COMPOSED` and the other one from `COMPOSED` to `SOLD`. Here, the representative `from_state` for the `InventoryAdjustmentGroup` is `IN_STOCK`.
 * @member {String} from_state
 */
InventoryAdjustmentGroup.prototype['from_state'] = undefined;

/**
 * A unique ID generated by Square for the `InventoryAdjustmentGroup`.
 * @member {String} id
 */
InventoryAdjustmentGroup.prototype['id'] = undefined;

/**
 * The inventory adjustment of the composed variation.
 * @member {String} root_adjustment_id
 */
InventoryAdjustmentGroup.prototype['root_adjustment_id'] = undefined;

/**
 * Representative `to_state` for adjustments within group. For example, for a group adjustment from `IN_STOCK` to `SOLD`, the two component adjustments in the group can be from `IN_STOCK` to `COMPOSED` and from `COMPOSED` to `SOLD`.  Here, the representative `to_state` of the `InventoryAdjustmentGroup` is `SOLD`.
 * @member {String} to_state
 */
InventoryAdjustmentGroup.prototype['to_state'] = undefined;






export default InventoryAdjustmentGroup;

