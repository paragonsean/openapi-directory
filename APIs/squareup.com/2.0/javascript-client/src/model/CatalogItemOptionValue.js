/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogItemOptionValue model module.
 * @module model/CatalogItemOptionValue
 * @version 2.0
 */
class CatalogItemOptionValue {
    /**
     * Constructs a new <code>CatalogItemOptionValue</code>.
     * An enumerated value that can link a &#x60;CatalogItemVariation&#x60; to an item option as one of its item option values.
     * @alias module:model/CatalogItemOptionValue
     */
    constructor() { 
        
        CatalogItemOptionValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogItemOptionValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogItemOptionValue} obj Optional instance to populate.
     * @return {module:model/CatalogItemOptionValue} The populated <code>CatalogItemOptionValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogItemOptionValue();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('item_option_id')) {
                obj['item_option_id'] = ApiClient.convertToType(data['item_option_id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ordinal')) {
                obj['ordinal'] = ApiClient.convertToType(data['ordinal'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogItemOptionValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogItemOptionValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['item_option_id'] && !(typeof data['item_option_id'] === 'string' || data['item_option_id'] instanceof String)) {
            throw new Error("Expected the field `item_option_id` to be a primitive type in the JSON string but got " + data['item_option_id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The HTML-supported hex color for the item option (e.g., \"#ff8d4e85\"). Only displayed if `show_colors` is enabled on the parent `ItemOption`. When left unset, `color` defaults to white (\"#ffffff\") when `show_colors` is enabled on the parent `ItemOption`.
 * @member {String} color
 */
CatalogItemOptionValue.prototype['color'] = undefined;

/**
 * A human-readable description for the option value. This is a searchable attribute for use in applicable query filters.
 * @member {String} description
 */
CatalogItemOptionValue.prototype['description'] = undefined;

/**
 * Unique ID of the associated item option.
 * @member {String} item_option_id
 */
CatalogItemOptionValue.prototype['item_option_id'] = undefined;

/**
 * Name of this item option value. This is a searchable attribute for use in applicable query filters.
 * @member {String} name
 */
CatalogItemOptionValue.prototype['name'] = undefined;

/**
 * Determines where this option value appears in a list of option values.
 * @member {Number} ordinal
 */
CatalogItemOptionValue.prototype['ordinal'] = undefined;






export default CatalogItemOptionValue;

