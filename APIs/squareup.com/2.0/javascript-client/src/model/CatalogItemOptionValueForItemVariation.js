/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogItemOptionValueForItemVariation model module.
 * @module model/CatalogItemOptionValueForItemVariation
 * @version 2.0
 */
class CatalogItemOptionValueForItemVariation {
    /**
     * Constructs a new <code>CatalogItemOptionValueForItemVariation</code>.
     * A &#x60;CatalogItemOptionValue&#x60; links an item variation to an item option as an item option value. For example, a t-shirt item may offer a color option and a size option. An item option value would represent each variation of t-shirt: For example, \&quot;Color:Red, Size:Small\&quot; or \&quot;Color:Blue, Size:Medium\&quot;.
     * @alias module:model/CatalogItemOptionValueForItemVariation
     */
    constructor() { 
        
        CatalogItemOptionValueForItemVariation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogItemOptionValueForItemVariation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogItemOptionValueForItemVariation} obj Optional instance to populate.
     * @return {module:model/CatalogItemOptionValueForItemVariation} The populated <code>CatalogItemOptionValueForItemVariation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogItemOptionValueForItemVariation();

            if (data.hasOwnProperty('item_option_id')) {
                obj['item_option_id'] = ApiClient.convertToType(data['item_option_id'], 'String');
            }
            if (data.hasOwnProperty('item_option_value_id')) {
                obj['item_option_value_id'] = ApiClient.convertToType(data['item_option_value_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogItemOptionValueForItemVariation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogItemOptionValueForItemVariation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['item_option_id'] && !(typeof data['item_option_id'] === 'string' || data['item_option_id'] instanceof String)) {
            throw new Error("Expected the field `item_option_id` to be a primitive type in the JSON string but got " + data['item_option_id']);
        }
        // ensure the json data is a string
        if (data['item_option_value_id'] && !(typeof data['item_option_value_id'] === 'string' || data['item_option_value_id'] instanceof String)) {
            throw new Error("Expected the field `item_option_value_id` to be a primitive type in the JSON string but got " + data['item_option_value_id']);
        }

        return true;
    }


}



/**
 * The unique id of an item option.
 * @member {String} item_option_id
 */
CatalogItemOptionValueForItemVariation.prototype['item_option_id'] = undefined;

/**
 * The unique id of the selected value for the item option.
 * @member {String} item_option_value_id
 */
CatalogItemOptionValueForItemVariation.prototype['item_option_value_id'] = undefined;






export default CatalogItemOptionValueForItemVariation;

