/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ObtainTokenRequest model module.
 * @module model/ObtainTokenRequest
 * @version 2.0
 */
class ObtainTokenRequest {
    /**
     * Constructs a new <code>ObtainTokenRequest</code>.
     * 
     * @alias module:model/ObtainTokenRequest
     * @param clientId {String} The Square-issued ID of your application, available from the [developer dashboard](https://developer.squareup.com/apps).
     * @param clientSecret {String} The Square-issued application secret for your application, available from the [developer dashboard](https://developer.squareup.com/apps).
     * @param grantType {String} Specifies the method to request an OAuth access token. Valid values are: `authorization_code`, `refresh_token`, and `migration_token`
     */
    constructor(clientId, clientSecret, grantType) { 
        
        ObtainTokenRequest.initialize(this, clientId, clientSecret, grantType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clientId, clientSecret, grantType) { 
        obj['client_id'] = clientId;
        obj['client_secret'] = clientSecret;
        obj['grant_type'] = grantType;
    }

    /**
     * Constructs a <code>ObtainTokenRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObtainTokenRequest} obj Optional instance to populate.
     * @return {module:model/ObtainTokenRequest} The populated <code>ObtainTokenRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObtainTokenRequest();

            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('client_secret')) {
                obj['client_secret'] = ApiClient.convertToType(data['client_secret'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('grant_type')) {
                obj['grant_type'] = ApiClient.convertToType(data['grant_type'], 'String');
            }
            if (data.hasOwnProperty('migration_token')) {
                obj['migration_token'] = ApiClient.convertToType(data['migration_token'], 'String');
            }
            if (data.hasOwnProperty('redirect_uri')) {
                obj['redirect_uri'] = ApiClient.convertToType(data['redirect_uri'], 'String');
            }
            if (data.hasOwnProperty('refresh_token')) {
                obj['refresh_token'] = ApiClient.convertToType(data['refresh_token'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
            if (data.hasOwnProperty('short_lived')) {
                obj['short_lived'] = ApiClient.convertToType(data['short_lived'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObtainTokenRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObtainTokenRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ObtainTokenRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['client_secret'] && !(typeof data['client_secret'] === 'string' || data['client_secret'] instanceof String)) {
            throw new Error("Expected the field `client_secret` to be a primitive type in the JSON string but got " + data['client_secret']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['grant_type'] && !(typeof data['grant_type'] === 'string' || data['grant_type'] instanceof String)) {
            throw new Error("Expected the field `grant_type` to be a primitive type in the JSON string but got " + data['grant_type']);
        }
        // ensure the json data is a string
        if (data['migration_token'] && !(typeof data['migration_token'] === 'string' || data['migration_token'] instanceof String)) {
            throw new Error("Expected the field `migration_token` to be a primitive type in the JSON string but got " + data['migration_token']);
        }
        // ensure the json data is a string
        if (data['redirect_uri'] && !(typeof data['redirect_uri'] === 'string' || data['redirect_uri'] instanceof String)) {
            throw new Error("Expected the field `redirect_uri` to be a primitive type in the JSON string but got " + data['redirect_uri']);
        }
        // ensure the json data is a string
        if (data['refresh_token'] && !(typeof data['refresh_token'] === 'string' || data['refresh_token'] instanceof String)) {
            throw new Error("Expected the field `refresh_token` to be a primitive type in the JSON string but got " + data['refresh_token']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }

        return true;
    }


}

ObtainTokenRequest.RequiredProperties = ["client_id", "client_secret", "grant_type"];

/**
 * The Square-issued ID of your application, available from the [developer dashboard](https://developer.squareup.com/apps).
 * @member {String} client_id
 */
ObtainTokenRequest.prototype['client_id'] = undefined;

/**
 * The Square-issued application secret for your application, available from the [developer dashboard](https://developer.squareup.com/apps).
 * @member {String} client_secret
 */
ObtainTokenRequest.prototype['client_secret'] = undefined;

/**
 * The authorization code to exchange. This is required if `grant_type` is set to `authorization_code`, to indicate that the application wants to exchange an authorization code for an OAuth access token.
 * @member {String} code
 */
ObtainTokenRequest.prototype['code'] = undefined;

/**
 * Specifies the method to request an OAuth access token. Valid values are: `authorization_code`, `refresh_token`, and `migration_token`
 * @member {String} grant_type
 */
ObtainTokenRequest.prototype['grant_type'] = undefined;

/**
 * Legacy OAuth access token obtained using a Connect API version prior to 2019-03-13. This parameter is required if `grant_type` is set to `migration_token` to indicate that the application wants to get a replacement OAuth access token. The response also returns a refresh token. For more information, see [Migrate to Using Refresh Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).
 * @member {String} migration_token
 */
ObtainTokenRequest.prototype['migration_token'] = undefined;

/**
 * The redirect URL assigned in the [developer dashboard](https://developer.squareup.com/apps).
 * @member {String} redirect_uri
 */
ObtainTokenRequest.prototype['redirect_uri'] = undefined;

/**
 * A valid refresh token for generating a new OAuth access token. A valid refresh token is required if `grant_type` is set to `refresh_token` , to indicate the application wants a replacement for an expired OAuth access token.
 * @member {String} refresh_token
 */
ObtainTokenRequest.prototype['refresh_token'] = undefined;

/**
 * A JSON list of strings representing the permissions the application is requesting. For example: \"`[\"MERCHANT_PROFILE_READ\",\"PAYMENTS_READ\",\"BANK_ACCOUNTS_READ\"]`\" The access token returned in the response is granted the permissions that comprise the intersection between the requested list of permissions, and those that belong to the provided refresh token.
 * @member {Array.<String>} scopes
 */
ObtainTokenRequest.prototype['scopes'] = undefined;

/**
 * A boolean indicating a request for a short-lived access token. The short-lived access token returned in the response will expire in 24 hours.
 * @member {Boolean} short_lived
 */
ObtainTokenRequest.prototype['short_lived'] = undefined;






export default ObtainTokenRequest;

