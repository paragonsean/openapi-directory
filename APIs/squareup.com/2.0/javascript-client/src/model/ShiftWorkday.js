/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateRange from './DateRange';

/**
 * The ShiftWorkday model module.
 * @module model/ShiftWorkday
 * @version 2.0
 */
class ShiftWorkday {
    /**
     * Constructs a new <code>ShiftWorkday</code>.
     * A &#x60;Shift&#x60; search query filter parameter that sets a range of days that a &#x60;Shift&#x60; must start or end in before passing the filter condition.
     * @alias module:model/ShiftWorkday
     */
    constructor() { 
        
        ShiftWorkday.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ShiftWorkday</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShiftWorkday} obj Optional instance to populate.
     * @return {module:model/ShiftWorkday} The populated <code>ShiftWorkday</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShiftWorkday();

            if (data.hasOwnProperty('date_range')) {
                obj['date_range'] = DateRange.constructFromObject(data['date_range']);
            }
            if (data.hasOwnProperty('default_timezone')) {
                obj['default_timezone'] = ApiClient.convertToType(data['default_timezone'], 'String');
            }
            if (data.hasOwnProperty('match_shifts_by')) {
                obj['match_shifts_by'] = ApiClient.convertToType(data['match_shifts_by'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShiftWorkday</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShiftWorkday</code>.
     */
    static validateJSON(data) {
        // validate the optional field `date_range`
        if (data['date_range']) { // data not null
          DateRange.validateJSON(data['date_range']);
        }
        // ensure the json data is a string
        if (data['default_timezone'] && !(typeof data['default_timezone'] === 'string' || data['default_timezone'] instanceof String)) {
            throw new Error("Expected the field `default_timezone` to be a primitive type in the JSON string but got " + data['default_timezone']);
        }
        // ensure the json data is a string
        if (data['match_shifts_by'] && !(typeof data['match_shifts_by'] === 'string' || data['match_shifts_by'] instanceof String)) {
            throw new Error("Expected the field `match_shifts_by` to be a primitive type in the JSON string but got " + data['match_shifts_by']);
        }

        return true;
    }


}



/**
 * @member {module:model/DateRange} date_range
 */
ShiftWorkday.prototype['date_range'] = undefined;

/**
 * Location-specific timezones convert workdays to datetime filters. Every location included in the query must have a timezone or this field must be provided as a fallback. Format: the IANA timezone database identifier for the relevant timezone.
 * @member {String} default_timezone
 */
ShiftWorkday.prototype['default_timezone'] = undefined;

/**
 * The strategy on which the dates are applied.
 * @member {String} match_shifts_by
 */
ShiftWorkday.prototype['match_shifts_by'] = undefined;






export default ShiftWorkday;

