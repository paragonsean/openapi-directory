/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogQueryText model module.
 * @module model/CatalogQueryText
 * @version 2.0
 */
class CatalogQueryText {
    /**
     * Constructs a new <code>CatalogQueryText</code>.
     * The query filter to return the search result whose searchable attribute values contain all of the specified keywords or tokens, independent of the token order or case.
     * @alias module:model/CatalogQueryText
     * @param keywords {Array.<String>} A list of 1, 2, or 3 search keywords. Keywords with fewer than 3 characters are ignored.
     */
    constructor(keywords) { 
        
        CatalogQueryText.initialize(this, keywords);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keywords) { 
        obj['keywords'] = keywords;
    }

    /**
     * Constructs a <code>CatalogQueryText</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogQueryText} obj Optional instance to populate.
     * @return {module:model/CatalogQueryText} The populated <code>CatalogQueryText</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogQueryText();

            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogQueryText</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogQueryText</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogQueryText.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keywords'])) {
            throw new Error("Expected the field `keywords` to be an array in the JSON data but got " + data['keywords']);
        }

        return true;
    }


}

CatalogQueryText.RequiredProperties = ["keywords"];

/**
 * A list of 1, 2, or 3 search keywords. Keywords with fewer than 3 characters are ignored.
 * @member {Array.<String>} keywords
 */
CatalogQueryText.prototype['keywords'] = undefined;






export default CatalogQueryText;

