/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The ItemVariationLocationOverrides model module.
 * @module model/ItemVariationLocationOverrides
 * @version 2.0
 */
class ItemVariationLocationOverrides {
    /**
     * Constructs a new <code>ItemVariationLocationOverrides</code>.
     * Price and inventory alerting overrides for a &#x60;CatalogItemVariation&#x60; at a specific &#x60;Location&#x60;.
     * @alias module:model/ItemVariationLocationOverrides
     */
    constructor() { 
        
        ItemVariationLocationOverrides.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemVariationLocationOverrides</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemVariationLocationOverrides} obj Optional instance to populate.
     * @return {module:model/ItemVariationLocationOverrides} The populated <code>ItemVariationLocationOverrides</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemVariationLocationOverrides();

            if (data.hasOwnProperty('inventory_alert_threshold')) {
                obj['inventory_alert_threshold'] = ApiClient.convertToType(data['inventory_alert_threshold'], 'Number');
            }
            if (data.hasOwnProperty('inventory_alert_type')) {
                obj['inventory_alert_type'] = ApiClient.convertToType(data['inventory_alert_type'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('price_money')) {
                obj['price_money'] = Money.constructFromObject(data['price_money']);
            }
            if (data.hasOwnProperty('pricing_type')) {
                obj['pricing_type'] = ApiClient.convertToType(data['pricing_type'], 'String');
            }
            if (data.hasOwnProperty('track_inventory')) {
                obj['track_inventory'] = ApiClient.convertToType(data['track_inventory'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemVariationLocationOverrides</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemVariationLocationOverrides</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['inventory_alert_type'] && !(typeof data['inventory_alert_type'] === 'string' || data['inventory_alert_type'] instanceof String)) {
            throw new Error("Expected the field `inventory_alert_type` to be a primitive type in the JSON string but got " + data['inventory_alert_type']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // validate the optional field `price_money`
        if (data['price_money']) { // data not null
          Money.validateJSON(data['price_money']);
        }
        // ensure the json data is a string
        if (data['pricing_type'] && !(typeof data['pricing_type'] === 'string' || data['pricing_type'] instanceof String)) {
            throw new Error("Expected the field `pricing_type` to be a primitive type in the JSON string but got " + data['pricing_type']);
        }

        return true;
    }


}



/**
 * If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type` is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.  This value is always an integer.
 * @member {Number} inventory_alert_threshold
 */
ItemVariationLocationOverrides.prototype['inventory_alert_threshold'] = undefined;

/**
 * Indicates whether the `CatalogItemVariation` displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`.
 * @member {String} inventory_alert_type
 */
ItemVariationLocationOverrides.prototype['inventory_alert_type'] = undefined;

/**
 * The ID of the `Location`. This can include locations that are deactivated.
 * @member {String} location_id
 */
ItemVariationLocationOverrides.prototype['location_id'] = undefined;

/**
 * @member {module:model/Money} price_money
 */
ItemVariationLocationOverrides.prototype['price_money'] = undefined;

/**
 * The pricing type (fixed or variable) for the `CatalogItemVariation` at the given `Location`.
 * @member {String} pricing_type
 */
ItemVariationLocationOverrides.prototype['pricing_type'] = undefined;

/**
 * If `true`, inventory tracking is active for the `CatalogItemVariation` at this `Location`.
 * @member {Boolean} track_inventory
 */
ItemVariationLocationOverrides.prototype['track_inventory'] = undefined;






export default ItemVariationLocationOverrides;

