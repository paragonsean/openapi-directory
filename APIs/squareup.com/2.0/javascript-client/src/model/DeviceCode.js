/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceCode model module.
 * @module model/DeviceCode
 * @version 2.0
 */
class DeviceCode {
    /**
     * Constructs a new <code>DeviceCode</code>.
     * 
     * @alias module:model/DeviceCode
     * @param productType {String} The targeting product type of the device code.
     */
    constructor(productType) { 
        
        DeviceCode.initialize(this, productType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, productType) { 
        obj['product_type'] = productType;
    }

    /**
     * Constructs a <code>DeviceCode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceCode} obj Optional instance to populate.
     * @return {module:model/DeviceCode} The populated <code>DeviceCode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceCode();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('device_id')) {
                obj['device_id'] = ApiClient.convertToType(data['device_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pair_by')) {
                obj['pair_by'] = ApiClient.convertToType(data['pair_by'], 'String');
            }
            if (data.hasOwnProperty('paired_at')) {
                obj['paired_at'] = ApiClient.convertToType(data['paired_at'], 'String');
            }
            if (data.hasOwnProperty('product_type')) {
                obj['product_type'] = ApiClient.convertToType(data['product_type'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('status_changed_at')) {
                obj['status_changed_at'] = ApiClient.convertToType(data['status_changed_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceCode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceCode</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceCode.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['device_id'] && !(typeof data['device_id'] === 'string' || data['device_id'] instanceof String)) {
            throw new Error("Expected the field `device_id` to be a primitive type in the JSON string but got " + data['device_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pair_by'] && !(typeof data['pair_by'] === 'string' || data['pair_by'] instanceof String)) {
            throw new Error("Expected the field `pair_by` to be a primitive type in the JSON string but got " + data['pair_by']);
        }
        // ensure the json data is a string
        if (data['paired_at'] && !(typeof data['paired_at'] === 'string' || data['paired_at'] instanceof String)) {
            throw new Error("Expected the field `paired_at` to be a primitive type in the JSON string but got " + data['paired_at']);
        }
        // ensure the json data is a string
        if (data['product_type'] && !(typeof data['product_type'] === 'string' || data['product_type'] instanceof String)) {
            throw new Error("Expected the field `product_type` to be a primitive type in the JSON string but got " + data['product_type']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['status_changed_at'] && !(typeof data['status_changed_at'] === 'string' || data['status_changed_at'] instanceof String)) {
            throw new Error("Expected the field `status_changed_at` to be a primitive type in the JSON string but got " + data['status_changed_at']);
        }

        return true;
    }


}

DeviceCode.RequiredProperties = ["product_type"];

/**
 * The unique code that can be used to login.
 * @member {String} code
 */
DeviceCode.prototype['code'] = undefined;

/**
 * When this DeviceCode was created. Timestamp in RFC 3339 format.
 * @member {String} created_at
 */
DeviceCode.prototype['created_at'] = undefined;

/**
 * The unique id of the device that used this code. Populated when the device is paired up.
 * @member {String} device_id
 */
DeviceCode.prototype['device_id'] = undefined;

/**
 * The unique id for this device code.
 * @member {String} id
 */
DeviceCode.prototype['id'] = undefined;

/**
 * The location assigned to this code.
 * @member {String} location_id
 */
DeviceCode.prototype['location_id'] = undefined;

/**
 * An optional user-defined name for the device code.
 * @member {String} name
 */
DeviceCode.prototype['name'] = undefined;

/**
 * When this DeviceCode will expire and no longer login. Timestamp in RFC 3339 format.
 * @member {String} pair_by
 */
DeviceCode.prototype['pair_by'] = undefined;

/**
 * When this DeviceCode was paired. Timestamp in RFC 3339 format.
 * @member {String} paired_at
 */
DeviceCode.prototype['paired_at'] = undefined;

/**
 * The targeting product type of the device code.
 * @member {String} product_type
 */
DeviceCode.prototype['product_type'] = undefined;

/**
 * The pairing status of the device code.
 * @member {String} status
 */
DeviceCode.prototype['status'] = undefined;

/**
 * When this DeviceCode's status was last changed. Timestamp in RFC 3339 format.
 * @member {String} status_changed_at
 */
DeviceCode.prototype['status_changed_at'] = undefined;






export default DeviceCode;

