/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The CatalogQuickAmount model module.
 * @module model/CatalogQuickAmount
 * @version 2.0
 */
class CatalogQuickAmount {
    /**
     * Constructs a new <code>CatalogQuickAmount</code>.
     * Represents a Quick Amount in the Catalog.
     * @alias module:model/CatalogQuickAmount
     * @param amount {module:model/Money} 
     * @param type {String} Represents the type of the Quick Amount.
     */
    constructor(amount, type) { 
        
        CatalogQuickAmount.initialize(this, amount, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, type) { 
        obj['amount'] = amount;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CatalogQuickAmount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogQuickAmount} obj Optional instance to populate.
     * @return {module:model/CatalogQuickAmount} The populated <code>CatalogQuickAmount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogQuickAmount();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Money.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('ordinal')) {
                obj['ordinal'] = ApiClient.convertToType(data['ordinal'], 'Number');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogQuickAmount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogQuickAmount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogQuickAmount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Money.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

CatalogQuickAmount.RequiredProperties = ["amount", "type"];

/**
 * @member {module:model/Money} amount
 */
CatalogQuickAmount.prototype['amount'] = undefined;

/**
 * The order in which this Quick Amount should be displayed.
 * @member {Number} ordinal
 */
CatalogQuickAmount.prototype['ordinal'] = undefined;

/**
 * Describes the ranking of the Quick Amount provided by machine learning model, in the range [0, 100]. MANUAL type amount will always have score = 100.
 * @member {Number} score
 */
CatalogQuickAmount.prototype['score'] = undefined;

/**
 * Represents the type of the Quick Amount.
 * @member {String} type
 */
CatalogQuickAmount.prototype['type'] = undefined;






export default CatalogQuickAmount;

