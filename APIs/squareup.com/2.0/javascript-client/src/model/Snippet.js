/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Snippet model module.
 * @module model/Snippet
 * @version 2.0
 */
class Snippet {
    /**
     * Constructs a new <code>Snippet</code>.
     * Represents the snippet that is added to a Square Online site. The snippet code is injected into the &#x60;head&#x60; element of all pages on the site, except for checkout pages.
     * @alias module:model/Snippet
     * @param content {String} The snippet code, which can contain valid HTML, JavaScript, or both.
     */
    constructor(content) { 
        
        Snippet.initialize(this, content);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, content) { 
        obj['content'] = content;
    }

    /**
     * Constructs a <code>Snippet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Snippet} obj Optional instance to populate.
     * @return {module:model/Snippet} The populated <code>Snippet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Snippet();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('site_id')) {
                obj['site_id'] = ApiClient.convertToType(data['site_id'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Snippet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Snippet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Snippet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['site_id'] && !(typeof data['site_id'] === 'string' || data['site_id'] instanceof String)) {
            throw new Error("Expected the field `site_id` to be a primitive type in the JSON string but got " + data['site_id']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

Snippet.RequiredProperties = ["content"];

/**
 * The snippet code, which can contain valid HTML, JavaScript, or both.
 * @member {String} content
 */
Snippet.prototype['content'] = undefined;

/**
 * The timestamp of when the snippet was initially added to the site, in RFC 3339 format.
 * @member {String} created_at
 */
Snippet.prototype['created_at'] = undefined;

/**
 * The Square-assigned ID for the snippet.
 * @member {String} id
 */
Snippet.prototype['id'] = undefined;

/**
 * The ID of the site that contains the snippet.
 * @member {String} site_id
 */
Snippet.prototype['site_id'] = undefined;

/**
 * The timestamp of when the snippet was last updated on the site, in RFC 3339 format.
 * @member {String} updated_at
 */
Snippet.prototype['updated_at'] = undefined;






export default Snippet;

