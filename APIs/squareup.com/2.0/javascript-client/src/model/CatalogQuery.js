/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogQueryExact from './CatalogQueryExact';
import CatalogQueryItemVariationsForItemOptionValues from './CatalogQueryItemVariationsForItemOptionValues';
import CatalogQueryItemsForItemOptions from './CatalogQueryItemsForItemOptions';
import CatalogQueryItemsForModifierList from './CatalogQueryItemsForModifierList';
import CatalogQueryItemsForTax from './CatalogQueryItemsForTax';
import CatalogQueryPrefix from './CatalogQueryPrefix';
import CatalogQueryRange from './CatalogQueryRange';
import CatalogQuerySet from './CatalogQuerySet';
import CatalogQuerySortedAttribute from './CatalogQuerySortedAttribute';
import CatalogQueryText from './CatalogQueryText';

/**
 * The CatalogQuery model module.
 * @module model/CatalogQuery
 * @version 2.0
 */
class CatalogQuery {
    /**
     * Constructs a new <code>CatalogQuery</code>.
     * A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the &#x60;SearchCatalogObjects&#x60; endpoint.  Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects). Any combination of the following types may be used together: - [exact_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryExact) - [prefix_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryPrefix) - [range_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryRange) - [sorted_attribute_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQuerySortedAttribute) - [text_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryText) All other query types cannot be combined with any others.  When a query filter is based on an attribute, the attribute must be searchable. Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.  * Searchable attribute and objects queryable by searchable attributes ** - &#x60;name&#x60;:  &#x60;CatalogItem&#x60;, &#x60;CatalogItemVariation&#x60;, &#x60;CatalogCategory&#x60;, &#x60;CatalogTax&#x60;, &#x60;CatalogDiscount&#x60;, &#x60;CatalogModifier&#x60;, &#39;CatalogModifierList&#x60;, &#x60;CatalogItemOption&#x60;, &#x60;CatalogItemOptionValue&#x60; - &#x60;description&#x60;: &#x60;CatalogItem&#x60;, &#x60;CatalogItemOptionValue&#x60; - &#x60;abbreviation&#x60;: &#x60;CatalogItem&#x60; - &#x60;upc&#x60;: &#x60;CatalogItemVariation&#x60; - &#x60;sku&#x60;: &#x60;CatalogItemVariation&#x60; - &#x60;caption&#x60;: &#x60;CatalogImage&#x60; - &#x60;display_name&#x60;: &#x60;CatalogItemOption&#x60;  For example, to search for [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) objects by searchable attributes, you can use the &#x60;\&quot;name\&quot;&#x60;, &#x60;\&quot;description\&quot;&#x60;, or &#x60;\&quot;abbreviation\&quot;&#x60; attribute in an applicable query filter.
     * @alias module:model/CatalogQuery
     */
    constructor() { 
        
        CatalogQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogQuery} obj Optional instance to populate.
     * @return {module:model/CatalogQuery} The populated <code>CatalogQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogQuery();

            if (data.hasOwnProperty('exact_query')) {
                obj['exact_query'] = CatalogQueryExact.constructFromObject(data['exact_query']);
            }
            if (data.hasOwnProperty('item_variations_for_item_option_values_query')) {
                obj['item_variations_for_item_option_values_query'] = CatalogQueryItemVariationsForItemOptionValues.constructFromObject(data['item_variations_for_item_option_values_query']);
            }
            if (data.hasOwnProperty('items_for_item_options_query')) {
                obj['items_for_item_options_query'] = CatalogQueryItemsForItemOptions.constructFromObject(data['items_for_item_options_query']);
            }
            if (data.hasOwnProperty('items_for_modifier_list_query')) {
                obj['items_for_modifier_list_query'] = CatalogQueryItemsForModifierList.constructFromObject(data['items_for_modifier_list_query']);
            }
            if (data.hasOwnProperty('items_for_tax_query')) {
                obj['items_for_tax_query'] = CatalogQueryItemsForTax.constructFromObject(data['items_for_tax_query']);
            }
            if (data.hasOwnProperty('prefix_query')) {
                obj['prefix_query'] = CatalogQueryPrefix.constructFromObject(data['prefix_query']);
            }
            if (data.hasOwnProperty('range_query')) {
                obj['range_query'] = CatalogQueryRange.constructFromObject(data['range_query']);
            }
            if (data.hasOwnProperty('set_query')) {
                obj['set_query'] = CatalogQuerySet.constructFromObject(data['set_query']);
            }
            if (data.hasOwnProperty('sorted_attribute_query')) {
                obj['sorted_attribute_query'] = CatalogQuerySortedAttribute.constructFromObject(data['sorted_attribute_query']);
            }
            if (data.hasOwnProperty('text_query')) {
                obj['text_query'] = CatalogQueryText.constructFromObject(data['text_query']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogQuery</code>.
     */
    static validateJSON(data) {
        // validate the optional field `exact_query`
        if (data['exact_query']) { // data not null
          CatalogQueryExact.validateJSON(data['exact_query']);
        }
        // validate the optional field `item_variations_for_item_option_values_query`
        if (data['item_variations_for_item_option_values_query']) { // data not null
          CatalogQueryItemVariationsForItemOptionValues.validateJSON(data['item_variations_for_item_option_values_query']);
        }
        // validate the optional field `items_for_item_options_query`
        if (data['items_for_item_options_query']) { // data not null
          CatalogQueryItemsForItemOptions.validateJSON(data['items_for_item_options_query']);
        }
        // validate the optional field `items_for_modifier_list_query`
        if (data['items_for_modifier_list_query']) { // data not null
          CatalogQueryItemsForModifierList.validateJSON(data['items_for_modifier_list_query']);
        }
        // validate the optional field `items_for_tax_query`
        if (data['items_for_tax_query']) { // data not null
          CatalogQueryItemsForTax.validateJSON(data['items_for_tax_query']);
        }
        // validate the optional field `prefix_query`
        if (data['prefix_query']) { // data not null
          CatalogQueryPrefix.validateJSON(data['prefix_query']);
        }
        // validate the optional field `range_query`
        if (data['range_query']) { // data not null
          CatalogQueryRange.validateJSON(data['range_query']);
        }
        // validate the optional field `set_query`
        if (data['set_query']) { // data not null
          CatalogQuerySet.validateJSON(data['set_query']);
        }
        // validate the optional field `sorted_attribute_query`
        if (data['sorted_attribute_query']) { // data not null
          CatalogQuerySortedAttribute.validateJSON(data['sorted_attribute_query']);
        }
        // validate the optional field `text_query`
        if (data['text_query']) { // data not null
          CatalogQueryText.validateJSON(data['text_query']);
        }

        return true;
    }


}



/**
 * @member {module:model/CatalogQueryExact} exact_query
 */
CatalogQuery.prototype['exact_query'] = undefined;

/**
 * @member {module:model/CatalogQueryItemVariationsForItemOptionValues} item_variations_for_item_option_values_query
 */
CatalogQuery.prototype['item_variations_for_item_option_values_query'] = undefined;

/**
 * @member {module:model/CatalogQueryItemsForItemOptions} items_for_item_options_query
 */
CatalogQuery.prototype['items_for_item_options_query'] = undefined;

/**
 * @member {module:model/CatalogQueryItemsForModifierList} items_for_modifier_list_query
 */
CatalogQuery.prototype['items_for_modifier_list_query'] = undefined;

/**
 * @member {module:model/CatalogQueryItemsForTax} items_for_tax_query
 */
CatalogQuery.prototype['items_for_tax_query'] = undefined;

/**
 * @member {module:model/CatalogQueryPrefix} prefix_query
 */
CatalogQuery.prototype['prefix_query'] = undefined;

/**
 * @member {module:model/CatalogQueryRange} range_query
 */
CatalogQuery.prototype['range_query'] = undefined;

/**
 * @member {module:model/CatalogQuerySet} set_query
 */
CatalogQuery.prototype['set_query'] = undefined;

/**
 * @member {module:model/CatalogQuerySortedAttribute} sorted_attribute_query
 */
CatalogQuery.prototype['sorted_attribute_query'] = undefined;

/**
 * @member {module:model/CatalogQueryText} text_query
 */
CatalogQuery.prototype['text_query'] = undefined;






export default CatalogQuery;

