/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import V1Money from './V1Money';

/**
 * The V1SettlementEntry model module.
 * @module model/V1SettlementEntry
 * @version 2.0
 */
class V1SettlementEntry {
    /**
     * Constructs a new <code>V1SettlementEntry</code>.
     * V1SettlementEntry
     * @alias module:model/V1SettlementEntry
     */
    constructor() { 
        
        V1SettlementEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V1SettlementEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1SettlementEntry} obj Optional instance to populate.
     * @return {module:model/V1SettlementEntry} The populated <code>V1SettlementEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1SettlementEntry();

            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = V1Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('fee_money')) {
                obj['fee_money'] = V1Money.constructFromObject(data['fee_money']);
            }
            if (data.hasOwnProperty('payment_id')) {
                obj['payment_id'] = ApiClient.convertToType(data['payment_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1SettlementEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1SettlementEntry</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          V1Money.validateJSON(data['amount_money']);
        }
        // validate the optional field `fee_money`
        if (data['fee_money']) { // data not null
          V1Money.validateJSON(data['fee_money']);
        }
        // ensure the json data is a string
        if (data['payment_id'] && !(typeof data['payment_id'] === 'string' || data['payment_id'] instanceof String)) {
            throw new Error("Expected the field `payment_id` to be a primitive type in the JSON string but got " + data['payment_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/V1Money} amount_money
 */
V1SettlementEntry.prototype['amount_money'] = undefined;

/**
 * @member {module:model/V1Money} fee_money
 */
V1SettlementEntry.prototype['fee_money'] = undefined;

/**
 * The settlement's unique identifier.
 * @member {String} payment_id
 */
V1SettlementEntry.prototype['payment_id'] = undefined;

/**
 * The settlement's current status.
 * @member {String} type
 */
V1SettlementEntry.prototype['type'] = undefined;






export default V1SettlementEntry;

