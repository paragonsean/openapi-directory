/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogQueryExact model module.
 * @module model/CatalogQueryExact
 * @version 2.0
 */
class CatalogQueryExact {
    /**
     * Constructs a new <code>CatalogQueryExact</code>.
     * The query filter to return the search result by exact match of the specified attribute name and value.
     * @alias module:model/CatalogQueryExact
     * @param attributeName {String} The name of the attribute to be searched. Matching of the attribute name is exact.
     * @param attributeValue {String} The desired value of the search attribute. Matching of the attribute value is case insensitive and can be partial. For example, if a specified value of \"sma\", objects with the named attribute value of \"Small\", \"small\" are both matched.
     */
    constructor(attributeName, attributeValue) { 
        
        CatalogQueryExact.initialize(this, attributeName, attributeValue);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributeName, attributeValue) { 
        obj['attribute_name'] = attributeName;
        obj['attribute_value'] = attributeValue;
    }

    /**
     * Constructs a <code>CatalogQueryExact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogQueryExact} obj Optional instance to populate.
     * @return {module:model/CatalogQueryExact} The populated <code>CatalogQueryExact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogQueryExact();

            if (data.hasOwnProperty('attribute_name')) {
                obj['attribute_name'] = ApiClient.convertToType(data['attribute_name'], 'String');
            }
            if (data.hasOwnProperty('attribute_value')) {
                obj['attribute_value'] = ApiClient.convertToType(data['attribute_value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogQueryExact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogQueryExact</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogQueryExact.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['attribute_name'] && !(typeof data['attribute_name'] === 'string' || data['attribute_name'] instanceof String)) {
            throw new Error("Expected the field `attribute_name` to be a primitive type in the JSON string but got " + data['attribute_name']);
        }
        // ensure the json data is a string
        if (data['attribute_value'] && !(typeof data['attribute_value'] === 'string' || data['attribute_value'] instanceof String)) {
            throw new Error("Expected the field `attribute_value` to be a primitive type in the JSON string but got " + data['attribute_value']);
        }

        return true;
    }


}

CatalogQueryExact.RequiredProperties = ["attribute_name", "attribute_value"];

/**
 * The name of the attribute to be searched. Matching of the attribute name is exact.
 * @member {String} attribute_name
 */
CatalogQueryExact.prototype['attribute_name'] = undefined;

/**
 * The desired value of the search attribute. Matching of the attribute value is case insensitive and can be partial. For example, if a specified value of \"sma\", objects with the named attribute value of \"Small\", \"small\" are both matched.
 * @member {String} attribute_value
 */
CatalogQueryExact.prototype['attribute_value'] = undefined;






export default CatalogQueryExact;

