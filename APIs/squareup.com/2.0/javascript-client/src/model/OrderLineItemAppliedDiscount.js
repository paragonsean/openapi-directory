/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The OrderLineItemAppliedDiscount model module.
 * @module model/OrderLineItemAppliedDiscount
 * @version 2.0
 */
class OrderLineItemAppliedDiscount {
    /**
     * Constructs a new <code>OrderLineItemAppliedDiscount</code>.
     * Represents an applied portion of a discount to a line item in an order.  Order scoped discounts have automatically applied discounts present for each line item. Line-item scoped discounts must have applied discounts added manually for any applicable line items. The corresponding applied money is automatically computed based on participating line items.
     * @alias module:model/OrderLineItemAppliedDiscount
     * @param discountUid {String} The `uid` of the discount that the applied discount represents. It must reference a discount present in the `order.discounts` field.  This field is immutable. To change which discounts apply to a line item, you must delete the discount and re-add it as a new `OrderLineItemAppliedDiscount`.
     */
    constructor(discountUid) { 
        
        OrderLineItemAppliedDiscount.initialize(this, discountUid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, discountUid) { 
        obj['discount_uid'] = discountUid;
    }

    /**
     * Constructs a <code>OrderLineItemAppliedDiscount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderLineItemAppliedDiscount} obj Optional instance to populate.
     * @return {module:model/OrderLineItemAppliedDiscount} The populated <code>OrderLineItemAppliedDiscount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderLineItemAppliedDiscount();

            if (data.hasOwnProperty('applied_money')) {
                obj['applied_money'] = Money.constructFromObject(data['applied_money']);
            }
            if (data.hasOwnProperty('discount_uid')) {
                obj['discount_uid'] = ApiClient.convertToType(data['discount_uid'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderLineItemAppliedDiscount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderLineItemAppliedDiscount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderLineItemAppliedDiscount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `applied_money`
        if (data['applied_money']) { // data not null
          Money.validateJSON(data['applied_money']);
        }
        // ensure the json data is a string
        if (data['discount_uid'] && !(typeof data['discount_uid'] === 'string' || data['discount_uid'] instanceof String)) {
            throw new Error("Expected the field `discount_uid` to be a primitive type in the JSON string but got " + data['discount_uid']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}

OrderLineItemAppliedDiscount.RequiredProperties = ["discount_uid"];

/**
 * @member {module:model/Money} applied_money
 */
OrderLineItemAppliedDiscount.prototype['applied_money'] = undefined;

/**
 * The `uid` of the discount that the applied discount represents. It must reference a discount present in the `order.discounts` field.  This field is immutable. To change which discounts apply to a line item, you must delete the discount and re-add it as a new `OrderLineItemAppliedDiscount`.
 * @member {String} discount_uid
 */
OrderLineItemAppliedDiscount.prototype['discount_uid'] = undefined;

/**
 * A unique ID that identifies the applied discount only within this order.
 * @member {String} uid
 */
OrderLineItemAppliedDiscount.prototype['uid'] = undefined;






export default OrderLineItemAppliedDiscount;

