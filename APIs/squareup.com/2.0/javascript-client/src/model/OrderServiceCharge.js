/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';
import OrderLineItemAppliedTax from './OrderLineItemAppliedTax';

/**
 * The OrderServiceCharge model module.
 * @module model/OrderServiceCharge
 * @version 2.0
 */
class OrderServiceCharge {
    /**
     * Constructs a new <code>OrderServiceCharge</code>.
     * Represents a service charge applied to an order.
     * @alias module:model/OrderServiceCharge
     */
    constructor() { 
        
        OrderServiceCharge.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderServiceCharge</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderServiceCharge} obj Optional instance to populate.
     * @return {module:model/OrderServiceCharge} The populated <code>OrderServiceCharge</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderServiceCharge();

            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('applied_money')) {
                obj['applied_money'] = Money.constructFromObject(data['applied_money']);
            }
            if (data.hasOwnProperty('applied_taxes')) {
                obj['applied_taxes'] = ApiClient.convertToType(data['applied_taxes'], [OrderLineItemAppliedTax]);
            }
            if (data.hasOwnProperty('calculation_phase')) {
                obj['calculation_phase'] = ApiClient.convertToType(data['calculation_phase'], 'String');
            }
            if (data.hasOwnProperty('catalog_object_id')) {
                obj['catalog_object_id'] = ApiClient.convertToType(data['catalog_object_id'], 'String');
            }
            if (data.hasOwnProperty('catalog_version')) {
                obj['catalog_version'] = ApiClient.convertToType(data['catalog_version'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('percentage')) {
                obj['percentage'] = ApiClient.convertToType(data['percentage'], 'String');
            }
            if (data.hasOwnProperty('taxable')) {
                obj['taxable'] = ApiClient.convertToType(data['taxable'], 'Boolean');
            }
            if (data.hasOwnProperty('total_money')) {
                obj['total_money'] = Money.constructFromObject(data['total_money']);
            }
            if (data.hasOwnProperty('total_tax_money')) {
                obj['total_tax_money'] = Money.constructFromObject(data['total_tax_money']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderServiceCharge</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderServiceCharge</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          Money.validateJSON(data['amount_money']);
        }
        // validate the optional field `applied_money`
        if (data['applied_money']) { // data not null
          Money.validateJSON(data['applied_money']);
        }
        if (data['applied_taxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applied_taxes'])) {
                throw new Error("Expected the field `applied_taxes` to be an array in the JSON data but got " + data['applied_taxes']);
            }
            // validate the optional field `applied_taxes` (array)
            for (const item of data['applied_taxes']) {
                OrderLineItemAppliedTax.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['calculation_phase'] && !(typeof data['calculation_phase'] === 'string' || data['calculation_phase'] instanceof String)) {
            throw new Error("Expected the field `calculation_phase` to be a primitive type in the JSON string but got " + data['calculation_phase']);
        }
        // ensure the json data is a string
        if (data['catalog_object_id'] && !(typeof data['catalog_object_id'] === 'string' || data['catalog_object_id'] instanceof String)) {
            throw new Error("Expected the field `catalog_object_id` to be a primitive type in the JSON string but got " + data['catalog_object_id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['percentage'] && !(typeof data['percentage'] === 'string' || data['percentage'] instanceof String)) {
            throw new Error("Expected the field `percentage` to be a primitive type in the JSON string but got " + data['percentage']);
        }
        // validate the optional field `total_money`
        if (data['total_money']) { // data not null
          Money.validateJSON(data['total_money']);
        }
        // validate the optional field `total_tax_money`
        if (data['total_tax_money']) { // data not null
          Money.validateJSON(data['total_tax_money']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * @member {module:model/Money} amount_money
 */
OrderServiceCharge.prototype['amount_money'] = undefined;

/**
 * @member {module:model/Money} applied_money
 */
OrderServiceCharge.prototype['applied_money'] = undefined;

/**
 * The list of references to the taxes applied to this service charge. Each `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level `OrderLineItemTax` that is being applied to this service charge. On reads, the amount applied is populated.  An `OrderLineItemAppliedTax` is automatically created on every taxable service charge for all `ORDER` scoped taxes that are added to the order. `OrderLineItemAppliedTax` records for `LINE_ITEM` scoped taxes must be added in requests for the tax to apply to any taxable service charge. Taxable service charges have the `taxable` field set to `true` and calculated in the `SUBTOTAL_PHASE`.  To change the amount of a tax, modify the referenced top-level tax.
 * @member {Array.<module:model/OrderLineItemAppliedTax>} applied_taxes
 */
OrderServiceCharge.prototype['applied_taxes'] = undefined;

/**
 * The calculation phase at which to apply the service charge.
 * @member {String} calculation_phase
 */
OrderServiceCharge.prototype['calculation_phase'] = undefined;

/**
 * The catalog object ID referencing the service charge [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject).
 * @member {String} catalog_object_id
 */
OrderServiceCharge.prototype['catalog_object_id'] = undefined;

/**
 * The version of the catalog object that this service charge references.
 * @member {Number} catalog_version
 */
OrderServiceCharge.prototype['catalog_version'] = undefined;

/**
 * Application-defined data attached to this service charge. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).  Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.  Values have a maximum length of 255 characters.  An application can have up to 10 entries per metadata field.  Entries written by applications are private and can only be read or modified by the same application.  For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
 * @member {Object.<String, String>} metadata
 */
OrderServiceCharge.prototype['metadata'] = undefined;

/**
 * The name of the service charge.
 * @member {String} name
 */
OrderServiceCharge.prototype['name'] = undefined;

/**
 * The service charge percentage as a string representation of a decimal number. For example, `\"7.25\"` indicates a service charge of 7.25%.  Exactly 1 of `percentage` or `amount_money` should be set.
 * @member {String} percentage
 */
OrderServiceCharge.prototype['percentage'] = undefined;

/**
 * Indicates whether the service charge can be taxed. If set to `true`, order-level taxes automatically apply to the service charge. Note that service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.
 * @member {Boolean} taxable
 */
OrderServiceCharge.prototype['taxable'] = undefined;

/**
 * @member {module:model/Money} total_money
 */
OrderServiceCharge.prototype['total_money'] = undefined;

/**
 * @member {module:model/Money} total_tax_money
 */
OrderServiceCharge.prototype['total_tax_money'] = undefined;

/**
 * The type of the service charge.
 * @member {String} type
 */
OrderServiceCharge.prototype['type'] = undefined;

/**
 * A unique ID that identifies the service charge only within this order.
 * @member {String} uid
 */
OrderServiceCharge.prototype['uid'] = undefined;






export default OrderServiceCharge;

