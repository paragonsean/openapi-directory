/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListBreakTypesRequest model module.
 * @module model/ListBreakTypesRequest
 * @version 2.0
 */
class ListBreakTypesRequest {
    /**
     * Constructs a new <code>ListBreakTypesRequest</code>.
     * A request for a filtered set of &#x60;BreakType&#x60; objects.
     * @alias module:model/ListBreakTypesRequest
     */
    constructor() { 
        
        ListBreakTypesRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListBreakTypesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListBreakTypesRequest} obj Optional instance to populate.
     * @return {module:model/ListBreakTypesRequest} The populated <code>ListBreakTypesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListBreakTypesRequest();

            if (data.hasOwnProperty('cursor')) {
                obj['cursor'] = ApiClient.convertToType(data['cursor'], 'String');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListBreakTypesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListBreakTypesRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cursor'] && !(typeof data['cursor'] === 'string' || data['cursor'] instanceof String)) {
            throw new Error("Expected the field `cursor` to be a primitive type in the JSON string but got " + data['cursor']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }

        return true;
    }


}



/**
 * A pointer to the next page of `BreakType` results to fetch.
 * @member {String} cursor
 */
ListBreakTypesRequest.prototype['cursor'] = undefined;

/**
 * The maximum number of `BreakType` results to return per page. The number can range between 1 and 200. The default is 200.
 * @member {Number} limit
 */
ListBreakTypesRequest.prototype['limit'] = undefined;

/**
 * Filter the returned `BreakType` results to only those that are associated with the specified location.
 * @member {String} location_id
 */
ListBreakTypesRequest.prototype['location_id'] = undefined;






export default ListBreakTypesRequest;

