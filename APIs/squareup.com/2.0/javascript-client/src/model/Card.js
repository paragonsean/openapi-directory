/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';

/**
 * The Card model module.
 * @module model/Card
 * @version 2.0
 */
class Card {
    /**
     * Constructs a new <code>Card</code>.
     * Represents the payment details of a card to be used for payments. These details are determined by the payment token generated by Web Payments SDK.
     * @alias module:model/Card
     */
    constructor() { 
        
        Card.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Card</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Card} obj Optional instance to populate.
     * @return {module:model/Card} The populated <code>Card</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Card();

            if (data.hasOwnProperty('billing_address')) {
                obj['billing_address'] = Address.constructFromObject(data['billing_address']);
            }
            if (data.hasOwnProperty('bin')) {
                obj['bin'] = ApiClient.convertToType(data['bin'], 'String');
            }
            if (data.hasOwnProperty('card_brand')) {
                obj['card_brand'] = ApiClient.convertToType(data['card_brand'], 'String');
            }
            if (data.hasOwnProperty('card_type')) {
                obj['card_type'] = ApiClient.convertToType(data['card_type'], 'String');
            }
            if (data.hasOwnProperty('cardholder_name')) {
                obj['cardholder_name'] = ApiClient.convertToType(data['cardholder_name'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('exp_month')) {
                obj['exp_month'] = ApiClient.convertToType(data['exp_month'], 'Number');
            }
            if (data.hasOwnProperty('exp_year')) {
                obj['exp_year'] = ApiClient.convertToType(data['exp_year'], 'Number');
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('last_4')) {
                obj['last_4'] = ApiClient.convertToType(data['last_4'], 'String');
            }
            if (data.hasOwnProperty('prepaid_type')) {
                obj['prepaid_type'] = ApiClient.convertToType(data['prepaid_type'], 'String');
            }
            if (data.hasOwnProperty('reference_id')) {
                obj['reference_id'] = ApiClient.convertToType(data['reference_id'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Card</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Card</code>.
     */
    static validateJSON(data) {
        // validate the optional field `billing_address`
        if (data['billing_address']) { // data not null
          Address.validateJSON(data['billing_address']);
        }
        // ensure the json data is a string
        if (data['bin'] && !(typeof data['bin'] === 'string' || data['bin'] instanceof String)) {
            throw new Error("Expected the field `bin` to be a primitive type in the JSON string but got " + data['bin']);
        }
        // ensure the json data is a string
        if (data['card_brand'] && !(typeof data['card_brand'] === 'string' || data['card_brand'] instanceof String)) {
            throw new Error("Expected the field `card_brand` to be a primitive type in the JSON string but got " + data['card_brand']);
        }
        // ensure the json data is a string
        if (data['card_type'] && !(typeof data['card_type'] === 'string' || data['card_type'] instanceof String)) {
            throw new Error("Expected the field `card_type` to be a primitive type in the JSON string but got " + data['card_type']);
        }
        // ensure the json data is a string
        if (data['cardholder_name'] && !(typeof data['cardholder_name'] === 'string' || data['cardholder_name'] instanceof String)) {
            throw new Error("Expected the field `cardholder_name` to be a primitive type in the JSON string but got " + data['cardholder_name']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['last_4'] && !(typeof data['last_4'] === 'string' || data['last_4'] instanceof String)) {
            throw new Error("Expected the field `last_4` to be a primitive type in the JSON string but got " + data['last_4']);
        }
        // ensure the json data is a string
        if (data['prepaid_type'] && !(typeof data['prepaid_type'] === 'string' || data['prepaid_type'] instanceof String)) {
            throw new Error("Expected the field `prepaid_type` to be a primitive type in the JSON string but got " + data['prepaid_type']);
        }
        // ensure the json data is a string
        if (data['reference_id'] && !(typeof data['reference_id'] === 'string' || data['reference_id'] instanceof String)) {
            throw new Error("Expected the field `reference_id` to be a primitive type in the JSON string but got " + data['reference_id']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address} billing_address
 */
Card.prototype['billing_address'] = undefined;

/**
 * The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API returns this field.
 * @member {String} bin
 */
Card.prototype['bin'] = undefined;

/**
 * The card's brand.
 * @member {String} card_brand
 */
Card.prototype['card_brand'] = undefined;

/**
 * The type of the card. The Card object includes this field only in response to Payments API calls.
 * @member {String} card_type
 */
Card.prototype['card_type'] = undefined;

/**
 * The name of the cardholder.
 * @member {String} cardholder_name
 */
Card.prototype['cardholder_name'] = undefined;

/**
 * The ID of a customer created using the Customers API to be associated with the card.
 * @member {String} customer_id
 */
Card.prototype['customer_id'] = undefined;

/**
 * Indicates whether or not a card can be used for payments.
 * @member {Boolean} enabled
 */
Card.prototype['enabled'] = undefined;

/**
 * The expiration month of the associated card as an integer between 1 and 12.
 * @member {Number} exp_month
 */
Card.prototype['exp_month'] = undefined;

/**
 * The four-digit year of the card's expiration date.
 * @member {Number} exp_year
 */
Card.prototype['exp_year'] = undefined;

/**
 * __Not currently set.__ Intended as a Square-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.
 * @member {String} fingerprint
 */
Card.prototype['fingerprint'] = undefined;

/**
 * Unique ID for this card. Generated by Square.
 * @member {String} id
 */
Card.prototype['id'] = undefined;

/**
 * The last 4 digits of the card number.
 * @member {String} last_4
 */
Card.prototype['last_4'] = undefined;

/**
 * Indicates whether the Card is prepaid or not. The Card object includes this field only in response to Payments API calls.
 * @member {String} prepaid_type
 */
Card.prototype['prepaid_type'] = undefined;

/**
 * An optional user-defined reference ID that associates this card with another entity in an external system. For example, a customer ID from an external customer management system.
 * @member {String} reference_id
 */
Card.prototype['reference_id'] = undefined;

/**
 * Current version number of the card. Increments with each card update. Requests to update an existing Card object will be rejected unless the version in the request matches the current version for the Card.
 * @member {Number} version
 */
Card.prototype['version'] = undefined;






export default Card;

