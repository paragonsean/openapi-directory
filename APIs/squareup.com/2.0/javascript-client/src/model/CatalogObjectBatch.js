/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogObject from './CatalogObject';

/**
 * The CatalogObjectBatch model module.
 * @module model/CatalogObjectBatch
 * @version 2.0
 */
class CatalogObjectBatch {
    /**
     * Constructs a new <code>CatalogObjectBatch</code>.
     * A batch of catalog objects.
     * @alias module:model/CatalogObjectBatch
     * @param objects {Array.<module:model/CatalogObject>} A list of CatalogObjects belonging to this batch.
     */
    constructor(objects) { 
        
        CatalogObjectBatch.initialize(this, objects);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, objects) { 
        obj['objects'] = objects;
    }

    /**
     * Constructs a <code>CatalogObjectBatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogObjectBatch} obj Optional instance to populate.
     * @return {module:model/CatalogObjectBatch} The populated <code>CatalogObjectBatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogObjectBatch();

            if (data.hasOwnProperty('objects')) {
                obj['objects'] = ApiClient.convertToType(data['objects'], [CatalogObject]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogObjectBatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogObjectBatch</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogObjectBatch.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['objects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['objects'])) {
                throw new Error("Expected the field `objects` to be an array in the JSON data but got " + data['objects']);
            }
            // validate the optional field `objects` (array)
            for (const item of data['objects']) {
                CatalogObject.validateJSON(item);
            };
        }

        return true;
    }


}

CatalogObjectBatch.RequiredProperties = ["objects"];

/**
 * A list of CatalogObjects belonging to this batch.
 * @member {Array.<module:model/CatalogObject>} objects
 */
CatalogObjectBatch.prototype['objects'] = undefined;






export default CatalogObjectBatch;

