/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import ChargeRequestAdditionalRecipient from './ChargeRequestAdditionalRecipient';
import CreateOrderRequest from './CreateOrderRequest';

/**
 * The CreateCheckoutRequest model module.
 * @module model/CreateCheckoutRequest
 * @version 2.0
 */
class CreateCheckoutRequest {
    /**
     * Constructs a new <code>CreateCheckoutRequest</code>.
     * Defines the parameters that can be included in the body of a request to the &#x60;CreateCheckout&#x60; endpoint.
     * @alias module:model/CreateCheckoutRequest
     * @param idempotencyKey {String} A unique string that identifies this checkout among others you have created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you are  unsure whether a particular checkout was created successfully, you can attempt it again with the same idempotency key and all the same other parameters without worrying about creating duplicates.  You should use a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
     * @param order {module:model/CreateOrderRequest} 
     */
    constructor(idempotencyKey, order) { 
        
        CreateCheckoutRequest.initialize(this, idempotencyKey, order);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, idempotencyKey, order) { 
        obj['idempotency_key'] = idempotencyKey;
        obj['order'] = order;
    }

    /**
     * Constructs a <code>CreateCheckoutRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateCheckoutRequest} obj Optional instance to populate.
     * @return {module:model/CreateCheckoutRequest} The populated <code>CreateCheckoutRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateCheckoutRequest();

            if (data.hasOwnProperty('additional_recipients')) {
                obj['additional_recipients'] = ApiClient.convertToType(data['additional_recipients'], [ChargeRequestAdditionalRecipient]);
            }
            if (data.hasOwnProperty('ask_for_shipping_address')) {
                obj['ask_for_shipping_address'] = ApiClient.convertToType(data['ask_for_shipping_address'], 'Boolean');
            }
            if (data.hasOwnProperty('idempotency_key')) {
                obj['idempotency_key'] = ApiClient.convertToType(data['idempotency_key'], 'String');
            }
            if (data.hasOwnProperty('merchant_support_email')) {
                obj['merchant_support_email'] = ApiClient.convertToType(data['merchant_support_email'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = CreateOrderRequest.constructFromObject(data['order']);
            }
            if (data.hasOwnProperty('pre_populate_buyer_email')) {
                obj['pre_populate_buyer_email'] = ApiClient.convertToType(data['pre_populate_buyer_email'], 'String');
            }
            if (data.hasOwnProperty('pre_populate_shipping_address')) {
                obj['pre_populate_shipping_address'] = Address.constructFromObject(data['pre_populate_shipping_address']);
            }
            if (data.hasOwnProperty('redirect_url')) {
                obj['redirect_url'] = ApiClient.convertToType(data['redirect_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateCheckoutRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateCheckoutRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateCheckoutRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['additional_recipients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additional_recipients'])) {
                throw new Error("Expected the field `additional_recipients` to be an array in the JSON data but got " + data['additional_recipients']);
            }
            // validate the optional field `additional_recipients` (array)
            for (const item of data['additional_recipients']) {
                ChargeRequestAdditionalRecipient.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['idempotency_key'] && !(typeof data['idempotency_key'] === 'string' || data['idempotency_key'] instanceof String)) {
            throw new Error("Expected the field `idempotency_key` to be a primitive type in the JSON string but got " + data['idempotency_key']);
        }
        // ensure the json data is a string
        if (data['merchant_support_email'] && !(typeof data['merchant_support_email'] === 'string' || data['merchant_support_email'] instanceof String)) {
            throw new Error("Expected the field `merchant_support_email` to be a primitive type in the JSON string but got " + data['merchant_support_email']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // validate the optional field `order`
        if (data['order']) { // data not null
          CreateOrderRequest.validateJSON(data['order']);
        }
        // ensure the json data is a string
        if (data['pre_populate_buyer_email'] && !(typeof data['pre_populate_buyer_email'] === 'string' || data['pre_populate_buyer_email'] instanceof String)) {
            throw new Error("Expected the field `pre_populate_buyer_email` to be a primitive type in the JSON string but got " + data['pre_populate_buyer_email']);
        }
        // validate the optional field `pre_populate_shipping_address`
        if (data['pre_populate_shipping_address']) { // data not null
          Address.validateJSON(data['pre_populate_shipping_address']);
        }
        // ensure the json data is a string
        if (data['redirect_url'] && !(typeof data['redirect_url'] === 'string' || data['redirect_url'] instanceof String)) {
            throw new Error("Expected the field `redirect_url` to be a primitive type in the JSON string but got " + data['redirect_url']);
        }

        return true;
    }


}

CreateCheckoutRequest.RequiredProperties = ["idempotency_key", "order"];

/**
 * The basic primitive of a multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the `amount_money` value in your `additional_recipients` field cannot be more than 90% of the `total_money` calculated by Square for your order. The `location_id` must be a valid seller location where the checkout is occurring.  This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.  This field is currently not supported in the Square Sandbox.
 * @member {Array.<module:model/ChargeRequestAdditionalRecipient>} additional_recipients
 */
CreateCheckoutRequest.prototype['additional_recipients'] = undefined;

/**
 * If `true`, Square Checkout collects shipping information on your behalf and stores  that information with the transaction information in the Square Seller Dashboard.  Default: `false`.
 * @member {Boolean} ask_for_shipping_address
 */
CreateCheckoutRequest.prototype['ask_for_shipping_address'] = undefined;

/**
 * A unique string that identifies this checkout among others you have created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you are  unsure whether a particular checkout was created successfully, you can attempt it again with the same idempotency key and all the same other parameters without worrying about creating duplicates.  You should use a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
 * @member {String} idempotency_key
 */
CreateCheckoutRequest.prototype['idempotency_key'] = undefined;

/**
 * The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the seller.  If this value is not set, the confirmation page and email display the primary email address associated with the seller's Square account.  Default: none; only exists if explicitly set.
 * @member {String} merchant_support_email
 */
CreateCheckoutRequest.prototype['merchant_support_email'] = undefined;

/**
 * An optional note to associate with the `checkout` object.  This value cannot exceed 60 characters.
 * @member {String} note
 */
CreateCheckoutRequest.prototype['note'] = undefined;

/**
 * @member {module:model/CreateOrderRequest} order
 */
CreateCheckoutRequest.prototype['order'] = undefined;

/**
 * If provided, the buyer's email is prepopulated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.
 * @member {String} pre_populate_buyer_email
 */
CreateCheckoutRequest.prototype['pre_populate_buyer_email'] = undefined;

/**
 * @member {module:model/Address} pre_populate_shipping_address
 */
CreateCheckoutRequest.prototype['pre_populate_shipping_address'] = undefined;

/**
 * The URL to redirect to after the checkout is completed with `checkoutId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect URL is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  <pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>  If you do not provide a redirect URL, Square Checkout displays an order confirmation page on your behalf; however, it is strongly recommended that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.  Default: none; only exists if explicitly set.
 * @member {String} redirect_url
 */
CreateCheckoutRequest.prototype['redirect_url'] = undefined;






export default CreateCheckoutRequest;

