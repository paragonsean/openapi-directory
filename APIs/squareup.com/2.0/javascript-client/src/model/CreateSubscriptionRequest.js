/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The CreateSubscriptionRequest model module.
 * @module model/CreateSubscriptionRequest
 * @version 2.0
 */
class CreateSubscriptionRequest {
    /**
     * Constructs a new <code>CreateSubscriptionRequest</code>.
     * Defines parameters in a [CreateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/create-subscription) endpoint request.
     * @alias module:model/CreateSubscriptionRequest
     * @param customerId {String} The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.
     * @param locationId {String} The ID of the location the subscription is associated with.
     * @param planId {String} The ID of the subscription plan created using the Catalog API. For more information, see [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan) and  [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).
     */
    constructor(customerId, locationId, planId) { 
        
        CreateSubscriptionRequest.initialize(this, customerId, locationId, planId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, customerId, locationId, planId) { 
        obj['customer_id'] = customerId;
        obj['location_id'] = locationId;
        obj['plan_id'] = planId;
    }

    /**
     * Constructs a <code>CreateSubscriptionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateSubscriptionRequest} obj Optional instance to populate.
     * @return {module:model/CreateSubscriptionRequest} The populated <code>CreateSubscriptionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateSubscriptionRequest();

            if (data.hasOwnProperty('canceled_date')) {
                obj['canceled_date'] = ApiClient.convertToType(data['canceled_date'], 'String');
            }
            if (data.hasOwnProperty('card_id')) {
                obj['card_id'] = ApiClient.convertToType(data['card_id'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('idempotency_key')) {
                obj['idempotency_key'] = ApiClient.convertToType(data['idempotency_key'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('plan_id')) {
                obj['plan_id'] = ApiClient.convertToType(data['plan_id'], 'String');
            }
            if (data.hasOwnProperty('price_override_money')) {
                obj['price_override_money'] = Money.constructFromObject(data['price_override_money']);
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'String');
            }
            if (data.hasOwnProperty('tax_percentage')) {
                obj['tax_percentage'] = ApiClient.convertToType(data['tax_percentage'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateSubscriptionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateSubscriptionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateSubscriptionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['canceled_date'] && !(typeof data['canceled_date'] === 'string' || data['canceled_date'] instanceof String)) {
            throw new Error("Expected the field `canceled_date` to be a primitive type in the JSON string but got " + data['canceled_date']);
        }
        // ensure the json data is a string
        if (data['card_id'] && !(typeof data['card_id'] === 'string' || data['card_id'] instanceof String)) {
            throw new Error("Expected the field `card_id` to be a primitive type in the JSON string but got " + data['card_id']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['idempotency_key'] && !(typeof data['idempotency_key'] === 'string' || data['idempotency_key'] instanceof String)) {
            throw new Error("Expected the field `idempotency_key` to be a primitive type in the JSON string but got " + data['idempotency_key']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // ensure the json data is a string
        if (data['plan_id'] && !(typeof data['plan_id'] === 'string' || data['plan_id'] instanceof String)) {
            throw new Error("Expected the field `plan_id` to be a primitive type in the JSON string but got " + data['plan_id']);
        }
        // validate the optional field `price_override_money`
        if (data['price_override_money']) { // data not null
          Money.validateJSON(data['price_override_money']);
        }
        // ensure the json data is a string
        if (data['start_date'] && !(typeof data['start_date'] === 'string' || data['start_date'] instanceof String)) {
            throw new Error("Expected the field `start_date` to be a primitive type in the JSON string but got " + data['start_date']);
        }
        // ensure the json data is a string
        if (data['tax_percentage'] && !(typeof data['tax_percentage'] === 'string' || data['tax_percentage'] instanceof String)) {
            throw new Error("Expected the field `tax_percentage` to be a primitive type in the JSON string but got " + data['tax_percentage']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }

        return true;
    }


}

CreateSubscriptionRequest.RequiredProperties = ["customer_id", "location_id", "plan_id"];

/**
 * The date when the subscription should be canceled, in YYYY-MM-DD format (for example, 2025-02-29). This overrides the plan configuration if it comes before the date the subscription would otherwise end.
 * @member {String} canceled_date
 */
CreateSubscriptionRequest.prototype['canceled_date'] = undefined;

/**
 * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card) to charge. If not specified, Square sends an invoice via email. For an example to create a customer and add a card on file, see [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).
 * @member {String} card_id
 */
CreateSubscriptionRequest.prototype['card_id'] = undefined;

/**
 * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.
 * @member {String} customer_id
 */
CreateSubscriptionRequest.prototype['customer_id'] = undefined;

/**
 * A unique string that identifies this `CreateSubscription` request. If you do not provide a unique string (or provide an empty string as the value), the endpoint treats each request as independent.  For more information, see [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency).
 * @member {String} idempotency_key
 */
CreateSubscriptionRequest.prototype['idempotency_key'] = undefined;

/**
 * The ID of the location the subscription is associated with.
 * @member {String} location_id
 */
CreateSubscriptionRequest.prototype['location_id'] = undefined;

/**
 * The ID of the subscription plan created using the Catalog API. For more information, see [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan) and  [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).
 * @member {String} plan_id
 */
CreateSubscriptionRequest.prototype['plan_id'] = undefined;

/**
 * @member {module:model/Money} price_override_money
 */
CreateSubscriptionRequest.prototype['price_override_money'] = undefined;

/**
 * The start date of the subscription, in YYYY-MM-DD format. For example, 2013-01-15. If the start date is left empty, the subscription begins immediately.
 * @member {String} start_date
 */
CreateSubscriptionRequest.prototype['start_date'] = undefined;

/**
 * The tax to add when billing the subscription. The percentage is expressed in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign. For example, a value of 7.5 corresponds to 7.5%.
 * @member {String} tax_percentage
 */
CreateSubscriptionRequest.prototype['tax_percentage'] = undefined;

/**
 * The timezone that is used in date calculations for the subscription. If unset, defaults to the location timezone. If a timezone is not configured for the location, defaults to \"America/New_York\". Format: the IANA Timezone Database identifier for the location timezone. For a list of time zones, see [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
 * @member {String} timezone
 */
CreateSubscriptionRequest.prototype['timezone'] = undefined;






export default CreateSubscriptionRequest;

