/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogQueryItemsForTax model module.
 * @module model/CatalogQueryItemsForTax
 * @version 2.0
 */
class CatalogQueryItemsForTax {
    /**
     * Constructs a new <code>CatalogQueryItemsForTax</code>.
     * The query filter to return the items containing the specified tax IDs.
     * @alias module:model/CatalogQueryItemsForTax
     * @param taxIds {Array.<String>} A set of `CatalogTax` IDs to be used to find associated `CatalogItem`s.
     */
    constructor(taxIds) { 
        
        CatalogQueryItemsForTax.initialize(this, taxIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, taxIds) { 
        obj['tax_ids'] = taxIds;
    }

    /**
     * Constructs a <code>CatalogQueryItemsForTax</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogQueryItemsForTax} obj Optional instance to populate.
     * @return {module:model/CatalogQueryItemsForTax} The populated <code>CatalogQueryItemsForTax</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogQueryItemsForTax();

            if (data.hasOwnProperty('tax_ids')) {
                obj['tax_ids'] = ApiClient.convertToType(data['tax_ids'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogQueryItemsForTax</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogQueryItemsForTax</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogQueryItemsForTax.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tax_ids'])) {
            throw new Error("Expected the field `tax_ids` to be an array in the JSON data but got " + data['tax_ids']);
        }

        return true;
    }


}

CatalogQueryItemsForTax.RequiredProperties = ["tax_ids"];

/**
 * A set of `CatalogTax` IDs to be used to find associated `CatalogItem`s.
 * @member {Array.<String>} tax_ids
 */
CatalogQueryItemsForTax.prototype['tax_ids'] = undefined;






export default CatalogQueryItemsForTax;

