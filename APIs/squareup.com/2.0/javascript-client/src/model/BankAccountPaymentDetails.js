/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ACHDetails from './ACHDetails';
import Error from './Error';

/**
 * The BankAccountPaymentDetails model module.
 * @module model/BankAccountPaymentDetails
 * @version 2.0
 */
class BankAccountPaymentDetails {
    /**
     * Constructs a new <code>BankAccountPaymentDetails</code>.
     * Additional details about BANK_ACCOUNT type payments.
     * @alias module:model/BankAccountPaymentDetails
     */
    constructor() { 
        
        BankAccountPaymentDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BankAccountPaymentDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BankAccountPaymentDetails} obj Optional instance to populate.
     * @return {module:model/BankAccountPaymentDetails} The populated <code>BankAccountPaymentDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BankAccountPaymentDetails();

            if (data.hasOwnProperty('account_ownership_type')) {
                obj['account_ownership_type'] = ApiClient.convertToType(data['account_ownership_type'], 'String');
            }
            if (data.hasOwnProperty('ach_details')) {
                obj['ach_details'] = ACHDetails.constructFromObject(data['ach_details']);
            }
            if (data.hasOwnProperty('bank_name')) {
                obj['bank_name'] = ApiClient.convertToType(data['bank_name'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Error]);
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('statement_description')) {
                obj['statement_description'] = ApiClient.convertToType(data['statement_description'], 'String');
            }
            if (data.hasOwnProperty('transfer_type')) {
                obj['transfer_type'] = ApiClient.convertToType(data['transfer_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BankAccountPaymentDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BankAccountPaymentDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account_ownership_type'] && !(typeof data['account_ownership_type'] === 'string' || data['account_ownership_type'] instanceof String)) {
            throw new Error("Expected the field `account_ownership_type` to be a primitive type in the JSON string but got " + data['account_ownership_type']);
        }
        // validate the optional field `ach_details`
        if (data['ach_details']) { // data not null
          ACHDetails.validateJSON(data['ach_details']);
        }
        // ensure the json data is a string
        if (data['bank_name'] && !(typeof data['bank_name'] === 'string' || data['bank_name'] instanceof String)) {
            throw new Error("Expected the field `bank_name` to be a primitive type in the JSON string but got " + data['bank_name']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                Error.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // ensure the json data is a string
        if (data['statement_description'] && !(typeof data['statement_description'] === 'string' || data['statement_description'] instanceof String)) {
            throw new Error("Expected the field `statement_description` to be a primitive type in the JSON string but got " + data['statement_description']);
        }
        // ensure the json data is a string
        if (data['transfer_type'] && !(typeof data['transfer_type'] === 'string' || data['transfer_type'] instanceof String)) {
            throw new Error("Expected the field `transfer_type` to be a primitive type in the JSON string but got " + data['transfer_type']);
        }

        return true;
    }


}



/**
 * The ownership type of the bank account performing the transfer. The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.
 * @member {String} account_ownership_type
 */
BankAccountPaymentDetails.prototype['account_ownership_type'] = undefined;

/**
 * @member {module:model/ACHDetails} ach_details
 */
BankAccountPaymentDetails.prototype['ach_details'] = undefined;

/**
 * The name of the bank associated with the bank account.
 * @member {String} bank_name
 */
BankAccountPaymentDetails.prototype['bank_name'] = undefined;

/**
 * The two-letter ISO code representing the country the bank account is located in.
 * @member {String} country
 */
BankAccountPaymentDetails.prototype['country'] = undefined;

/**
 * Information about errors encountered during the request.
 * @member {Array.<module:model/Error>} errors
 */
BankAccountPaymentDetails.prototype['errors'] = undefined;

/**
 * Uniquely identifies the bank account for this seller and can be used to determine if payments are from the same bank account.
 * @member {String} fingerprint
 */
BankAccountPaymentDetails.prototype['fingerprint'] = undefined;

/**
 * The statement description as sent to the bank.
 * @member {String} statement_description
 */
BankAccountPaymentDetails.prototype['statement_description'] = undefined;

/**
 * The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.
 * @member {String} transfer_type
 */
BankAccountPaymentDetails.prototype['transfer_type'] = undefined;






export default BankAccountPaymentDetails;

