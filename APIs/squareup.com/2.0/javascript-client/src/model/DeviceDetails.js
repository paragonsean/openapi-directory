/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceDetails model module.
 * @module model/DeviceDetails
 * @version 2.0
 */
class DeviceDetails {
    /**
     * Constructs a new <code>DeviceDetails</code>.
     * Details about the device that took the payment.
     * @alias module:model/DeviceDetails
     */
    constructor() { 
        
        DeviceDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceDetails} obj Optional instance to populate.
     * @return {module:model/DeviceDetails} The populated <code>DeviceDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceDetails();

            if (data.hasOwnProperty('device_id')) {
                obj['device_id'] = ApiClient.convertToType(data['device_id'], 'String');
            }
            if (data.hasOwnProperty('device_installation_id')) {
                obj['device_installation_id'] = ApiClient.convertToType(data['device_installation_id'], 'String');
            }
            if (data.hasOwnProperty('device_name')) {
                obj['device_name'] = ApiClient.convertToType(data['device_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['device_id'] && !(typeof data['device_id'] === 'string' || data['device_id'] instanceof String)) {
            throw new Error("Expected the field `device_id` to be a primitive type in the JSON string but got " + data['device_id']);
        }
        // ensure the json data is a string
        if (data['device_installation_id'] && !(typeof data['device_installation_id'] === 'string' || data['device_installation_id'] instanceof String)) {
            throw new Error("Expected the field `device_installation_id` to be a primitive type in the JSON string but got " + data['device_installation_id']);
        }
        // ensure the json data is a string
        if (data['device_name'] && !(typeof data['device_name'] === 'string' || data['device_name'] instanceof String)) {
            throw new Error("Expected the field `device_name` to be a primitive type in the JSON string but got " + data['device_name']);
        }

        return true;
    }


}



/**
 * The Square-issued ID of the device.
 * @member {String} device_id
 */
DeviceDetails.prototype['device_id'] = undefined;

/**
 * The Square-issued installation ID for the device.
 * @member {String} device_installation_id
 */
DeviceDetails.prototype['device_installation_id'] = undefined;

/**
 * The name of the device set by the seller.
 * @member {String} device_name
 */
DeviceDetails.prototype['device_name'] = undefined;






export default DeviceDetails;

