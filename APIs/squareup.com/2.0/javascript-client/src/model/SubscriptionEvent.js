/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubscriptionEvent model module.
 * @module model/SubscriptionEvent
 * @version 2.0
 */
class SubscriptionEvent {
    /**
     * Constructs a new <code>SubscriptionEvent</code>.
     * Describes changes to subscription and billing states.
     * @alias module:model/SubscriptionEvent
     * @param effectiveDate {String} The date, in YYYY-MM-DD format (for example, 2013-01-15), when the subscription event went into effect.
     * @param id {String} The ID of the subscription event.
     * @param planId {String} The ID of the subscription plan associated with the subscription.
     * @param subscriptionEventType {String} Type of the subscription event.
     */
    constructor(effectiveDate, id, planId, subscriptionEventType) { 
        
        SubscriptionEvent.initialize(this, effectiveDate, id, planId, subscriptionEventType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, effectiveDate, id, planId, subscriptionEventType) { 
        obj['effective_date'] = effectiveDate;
        obj['id'] = id;
        obj['plan_id'] = planId;
        obj['subscription_event_type'] = subscriptionEventType;
    }

    /**
     * Constructs a <code>SubscriptionEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionEvent} obj Optional instance to populate.
     * @return {module:model/SubscriptionEvent} The populated <code>SubscriptionEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionEvent();

            if (data.hasOwnProperty('effective_date')) {
                obj['effective_date'] = ApiClient.convertToType(data['effective_date'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = ApiClient.convertToType(data['info'], Object);
            }
            if (data.hasOwnProperty('plan_id')) {
                obj['plan_id'] = ApiClient.convertToType(data['plan_id'], 'String');
            }
            if (data.hasOwnProperty('subscription_event_type')) {
                obj['subscription_event_type'] = ApiClient.convertToType(data['subscription_event_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubscriptionEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['effective_date'] && !(typeof data['effective_date'] === 'string' || data['effective_date'] instanceof String)) {
            throw new Error("Expected the field `effective_date` to be a primitive type in the JSON string but got " + data['effective_date']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['plan_id'] && !(typeof data['plan_id'] === 'string' || data['plan_id'] instanceof String)) {
            throw new Error("Expected the field `plan_id` to be a primitive type in the JSON string but got " + data['plan_id']);
        }
        // ensure the json data is a string
        if (data['subscription_event_type'] && !(typeof data['subscription_event_type'] === 'string' || data['subscription_event_type'] instanceof String)) {
            throw new Error("Expected the field `subscription_event_type` to be a primitive type in the JSON string but got " + data['subscription_event_type']);
        }

        return true;
    }


}

SubscriptionEvent.RequiredProperties = ["effective_date", "id", "plan_id", "subscription_event_type"];

/**
 * The date, in YYYY-MM-DD format (for example, 2013-01-15), when the subscription event went into effect.
 * @member {String} effective_date
 */
SubscriptionEvent.prototype['effective_date'] = undefined;

/**
 * The ID of the subscription event.
 * @member {String} id
 */
SubscriptionEvent.prototype['id'] = undefined;

/**
 * @member {Object} info
 */
SubscriptionEvent.prototype['info'] = undefined;

/**
 * The ID of the subscription plan associated with the subscription.
 * @member {String} plan_id
 */
SubscriptionEvent.prototype['plan_id'] = undefined;

/**
 * Type of the subscription event.
 * @member {String} subscription_event_type
 */
SubscriptionEvent.prototype['subscription_event_type'] = undefined;






export default SubscriptionEvent;

