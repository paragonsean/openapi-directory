/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomerTextFilter model module.
 * @module model/CustomerTextFilter
 * @version 2.0
 */
class CustomerTextFilter {
    /**
     * Constructs a new <code>CustomerTextFilter</code>.
     * A filter to select customers based on exact or fuzzy matching of customer attributes against a specified query. Depending on the customer attributes,  the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
     * @alias module:model/CustomerTextFilter
     */
    constructor() { 
        
        CustomerTextFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomerTextFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerTextFilter} obj Optional instance to populate.
     * @return {module:model/CustomerTextFilter} The populated <code>CustomerTextFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerTextFilter();

            if (data.hasOwnProperty('exact')) {
                obj['exact'] = ApiClient.convertToType(data['exact'], 'String');
            }
            if (data.hasOwnProperty('fuzzy')) {
                obj['fuzzy'] = ApiClient.convertToType(data['fuzzy'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerTextFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerTextFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['exact'] && !(typeof data['exact'] === 'string' || data['exact'] instanceof String)) {
            throw new Error("Expected the field `exact` to be a primitive type in the JSON string but got " + data['exact']);
        }
        // ensure the json data is a string
        if (data['fuzzy'] && !(typeof data['fuzzy'] === 'string' || data['fuzzy'] instanceof String)) {
            throw new Error("Expected the field `fuzzy` to be a primitive type in the JSON string but got " + data['fuzzy']);
        }

        return true;
    }


}



/**
 * Use the exact filter to select customers whose attributes match exactly the specified query.
 * @member {String} exact
 */
CustomerTextFilter.prototype['exact'] = undefined;

/**
 * Use the fuzzy filter to select customers whose attributes match the specified query  in a fuzzy manner. When the fuzzy option is used, search queries are tokenized, and then  each query token must be matched somewhere in the searched attribute. For single token queries,  this is effectively the same behavior as a partial match operation.
 * @member {String} fuzzy
 */
CustomerTextFilter.prototype['fuzzy'] = undefined;






export default CustomerTextFilter;

