/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The LoyaltyProgramRewardDefinition model module.
 * @module model/LoyaltyProgramRewardDefinition
 * @version 2.0
 */
class LoyaltyProgramRewardDefinition {
    /**
     * Constructs a new <code>LoyaltyProgramRewardDefinition</code>.
     * Provides details about the reward tier discount. DEPRECATED at version 2020-12-16. Discount details are now defined using a catalog pricing rule and other catalog objects. For more information, see [Get discount details for the reward](https://developer.squareup.com/docs/loyalty-api/overview#get-discount-details).
     * @alias module:model/LoyaltyProgramRewardDefinition
     * @param discountType {String} The type of discount the reward tier offers. DEPRECATED at version 2020-12-16. You can find this information in the `discount_data.discount_type` field of the `DISCOUNT` catalog object referenced by the pricing rule.
     * @param scope {String} Indicates the scope of the reward tier. DEPRECATED at version 2020-12-16. You can find this information in the `discount_target_scope` field of the `PRICING_RULE` catalog object and the `product_set_data` field of the `PRODUCT_SET` catalog object referenced by the pricing rule. For `ORDER` scopes, the target scope is `WHOLE_PURCHASE` and `all_products` is true. For `ITEM_VARIATION` and `CATEGORY` scopes, the target scope is `LINE_ITEM` and `product_ids_any` is a list of catalog object IDs of the given type.
     */
    constructor(discountType, scope) { 
        
        LoyaltyProgramRewardDefinition.initialize(this, discountType, scope);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, discountType, scope) { 
        obj['discount_type'] = discountType;
        obj['scope'] = scope;
    }

    /**
     * Constructs a <code>LoyaltyProgramRewardDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoyaltyProgramRewardDefinition} obj Optional instance to populate.
     * @return {module:model/LoyaltyProgramRewardDefinition} The populated <code>LoyaltyProgramRewardDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoyaltyProgramRewardDefinition();

            if (data.hasOwnProperty('catalog_object_ids')) {
                obj['catalog_object_ids'] = ApiClient.convertToType(data['catalog_object_ids'], ['String']);
            }
            if (data.hasOwnProperty('discount_type')) {
                obj['discount_type'] = ApiClient.convertToType(data['discount_type'], 'String');
            }
            if (data.hasOwnProperty('fixed_discount_money')) {
                obj['fixed_discount_money'] = Money.constructFromObject(data['fixed_discount_money']);
            }
            if (data.hasOwnProperty('max_discount_money')) {
                obj['max_discount_money'] = Money.constructFromObject(data['max_discount_money']);
            }
            if (data.hasOwnProperty('percentage_discount')) {
                obj['percentage_discount'] = ApiClient.convertToType(data['percentage_discount'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoyaltyProgramRewardDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoyaltyProgramRewardDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LoyaltyProgramRewardDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['catalog_object_ids'])) {
            throw new Error("Expected the field `catalog_object_ids` to be an array in the JSON data but got " + data['catalog_object_ids']);
        }
        // ensure the json data is a string
        if (data['discount_type'] && !(typeof data['discount_type'] === 'string' || data['discount_type'] instanceof String)) {
            throw new Error("Expected the field `discount_type` to be a primitive type in the JSON string but got " + data['discount_type']);
        }
        // validate the optional field `fixed_discount_money`
        if (data['fixed_discount_money']) { // data not null
          Money.validateJSON(data['fixed_discount_money']);
        }
        // validate the optional field `max_discount_money`
        if (data['max_discount_money']) { // data not null
          Money.validateJSON(data['max_discount_money']);
        }
        // ensure the json data is a string
        if (data['percentage_discount'] && !(typeof data['percentage_discount'] === 'string' || data['percentage_discount'] instanceof String)) {
            throw new Error("Expected the field `percentage_discount` to be a primitive type in the JSON string but got " + data['percentage_discount']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }

        return true;
    }


}

LoyaltyProgramRewardDefinition.RequiredProperties = ["discount_type", "scope"];

/**
 * The list of catalog objects to which this reward can be applied. They are either all item-variation ids or category ids, depending on the `type` field. DEPRECATED at version 2020-12-16. You can find this information in the `product_set_data.product_ids_any` field of the `PRODUCT_SET` catalog object referenced by the pricing rule.
 * @member {Array.<String>} catalog_object_ids
 */
LoyaltyProgramRewardDefinition.prototype['catalog_object_ids'] = undefined;

/**
 * The type of discount the reward tier offers. DEPRECATED at version 2020-12-16. You can find this information in the `discount_data.discount_type` field of the `DISCOUNT` catalog object referenced by the pricing rule.
 * @member {String} discount_type
 */
LoyaltyProgramRewardDefinition.prototype['discount_type'] = undefined;

/**
 * @member {module:model/Money} fixed_discount_money
 */
LoyaltyProgramRewardDefinition.prototype['fixed_discount_money'] = undefined;

/**
 * @member {module:model/Money} max_discount_money
 */
LoyaltyProgramRewardDefinition.prototype['max_discount_money'] = undefined;

/**
 * The fixed percentage of the discount. Present if `discount_type` is `FIXED_PERCENTAGE`. For example, a 7.25% off discount will be represented as \"7.25\". DEPRECATED at version 2020-12-16. You can find this information in the `discount_data.percentage` field of the `DISCOUNT` catalog object referenced by the pricing rule.
 * @member {String} percentage_discount
 */
LoyaltyProgramRewardDefinition.prototype['percentage_discount'] = undefined;

/**
 * Indicates the scope of the reward tier. DEPRECATED at version 2020-12-16. You can find this information in the `discount_target_scope` field of the `PRICING_RULE` catalog object and the `product_set_data` field of the `PRODUCT_SET` catalog object referenced by the pricing rule. For `ORDER` scopes, the target scope is `WHOLE_PURCHASE` and `all_products` is true. For `ITEM_VARIATION` and `CATEGORY` scopes, the target scope is `LINE_ITEM` and `product_ids_any` is a list of catalog object IDs of the given type.
 * @member {String} scope
 */
LoyaltyProgramRewardDefinition.prototype['scope'] = undefined;






export default LoyaltyProgramRewardDefinition;

