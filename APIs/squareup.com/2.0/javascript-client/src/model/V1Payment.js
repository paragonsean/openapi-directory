/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Device from './Device';
import V1Money from './V1Money';
import V1PaymentItemization from './V1PaymentItemization';
import V1PaymentSurcharge from './V1PaymentSurcharge';
import V1PaymentTax from './V1PaymentTax';
import V1Refund from './V1Refund';
import V1Tender from './V1Tender';

/**
 * The V1Payment model module.
 * @module model/V1Payment
 * @version 2.0
 */
class V1Payment {
    /**
     * Constructs a new <code>V1Payment</code>.
     * A payment represents a paid transaction between a Square merchant and a customer. Payment details are usually available from Connect API endpoints within a few minutes after the transaction completes.  Each Payment object includes several fields that end in &#x60;_money&#x60;. These fields describe the various amounts of money that contribute to the payment total:  &lt;ul&gt; &lt;li&gt; Monetary values are &lt;b&gt;positive&lt;/b&gt; if they represent an &lt;em&gt;increase&lt;/em&gt; in the amount of money the merchant receives (e.g., &lt;code&gt;tax_money&lt;/code&gt;, &lt;code&gt;tip_money&lt;/code&gt;). &lt;/li&gt; &lt;li&gt; Monetary values are &lt;b&gt;negative&lt;/b&gt; if they represent an &lt;em&gt;decrease&lt;/em&gt; in the amount of money the merchant receives (e.g., &lt;code&gt;discount_money&lt;/code&gt;, &lt;code&gt;refunded_money&lt;/code&gt;). &lt;/li&gt; &lt;/ul&gt;
     * @alias module:model/V1Payment
     */
    constructor() { 
        
        V1Payment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V1Payment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1Payment} obj Optional instance to populate.
     * @return {module:model/V1Payment} The populated <code>V1Payment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1Payment();

            if (data.hasOwnProperty('additive_tax')) {
                obj['additive_tax'] = ApiClient.convertToType(data['additive_tax'], [V1PaymentTax]);
            }
            if (data.hasOwnProperty('additive_tax_money')) {
                obj['additive_tax_money'] = V1Money.constructFromObject(data['additive_tax_money']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('creator_id')) {
                obj['creator_id'] = ApiClient.convertToType(data['creator_id'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = Device.constructFromObject(data['device']);
            }
            if (data.hasOwnProperty('discount_money')) {
                obj['discount_money'] = V1Money.constructFromObject(data['discount_money']);
            }
            if (data.hasOwnProperty('gross_sales_money')) {
                obj['gross_sales_money'] = V1Money.constructFromObject(data['gross_sales_money']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('inclusive_tax')) {
                obj['inclusive_tax'] = ApiClient.convertToType(data['inclusive_tax'], [V1PaymentTax]);
            }
            if (data.hasOwnProperty('inclusive_tax_money')) {
                obj['inclusive_tax_money'] = V1Money.constructFromObject(data['inclusive_tax_money']);
            }
            if (data.hasOwnProperty('is_partial')) {
                obj['is_partial'] = ApiClient.convertToType(data['is_partial'], 'Boolean');
            }
            if (data.hasOwnProperty('itemizations')) {
                obj['itemizations'] = ApiClient.convertToType(data['itemizations'], [V1PaymentItemization]);
            }
            if (data.hasOwnProperty('merchant_id')) {
                obj['merchant_id'] = ApiClient.convertToType(data['merchant_id'], 'String');
            }
            if (data.hasOwnProperty('net_sales_money')) {
                obj['net_sales_money'] = V1Money.constructFromObject(data['net_sales_money']);
            }
            if (data.hasOwnProperty('net_total_money')) {
                obj['net_total_money'] = V1Money.constructFromObject(data['net_total_money']);
            }
            if (data.hasOwnProperty('payment_url')) {
                obj['payment_url'] = ApiClient.convertToType(data['payment_url'], 'String');
            }
            if (data.hasOwnProperty('processing_fee_money')) {
                obj['processing_fee_money'] = V1Money.constructFromObject(data['processing_fee_money']);
            }
            if (data.hasOwnProperty('receipt_url')) {
                obj['receipt_url'] = ApiClient.convertToType(data['receipt_url'], 'String');
            }
            if (data.hasOwnProperty('refunded_money')) {
                obj['refunded_money'] = V1Money.constructFromObject(data['refunded_money']);
            }
            if (data.hasOwnProperty('refunds')) {
                obj['refunds'] = ApiClient.convertToType(data['refunds'], [V1Refund]);
            }
            if (data.hasOwnProperty('surcharge_money')) {
                obj['surcharge_money'] = V1Money.constructFromObject(data['surcharge_money']);
            }
            if (data.hasOwnProperty('surcharges')) {
                obj['surcharges'] = ApiClient.convertToType(data['surcharges'], [V1PaymentSurcharge]);
            }
            if (data.hasOwnProperty('swedish_rounding_money')) {
                obj['swedish_rounding_money'] = V1Money.constructFromObject(data['swedish_rounding_money']);
            }
            if (data.hasOwnProperty('tax_money')) {
                obj['tax_money'] = V1Money.constructFromObject(data['tax_money']);
            }
            if (data.hasOwnProperty('tender')) {
                obj['tender'] = ApiClient.convertToType(data['tender'], [V1Tender]);
            }
            if (data.hasOwnProperty('tip_money')) {
                obj['tip_money'] = V1Money.constructFromObject(data['tip_money']);
            }
            if (data.hasOwnProperty('total_collected_money')) {
                obj['total_collected_money'] = V1Money.constructFromObject(data['total_collected_money']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1Payment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1Payment</code>.
     */
    static validateJSON(data) {
        if (data['additive_tax']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additive_tax'])) {
                throw new Error("Expected the field `additive_tax` to be an array in the JSON data but got " + data['additive_tax']);
            }
            // validate the optional field `additive_tax` (array)
            for (const item of data['additive_tax']) {
                V1PaymentTax.validateJSON(item);
            };
        }
        // validate the optional field `additive_tax_money`
        if (data['additive_tax_money']) { // data not null
          V1Money.validateJSON(data['additive_tax_money']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['creator_id'] && !(typeof data['creator_id'] === 'string' || data['creator_id'] instanceof String)) {
            throw new Error("Expected the field `creator_id` to be a primitive type in the JSON string but got " + data['creator_id']);
        }
        // validate the optional field `device`
        if (data['device']) { // data not null
          Device.validateJSON(data['device']);
        }
        // validate the optional field `discount_money`
        if (data['discount_money']) { // data not null
          V1Money.validateJSON(data['discount_money']);
        }
        // validate the optional field `gross_sales_money`
        if (data['gross_sales_money']) { // data not null
          V1Money.validateJSON(data['gross_sales_money']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['inclusive_tax']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inclusive_tax'])) {
                throw new Error("Expected the field `inclusive_tax` to be an array in the JSON data but got " + data['inclusive_tax']);
            }
            // validate the optional field `inclusive_tax` (array)
            for (const item of data['inclusive_tax']) {
                V1PaymentTax.validateJSON(item);
            };
        }
        // validate the optional field `inclusive_tax_money`
        if (data['inclusive_tax_money']) { // data not null
          V1Money.validateJSON(data['inclusive_tax_money']);
        }
        if (data['itemizations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['itemizations'])) {
                throw new Error("Expected the field `itemizations` to be an array in the JSON data but got " + data['itemizations']);
            }
            // validate the optional field `itemizations` (array)
            for (const item of data['itemizations']) {
                V1PaymentItemization.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['merchant_id'] && !(typeof data['merchant_id'] === 'string' || data['merchant_id'] instanceof String)) {
            throw new Error("Expected the field `merchant_id` to be a primitive type in the JSON string but got " + data['merchant_id']);
        }
        // validate the optional field `net_sales_money`
        if (data['net_sales_money']) { // data not null
          V1Money.validateJSON(data['net_sales_money']);
        }
        // validate the optional field `net_total_money`
        if (data['net_total_money']) { // data not null
          V1Money.validateJSON(data['net_total_money']);
        }
        // ensure the json data is a string
        if (data['payment_url'] && !(typeof data['payment_url'] === 'string' || data['payment_url'] instanceof String)) {
            throw new Error("Expected the field `payment_url` to be a primitive type in the JSON string but got " + data['payment_url']);
        }
        // validate the optional field `processing_fee_money`
        if (data['processing_fee_money']) { // data not null
          V1Money.validateJSON(data['processing_fee_money']);
        }
        // ensure the json data is a string
        if (data['receipt_url'] && !(typeof data['receipt_url'] === 'string' || data['receipt_url'] instanceof String)) {
            throw new Error("Expected the field `receipt_url` to be a primitive type in the JSON string but got " + data['receipt_url']);
        }
        // validate the optional field `refunded_money`
        if (data['refunded_money']) { // data not null
          V1Money.validateJSON(data['refunded_money']);
        }
        if (data['refunds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['refunds'])) {
                throw new Error("Expected the field `refunds` to be an array in the JSON data but got " + data['refunds']);
            }
            // validate the optional field `refunds` (array)
            for (const item of data['refunds']) {
                V1Refund.validateJSON(item);
            };
        }
        // validate the optional field `surcharge_money`
        if (data['surcharge_money']) { // data not null
          V1Money.validateJSON(data['surcharge_money']);
        }
        if (data['surcharges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['surcharges'])) {
                throw new Error("Expected the field `surcharges` to be an array in the JSON data but got " + data['surcharges']);
            }
            // validate the optional field `surcharges` (array)
            for (const item of data['surcharges']) {
                V1PaymentSurcharge.validateJSON(item);
            };
        }
        // validate the optional field `swedish_rounding_money`
        if (data['swedish_rounding_money']) { // data not null
          V1Money.validateJSON(data['swedish_rounding_money']);
        }
        // validate the optional field `tax_money`
        if (data['tax_money']) { // data not null
          V1Money.validateJSON(data['tax_money']);
        }
        if (data['tender']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tender'])) {
                throw new Error("Expected the field `tender` to be an array in the JSON data but got " + data['tender']);
            }
            // validate the optional field `tender` (array)
            for (const item of data['tender']) {
                V1Tender.validateJSON(item);
            };
        }
        // validate the optional field `tip_money`
        if (data['tip_money']) { // data not null
          V1Money.validateJSON(data['tip_money']);
        }
        // validate the optional field `total_collected_money`
        if (data['total_collected_money']) { // data not null
          V1Money.validateJSON(data['total_collected_money']);
        }

        return true;
    }


}



/**
 * All of the additive taxes associated with the payment.
 * @member {Array.<module:model/V1PaymentTax>} additive_tax
 */
V1Payment.prototype['additive_tax'] = undefined;

/**
 * @member {module:model/V1Money} additive_tax_money
 */
V1Payment.prototype['additive_tax_money'] = undefined;

/**
 * The time when the payment was created, in ISO 8601 format. Reflects the time of the first payment if the object represents an incomplete partial payment, and the time of the last or complete payment otherwise.
 * @member {String} created_at
 */
V1Payment.prototype['created_at'] = undefined;

/**
 * The unique identifier of the Square account that took the payment.
 * @member {String} creator_id
 */
V1Payment.prototype['creator_id'] = undefined;

/**
 * @member {module:model/Device} device
 */
V1Payment.prototype['device'] = undefined;

/**
 * @member {module:model/V1Money} discount_money
 */
V1Payment.prototype['discount_money'] = undefined;

/**
 * @member {module:model/V1Money} gross_sales_money
 */
V1Payment.prototype['gross_sales_money'] = undefined;

/**
 * The payment's unique identifier.
 * @member {String} id
 */
V1Payment.prototype['id'] = undefined;

/**
 * All of the inclusive taxes associated with the payment.
 * @member {Array.<module:model/V1PaymentTax>} inclusive_tax
 */
V1Payment.prototype['inclusive_tax'] = undefined;

/**
 * @member {module:model/V1Money} inclusive_tax_money
 */
V1Payment.prototype['inclusive_tax_money'] = undefined;

/**
 * Indicates whether or not the payment is only partially paid for. If true, this payment will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
 * @member {Boolean} is_partial
 */
V1Payment.prototype['is_partial'] = undefined;

/**
 * The items purchased in the payment.
 * @member {Array.<module:model/V1PaymentItemization>} itemizations
 */
V1Payment.prototype['itemizations'] = undefined;

/**
 * The unique identifier of the merchant that took the payment.
 * @member {String} merchant_id
 */
V1Payment.prototype['merchant_id'] = undefined;

/**
 * @member {module:model/V1Money} net_sales_money
 */
V1Payment.prototype['net_sales_money'] = undefined;

/**
 * @member {module:model/V1Money} net_total_money
 */
V1Payment.prototype['net_total_money'] = undefined;

/**
 * The URL of the payment's detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page.
 * @member {String} payment_url
 */
V1Payment.prototype['payment_url'] = undefined;

/**
 * @member {module:model/V1Money} processing_fee_money
 */
V1Payment.prototype['processing_fee_money'] = undefined;

/**
 * The URL of the receipt for the payment. Note that for split tender payments, this URL corresponds to the receipt for the first tender listed in the payment's tender field. Each Tender object has its own receipt_url field you can use to get the other receipts associated with a split tender payment.
 * @member {String} receipt_url
 */
V1Payment.prototype['receipt_url'] = undefined;

/**
 * @member {module:model/V1Money} refunded_money
 */
V1Payment.prototype['refunded_money'] = undefined;

/**
 * All of the refunds applied to the payment. Note that the value of all refunds on a payment can exceed the value of all tenders if a merchant chooses to refund money to a tender after previously accepting returned goods as part of an exchange.
 * @member {Array.<module:model/V1Refund>} refunds
 */
V1Payment.prototype['refunds'] = undefined;

/**
 * @member {module:model/V1Money} surcharge_money
 */
V1Payment.prototype['surcharge_money'] = undefined;

/**
 * A list of all surcharges associated with the payment.
 * @member {Array.<module:model/V1PaymentSurcharge>} surcharges
 */
V1Payment.prototype['surcharges'] = undefined;

/**
 * @member {module:model/V1Money} swedish_rounding_money
 */
V1Payment.prototype['swedish_rounding_money'] = undefined;

/**
 * @member {module:model/V1Money} tax_money
 */
V1Payment.prototype['tax_money'] = undefined;

/**
 * All of the tenders associated with the payment.
 * @member {Array.<module:model/V1Tender>} tender
 */
V1Payment.prototype['tender'] = undefined;

/**
 * @member {module:model/V1Money} tip_money
 */
V1Payment.prototype['tip_money'] = undefined;

/**
 * @member {module:model/V1Money} total_collected_money
 */
V1Payment.prototype['total_collected_money'] = undefined;






export default V1Payment;

