/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TipSettings from './TipSettings';

/**
 * The DeviceCheckoutOptions model module.
 * @module model/DeviceCheckoutOptions
 * @version 2.0
 */
class DeviceCheckoutOptions {
    /**
     * Constructs a new <code>DeviceCheckoutOptions</code>.
     * 
     * @alias module:model/DeviceCheckoutOptions
     * @param deviceId {String} The unique ID of the device intended for this `TerminalCheckout`. A list of `DeviceCode` objects can be retrieved from the /v2/devices/codes endpoint. Match a `DeviceCode.device_id` value with `device_id` to get the associated device code.
     */
    constructor(deviceId) { 
        
        DeviceCheckoutOptions.initialize(this, deviceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceId) { 
        obj['device_id'] = deviceId;
    }

    /**
     * Constructs a <code>DeviceCheckoutOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceCheckoutOptions} obj Optional instance to populate.
     * @return {module:model/DeviceCheckoutOptions} The populated <code>DeviceCheckoutOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceCheckoutOptions();

            if (data.hasOwnProperty('device_id')) {
                obj['device_id'] = ApiClient.convertToType(data['device_id'], 'String');
            }
            if (data.hasOwnProperty('skip_receipt_screen')) {
                obj['skip_receipt_screen'] = ApiClient.convertToType(data['skip_receipt_screen'], 'Boolean');
            }
            if (data.hasOwnProperty('tip_settings')) {
                obj['tip_settings'] = TipSettings.constructFromObject(data['tip_settings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceCheckoutOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceCheckoutOptions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceCheckoutOptions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['device_id'] && !(typeof data['device_id'] === 'string' || data['device_id'] instanceof String)) {
            throw new Error("Expected the field `device_id` to be a primitive type in the JSON string but got " + data['device_id']);
        }
        // validate the optional field `tip_settings`
        if (data['tip_settings']) { // data not null
          TipSettings.validateJSON(data['tip_settings']);
        }

        return true;
    }


}

DeviceCheckoutOptions.RequiredProperties = ["device_id"];

/**
 * The unique ID of the device intended for this `TerminalCheckout`. A list of `DeviceCode` objects can be retrieved from the /v2/devices/codes endpoint. Match a `DeviceCode.device_id` value with `device_id` to get the associated device code.
 * @member {String} device_id
 */
DeviceCheckoutOptions.prototype['device_id'] = undefined;

/**
 * Instructs the device to skip the receipt screen. Defaults to false.
 * @member {Boolean} skip_receipt_screen
 */
DeviceCheckoutOptions.prototype['skip_receipt_screen'] = undefined;

/**
 * @member {module:model/TipSettings} tip_settings
 */
DeviceCheckoutOptions.prototype['tip_settings'] = undefined;






export default DeviceCheckoutOptions;

