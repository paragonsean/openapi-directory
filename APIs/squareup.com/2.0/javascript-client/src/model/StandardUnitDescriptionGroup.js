/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StandardUnitDescription from './StandardUnitDescription';

/**
 * The StandardUnitDescriptionGroup model module.
 * @module model/StandardUnitDescriptionGroup
 * @version 2.0
 */
class StandardUnitDescriptionGroup {
    /**
     * Constructs a new <code>StandardUnitDescriptionGroup</code>.
     * Group of standard measurement units.
     * @alias module:model/StandardUnitDescriptionGroup
     */
    constructor() { 
        
        StandardUnitDescriptionGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StandardUnitDescriptionGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StandardUnitDescriptionGroup} obj Optional instance to populate.
     * @return {module:model/StandardUnitDescriptionGroup} The populated <code>StandardUnitDescriptionGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StandardUnitDescriptionGroup();

            if (data.hasOwnProperty('language_code')) {
                obj['language_code'] = ApiClient.convertToType(data['language_code'], 'String');
            }
            if (data.hasOwnProperty('standard_unit_descriptions')) {
                obj['standard_unit_descriptions'] = ApiClient.convertToType(data['standard_unit_descriptions'], [StandardUnitDescription]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StandardUnitDescriptionGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StandardUnitDescriptionGroup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['language_code'] && !(typeof data['language_code'] === 'string' || data['language_code'] instanceof String)) {
            throw new Error("Expected the field `language_code` to be a primitive type in the JSON string but got " + data['language_code']);
        }
        if (data['standard_unit_descriptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['standard_unit_descriptions'])) {
                throw new Error("Expected the field `standard_unit_descriptions` to be an array in the JSON data but got " + data['standard_unit_descriptions']);
            }
            // validate the optional field `standard_unit_descriptions` (array)
            for (const item of data['standard_unit_descriptions']) {
                StandardUnitDescription.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * IETF language tag.
 * @member {String} language_code
 */
StandardUnitDescriptionGroup.prototype['language_code'] = undefined;

/**
 * List of standard (non-custom) measurement units in this description group.
 * @member {Array.<module:model/StandardUnitDescription>} standard_unit_descriptions
 */
StandardUnitDescriptionGroup.prototype['standard_unit_descriptions'] = undefined;






export default StandardUnitDescriptionGroup;

