/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BankAccount model module.
 * @module model/BankAccount
 * @version 2.0
 */
class BankAccount {
    /**
     * Constructs a new <code>BankAccount</code>.
     * Represents a bank account. For more information about  linking a bank account to a Square account, see  [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
     * @alias module:model/BankAccount
     * @param accountNumberSuffix {String} The last few digits of the account number.
     * @param accountType {String} The financial purpose of the associated bank account.
     * @param country {String} The ISO 3166 Alpha-2 country code where the bank account is based.
     * @param creditable {Boolean} Indicates whether it is possible for Square to send money to this bank account.
     * @param currency {String} The 3-character ISO 4217 currency code indicating the operating currency of the bank account. For example, the currency code for US dollars is `USD`.
     * @param debitable {Boolean} Indicates whether it is possible for Square to take money from this  bank account.
     * @param holderName {String} Name of the account holder. This name must match the name  on the targeted bank account record.
     * @param id {String} The unique, Square-issued identifier for the bank account.
     * @param primaryBankIdentificationNumber {String} Primary identifier for the bank. For more information, see  [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
     * @param status {String} Read-only. The current verification status of this BankAccount object.
     */
    constructor(accountNumberSuffix, accountType, country, creditable, currency, debitable, holderName, id, primaryBankIdentificationNumber, status) { 
        
        BankAccount.initialize(this, accountNumberSuffix, accountType, country, creditable, currency, debitable, holderName, id, primaryBankIdentificationNumber, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountNumberSuffix, accountType, country, creditable, currency, debitable, holderName, id, primaryBankIdentificationNumber, status) { 
        obj['account_number_suffix'] = accountNumberSuffix;
        obj['account_type'] = accountType;
        obj['country'] = country;
        obj['creditable'] = creditable;
        obj['currency'] = currency;
        obj['debitable'] = debitable;
        obj['holder_name'] = holderName;
        obj['id'] = id;
        obj['primary_bank_identification_number'] = primaryBankIdentificationNumber;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>BankAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BankAccount} obj Optional instance to populate.
     * @return {module:model/BankAccount} The populated <code>BankAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BankAccount();

            if (data.hasOwnProperty('account_number_suffix')) {
                obj['account_number_suffix'] = ApiClient.convertToType(data['account_number_suffix'], 'String');
            }
            if (data.hasOwnProperty('account_type')) {
                obj['account_type'] = ApiClient.convertToType(data['account_type'], 'String');
            }
            if (data.hasOwnProperty('bank_name')) {
                obj['bank_name'] = ApiClient.convertToType(data['bank_name'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('creditable')) {
                obj['creditable'] = ApiClient.convertToType(data['creditable'], 'Boolean');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('debit_mandate_reference_id')) {
                obj['debit_mandate_reference_id'] = ApiClient.convertToType(data['debit_mandate_reference_id'], 'String');
            }
            if (data.hasOwnProperty('debitable')) {
                obj['debitable'] = ApiClient.convertToType(data['debitable'], 'Boolean');
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('holder_name')) {
                obj['holder_name'] = ApiClient.convertToType(data['holder_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('primary_bank_identification_number')) {
                obj['primary_bank_identification_number'] = ApiClient.convertToType(data['primary_bank_identification_number'], 'String');
            }
            if (data.hasOwnProperty('reference_id')) {
                obj['reference_id'] = ApiClient.convertToType(data['reference_id'], 'String');
            }
            if (data.hasOwnProperty('secondary_bank_identification_number')) {
                obj['secondary_bank_identification_number'] = ApiClient.convertToType(data['secondary_bank_identification_number'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BankAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BankAccount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BankAccount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_number_suffix'] && !(typeof data['account_number_suffix'] === 'string' || data['account_number_suffix'] instanceof String)) {
            throw new Error("Expected the field `account_number_suffix` to be a primitive type in the JSON string but got " + data['account_number_suffix']);
        }
        // ensure the json data is a string
        if (data['account_type'] && !(typeof data['account_type'] === 'string' || data['account_type'] instanceof String)) {
            throw new Error("Expected the field `account_type` to be a primitive type in the JSON string but got " + data['account_type']);
        }
        // ensure the json data is a string
        if (data['bank_name'] && !(typeof data['bank_name'] === 'string' || data['bank_name'] instanceof String)) {
            throw new Error("Expected the field `bank_name` to be a primitive type in the JSON string but got " + data['bank_name']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['debit_mandate_reference_id'] && !(typeof data['debit_mandate_reference_id'] === 'string' || data['debit_mandate_reference_id'] instanceof String)) {
            throw new Error("Expected the field `debit_mandate_reference_id` to be a primitive type in the JSON string but got " + data['debit_mandate_reference_id']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // ensure the json data is a string
        if (data['holder_name'] && !(typeof data['holder_name'] === 'string' || data['holder_name'] instanceof String)) {
            throw new Error("Expected the field `holder_name` to be a primitive type in the JSON string but got " + data['holder_name']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // ensure the json data is a string
        if (data['primary_bank_identification_number'] && !(typeof data['primary_bank_identification_number'] === 'string' || data['primary_bank_identification_number'] instanceof String)) {
            throw new Error("Expected the field `primary_bank_identification_number` to be a primitive type in the JSON string but got " + data['primary_bank_identification_number']);
        }
        // ensure the json data is a string
        if (data['reference_id'] && !(typeof data['reference_id'] === 'string' || data['reference_id'] instanceof String)) {
            throw new Error("Expected the field `reference_id` to be a primitive type in the JSON string but got " + data['reference_id']);
        }
        // ensure the json data is a string
        if (data['secondary_bank_identification_number'] && !(typeof data['secondary_bank_identification_number'] === 'string' || data['secondary_bank_identification_number'] instanceof String)) {
            throw new Error("Expected the field `secondary_bank_identification_number` to be a primitive type in the JSON string but got " + data['secondary_bank_identification_number']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

BankAccount.RequiredProperties = ["account_number_suffix", "account_type", "country", "creditable", "currency", "debitable", "holder_name", "id", "primary_bank_identification_number", "status"];

/**
 * The last few digits of the account number.
 * @member {String} account_number_suffix
 */
BankAccount.prototype['account_number_suffix'] = undefined;

/**
 * The financial purpose of the associated bank account.
 * @member {String} account_type
 */
BankAccount.prototype['account_type'] = undefined;

/**
 * Read only. Name of actual financial institution.  For example \"Bank of America\".
 * @member {String} bank_name
 */
BankAccount.prototype['bank_name'] = undefined;

/**
 * The ISO 3166 Alpha-2 country code where the bank account is based.
 * @member {String} country
 */
BankAccount.prototype['country'] = undefined;

/**
 * Indicates whether it is possible for Square to send money to this bank account.
 * @member {Boolean} creditable
 */
BankAccount.prototype['creditable'] = undefined;

/**
 * The 3-character ISO 4217 currency code indicating the operating currency of the bank account. For example, the currency code for US dollars is `USD`.
 * @member {String} currency
 */
BankAccount.prototype['currency'] = undefined;

/**
 * Reference identifier that will be displayed to UK bank account owners when collecting direct debit authorization. Only required for UK bank accounts.
 * @member {String} debit_mandate_reference_id
 */
BankAccount.prototype['debit_mandate_reference_id'] = undefined;

/**
 * Indicates whether it is possible for Square to take money from this  bank account.
 * @member {Boolean} debitable
 */
BankAccount.prototype['debitable'] = undefined;

/**
 * A Square-assigned, unique identifier for the bank account based on the account information. The account fingerprint can be used to compare account entries and determine if the they represent the same real-world bank account.
 * @member {String} fingerprint
 */
BankAccount.prototype['fingerprint'] = undefined;

/**
 * Name of the account holder. This name must match the name  on the targeted bank account record.
 * @member {String} holder_name
 */
BankAccount.prototype['holder_name'] = undefined;

/**
 * The unique, Square-issued identifier for the bank account.
 * @member {String} id
 */
BankAccount.prototype['id'] = undefined;

/**
 * The location to which the bank account belongs.
 * @member {String} location_id
 */
BankAccount.prototype['location_id'] = undefined;

/**
 * Primary identifier for the bank. For more information, see  [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
 * @member {String} primary_bank_identification_number
 */
BankAccount.prototype['primary_bank_identification_number'] = undefined;

/**
 * Client-provided identifier for linking the banking account to an entity in a third-party system (for example, a bank account number or a user identifier).
 * @member {String} reference_id
 */
BankAccount.prototype['reference_id'] = undefined;

/**
 * Secondary identifier for the bank. For more information, see  [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
 * @member {String} secondary_bank_identification_number
 */
BankAccount.prototype['secondary_bank_identification_number'] = undefined;

/**
 * Read-only. The current verification status of this BankAccount object.
 * @member {String} status
 */
BankAccount.prototype['status'] = undefined;

/**
 * The current version of the `BankAccount`.
 * @member {Number} version
 */
BankAccount.prototype['version'] = undefined;






export default BankAccount;

