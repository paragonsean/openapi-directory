/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The CatalogModifier model module.
 * @module model/CatalogModifier
 * @version 2.0
 */
class CatalogModifier {
    /**
     * Constructs a new <code>CatalogModifier</code>.
     * A modifier applicable to items at the time of sale.
     * @alias module:model/CatalogModifier
     */
    constructor() { 
        
        CatalogModifier.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogModifier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogModifier} obj Optional instance to populate.
     * @return {module:model/CatalogModifier} The populated <code>CatalogModifier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogModifier();

            if (data.hasOwnProperty('modifier_list_id')) {
                obj['modifier_list_id'] = ApiClient.convertToType(data['modifier_list_id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ordinal')) {
                obj['ordinal'] = ApiClient.convertToType(data['ordinal'], 'Number');
            }
            if (data.hasOwnProperty('price_money')) {
                obj['price_money'] = Money.constructFromObject(data['price_money']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogModifier</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogModifier</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['modifier_list_id'] && !(typeof data['modifier_list_id'] === 'string' || data['modifier_list_id'] instanceof String)) {
            throw new Error("Expected the field `modifier_list_id` to be a primitive type in the JSON string but got " + data['modifier_list_id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `price_money`
        if (data['price_money']) { // data not null
          Money.validateJSON(data['price_money']);
        }

        return true;
    }


}



/**
 * The ID of the `CatalogModifierList` associated with this modifier.
 * @member {String} modifier_list_id
 */
CatalogModifier.prototype['modifier_list_id'] = undefined;

/**
 * The modifier name.  This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
 * @member {String} name
 */
CatalogModifier.prototype['name'] = undefined;

/**
 * Determines where this `CatalogModifier` appears in the `CatalogModifierList`.
 * @member {Number} ordinal
 */
CatalogModifier.prototype['ordinal'] = undefined;

/**
 * @member {module:model/Money} price_money
 */
CatalogModifier.prototype['price_money'] = undefined;






export default CatalogModifier;

