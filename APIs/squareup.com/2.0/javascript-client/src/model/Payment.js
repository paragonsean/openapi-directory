/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import BankAccountPaymentDetails from './BankAccountPaymentDetails';
import CardPaymentDetails from './CardPaymentDetails';
import CashPaymentDetails from './CashPaymentDetails';
import DigitalWalletDetails from './DigitalWalletDetails';
import ExternalPaymentDetails from './ExternalPaymentDetails';
import Money from './Money';
import ProcessingFee from './ProcessingFee';
import RiskEvaluation from './RiskEvaluation';

/**
 * The Payment model module.
 * @module model/Payment
 * @version 2.0
 */
class Payment {
    /**
     * Constructs a new <code>Payment</code>.
     * Represents a payment processed by the Square API.
     * @alias module:model/Payment
     */
    constructor() { 
        
        Payment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Payment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Payment} obj Optional instance to populate.
     * @return {module:model/Payment} The populated <code>Payment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Payment();

            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('app_fee_money')) {
                obj['app_fee_money'] = Money.constructFromObject(data['app_fee_money']);
            }
            if (data.hasOwnProperty('approved_money')) {
                obj['approved_money'] = Money.constructFromObject(data['approved_money']);
            }
            if (data.hasOwnProperty('bank_account_details')) {
                obj['bank_account_details'] = BankAccountPaymentDetails.constructFromObject(data['bank_account_details']);
            }
            if (data.hasOwnProperty('billing_address')) {
                obj['billing_address'] = Address.constructFromObject(data['billing_address']);
            }
            if (data.hasOwnProperty('buyer_email_address')) {
                obj['buyer_email_address'] = ApiClient.convertToType(data['buyer_email_address'], 'String');
            }
            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = ApiClient.convertToType(data['capabilities'], ['String']);
            }
            if (data.hasOwnProperty('card_details')) {
                obj['card_details'] = CardPaymentDetails.constructFromObject(data['card_details']);
            }
            if (data.hasOwnProperty('cash_details')) {
                obj['cash_details'] = CashPaymentDetails.constructFromObject(data['cash_details']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('delay_action')) {
                obj['delay_action'] = ApiClient.convertToType(data['delay_action'], 'String');
            }
            if (data.hasOwnProperty('delay_duration')) {
                obj['delay_duration'] = ApiClient.convertToType(data['delay_duration'], 'String');
            }
            if (data.hasOwnProperty('delayed_until')) {
                obj['delayed_until'] = ApiClient.convertToType(data['delayed_until'], 'String');
            }
            if (data.hasOwnProperty('employee_id')) {
                obj['employee_id'] = ApiClient.convertToType(data['employee_id'], 'String');
            }
            if (data.hasOwnProperty('external_details')) {
                obj['external_details'] = ExternalPaymentDetails.constructFromObject(data['external_details']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
            }
            if (data.hasOwnProperty('processing_fee')) {
                obj['processing_fee'] = ApiClient.convertToType(data['processing_fee'], [ProcessingFee]);
            }
            if (data.hasOwnProperty('receipt_number')) {
                obj['receipt_number'] = ApiClient.convertToType(data['receipt_number'], 'String');
            }
            if (data.hasOwnProperty('receipt_url')) {
                obj['receipt_url'] = ApiClient.convertToType(data['receipt_url'], 'String');
            }
            if (data.hasOwnProperty('reference_id')) {
                obj['reference_id'] = ApiClient.convertToType(data['reference_id'], 'String');
            }
            if (data.hasOwnProperty('refund_ids')) {
                obj['refund_ids'] = ApiClient.convertToType(data['refund_ids'], ['String']);
            }
            if (data.hasOwnProperty('refunded_money')) {
                obj['refunded_money'] = Money.constructFromObject(data['refunded_money']);
            }
            if (data.hasOwnProperty('risk_evaluation')) {
                obj['risk_evaluation'] = RiskEvaluation.constructFromObject(data['risk_evaluation']);
            }
            if (data.hasOwnProperty('shipping_address')) {
                obj['shipping_address'] = Address.constructFromObject(data['shipping_address']);
            }
            if (data.hasOwnProperty('source_type')) {
                obj['source_type'] = ApiClient.convertToType(data['source_type'], 'String');
            }
            if (data.hasOwnProperty('statement_description_identifier')) {
                obj['statement_description_identifier'] = ApiClient.convertToType(data['statement_description_identifier'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tip_money')) {
                obj['tip_money'] = Money.constructFromObject(data['tip_money']);
            }
            if (data.hasOwnProperty('total_money')) {
                obj['total_money'] = Money.constructFromObject(data['total_money']);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('version_token')) {
                obj['version_token'] = ApiClient.convertToType(data['version_token'], 'String');
            }
            if (data.hasOwnProperty('wallet_details')) {
                obj['wallet_details'] = DigitalWalletDetails.constructFromObject(data['wallet_details']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Payment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Payment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          Money.validateJSON(data['amount_money']);
        }
        // validate the optional field `app_fee_money`
        if (data['app_fee_money']) { // data not null
          Money.validateJSON(data['app_fee_money']);
        }
        // validate the optional field `approved_money`
        if (data['approved_money']) { // data not null
          Money.validateJSON(data['approved_money']);
        }
        // validate the optional field `bank_account_details`
        if (data['bank_account_details']) { // data not null
          BankAccountPaymentDetails.validateJSON(data['bank_account_details']);
        }
        // validate the optional field `billing_address`
        if (data['billing_address']) { // data not null
          Address.validateJSON(data['billing_address']);
        }
        // ensure the json data is a string
        if (data['buyer_email_address'] && !(typeof data['buyer_email_address'] === 'string' || data['buyer_email_address'] instanceof String)) {
            throw new Error("Expected the field `buyer_email_address` to be a primitive type in the JSON string but got " + data['buyer_email_address']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['capabilities'])) {
            throw new Error("Expected the field `capabilities` to be an array in the JSON data but got " + data['capabilities']);
        }
        // validate the optional field `card_details`
        if (data['card_details']) { // data not null
          CardPaymentDetails.validateJSON(data['card_details']);
        }
        // validate the optional field `cash_details`
        if (data['cash_details']) { // data not null
          CashPaymentDetails.validateJSON(data['cash_details']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['delay_action'] && !(typeof data['delay_action'] === 'string' || data['delay_action'] instanceof String)) {
            throw new Error("Expected the field `delay_action` to be a primitive type in the JSON string but got " + data['delay_action']);
        }
        // ensure the json data is a string
        if (data['delay_duration'] && !(typeof data['delay_duration'] === 'string' || data['delay_duration'] instanceof String)) {
            throw new Error("Expected the field `delay_duration` to be a primitive type in the JSON string but got " + data['delay_duration']);
        }
        // ensure the json data is a string
        if (data['delayed_until'] && !(typeof data['delayed_until'] === 'string' || data['delayed_until'] instanceof String)) {
            throw new Error("Expected the field `delayed_until` to be a primitive type in the JSON string but got " + data['delayed_until']);
        }
        // ensure the json data is a string
        if (data['employee_id'] && !(typeof data['employee_id'] === 'string' || data['employee_id'] instanceof String)) {
            throw new Error("Expected the field `employee_id` to be a primitive type in the JSON string but got " + data['employee_id']);
        }
        // validate the optional field `external_details`
        if (data['external_details']) { // data not null
          ExternalPaymentDetails.validateJSON(data['external_details']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
            throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
        }
        if (data['processing_fee']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['processing_fee'])) {
                throw new Error("Expected the field `processing_fee` to be an array in the JSON data but got " + data['processing_fee']);
            }
            // validate the optional field `processing_fee` (array)
            for (const item of data['processing_fee']) {
                ProcessingFee.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['receipt_number'] && !(typeof data['receipt_number'] === 'string' || data['receipt_number'] instanceof String)) {
            throw new Error("Expected the field `receipt_number` to be a primitive type in the JSON string but got " + data['receipt_number']);
        }
        // ensure the json data is a string
        if (data['receipt_url'] && !(typeof data['receipt_url'] === 'string' || data['receipt_url'] instanceof String)) {
            throw new Error("Expected the field `receipt_url` to be a primitive type in the JSON string but got " + data['receipt_url']);
        }
        // ensure the json data is a string
        if (data['reference_id'] && !(typeof data['reference_id'] === 'string' || data['reference_id'] instanceof String)) {
            throw new Error("Expected the field `reference_id` to be a primitive type in the JSON string but got " + data['reference_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['refund_ids'])) {
            throw new Error("Expected the field `refund_ids` to be an array in the JSON data but got " + data['refund_ids']);
        }
        // validate the optional field `refunded_money`
        if (data['refunded_money']) { // data not null
          Money.validateJSON(data['refunded_money']);
        }
        // validate the optional field `risk_evaluation`
        if (data['risk_evaluation']) { // data not null
          RiskEvaluation.validateJSON(data['risk_evaluation']);
        }
        // validate the optional field `shipping_address`
        if (data['shipping_address']) { // data not null
          Address.validateJSON(data['shipping_address']);
        }
        // ensure the json data is a string
        if (data['source_type'] && !(typeof data['source_type'] === 'string' || data['source_type'] instanceof String)) {
            throw new Error("Expected the field `source_type` to be a primitive type in the JSON string but got " + data['source_type']);
        }
        // ensure the json data is a string
        if (data['statement_description_identifier'] && !(typeof data['statement_description_identifier'] === 'string' || data['statement_description_identifier'] instanceof String)) {
            throw new Error("Expected the field `statement_description_identifier` to be a primitive type in the JSON string but got " + data['statement_description_identifier']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `tip_money`
        if (data['tip_money']) { // data not null
          Money.validateJSON(data['tip_money']);
        }
        // validate the optional field `total_money`
        if (data['total_money']) { // data not null
          Money.validateJSON(data['total_money']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // ensure the json data is a string
        if (data['version_token'] && !(typeof data['version_token'] === 'string' || data['version_token'] instanceof String)) {
            throw new Error("Expected the field `version_token` to be a primitive type in the JSON string but got " + data['version_token']);
        }
        // validate the optional field `wallet_details`
        if (data['wallet_details']) { // data not null
          DigitalWalletDetails.validateJSON(data['wallet_details']);
        }

        return true;
    }


}



/**
 * @member {module:model/Money} amount_money
 */
Payment.prototype['amount_money'] = undefined;

/**
 * @member {module:model/Money} app_fee_money
 */
Payment.prototype['app_fee_money'] = undefined;

/**
 * @member {module:model/Money} approved_money
 */
Payment.prototype['approved_money'] = undefined;

/**
 * @member {module:model/BankAccountPaymentDetails} bank_account_details
 */
Payment.prototype['bank_account_details'] = undefined;

/**
 * @member {module:model/Address} billing_address
 */
Payment.prototype['billing_address'] = undefined;

/**
 * The buyer's email address.
 * @member {String} buyer_email_address
 */
Payment.prototype['buyer_email_address'] = undefined;

/**
 * Actions that can be performed on this payment: - `EDIT_AMOUNT_UP` - The payment amount can be edited up. - `EDIT_AMOUNT_DOWN` - The payment amount can be edited down. - `EDIT_TIP_AMOUNT_UP` - The tip amount can be edited up. - `EDIT_TIP_AMOUNT_DOWN` - The tip amount can be edited down.
 * @member {Array.<String>} capabilities
 */
Payment.prototype['capabilities'] = undefined;

/**
 * @member {module:model/CardPaymentDetails} card_details
 */
Payment.prototype['card_details'] = undefined;

/**
 * @member {module:model/CashPaymentDetails} cash_details
 */
Payment.prototype['cash_details'] = undefined;

/**
 * The timestamp of when the payment was created, in RFC 3339 format.
 * @member {String} created_at
 */
Payment.prototype['created_at'] = undefined;

/**
 * The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.
 * @member {String} customer_id
 */
Payment.prototype['customer_id'] = undefined;

/**
 * The action to be applied to the payment when the `delay_duration` has elapsed. This field is read-only.  Current values include `CANCEL`.
 * @member {String} delay_action
 */
Payment.prototype['delay_action'] = undefined;

/**
 * The duration of time after the payment's creation when Square automatically applies the `delay_action` to the payment. This automatic `delay_action` applies only to payments that do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.  This field is specified as a time duration, in RFC 3339 format.  Notes: This feature is only supported for card payments.  Default:  - Card-present payments: \"PT36H\" (36 hours) from the creation time. - Card-not-present payments: \"P7D\" (7 days) from the creation time.
 * @member {String} delay_duration
 */
Payment.prototype['delay_duration'] = undefined;

/**
 * The read-only timestamp of when the `delay_action` is automatically applied, in RFC 3339 format.  Note that this field is calculated by summing the payment's `delay_duration` and `created_at` fields. The `created_at` field is generated by Square and might not exactly match the time on your local machine.
 * @member {String} delayed_until
 */
Payment.prototype['delayed_until'] = undefined;

/**
 * An optional ID of the employee associated with taking the payment.
 * @member {String} employee_id
 */
Payment.prototype['employee_id'] = undefined;

/**
 * @member {module:model/ExternalPaymentDetails} external_details
 */
Payment.prototype['external_details'] = undefined;

/**
 * A unique ID for the payment.
 * @member {String} id
 */
Payment.prototype['id'] = undefined;

/**
 * The ID of the location associated with the payment.
 * @member {String} location_id
 */
Payment.prototype['location_id'] = undefined;

/**
 * An optional note to include when creating a payment.
 * @member {String} note
 */
Payment.prototype['note'] = undefined;

/**
 * The ID of the order associated with the payment.
 * @member {String} order_id
 */
Payment.prototype['order_id'] = undefined;

/**
 * The processing fees and fee adjustments assessed by Square for this payment.
 * @member {Array.<module:model/ProcessingFee>} processing_fee
 */
Payment.prototype['processing_fee'] = undefined;

/**
 * The payment's receipt number. The field is missing if a payment is canceled.
 * @member {String} receipt_number
 */
Payment.prototype['receipt_number'] = undefined;

/**
 * The URL for the payment's receipt. The field is only populated for COMPLETED payments.
 * @member {String} receipt_url
 */
Payment.prototype['receipt_url'] = undefined;

/**
 * An optional ID that associates the payment with an entity in another system.
 * @member {String} reference_id
 */
Payment.prototype['reference_id'] = undefined;

/**
 * A list of `refund_id`s identifying refunds for the payment.
 * @member {Array.<String>} refund_ids
 */
Payment.prototype['refund_ids'] = undefined;

/**
 * @member {module:model/Money} refunded_money
 */
Payment.prototype['refunded_money'] = undefined;

/**
 * @member {module:model/RiskEvaluation} risk_evaluation
 */
Payment.prototype['risk_evaluation'] = undefined;

/**
 * @member {module:model/Address} shipping_address
 */
Payment.prototype['shipping_address'] = undefined;

/**
 * The source type for this payment.  Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `CASH`, or `EXTERNAL`.
 * @member {String} source_type
 */
Payment.prototype['source_type'] = undefined;

/**
 * Additional payment information that gets added to the customer's card statement as part of the statement description.  Note that the `statement_description_identifier` might get truncated on the statement description to fit the required information including the Square identifier (SQ *) and the name of the seller taking the payment.
 * @member {String} statement_description_identifier
 */
Payment.prototype['statement_description_identifier'] = undefined;

/**
 * Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or FAILED.
 * @member {String} status
 */
Payment.prototype['status'] = undefined;

/**
 * @member {module:model/Money} tip_money
 */
Payment.prototype['tip_money'] = undefined;

/**
 * @member {module:model/Money} total_money
 */
Payment.prototype['total_money'] = undefined;

/**
 * The timestamp of when the payment was last updated, in RFC 3339 format.
 * @member {String} updated_at
 */
Payment.prototype['updated_at'] = undefined;

/**
 * Used for optimistic concurrency. This opaque token identifies a specific version of the `Payment` object.
 * @member {String} version_token
 */
Payment.prototype['version_token'] = undefined;

/**
 * @member {module:model/DigitalWalletDetails} wallet_details
 */
Payment.prototype['wallet_details'] = undefined;






export default Payment;

