/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SearchOrdersSort model module.
 * @module model/SearchOrdersSort
 * @version 2.0
 */
class SearchOrdersSort {
    /**
     * Constructs a new <code>SearchOrdersSort</code>.
     * Sorting criteria for a &#x60;SearchOrders&#x60; request. Results can only be sorted by a timestamp field.
     * @alias module:model/SearchOrdersSort
     * @param sortField {String} The field to sort by.  __Important:__ When using a [DateTimeFilter](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersFilter), `sort_field` must match the timestamp field that the `DateTimeFilter` uses to filter. For example, if you set your `sort_field` to `CLOSED_AT` and you use a `DateTimeFilter`, your `DateTimeFilter` must filter for orders by their `CLOSED_AT` date. If this field does not match the timestamp field in `DateTimeFilter`, `SearchOrders` returns an error.  Default: `CREATED_AT`.
     */
    constructor(sortField) { 
        
        SearchOrdersSort.initialize(this, sortField);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sortField) { 
        obj['sort_field'] = sortField;
    }

    /**
     * Constructs a <code>SearchOrdersSort</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchOrdersSort} obj Optional instance to populate.
     * @return {module:model/SearchOrdersSort} The populated <code>SearchOrdersSort</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchOrdersSort();

            if (data.hasOwnProperty('sort_field')) {
                obj['sort_field'] = ApiClient.convertToType(data['sort_field'], 'String');
            }
            if (data.hasOwnProperty('sort_order')) {
                obj['sort_order'] = ApiClient.convertToType(data['sort_order'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchOrdersSort</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchOrdersSort</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchOrdersSort.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sort_field'] && !(typeof data['sort_field'] === 'string' || data['sort_field'] instanceof String)) {
            throw new Error("Expected the field `sort_field` to be a primitive type in the JSON string but got " + data['sort_field']);
        }
        // ensure the json data is a string
        if (data['sort_order'] && !(typeof data['sort_order'] === 'string' || data['sort_order'] instanceof String)) {
            throw new Error("Expected the field `sort_order` to be a primitive type in the JSON string but got " + data['sort_order']);
        }

        return true;
    }


}

SearchOrdersSort.RequiredProperties = ["sort_field"];

/**
 * The field to sort by.  __Important:__ When using a [DateTimeFilter](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersFilter), `sort_field` must match the timestamp field that the `DateTimeFilter` uses to filter. For example, if you set your `sort_field` to `CLOSED_AT` and you use a `DateTimeFilter`, your `DateTimeFilter` must filter for orders by their `CLOSED_AT` date. If this field does not match the timestamp field in `DateTimeFilter`, `SearchOrders` returns an error.  Default: `CREATED_AT`.
 * @member {String} sort_field
 */
SearchOrdersSort.prototype['sort_field'] = undefined;

/**
 * The chronological order in which results are returned. Defaults to `DESC`.
 * @member {String} sort_order
 */
SearchOrdersSort.prototype['sort_order'] = undefined;






export default SearchOrdersSort;

