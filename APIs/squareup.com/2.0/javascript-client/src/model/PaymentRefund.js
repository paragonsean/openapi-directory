/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';
import ProcessingFee from './ProcessingFee';

/**
 * The PaymentRefund model module.
 * @module model/PaymentRefund
 * @version 2.0
 */
class PaymentRefund {
    /**
     * Constructs a new <code>PaymentRefund</code>.
     * Represents a refund of a payment made using Square. Contains information about the original payment and the amount of money refunded.
     * @alias module:model/PaymentRefund
     * @param amountMoney {module:model/Money} 
     * @param id {String} The unique ID for this refund, generated by Square.
     */
    constructor(amountMoney, id) { 
        
        PaymentRefund.initialize(this, amountMoney, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amountMoney, id) { 
        obj['amount_money'] = amountMoney;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>PaymentRefund</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentRefund} obj Optional instance to populate.
     * @return {module:model/PaymentRefund} The populated <code>PaymentRefund</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentRefund();

            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('app_fee_money')) {
                obj['app_fee_money'] = Money.constructFromObject(data['app_fee_money']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
            }
            if (data.hasOwnProperty('payment_id')) {
                obj['payment_id'] = ApiClient.convertToType(data['payment_id'], 'String');
            }
            if (data.hasOwnProperty('processing_fee')) {
                obj['processing_fee'] = ApiClient.convertToType(data['processing_fee'], [ProcessingFee]);
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentRefund</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentRefund</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentRefund.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          Money.validateJSON(data['amount_money']);
        }
        // validate the optional field `app_fee_money`
        if (data['app_fee_money']) { // data not null
          Money.validateJSON(data['app_fee_money']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // ensure the json data is a string
        if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
            throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
        }
        // ensure the json data is a string
        if (data['payment_id'] && !(typeof data['payment_id'] === 'string' || data['payment_id'] instanceof String)) {
            throw new Error("Expected the field `payment_id` to be a primitive type in the JSON string but got " + data['payment_id']);
        }
        if (data['processing_fee']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['processing_fee'])) {
                throw new Error("Expected the field `processing_fee` to be an array in the JSON data but got " + data['processing_fee']);
            }
            // validate the optional field `processing_fee` (array)
            for (const item of data['processing_fee']) {
                ProcessingFee.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

PaymentRefund.RequiredProperties = ["amount_money", "id"];

/**
 * @member {module:model/Money} amount_money
 */
PaymentRefund.prototype['amount_money'] = undefined;

/**
 * @member {module:model/Money} app_fee_money
 */
PaymentRefund.prototype['app_fee_money'] = undefined;

/**
 * The timestamp of when the refund was created, in RFC 3339 format.
 * @member {String} created_at
 */
PaymentRefund.prototype['created_at'] = undefined;

/**
 * The unique ID for this refund, generated by Square.
 * @member {String} id
 */
PaymentRefund.prototype['id'] = undefined;

/**
 * The location ID associated with the payment this refund is attached to.
 * @member {String} location_id
 */
PaymentRefund.prototype['location_id'] = undefined;

/**
 * The ID of the order associated with the refund.
 * @member {String} order_id
 */
PaymentRefund.prototype['order_id'] = undefined;

/**
 * The ID of the payment associated with this refund.
 * @member {String} payment_id
 */
PaymentRefund.prototype['payment_id'] = undefined;

/**
 * Processing fees and fee adjustments assessed by Square for this refund.
 * @member {Array.<module:model/ProcessingFee>} processing_fee
 */
PaymentRefund.prototype['processing_fee'] = undefined;

/**
 * The reason for the refund.
 * @member {String} reason
 */
PaymentRefund.prototype['reason'] = undefined;

/**
 * The refund's status: - `PENDING` - Awaiting approval. - `COMPLETED` - Successfully completed. - `REJECTED` - The refund was rejected. - `FAILED` - An error occurred.
 * @member {String} status
 */
PaymentRefund.prototype['status'] = undefined;

/**
 * The timestamp of when the refund was last updated, in RFC 3339 format.
 * @member {String} updated_at
 */
PaymentRefund.prototype['updated_at'] = undefined;






export default PaymentRefund;

