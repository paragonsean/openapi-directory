/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Card from './Card';
import CardPaymentTimeline from './CardPaymentTimeline';
import DeviceDetails from './DeviceDetails';
import Error from './Error';

/**
 * The CardPaymentDetails model module.
 * @module model/CardPaymentDetails
 * @version 2.0
 */
class CardPaymentDetails {
    /**
     * Constructs a new <code>CardPaymentDetails</code>.
     * Reflects the current status of a card payment. Contains only non-confidential information.
     * @alias module:model/CardPaymentDetails
     */
    constructor() { 
        
        CardPaymentDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CardPaymentDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardPaymentDetails} obj Optional instance to populate.
     * @return {module:model/CardPaymentDetails} The populated <code>CardPaymentDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardPaymentDetails();

            if (data.hasOwnProperty('application_cryptogram')) {
                obj['application_cryptogram'] = ApiClient.convertToType(data['application_cryptogram'], 'String');
            }
            if (data.hasOwnProperty('application_identifier')) {
                obj['application_identifier'] = ApiClient.convertToType(data['application_identifier'], 'String');
            }
            if (data.hasOwnProperty('application_name')) {
                obj['application_name'] = ApiClient.convertToType(data['application_name'], 'String');
            }
            if (data.hasOwnProperty('auth_result_code')) {
                obj['auth_result_code'] = ApiClient.convertToType(data['auth_result_code'], 'String');
            }
            if (data.hasOwnProperty('avs_status')) {
                obj['avs_status'] = ApiClient.convertToType(data['avs_status'], 'String');
            }
            if (data.hasOwnProperty('card')) {
                obj['card'] = Card.constructFromObject(data['card']);
            }
            if (data.hasOwnProperty('card_payment_timeline')) {
                obj['card_payment_timeline'] = CardPaymentTimeline.constructFromObject(data['card_payment_timeline']);
            }
            if (data.hasOwnProperty('cvv_status')) {
                obj['cvv_status'] = ApiClient.convertToType(data['cvv_status'], 'String');
            }
            if (data.hasOwnProperty('device_details')) {
                obj['device_details'] = DeviceDetails.constructFromObject(data['device_details']);
            }
            if (data.hasOwnProperty('entry_method')) {
                obj['entry_method'] = ApiClient.convertToType(data['entry_method'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Error]);
            }
            if (data.hasOwnProperty('refund_requires_card_presence')) {
                obj['refund_requires_card_presence'] = ApiClient.convertToType(data['refund_requires_card_presence'], 'Boolean');
            }
            if (data.hasOwnProperty('statement_description')) {
                obj['statement_description'] = ApiClient.convertToType(data['statement_description'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('verification_method')) {
                obj['verification_method'] = ApiClient.convertToType(data['verification_method'], 'String');
            }
            if (data.hasOwnProperty('verification_results')) {
                obj['verification_results'] = ApiClient.convertToType(data['verification_results'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardPaymentDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardPaymentDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['application_cryptogram'] && !(typeof data['application_cryptogram'] === 'string' || data['application_cryptogram'] instanceof String)) {
            throw new Error("Expected the field `application_cryptogram` to be a primitive type in the JSON string but got " + data['application_cryptogram']);
        }
        // ensure the json data is a string
        if (data['application_identifier'] && !(typeof data['application_identifier'] === 'string' || data['application_identifier'] instanceof String)) {
            throw new Error("Expected the field `application_identifier` to be a primitive type in the JSON string but got " + data['application_identifier']);
        }
        // ensure the json data is a string
        if (data['application_name'] && !(typeof data['application_name'] === 'string' || data['application_name'] instanceof String)) {
            throw new Error("Expected the field `application_name` to be a primitive type in the JSON string but got " + data['application_name']);
        }
        // ensure the json data is a string
        if (data['auth_result_code'] && !(typeof data['auth_result_code'] === 'string' || data['auth_result_code'] instanceof String)) {
            throw new Error("Expected the field `auth_result_code` to be a primitive type in the JSON string but got " + data['auth_result_code']);
        }
        // ensure the json data is a string
        if (data['avs_status'] && !(typeof data['avs_status'] === 'string' || data['avs_status'] instanceof String)) {
            throw new Error("Expected the field `avs_status` to be a primitive type in the JSON string but got " + data['avs_status']);
        }
        // validate the optional field `card`
        if (data['card']) { // data not null
          Card.validateJSON(data['card']);
        }
        // validate the optional field `card_payment_timeline`
        if (data['card_payment_timeline']) { // data not null
          CardPaymentTimeline.validateJSON(data['card_payment_timeline']);
        }
        // ensure the json data is a string
        if (data['cvv_status'] && !(typeof data['cvv_status'] === 'string' || data['cvv_status'] instanceof String)) {
            throw new Error("Expected the field `cvv_status` to be a primitive type in the JSON string but got " + data['cvv_status']);
        }
        // validate the optional field `device_details`
        if (data['device_details']) { // data not null
          DeviceDetails.validateJSON(data['device_details']);
        }
        // ensure the json data is a string
        if (data['entry_method'] && !(typeof data['entry_method'] === 'string' || data['entry_method'] instanceof String)) {
            throw new Error("Expected the field `entry_method` to be a primitive type in the JSON string but got " + data['entry_method']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                Error.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['statement_description'] && !(typeof data['statement_description'] === 'string' || data['statement_description'] instanceof String)) {
            throw new Error("Expected the field `statement_description` to be a primitive type in the JSON string but got " + data['statement_description']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['verification_method'] && !(typeof data['verification_method'] === 'string' || data['verification_method'] instanceof String)) {
            throw new Error("Expected the field `verification_method` to be a primitive type in the JSON string but got " + data['verification_method']);
        }
        // ensure the json data is a string
        if (data['verification_results'] && !(typeof data['verification_results'] === 'string' || data['verification_results'] instanceof String)) {
            throw new Error("Expected the field `verification_results` to be a primitive type in the JSON string but got " + data['verification_results']);
        }

        return true;
    }


}



/**
 * For EMV payments, the cryptogram generated for the payment.
 * @member {String} application_cryptogram
 */
CardPaymentDetails.prototype['application_cryptogram'] = undefined;

/**
 * For EMV payments, the application ID identifies the EMV application used for the payment.
 * @member {String} application_identifier
 */
CardPaymentDetails.prototype['application_identifier'] = undefined;

/**
 * For EMV payments, the human-readable name of the EMV application used for the payment.
 * @member {String} application_name
 */
CardPaymentDetails.prototype['application_name'] = undefined;

/**
 * The status code returned by the card issuer that describes the payment's authorization status.
 * @member {String} auth_result_code
 */
CardPaymentDetails.prototype['auth_result_code'] = undefined;

/**
 * The status code returned from the Address Verification System (AVS) check. The code can be `AVS_ACCEPTED`, `AVS_REJECTED`, or `AVS_NOT_CHECKED`.
 * @member {String} avs_status
 */
CardPaymentDetails.prototype['avs_status'] = undefined;

/**
 * @member {module:model/Card} card
 */
CardPaymentDetails.prototype['card'] = undefined;

/**
 * @member {module:model/CardPaymentTimeline} card_payment_timeline
 */
CardPaymentDetails.prototype['card_payment_timeline'] = undefined;

/**
 * The status code returned from the Card Verification Value (CVV) check. The code can be `CVV_ACCEPTED`, `CVV_REJECTED`, or `CVV_NOT_CHECKED`.
 * @member {String} cvv_status
 */
CardPaymentDetails.prototype['cvv_status'] = undefined;

/**
 * @member {module:model/DeviceDetails} device_details
 */
CardPaymentDetails.prototype['device_details'] = undefined;

/**
 * The method used to enter the card's details for the payment. The method can be `KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`.
 * @member {String} entry_method
 */
CardPaymentDetails.prototype['entry_method'] = undefined;

/**
 * Information about errors encountered during the request.
 * @member {Array.<module:model/Error>} errors
 */
CardPaymentDetails.prototype['errors'] = undefined;

/**
 * Whether the card must be physically present for the payment to be refunded.  If set to `true`, the card must be present.
 * @member {Boolean} refund_requires_card_presence
 */
CardPaymentDetails.prototype['refund_requires_card_presence'] = undefined;

/**
 * The statement description sent to the card networks.  Note: The actual statement description varies and is likely to be truncated and appended with additional information on a per issuer basis.
 * @member {String} statement_description
 */
CardPaymentDetails.prototype['statement_description'] = undefined;

/**
 * The card payment's current state. The state can be AUTHORIZED, CAPTURED, VOIDED, or FAILED.
 * @member {String} status
 */
CardPaymentDetails.prototype['status'] = undefined;

/**
 * For EMV payments, the method used to verify the cardholder's identity. The method can be `PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`.
 * @member {String} verification_method
 */
CardPaymentDetails.prototype['verification_method'] = undefined;

/**
 * For EMV payments, the results of the cardholder verification. The result can be `SUCCESS`, `FAILURE`, or `UNKNOWN`.
 * @member {String} verification_results
 */
CardPaymentDetails.prototype['verification_results'] = undefined;






export default CardPaymentDetails;

