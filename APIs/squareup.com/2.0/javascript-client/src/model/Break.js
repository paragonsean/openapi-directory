/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Break model module.
 * @module model/Break
 * @version 2.0
 */
class Break {
    /**
     * Constructs a new <code>Break</code>.
     * A record of an employee&#39;s break during a shift.
     * @alias module:model/Break
     * @param breakTypeId {String} The `BreakType` that this `Break` was templated on.
     * @param expectedDuration {String} Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of the break.
     * @param isPaid {Boolean} Whether this break counts towards time worked for compensation purposes.
     * @param name {String} A human-readable name.
     * @param startAt {String} RFC 3339; follows the same timezone information as `Shift`. Precision up to the minute is respected; seconds are truncated.
     */
    constructor(breakTypeId, expectedDuration, isPaid, name, startAt) { 
        
        Break.initialize(this, breakTypeId, expectedDuration, isPaid, name, startAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, breakTypeId, expectedDuration, isPaid, name, startAt) { 
        obj['break_type_id'] = breakTypeId;
        obj['expected_duration'] = expectedDuration;
        obj['is_paid'] = isPaid;
        obj['name'] = name;
        obj['start_at'] = startAt;
    }

    /**
     * Constructs a <code>Break</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Break} obj Optional instance to populate.
     * @return {module:model/Break} The populated <code>Break</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Break();

            if (data.hasOwnProperty('break_type_id')) {
                obj['break_type_id'] = ApiClient.convertToType(data['break_type_id'], 'String');
            }
            if (data.hasOwnProperty('end_at')) {
                obj['end_at'] = ApiClient.convertToType(data['end_at'], 'String');
            }
            if (data.hasOwnProperty('expected_duration')) {
                obj['expected_duration'] = ApiClient.convertToType(data['expected_duration'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_paid')) {
                obj['is_paid'] = ApiClient.convertToType(data['is_paid'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('start_at')) {
                obj['start_at'] = ApiClient.convertToType(data['start_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Break</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Break</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Break.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['break_type_id'] && !(typeof data['break_type_id'] === 'string' || data['break_type_id'] instanceof String)) {
            throw new Error("Expected the field `break_type_id` to be a primitive type in the JSON string but got " + data['break_type_id']);
        }
        // ensure the json data is a string
        if (data['end_at'] && !(typeof data['end_at'] === 'string' || data['end_at'] instanceof String)) {
            throw new Error("Expected the field `end_at` to be a primitive type in the JSON string but got " + data['end_at']);
        }
        // ensure the json data is a string
        if (data['expected_duration'] && !(typeof data['expected_duration'] === 'string' || data['expected_duration'] instanceof String)) {
            throw new Error("Expected the field `expected_duration` to be a primitive type in the JSON string but got " + data['expected_duration']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['start_at'] && !(typeof data['start_at'] === 'string' || data['start_at'] instanceof String)) {
            throw new Error("Expected the field `start_at` to be a primitive type in the JSON string but got " + data['start_at']);
        }

        return true;
    }


}

Break.RequiredProperties = ["break_type_id", "expected_duration", "is_paid", "name", "start_at"];

/**
 * The `BreakType` that this `Break` was templated on.
 * @member {String} break_type_id
 */
Break.prototype['break_type_id'] = undefined;

/**
 * RFC 3339; follows the same timezone information as `Shift`. Precision up to the minute is respected; seconds are truncated.
 * @member {String} end_at
 */
Break.prototype['end_at'] = undefined;

/**
 * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of the break.
 * @member {String} expected_duration
 */
Break.prototype['expected_duration'] = undefined;

/**
 * The UUID for this object.
 * @member {String} id
 */
Break.prototype['id'] = undefined;

/**
 * Whether this break counts towards time worked for compensation purposes.
 * @member {Boolean} is_paid
 */
Break.prototype['is_paid'] = undefined;

/**
 * A human-readable name.
 * @member {String} name
 */
Break.prototype['name'] = undefined;

/**
 * RFC 3339; follows the same timezone information as `Shift`. Precision up to the minute is respected; seconds are truncated.
 * @member {String} start_at
 */
Break.prototype['start_at'] = undefined;






export default Break;

