/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MeasurementUnitCustom from './MeasurementUnitCustom';

/**
 * The MeasurementUnit model module.
 * @module model/MeasurementUnit
 * @version 2.0
 */
class MeasurementUnit {
    /**
     * Constructs a new <code>MeasurementUnit</code>.
     * Represents a unit of measurement to use with a quantity, such as ounces or inches. Exactly one of the following fields are required: &#x60;custom_unit&#x60;, &#x60;area_unit&#x60;, &#x60;length_unit&#x60;, &#x60;volume_unit&#x60;, and &#x60;weight_unit&#x60;.
     * @alias module:model/MeasurementUnit
     */
    constructor() { 
        
        MeasurementUnit.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MeasurementUnit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MeasurementUnit} obj Optional instance to populate.
     * @return {module:model/MeasurementUnit} The populated <code>MeasurementUnit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MeasurementUnit();

            if (data.hasOwnProperty('area_unit')) {
                obj['area_unit'] = ApiClient.convertToType(data['area_unit'], 'String');
            }
            if (data.hasOwnProperty('custom_unit')) {
                obj['custom_unit'] = MeasurementUnitCustom.constructFromObject(data['custom_unit']);
            }
            if (data.hasOwnProperty('generic_unit')) {
                obj['generic_unit'] = ApiClient.convertToType(data['generic_unit'], 'String');
            }
            if (data.hasOwnProperty('length_unit')) {
                obj['length_unit'] = ApiClient.convertToType(data['length_unit'], 'String');
            }
            if (data.hasOwnProperty('time_unit')) {
                obj['time_unit'] = ApiClient.convertToType(data['time_unit'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('volume_unit')) {
                obj['volume_unit'] = ApiClient.convertToType(data['volume_unit'], 'String');
            }
            if (data.hasOwnProperty('weight_unit')) {
                obj['weight_unit'] = ApiClient.convertToType(data['weight_unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MeasurementUnit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MeasurementUnit</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['area_unit'] && !(typeof data['area_unit'] === 'string' || data['area_unit'] instanceof String)) {
            throw new Error("Expected the field `area_unit` to be a primitive type in the JSON string but got " + data['area_unit']);
        }
        // validate the optional field `custom_unit`
        if (data['custom_unit']) { // data not null
          MeasurementUnitCustom.validateJSON(data['custom_unit']);
        }
        // ensure the json data is a string
        if (data['generic_unit'] && !(typeof data['generic_unit'] === 'string' || data['generic_unit'] instanceof String)) {
            throw new Error("Expected the field `generic_unit` to be a primitive type in the JSON string but got " + data['generic_unit']);
        }
        // ensure the json data is a string
        if (data['length_unit'] && !(typeof data['length_unit'] === 'string' || data['length_unit'] instanceof String)) {
            throw new Error("Expected the field `length_unit` to be a primitive type in the JSON string but got " + data['length_unit']);
        }
        // ensure the json data is a string
        if (data['time_unit'] && !(typeof data['time_unit'] === 'string' || data['time_unit'] instanceof String)) {
            throw new Error("Expected the field `time_unit` to be a primitive type in the JSON string but got " + data['time_unit']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['volume_unit'] && !(typeof data['volume_unit'] === 'string' || data['volume_unit'] instanceof String)) {
            throw new Error("Expected the field `volume_unit` to be a primitive type in the JSON string but got " + data['volume_unit']);
        }
        // ensure the json data is a string
        if (data['weight_unit'] && !(typeof data['weight_unit'] === 'string' || data['weight_unit'] instanceof String)) {
            throw new Error("Expected the field `weight_unit` to be a primitive type in the JSON string but got " + data['weight_unit']);
        }

        return true;
    }


}



/**
 * Represents a standard area unit.
 * @member {String} area_unit
 */
MeasurementUnit.prototype['area_unit'] = undefined;

/**
 * @member {module:model/MeasurementUnitCustom} custom_unit
 */
MeasurementUnit.prototype['custom_unit'] = undefined;

/**
 * Reserved for API integrations that lack the ability to specify a real measurement unit
 * @member {String} generic_unit
 */
MeasurementUnit.prototype['generic_unit'] = undefined;

/**
 * Represents a standard length unit.
 * @member {String} length_unit
 */
MeasurementUnit.prototype['length_unit'] = undefined;

/**
 * Represents a standard unit of time.
 * @member {String} time_unit
 */
MeasurementUnit.prototype['time_unit'] = undefined;

/**
 * Represents the type of the measurement unit.
 * @member {String} type
 */
MeasurementUnit.prototype['type'] = undefined;

/**
 * Represents a standard volume unit.
 * @member {String} volume_unit
 */
MeasurementUnit.prototype['volume_unit'] = undefined;

/**
 * Represents a standard unit of weight or mass.
 * @member {String} weight_unit
 */
MeasurementUnit.prototype['weight_unit'] = undefined;






export default MeasurementUnit;

