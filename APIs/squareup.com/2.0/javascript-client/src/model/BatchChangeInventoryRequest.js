/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InventoryChange from './InventoryChange';

/**
 * The BatchChangeInventoryRequest model module.
 * @module model/BatchChangeInventoryRequest
 * @version 2.0
 */
class BatchChangeInventoryRequest {
    /**
     * Constructs a new <code>BatchChangeInventoryRequest</code>.
     * 
     * @alias module:model/BatchChangeInventoryRequest
     * @param idempotencyKey {String} A client-supplied, universally unique identifier (UUID) for the request.  See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) in the [API Development 101](https://developer.squareup.com/docs/basics/api101/overview) section for more information.
     */
    constructor(idempotencyKey) { 
        
        BatchChangeInventoryRequest.initialize(this, idempotencyKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, idempotencyKey) { 
        obj['idempotency_key'] = idempotencyKey;
    }

    /**
     * Constructs a <code>BatchChangeInventoryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchChangeInventoryRequest} obj Optional instance to populate.
     * @return {module:model/BatchChangeInventoryRequest} The populated <code>BatchChangeInventoryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchChangeInventoryRequest();

            if (data.hasOwnProperty('changes')) {
                obj['changes'] = ApiClient.convertToType(data['changes'], [InventoryChange]);
            }
            if (data.hasOwnProperty('idempotency_key')) {
                obj['idempotency_key'] = ApiClient.convertToType(data['idempotency_key'], 'String');
            }
            if (data.hasOwnProperty('ignore_unchanged_counts')) {
                obj['ignore_unchanged_counts'] = ApiClient.convertToType(data['ignore_unchanged_counts'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchChangeInventoryRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchChangeInventoryRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BatchChangeInventoryRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['changes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['changes'])) {
                throw new Error("Expected the field `changes` to be an array in the JSON data but got " + data['changes']);
            }
            // validate the optional field `changes` (array)
            for (const item of data['changes']) {
                InventoryChange.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['idempotency_key'] && !(typeof data['idempotency_key'] === 'string' || data['idempotency_key'] instanceof String)) {
            throw new Error("Expected the field `idempotency_key` to be a primitive type in the JSON string but got " + data['idempotency_key']);
        }

        return true;
    }


}

BatchChangeInventoryRequest.RequiredProperties = ["idempotency_key"];

/**
 * The set of physical counts and inventory adjustments to be made. Changes are applied based on the client-supplied timestamp and may be sent out of order.
 * @member {Array.<module:model/InventoryChange>} changes
 */
BatchChangeInventoryRequest.prototype['changes'] = undefined;

/**
 * A client-supplied, universally unique identifier (UUID) for the request.  See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) in the [API Development 101](https://developer.squareup.com/docs/basics/api101/overview) section for more information.
 * @member {String} idempotency_key
 */
BatchChangeInventoryRequest.prototype['idempotency_key'] = undefined;

/**
 * Indicates whether the current physical count should be ignored if the quantity is unchanged since the last physical count. Default: `true`.
 * @member {Boolean} ignore_unchanged_counts
 */
BatchChangeInventoryRequest.prototype['ignore_unchanged_counts'] = undefined;






export default BatchChangeInventoryRequest;

