/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogIdMapping model module.
 * @module model/CatalogIdMapping
 * @version 2.0
 */
class CatalogIdMapping {
    /**
     * Constructs a new <code>CatalogIdMapping</code>.
     * A mapping between a temporary client-supplied ID and a permanent server-generated ID.  When calling [UpsertCatalogObject](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/upsert-catalog-object) or [BatchUpsertCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-upsert-catalog-objects) to create a [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance, you can supply a temporary ID for the to-be-created object, especially when the object is to be referenced elsewhere in the same request body. This temporary ID can be any string unique within the call, but must be prefixed by \&quot;#\&quot;.  After the request is submitted and the object created, a permanent server-generated ID is assigned to the new object. The permanent ID is unique across the Square catalog.
     * @alias module:model/CatalogIdMapping
     */
    constructor() { 
        
        CatalogIdMapping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogIdMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogIdMapping} obj Optional instance to populate.
     * @return {module:model/CatalogIdMapping} The populated <code>CatalogIdMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogIdMapping();

            if (data.hasOwnProperty('client_object_id')) {
                obj['client_object_id'] = ApiClient.convertToType(data['client_object_id'], 'String');
            }
            if (data.hasOwnProperty('object_id')) {
                obj['object_id'] = ApiClient.convertToType(data['object_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogIdMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogIdMapping</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['client_object_id'] && !(typeof data['client_object_id'] === 'string' || data['client_object_id'] instanceof String)) {
            throw new Error("Expected the field `client_object_id` to be a primitive type in the JSON string but got " + data['client_object_id']);
        }
        // ensure the json data is a string
        if (data['object_id'] && !(typeof data['object_id'] === 'string' || data['object_id'] instanceof String)) {
            throw new Error("Expected the field `object_id` to be a primitive type in the JSON string but got " + data['object_id']);
        }

        return true;
    }


}



/**
 * The client-supplied temporary `#`-prefixed ID for a new `CatalogObject`.
 * @member {String} client_object_id
 */
CatalogIdMapping.prototype['client_object_id'] = undefined;

/**
 * The permanent ID for the CatalogObject created by the server.
 * @member {String} object_id
 */
CatalogIdMapping.prototype['object_id'] = undefined;






export default CatalogIdMapping;

