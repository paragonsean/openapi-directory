/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import V1Money from './V1Money';
import V1PaymentSurcharge from './V1PaymentSurcharge';
import V1PaymentTax from './V1PaymentTax';

/**
 * The V1Refund model module.
 * @module model/V1Refund
 * @version 2.0
 */
class V1Refund {
    /**
     * Constructs a new <code>V1Refund</code>.
     * V1Refund
     * @alias module:model/V1Refund
     */
    constructor() { 
        
        V1Refund.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V1Refund</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1Refund} obj Optional instance to populate.
     * @return {module:model/V1Refund} The populated <code>V1Refund</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1Refund();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('is_exchange')) {
                obj['is_exchange'] = ApiClient.convertToType(data['is_exchange'], 'Boolean');
            }
            if (data.hasOwnProperty('merchant_id')) {
                obj['merchant_id'] = ApiClient.convertToType(data['merchant_id'], 'String');
            }
            if (data.hasOwnProperty('payment_id')) {
                obj['payment_id'] = ApiClient.convertToType(data['payment_id'], 'String');
            }
            if (data.hasOwnProperty('processed_at')) {
                obj['processed_at'] = ApiClient.convertToType(data['processed_at'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('refunded_additive_tax')) {
                obj['refunded_additive_tax'] = ApiClient.convertToType(data['refunded_additive_tax'], [V1PaymentTax]);
            }
            if (data.hasOwnProperty('refunded_additive_tax_money')) {
                obj['refunded_additive_tax_money'] = V1Money.constructFromObject(data['refunded_additive_tax_money']);
            }
            if (data.hasOwnProperty('refunded_discount_money')) {
                obj['refunded_discount_money'] = V1Money.constructFromObject(data['refunded_discount_money']);
            }
            if (data.hasOwnProperty('refunded_inclusive_tax')) {
                obj['refunded_inclusive_tax'] = ApiClient.convertToType(data['refunded_inclusive_tax'], [V1PaymentTax]);
            }
            if (data.hasOwnProperty('refunded_inclusive_tax_money')) {
                obj['refunded_inclusive_tax_money'] = V1Money.constructFromObject(data['refunded_inclusive_tax_money']);
            }
            if (data.hasOwnProperty('refunded_money')) {
                obj['refunded_money'] = V1Money.constructFromObject(data['refunded_money']);
            }
            if (data.hasOwnProperty('refunded_processing_fee_money')) {
                obj['refunded_processing_fee_money'] = V1Money.constructFromObject(data['refunded_processing_fee_money']);
            }
            if (data.hasOwnProperty('refunded_surcharge_money')) {
                obj['refunded_surcharge_money'] = V1Money.constructFromObject(data['refunded_surcharge_money']);
            }
            if (data.hasOwnProperty('refunded_surcharges')) {
                obj['refunded_surcharges'] = ApiClient.convertToType(data['refunded_surcharges'], [V1PaymentSurcharge]);
            }
            if (data.hasOwnProperty('refunded_tax_money')) {
                obj['refunded_tax_money'] = V1Money.constructFromObject(data['refunded_tax_money']);
            }
            if (data.hasOwnProperty('refunded_tip_money')) {
                obj['refunded_tip_money'] = V1Money.constructFromObject(data['refunded_tip_money']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1Refund</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1Refund</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['merchant_id'] && !(typeof data['merchant_id'] === 'string' || data['merchant_id'] instanceof String)) {
            throw new Error("Expected the field `merchant_id` to be a primitive type in the JSON string but got " + data['merchant_id']);
        }
        // ensure the json data is a string
        if (data['payment_id'] && !(typeof data['payment_id'] === 'string' || data['payment_id'] instanceof String)) {
            throw new Error("Expected the field `payment_id` to be a primitive type in the JSON string but got " + data['payment_id']);
        }
        // ensure the json data is a string
        if (data['processed_at'] && !(typeof data['processed_at'] === 'string' || data['processed_at'] instanceof String)) {
            throw new Error("Expected the field `processed_at` to be a primitive type in the JSON string but got " + data['processed_at']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        if (data['refunded_additive_tax']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['refunded_additive_tax'])) {
                throw new Error("Expected the field `refunded_additive_tax` to be an array in the JSON data but got " + data['refunded_additive_tax']);
            }
            // validate the optional field `refunded_additive_tax` (array)
            for (const item of data['refunded_additive_tax']) {
                V1PaymentTax.validateJSON(item);
            };
        }
        // validate the optional field `refunded_additive_tax_money`
        if (data['refunded_additive_tax_money']) { // data not null
          V1Money.validateJSON(data['refunded_additive_tax_money']);
        }
        // validate the optional field `refunded_discount_money`
        if (data['refunded_discount_money']) { // data not null
          V1Money.validateJSON(data['refunded_discount_money']);
        }
        if (data['refunded_inclusive_tax']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['refunded_inclusive_tax'])) {
                throw new Error("Expected the field `refunded_inclusive_tax` to be an array in the JSON data but got " + data['refunded_inclusive_tax']);
            }
            // validate the optional field `refunded_inclusive_tax` (array)
            for (const item of data['refunded_inclusive_tax']) {
                V1PaymentTax.validateJSON(item);
            };
        }
        // validate the optional field `refunded_inclusive_tax_money`
        if (data['refunded_inclusive_tax_money']) { // data not null
          V1Money.validateJSON(data['refunded_inclusive_tax_money']);
        }
        // validate the optional field `refunded_money`
        if (data['refunded_money']) { // data not null
          V1Money.validateJSON(data['refunded_money']);
        }
        // validate the optional field `refunded_processing_fee_money`
        if (data['refunded_processing_fee_money']) { // data not null
          V1Money.validateJSON(data['refunded_processing_fee_money']);
        }
        // validate the optional field `refunded_surcharge_money`
        if (data['refunded_surcharge_money']) { // data not null
          V1Money.validateJSON(data['refunded_surcharge_money']);
        }
        if (data['refunded_surcharges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['refunded_surcharges'])) {
                throw new Error("Expected the field `refunded_surcharges` to be an array in the JSON data but got " + data['refunded_surcharges']);
            }
            // validate the optional field `refunded_surcharges` (array)
            for (const item of data['refunded_surcharges']) {
                V1PaymentSurcharge.validateJSON(item);
            };
        }
        // validate the optional field `refunded_tax_money`
        if (data['refunded_tax_money']) { // data not null
          V1Money.validateJSON(data['refunded_tax_money']);
        }
        // validate the optional field `refunded_tip_money`
        if (data['refunded_tip_money']) { // data not null
          V1Money.validateJSON(data['refunded_tip_money']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The time when the merchant initiated the refund for Square to process, in ISO 8601 format.
 * @member {String} created_at
 */
V1Refund.prototype['created_at'] = undefined;

/**
 * Indicates whether or not the refund is associated with an exchange. If is_exchange is true, the refund reflects the value of goods returned in the exchange not the total money refunded.
 * @member {Boolean} is_exchange
 */
V1Refund.prototype['is_exchange'] = undefined;

/**
 * 
 * @member {String} merchant_id
 */
V1Refund.prototype['merchant_id'] = undefined;

/**
 * A Square-issued ID associated with the refund. For single-tender refunds, payment_id is the ID of the original payment ID. For split-tender refunds, payment_id is the ID of the original tender. For exchange-based refunds (is_exchange == true), payment_id is the ID of the original payment ID even if the payment includes other tenders.
 * @member {String} payment_id
 */
V1Refund.prototype['payment_id'] = undefined;

/**
 * The time when Square processed the refund on behalf of the merchant, in ISO 8601 format.
 * @member {String} processed_at
 */
V1Refund.prototype['processed_at'] = undefined;

/**
 * The merchant-specified reason for the refund.
 * @member {String} reason
 */
V1Refund.prototype['reason'] = undefined;

/**
 * All of the additive taxes associated with the refund.
 * @member {Array.<module:model/V1PaymentTax>} refunded_additive_tax
 */
V1Refund.prototype['refunded_additive_tax'] = undefined;

/**
 * @member {module:model/V1Money} refunded_additive_tax_money
 */
V1Refund.prototype['refunded_additive_tax_money'] = undefined;

/**
 * @member {module:model/V1Money} refunded_discount_money
 */
V1Refund.prototype['refunded_discount_money'] = undefined;

/**
 * All of the inclusive taxes associated with the refund.
 * @member {Array.<module:model/V1PaymentTax>} refunded_inclusive_tax
 */
V1Refund.prototype['refunded_inclusive_tax'] = undefined;

/**
 * @member {module:model/V1Money} refunded_inclusive_tax_money
 */
V1Refund.prototype['refunded_inclusive_tax_money'] = undefined;

/**
 * @member {module:model/V1Money} refunded_money
 */
V1Refund.prototype['refunded_money'] = undefined;

/**
 * @member {module:model/V1Money} refunded_processing_fee_money
 */
V1Refund.prototype['refunded_processing_fee_money'] = undefined;

/**
 * @member {module:model/V1Money} refunded_surcharge_money
 */
V1Refund.prototype['refunded_surcharge_money'] = undefined;

/**
 * A list of all surcharges associated with the refund.
 * @member {Array.<module:model/V1PaymentSurcharge>} refunded_surcharges
 */
V1Refund.prototype['refunded_surcharges'] = undefined;

/**
 * @member {module:model/V1Money} refunded_tax_money
 */
V1Refund.prototype['refunded_tax_money'] = undefined;

/**
 * @member {module:model/V1Money} refunded_tip_money
 */
V1Refund.prototype['refunded_tip_money'] = undefined;

/**
 * The type of refund
 * @member {String} type
 */
V1Refund.prototype['type'] = undefined;






export default V1Refund;

