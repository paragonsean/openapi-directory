/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DisputedPayment model module.
 * @module model/DisputedPayment
 * @version 2.0
 */
class DisputedPayment {
    /**
     * Constructs a new <code>DisputedPayment</code>.
     * The payment the cardholder disputed.
     * @alias module:model/DisputedPayment
     */
    constructor() { 
        
        DisputedPayment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DisputedPayment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DisputedPayment} obj Optional instance to populate.
     * @return {module:model/DisputedPayment} The populated <code>DisputedPayment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DisputedPayment();

            if (data.hasOwnProperty('payment_id')) {
                obj['payment_id'] = ApiClient.convertToType(data['payment_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DisputedPayment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DisputedPayment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['payment_id'] && !(typeof data['payment_id'] === 'string' || data['payment_id'] instanceof String)) {
            throw new Error("Expected the field `payment_id` to be a primitive type in the JSON string but got " + data['payment_id']);
        }

        return true;
    }


}



/**
 * Square-generated unique ID of the payment being disputed.
 * @member {String} payment_id
 */
DisputedPayment.prototype['payment_id'] = undefined;






export default DisputedPayment;

