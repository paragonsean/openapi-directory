/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoyaltyEventDateTimeFilter from './LoyaltyEventDateTimeFilter';
import LoyaltyEventLocationFilter from './LoyaltyEventLocationFilter';
import LoyaltyEventLoyaltyAccountFilter from './LoyaltyEventLoyaltyAccountFilter';
import LoyaltyEventOrderFilter from './LoyaltyEventOrderFilter';
import LoyaltyEventTypeFilter from './LoyaltyEventTypeFilter';

/**
 * The LoyaltyEventFilter model module.
 * @module model/LoyaltyEventFilter
 * @version 2.0
 */
class LoyaltyEventFilter {
    /**
     * Constructs a new <code>LoyaltyEventFilter</code>.
     * The filtering criteria. If the request specifies multiple filters,  the endpoint uses a logical AND to evaluate them.
     * @alias module:model/LoyaltyEventFilter
     */
    constructor() { 
        
        LoyaltyEventFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoyaltyEventFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoyaltyEventFilter} obj Optional instance to populate.
     * @return {module:model/LoyaltyEventFilter} The populated <code>LoyaltyEventFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoyaltyEventFilter();

            if (data.hasOwnProperty('date_time_filter')) {
                obj['date_time_filter'] = LoyaltyEventDateTimeFilter.constructFromObject(data['date_time_filter']);
            }
            if (data.hasOwnProperty('location_filter')) {
                obj['location_filter'] = LoyaltyEventLocationFilter.constructFromObject(data['location_filter']);
            }
            if (data.hasOwnProperty('loyalty_account_filter')) {
                obj['loyalty_account_filter'] = LoyaltyEventLoyaltyAccountFilter.constructFromObject(data['loyalty_account_filter']);
            }
            if (data.hasOwnProperty('order_filter')) {
                obj['order_filter'] = LoyaltyEventOrderFilter.constructFromObject(data['order_filter']);
            }
            if (data.hasOwnProperty('type_filter')) {
                obj['type_filter'] = LoyaltyEventTypeFilter.constructFromObject(data['type_filter']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoyaltyEventFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoyaltyEventFilter</code>.
     */
    static validateJSON(data) {
        // validate the optional field `date_time_filter`
        if (data['date_time_filter']) { // data not null
          LoyaltyEventDateTimeFilter.validateJSON(data['date_time_filter']);
        }
        // validate the optional field `location_filter`
        if (data['location_filter']) { // data not null
          LoyaltyEventLocationFilter.validateJSON(data['location_filter']);
        }
        // validate the optional field `loyalty_account_filter`
        if (data['loyalty_account_filter']) { // data not null
          LoyaltyEventLoyaltyAccountFilter.validateJSON(data['loyalty_account_filter']);
        }
        // validate the optional field `order_filter`
        if (data['order_filter']) { // data not null
          LoyaltyEventOrderFilter.validateJSON(data['order_filter']);
        }
        // validate the optional field `type_filter`
        if (data['type_filter']) { // data not null
          LoyaltyEventTypeFilter.validateJSON(data['type_filter']);
        }

        return true;
    }


}



/**
 * @member {module:model/LoyaltyEventDateTimeFilter} date_time_filter
 */
LoyaltyEventFilter.prototype['date_time_filter'] = undefined;

/**
 * @member {module:model/LoyaltyEventLocationFilter} location_filter
 */
LoyaltyEventFilter.prototype['location_filter'] = undefined;

/**
 * @member {module:model/LoyaltyEventLoyaltyAccountFilter} loyalty_account_filter
 */
LoyaltyEventFilter.prototype['loyalty_account_filter'] = undefined;

/**
 * @member {module:model/LoyaltyEventOrderFilter} order_filter
 */
LoyaltyEventFilter.prototype['order_filter'] = undefined;

/**
 * @member {module:model/LoyaltyEventTypeFilter} type_filter
 */
LoyaltyEventFilter.prototype['type_filter'] = undefined;






export default LoyaltyEventFilter;

