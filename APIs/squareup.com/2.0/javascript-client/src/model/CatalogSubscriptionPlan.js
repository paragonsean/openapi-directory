/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubscriptionPhase from './SubscriptionPhase';

/**
 * The CatalogSubscriptionPlan model module.
 * @module model/CatalogSubscriptionPlan
 * @version 2.0
 */
class CatalogSubscriptionPlan {
    /**
     * Constructs a new <code>CatalogSubscriptionPlan</code>.
     * Describes a subscription plan. For more information, see [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).
     * @alias module:model/CatalogSubscriptionPlan
     * @param name {String} The name of the plan.
     * @param phases {Array.<module:model/SubscriptionPhase>} A list of SubscriptionPhase containing the [SubscriptionPhase](https://developer.squareup.com/reference/square_2021-08-18/objects/SubscriptionPhase) for this plan.
     */
    constructor(name, phases) { 
        
        CatalogSubscriptionPlan.initialize(this, name, phases);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, phases) { 
        obj['name'] = name;
        obj['phases'] = phases;
    }

    /**
     * Constructs a <code>CatalogSubscriptionPlan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogSubscriptionPlan} obj Optional instance to populate.
     * @return {module:model/CatalogSubscriptionPlan} The populated <code>CatalogSubscriptionPlan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogSubscriptionPlan();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phases')) {
                obj['phases'] = ApiClient.convertToType(data['phases'], [SubscriptionPhase]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogSubscriptionPlan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogSubscriptionPlan</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogSubscriptionPlan.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['phases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['phases'])) {
                throw new Error("Expected the field `phases` to be an array in the JSON data but got " + data['phases']);
            }
            // validate the optional field `phases` (array)
            for (const item of data['phases']) {
                SubscriptionPhase.validateJSON(item);
            };
        }

        return true;
    }


}

CatalogSubscriptionPlan.RequiredProperties = ["name", "phases"];

/**
 * The name of the plan.
 * @member {String} name
 */
CatalogSubscriptionPlan.prototype['name'] = undefined;

/**
 * A list of SubscriptionPhase containing the [SubscriptionPhase](https://developer.squareup.com/reference/square_2021-08-18/objects/SubscriptionPhase) for this plan.
 * @member {Array.<module:model/SubscriptionPhase>} phases
 */
CatalogSubscriptionPlan.prototype['phases'] = undefined;






export default CatalogSubscriptionPlan;

