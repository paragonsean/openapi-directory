/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Refund from './Refund';
import Tender from './Tender';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 2.0
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * Represents a transaction processed with Square, either with the Connect API or with Square Point of Sale.  The &#x60;tenders&#x60; field of this object lists all methods of payment used to pay in the transaction.
     * @alias module:model/Transaction
     */
    constructor() { 
        
        Transaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction} obj Optional instance to populate.
     * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = ApiClient.convertToType(data['product'], 'String');
            }
            if (data.hasOwnProperty('reference_id')) {
                obj['reference_id'] = ApiClient.convertToType(data['reference_id'], 'String');
            }
            if (data.hasOwnProperty('refunds')) {
                obj['refunds'] = ApiClient.convertToType(data['refunds'], [Refund]);
            }
            if (data.hasOwnProperty('shipping_address')) {
                obj['shipping_address'] = Address.constructFromObject(data['shipping_address']);
            }
            if (data.hasOwnProperty('tenders')) {
                obj['tenders'] = ApiClient.convertToType(data['tenders'], [Tender]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // ensure the json data is a string
        if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
            throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
        }
        // ensure the json data is a string
        if (data['product'] && !(typeof data['product'] === 'string' || data['product'] instanceof String)) {
            throw new Error("Expected the field `product` to be a primitive type in the JSON string but got " + data['product']);
        }
        // ensure the json data is a string
        if (data['reference_id'] && !(typeof data['reference_id'] === 'string' || data['reference_id'] instanceof String)) {
            throw new Error("Expected the field `reference_id` to be a primitive type in the JSON string but got " + data['reference_id']);
        }
        if (data['refunds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['refunds'])) {
                throw new Error("Expected the field `refunds` to be an array in the JSON data but got " + data['refunds']);
            }
            // validate the optional field `refunds` (array)
            for (const item of data['refunds']) {
                Refund.validateJSON(item);
            };
        }
        // validate the optional field `shipping_address`
        if (data['shipping_address']) { // data not null
          Address.validateJSON(data['shipping_address']);
        }
        if (data['tenders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tenders'])) {
                throw new Error("Expected the field `tenders` to be an array in the JSON data but got " + data['tenders']);
            }
            // validate the optional field `tenders` (array)
            for (const item of data['tenders']) {
                Tender.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * If the transaction was created in the Square Point of Sale app, this value is the ID generated for the transaction by Square Point of Sale.  This ID has no relationship to the transaction's canonical `id`, which is generated by Square's backend servers. This value is generated for bookkeeping purposes, in case the transaction cannot immediately be completed (for example, if the transaction is processed in offline mode).  It is not currently possible with the Connect API to perform a transaction lookup by this value.
 * @member {String} client_id
 */
Transaction.prototype['client_id'] = undefined;

/**
 * The timestamp for when the transaction was created, in RFC 3339 format.
 * @member {String} created_at
 */
Transaction.prototype['created_at'] = undefined;

/**
 * The transaction's unique ID, issued by Square payments servers.
 * @member {String} id
 */
Transaction.prototype['id'] = undefined;

/**
 * The ID of the transaction's associated location.
 * @member {String} location_id
 */
Transaction.prototype['location_id'] = undefined;

/**
 * The order_id is an identifier for the order associated with this transaction, if any.
 * @member {String} order_id
 */
Transaction.prototype['order_id'] = undefined;

/**
 * The Square product that processed the transaction.
 * @member {String} product
 */
Transaction.prototype['product'] = undefined;

/**
 * If the transaction was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge) endpoint, this value is the same as the value provided for the `reference_id` parameter in the request to that endpoint. Otherwise, it is not set.
 * @member {String} reference_id
 */
Transaction.prototype['reference_id'] = undefined;

/**
 * Refunds that have been applied to any tender in the transaction.
 * @member {Array.<module:model/Refund>} refunds
 */
Transaction.prototype['refunds'] = undefined;

/**
 * @member {module:model/Address} shipping_address
 */
Transaction.prototype['shipping_address'] = undefined;

/**
 * The tenders used to pay in the transaction.
 * @member {Array.<module:model/Tender>} tenders
 */
Transaction.prototype['tenders'] = undefined;






export default Transaction;

