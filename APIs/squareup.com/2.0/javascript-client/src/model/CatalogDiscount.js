/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The CatalogDiscount model module.
 * @module model/CatalogDiscount
 * @version 2.0
 */
class CatalogDiscount {
    /**
     * Constructs a new <code>CatalogDiscount</code>.
     * A discount applicable to items.
     * @alias module:model/CatalogDiscount
     */
    constructor() { 
        
        CatalogDiscount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogDiscount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogDiscount} obj Optional instance to populate.
     * @return {module:model/CatalogDiscount} The populated <code>CatalogDiscount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogDiscount();

            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('discount_type')) {
                obj['discount_type'] = ApiClient.convertToType(data['discount_type'], 'String');
            }
            if (data.hasOwnProperty('label_color')) {
                obj['label_color'] = ApiClient.convertToType(data['label_color'], 'String');
            }
            if (data.hasOwnProperty('modify_tax_basis')) {
                obj['modify_tax_basis'] = ApiClient.convertToType(data['modify_tax_basis'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('percentage')) {
                obj['percentage'] = ApiClient.convertToType(data['percentage'], 'String');
            }
            if (data.hasOwnProperty('pin_required')) {
                obj['pin_required'] = ApiClient.convertToType(data['pin_required'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogDiscount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogDiscount</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          Money.validateJSON(data['amount_money']);
        }
        // ensure the json data is a string
        if (data['discount_type'] && !(typeof data['discount_type'] === 'string' || data['discount_type'] instanceof String)) {
            throw new Error("Expected the field `discount_type` to be a primitive type in the JSON string but got " + data['discount_type']);
        }
        // ensure the json data is a string
        if (data['label_color'] && !(typeof data['label_color'] === 'string' || data['label_color'] instanceof String)) {
            throw new Error("Expected the field `label_color` to be a primitive type in the JSON string but got " + data['label_color']);
        }
        // ensure the json data is a string
        if (data['modify_tax_basis'] && !(typeof data['modify_tax_basis'] === 'string' || data['modify_tax_basis'] instanceof String)) {
            throw new Error("Expected the field `modify_tax_basis` to be a primitive type in the JSON string but got " + data['modify_tax_basis']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['percentage'] && !(typeof data['percentage'] === 'string' || data['percentage'] instanceof String)) {
            throw new Error("Expected the field `percentage` to be a primitive type in the JSON string but got " + data['percentage']);
        }

        return true;
    }


}



/**
 * @member {module:model/Money} amount_money
 */
CatalogDiscount.prototype['amount_money'] = undefined;

/**
 * Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale.
 * @member {String} discount_type
 */
CatalogDiscount.prototype['discount_type'] = undefined;

/**
 * The color of the discount display label in the Square Point of Sale app. This must be a valid hex color code.
 * @member {String} label_color
 */
CatalogDiscount.prototype['label_color'] = undefined;

/**
 * Indicates whether this discount should reduce the price used to calculate tax.  Most discounts should use `MODIFY_TAX_BASIS`. However, in some circumstances taxes must be calculated based on an item's price, ignoring a particular discount. For example, in many US jurisdictions, a manufacturer coupon or instant rebate reduces the price a customer pays but does not reduce the sale price used to calculate how much sales tax is due. In this case, the discount representing that manufacturer coupon should have `DO_NOT_MODIFY_TAX_BASIS` for this field.  If you are unsure whether you need to use this field, consult your tax professional.
 * @member {String} modify_tax_basis
 */
CatalogDiscount.prototype['modify_tax_basis'] = undefined;

/**
 * The discount name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
 * @member {String} name
 */
CatalogDiscount.prototype['name'] = undefined;

/**
 * The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type` is `VARIABLE_PERCENTAGE`.  Do not use this field for amount-based or variable discounts.
 * @member {String} percentage
 */
CatalogDiscount.prototype['percentage'] = undefined;

/**
 * Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment in the Square Point of Sale app.
 * @member {Boolean} pin_required
 */
CatalogDiscount.prototype['pin_required'] = undefined;






export default CatalogDiscount;

