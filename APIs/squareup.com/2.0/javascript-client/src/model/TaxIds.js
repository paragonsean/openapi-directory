/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaxIds model module.
 * @module model/TaxIds
 * @version 2.0
 */
class TaxIds {
    /**
     * Constructs a new <code>TaxIds</code>.
     * The tax IDs that a Location is operating under.
     * @alias module:model/TaxIds
     */
    constructor() { 
        
        TaxIds.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaxIds</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxIds} obj Optional instance to populate.
     * @return {module:model/TaxIds} The populated <code>TaxIds</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaxIds();

            if (data.hasOwnProperty('eu_vat')) {
                obj['eu_vat'] = ApiClient.convertToType(data['eu_vat'], 'String');
            }
            if (data.hasOwnProperty('fr_naf')) {
                obj['fr_naf'] = ApiClient.convertToType(data['fr_naf'], 'String');
            }
            if (data.hasOwnProperty('fr_siret')) {
                obj['fr_siret'] = ApiClient.convertToType(data['fr_siret'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaxIds</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaxIds</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['eu_vat'] && !(typeof data['eu_vat'] === 'string' || data['eu_vat'] instanceof String)) {
            throw new Error("Expected the field `eu_vat` to be a primitive type in the JSON string but got " + data['eu_vat']);
        }
        // ensure the json data is a string
        if (data['fr_naf'] && !(typeof data['fr_naf'] === 'string' || data['fr_naf'] instanceof String)) {
            throw new Error("Expected the field `fr_naf` to be a primitive type in the JSON string but got " + data['fr_naf']);
        }
        // ensure the json data is a string
        if (data['fr_siret'] && !(typeof data['fr_siret'] === 'string' || data['fr_siret'] instanceof String)) {
            throw new Error("Expected the field `fr_siret` to be a primitive type in the JSON string but got " + data['fr_siret']);
        }

        return true;
    }


}



/**
 * The EU VAT number for this location. For example, \"IE3426675K\". If the EU VAT number is present, it is well-formed and has been validated with VIES, the VAT Information Exchange System.
 * @member {String} eu_vat
 */
TaxIds.prototype['eu_vat'] = undefined;

/**
 * The French government uses the NAF (Nomenclature des Activités Françaises) to display and track economic statistical data. This is also called the APE (Activite Principale de l’Entreprise) code. For example, 6910Z.
 * @member {String} fr_naf
 */
TaxIds.prototype['fr_naf'] = undefined;

/**
 * The SIRET (Système d'Identification du Répertoire des Entreprises et de leurs Etablissements) number is a 14 digits code issued by the French INSEE. For example, \"39922799000021\".
 * @member {String} fr_siret
 */
TaxIds.prototype['fr_siret'] = undefined;






export default TaxIds;

