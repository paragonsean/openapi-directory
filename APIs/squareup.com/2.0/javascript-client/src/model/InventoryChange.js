/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogMeasurementUnit from './CatalogMeasurementUnit';
import InventoryAdjustment from './InventoryAdjustment';
import InventoryPhysicalCount from './InventoryPhysicalCount';
import InventoryTransfer from './InventoryTransfer';

/**
 * The InventoryChange model module.
 * @module model/InventoryChange
 * @version 2.0
 */
class InventoryChange {
    /**
     * Constructs a new <code>InventoryChange</code>.
     * Represents a single physical count, inventory, adjustment, or transfer that is part of the history of inventory changes for a particular [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.
     * @alias module:model/InventoryChange
     */
    constructor() { 
        
        InventoryChange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InventoryChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InventoryChange} obj Optional instance to populate.
     * @return {module:model/InventoryChange} The populated <code>InventoryChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InventoryChange();

            if (data.hasOwnProperty('adjustment')) {
                obj['adjustment'] = InventoryAdjustment.constructFromObject(data['adjustment']);
            }
            if (data.hasOwnProperty('measurement_unit')) {
                obj['measurement_unit'] = CatalogMeasurementUnit.constructFromObject(data['measurement_unit']);
            }
            if (data.hasOwnProperty('measurement_unit_id')) {
                obj['measurement_unit_id'] = ApiClient.convertToType(data['measurement_unit_id'], 'String');
            }
            if (data.hasOwnProperty('physical_count')) {
                obj['physical_count'] = InventoryPhysicalCount.constructFromObject(data['physical_count']);
            }
            if (data.hasOwnProperty('transfer')) {
                obj['transfer'] = InventoryTransfer.constructFromObject(data['transfer']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InventoryChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InventoryChange</code>.
     */
    static validateJSON(data) {
        // validate the optional field `adjustment`
        if (data['adjustment']) { // data not null
          InventoryAdjustment.validateJSON(data['adjustment']);
        }
        // validate the optional field `measurement_unit`
        if (data['measurement_unit']) { // data not null
          CatalogMeasurementUnit.validateJSON(data['measurement_unit']);
        }
        // ensure the json data is a string
        if (data['measurement_unit_id'] && !(typeof data['measurement_unit_id'] === 'string' || data['measurement_unit_id'] instanceof String)) {
            throw new Error("Expected the field `measurement_unit_id` to be a primitive type in the JSON string but got " + data['measurement_unit_id']);
        }
        // validate the optional field `physical_count`
        if (data['physical_count']) { // data not null
          InventoryPhysicalCount.validateJSON(data['physical_count']);
        }
        // validate the optional field `transfer`
        if (data['transfer']) { // data not null
          InventoryTransfer.validateJSON(data['transfer']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/InventoryAdjustment} adjustment
 */
InventoryChange.prototype['adjustment'] = undefined;

/**
 * @member {module:model/CatalogMeasurementUnit} measurement_unit
 */
InventoryChange.prototype['measurement_unit'] = undefined;

/**
 * The ID of the [CatalogMeasurementUnit](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogMeasurementUnit) object representing the catalog measurement unit associated with the inventory change.
 * @member {String} measurement_unit_id
 */
InventoryChange.prototype['measurement_unit_id'] = undefined;

/**
 * @member {module:model/InventoryPhysicalCount} physical_count
 */
InventoryChange.prototype['physical_count'] = undefined;

/**
 * @member {module:model/InventoryTransfer} transfer
 */
InventoryChange.prototype['transfer'] = undefined;

/**
 * Indicates how the inventory change is applied. See [InventoryChangeType](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryChangeType) for all possible values.
 * @member {String} type
 */
InventoryChange.prototype['type'] = undefined;






export default InventoryChange;

