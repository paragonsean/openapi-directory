/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The OrderRoundingAdjustment model module.
 * @module model/OrderRoundingAdjustment
 * @version 2.0
 */
class OrderRoundingAdjustment {
    /**
     * Constructs a new <code>OrderRoundingAdjustment</code>.
     * A rounding adjustment of the money being returned. Commonly used to apply cash rounding when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
     * @alias module:model/OrderRoundingAdjustment
     */
    constructor() { 
        
        OrderRoundingAdjustment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderRoundingAdjustment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderRoundingAdjustment} obj Optional instance to populate.
     * @return {module:model/OrderRoundingAdjustment} The populated <code>OrderRoundingAdjustment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderRoundingAdjustment();

            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderRoundingAdjustment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderRoundingAdjustment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          Money.validateJSON(data['amount_money']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * @member {module:model/Money} amount_money
 */
OrderRoundingAdjustment.prototype['amount_money'] = undefined;

/**
 * The name of the rounding adjustment from the original sale order.
 * @member {String} name
 */
OrderRoundingAdjustment.prototype['name'] = undefined;

/**
 * A unique ID that identifies the rounding adjustment only within this order.
 * @member {String} uid
 */
OrderRoundingAdjustment.prototype['uid'] = undefined;






export default OrderRoundingAdjustment;

