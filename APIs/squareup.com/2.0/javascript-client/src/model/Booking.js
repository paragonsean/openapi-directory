/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppointmentSegment from './AppointmentSegment';

/**
 * The Booking model module.
 * @module model/Booking
 * @version 2.0
 */
class Booking {
    /**
     * Constructs a new <code>Booking</code>.
     * Represents a booking as a time-bound service contract for a seller&#39;s staff member to provide a specified service at a given location to a requesting customer in one or more appointment segments.
     * @alias module:model/Booking
     */
    constructor() { 
        
        Booking.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Booking</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Booking} obj Optional instance to populate.
     * @return {module:model/Booking} The populated <code>Booking</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Booking();

            if (data.hasOwnProperty('appointment_segments')) {
                obj['appointment_segments'] = ApiClient.convertToType(data['appointment_segments'], [AppointmentSegment]);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('customer_note')) {
                obj['customer_note'] = ApiClient.convertToType(data['customer_note'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('seller_note')) {
                obj['seller_note'] = ApiClient.convertToType(data['seller_note'], 'String');
            }
            if (data.hasOwnProperty('start_at')) {
                obj['start_at'] = ApiClient.convertToType(data['start_at'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Booking</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Booking</code>.
     */
    static validateJSON(data) {
        if (data['appointment_segments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appointment_segments'])) {
                throw new Error("Expected the field `appointment_segments` to be an array in the JSON data but got " + data['appointment_segments']);
            }
            // validate the optional field `appointment_segments` (array)
            for (const item of data['appointment_segments']) {
                AppointmentSegment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['customer_note'] && !(typeof data['customer_note'] === 'string' || data['customer_note'] instanceof String)) {
            throw new Error("Expected the field `customer_note` to be a primitive type in the JSON string but got " + data['customer_note']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // ensure the json data is a string
        if (data['seller_note'] && !(typeof data['seller_note'] === 'string' || data['seller_note'] instanceof String)) {
            throw new Error("Expected the field `seller_note` to be a primitive type in the JSON string but got " + data['seller_note']);
        }
        // ensure the json data is a string
        if (data['start_at'] && !(typeof data['start_at'] === 'string' || data['start_at'] instanceof String)) {
            throw new Error("Expected the field `start_at` to be a primitive type in the JSON string but got " + data['start_at']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * A list of appointment segments for this booking.
 * @member {Array.<module:model/AppointmentSegment>} appointment_segments
 */
Booking.prototype['appointment_segments'] = undefined;

/**
 * The timestamp specifying the creation time of this booking, in RFC 3339 format.
 * @member {String} created_at
 */
Booking.prototype['created_at'] = undefined;

/**
 * The ID of the [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) object representing the customer attending this booking
 * @member {String} customer_id
 */
Booking.prototype['customer_id'] = undefined;

/**
 * The free-text field for the customer to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a relevant [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.
 * @member {String} customer_note
 */
Booking.prototype['customer_note'] = undefined;

/**
 * A unique ID of this object representing a booking.
 * @member {String} id
 */
Booking.prototype['id'] = undefined;

/**
 * The ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) object representing the location where the booked service is provided.
 * @member {String} location_id
 */
Booking.prototype['location_id'] = undefined;

/**
 * The free-text field for the seller to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a specific [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance. This field should not be visible to customers.
 * @member {String} seller_note
 */
Booking.prototype['seller_note'] = undefined;

/**
 * The timestamp specifying the starting time of this booking, in RFC 3339 format.
 * @member {String} start_at
 */
Booking.prototype['start_at'] = undefined;

/**
 * The status of the booking, describing where the booking stands with respect to the booking state machine.
 * @member {String} status
 */
Booking.prototype['status'] = undefined;

/**
 * The timestamp specifying the most recent update time of this booking, in RFC 3339 format.
 * @member {String} updated_at
 */
Booking.prototype['updated_at'] = undefined;

/**
 * The revision number for the booking used for optimistic concurrency.
 * @member {Number} version
 */
Booking.prototype['version'] = undefined;






export default Booking;

