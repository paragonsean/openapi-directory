/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The SubscriptionPhase model module.
 * @module model/SubscriptionPhase
 * @version 2.0
 */
class SubscriptionPhase {
    /**
     * Constructs a new <code>SubscriptionPhase</code>.
     * Describes a phase in a subscription plan. For more information, see [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).
     * @alias module:model/SubscriptionPhase
     * @param cadence {String} The billing cadence of the phase. For example, weekly or monthly. This field cannot be changed after a `SubscriptionPhase` is created.
     * @param recurringPriceMoney {module:model/Money} 
     */
    constructor(cadence, recurringPriceMoney) { 
        
        SubscriptionPhase.initialize(this, cadence, recurringPriceMoney);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cadence, recurringPriceMoney) { 
        obj['cadence'] = cadence;
        obj['recurring_price_money'] = recurringPriceMoney;
    }

    /**
     * Constructs a <code>SubscriptionPhase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionPhase} obj Optional instance to populate.
     * @return {module:model/SubscriptionPhase} The populated <code>SubscriptionPhase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionPhase();

            if (data.hasOwnProperty('cadence')) {
                obj['cadence'] = ApiClient.convertToType(data['cadence'], 'String');
            }
            if (data.hasOwnProperty('ordinal')) {
                obj['ordinal'] = ApiClient.convertToType(data['ordinal'], 'Number');
            }
            if (data.hasOwnProperty('periods')) {
                obj['periods'] = ApiClient.convertToType(data['periods'], 'Number');
            }
            if (data.hasOwnProperty('recurring_price_money')) {
                obj['recurring_price_money'] = Money.constructFromObject(data['recurring_price_money']);
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionPhase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionPhase</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubscriptionPhase.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cadence'] && !(typeof data['cadence'] === 'string' || data['cadence'] instanceof String)) {
            throw new Error("Expected the field `cadence` to be a primitive type in the JSON string but got " + data['cadence']);
        }
        // validate the optional field `recurring_price_money`
        if (data['recurring_price_money']) { // data not null
          Money.validateJSON(data['recurring_price_money']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}

SubscriptionPhase.RequiredProperties = ["cadence", "recurring_price_money"];

/**
 * The billing cadence of the phase. For example, weekly or monthly. This field cannot be changed after a `SubscriptionPhase` is created.
 * @member {String} cadence
 */
SubscriptionPhase.prototype['cadence'] = undefined;

/**
 * The position this phase appears in the sequence of phases defined for the plan, indexed from 0. This field cannot be changed after a `SubscriptionPhase` is created.
 * @member {Number} ordinal
 */
SubscriptionPhase.prototype['ordinal'] = undefined;

/**
 * The number of `cadence`s the phase lasts. If not set, the phase never ends. Only the last phase can be indefinite. This field cannot be changed after a `SubscriptionPhase` is created.
 * @member {Number} periods
 */
SubscriptionPhase.prototype['periods'] = undefined;

/**
 * @member {module:model/Money} recurring_price_money
 */
SubscriptionPhase.prototype['recurring_price_money'] = undefined;

/**
 * The Square-assigned ID of the subscription phase. This field cannot be changed after a `SubscriptionPhase` is created.
 * @member {String} uid
 */
SubscriptionPhase.prototype['uid'] = undefined;






export default SubscriptionPhase;

