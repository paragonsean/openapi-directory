/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogTax model module.
 * @module model/CatalogTax
 * @version 2.0
 */
class CatalogTax {
    /**
     * Constructs a new <code>CatalogTax</code>.
     * A tax applicable to an item.
     * @alias module:model/CatalogTax
     */
    constructor() { 
        
        CatalogTax.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogTax</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogTax} obj Optional instance to populate.
     * @return {module:model/CatalogTax} The populated <code>CatalogTax</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogTax();

            if (data.hasOwnProperty('applies_to_custom_amounts')) {
                obj['applies_to_custom_amounts'] = ApiClient.convertToType(data['applies_to_custom_amounts'], 'Boolean');
            }
            if (data.hasOwnProperty('calculation_phase')) {
                obj['calculation_phase'] = ApiClient.convertToType(data['calculation_phase'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('inclusion_type')) {
                obj['inclusion_type'] = ApiClient.convertToType(data['inclusion_type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('percentage')) {
                obj['percentage'] = ApiClient.convertToType(data['percentage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogTax</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogTax</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['calculation_phase'] && !(typeof data['calculation_phase'] === 'string' || data['calculation_phase'] instanceof String)) {
            throw new Error("Expected the field `calculation_phase` to be a primitive type in the JSON string but got " + data['calculation_phase']);
        }
        // ensure the json data is a string
        if (data['inclusion_type'] && !(typeof data['inclusion_type'] === 'string' || data['inclusion_type'] instanceof String)) {
            throw new Error("Expected the field `inclusion_type` to be a primitive type in the JSON string but got " + data['inclusion_type']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['percentage'] && !(typeof data['percentage'] === 'string' || data['percentage'] instanceof String)) {
            throw new Error("Expected the field `percentage` to be a primitive type in the JSON string but got " + data['percentage']);
        }

        return true;
    }


}



/**
 * If `true`, the fee applies to custom amounts entered into the Square Point of Sale app that are not associated with a particular `CatalogItem`.
 * @member {Boolean} applies_to_custom_amounts
 */
CatalogTax.prototype['applies_to_custom_amounts'] = undefined;

/**
 * Whether the tax is calculated based on a payment's subtotal or total.
 * @member {String} calculation_phase
 */
CatalogTax.prototype['calculation_phase'] = undefined;

/**
 * A Boolean flag to indicate whether the tax is displayed as enabled (`true`) in the Square Point of Sale app or not (`false`).
 * @member {Boolean} enabled
 */
CatalogTax.prototype['enabled'] = undefined;

/**
 * Whether the tax is `ADDITIVE` or `INCLUSIVE`.
 * @member {String} inclusion_type
 */
CatalogTax.prototype['inclusion_type'] = undefined;

/**
 * The tax's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
 * @member {String} name
 */
CatalogTax.prototype['name'] = undefined;

/**
 * The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign. A value of `7.5` corresponds to 7.5%.
 * @member {String} percentage
 */
CatalogTax.prototype['percentage'] = undefined;






export default CatalogTax;

