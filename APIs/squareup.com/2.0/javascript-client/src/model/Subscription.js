/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The Subscription model module.
 * @module model/Subscription
 * @version 2.0
 */
class Subscription {
    /**
     * Constructs a new <code>Subscription</code>.
     * Represents a customer subscription to a subscription plan. For an overview of the &#x60;Subscription&#x60; type, see [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
     * @alias module:model/Subscription
     */
    constructor() { 
        
        Subscription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Subscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Subscription} obj Optional instance to populate.
     * @return {module:model/Subscription} The populated <code>Subscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Subscription();

            if (data.hasOwnProperty('canceled_date')) {
                obj['canceled_date'] = ApiClient.convertToType(data['canceled_date'], 'String');
            }
            if (data.hasOwnProperty('card_id')) {
                obj['card_id'] = ApiClient.convertToType(data['card_id'], 'String');
            }
            if (data.hasOwnProperty('charged_through_date')) {
                obj['charged_through_date'] = ApiClient.convertToType(data['charged_through_date'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('invoice_ids')) {
                obj['invoice_ids'] = ApiClient.convertToType(data['invoice_ids'], ['String']);
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('plan_id')) {
                obj['plan_id'] = ApiClient.convertToType(data['plan_id'], 'String');
            }
            if (data.hasOwnProperty('price_override_money')) {
                obj['price_override_money'] = Money.constructFromObject(data['price_override_money']);
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tax_percentage')) {
                obj['tax_percentage'] = ApiClient.convertToType(data['tax_percentage'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Subscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Subscription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['canceled_date'] && !(typeof data['canceled_date'] === 'string' || data['canceled_date'] instanceof String)) {
            throw new Error("Expected the field `canceled_date` to be a primitive type in the JSON string but got " + data['canceled_date']);
        }
        // ensure the json data is a string
        if (data['card_id'] && !(typeof data['card_id'] === 'string' || data['card_id'] instanceof String)) {
            throw new Error("Expected the field `card_id` to be a primitive type in the JSON string but got " + data['card_id']);
        }
        // ensure the json data is a string
        if (data['charged_through_date'] && !(typeof data['charged_through_date'] === 'string' || data['charged_through_date'] instanceof String)) {
            throw new Error("Expected the field `charged_through_date` to be a primitive type in the JSON string but got " + data['charged_through_date']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['invoice_ids'])) {
            throw new Error("Expected the field `invoice_ids` to be an array in the JSON data but got " + data['invoice_ids']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // ensure the json data is a string
        if (data['plan_id'] && !(typeof data['plan_id'] === 'string' || data['plan_id'] instanceof String)) {
            throw new Error("Expected the field `plan_id` to be a primitive type in the JSON string but got " + data['plan_id']);
        }
        // validate the optional field `price_override_money`
        if (data['price_override_money']) { // data not null
          Money.validateJSON(data['price_override_money']);
        }
        // ensure the json data is a string
        if (data['start_date'] && !(typeof data['start_date'] === 'string' || data['start_date'] instanceof String)) {
            throw new Error("Expected the field `start_date` to be a primitive type in the JSON string but got " + data['start_date']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['tax_percentage'] && !(typeof data['tax_percentage'] === 'string' || data['tax_percentage'] instanceof String)) {
            throw new Error("Expected the field `tax_percentage` to be a primitive type in the JSON string but got " + data['tax_percentage']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }

        return true;
    }


}



/**
 * The subscription cancellation date, in YYYY-MM-DD format (for example, 2013-01-15). On this date, the subscription status changes to `CANCELED` and the subscription billing stops. If you don't set this field, the subscription plan dictates if and when subscription ends.  You cannot update this field, you can only clear it.
 * @member {String} canceled_date
 */
Subscription.prototype['canceled_date'] = undefined;

/**
 * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card) that is charged for the subscription.
 * @member {String} card_id
 */
Subscription.prototype['card_id'] = undefined;

/**
 * The date up to which the customer is invoiced for the subscription, in YYYY-MM-DD format (for example, 2013-01-15).  After the invoice is sent for a given billing period, this date will be the last day of the billing period. For example, suppose for the month of May a customer gets an invoice (or charged the card) on May 1. For the monthly billing scenario, this date is then set to May 31.
 * @member {String} charged_through_date
 */
Subscription.prototype['charged_through_date'] = undefined;

/**
 * The timestamp when the subscription was created, in RFC 3339 format.
 * @member {String} created_at
 */
Subscription.prototype['created_at'] = undefined;

/**
 * The ID of the associated [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.
 * @member {String} customer_id
 */
Subscription.prototype['customer_id'] = undefined;

/**
 * The Square-assigned ID of the subscription.
 * @member {String} id
 */
Subscription.prototype['id'] = undefined;

/**
 * The IDs of the [invoices](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) created for the subscription, listed in order when the invoices were created (oldest invoices appear first).
 * @member {Array.<String>} invoice_ids
 */
Subscription.prototype['invoice_ids'] = undefined;

/**
 * The ID of the location associated with the subscription.
 * @member {String} location_id
 */
Subscription.prototype['location_id'] = undefined;

/**
 * The ID of the associated [subscription plan](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogSubscriptionPlan).
 * @member {String} plan_id
 */
Subscription.prototype['plan_id'] = undefined;

/**
 * @member {module:model/Money} price_override_money
 */
Subscription.prototype['price_override_money'] = undefined;

/**
 * The start date of the subscription, in YYYY-MM-DD format (for example, 2013-01-15).
 * @member {String} start_date
 */
Subscription.prototype['start_date'] = undefined;

/**
 * The current status of the subscription.
 * @member {String} status
 */
Subscription.prototype['status'] = undefined;

/**
 * The tax amount applied when billing the subscription. The percentage is expressed in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign. For example, a value of `7.5` corresponds to 7.5%.
 * @member {String} tax_percentage
 */
Subscription.prototype['tax_percentage'] = undefined;

/**
 * Timezone that will be used in date calculations for the subscription. Defaults to the timezone of the location based on `location_id`. Format: the IANA Timezone Database identifier for the location timezone (for example, `America/Los_Angeles`).
 * @member {String} timezone
 */
Subscription.prototype['timezone'] = undefined;

/**
 * The version of the object. When updating an object, the version supplied must match the version in the database, otherwise the write will be rejected as conflicting.
 * @member {Number} version
 */
Subscription.prototype['version'] = undefined;






export default Subscription;

