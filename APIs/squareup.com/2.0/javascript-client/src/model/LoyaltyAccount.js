/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoyaltyAccountExpiringPointDeadline from './LoyaltyAccountExpiringPointDeadline';
import LoyaltyAccountMapping from './LoyaltyAccountMapping';

/**
 * The LoyaltyAccount model module.
 * @module model/LoyaltyAccount
 * @version 2.0
 */
class LoyaltyAccount {
    /**
     * Constructs a new <code>LoyaltyAccount</code>.
     * Describes a loyalty account. For more information, see [Manage Loyalty Accounts Using the Loyalty API](https://developer.squareup.com/docs/loyalty-api/overview).
     * @alias module:model/LoyaltyAccount
     * @param programId {String} The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) to which the account belongs.
     */
    constructor(programId) { 
        
        LoyaltyAccount.initialize(this, programId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, programId) { 
        obj['program_id'] = programId;
    }

    /**
     * Constructs a <code>LoyaltyAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoyaltyAccount} obj Optional instance to populate.
     * @return {module:model/LoyaltyAccount} The populated <code>LoyaltyAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoyaltyAccount();

            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('enrolled_at')) {
                obj['enrolled_at'] = ApiClient.convertToType(data['enrolled_at'], 'String');
            }
            if (data.hasOwnProperty('expiring_point_deadlines')) {
                obj['expiring_point_deadlines'] = ApiClient.convertToType(data['expiring_point_deadlines'], [LoyaltyAccountExpiringPointDeadline]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lifetime_points')) {
                obj['lifetime_points'] = ApiClient.convertToType(data['lifetime_points'], 'Number');
            }
            if (data.hasOwnProperty('mapping')) {
                obj['mapping'] = LoyaltyAccountMapping.constructFromObject(data['mapping']);
            }
            if (data.hasOwnProperty('program_id')) {
                obj['program_id'] = ApiClient.convertToType(data['program_id'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoyaltyAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoyaltyAccount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LoyaltyAccount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['enrolled_at'] && !(typeof data['enrolled_at'] === 'string' || data['enrolled_at'] instanceof String)) {
            throw new Error("Expected the field `enrolled_at` to be a primitive type in the JSON string but got " + data['enrolled_at']);
        }
        if (data['expiring_point_deadlines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['expiring_point_deadlines'])) {
                throw new Error("Expected the field `expiring_point_deadlines` to be an array in the JSON data but got " + data['expiring_point_deadlines']);
            }
            // validate the optional field `expiring_point_deadlines` (array)
            for (const item of data['expiring_point_deadlines']) {
                LoyaltyAccountExpiringPointDeadline.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `mapping`
        if (data['mapping']) { // data not null
          LoyaltyAccountMapping.validateJSON(data['mapping']);
        }
        // ensure the json data is a string
        if (data['program_id'] && !(typeof data['program_id'] === 'string' || data['program_id'] instanceof String)) {
            throw new Error("Expected the field `program_id` to be a primitive type in the JSON string but got " + data['program_id']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

LoyaltyAccount.RequiredProperties = ["program_id"];

/**
 * The available point balance in the loyalty account. If points are scheduled to expire, they are listed in the `expiring_point_deadlines` field.  Your application should be able to handle loyalty accounts that have a negative point balance (`balance` is less than 0). This might occur if a seller makes a manual adjustment or as a result of a refund or exchange.
 * @member {Number} balance
 */
LoyaltyAccount.prototype['balance'] = undefined;

/**
 * The timestamp when the loyalty account was created, in RFC 3339 format.
 * @member {String} created_at
 */
LoyaltyAccount.prototype['created_at'] = undefined;

/**
 * The Square-assigned ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) that is associated with the account.
 * @member {String} customer_id
 */
LoyaltyAccount.prototype['customer_id'] = undefined;

/**
 * The timestamp when enrollment occurred, in RFC 3339 format.
 * @member {String} enrolled_at
 */
LoyaltyAccount.prototype['enrolled_at'] = undefined;

/**
 * The schedule for when points expire in the loyalty account balance. This field is present only if the account has points that are scheduled to expire.   The total number of points in this field equals the number of points in the `balance` field.
 * @member {Array.<module:model/LoyaltyAccountExpiringPointDeadline>} expiring_point_deadlines
 */
LoyaltyAccount.prototype['expiring_point_deadlines'] = undefined;

/**
 * The Square-assigned ID of the loyalty account.
 * @member {String} id
 */
LoyaltyAccount.prototype['id'] = undefined;

/**
 * The total points accrued during the lifetime of the account.
 * @member {Number} lifetime_points
 */
LoyaltyAccount.prototype['lifetime_points'] = undefined;

/**
 * @member {module:model/LoyaltyAccountMapping} mapping
 */
LoyaltyAccount.prototype['mapping'] = undefined;

/**
 * The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) to which the account belongs.
 * @member {String} program_id
 */
LoyaltyAccount.prototype['program_id'] = undefined;

/**
 * The timestamp when the loyalty account was last updated, in RFC 3339 format.
 * @member {String} updated_at
 */
LoyaltyAccount.prototype['updated_at'] = undefined;






export default LoyaltyAccount;

