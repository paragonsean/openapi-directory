/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The OrderLineItemAppliedTax model module.
 * @module model/OrderLineItemAppliedTax
 * @version 2.0
 */
class OrderLineItemAppliedTax {
    /**
     * Constructs a new <code>OrderLineItemAppliedTax</code>.
     * Represents an applied portion of a tax to a line item in an order.  Order-scoped taxes automatically include the applied taxes in each line item. Line item taxes must be referenced from any applicable line items. The corresponding applied money is automatically computed, based on the set of participating line items.
     * @alias module:model/OrderLineItemAppliedTax
     * @param taxUid {String} The `uid` of the tax for which this applied tax represents. It must reference a tax present in the `order.taxes` field.  This field is immutable. To change which taxes apply to a line item, delete and add a new `OrderLineItemAppliedTax`.
     */
    constructor(taxUid) { 
        
        OrderLineItemAppliedTax.initialize(this, taxUid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, taxUid) { 
        obj['tax_uid'] = taxUid;
    }

    /**
     * Constructs a <code>OrderLineItemAppliedTax</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderLineItemAppliedTax} obj Optional instance to populate.
     * @return {module:model/OrderLineItemAppliedTax} The populated <code>OrderLineItemAppliedTax</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderLineItemAppliedTax();

            if (data.hasOwnProperty('applied_money')) {
                obj['applied_money'] = Money.constructFromObject(data['applied_money']);
            }
            if (data.hasOwnProperty('tax_uid')) {
                obj['tax_uid'] = ApiClient.convertToType(data['tax_uid'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderLineItemAppliedTax</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderLineItemAppliedTax</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderLineItemAppliedTax.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `applied_money`
        if (data['applied_money']) { // data not null
          Money.validateJSON(data['applied_money']);
        }
        // ensure the json data is a string
        if (data['tax_uid'] && !(typeof data['tax_uid'] === 'string' || data['tax_uid'] instanceof String)) {
            throw new Error("Expected the field `tax_uid` to be a primitive type in the JSON string but got " + data['tax_uid']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}

OrderLineItemAppliedTax.RequiredProperties = ["tax_uid"];

/**
 * @member {module:model/Money} applied_money
 */
OrderLineItemAppliedTax.prototype['applied_money'] = undefined;

/**
 * The `uid` of the tax for which this applied tax represents. It must reference a tax present in the `order.taxes` field.  This field is immutable. To change which taxes apply to a line item, delete and add a new `OrderLineItemAppliedTax`.
 * @member {String} tax_uid
 */
OrderLineItemAppliedTax.prototype['tax_uid'] = undefined;

/**
 * A unique ID that identifies the applied tax only within this order.
 * @member {String} uid
 */
OrderLineItemAppliedTax.prototype['uid'] = undefined;






export default OrderLineItemAppliedTax;

