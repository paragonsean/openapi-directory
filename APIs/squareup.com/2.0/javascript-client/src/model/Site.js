/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Site model module.
 * @module model/Site
 * @version 2.0
 */
class Site {
    /**
     * Constructs a new <code>Site</code>.
     * Represents a Square Online site, which is an online store for a Square seller.
     * @alias module:model/Site
     */
    constructor() { 
        
        Site.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Site</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Site} obj Optional instance to populate.
     * @return {module:model/Site} The populated <code>Site</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Site();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_published')) {
                obj['is_published'] = ApiClient.convertToType(data['is_published'], 'Boolean');
            }
            if (data.hasOwnProperty('site_title')) {
                obj['site_title'] = ApiClient.convertToType(data['site_title'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Site</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Site</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['site_title'] && !(typeof data['site_title'] === 'string' || data['site_title'] instanceof String)) {
            throw new Error("Expected the field `site_title` to be a primitive type in the JSON string but got " + data['site_title']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * The timestamp of when the site was created, in RFC 3339 format.
 * @member {String} created_at
 */
Site.prototype['created_at'] = undefined;

/**
 * The domain of the site (without the protocol). For example, `mysite1.square.site`.
 * @member {String} domain
 */
Site.prototype['domain'] = undefined;

/**
 * The Square-assigned ID of the site.
 * @member {String} id
 */
Site.prototype['id'] = undefined;

/**
 * Indicates whether the site is published.
 * @member {Boolean} is_published
 */
Site.prototype['is_published'] = undefined;

/**
 * The title of the site.
 * @member {String} site_title
 */
Site.prototype['site_title'] = undefined;

/**
 * The timestamp of when the site was last updated, in RFC 3339 format.
 * @member {String} updated_at
 */
Site.prototype['updated_at'] = undefined;






export default Site;

