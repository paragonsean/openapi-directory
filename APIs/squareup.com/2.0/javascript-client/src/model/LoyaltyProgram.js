/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoyaltyProgramAccrualRule from './LoyaltyProgramAccrualRule';
import LoyaltyProgramExpirationPolicy from './LoyaltyProgramExpirationPolicy';
import LoyaltyProgramRewardTier from './LoyaltyProgramRewardTier';
import LoyaltyProgramTerminology from './LoyaltyProgramTerminology';

/**
 * The LoyaltyProgram model module.
 * @module model/LoyaltyProgram
 * @version 2.0
 */
class LoyaltyProgram {
    /**
     * Constructs a new <code>LoyaltyProgram</code>.
     * Represents a Square loyalty program. Loyalty programs define how buyers can earn points and redeem points for rewards.  Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard.  For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
     * @alias module:model/LoyaltyProgram
     * @param accrualRules {Array.<module:model/LoyaltyProgramAccrualRule>} Defines how buyers can earn loyalty points.
     * @param createdAt {String} The timestamp when the program was created, in RFC 3339 format.
     * @param id {String} The Square-assigned ID of the loyalty program. Updates to  the loyalty program do not modify the identifier.
     * @param locationIds {Array.<String>} The [locations](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) at which the program is active.
     * @param rewardTiers {Array.<module:model/LoyaltyProgramRewardTier>} The list of rewards for buyers, sorted by ascending points.
     * @param status {String} Whether the program is currently active.
     * @param terminology {module:model/LoyaltyProgramTerminology} 
     * @param updatedAt {String} The timestamp when the reward was last updated, in RFC 3339 format.
     */
    constructor(accrualRules, createdAt, id, locationIds, rewardTiers, status, terminology, updatedAt) { 
        
        LoyaltyProgram.initialize(this, accrualRules, createdAt, id, locationIds, rewardTiers, status, terminology, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accrualRules, createdAt, id, locationIds, rewardTiers, status, terminology, updatedAt) { 
        obj['accrual_rules'] = accrualRules;
        obj['created_at'] = createdAt;
        obj['id'] = id;
        obj['location_ids'] = locationIds;
        obj['reward_tiers'] = rewardTiers;
        obj['status'] = status;
        obj['terminology'] = terminology;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>LoyaltyProgram</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoyaltyProgram} obj Optional instance to populate.
     * @return {module:model/LoyaltyProgram} The populated <code>LoyaltyProgram</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoyaltyProgram();

            if (data.hasOwnProperty('accrual_rules')) {
                obj['accrual_rules'] = ApiClient.convertToType(data['accrual_rules'], [LoyaltyProgramAccrualRule]);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('expiration_policy')) {
                obj['expiration_policy'] = LoyaltyProgramExpirationPolicy.constructFromObject(data['expiration_policy']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location_ids')) {
                obj['location_ids'] = ApiClient.convertToType(data['location_ids'], ['String']);
            }
            if (data.hasOwnProperty('reward_tiers')) {
                obj['reward_tiers'] = ApiClient.convertToType(data['reward_tiers'], [LoyaltyProgramRewardTier]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('terminology')) {
                obj['terminology'] = LoyaltyProgramTerminology.constructFromObject(data['terminology']);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoyaltyProgram</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoyaltyProgram</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LoyaltyProgram.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['accrual_rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accrual_rules'])) {
                throw new Error("Expected the field `accrual_rules` to be an array in the JSON data but got " + data['accrual_rules']);
            }
            // validate the optional field `accrual_rules` (array)
            for (const item of data['accrual_rules']) {
                LoyaltyProgramAccrualRule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // validate the optional field `expiration_policy`
        if (data['expiration_policy']) { // data not null
          LoyaltyProgramExpirationPolicy.validateJSON(data['expiration_policy']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['location_ids'])) {
            throw new Error("Expected the field `location_ids` to be an array in the JSON data but got " + data['location_ids']);
        }
        if (data['reward_tiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reward_tiers'])) {
                throw new Error("Expected the field `reward_tiers` to be an array in the JSON data but got " + data['reward_tiers']);
            }
            // validate the optional field `reward_tiers` (array)
            for (const item of data['reward_tiers']) {
                LoyaltyProgramRewardTier.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `terminology`
        if (data['terminology']) { // data not null
          LoyaltyProgramTerminology.validateJSON(data['terminology']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

LoyaltyProgram.RequiredProperties = ["accrual_rules", "created_at", "id", "location_ids", "reward_tiers", "status", "terminology", "updated_at"];

/**
 * Defines how buyers can earn loyalty points.
 * @member {Array.<module:model/LoyaltyProgramAccrualRule>} accrual_rules
 */
LoyaltyProgram.prototype['accrual_rules'] = undefined;

/**
 * The timestamp when the program was created, in RFC 3339 format.
 * @member {String} created_at
 */
LoyaltyProgram.prototype['created_at'] = undefined;

/**
 * @member {module:model/LoyaltyProgramExpirationPolicy} expiration_policy
 */
LoyaltyProgram.prototype['expiration_policy'] = undefined;

/**
 * The Square-assigned ID of the loyalty program. Updates to  the loyalty program do not modify the identifier.
 * @member {String} id
 */
LoyaltyProgram.prototype['id'] = undefined;

/**
 * The [locations](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) at which the program is active.
 * @member {Array.<String>} location_ids
 */
LoyaltyProgram.prototype['location_ids'] = undefined;

/**
 * The list of rewards for buyers, sorted by ascending points.
 * @member {Array.<module:model/LoyaltyProgramRewardTier>} reward_tiers
 */
LoyaltyProgram.prototype['reward_tiers'] = undefined;

/**
 * Whether the program is currently active.
 * @member {String} status
 */
LoyaltyProgram.prototype['status'] = undefined;

/**
 * @member {module:model/LoyaltyProgramTerminology} terminology
 */
LoyaltyProgram.prototype['terminology'] = undefined;

/**
 * The timestamp when the reward was last updated, in RFC 3339 format.
 * @member {String} updated_at
 */
LoyaltyProgram.prototype['updated_at'] = undefined;






export default LoyaltyProgram;

