/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogCategory from './CatalogCategory';
import CatalogCustomAttributeDefinition from './CatalogCustomAttributeDefinition';
import CatalogCustomAttributeValue from './CatalogCustomAttributeValue';
import CatalogDiscount from './CatalogDiscount';
import CatalogImage from './CatalogImage';
import CatalogItem from './CatalogItem';
import CatalogItemOption from './CatalogItemOption';
import CatalogItemOptionValue from './CatalogItemOptionValue';
import CatalogItemVariation from './CatalogItemVariation';
import CatalogMeasurementUnit from './CatalogMeasurementUnit';
import CatalogModifier from './CatalogModifier';
import CatalogModifierList from './CatalogModifierList';
import CatalogPricingRule from './CatalogPricingRule';
import CatalogProductSet from './CatalogProductSet';
import CatalogQuickAmountsSettings from './CatalogQuickAmountsSettings';
import CatalogSubscriptionPlan from './CatalogSubscriptionPlan';
import CatalogTax from './CatalogTax';
import CatalogTimePeriod from './CatalogTimePeriod';
import CatalogV1Id from './CatalogV1Id';

/**
 * The CatalogObject model module.
 * @module model/CatalogObject
 * @version 2.0
 */
class CatalogObject {
    /**
     * Constructs a new <code>CatalogObject</code>.
     * The wrapper object for the Catalog entries of a given object type.  The type of a particular &#x60;CatalogObject&#x60; is determined by the value of the &#x60;type&#x60; attribute and only the corresponding data attribute can be set on the &#x60;CatalogObject&#x60; instance. For example, the following list shows some instances of &#x60;CatalogObject&#x60; of a given &#x60;type&#x60; and their corresponding data attribute that can be set: - For a &#x60;CatalogObject&#x60; of the &#x60;ITEM&#x60; type, set the &#x60;item_data&#x60; attribute to yield the &#x60;CatalogItem&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;ITEM_VARIATION&#x60; type, set the &#x60;item_variation_data&#x60; attribute to yield the &#x60;CatalogItemVariation&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;MODIFIER&#x60; type, set the &#x60;modifier_data&#x60; attribute to yield the &#x60;CatalogModifier&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;MODIFIER_LIST&#x60; type, set the &#x60;modifier_list_data&#x60; attribute to yield the &#x60;CatalogModifierList&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;CATEGORY&#x60; type, set the &#x60;category_data&#x60; attribute to yield the &#x60;CatalogCategory&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;DISCOUNT&#x60; type, set the &#x60;discount_data&#x60; attribute to yield the &#x60;CatalogDiscount&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;TAX&#x60; type, set the &#x60;tax_data&#x60; attribute to yield the &#x60;CatalogTax&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;IMAGE&#x60; type, set the &#x60;image_data&#x60; attribute to yield the &#x60;CatalogImageData&#x60;  object. - For a &#x60;CatalogObject&#x60; of the &#x60;QUICK_AMOUNTS_SETTINGS&#x60; type, set the &#x60;quick_amounts_settings_data&#x60; attribute to yield the &#x60;CatalogQuickAmountsSettings&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;PRICING_RULE&#x60; type, set the &#x60;pricing_rule_data&#x60; attribute to yield the &#x60;CatalogPricingRule&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;TIME_PERIOD&#x60; type, set the &#x60;time_period_data&#x60; attribute to yield the &#x60;CatalogTimePeriod&#x60; object. - For a &#x60;CatalogObject&#x60; of the &#x60;PRODUCT_SET&#x60; type, set the &#x60;product_set_data&#x60; attribute to yield the &#x60;CatalogProductSet&#x60;  object. - For a &#x60;CatalogObject&#x60; of the &#x60;SUBSCRIPTION_PLAN&#x60; type, set the &#x60;subscription_plan_data&#x60; attribute to yield the &#x60;CatalogSubscriptionPlan&#x60; object.   For a more detailed discussion of the Catalog data model, please see the [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.
     * @alias module:model/CatalogObject
     * @param id {String} An identifier to reference this object in the catalog. When a new `CatalogObject` is inserted, the client should set the id to a temporary identifier starting with a \"`#`\" character. Other objects being inserted or updated within the same request may use this identifier to refer to the new object.  When the server receives the new object, it will supply a unique identifier that replaces the temporary identifier for all future references.
     * @param type {String} The type of this object. Each object type has expected properties expressed in a structured format within its corresponding `*_data` field below.
     */
    constructor(id, type) { 
        
        CatalogObject.initialize(this, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type) { 
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CatalogObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogObject} obj Optional instance to populate.
     * @return {module:model/CatalogObject} The populated <code>CatalogObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogObject();

            if (data.hasOwnProperty('absent_at_location_ids')) {
                obj['absent_at_location_ids'] = ApiClient.convertToType(data['absent_at_location_ids'], ['String']);
            }
            if (data.hasOwnProperty('catalog_v1_ids')) {
                obj['catalog_v1_ids'] = ApiClient.convertToType(data['catalog_v1_ids'], [CatalogV1Id]);
            }
            if (data.hasOwnProperty('category_data')) {
                obj['category_data'] = CatalogCategory.constructFromObject(data['category_data']);
            }
            if (data.hasOwnProperty('custom_attribute_definition_data')) {
                obj['custom_attribute_definition_data'] = CatalogCustomAttributeDefinition.constructFromObject(data['custom_attribute_definition_data']);
            }
            if (data.hasOwnProperty('custom_attribute_values')) {
                obj['custom_attribute_values'] = ApiClient.convertToType(data['custom_attribute_values'], {'String': CatalogCustomAttributeValue});
            }
            if (data.hasOwnProperty('discount_data')) {
                obj['discount_data'] = CatalogDiscount.constructFromObject(data['discount_data']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image_data')) {
                obj['image_data'] = CatalogImage.constructFromObject(data['image_data']);
            }
            if (data.hasOwnProperty('image_id')) {
                obj['image_id'] = ApiClient.convertToType(data['image_id'], 'String');
            }
            if (data.hasOwnProperty('is_deleted')) {
                obj['is_deleted'] = ApiClient.convertToType(data['is_deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('item_data')) {
                obj['item_data'] = CatalogItem.constructFromObject(data['item_data']);
            }
            if (data.hasOwnProperty('item_option_data')) {
                obj['item_option_data'] = CatalogItemOption.constructFromObject(data['item_option_data']);
            }
            if (data.hasOwnProperty('item_option_value_data')) {
                obj['item_option_value_data'] = CatalogItemOptionValue.constructFromObject(data['item_option_value_data']);
            }
            if (data.hasOwnProperty('item_variation_data')) {
                obj['item_variation_data'] = CatalogItemVariation.constructFromObject(data['item_variation_data']);
            }
            if (data.hasOwnProperty('measurement_unit_data')) {
                obj['measurement_unit_data'] = CatalogMeasurementUnit.constructFromObject(data['measurement_unit_data']);
            }
            if (data.hasOwnProperty('modifier_data')) {
                obj['modifier_data'] = CatalogModifier.constructFromObject(data['modifier_data']);
            }
            if (data.hasOwnProperty('modifier_list_data')) {
                obj['modifier_list_data'] = CatalogModifierList.constructFromObject(data['modifier_list_data']);
            }
            if (data.hasOwnProperty('present_at_all_locations')) {
                obj['present_at_all_locations'] = ApiClient.convertToType(data['present_at_all_locations'], 'Boolean');
            }
            if (data.hasOwnProperty('present_at_location_ids')) {
                obj['present_at_location_ids'] = ApiClient.convertToType(data['present_at_location_ids'], ['String']);
            }
            if (data.hasOwnProperty('pricing_rule_data')) {
                obj['pricing_rule_data'] = CatalogPricingRule.constructFromObject(data['pricing_rule_data']);
            }
            if (data.hasOwnProperty('product_set_data')) {
                obj['product_set_data'] = CatalogProductSet.constructFromObject(data['product_set_data']);
            }
            if (data.hasOwnProperty('quick_amounts_settings_data')) {
                obj['quick_amounts_settings_data'] = CatalogQuickAmountsSettings.constructFromObject(data['quick_amounts_settings_data']);
            }
            if (data.hasOwnProperty('subscription_plan_data')) {
                obj['subscription_plan_data'] = CatalogSubscriptionPlan.constructFromObject(data['subscription_plan_data']);
            }
            if (data.hasOwnProperty('tax_data')) {
                obj['tax_data'] = CatalogTax.constructFromObject(data['tax_data']);
            }
            if (data.hasOwnProperty('time_period_data')) {
                obj['time_period_data'] = CatalogTimePeriod.constructFromObject(data['time_period_data']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['absent_at_location_ids'])) {
            throw new Error("Expected the field `absent_at_location_ids` to be an array in the JSON data but got " + data['absent_at_location_ids']);
        }
        if (data['catalog_v1_ids']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['catalog_v1_ids'])) {
                throw new Error("Expected the field `catalog_v1_ids` to be an array in the JSON data but got " + data['catalog_v1_ids']);
            }
            // validate the optional field `catalog_v1_ids` (array)
            for (const item of data['catalog_v1_ids']) {
                CatalogV1Id.validateJSON(item);
            };
        }
        // validate the optional field `category_data`
        if (data['category_data']) { // data not null
          CatalogCategory.validateJSON(data['category_data']);
        }
        // validate the optional field `custom_attribute_definition_data`
        if (data['custom_attribute_definition_data']) { // data not null
          CatalogCustomAttributeDefinition.validateJSON(data['custom_attribute_definition_data']);
        }
        // validate the optional field `discount_data`
        if (data['discount_data']) { // data not null
          CatalogDiscount.validateJSON(data['discount_data']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `image_data`
        if (data['image_data']) { // data not null
          CatalogImage.validateJSON(data['image_data']);
        }
        // ensure the json data is a string
        if (data['image_id'] && !(typeof data['image_id'] === 'string' || data['image_id'] instanceof String)) {
            throw new Error("Expected the field `image_id` to be a primitive type in the JSON string but got " + data['image_id']);
        }
        // validate the optional field `item_data`
        if (data['item_data']) { // data not null
          CatalogItem.validateJSON(data['item_data']);
        }
        // validate the optional field `item_option_data`
        if (data['item_option_data']) { // data not null
          CatalogItemOption.validateJSON(data['item_option_data']);
        }
        // validate the optional field `item_option_value_data`
        if (data['item_option_value_data']) { // data not null
          CatalogItemOptionValue.validateJSON(data['item_option_value_data']);
        }
        // validate the optional field `item_variation_data`
        if (data['item_variation_data']) { // data not null
          CatalogItemVariation.validateJSON(data['item_variation_data']);
        }
        // validate the optional field `measurement_unit_data`
        if (data['measurement_unit_data']) { // data not null
          CatalogMeasurementUnit.validateJSON(data['measurement_unit_data']);
        }
        // validate the optional field `modifier_data`
        if (data['modifier_data']) { // data not null
          CatalogModifier.validateJSON(data['modifier_data']);
        }
        // validate the optional field `modifier_list_data`
        if (data['modifier_list_data']) { // data not null
          CatalogModifierList.validateJSON(data['modifier_list_data']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['present_at_location_ids'])) {
            throw new Error("Expected the field `present_at_location_ids` to be an array in the JSON data but got " + data['present_at_location_ids']);
        }
        // validate the optional field `pricing_rule_data`
        if (data['pricing_rule_data']) { // data not null
          CatalogPricingRule.validateJSON(data['pricing_rule_data']);
        }
        // validate the optional field `product_set_data`
        if (data['product_set_data']) { // data not null
          CatalogProductSet.validateJSON(data['product_set_data']);
        }
        // validate the optional field `quick_amounts_settings_data`
        if (data['quick_amounts_settings_data']) { // data not null
          CatalogQuickAmountsSettings.validateJSON(data['quick_amounts_settings_data']);
        }
        // validate the optional field `subscription_plan_data`
        if (data['subscription_plan_data']) { // data not null
          CatalogSubscriptionPlan.validateJSON(data['subscription_plan_data']);
        }
        // validate the optional field `tax_data`
        if (data['tax_data']) { // data not null
          CatalogTax.validateJSON(data['tax_data']);
        }
        // validate the optional field `time_period_data`
        if (data['time_period_data']) { // data not null
          CatalogTimePeriod.validateJSON(data['time_period_data']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

CatalogObject.RequiredProperties = ["id", "type"];

/**
 * A list of locations where the object is not present, even if `present_at_all_locations` is `true`. This can include locations that are deactivated.
 * @member {Array.<String>} absent_at_location_ids
 */
CatalogObject.prototype['absent_at_location_ids'] = undefined;

/**
 * The Connect v1 IDs for this object at each location where it is present, where they differ from the object's Connect V2 ID. The field will only be present for objects that have been created or modified by legacy APIs.
 * @member {Array.<module:model/CatalogV1Id>} catalog_v1_ids
 */
CatalogObject.prototype['catalog_v1_ids'] = undefined;

/**
 * @member {module:model/CatalogCategory} category_data
 */
CatalogObject.prototype['category_data'] = undefined;

/**
 * @member {module:model/CatalogCustomAttributeDefinition} custom_attribute_definition_data
 */
CatalogObject.prototype['custom_attribute_definition_data'] = undefined;

/**
 * A map (key-value pairs) of application-defined custom attribute values. The value of a key-value pair is a [CatalogCustomAttributeValue](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeValue) object. The key is the `key` attribute value defined in the associated [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition) object defined by the application making the request.  If the `CatalogCustomAttributeDefinition` object is defined by another application, the `CatalogCustomAttributeDefinition`'s key attribute value is prefixed by the defining application ID. For example, if the `CatalogCustomAttributeDefinition` has a `key` attribute of `\"cocoa_brand\"` and the defining application ID is `\"abcd1234\"`, the key in the map is `\"abcd1234:cocoa_brand\"` if the application making the request is different from the application defining the custom attribute definition. Otherwise, the key used in the map is simply `\"cocoa_brand\"`.  Application-defined custom attributes that are set at a global (location-independent) level. Custom attribute values are intended to store additional information about a catalog object or associations with an entity in another system. Do not use custom attributes to store any sensitive information (personally identifiable information, card details, etc.).
 * @member {Object.<String, module:model/CatalogCustomAttributeValue>} custom_attribute_values
 */
CatalogObject.prototype['custom_attribute_values'] = undefined;

/**
 * @member {module:model/CatalogDiscount} discount_data
 */
CatalogObject.prototype['discount_data'] = undefined;

/**
 * An identifier to reference this object in the catalog. When a new `CatalogObject` is inserted, the client should set the id to a temporary identifier starting with a \"`#`\" character. Other objects being inserted or updated within the same request may use this identifier to refer to the new object.  When the server receives the new object, it will supply a unique identifier that replaces the temporary identifier for all future references.
 * @member {String} id
 */
CatalogObject.prototype['id'] = undefined;

/**
 * @member {module:model/CatalogImage} image_data
 */
CatalogObject.prototype['image_data'] = undefined;

/**
 * Identifies the `CatalogImage` attached to this `CatalogObject`.
 * @member {String} image_id
 */
CatalogObject.prototype['image_id'] = undefined;

/**
 * If `true`, the object has been deleted from the database. Must be `false` for new objects being inserted. When deleted, the `updated_at` field will equal the deletion time.
 * @member {Boolean} is_deleted
 */
CatalogObject.prototype['is_deleted'] = undefined;

/**
 * @member {module:model/CatalogItem} item_data
 */
CatalogObject.prototype['item_data'] = undefined;

/**
 * @member {module:model/CatalogItemOption} item_option_data
 */
CatalogObject.prototype['item_option_data'] = undefined;

/**
 * @member {module:model/CatalogItemOptionValue} item_option_value_data
 */
CatalogObject.prototype['item_option_value_data'] = undefined;

/**
 * @member {module:model/CatalogItemVariation} item_variation_data
 */
CatalogObject.prototype['item_variation_data'] = undefined;

/**
 * @member {module:model/CatalogMeasurementUnit} measurement_unit_data
 */
CatalogObject.prototype['measurement_unit_data'] = undefined;

/**
 * @member {module:model/CatalogModifier} modifier_data
 */
CatalogObject.prototype['modifier_data'] = undefined;

/**
 * @member {module:model/CatalogModifierList} modifier_list_data
 */
CatalogObject.prototype['modifier_list_data'] = undefined;

/**
 * If `true`, this object is present at all locations (including future locations), except where specified in the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations), except where specified in the `present_at_location_ids` field. If not specified, defaults to `true`.
 * @member {Boolean} present_at_all_locations
 */
CatalogObject.prototype['present_at_all_locations'] = undefined;

/**
 * A list of locations where the object is present, even if `present_at_all_locations` is `false`. This can include locations that are deactivated.
 * @member {Array.<String>} present_at_location_ids
 */
CatalogObject.prototype['present_at_location_ids'] = undefined;

/**
 * @member {module:model/CatalogPricingRule} pricing_rule_data
 */
CatalogObject.prototype['pricing_rule_data'] = undefined;

/**
 * @member {module:model/CatalogProductSet} product_set_data
 */
CatalogObject.prototype['product_set_data'] = undefined;

/**
 * @member {module:model/CatalogQuickAmountsSettings} quick_amounts_settings_data
 */
CatalogObject.prototype['quick_amounts_settings_data'] = undefined;

/**
 * @member {module:model/CatalogSubscriptionPlan} subscription_plan_data
 */
CatalogObject.prototype['subscription_plan_data'] = undefined;

/**
 * @member {module:model/CatalogTax} tax_data
 */
CatalogObject.prototype['tax_data'] = undefined;

/**
 * @member {module:model/CatalogTimePeriod} time_period_data
 */
CatalogObject.prototype['time_period_data'] = undefined;

/**
 * The type of this object. Each object type has expected properties expressed in a structured format within its corresponding `*_data` field below.
 * @member {String} type
 */
CatalogObject.prototype['type'] = undefined;

/**
 * Last modification [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) in RFC 3339 format, e.g., `\"2016-08-15T23:59:33.123Z\"` would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.
 * @member {String} updated_at
 */
CatalogObject.prototype['updated_at'] = undefined;

/**
 * The version of the object. When updating an object, the version supplied must match the version in the database, otherwise the write will be rejected as conflicting.
 * @member {Number} version
 */
CatalogObject.prototype['version'] = undefined;






export default CatalogObject;

