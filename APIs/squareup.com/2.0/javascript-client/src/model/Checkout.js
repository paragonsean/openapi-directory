/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalRecipient from './AdditionalRecipient';
import Address from './Address';
import Order from './Order';

/**
 * The Checkout model module.
 * @module model/Checkout
 * @version 2.0
 */
class Checkout {
    /**
     * Constructs a new <code>Checkout</code>.
     * Square Checkout lets merchants accept online payments for supported payment types using a checkout workflow hosted on squareup.com.
     * @alias module:model/Checkout
     */
    constructor() { 
        
        Checkout.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Checkout</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Checkout} obj Optional instance to populate.
     * @return {module:model/Checkout} The populated <code>Checkout</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Checkout();

            if (data.hasOwnProperty('additional_recipients')) {
                obj['additional_recipients'] = ApiClient.convertToType(data['additional_recipients'], [AdditionalRecipient]);
            }
            if (data.hasOwnProperty('ask_for_shipping_address')) {
                obj['ask_for_shipping_address'] = ApiClient.convertToType(data['ask_for_shipping_address'], 'Boolean');
            }
            if (data.hasOwnProperty('checkout_page_url')) {
                obj['checkout_page_url'] = ApiClient.convertToType(data['checkout_page_url'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('merchant_support_email')) {
                obj['merchant_support_email'] = ApiClient.convertToType(data['merchant_support_email'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = Order.constructFromObject(data['order']);
            }
            if (data.hasOwnProperty('pre_populate_buyer_email')) {
                obj['pre_populate_buyer_email'] = ApiClient.convertToType(data['pre_populate_buyer_email'], 'String');
            }
            if (data.hasOwnProperty('pre_populate_shipping_address')) {
                obj['pre_populate_shipping_address'] = Address.constructFromObject(data['pre_populate_shipping_address']);
            }
            if (data.hasOwnProperty('redirect_url')) {
                obj['redirect_url'] = ApiClient.convertToType(data['redirect_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Checkout</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Checkout</code>.
     */
    static validateJSON(data) {
        if (data['additional_recipients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additional_recipients'])) {
                throw new Error("Expected the field `additional_recipients` to be an array in the JSON data but got " + data['additional_recipients']);
            }
            // validate the optional field `additional_recipients` (array)
            for (const item of data['additional_recipients']) {
                AdditionalRecipient.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['checkout_page_url'] && !(typeof data['checkout_page_url'] === 'string' || data['checkout_page_url'] instanceof String)) {
            throw new Error("Expected the field `checkout_page_url` to be a primitive type in the JSON string but got " + data['checkout_page_url']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['merchant_support_email'] && !(typeof data['merchant_support_email'] === 'string' || data['merchant_support_email'] instanceof String)) {
            throw new Error("Expected the field `merchant_support_email` to be a primitive type in the JSON string but got " + data['merchant_support_email']);
        }
        // validate the optional field `order`
        if (data['order']) { // data not null
          Order.validateJSON(data['order']);
        }
        // ensure the json data is a string
        if (data['pre_populate_buyer_email'] && !(typeof data['pre_populate_buyer_email'] === 'string' || data['pre_populate_buyer_email'] instanceof String)) {
            throw new Error("Expected the field `pre_populate_buyer_email` to be a primitive type in the JSON string but got " + data['pre_populate_buyer_email']);
        }
        // validate the optional field `pre_populate_shipping_address`
        if (data['pre_populate_shipping_address']) { // data not null
          Address.validateJSON(data['pre_populate_shipping_address']);
        }
        // ensure the json data is a string
        if (data['redirect_url'] && !(typeof data['redirect_url'] === 'string' || data['redirect_url'] instanceof String)) {
            throw new Error("Expected the field `redirect_url` to be a primitive type in the JSON string but got " + data['redirect_url']);
        }

        return true;
    }


}



/**
 * Additional recipients (other than the merchant) receiving a portion of this checkout. For example, fees assessed on the purchase by a third party integration.
 * @member {Array.<module:model/AdditionalRecipient>} additional_recipients
 */
Checkout.prototype['additional_recipients'] = undefined;

/**
 * If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: `false`.
 * @member {Boolean} ask_for_shipping_address
 */
Checkout.prototype['ask_for_shipping_address'] = undefined;

/**
 * The URL that the buyer's browser should be redirected to after the checkout is completed.
 * @member {String} checkout_page_url
 */
Checkout.prototype['checkout_page_url'] = undefined;

/**
 * The time when the checkout was created, in RFC 3339 format.
 * @member {String} created_at
 */
Checkout.prototype['created_at'] = undefined;

/**
 * ID generated by Square Checkout when a new checkout is requested.
 * @member {String} id
 */
Checkout.prototype['id'] = undefined;

/**
 * The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default: none; only exists if explicitly set.
 * @member {String} merchant_support_email
 */
Checkout.prototype['merchant_support_email'] = undefined;

/**
 * @member {module:model/Order} order
 */
Checkout.prototype['order'] = undefined;

/**
 * If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.
 * @member {String} pre_populate_buyer_email
 */
Checkout.prototype['pre_populate_buyer_email'] = undefined;

/**
 * @member {module:model/Address} pre_populate_shipping_address
 */
Checkout.prototype['pre_populate_shipping_address'] = undefined;

/**
 * The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  <pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.
 * @member {String} redirect_url
 */
Checkout.prototype['redirect_url'] = undefined;






export default Checkout;

