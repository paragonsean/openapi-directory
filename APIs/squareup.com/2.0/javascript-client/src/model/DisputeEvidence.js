/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DisputeEvidenceFile from './DisputeEvidenceFile';

/**
 * The DisputeEvidence model module.
 * @module model/DisputeEvidence
 * @version 2.0
 */
class DisputeEvidence {
    /**
     * Constructs a new <code>DisputeEvidence</code>.
     * 
     * @alias module:model/DisputeEvidence
     */
    constructor() { 
        
        DisputeEvidence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DisputeEvidence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DisputeEvidence} obj Optional instance to populate.
     * @return {module:model/DisputeEvidence} The populated <code>DisputeEvidence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DisputeEvidence();

            if (data.hasOwnProperty('dispute_id')) {
                obj['dispute_id'] = ApiClient.convertToType(data['dispute_id'], 'String');
            }
            if (data.hasOwnProperty('evidence_file')) {
                obj['evidence_file'] = DisputeEvidenceFile.constructFromObject(data['evidence_file']);
            }
            if (data.hasOwnProperty('evidence_id')) {
                obj['evidence_id'] = ApiClient.convertToType(data['evidence_id'], 'String');
            }
            if (data.hasOwnProperty('evidence_text')) {
                obj['evidence_text'] = ApiClient.convertToType(data['evidence_text'], 'String');
            }
            if (data.hasOwnProperty('evidence_type')) {
                obj['evidence_type'] = ApiClient.convertToType(data['evidence_type'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('uploaded_at')) {
                obj['uploaded_at'] = ApiClient.convertToType(data['uploaded_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DisputeEvidence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DisputeEvidence</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dispute_id'] && !(typeof data['dispute_id'] === 'string' || data['dispute_id'] instanceof String)) {
            throw new Error("Expected the field `dispute_id` to be a primitive type in the JSON string but got " + data['dispute_id']);
        }
        // validate the optional field `evidence_file`
        if (data['evidence_file']) { // data not null
          DisputeEvidenceFile.validateJSON(data['evidence_file']);
        }
        // ensure the json data is a string
        if (data['evidence_id'] && !(typeof data['evidence_id'] === 'string' || data['evidence_id'] instanceof String)) {
            throw new Error("Expected the field `evidence_id` to be a primitive type in the JSON string but got " + data['evidence_id']);
        }
        // ensure the json data is a string
        if (data['evidence_text'] && !(typeof data['evidence_text'] === 'string' || data['evidence_text'] instanceof String)) {
            throw new Error("Expected the field `evidence_text` to be a primitive type in the JSON string but got " + data['evidence_text']);
        }
        // ensure the json data is a string
        if (data['evidence_type'] && !(typeof data['evidence_type'] === 'string' || data['evidence_type'] instanceof String)) {
            throw new Error("Expected the field `evidence_type` to be a primitive type in the JSON string but got " + data['evidence_type']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['uploaded_at'] && !(typeof data['uploaded_at'] === 'string' || data['uploaded_at'] instanceof String)) {
            throw new Error("Expected the field `uploaded_at` to be a primitive type in the JSON string but got " + data['uploaded_at']);
        }

        return true;
    }


}



/**
 * The ID of the dispute the evidence is associated with.
 * @member {String} dispute_id
 */
DisputeEvidence.prototype['dispute_id'] = undefined;

/**
 * @member {module:model/DisputeEvidenceFile} evidence_file
 */
DisputeEvidence.prototype['evidence_file'] = undefined;

/**
 * The Square-generated ID of the evidence.
 * @member {String} evidence_id
 */
DisputeEvidence.prototype['evidence_id'] = undefined;

/**
 * Raw text
 * @member {String} evidence_text
 */
DisputeEvidence.prototype['evidence_text'] = undefined;

/**
 * The type of the evidence.
 * @member {String} evidence_type
 */
DisputeEvidence.prototype['evidence_type'] = undefined;

/**
 * The Square-generated ID of the evidence.
 * @member {String} id
 */
DisputeEvidence.prototype['id'] = undefined;

/**
 * The time when the next action is due, in RFC 3339 format.
 * @member {String} uploaded_at
 */
DisputeEvidence.prototype['uploaded_at'] = undefined;






export default DisputeEvidence;

