/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LoyaltyProgramTerminology model module.
 * @module model/LoyaltyProgramTerminology
 * @version 2.0
 */
class LoyaltyProgramTerminology {
    /**
     * Constructs a new <code>LoyaltyProgramTerminology</code>.
     * Represents the naming used for loyalty points.
     * @alias module:model/LoyaltyProgramTerminology
     * @param one {String} A singular unit for a point (for example, 1 point is called 1 star).
     * @param other {String} A plural unit for point (for example, 10 points is called 10 stars).
     */
    constructor(one, other) { 
        
        LoyaltyProgramTerminology.initialize(this, one, other);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, one, other) { 
        obj['one'] = one;
        obj['other'] = other;
    }

    /**
     * Constructs a <code>LoyaltyProgramTerminology</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoyaltyProgramTerminology} obj Optional instance to populate.
     * @return {module:model/LoyaltyProgramTerminology} The populated <code>LoyaltyProgramTerminology</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoyaltyProgramTerminology();

            if (data.hasOwnProperty('one')) {
                obj['one'] = ApiClient.convertToType(data['one'], 'String');
            }
            if (data.hasOwnProperty('other')) {
                obj['other'] = ApiClient.convertToType(data['other'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoyaltyProgramTerminology</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoyaltyProgramTerminology</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LoyaltyProgramTerminology.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['one'] && !(typeof data['one'] === 'string' || data['one'] instanceof String)) {
            throw new Error("Expected the field `one` to be a primitive type in the JSON string but got " + data['one']);
        }
        // ensure the json data is a string
        if (data['other'] && !(typeof data['other'] === 'string' || data['other'] instanceof String)) {
            throw new Error("Expected the field `other` to be a primitive type in the JSON string but got " + data['other']);
        }

        return true;
    }


}

LoyaltyProgramTerminology.RequiredProperties = ["one", "other"];

/**
 * A singular unit for a point (for example, 1 point is called 1 star).
 * @member {String} one
 */
LoyaltyProgramTerminology.prototype['one'] = undefined;

/**
 * A plural unit for point (for example, 10 points is called 10 stars).
 * @member {String} other
 */
LoyaltyProgramTerminology.prototype['other'] = undefined;






export default LoyaltyProgramTerminology;

