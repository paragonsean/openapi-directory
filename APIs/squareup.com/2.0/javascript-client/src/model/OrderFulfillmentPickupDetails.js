/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderFulfillmentPickupDetailsCurbsidePickupDetails from './OrderFulfillmentPickupDetailsCurbsidePickupDetails';
import OrderFulfillmentRecipient from './OrderFulfillmentRecipient';

/**
 * The OrderFulfillmentPickupDetails model module.
 * @module model/OrderFulfillmentPickupDetails
 * @version 2.0
 */
class OrderFulfillmentPickupDetails {
    /**
     * Constructs a new <code>OrderFulfillmentPickupDetails</code>.
     * Contains details necessary to fulfill a pickup order.
     * @alias module:model/OrderFulfillmentPickupDetails
     */
    constructor() { 
        
        OrderFulfillmentPickupDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderFulfillmentPickupDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderFulfillmentPickupDetails} obj Optional instance to populate.
     * @return {module:model/OrderFulfillmentPickupDetails} The populated <code>OrderFulfillmentPickupDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderFulfillmentPickupDetails();

            if (data.hasOwnProperty('accepted_at')) {
                obj['accepted_at'] = ApiClient.convertToType(data['accepted_at'], 'String');
            }
            if (data.hasOwnProperty('auto_complete_duration')) {
                obj['auto_complete_duration'] = ApiClient.convertToType(data['auto_complete_duration'], 'String');
            }
            if (data.hasOwnProperty('cancel_reason')) {
                obj['cancel_reason'] = ApiClient.convertToType(data['cancel_reason'], 'String');
            }
            if (data.hasOwnProperty('canceled_at')) {
                obj['canceled_at'] = ApiClient.convertToType(data['canceled_at'], 'String');
            }
            if (data.hasOwnProperty('curbside_pickup_details')) {
                obj['curbside_pickup_details'] = OrderFulfillmentPickupDetailsCurbsidePickupDetails.constructFromObject(data['curbside_pickup_details']);
            }
            if (data.hasOwnProperty('expired_at')) {
                obj['expired_at'] = ApiClient.convertToType(data['expired_at'], 'String');
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'String');
            }
            if (data.hasOwnProperty('is_curbside_pickup')) {
                obj['is_curbside_pickup'] = ApiClient.convertToType(data['is_curbside_pickup'], 'Boolean');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('picked_up_at')) {
                obj['picked_up_at'] = ApiClient.convertToType(data['picked_up_at'], 'String');
            }
            if (data.hasOwnProperty('pickup_at')) {
                obj['pickup_at'] = ApiClient.convertToType(data['pickup_at'], 'String');
            }
            if (data.hasOwnProperty('pickup_window_duration')) {
                obj['pickup_window_duration'] = ApiClient.convertToType(data['pickup_window_duration'], 'String');
            }
            if (data.hasOwnProperty('placed_at')) {
                obj['placed_at'] = ApiClient.convertToType(data['placed_at'], 'String');
            }
            if (data.hasOwnProperty('prep_time_duration')) {
                obj['prep_time_duration'] = ApiClient.convertToType(data['prep_time_duration'], 'String');
            }
            if (data.hasOwnProperty('ready_at')) {
                obj['ready_at'] = ApiClient.convertToType(data['ready_at'], 'String');
            }
            if (data.hasOwnProperty('recipient')) {
                obj['recipient'] = OrderFulfillmentRecipient.constructFromObject(data['recipient']);
            }
            if (data.hasOwnProperty('rejected_at')) {
                obj['rejected_at'] = ApiClient.convertToType(data['rejected_at'], 'String');
            }
            if (data.hasOwnProperty('schedule_type')) {
                obj['schedule_type'] = ApiClient.convertToType(data['schedule_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderFulfillmentPickupDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderFulfillmentPickupDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accepted_at'] && !(typeof data['accepted_at'] === 'string' || data['accepted_at'] instanceof String)) {
            throw new Error("Expected the field `accepted_at` to be a primitive type in the JSON string but got " + data['accepted_at']);
        }
        // ensure the json data is a string
        if (data['auto_complete_duration'] && !(typeof data['auto_complete_duration'] === 'string' || data['auto_complete_duration'] instanceof String)) {
            throw new Error("Expected the field `auto_complete_duration` to be a primitive type in the JSON string but got " + data['auto_complete_duration']);
        }
        // ensure the json data is a string
        if (data['cancel_reason'] && !(typeof data['cancel_reason'] === 'string' || data['cancel_reason'] instanceof String)) {
            throw new Error("Expected the field `cancel_reason` to be a primitive type in the JSON string but got " + data['cancel_reason']);
        }
        // ensure the json data is a string
        if (data['canceled_at'] && !(typeof data['canceled_at'] === 'string' || data['canceled_at'] instanceof String)) {
            throw new Error("Expected the field `canceled_at` to be a primitive type in the JSON string but got " + data['canceled_at']);
        }
        // validate the optional field `curbside_pickup_details`
        if (data['curbside_pickup_details']) { // data not null
          OrderFulfillmentPickupDetailsCurbsidePickupDetails.validateJSON(data['curbside_pickup_details']);
        }
        // ensure the json data is a string
        if (data['expired_at'] && !(typeof data['expired_at'] === 'string' || data['expired_at'] instanceof String)) {
            throw new Error("Expected the field `expired_at` to be a primitive type in the JSON string but got " + data['expired_at']);
        }
        // ensure the json data is a string
        if (data['expires_at'] && !(typeof data['expires_at'] === 'string' || data['expires_at'] instanceof String)) {
            throw new Error("Expected the field `expires_at` to be a primitive type in the JSON string but got " + data['expires_at']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['picked_up_at'] && !(typeof data['picked_up_at'] === 'string' || data['picked_up_at'] instanceof String)) {
            throw new Error("Expected the field `picked_up_at` to be a primitive type in the JSON string but got " + data['picked_up_at']);
        }
        // ensure the json data is a string
        if (data['pickup_at'] && !(typeof data['pickup_at'] === 'string' || data['pickup_at'] instanceof String)) {
            throw new Error("Expected the field `pickup_at` to be a primitive type in the JSON string but got " + data['pickup_at']);
        }
        // ensure the json data is a string
        if (data['pickup_window_duration'] && !(typeof data['pickup_window_duration'] === 'string' || data['pickup_window_duration'] instanceof String)) {
            throw new Error("Expected the field `pickup_window_duration` to be a primitive type in the JSON string but got " + data['pickup_window_duration']);
        }
        // ensure the json data is a string
        if (data['placed_at'] && !(typeof data['placed_at'] === 'string' || data['placed_at'] instanceof String)) {
            throw new Error("Expected the field `placed_at` to be a primitive type in the JSON string but got " + data['placed_at']);
        }
        // ensure the json data is a string
        if (data['prep_time_duration'] && !(typeof data['prep_time_duration'] === 'string' || data['prep_time_duration'] instanceof String)) {
            throw new Error("Expected the field `prep_time_duration` to be a primitive type in the JSON string but got " + data['prep_time_duration']);
        }
        // ensure the json data is a string
        if (data['ready_at'] && !(typeof data['ready_at'] === 'string' || data['ready_at'] instanceof String)) {
            throw new Error("Expected the field `ready_at` to be a primitive type in the JSON string but got " + data['ready_at']);
        }
        // validate the optional field `recipient`
        if (data['recipient']) { // data not null
          OrderFulfillmentRecipient.validateJSON(data['recipient']);
        }
        // ensure the json data is a string
        if (data['rejected_at'] && !(typeof data['rejected_at'] === 'string' || data['rejected_at'] instanceof String)) {
            throw new Error("Expected the field `rejected_at` to be a primitive type in the JSON string but got " + data['rejected_at']);
        }
        // ensure the json data is a string
        if (data['schedule_type'] && !(typeof data['schedule_type'] === 'string' || data['schedule_type'] instanceof String)) {
            throw new Error("Expected the field `schedule_type` to be a primitive type in the JSON string but got " + data['schedule_type']);
        }

        return true;
    }


}



/**
 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)  indicating when the fulfillment was accepted. The timestamp must be in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").
 * @member {String} accepted_at
 */
OrderFulfillmentPickupDetails.prototype['accepted_at'] = undefined;

/**
 * The duration of time after which an open and accepted pickup fulfillment is automatically moved to the `COMPLETED` state. The duration must be in RFC 3339 format (for example, \"P1W3D\").  If not set, this pickup fulfillment remains accepted until it is canceled or completed.
 * @member {String} auto_complete_duration
 */
OrderFulfillmentPickupDetails.prototype['auto_complete_duration'] = undefined;

/**
 * A description of why the pickup was canceled. The maximum length: 100 characters.
 * @member {String} cancel_reason
 */
OrderFulfillmentPickupDetails.prototype['cancel_reason'] = undefined;

/**
 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)  indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").
 * @member {String} canceled_at
 */
OrderFulfillmentPickupDetails.prototype['canceled_at'] = undefined;

/**
 * @member {module:model/OrderFulfillmentPickupDetailsCurbsidePickupDetails} curbside_pickup_details
 */
OrderFulfillmentPickupDetails.prototype['curbside_pickup_details'] = undefined;

/**
 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) indicating when the fulfillment expired. The timestamp must be in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").
 * @member {String} expired_at
 */
OrderFulfillmentPickupDetails.prototype['expired_at'] = undefined;

/**
 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)  indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\"). The expiration time can only be set up to 7 days in the future. If `expires_at` is not set, this pickup fulfillment is automatically accepted when  placed.
 * @member {String} expires_at
 */
OrderFulfillmentPickupDetails.prototype['expires_at'] = undefined;

/**
 * If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.
 * @member {Boolean} is_curbside_pickup
 */
OrderFulfillmentPickupDetails.prototype['is_curbside_pickup'] = undefined;

/**
 * A note meant to provide additional instructions about the pickup fulfillment displayed in the Square Point of Sale application and set by the API.
 * @member {String} note
 */
OrderFulfillmentPickupDetails.prototype['note'] = undefined;

/**
 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").
 * @member {String} picked_up_at
 */
OrderFulfillmentPickupDetails.prototype['picked_up_at'] = undefined;

/**
 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)  that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g.,  \"2016-09-04T23:59:33.123Z\".  For fulfillments with the schedule type `ASAP`, this is automatically set to the current time plus the expected duration to prepare the fulfillment.
 * @member {String} pickup_at
 */
OrderFulfillmentPickupDetails.prototype['pickup_at'] = undefined;

/**
 * The window of time in which the order should be picked up after the `pickup_at` timestamp. Must be in RFC 3339 duration format, e.g., \"P1W3D\". Can be used as an informational guideline for merchants.
 * @member {String} pickup_window_duration
 */
OrderFulfillmentPickupDetails.prototype['pickup_window_duration'] = undefined;

/**
 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)  indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").
 * @member {String} placed_at
 */
OrderFulfillmentPickupDetails.prototype['placed_at'] = undefined;

/**
 * The duration of time it takes to prepare this fulfillment. The duration must be in RFC 3339 format (for example, \"P1W3D\").
 * @member {String} prep_time_duration
 */
OrderFulfillmentPickupDetails.prototype['prep_time_duration'] = undefined;

/**
 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)  indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").
 * @member {String} ready_at
 */
OrderFulfillmentPickupDetails.prototype['ready_at'] = undefined;

/**
 * @member {module:model/OrderFulfillmentRecipient} recipient
 */
OrderFulfillmentPickupDetails.prototype['recipient'] = undefined;

/**
 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)  indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format (for example, \"2016-09-04T23:59:33.123Z\").
 * @member {String} rejected_at
 */
OrderFulfillmentPickupDetails.prototype['rejected_at'] = undefined;

/**
 * The schedule type of the pickup fulfillment. Defaults to `SCHEDULED`.
 * @member {String} schedule_type
 */
OrderFulfillmentPickupDetails.prototype['schedule_type'] = undefined;






export default OrderFulfillmentPickupDetails;

