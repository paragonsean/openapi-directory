/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BreakType from './BreakType';

/**
 * The CreateBreakTypeRequest model module.
 * @module model/CreateBreakTypeRequest
 * @version 2.0
 */
class CreateBreakTypeRequest {
    /**
     * Constructs a new <code>CreateBreakTypeRequest</code>.
     * A request to create a new &#x60;BreakType&#x60;.
     * @alias module:model/CreateBreakTypeRequest
     * @param breakType {module:model/BreakType} 
     */
    constructor(breakType) { 
        
        CreateBreakTypeRequest.initialize(this, breakType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, breakType) { 
        obj['break_type'] = breakType;
    }

    /**
     * Constructs a <code>CreateBreakTypeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateBreakTypeRequest} obj Optional instance to populate.
     * @return {module:model/CreateBreakTypeRequest} The populated <code>CreateBreakTypeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateBreakTypeRequest();

            if (data.hasOwnProperty('break_type')) {
                obj['break_type'] = BreakType.constructFromObject(data['break_type']);
            }
            if (data.hasOwnProperty('idempotency_key')) {
                obj['idempotency_key'] = ApiClient.convertToType(data['idempotency_key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateBreakTypeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateBreakTypeRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateBreakTypeRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `break_type`
        if (data['break_type']) { // data not null
          BreakType.validateJSON(data['break_type']);
        }
        // ensure the json data is a string
        if (data['idempotency_key'] && !(typeof data['idempotency_key'] === 'string' || data['idempotency_key'] instanceof String)) {
            throw new Error("Expected the field `idempotency_key` to be a primitive type in the JSON string but got " + data['idempotency_key']);
        }

        return true;
    }


}

CreateBreakTypeRequest.RequiredProperties = ["break_type"];

/**
 * @member {module:model/BreakType} break_type
 */
CreateBreakTypeRequest.prototype['break_type'] = undefined;

/**
 * A unique string value to ensure the idempotency of the operation.
 * @member {String} idempotency_key
 */
CreateBreakTypeRequest.prototype['idempotency_key'] = undefined;






export default CreateBreakTypeRequest;

