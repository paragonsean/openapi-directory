/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The V1EmployeeRole model module.
 * @module model/V1EmployeeRole
 * @version 2.0
 */
class V1EmployeeRole {
    /**
     * Constructs a new <code>V1EmployeeRole</code>.
     * V1EmployeeRole
     * @alias module:model/V1EmployeeRole
     * @param name {String} The role's merchant-defined name.
     * @param permissions {Array.<String>} The role's permissions.
     */
    constructor(name, permissions) { 
        
        V1EmployeeRole.initialize(this, name, permissions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, permissions) { 
        obj['name'] = name;
        obj['permissions'] = permissions;
    }

    /**
     * Constructs a <code>V1EmployeeRole</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1EmployeeRole} obj Optional instance to populate.
     * @return {module:model/V1EmployeeRole} The populated <code>V1EmployeeRole</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1EmployeeRole();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_owner')) {
                obj['is_owner'] = ApiClient.convertToType(data['is_owner'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], ['String']);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1EmployeeRole</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1EmployeeRole</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of V1EmployeeRole.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['permissions'])) {
            throw new Error("Expected the field `permissions` to be an array in the JSON data but got " + data['permissions']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

V1EmployeeRole.RequiredProperties = ["name", "permissions"];

/**
 * The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created.
 * @member {String} created_at
 */
V1EmployeeRole.prototype['created_at'] = undefined;

/**
 * The role's unique ID, Can only be set by Square.
 * @member {String} id
 */
V1EmployeeRole.prototype['id'] = undefined;

/**
 * If true, employees with this role have all permissions, regardless of the values indicated in permissions.
 * @member {Boolean} is_owner
 */
V1EmployeeRole.prototype['is_owner'] = undefined;

/**
 * The role's merchant-defined name.
 * @member {String} name
 */
V1EmployeeRole.prototype['name'] = undefined;

/**
 * The role's permissions.
 * @member {Array.<String>} permissions
 */
V1EmployeeRole.prototype['permissions'] = undefined;

/**
 * The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated.
 * @member {String} updated_at
 */
V1EmployeeRole.prototype['updated_at'] = undefined;






export default V1EmployeeRole;

