/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Error from './Error';
import V1Money from './V1Money';

/**
 * The V1PaymentTax model module.
 * @module model/V1PaymentTax
 * @version 2.0
 */
class V1PaymentTax {
    /**
     * Constructs a new <code>V1PaymentTax</code>.
     * V1PaymentTax
     * @alias module:model/V1PaymentTax
     */
    constructor() { 
        
        V1PaymentTax.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V1PaymentTax</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1PaymentTax} obj Optional instance to populate.
     * @return {module:model/V1PaymentTax} The populated <code>V1PaymentTax</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1PaymentTax();

            if (data.hasOwnProperty('applied_money')) {
                obj['applied_money'] = V1Money.constructFromObject(data['applied_money']);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Error]);
            }
            if (data.hasOwnProperty('fee_id')) {
                obj['fee_id'] = ApiClient.convertToType(data['fee_id'], 'String');
            }
            if (data.hasOwnProperty('inclusion_type')) {
                obj['inclusion_type'] = ApiClient.convertToType(data['inclusion_type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1PaymentTax</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1PaymentTax</code>.
     */
    static validateJSON(data) {
        // validate the optional field `applied_money`
        if (data['applied_money']) { // data not null
          V1Money.validateJSON(data['applied_money']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                Error.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['fee_id'] && !(typeof data['fee_id'] === 'string' || data['fee_id'] instanceof String)) {
            throw new Error("Expected the field `fee_id` to be a primitive type in the JSON string but got " + data['fee_id']);
        }
        // ensure the json data is a string
        if (data['inclusion_type'] && !(typeof data['inclusion_type'] === 'string' || data['inclusion_type'] instanceof String)) {
            throw new Error("Expected the field `inclusion_type` to be a primitive type in the JSON string but got " + data['inclusion_type']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['rate'] && !(typeof data['rate'] === 'string' || data['rate'] instanceof String)) {
            throw new Error("Expected the field `rate` to be a primitive type in the JSON string but got " + data['rate']);
        }

        return true;
    }


}



/**
 * @member {module:model/V1Money} applied_money
 */
V1PaymentTax.prototype['applied_money'] = undefined;

/**
 * Any errors that occurred during the request.
 * @member {Array.<module:model/Error>} errors
 */
V1PaymentTax.prototype['errors'] = undefined;

/**
 * The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.
 * @member {String} fee_id
 */
V1PaymentTax.prototype['fee_id'] = undefined;

/**
 * Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
 * @member {String} inclusion_type
 */
V1PaymentTax.prototype['inclusion_type'] = undefined;

/**
 * The merchant-defined name of the tax.
 * @member {String} name
 */
V1PaymentTax.prototype['name'] = undefined;

/**
 * The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
 * @member {String} rate
 */
V1PaymentTax.prototype['rate'] = undefined;






export default V1PaymentTax;

