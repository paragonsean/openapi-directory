/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import CashPaymentDetails from './CashPaymentDetails';
import ExternalPaymentDetails from './ExternalPaymentDetails';
import Money from './Money';

/**
 * The CreatePaymentRequest model module.
 * @module model/CreatePaymentRequest
 * @version 2.0
 */
class CreatePaymentRequest {
    /**
     * Constructs a new <code>CreatePaymentRequest</code>.
     * Describes a request to create a payment using  [CreatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment).
     * @alias module:model/CreatePaymentRequest
     * @param amountMoney {module:model/Money} 
     * @param idempotencyKey {String} A unique string that identifies this `CreatePayment` request. Keys can be any valid string but must be unique for every `CreatePayment` request.  Max: 45 characters  Note: The number of allowed characters might be less than the stated maximum, if multi-byte characters are used.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
     * @param sourceId {String} The ID for the source of funds for this payment. This can be a payment token  (card nonce) generated by the Square payment form or a card on file made with the  Customers API. If recording a payment that the seller  received outside of Square, specify either \"CASH\" or \"EXTERNAL\".  For more information, see  [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).
     */
    constructor(amountMoney, idempotencyKey, sourceId) { 
        
        CreatePaymentRequest.initialize(this, amountMoney, idempotencyKey, sourceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amountMoney, idempotencyKey, sourceId) { 
        obj['amount_money'] = amountMoney;
        obj['idempotency_key'] = idempotencyKey;
        obj['source_id'] = sourceId;
    }

    /**
     * Constructs a <code>CreatePaymentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreatePaymentRequest} obj Optional instance to populate.
     * @return {module:model/CreatePaymentRequest} The populated <code>CreatePaymentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreatePaymentRequest();

            if (data.hasOwnProperty('accept_partial_authorization')) {
                obj['accept_partial_authorization'] = ApiClient.convertToType(data['accept_partial_authorization'], 'Boolean');
            }
            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('app_fee_money')) {
                obj['app_fee_money'] = Money.constructFromObject(data['app_fee_money']);
            }
            if (data.hasOwnProperty('autocomplete')) {
                obj['autocomplete'] = ApiClient.convertToType(data['autocomplete'], 'Boolean');
            }
            if (data.hasOwnProperty('billing_address')) {
                obj['billing_address'] = Address.constructFromObject(data['billing_address']);
            }
            if (data.hasOwnProperty('buyer_email_address')) {
                obj['buyer_email_address'] = ApiClient.convertToType(data['buyer_email_address'], 'String');
            }
            if (data.hasOwnProperty('cash_details')) {
                obj['cash_details'] = CashPaymentDetails.constructFromObject(data['cash_details']);
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('delay_duration')) {
                obj['delay_duration'] = ApiClient.convertToType(data['delay_duration'], 'String');
            }
            if (data.hasOwnProperty('external_details')) {
                obj['external_details'] = ExternalPaymentDetails.constructFromObject(data['external_details']);
            }
            if (data.hasOwnProperty('idempotency_key')) {
                obj['idempotency_key'] = ApiClient.convertToType(data['idempotency_key'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
            }
            if (data.hasOwnProperty('reference_id')) {
                obj['reference_id'] = ApiClient.convertToType(data['reference_id'], 'String');
            }
            if (data.hasOwnProperty('shipping_address')) {
                obj['shipping_address'] = Address.constructFromObject(data['shipping_address']);
            }
            if (data.hasOwnProperty('source_id')) {
                obj['source_id'] = ApiClient.convertToType(data['source_id'], 'String');
            }
            if (data.hasOwnProperty('statement_description_identifier')) {
                obj['statement_description_identifier'] = ApiClient.convertToType(data['statement_description_identifier'], 'String');
            }
            if (data.hasOwnProperty('tip_money')) {
                obj['tip_money'] = Money.constructFromObject(data['tip_money']);
            }
            if (data.hasOwnProperty('verification_token')) {
                obj['verification_token'] = ApiClient.convertToType(data['verification_token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreatePaymentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreatePaymentRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreatePaymentRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          Money.validateJSON(data['amount_money']);
        }
        // validate the optional field `app_fee_money`
        if (data['app_fee_money']) { // data not null
          Money.validateJSON(data['app_fee_money']);
        }
        // validate the optional field `billing_address`
        if (data['billing_address']) { // data not null
          Address.validateJSON(data['billing_address']);
        }
        // ensure the json data is a string
        if (data['buyer_email_address'] && !(typeof data['buyer_email_address'] === 'string' || data['buyer_email_address'] instanceof String)) {
            throw new Error("Expected the field `buyer_email_address` to be a primitive type in the JSON string but got " + data['buyer_email_address']);
        }
        // validate the optional field `cash_details`
        if (data['cash_details']) { // data not null
          CashPaymentDetails.validateJSON(data['cash_details']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['delay_duration'] && !(typeof data['delay_duration'] === 'string' || data['delay_duration'] instanceof String)) {
            throw new Error("Expected the field `delay_duration` to be a primitive type in the JSON string but got " + data['delay_duration']);
        }
        // validate the optional field `external_details`
        if (data['external_details']) { // data not null
          ExternalPaymentDetails.validateJSON(data['external_details']);
        }
        // ensure the json data is a string
        if (data['idempotency_key'] && !(typeof data['idempotency_key'] === 'string' || data['idempotency_key'] instanceof String)) {
            throw new Error("Expected the field `idempotency_key` to be a primitive type in the JSON string but got " + data['idempotency_key']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
            throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
        }
        // ensure the json data is a string
        if (data['reference_id'] && !(typeof data['reference_id'] === 'string' || data['reference_id'] instanceof String)) {
            throw new Error("Expected the field `reference_id` to be a primitive type in the JSON string but got " + data['reference_id']);
        }
        // validate the optional field `shipping_address`
        if (data['shipping_address']) { // data not null
          Address.validateJSON(data['shipping_address']);
        }
        // ensure the json data is a string
        if (data['source_id'] && !(typeof data['source_id'] === 'string' || data['source_id'] instanceof String)) {
            throw new Error("Expected the field `source_id` to be a primitive type in the JSON string but got " + data['source_id']);
        }
        // ensure the json data is a string
        if (data['statement_description_identifier'] && !(typeof data['statement_description_identifier'] === 'string' || data['statement_description_identifier'] instanceof String)) {
            throw new Error("Expected the field `statement_description_identifier` to be a primitive type in the JSON string but got " + data['statement_description_identifier']);
        }
        // validate the optional field `tip_money`
        if (data['tip_money']) { // data not null
          Money.validateJSON(data['tip_money']);
        }
        // ensure the json data is a string
        if (data['verification_token'] && !(typeof data['verification_token'] === 'string' || data['verification_token'] instanceof String)) {
            throw new Error("Expected the field `verification_token` to be a primitive type in the JSON string but got " + data['verification_token']);
        }

        return true;
    }


}

CreatePaymentRequest.RequiredProperties = ["amount_money", "idempotency_key", "source_id"];

/**
 * If set to `true` and charging a Square Gift Card, a payment might be returned with `amount_money` equal to less than what was requested. For example, a request for $20 when charging a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card payment. This field cannot be `true` when `autocomplete = true`.  For more information, see [Partial amount with Square Gift Cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).  Default: false
 * @member {Boolean} accept_partial_authorization
 */
CreatePaymentRequest.prototype['accept_partial_authorization'] = undefined;

/**
 * @member {module:model/Money} amount_money
 */
CreatePaymentRequest.prototype['amount_money'] = undefined;

/**
 * @member {module:model/Money} app_fee_money
 */
CreatePaymentRequest.prototype['app_fee_money'] = undefined;

/**
 * If set to `true`, this payment will be completed when possible. If set to `false`, this payment is held in an approved state until either explicitly completed (captured) or canceled (voided). For more information, see [Delayed capture](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).  Default: true
 * @member {Boolean} autocomplete
 */
CreatePaymentRequest.prototype['autocomplete'] = undefined;

/**
 * @member {module:model/Address} billing_address
 */
CreatePaymentRequest.prototype['billing_address'] = undefined;

/**
 * The buyer's email address.
 * @member {String} buyer_email_address
 */
CreatePaymentRequest.prototype['buyer_email_address'] = undefined;

/**
 * @member {module:model/CashPaymentDetails} cash_details
 */
CreatePaymentRequest.prototype['cash_details'] = undefined;

/**
 * The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.  This is required if the `source_id` refers to a card on file created using the Customers API.
 * @member {String} customer_id
 */
CreatePaymentRequest.prototype['customer_id'] = undefined;

/**
 * The duration of time after the payment's creation when Square automatically cancels the payment. This automatic cancellation applies only to payments that do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.  This parameter should be specified as a time duration, in RFC 3339 format, with a minimum value of 1 minute.  Note: This feature is only supported for card payments. This parameter can only be set for a delayed capture payment (`autocomplete=false`).  Default:  - Card-present payments: \"PT36H\" (36 hours) from the creation time. - Card-not-present payments: \"P7D\" (7 days) from the creation time.
 * @member {String} delay_duration
 */
CreatePaymentRequest.prototype['delay_duration'] = undefined;

/**
 * @member {module:model/ExternalPaymentDetails} external_details
 */
CreatePaymentRequest.prototype['external_details'] = undefined;

/**
 * A unique string that identifies this `CreatePayment` request. Keys can be any valid string but must be unique for every `CreatePayment` request.  Max: 45 characters  Note: The number of allowed characters might be less than the stated maximum, if multi-byte characters are used.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
 * @member {String} idempotency_key
 */
CreatePaymentRequest.prototype['idempotency_key'] = undefined;

/**
 * The location ID to associate with the payment. If not specified, the default location is used.
 * @member {String} location_id
 */
CreatePaymentRequest.prototype['location_id'] = undefined;

/**
 * An optional note to be entered by the developer when creating a payment.  Limit 500 characters.
 * @member {String} note
 */
CreatePaymentRequest.prototype['note'] = undefined;

/**
 * Associates a previously created order with this payment.
 * @member {String} order_id
 */
CreatePaymentRequest.prototype['order_id'] = undefined;

/**
 * A user-defined ID to associate with the payment.  You can use this field to associate the payment to an entity in an external system  (for example, you might specify an order ID that is generated by a third-party shopping cart).  Limit 40 characters.
 * @member {String} reference_id
 */
CreatePaymentRequest.prototype['reference_id'] = undefined;

/**
 * @member {module:model/Address} shipping_address
 */
CreatePaymentRequest.prototype['shipping_address'] = undefined;

/**
 * The ID for the source of funds for this payment. This can be a payment token  (card nonce) generated by the Square payment form or a card on file made with the  Customers API. If recording a payment that the seller  received outside of Square, specify either \"CASH\" or \"EXTERNAL\".  For more information, see  [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).
 * @member {String} source_id
 */
CreatePaymentRequest.prototype['source_id'] = undefined;

/**
 * Optional additional payment information to include on the customer's card statement as part of the statement description. This can be, for example, an invoice number, ticket number, or short description that uniquely identifies the purchase.  Note that the `statement_description_identifier` might get truncated on the statement description to fit the required information including the Square identifier (SQ *) and name of the seller taking the payment.
 * @member {String} statement_description_identifier
 */
CreatePaymentRequest.prototype['statement_description_identifier'] = undefined;

/**
 * @member {module:model/Money} tip_money
 */
CreatePaymentRequest.prototype['tip_money'] = undefined;

/**
 * An identifying token generated by [payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer). Verification tokens encapsulate customer device information and 3-D Secure challenge results to indicate that Square has verified the buyer identity.  For more information, see [SCA Overview](https://developer.squareup.com/docs/sca-overview).
 * @member {String} verification_token
 */
CreatePaymentRequest.prototype['verification_token'] = undefined;






export default CreatePaymentRequest;

