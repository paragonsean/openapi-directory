/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoyaltyEventAccumulatePoints from './LoyaltyEventAccumulatePoints';
import LoyaltyEventAdjustPoints from './LoyaltyEventAdjustPoints';
import LoyaltyEventCreateReward from './LoyaltyEventCreateReward';
import LoyaltyEventDeleteReward from './LoyaltyEventDeleteReward';
import LoyaltyEventExpirePoints from './LoyaltyEventExpirePoints';
import LoyaltyEventOther from './LoyaltyEventOther';
import LoyaltyEventRedeemReward from './LoyaltyEventRedeemReward';

/**
 * The LoyaltyEvent model module.
 * @module model/LoyaltyEvent
 * @version 2.0
 */
class LoyaltyEvent {
    /**
     * Constructs a new <code>LoyaltyEvent</code>.
     * Provides information about a loyalty event.  For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).
     * @alias module:model/LoyaltyEvent
     * @param createdAt {String} The timestamp when the event was created, in RFC 3339 format.
     * @param id {String} The Square-assigned ID of the loyalty event.
     * @param loyaltyAccountId {String} The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) in which the event occurred.
     * @param source {String} Defines whether the event was generated by the Square Point of Sale.
     * @param type {String} The type of the loyalty event.
     */
    constructor(createdAt, id, loyaltyAccountId, source, type) { 
        
        LoyaltyEvent.initialize(this, createdAt, id, loyaltyAccountId, source, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, id, loyaltyAccountId, source, type) { 
        obj['created_at'] = createdAt;
        obj['id'] = id;
        obj['loyalty_account_id'] = loyaltyAccountId;
        obj['source'] = source;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>LoyaltyEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoyaltyEvent} obj Optional instance to populate.
     * @return {module:model/LoyaltyEvent} The populated <code>LoyaltyEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoyaltyEvent();

            if (data.hasOwnProperty('accumulate_points')) {
                obj['accumulate_points'] = LoyaltyEventAccumulatePoints.constructFromObject(data['accumulate_points']);
            }
            if (data.hasOwnProperty('adjust_points')) {
                obj['adjust_points'] = LoyaltyEventAdjustPoints.constructFromObject(data['adjust_points']);
            }
            if (data.hasOwnProperty('create_reward')) {
                obj['create_reward'] = LoyaltyEventCreateReward.constructFromObject(data['create_reward']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('delete_reward')) {
                obj['delete_reward'] = LoyaltyEventDeleteReward.constructFromObject(data['delete_reward']);
            }
            if (data.hasOwnProperty('expire_points')) {
                obj['expire_points'] = LoyaltyEventExpirePoints.constructFromObject(data['expire_points']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('loyalty_account_id')) {
                obj['loyalty_account_id'] = ApiClient.convertToType(data['loyalty_account_id'], 'String');
            }
            if (data.hasOwnProperty('other_event')) {
                obj['other_event'] = LoyaltyEventOther.constructFromObject(data['other_event']);
            }
            if (data.hasOwnProperty('redeem_reward')) {
                obj['redeem_reward'] = LoyaltyEventRedeemReward.constructFromObject(data['redeem_reward']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoyaltyEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoyaltyEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LoyaltyEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `accumulate_points`
        if (data['accumulate_points']) { // data not null
          LoyaltyEventAccumulatePoints.validateJSON(data['accumulate_points']);
        }
        // validate the optional field `adjust_points`
        if (data['adjust_points']) { // data not null
          LoyaltyEventAdjustPoints.validateJSON(data['adjust_points']);
        }
        // validate the optional field `create_reward`
        if (data['create_reward']) { // data not null
          LoyaltyEventCreateReward.validateJSON(data['create_reward']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // validate the optional field `delete_reward`
        if (data['delete_reward']) { // data not null
          LoyaltyEventDeleteReward.validateJSON(data['delete_reward']);
        }
        // validate the optional field `expire_points`
        if (data['expire_points']) { // data not null
          LoyaltyEventExpirePoints.validateJSON(data['expire_points']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // ensure the json data is a string
        if (data['loyalty_account_id'] && !(typeof data['loyalty_account_id'] === 'string' || data['loyalty_account_id'] instanceof String)) {
            throw new Error("Expected the field `loyalty_account_id` to be a primitive type in the JSON string but got " + data['loyalty_account_id']);
        }
        // validate the optional field `other_event`
        if (data['other_event']) { // data not null
          LoyaltyEventOther.validateJSON(data['other_event']);
        }
        // validate the optional field `redeem_reward`
        if (data['redeem_reward']) { // data not null
          LoyaltyEventRedeemReward.validateJSON(data['redeem_reward']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

LoyaltyEvent.RequiredProperties = ["created_at", "id", "loyalty_account_id", "source", "type"];

/**
 * @member {module:model/LoyaltyEventAccumulatePoints} accumulate_points
 */
LoyaltyEvent.prototype['accumulate_points'] = undefined;

/**
 * @member {module:model/LoyaltyEventAdjustPoints} adjust_points
 */
LoyaltyEvent.prototype['adjust_points'] = undefined;

/**
 * @member {module:model/LoyaltyEventCreateReward} create_reward
 */
LoyaltyEvent.prototype['create_reward'] = undefined;

/**
 * The timestamp when the event was created, in RFC 3339 format.
 * @member {String} created_at
 */
LoyaltyEvent.prototype['created_at'] = undefined;

/**
 * @member {module:model/LoyaltyEventDeleteReward} delete_reward
 */
LoyaltyEvent.prototype['delete_reward'] = undefined;

/**
 * @member {module:model/LoyaltyEventExpirePoints} expire_points
 */
LoyaltyEvent.prototype['expire_points'] = undefined;

/**
 * The Square-assigned ID of the loyalty event.
 * @member {String} id
 */
LoyaltyEvent.prototype['id'] = undefined;

/**
 * The ID of the [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the event occurred.
 * @member {String} location_id
 */
LoyaltyEvent.prototype['location_id'] = undefined;

/**
 * The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) in which the event occurred.
 * @member {String} loyalty_account_id
 */
LoyaltyEvent.prototype['loyalty_account_id'] = undefined;

/**
 * @member {module:model/LoyaltyEventOther} other_event
 */
LoyaltyEvent.prototype['other_event'] = undefined;

/**
 * @member {module:model/LoyaltyEventRedeemReward} redeem_reward
 */
LoyaltyEvent.prototype['redeem_reward'] = undefined;

/**
 * Defines whether the event was generated by the Square Point of Sale.
 * @member {String} source
 */
LoyaltyEvent.prototype['source'] = undefined;

/**
 * The type of the loyalty event.
 * @member {String} type
 */
LoyaltyEvent.prototype['type'] = undefined;






export default LoyaltyEvent;

