/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Break from './Break';
import ShiftWage from './ShiftWage';

/**
 * The Shift model module.
 * @module model/Shift
 * @version 2.0
 */
class Shift {
    /**
     * Constructs a new <code>Shift</code>.
     * A record of the hourly rate, start, and end times for a single work shift for an employee. This might include a record of the start and end times for breaks taken during the shift.
     * @alias module:model/Shift
     * @param startAt {String} RFC 3339; shifted to the location timezone + offset. Precision up to the minute is respected; seconds are truncated.
     */
    constructor(startAt) { 
        
        Shift.initialize(this, startAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, startAt) { 
        obj['start_at'] = startAt;
    }

    /**
     * Constructs a <code>Shift</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Shift} obj Optional instance to populate.
     * @return {module:model/Shift} The populated <code>Shift</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Shift();

            if (data.hasOwnProperty('breaks')) {
                obj['breaks'] = ApiClient.convertToType(data['breaks'], [Break]);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('employee_id')) {
                obj['employee_id'] = ApiClient.convertToType(data['employee_id'], 'String');
            }
            if (data.hasOwnProperty('end_at')) {
                obj['end_at'] = ApiClient.convertToType(data['end_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location_id')) {
                obj['location_id'] = ApiClient.convertToType(data['location_id'], 'String');
            }
            if (data.hasOwnProperty('start_at')) {
                obj['start_at'] = ApiClient.convertToType(data['start_at'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('team_member_id')) {
                obj['team_member_id'] = ApiClient.convertToType(data['team_member_id'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('wage')) {
                obj['wage'] = ShiftWage.constructFromObject(data['wage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Shift</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Shift</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Shift.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['breaks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['breaks'])) {
                throw new Error("Expected the field `breaks` to be an array in the JSON data but got " + data['breaks']);
            }
            // validate the optional field `breaks` (array)
            for (const item of data['breaks']) {
                Break.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['employee_id'] && !(typeof data['employee_id'] === 'string' || data['employee_id'] instanceof String)) {
            throw new Error("Expected the field `employee_id` to be a primitive type in the JSON string but got " + data['employee_id']);
        }
        // ensure the json data is a string
        if (data['end_at'] && !(typeof data['end_at'] === 'string' || data['end_at'] instanceof String)) {
            throw new Error("Expected the field `end_at` to be a primitive type in the JSON string but got " + data['end_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location_id'] && !(typeof data['location_id'] === 'string' || data['location_id'] instanceof String)) {
            throw new Error("Expected the field `location_id` to be a primitive type in the JSON string but got " + data['location_id']);
        }
        // ensure the json data is a string
        if (data['start_at'] && !(typeof data['start_at'] === 'string' || data['start_at'] instanceof String)) {
            throw new Error("Expected the field `start_at` to be a primitive type in the JSON string but got " + data['start_at']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['team_member_id'] && !(typeof data['team_member_id'] === 'string' || data['team_member_id'] instanceof String)) {
            throw new Error("Expected the field `team_member_id` to be a primitive type in the JSON string but got " + data['team_member_id']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // validate the optional field `wage`
        if (data['wage']) { // data not null
          ShiftWage.validateJSON(data['wage']);
        }

        return true;
    }


}

Shift.RequiredProperties = ["start_at"];

/**
 * A list of all the paid or unpaid breaks that were taken during this shift.
 * @member {Array.<module:model/Break>} breaks
 */
Shift.prototype['breaks'] = undefined;

/**
 * A read-only timestamp in RFC 3339 format; presented in UTC.
 * @member {String} created_at
 */
Shift.prototype['created_at'] = undefined;

/**
 * The ID of the employee this shift belongs to. DEPRECATED at version 2020-08-26. Use `team_member_id` instead.
 * @member {String} employee_id
 */
Shift.prototype['employee_id'] = undefined;

/**
 * RFC 3339; shifted to the timezone + offset. Precision up to the minute is respected; seconds are truncated.
 * @member {String} end_at
 */
Shift.prototype['end_at'] = undefined;

/**
 * The UUID for this object.
 * @member {String} id
 */
Shift.prototype['id'] = undefined;

/**
 * The ID of the location this shift occurred at. The location should be based on where the employee clocked in.
 * @member {String} location_id
 */
Shift.prototype['location_id'] = undefined;

/**
 * RFC 3339; shifted to the location timezone + offset. Precision up to the minute is respected; seconds are truncated.
 * @member {String} start_at
 */
Shift.prototype['start_at'] = undefined;

/**
 * Describes the working state of the current `Shift`.
 * @member {String} status
 */
Shift.prototype['status'] = undefined;

/**
 * The ID of the team member this shift belongs to. Replaced `employee_id` at version \"2020-08-26\".
 * @member {String} team_member_id
 */
Shift.prototype['team_member_id'] = undefined;

/**
 * The read-only convenience value that is calculated from the location based on the `location_id`. Format: the IANA timezone database identifier for the location timezone.
 * @member {String} timezone
 */
Shift.prototype['timezone'] = undefined;

/**
 * A read-only timestamp in RFC 3339 format; presented in UTC.
 * @member {String} updated_at
 */
Shift.prototype['updated_at'] = undefined;

/**
 * Used for resolving concurrency issues. The request fails if the version provided does not match the server version at the time of the request. If not provided, Square executes a blind write; potentially overwriting data from another write.
 * @member {Number} version
 */
Shift.prototype['version'] = undefined;

/**
 * @member {module:model/ShiftWage} wage
 */
Shift.prototype['wage'] = undefined;






export default Shift;

