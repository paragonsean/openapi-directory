/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The GiftCardActivityActivate model module.
 * @module model/GiftCardActivityActivate
 * @version 2.0
 */
class GiftCardActivityActivate {
    /**
     * Constructs a new <code>GiftCardActivityActivate</code>.
     * Describes a gift card activity of the ACTIVATE type.
     * @alias module:model/GiftCardActivityActivate
     */
    constructor() { 
        
        GiftCardActivityActivate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GiftCardActivityActivate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GiftCardActivityActivate} obj Optional instance to populate.
     * @return {module:model/GiftCardActivityActivate} The populated <code>GiftCardActivityActivate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GiftCardActivityActivate();

            if (data.hasOwnProperty('amount_money')) {
                obj['amount_money'] = Money.constructFromObject(data['amount_money']);
            }
            if (data.hasOwnProperty('buyer_payment_instrument_ids')) {
                obj['buyer_payment_instrument_ids'] = ApiClient.convertToType(data['buyer_payment_instrument_ids'], ['String']);
            }
            if (data.hasOwnProperty('line_item_uid')) {
                obj['line_item_uid'] = ApiClient.convertToType(data['line_item_uid'], 'String');
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
            }
            if (data.hasOwnProperty('reference_id')) {
                obj['reference_id'] = ApiClient.convertToType(data['reference_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GiftCardActivityActivate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GiftCardActivityActivate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount_money`
        if (data['amount_money']) { // data not null
          Money.validateJSON(data['amount_money']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['buyer_payment_instrument_ids'])) {
            throw new Error("Expected the field `buyer_payment_instrument_ids` to be an array in the JSON data but got " + data['buyer_payment_instrument_ids']);
        }
        // ensure the json data is a string
        if (data['line_item_uid'] && !(typeof data['line_item_uid'] === 'string' || data['line_item_uid'] instanceof String)) {
            throw new Error("Expected the field `line_item_uid` to be a primitive type in the JSON string but got " + data['line_item_uid']);
        }
        // ensure the json data is a string
        if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
            throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
        }
        // ensure the json data is a string
        if (data['reference_id'] && !(typeof data['reference_id'] === 'string' || data['reference_id'] instanceof String)) {
            throw new Error("Expected the field `reference_id` to be a primitive type in the JSON string but got " + data['reference_id']);
        }

        return true;
    }


}



/**
 * @member {module:model/Money} amount_money
 */
GiftCardActivityActivate.prototype['amount_money'] = undefined;

/**
 * Required if your application does not use the Square Orders API.  This is a list of client-provided payment instrument IDs.  Square uses this information to perform compliance checks. If you use the Square Orders API, Square has the necessary instrument IDs to perform necessary  compliance checks.
 * @member {Array.<String>} buyer_payment_instrument_ids
 */
GiftCardActivityActivate.prototype['buyer_payment_instrument_ids'] = undefined;

/**
 * The `line_item_uid` of the gift card line item in an order.  This is required if your application uses the Square Orders API.
 * @member {String} line_item_uid
 */
GiftCardActivityActivate.prototype['line_item_uid'] = undefined;

/**
 * The ID of the order associated with the activity.  This is required if your application uses the Square Orders API.
 * @member {String} order_id
 */
GiftCardActivityActivate.prototype['order_id'] = undefined;

/**
 * If your application does not use the Square Orders API, you can optionally use this field  to associate the gift card activity with a client-side entity.
 * @member {String} reference_id
 */
GiftCardActivityActivate.prototype['reference_id'] = undefined;






export default GiftCardActivityActivate;

