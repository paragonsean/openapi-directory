/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TeamMemberAssignedLocations from './TeamMemberAssignedLocations';

/**
 * The TeamMember model module.
 * @module model/TeamMember
 * @version 2.0
 */
class TeamMember {
    /**
     * Constructs a new <code>TeamMember</code>.
     * A record representing an individual team member for a business.
     * @alias module:model/TeamMember
     */
    constructor() { 
        
        TeamMember.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TeamMember</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamMember} obj Optional instance to populate.
     * @return {module:model/TeamMember} The populated <code>TeamMember</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamMember();

            if (data.hasOwnProperty('assigned_locations')) {
                obj['assigned_locations'] = TeamMemberAssignedLocations.constructFromObject(data['assigned_locations']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('email_address')) {
                obj['email_address'] = ApiClient.convertToType(data['email_address'], 'String');
            }
            if (data.hasOwnProperty('family_name')) {
                obj['family_name'] = ApiClient.convertToType(data['family_name'], 'String');
            }
            if (data.hasOwnProperty('given_name')) {
                obj['given_name'] = ApiClient.convertToType(data['given_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_owner')) {
                obj['is_owner'] = ApiClient.convertToType(data['is_owner'], 'Boolean');
            }
            if (data.hasOwnProperty('phone_number')) {
                obj['phone_number'] = ApiClient.convertToType(data['phone_number'], 'String');
            }
            if (data.hasOwnProperty('reference_id')) {
                obj['reference_id'] = ApiClient.convertToType(data['reference_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamMember</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamMember</code>.
     */
    static validateJSON(data) {
        // validate the optional field `assigned_locations`
        if (data['assigned_locations']) { // data not null
          TeamMemberAssignedLocations.validateJSON(data['assigned_locations']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['email_address'] && !(typeof data['email_address'] === 'string' || data['email_address'] instanceof String)) {
            throw new Error("Expected the field `email_address` to be a primitive type in the JSON string but got " + data['email_address']);
        }
        // ensure the json data is a string
        if (data['family_name'] && !(typeof data['family_name'] === 'string' || data['family_name'] instanceof String)) {
            throw new Error("Expected the field `family_name` to be a primitive type in the JSON string but got " + data['family_name']);
        }
        // ensure the json data is a string
        if (data['given_name'] && !(typeof data['given_name'] === 'string' || data['given_name'] instanceof String)) {
            throw new Error("Expected the field `given_name` to be a primitive type in the JSON string but got " + data['given_name']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['phone_number'] && !(typeof data['phone_number'] === 'string' || data['phone_number'] instanceof String)) {
            throw new Error("Expected the field `phone_number` to be a primitive type in the JSON string but got " + data['phone_number']);
        }
        // ensure the json data is a string
        if (data['reference_id'] && !(typeof data['reference_id'] === 'string' || data['reference_id'] instanceof String)) {
            throw new Error("Expected the field `reference_id` to be a primitive type in the JSON string but got " + data['reference_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * @member {module:model/TeamMemberAssignedLocations} assigned_locations
 */
TeamMember.prototype['assigned_locations'] = undefined;

/**
 * The timestamp, in RFC 3339 format, describing when the team member was created. For example, \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\".
 * @member {String} created_at
 */
TeamMember.prototype['created_at'] = undefined;

/**
 * The email address associated with the team member.
 * @member {String} email_address
 */
TeamMember.prototype['email_address'] = undefined;

/**
 * The family name (that is, the last name) associated with the team member.
 * @member {String} family_name
 */
TeamMember.prototype['family_name'] = undefined;

/**
 * The given name (that is, the first name) associated with the team member.
 * @member {String} given_name
 */
TeamMember.prototype['given_name'] = undefined;

/**
 * The unique ID for the team member.
 * @member {String} id
 */
TeamMember.prototype['id'] = undefined;

/**
 * Whether the team member is the owner of the Square account.
 * @member {Boolean} is_owner
 */
TeamMember.prototype['is_owner'] = undefined;

/**
 * The team member's phone number, in E.164 format. For example: +14155552671 - the country code is 1 for US +551155256325 - the country code is 55 for BR
 * @member {String} phone_number
 */
TeamMember.prototype['phone_number'] = undefined;

/**
 * A second ID used to associate the team member with an entity in another system.
 * @member {String} reference_id
 */
TeamMember.prototype['reference_id'] = undefined;

/**
 * Describes the status of the team member.
 * @member {String} status
 */
TeamMember.prototype['status'] = undefined;

/**
 * The timestamp, in RFC 3339 format, describing when the team member was last updated. For example, \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\".
 * @member {String} updated_at
 */
TeamMember.prototype['updated_at'] = undefined;






export default TeamMember;

