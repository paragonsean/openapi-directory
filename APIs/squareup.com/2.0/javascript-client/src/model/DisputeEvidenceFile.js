/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DisputeEvidenceFile model module.
 * @module model/DisputeEvidenceFile
 * @version 2.0
 */
class DisputeEvidenceFile {
    /**
     * Constructs a new <code>DisputeEvidenceFile</code>.
     * A file to be uploaded as dispute evidence.
     * @alias module:model/DisputeEvidenceFile
     */
    constructor() { 
        
        DisputeEvidenceFile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DisputeEvidenceFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DisputeEvidenceFile} obj Optional instance to populate.
     * @return {module:model/DisputeEvidenceFile} The populated <code>DisputeEvidenceFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DisputeEvidenceFile();

            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('filetype')) {
                obj['filetype'] = ApiClient.convertToType(data['filetype'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DisputeEvidenceFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DisputeEvidenceFile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['filetype'] && !(typeof data['filetype'] === 'string' || data['filetype'] instanceof String)) {
            throw new Error("Expected the field `filetype` to be a primitive type in the JSON string but got " + data['filetype']);
        }

        return true;
    }


}



/**
 * The file name including the file extension. For example: \"receipt.tiff\".
 * @member {String} filename
 */
DisputeEvidenceFile.prototype['filename'] = undefined;

/**
 * Dispute evidence files must be application/pdf, image/heic, image/heif, image/jpeg, image/png, or image/tiff formats.
 * @member {String} filetype
 */
DisputeEvidenceFile.prototype['filetype'] = undefined;






export default DisputeEvidenceFile;

